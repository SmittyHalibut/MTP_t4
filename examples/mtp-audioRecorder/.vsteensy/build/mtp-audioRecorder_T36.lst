
.vsteensy/build/mtp-audioRecorder_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0001555c l    d  .fini	00000000 .fini
00015560 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1618 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000e104 l     F .text	0000000c startup_default_early_hook
0000e110 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1618 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff161c l       .bss	00000000 object.8610
0001550c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-audioRecorder.ino
000005d4 l     F .text	00000002 __tcf_0
00000884 l     F .text	00000074 logg(unsigned long, char const*) [clone .part.54]
00001b5c l     F .text	0000013c _GLOBAL__sub_I_audioShield
1fff3848 l     O .bss	00000400 acq_rx_buffer
1fff3d4c l     O .bss	00000002 front_
1fff3d50 l     O .bss	00000800 tdm_rx_buffer
1fff097c l     O .data	00000014 mfile
20006a1e l     O .bss	00000002 rear_
20006a34 l     O .bss	00000004 check_filing(short)::to
20006a38 l     O .bss	00000004 logg(unsigned long, char const*)::to
00000000 l    df *ABS*	00000000 Storage.cpp
00002094 l     F .text	000000a0 File::invalidate() [clone .isra.1]
00002628 l     F .text	00000084 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]
00003ab0 l     F .text	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]
00003ae8 l     F .text	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]
00004314 l     F .text	000000b2 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]
00004ec4 l     F .text	00000a4c mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]
00000000 l    df *ABS*	00000000 MTP.cpp
00005b64 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00005c70 l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00006e74 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
00014c34 l     O .text	00000028 supported_op
00014c5c l     O .text	00000010 propertyList
00014cb8 l     O .text	00000008 supported_events
00000000 l    df *ABS*	00000000 SPI.cpp
00007764 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00007fec l     F .text	00000018 refreshCache(long) [clone .part.0]
20006a44 l     O .bss	00000004 cacheTime
20006a48 l     O .bss	00000007 tm
20006a50 l     O .bss	00000004 sysTime
20006a54 l     O .bss	00000001 Status
20006a5c l     O .bss	00000004 prevMillis
1fff0a14 l     O .data	00000004 syncInterval
00014e74 l     O .text	0000000c monthDays
20006a60 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
00008184 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
0000819c l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
000081b4 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
000081cc l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_adc.cpp
000081e4 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 output_dac.cpp
0000863c l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00008654 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00008684 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_dacs.cpp
0000869c l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000086b4 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
000086cc l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
000086e4 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
000086fc l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00008714 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
0000872c l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00008744 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
0000875c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
00008a5c l       .text	00000000 L_1373_delayMicroseconds
00008a6a l       .text	00000000 L_1387_delayMicroseconds
00008ab0 l       .text	00000000 L_1438_delayMicroseconds
00008de6 l       .text	00000000 L_2952_delayMicroseconds
20006af4 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 FsCache.cpp
00008e2c l     F .text	00000046 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00009898 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000098cc l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
0000a748 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.38]
0000a868 l     F .text	00000094 FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000b850 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000c490 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]
0000c4a8 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000cd98 l     F .text	00000018 isBusyCommandComplete()
0000cdb0 l     F .text	00000010 isBusyCommandInhibit()
0000cdc0 l     F .text	00000014 isBusyDat()
0000cdd4 l     F .text	0000000c isBusyDMA()
0000cde0 l     F .text	00000014 isBusyFifoRead()
0000cdf4 l     F .text	00000014 isBusyFifoWrite()
0000ce08 l     F .text	00000018 isBusyTransferComplete()
0000ce84 l     F .text	00000028 waitTimeout(bool (*)())
0000ceac l     F .text	0000004c yieldTimeout(bool (*)())
0000cf28 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
0000cf84 l     F .text	0000002c isBusyCMD13()
0000cfd0 l     F .text	00000020 waitDmaStatus() [clone .part.4]
0000cff0 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000d1fc l     F .text	00000058 waitTransferComplete() [clone .part.8]
20006b08 l     O .bss	00000001 m_version2
20006b0c l     O .bss	00000010 m_cid
20006b1c l     O .bss	00000004 m_busyFcn
20006b20 l     O .bss	00000001 m_highCapacity
20006b24 l     O .bss	00000004 m_ocr
20006b28 l     O .bss	00000004 m_rca
20006b2c l     O .bss	00000001 m_transferActive
20006b30 l     O .bss	00000004 m_irqstat
1fff0b5c l     O .data	00000001 m_errorCode
20006b34 l     O .bss	00000001 m_initDone
20006b38 l     O .bss	00000010 m_csd
20006b48 l     O .bss	00000001 m_dmaBusy
20006b4c l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 SD.cpp
0000daf4 l     F .text	00000064 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
20007009 l     O .bss	00000001 tx_noautoflush
2000700c l     O .bss	00000004 tx_packet
20007010 l     O .bss	00000001 transmit_previous_timeout
20007014 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
20007019 l     O .bss	00000001 calibrating
1fff0b5d l     O .data	00000001 analog_config_bits
2000701a l     O .bss	00000001 analog_reference_internal
1fff0b5e l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0b64 l     O .data	00000012 device_descriptor
1fff0b90 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
0000e5d0 l     F .text	0000004c digitalWrite.part.1
0000e61c l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c50 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
20007020 l     O .bss	00000004 ep0_tx_ptr
20007024 l     O .bss	00000018 rx_last
2000703c l     O .bss	00000002 ep0_tx_len
20007040 l     O .bss	00000040 ep0_rx0_buf
20007080 l     O .bss	00000018 rx_first
20007098 l     O .bss	00000001 ep0_tx_data_toggle
2000709c l     O .bss	00000040 ep0_rx1_buf
200070dc l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
200070f4 l     O .bss	00000018 tx_last
2000710c l     O .bss	00000008 setup
20007114 l     O .bss	00000001 ep0_tx_bdt_bank
20007118 l     O .bss	00000008 reply_buffer
20007124 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
2000712a l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00015288 l     O .text	00000010 zeroes.7258
000152d8 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00012df4 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00012e14 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
000154f0 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0c70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.15/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.15/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1618 l       .bss	00000000 __bss_start__
200071b8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000e0fc  w    F .text	00000006 adc0_isr
000024cc g     F .text	0000015c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000011dc g     F .text	00000060 pushData(unsigned long*)
000101d8 g     F .text	0000002c .hidden __aeabi_dcmpun
0000dd78 g     F .text	0000001c usb_serial_available
0001019c g     F .text	00000012 .hidden __aeabi_dcmple
000112e0 g     F .text	000000ba strcpy
000100d8 g     F .text	0000007a .hidden __cmpdf2
0000d548 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000f464  w    F .text	000000ec yield
20006a30 g     O .bss	00000004 acq_miss
0000b2d4 g     F .text	00000218 FatFile::write(void const*, unsigned int)
000100d8 g     F .text	0000007a .hidden __eqdf2
0000c47c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000f7cc g     F .text	000000ba Print::printNumber64(unsigned long long, unsigned char, unsigned char)
0000936c g     F .text	000003dc ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff3c48 g     O .bss	00000104 storage
1fff0b78 g     O .data	00000018 usb_string_manufacturer_name_default
20006a40 g     O .bss	00000004 tx_event_packet
0000b25c g     F .text	00000076 FatFile::truncate()
1fff0af0 g     O .data	0000006c Wire1
0000123c g     F .text	00000074 acq_isr()
000082e0 g     F .text	0000006c AudioControlSGTL5000::micGain(unsigned int)
0000291c g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000fc48 g     F .text	0000005a .hidden __floatdidf
1fff1638 g     O .bss	00000008 dma
0000e0b4  w    F .text	00000048 hard_fault_isr
0000e0fc  w    F .text	00000006 dma_ch6_isr
0000171c g     F .text	000000b4 do_logger(unsigned short, short)
20006af8 g     O .bss	00000004 FsDateTime::callback
0000f780 g     F .text	00000020 Print::println()
000088b4 g     F .text	00000130 TwoWire::isr()
000017d0 g     F .text	00000090 Approx_MCLK(long, long*, long*)
0000e0fc  w    F .text	00000006 uart0_lon_isr
0000926c g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00013d74 g     F .text	00000100 fcvtbuf
0000ea24 g     F .text	00000084 usb_rx_memory
0000c460  w    F .text	00000004 SdSpiCard::errorCode() const
000004b0  w    F .text	0000000c File::flush()
00008204 g     F .text	00000084 AudioControlSGTL5000::read(unsigned int)
000076c4 g     F .text	00000018 usb_init_events
0000e0fc  w    F .text	00000006 dma_ch8_isr
00010e8c g     F .text	00000002 __malloc_unlock
00000630  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
20006b04 g     O .bss	00000004 FsVolume::m_cwv
0000ab30 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
0000dfd4 g     F .text	000000e0 analog_init
0000eaa8 g     F .text	00000084 usb_tx
0000e0fc  w    F .text	00000006 portcd_isr
00012ca4 g     F .text	0000004a _vdprintf_r
00007d84 g     F .text	000000b0 SPIClass::setSCK(unsigned char)
00014974  w    O .text	00000060 vtable for SDFile
00010d24 g     F .text	000000c6 memmove
00003b18 g     F .text	00000046 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
20006aac g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000d800 g     F .text	00000068 SdioCard::stopTransmission(bool)
00014124 g     F .text	0000004c _Balloc
0000e0fc  w    F .text	00000006 can1_rx_warn_isr
00007714 g     F .text	0000002c MTPD::send_Event(unsigned short)
00001e54  w    F .text	00000004 MTPStorage_SD::get_FSCount()
00015568 g       .ARM.exidx	00000000 __exidx_end
0000e0fc  w    F .text	00000006 dma_error_isr
0000b648 g     F .text	0000003c FatPartition::freeChain(unsigned long)
20007140 g     O .bss	00000001 EventResponder::runningFromYield
0000da3c g     F .text	0000001a SdSpiArduinoDriver::receive()
0000c654 g     F .text	00000096 SdSpiCard::cardCommand(unsigned char, unsigned long)
20006a1c g     O .bss	00000002 maxCount
00008e08 g     F .text	0000000c i2c0_isr
0000f754 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
000100c8 g     F .text	0000008a .hidden __gtdf2
0000b878 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
000105fc g     F .text	0000000c __errno
00000c94  w    F .text	00000026 SDFile::isDirectory()
0000e0fc  w    F .text	00000006 portd_isr
0000e0fc  w    F .text	00000006 enet_error_isr
00014edc g     O .text	00000020 TwoWire::i2c2_hardware
00001498 g     F .text	00000088 makeFilename(char*)
00000ea4  w    F .text	00000028 File::~File()
20007130 g     O .bss	00000004 EventResponder::firstInterrupt
00006010 g     F .text	0000006e MTPD::GetObjectHandles(unsigned long, unsigned long)
0000c480  w    F .text	0000000e SdSpiCard::~SdSpiCard()
0000c1ec g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000e0fc  w    F .text	00000006 tpm1_isr
00009d28 g     F .text	00000018 ExFatPartition::rootLength()
0000c464  w    F .text	00000004 SdSpiCard::errorData() const
0000f744  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00015048 g     O .text	00000200 digital_pin_to_info_PGM
200071b4 g     O .bss	00000004 errno
0000c900 g     F .text	0000004c SdSpiCard::readOCR(unsigned long*)
0000da58 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000bde4 g     F .text	00000390 FatFile::open(FatFile*, fname_t*, int)
00009b1c g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
00015568 g       .ARM.exidx	00000000 _etext
00007a90 g     F .text	00000134 _spi_dma_rxISR0()
1fff1618 g       .bss	00000000 _sbss
0000dae4 g     F .text	00000006 sdCsInit(unsigned char)
00010164 g     F .text	00000010 .hidden __aeabi_cdcmple
0000ce2c g     F .text	0000000c SdioCard::errorData() const
00001e68 g     F .text	0000000c MTPStorage_SD::totalSize(unsigned long)
00004c84 g     F .text	000000fe MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
0000d478 g     F .text	000000d0 SdioCard::writeSector(unsigned long, unsigned char const*)
0000e0fc  w    F .text	00000006 porte_isr
00001ab4 g     F .text	000000a8 loop
0000e0fc  w    F .text	00000006 portb_isr
0000e0fc  w    F .text	00000006 spi1_isr
000064fc g     F .text	00000144 MTPD::GetStorageInfo(unsigned long)
0000e0fc  w    F .text	00000006 uart3_status_isr
00008fd0 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000e0fc  w    F .text	00000006 mcm_isr
0000d5d0 g     F .text	000000cc SdioCard::readData(unsigned char*)
000081fc  w    F .text	00000004 AudioControlSGTL5000::disable()
0000c598 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
00008ad0 g     F .text	00000114 TwoWire::endTransmission(unsigned char)
20007134 g     O .bss	00000004 EventResponder::lastInterrupt
0000e0fc  w    F .text	00000006 uart1_status_isr
0000c264 g     F .text	00000028 FsBaseFile::close()
0000db58 g     F .text	000001a6 memcpy
0000e0fc  w    F .text	00000006 randnum_isr
00010154 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000494  w    F .text	0000000c File::available()
00003b60 g     F .text	000007b4 MTPStorage_SD::removeFile(unsigned long, char*)
00003298 g     F .text	00000816 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00001458 g     F .text	00000040 file_writeHeader()
00009b54 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
00002c20 g     F .text	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
0000adac g     F .text	0000002a FatFile::peek()
000115c0 g     F .text	000016e4 _svfprintf_r
0000fbd8 g     F .text	00000022 .hidden __floatsidf
00000600  w    F .text	00000014 SDFile::whoami()
1fff1634  w    O .bss	00000001 SDFile::name()::zeroterm
2000701c g     O .bss	00000004 systick_millis_count
000100d0 g     F .text	00000082 .hidden __ltdf2
0000a354 g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
0000e0b4  w    F .text	00000048 bus_fault_isr
000009a8  w    F .text	00000044 SDFile::truncate(unsigned long long)
000089e4 g     F .text	000000ec TwoWire::wait_idle()
0000704c g     F .text	00000678 MTPD::loop()
0000e0fc  w    F .text	00000006 watchdog_isr
00010254 g     F .text	00000000 .hidden __aeabi_uldivmod
00008e14 g     F .text	0000000c i2c1_isr
20007120 g     O .bss	00000001 usb_configuration
0000e0fc  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
0000d8e8 g     F .text	0000002c SdioCard::syncDevice()
0000d2e0 g     F .text	0000009c SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00001424 g     F .text	00000034 makeHeader(char*)
20007141 g     O .bss	00000001 SPCRemulation::pinout
00000794  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
0000add8 g     F .text	00000040 FatFile::readDirCache(bool)
00008e20 g     F .text	0000000c i2c2_isr
20006a8c g     O .bss	00000008 AudioOutputAnalog::dma
20006a20 g     O .bss	00000004 loop_count
1fff0b78  w    O .data	00000018 usb_string_manufacturer_name
200071a8 g     O .bss	0000000c usb_rx_byte_count_data
0000e0fc  w    F .text	00000006 pit1_isr
1fff0bfc g     O .data	00000008 usb_string_mtp
00010658 g     F .text	00000010 malloc
0000e0fc  w    F .text	00000006 dma_ch4_isr
00014ebc g     O .text	00000020 TwoWire::i2c1_hardware
0000f898 g     F .text	00000084 software_isr
00001308 g     F .text	00000078 do_menu(short)
000148f0  w    O .text	00000024 vtable for FsFile
0000e0fc  w    F .text	00000006 dma_ch7_isr
00008780  w    F .text	0000001e TwoWire::read()
00007748  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00015400 g     O .text	000000c8 __mprec_tens
0000f3a0 g     F .text	000000c4 usb_init
20006a3c g     O .bss	00000004 sessionID_
0000c478  w    F .text	00000004 SdSpiCard::type() const
0000e0fc  w    F .text	00000006 lptmr_isr
00000e20  w    F .text	00000084 SDFile::seek(unsigned long long, int)
20007170 g     O .bss	00000004 __malloc_top_pad
0000e6a0 g     F .text	00000024 rtc_set
1fff09d4 g     O .data	00000040 SPI1
0000c4cc g     F .text	0000007a SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000a400 g     F .text	000000e2 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000fbb8 g     F .text	0000001e .hidden __aeabi_ui2d
00014108 g     F .text	0000001c _localeconv_r
1fff0978 g     O .data	00000004 sd_str
0000d9f4 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
000142a0 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
00014e9c g     O .text	00000020 TwoWire::i2c0_hardware
1fff0974 g     O .data	00000004 t_on
0000e178 g     F .text	00000034 kinetis_hsrun_enable
0000050c  w    F .text	0000000c File::operator bool()
00010284 g     F .text	000002e2 .hidden __udivmoddi4
00006340 g     F .text	000001bc MTPD::getObjectPropValue(unsigned long, unsigned long)
0000f934 g     F .text	00000000 .hidden __aeabi_drsub
0000a77c g     F .text	00000034 FatFile::addCluster()
00011270 g     F .text	00000024 _sbrk_r
0000c94c g     F .text	0000003e SdSpiCard::readRegister(unsigned char, void*)
0000cf08 g     F .text	00000020 SdioCard::type() const
00000488  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	00000200 ResetHandler
0000dd00 g     F .text	00000048 usb_serial_getchar
0000e0fc  w    F .text	00000006 can1_bus_off_isr
0000e0fc  w    F .text	00000006 ftm2_isr
0000095c  w    F .text	0000004c SDFile::name()
2000719c g     O .bss	00000008 usb_cdc_line_coding
0000e6c4 g     F .text	0000000a digitalWrite
20007138 g     O .bss	00000004 EventResponder::lastYield
0000e0fc  w    F .text	00000006 uart5_status_isr
0000e0fc  w    F .text	00000006 lpuart0_status_isr
00008fa8 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00014fd8 g     O .text	00000006 usb_endpoint_config_table
0000e0fc  w    F .text	00000006 dma_ch9_isr
00000804  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000e0fc  w    F .text	00000006 pit2_isr
00010188 g     F .text	00000012 .hidden __aeabi_dcmplt
00014e18 g     O .text	0000005c SPISettings::ctar_clock_table
2000716c g     O .bss	00000004 __malloc_max_sbrked_mem
00000bf8  w    F .text	0000001a SDFile::position()
0000e6d0 g     F .text	0000000a pinMode
0000cc4c g     F .text	00000042 SdSpiCard::writeStop()
0000308c g     F .text	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000e970 g     F .text	0000004c usb_free
0000e0fc  w    F .text	00000006 i2c3_isr
0000fbfc g     F .text	0000003a .hidden __extendsfdf2
0000fef8 g     F .text	000001d0 .hidden __aeabi_ddiv
0000f940 g     F .text	00000276 .hidden __adddf3
1fff0a18 g     O .data	0000006c Wire2
000062d4 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00005bc8 g     F .text	000000a8 MTPD::writestring(char const*)
0000cce4 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000004a0  w    F .text	00000010 File::peek()
0000b684 g     F .text	000000b0 FatPartition::freeClusterCount()
00000cbc  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
00015560 g       .ARM.exidx	00000000 __exidx_start
0000fca4 g     F .text	00000254 .hidden __aeabi_dmul
00000788  w    F .text	0000000c DMAChannel::~DMAChannel()
0000cb44 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
0000e0fc  w    F .text	00000006 pit0_isr
2000713c g     O .bss	00000004 EventResponder::firstYield
00015274 g     O .text	00000004 _global_impure_ptr
00001e80 g     F .text	00000080 MTPStorage_SD::write(char const*, unsigned long)
0000e0fc  w    F .text	00000006 can1_error_isr
00000850  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00010e90 g     F .text	000003de _realloc_r
00000c30  w    F .text	00000018 SDFile::read(void*, unsigned int)
00010608 g     F .text	00000050 __libc_init_array
200071b8 g       .bss	00000000 __bss_end
0000e27c g     F .text	00000354 dtostrf
00000a88  w    F .text	00000044 SDFile::rewindDirectory()
00008774  w    F .text	0000000c TwoWire::available()
0000e0fc  w    F .text	00000006 can0_wakeup_isr
00009848 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000ce38 g     F .text	0000001c SdioCard::readCID(CID*)
0000a138 g     F .text	000000e6 ExFatFile::addDirCluster()
0000e0fc  w    F .text	00000006 flash_cmd_isr
00004e90 g     F .text	00000034 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
0000cc90 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
000154c8 g     O .text	00000028 __mprec_bigtens
00008be4 g     F .text	00000224 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000f72c  w    F .text	00000004 usb_serial_class::clear()
0000fbb8 g     F .text	0000001e .hidden __floatunsidf
0000e0fc  w    F .text	00000006 uart2_status_isr
0000e114 g     F .text	0000002c _sbrk
00014534 g     F .text	00000042 __mcmp
000043dc g     F .text	000008a8 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
000149d4  w    O .text	00000028 vtable for SDClass
20006ac4 g     O .bss	00000008 AudioOutputTDM::dma
000005c0  w    F .text	00000012 SDFile::operator bool()
1fff0b60 g     O .data	00000004 __brkval
20007018 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001860 g     F .text	00000218 acq_init(long)
0000df8c g     F .text	00000048 usb_serial_flush_callback
000154fc g     F .text	00000000 _init
0000a848 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
1fff3d4e g     O .bss	00000002 state
0000e0fc  w    F .text	00000006 svcall_isr
000008f8  w    F .text	00000062 SDClass::remove(char const*)
00000614  w    F .text	0000001c SDFile::close()
0000e0fc  w    F .text	00000006 dma_ch15_isr
00000fd8  w    F .text	0000005c SDFile::~SDFile()
00008104 g     F .text	00000020 day()
00014efc g     O .text	00000024 vtable for TwoWire
0000e0fc  w    F .text	00000006 uart1_error_isr
00013e74 g     F .text	00000028 __libc_fini_array
0000e0fc  w    F .text	00000006 usbhs_phy_isr
0000d9a4 g     F .text	00000050 SdSpiArduinoDriver::begin(SdSpiConfig)
20006a94 g     O .bss	00000008 AudioInputAnalogStereo::dma0
200071b8 g       .bss	00000000 _ebss
0000d3f0 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005d2c g     F .text	0000027c MTPD::WriteDescriptor()
1fff0990 g     O .data	00000004 propertyListNum
20006a7c g     O .bss	00000008 AudioOutputADAT::dma
00000d8c  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00014204 g     F .text	00000040 __hi0bits
00010204 g     F .text	0000004e .hidden __fixdfsi
0000a220 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
0000e0fc g     F .text	00000006 unused_isr
00005fa8 g     F .text	00000068 MTPD::WriteStorageIDs()
0000e0fc  w    F .text	00000006 spi0_isr
0000e0fc  w    F .text	00000006 dma_ch3_isr
0000daf0  w    F .text	00000002 SDClass::~SDClass()
00005910 g     F .text	00000214 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00000788  w    F .text	0000000c DMAChannel::~DMAChannel()
1fff1844 g     O .bss	00002000 diskBuffer
1fff4550 g     O .bss	000004b8 sdx
00000ea4  w    F .text	00000028 File::~File()
00001034 g     F .text	000001a8 storage_configure()
00008144 g     F .text	00000024 year()
0000f924 g     F .text	00000004 operator delete(void*, unsigned int)
0000e0fc  w    F .text	00000006 flash_error_isr
0000f940 g     F .text	00000276 .hidden __aeabi_dadd
000100d0 g     F .text	00000082 .hidden __ledf2
0000e0fc  w    F .text	00000006 uart5_error_isr
0000e0fc  w    F .text	00000006 rtc_seconds_isr
00014d84 g     O .text	00000094 SPIClass::spi0_hardware
0000e0fc  w    F .text	00000006 pdb_isr
000143e4 g     F .text	000000a0 __pow5mult
0000afec g     F .text	0000005c FatFile::rmdir()
0000fc38 g     F .text	0000006a .hidden __aeabi_ul2d
0000e0b4  w    F .text	00000048 usage_fault_isr
0000e0fc  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000b5c4 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
0000e0fc  w    F .text	00000006 dma_ch14_isr
00000a3c  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
200071a4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000f71c g     F .text	00000010 systick_isr
0000e0fc  w    F .text	00000006 rtc_alarm_isr
0000052c  w    F .text	0000000c File::isDirectory()
0000c174 g     F .text	00000076 FatFile::getSFN(char*)
0000ca84 g     F .text	0000006c SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20007144 g     O .bss	00000004 AudioStream::first_update
0000e0fc  w    F .text	00000006 dma_ch2_isr
1fff0c58 g     O .data	00000010 Serial
0000e0fc  w    F .text	00000006 ftm1_isr
000004c8  w    F .text	00000016 File::seek(unsigned long long, int)
00014e80 g     O .text	0000001c vtable for AudioControlSGTL5000
0000f74c  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000c30c g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000e104  w    F .text	0000000c startup_early_hook
0000cd18 g     F .text	00000064 SdSpiCard::writeSingle(unsigned long, unsigned char const*)
0000e0fc  w    F .text	00000006 dma_ch13_isr
00009dd4 g     F .text	0000008c ExFatFile::addCluster()
00008200  w    F .text	00000004 AudioControlSGTL5000::inputLevel(float)
00014914  w    O .text	00000060 vtable for File
0000e0fc  w    F .text	00000006 uart2_error_isr
00000ba4  w    F .text	00000052 SDClass::usedSize()
0000dd48 g     F .text	00000030 usb_serial_peekchar
000101c4 g     F .text	00000012 .hidden __aeabi_dcmpgt
00002134 g     F .text	00000002 mtp_yield()
00010c20 g     F .text	00000000 memchr
0000b55c g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
1fff0c38 g     O .data	00000016 usb_string_serial_number_default
0000e0b4 g     F .text	00000048 fault_isr
00013f38 g     F .text	000001d0 _free_r
0000d254 g     F .text	0000008c SdioCard::readStop()
00008e74 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
000101b0 g     F .text	00000012 .hidden __aeabi_dcmpge
0000e0fc  w    F .text	00000006 usb_charge_isr
00004d84 g     F .text	0000010a MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000f73c  w    F .text	00000004 usb_serial_class::flush()
0000e0fc  w    F .text	00000006 cmt_isr
0000f93c g     F .text	0000027a .hidden __aeabi_dsub
0000b734 g     F .text	0000011a FatPartition::init(BlockDeviceInterface*, unsigned char)
0000e0fc  w    F .text	00000006 usbhs_isr
0000a91c g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
1fff1614 g     O .data	00000004 __malloc_sbrk_base
0000f734  w    F .text	00000004 usb_serial_class::read()
0000e0fc  w    F .text	00000006 ftm3_isr
00000570  w    F .text	0000000c File::rewindDirectory()
0000e0fc  w    F .text	00000006 tsi0_isr
0000bc04 g     F .text	00000128 FatFile::remove()
0000fc38 g     F .text	0000006a .hidden __floatundidf
0000e140  w    F .text	00000002 __cxa_pure_virtual
00014484 g     F .text	000000ae __lshift
0000aa6c g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
0000e0fc  w    F .text	00000006 spi2_isr
00009d40 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
20006a9c g     O .bss	00000008 AudioInputAnalogStereo::dma1
00014748 g     F .text	00000100 __ssprint_r
00014848 g     F .text	0000005e _vasnprintf_r
0000f91c  w    F .text	00000002 serialEvent()
00008558  w    F .text	0000005c AudioControlSGTL5000::inputSelect(int)
20007099 g     O .bss	00000001 usb_reboot_timer
20006a64 g     O .bss	00000008 AudioOutputPWM::dma
00012d50 g     F .text	000000a4 __register_exitproc
00009748 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
000113f0 g     F .text	0000002c strlcpy
00008168 g     F .text	0000001c setSyncProvider(long (*)())
0001151c g     F .text	000000a0 strncmp
00001520 g     F .text	00000104 checkPath(unsigned short, char*)
0000a27c g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000dd94 g     F .text	00000038 usb_serial_flush_input
00009bd4 g     F .text	00000072 ExFatPartition::freeClusterCount()
00002b0c g     F .text	00000064 MTPStorage_SD::ConstructFilename(int, char*, int)
000142b4 g     F .text	00000130 __multiply
1fff3844 g     O .bss	00000004 acq_count
0000ded4 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
20007174 g     O .bss	00000028 __malloc_current_mallinfo
0000861c  w    F .text	00000020 AudioControlSGTL5000::volume(float)
0001468c g     F .text	000000ba __d2b
2000714c g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
0000e0fc  w    F .text	00000006 can0_bus_off_isr
0000cef8  w    F .text	0000000e SdioCard::~SdioCard()
00001e58  w    F .text	00000008 MTPStorage_SD::get_FSName(unsigned long)
00008ef8 g     F .text	000000ae ExFatFile::getName(char*, unsigned int)
000013e0 g     F .text	00000044 printTimestamp(unsigned long)
20007115 g     O .bss	00000001 usb_rx_memory_needed
0000d37c g     F .text	00000074 SdioCard::writeStart(unsigned long)
0000eb2c g     F .text	00000874 usb_isr
000105cc g     F .text	0000000c __cxa_atexit
00009094 g     F .text	000001a8 ExFatFile::read(void*, unsigned int)
0000fbd8 g     F .text	00000022 .hidden __aeabi_i2d
00000c48  w    F .text	00000018 SDFile::peek()
00008ed4 g     F .text	0000000e FsCache::sync()
1fff0994 g     O .data	00000040 SPI
00010cc0 g     F .text	00000062 memcmp
00015248  w    O .text	00000028 vtable for usb_serial_class
0000da78 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
0000e0fc  w    F .text	00000006 uart3_error_isr
00006d44 g     F .text	0000007c MTPD::GetObject(unsigned long)
0000daec g     F .text	00000004 sdCsWrite(unsigned char, bool)
00010568  w    F .text	00000002 .hidden __aeabi_ldiv0
00009f38 g     F .text	0000005a ExFatFile::rmdir()
20006ad4 g     O .bss	00000008 AudioInputI2SHex::dma
0000e0fc  w    F .text	00000006 porta_isr
00006640 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000fef8 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
0000c99c g     F .text	00000098 SdSpiCard::sectorCount()
0000e0fc  w    F .text	00000006 low_voltage_isr
00001e64 g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff1208 g     O .data	00000408 __malloc_av_
0000e0fc  w    F .text	00000006 can0_error_isr
0000e7c4 g     F .text	0000016c _init_Teensyduino_internal_
0000083c  w    F .text	00000014 SDFile::flush()
0000fca4 g     F .text	00000254 .hidden __muldf3
0000df34 g     F .text	00000058 usb_serial_flush_output
0000e0fc  w    F .text	00000006 dma_ch12_isr
20006a6c g     O .bss	00000008 AudioInputI2S::dma
00010e88 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000b9b8 g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
0000e0fc  w    F .text	00000006 can1_wakeup_isr
000076dc g     F .text	00000038 usb_mtp_sendEvent
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000da90 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0001056c g     F .text	0000005e _calloc_r
0000e0fc  w    F .text	00000006 pit3_isr
00007bc4 g     F .text	0000007c SPIClass::begin()
00006dc0 g     F .text	0000006e MTPD::read(char*, unsigned long)
20006a58 g     O .bss	00000004 getTimePtr
00001380 g     F .text	00000038 file_writeData(void*, unsigned long)
1fff0c54 g     O .data	00000001 yield_active_check_flags
0000e0fc  w    F .text	00000006 enet_rx_isr
0000a0d8 g     F .text	0000005e ExFatFile::sync()
0000ae18 g     F .text	000001d4 FatFile::rename(FatFile*, char const*)
0000d868 g     F .text	00000080 SdioCard::isBusy()
0000e0fc  w    F .text	00000006 portc_isr
0000caf0 g     F .text	00000038 SdSpiCard::readStop()
20006aa4 g     O .bss	00000008 AudioInputI2SQuad::dma
00010dec g     F .text	0000009a memset
000085b4 g     F .text	00000066 AudioControlSGTL5000::volumeInteger(unsigned int)
0000f888 g     F .text	00000010 main
20006ae4 g     O .bss	00000008 AudioOutputI2S::dma
20007168 g     O .bss	00000004 __malloc_max_total_mem
000098f8 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00008004 g     F .text	000000a0 now()
0000a4e4 g     F .text	00000264 ExFatFile::write(void const*, unsigned int)
00014b74 g     O .text	00000060 vtable for MTPStorage_SD
00006ea0 g     F .text	00000132 MTPD::SendObjectInfo(unsigned long, unsigned long)
0001139c g     F .text	00000052 strlcat
0000e0b4  w    F .text	00000048 memmanage_fault_isr
00000dc8  w    F .text	00000058 SDFile::available()
00000500  w    F .text	0000000c File::close()
00008288 g     F .text	00000058 AudioControlSGTL5000::write(unsigned int, unsigned int)
0000e1ac g     F .text	00000084 usb_init_serialnumber
00001a78 g     F .text	0000003c acq_check(short)
0001555c g       .text	00000000 __init_array_end
00012f40 g     F .text	00000e34 _dtoa_r
00010678 g     F .text	00000570 _malloc_r
20007164 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000e0fc  w    F .text	00000006 debugmonitor_isr
00012d08 g     F .text	0000001a __ascii_wctomb
0000c1ec g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000fc48 g     F .text	0000005a .hidden __aeabi_l2d
20006b00 g     O .bss	00000004 FatVolume::m_cwv
20006abc g     O .bss	00000008 AudioInputI2SOct::dma
0000f654 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00007e34 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
60eb4e7a g       *ABS*	00000000 __rtc_localtime
0000854c g     F .text	0000000c AudioControlSGTL5000::enable()
0000e6dc g     F .text	00000048 micros
00000000  w      *UND*	00000000 __libc_fini
00000538  w    F .text	00000038 File::openNextFile(unsigned char)
0000e0fc  w    F .text	00000006 cmp1_isr
0000e0fc  w    F .text	00000006 ftm0_isr
00009f94 g     F .text	00000144 ExFatFile::syncDir()
00013e9c g     F .text	0000009c _malloc_trim_r
1fff0c34 g     O .data	00000004 string0
0000ddcc g     F .text	00000108 usb_serial_write
00001e38  w    F .text	0000001a MTPStorage_SD::addFilesystem(FS&, char const*)
0000e110  w    F .text	00000002 startup_late_hook
0000f738  w    F .text	00000004 usb_serial_class::available()
1fff0c68 g     O .data	00000001 _serialEvent_default
00006e30 g     F .text	00000044 MTPD::readstring(char*)
0000b250 g     F .text	0000000c FatFile::sync()
000009ec  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0c04  w    O .data	0000002e usb_string_product_name
00005b24 g     F .text	00000028 MTPD::GetNumObjects(unsigned long, unsigned long)
0000e724 g     F .text	000000a0 delay
000100d8 g     F .text	0000007a .hidden __nedf2
0000e0fc  w    F .text	00000006 tpm0_isr
2000712c g     O .bss	00000002 dma_channel_allocated_mask
00001f7c g     F .text	00000118 MTPStorage_SD::CloseIndex()
0001555c g     F .fini	00000000 _fini
00005b4c g     F .text	00000018 MTPD::get_buffer()
00000518  w    F .text	00000014 File::name()
000087f8 g     F .text	00000026 TwoWire::write(unsigned char)
20006a74 g     O .bss	00000008 AudioOutputPT8211::dma
00008124 g     F .text	00000020 month()
00014d54 g     O .text	0000002e SPISettings::ctar_div_table
0000ca34 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00009858 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
00011294 g     F .text	0000004c sprintf
0000f7b0 g     F .text	0000001c Print::printf(char const*, ...)
0000e0fc  w    F .text	00000006 i2s0_rx_isr
0000e0fc  w    F .text	00000006 uart4_error_isr
0000a8fc g     F .text	0000001e FatFile::close()
000004e0  w    F .text	00000010 File::position()
00000ecc  w    F .text	00000064 SDFile::~SDFile()
00012e08 g     F .text	0000000c atexit
0000ce80  w    F .text	00000002 SdioCard::~SdioCard()
000007ec  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000005a8  w    F .text	00000018 File::write(unsigned char)
00012d24 g     F .text	0000002c _write_r
20006b50 g     O .bss	000004b8 SD
0000d110 g     F .text	000000ec SdioCard::erase(unsigned long, unsigned long)
0000e0fc  w    F .text	00000006 can0_message_isr
00007c40 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff1098 g     O .data	00000004 _impure_ptr
000148a8  w    O .text	00000024 vtable for Stream
0000e0fc  w    F .text	00000006 can1_message_isr
0000923c g     F .text	0000002e ExFatFile::peek()
000148cc  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20006aec g     O .bss	00000008 AudioOutputSPDIF::dma
0000e0fc  w    F .text	00000006 nmi_isr
1fff0a84 g     O .data	0000006c Wire
0000bd2c g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00000db4  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000c434 g     F .text	00000028 FsVolume::open(char const*, int)
0000ce20 g     F .text	0000000c SdioCard::errorCode() const
20006a24 g     O .bss	0000000c audioShield
0000abf0 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000da0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00015508 g       .text	00000000 __preinit_array_end
000006f0 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000c47c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
20006acc g     O .bss	00000008 AudioInputTDM::dma
0000e0fc  w    F .text	00000006 sdhc_isr
000080c4 g     F .text	00000020 minute()
00009c48 g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00009a90 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000cb94 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
000043c8 g     F .text	00000012 MTPStorage_SD::DeleteObject(unsigned long)
00010be8 g     F .text	0000002a __ascii_mbtowc
0000c548 g     F .text	0000004e SdSpiCard::isBusy()
00014f28 g     O .text	00000058 vtable for SdSpiCard
1fff1644 g     O .bss	00000200 header
0000c994  w    F .text	00000008 SdSpiCard::readCID(CID*)
000087a0  w    F .text	00000016 TwoWire::peek()
000087b8  w    F .text	00000002 TwoWire::flush()
00001ce8 g     F .text	00000150 setup
00014fe0 g     O .text	00000060 usb_descriptor_list
0000e9bc g     F .text	0000003c usb_rx
0000cfb0 g     F .text	00000020 SdioCard::status()
00001f00 g     F .text	0000007c MTPStorage_SD::ResetIndex()
0000e0fc  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000e0fc  w    F .text	00000006 uart0_error_isr
000004f0  w    F .text	00000010 File::size()
00000acc  w    F .text	00000062 SDClass::rmdir(char const*)
00001624 g     F .text	000000f8 file_open(unsigned short)
0000e930 g     F .text	00000040 usb_malloc
0000ac0c g     F .text	0000019e FatFile::read(void*, unsigned int)
00001c98 g     F .text	00000050 chipWrite(unsigned int, unsigned int)
0000e0fc  w    F .text	00000006 i2s0_isr
0000ac00 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20006afc g     O .bss	00000004 ExFatVolume::m_cwv
20030000 g       .bss	00000000 _estack
0000c45c g     F .text	00000004 operator new(unsigned int, unsigned long*)
0000c98c  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000f61c g     F .text	00000038 DMAChannel::release()
0000057c  w    F .text	0000002c File::read()
0000deec g     F .text	00000048 usb_serial_write_buffer_free
0000c618 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
0000e0fc  w    F .text	00000006 enet_timer_isr
00010174 g     F .text	00000012 .hidden __aeabi_dcmpeq
20006adc g     O .bss	00000008 AudioInputPDM::dma
000087bc g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
00000f30  w    F .text	00000030 File::~File()
0000f7a0  w    F .text	0000000e _write
1fff1640 g     O .bss	00000004 maxDel
1fff1618 g       .data	00000000 _edata
00009b30 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
00006080 g     F .text	00000254 MTPD::GetObjectInfo(unsigned long)
0000ce80  w    F .text	00000002 SdioCard::~SdioCard()
0000e0fc  w    F .text	00000006 i2s0_tx_isr
0000e0fc  w    F .text	00000006 adc1_isr
0000cb28 g     F .text	0000001c SdSpiCard::syncDevice()
0000a7b0 g     F .text	00000098 FatFile::addDirCluster()
0000047c  w    F .text	0000000c File::read(void*, unsigned int)
0000f740  w    F .text	00000004 usb_serial_class::availableForWrite()
0000e0fc  w    F .text	00000006 cmp0_isr
000004bc  w    F .text	0000000c File::truncate(unsigned long long)
0000e230 g     F .text	0000004c ultoa
0000daf0  w    F .text	00000002 SDClass::~SDClass()
0000c6ec g     F .text	00000214 SdSpiCard::begin(SdSpiConfig)
000080e4 g     F .text	00000020 second()
00008820 g     F .text	00000094 TwoWire::begin()
0000c28c g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
000026ac g     F .text	00000210 MTPStorage_SD::ReadIndexRecord(unsigned long)
0000f920 g     F .text	00000004 operator new(unsigned int)
0000f6d4 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1610 g     O .data	00000004 __malloc_trim_threshold
0000f730  w    F .text	00000004 usb_serial_class::peek()
000105d8 g     F .text	00000024 fcvtf
000028bc g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
0000834c g     F .text	00000200 AudioControlSGTL5000::enable(unsigned int, unsigned long)
00000f60  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
20006a08 g     O .bss	00000014 mtpd
00014578 g     F .text	00000114 __mdiff
0000ce70 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
00010204 g     F .text	0000004e .hidden __aeabi_d2iz
000031ec g     F .text	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00009ac4 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
20007008 g     O .bss	00000001 usb_cdc_transmit_flush_timer
0000795c g     F .text	00000134 _spi_dma_rxISR1()
2000714a g     O .bss	00000002 AudioStream::cpu_cycles_total
0000e0fc  w    F .text	00000006 pit_isr
000080a4 g     F .text	00000020 hour()
0000d254 g     F .text	0000008c SdioCard::writeStop()
0000cd7c  w    F .text	0000001c SdSpiCard::writeSector(unsigned long, unsigned char const*)
00008ee4 g     F .text	00000014 ExFatFile::close()
000152e8 g     O .text	00000101 _ctype_
0000e0fc  w    F .text	00000006 dac0_isr
0000c468  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00015508 g       .text	00000000 __init_array_start
00010568  w    F .text	00000002 .hidden __aeabi_idiv0
0000e0fc  w    F .text	00000006 can1_tx_warn_isr
00002138 g     F .text	00000394 MTPStorage_SD::OpenIndex()
000101d8 g     F .text	0000002c .hidden __unorddf2
00000b30  w    F .text	00000074 SDClass::rename(char const*, char const*)
0000e0fc  w    F .text	00000006 uart0_status_isr
0000e0fc  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000f550 g     F .text	000000cc DMAChannel::begin(bool)
00011440 g     F .text	000000dc strlen
0000b89c g     F .text	0000002e FatFile::openCluster(FatFile*)
00014cc0 g     O .text	00000094 SPIClass::spi1_hardware
00010164 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000100c8 g     F .text	0000008a .hidden __gedf2
0000b048 g     F .text	000000b0 FatFile::seekSet(unsigned long)
1fff0c04 g     O .data	0000002e usb_string_product_name_default
20006ab4 g     O .bss	00000008 AudioOutputI2SQuad::dma
00012cf0 g     F .text	00000018 vdprintf
0000e0fc  w    F .text	00000006 dma_ch1_isr
0000d0a4 g     F .text	0000006c SdioCard::sectorCount()
0000c36c g     F .text	000000c8 FsVolume::begin(BlockDeviceInterface*)
00007740 g     F .text	00000008 MTPD::send_DeviceResetEvent()
0000e9f8 g     F .text	0000002c usb_tx_packet_count
0000b1d0 g     F .text	00000080 FatFile::openNext(FatFile*, int)
00014f80 g     O .text	00000058 vtable for SdioCard
0000fbfc g     F .text	0000003a .hidden __aeabi_f2d
0000e0fc  w    F .text	00000006 dma_ch5_isr
00002970 g     F .text	0000019c MTPStorage_SD::close()
0000b8cc g     F .text	000000ec FatFile::getName(char*, unsigned int)
0000e0fc  w    F .text	00000006 can0_rx_warn_isr
00000f60  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
00002b70 g     F .text	000000b0 MTPStorage_SD::rename(unsigned long, char const*)
0000e0fc  w    F .text	00000006 can0_tx_warn_isr
0000e0fc  w    F .text	00000006 uart4_status_isr
0000d69c g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
20006a84 g     O .bss	00000008 AudioInputAnalog::dma
20007148 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000d914 g     F .text	00000090 SdSpiArduinoDriver::activate()
00001e60 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
0000f93c g     F .text	0000027a .hidden __subdf3
0000e144 g     F .text	00000034 kinetis_hsrun_disable
000012b0 g     F .text	00000058 pullData(unsigned long*, unsigned long)
00015508 g       .text	00000000 __preinit_array_start
000099ac g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00002958 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
000005d8  w    F .text	00000028 File::whoami()
1fff4a08 g     O .bss	00012000 data_buffer
00014244 g     F .text	0000005a __lo0bits
00009a54 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
0000b0f8 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000f928 g     F .text	0000000a __aeabi_atexit
00006d28 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
0000e694 g     F .text	0000000c rtc_get
00009e60 g     F .text	000000d6 ExFatFile::remove()
0000e0fc  w    F .text	00000006 cmp2_isr
0000f718 g     F .text	00000004 pendablesrvreq_isr
00000c60  w    F .text	00000034 SDClass::totalSize()
00006fd4 g     F .text	00000076 MTPD::SendObject()
00001e74 g     F .text	0000000c MTPStorage_SD::usedSize(unsigned long)
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff109c g     O .data	0000016c __global_locale
0000e0fc  w    F .text	00000006 wakeup_isr
00007ce4 g     F .text	000000a0 SPIClass::setMISO(unsigned char)
000013b8 g     F .text	00000028 file_close()
0000e0fc  w    F .text	00000006 cmp3_isr
00007e3c g     F .text	000001b0 breakTime(long, tmElements_t&)
0000b4ec g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
00010668 g     F .text	00000010 free
0000e0fc  w    F .text	00000006 tpm2_isr
00014184 g     F .text	00000080 __multadd
00014170 g     F .text	00000012 _Bfree
00000c14  w    F .text	0000001a SDFile::size()
0000e0fc  w    F .text	00000006 dma_ch0_isr
00000fd8  w    F .text	0000005c SDFile::~SDFile()
1fff0c38  w    O .data	00000016 usb_string_serial_number
0000e0fc  w    F .text	00000006 enet_tx_isr
00009d98 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
0000d710 g     F .text	000000f0 SdioCard::readSector(unsigned long, unsigned char*)
0000ce54 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + (sec100 < 100 ? 0 : 1), 0);
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	................
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	....-...........
     120:	................
     130:	................
     140:	................
     150:	................
     160:	........!.......
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	e104 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #332]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #332]	; (368 <ResetHandler+0x198>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #332]	; (36c <ResetHandler+0x19c>)
     220:	ldr	r3, [pc, #332]	; (370 <ResetHandler+0x1a0>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #320]	; (374 <ResetHandler+0x1a4>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #324]	; (378 <ResetHandler+0x1a8>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #312]	; (37c <ResetHandler+0x1ac>)
     242:	ldr	r2, [pc, #316]	; (380 <ResetHandler+0x1b0>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #300]	; (384 <ResetHandler+0x1b4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #296]	; (38c <ResetHandler+0x1bc>)
     264:	ldr	r2, [pc, #276]	; (37c <ResetHandler+0x1ac>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #268]	; (394 <ResetHandler+0x1c4>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	bne.n	288 <ResetHandler+0xb8>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     292:	ldr	r3, [pc, #260]	; (398 <ResetHandler+0x1c8>)
     294:	movs	r2, #96	; 0x60
     296:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     298:	adds	r3, #2
     29a:	ldrb	r2, [r3, #0]
     29c:	cmp	r2, #128	; 0x80
     29e:	bne.n	29a <ResetHandler+0xca>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
    #elif F_CPU == 168000000
	MCG_C5 = MCG_C5_PRDIV0(0);
     2a0:	ldr	r3, [pc, #240]	; (394 <ResetHandler+0x1c4>)
     2a2:	movs	r2, #0
     2a4:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(5);
     2a6:	movs	r2, #69	; 0x45
     2a8:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2aa:	ldrb	r2, [r3, #6]
     2ac:	lsls	r0, r2, #26
     2ae:	bpl.n	2aa <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b0:	ldrb	r1, [r3, #6]
     2b2:	ldr	r2, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b4:	lsls	r1, r1, #25
     2b6:	bpl.n	2b0 <ResetHandler+0xe0>
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
#elif F_CPU == 168000000
	// config divisors: 168 MHz core, 56 MHz bus, 28 MHz flash, USB = 168 * 2 / 7
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(5);
     2b8:	ldr	r3, [pc, #224]	; (39c <ResetHandler+0x1cc>)
     2ba:	ldr	r1, [pc, #228]	; (3a0 <ResetHandler+0x1d0>)
     2bc:	str	r1, [r3, #0]
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(6) | SIM_CLKDIV2_USBFRAC;
     2be:	movs	r1, #13
     2c0:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c2:	movs	r3, #32
     2c4:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2c6:	ldrb	r3, [r2, #6]
     2c8:	and.w	r3, r3, #12
     2cc:	cmp	r3, #12
     2ce:	bne.n	2c6 <ResetHandler+0xf6>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d0:	ldr	r3, [pc, #208]	; (3a4 <ResetHandler+0x1d4>)
     2d2:	ldr	r2, [pc, #212]	; (3a8 <ResetHandler+0x1d8>)
     2d4:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2d6:	ldr	r2, [pc, #212]	; (3ac <ResetHandler+0x1dc>)
     2d8:	ldr	r4, [pc, #212]	; (3b0 <ResetHandler+0x1e0>)
     2da:	ldr	r3, [r2, #0]
     2dc:	ands.w	r3, r3, #256	; 0x100
     2e0:	bne.n	2ea <ResetHandler+0x11a>
		RTC_SR = 0;
     2e2:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2e4:	mov.w	r3, #5376	; 0x1500
     2e8:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	e7c4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [r4, #0]
     308:	lsls	r2, r3, #31
     30a:	bpl.n	318 <ResetHandler+0x148>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30c:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     30e:	bl	e6a0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     312:	ldr	r3, [pc, #176]	; (3c4 <ResetHandler+0x1f4>)
     314:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     316:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     318:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31a:	ldrb	r3, [r3, #0]
     31c:	lsls	r3, r3, #25
     31e:	bpl.n	334 <ResetHandler+0x164>
     320:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     322:	ldr	r3, [pc, #164]	; (3c8 <ResetHandler+0x1f8>)
     324:	ldr	r2, [r4, #0]
     326:	cmp	r2, r3
     328:	bne.n	334 <ResetHandler+0x164>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32a:	ldr	r0, [pc, #148]	; (3c0 <ResetHandler+0x1f0>)
     32c:	bl	e6a0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     330:	movs	r3, #0
     332:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     334:	bl	10608 <__libc_init_array>

	startup_late_hook();
     338:	bl	e110 <startup_late_hook>
	main();
     33c:	bl	f888 <main>
     340:	b.n	340 <ResetHandler+0x170>
     342:	nop
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4007d002
     364:	.word	0x4007e000
     368:	.word	0x1fff1618
     36c:	.word	0x00015564
     370:	.word	0x1fff0970
     374:	.word	0x1fff1618
     378:	.word	0x200071b8
     37c:	.word	0x1fff0200
     380:	.word	0x00000000
     384:	.word	0xe000e400
     388:	.word	0xe000e464
     38c:	.word	0xe000ed08
     390:	.word	0x40065000
     394:	.word	0x40064000
     398:	.word	0x4007e001
     39c:	.word	0x40048044
     3a0:	.word	0x02050000
     3a4:	.word	0x40048004
     3a8:	.word	0x000510c0
     3ac:	.word	0x4003d010
     3b0:	.word	0x4003d014
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002903f
     3bc:	.word	0x20200000
     3c0:	.word	0x60eb4e7a
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1618
     42c:	.word	0x00000000
     430:	.word	0x00015560

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff161c
     460:	.word	0x00015560
     464:	.word	0x1fff1618
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     47c:	ldr	r0, [r0, #16]
     47e:	cbz	r0, 486 <File::read(void*, unsigned int)+0xa>
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #40]	; 0x28
     484:	bx	r3
	}
     486:	bx	lr

00000488 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     488:	ldr	r0, [r0, #16]
     48a:	cbz	r0, 492 <File::write(void const*, unsigned int)+0xa>
     48c:	ldr	r3, [r0, #0]
     48e:	ldr	r3, [r3, #44]	; 0x2c
     490:	bx	r3
	}
     492:	bx	lr

00000494 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     494:	ldr	r0, [r0, #16]
     496:	cbz	r0, 49e <File::available()+0xa>
     498:	ldr	r3, [r0, #0]
     49a:	ldr	r3, [r3, #16]
     49c:	bx	r3
	}
     49e:	bx	lr

000004a0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     4a0:	ldr	r0, [r0, #16]
     4a2:	cbz	r0, 4aa <File::peek()+0xa>
     4a4:	ldr	r3, [r0, #0]
     4a6:	ldr	r3, [r3, #24]
     4a8:	bx	r3
	}
     4aa:	mov.w	r0, #4294967295
     4ae:	bx	lr

000004b0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4b0:	ldr	r0, [r0, #16]
     4b2:	cbz	r0, 4ba <File::flush()+0xa>
     4b4:	ldr	r3, [r0, #0]
     4b6:	ldr	r3, [r3, #12]
     4b8:	bx	r3
     4ba:	bx	lr

000004bc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
     4bc:	ldr	r0, [r0, #16]
     4be:	cbz	r0, 4c6 <File::truncate(unsigned long long)+0xa>
     4c0:	ldr	r1, [r0, #0]
     4c2:	ldr	r1, [r1, #48]	; 0x30
     4c4:	bx	r1
	}
     4c6:	bx	lr

000004c8 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
     4c8:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
     4ca:	ldr	r0, [r0, #16]
     4cc:	cbz	r0, 4d8 <File::seek(unsigned long long, int)+0x10>
     4ce:	ldr	r4, [r0, #0]
     4d0:	ldr	r1, [r4, #52]	; 0x34
	}
     4d2:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4d6:	bx	r1
	}
     4d8:	ldr.w	r4, [sp], #4
     4dc:	bx	lr
     4de:	nop

000004e0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
     4e0:	ldr	r0, [r0, #16]
     4e2:	cbz	r0, 4ea <File::position()+0xa>
     4e4:	ldr	r3, [r0, #0]
     4e6:	ldr	r3, [r3, #56]	; 0x38
     4e8:	bx	r3
	}
     4ea:	movs	r0, #0
     4ec:	movs	r1, #0
     4ee:	bx	lr

000004f0 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::size()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #60]	; 0x3c
     4f8:	bx	r3
	}
     4fa:	movs	r0, #0
     4fc:	movs	r1, #0
     4fe:	bx	lr

00000500 <File::close()>:
	virtual void close() {
		if (f) f->close();
     500:	ldr	r0, [r0, #16]
     502:	cbz	r0, 50a <File::close()+0xa>
     504:	ldr	r3, [r0, #0]
     506:	ldr	r3, [r3, #64]	; 0x40
     508:	bx	r3
     50a:	bx	lr

0000050c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::operator bool()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #68]	; 0x44
     514:	bx	r3
	}
     516:	bx	lr

00000518 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     518:	ldr	r0, [r0, #16]
     51a:	cbz	r0, 522 <File::name()+0xa>
     51c:	ldr	r3, [r0, #0]
     51e:	ldr	r3, [r3, #72]	; 0x48
     520:	bx	r3
	}
     522:	ldr	r0, [pc, #4]	; (528 <File::name()+0x10>)
     524:	bx	lr
     526:	nop
     528:	.word	0x00014ad0

0000052c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     52c:	ldr	r0, [r0, #16]
     52e:	cbz	r0, 536 <File::isDirectory()+0xa>
     530:	ldr	r3, [r0, #0]
     532:	ldr	r3, [r3, #76]	; 0x4c
     534:	bx	r3
	}
     536:	bx	lr

00000538 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     538:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     53a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     53c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     53e:	cbz	r3, 54c <File::openNextFile(unsigned char)+0x14>
     540:	ldr	r5, [r3, #0]
     542:	mov	r1, r3
     544:	ldr	r3, [r5, #80]	; 0x50
     546:	blx	r3
	}
     548:	mov	r0, r4
     54a:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     54c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     550:	ldr	r2, [pc, #24]	; (56c <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     552:	strb	r3, [r4, #4]
     554:	strb	r3, [r4, #12]
     556:	str	r0, [r4, #8]
     558:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     55a:	ldr	r3, [r1, #16]
     55c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     55e:	cmp	r3, #0
     560:	beq.n	548 <File::openNextFile(unsigned char)+0x10>
     562:	ldr	r2, [r3, #16]
     564:	adds	r2, #1
     566:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     568:	mov	r0, r4
     56a:	pop	{r3, r4, r5, pc}
     56c:	.word	0x0001491c

00000570 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     570:	ldr	r0, [r0, #16]
     572:	cbz	r0, 57a <File::rewindDirectory()+0xa>
     574:	ldr	r3, [r0, #0]
     576:	ldr	r3, [r3, #84]	; 0x54
     578:	bx	r3
     57a:	bx	lr

0000057c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     57c:	ldr	r0, [r0, #16]
     57e:	cbz	r0, 5a2 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     580:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     582:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     584:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     586:	ldr	r3, [r3, #40]	; 0x28
     588:	movs	r2, #1
     58a:	add.w	r1, sp, #7
     58e:	blx	r3
     590:	cbz	r0, 59c <File::read()+0x20>
		return b;
     592:	ldrb.w	r0, [sp, #7]
	}
     596:	add	sp, #12
     598:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     59c:	mov.w	r0, #4294967295
     5a0:	b.n	596 <File::read()+0x1a>
     5a2:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     5a6:	bx	lr

000005a8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     5a8:	push	{r4, lr}
     5aa:	sub	sp, #8
     5ac:	add	r3, sp, #8
		return write(&b, 1);
     5ae:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     5b0:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     5b4:	ldr	r4, [r2, #44]	; 0x2c
     5b6:	mov	r1, r3
     5b8:	movs	r2, #1
     5ba:	blx	r4
	}
     5bc:	add	sp, #8
     5be:	pop	{r4, pc}

000005c0 <SDFile::operator bool()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     5c0:	ldr	r3, [r0, #92]	; 0x5c
     5c2:	cbz	r3, 5c8 <SDFile::operator bool()+0x8>
     5c4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5c6:	bx	lr
     5c8:	ldr	r0, [r0, #96]	; 0x60
     5ca:	adds	r0, #0
     5cc:	it	ne
     5ce:	movne	r0, #1
     5d0:	bx	lr
     5d2:	nop

000005d4 <__tcf_0>:
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
     5d4:	bx	lr
     5d6:	nop

000005d8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     5d8:	push	{r4, lr}
     5da:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     5dc:	mov	r2, r0
     5de:	ldr	r3, [r0, #16]
     5e0:	ldr	r1, [pc, #20]	; (5f8 <File::whoami()+0x20>)
     5e2:	ldr	r0, [pc, #24]	; (5fc <File::whoami()+0x24>)
     5e4:	bl	f7b0 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5e8:	ldr	r0, [r4, #16]
     5ea:	cbz	r0, 5f6 <File::whoami()+0x1e>
     5ec:	ldr	r3, [r0, #0]
	}
     5ee:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5f2:	ldr	r3, [r3, #36]	; 0x24
     5f4:	bx	r3
     5f6:	pop	{r4, pc}
     5f8:	.word	0x000149fc
     5fc:	.word	0x1fff0c58

00000600 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     600:	mov	r2, r0
     602:	ldr	r3, [r0, #16]
     604:	ldr	r1, [pc, #4]	; (60c <SDFile::whoami()+0xc>)
     606:	ldr	r0, [pc, #8]	; (610 <SDFile::whoami()+0x10>)
     608:	b.w	f7b0 <Print::printf(char const*, ...)>
     60c:	.word	0x00014a18
     610:	.word	0x1fff0c58

00000614 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     614:	push	{r4, lr}
     616:	mov	r4, r0
		if (filename) {
     618:	ldr	r0, [r0, #100]	; 0x64
     61a:	cbz	r0, 624 <SDFile::close()+0x10>
			free(filename);
     61c:	bl	10668 <free>
			filename = nullptr;
     620:	movs	r3, #0
     622:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     624:	add.w	r0, r4, #36	; 0x24
	}
     628:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     62c:	b.w	c264 <FsBaseFile::close()>

00000630 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     630:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     634:	movs	r3, #0
     636:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     638:	mov	r2, r3
     63a:	mov	r5, r0
     63c:	adds	r1, #36	; 0x24
     63e:	add	r0, sp, #16
     640:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     644:	ldr	r7, [pc, #148]	; (6dc <SDFile::openNextFile(unsigned char)+0xac>)
     646:	strb.w	r3, [sp, #4]
     64a:	strb.w	r3, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
     64e:	str	r3, [sp, #72]	; 0x48
     650:	str	r3, [sp, #76]	; 0x4c
     652:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     654:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     656:	bl	c30c <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     65a:	ldr	r3, [sp, #72]	; 0x48
     65c:	cmp	r3, #0
     65e:	beq.n	6c6 <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     660:	movs	r0, #104	; 0x68
     662:	bl	f920 <operator new(unsigned int)>
     666:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     668:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     66c:	ldr	r2, [sp, #8]
     66e:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     672:	ldr	r0, [pc, #108]	; (6e0 <SDFile::openNextFile(unsigned char)+0xb0>)
     674:	ldr	r1, [pc, #108]	; (6e4 <SDFile::openNextFile(unsigned char)+0xb4>)
     676:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     678:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     67c:	movs	r6, #0
     67e:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     680:	str	r1, [r4, #20]
     682:	str	r2, [r4, #28]
     684:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     688:	add.w	r0, r4, #36	; 0x24
     68c:	add	r1, sp, #16
     68e:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     690:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     692:	str	r6, [r4, #16]
     694:	str.w	r8, [r4, #8]
     698:	bl	c1ec <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     69c:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     69e:	ldr	r2, [pc, #72]	; (6e8 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6a0:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     6a2:	adds	r3, #1
     6a4:	str	r6, [r4, #100]	; 0x64
     6a6:	strb	r6, [r5, #4]
     6a8:	str.w	r8, [r5, #8]
     6ac:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     6ae:	str	r4, [r5, #16]
		if (f) f->refcount++;
     6b0:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     6b2:	str	r2, [r5, #0]
     6b4:	ldr	r3, [pc, #52]	; (6ec <SDFile::openNextFile(unsigned char)+0xbc>)
     6b6:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     6b8:	add	r0, sp, #16
     6ba:	bl	c264 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     6be:	mov	r0, r5
     6c0:	add	sp, #80	; 0x50
     6c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     6c6:	ldr	r3, [sp, #76]	; 0x4c
     6c8:	cmp	r3, #0
     6ca:	bne.n	660 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     6cc:	ldr	r2, [pc, #24]	; (6e8 <SDFile::openNextFile(unsigned char)+0xb8>)
     6ce:	strb	r3, [r5, #4]
     6d0:	str	r4, [r5, #8]
     6d2:	strb	r3, [r5, #12]
     6d4:	str	r3, [r5, #16]
     6d6:	str	r2, [r5, #0]
     6d8:	b.n	6b4 <SDFile::openNextFile(unsigned char)+0x84>
     6da:	nop
     6dc:	.word	0x000148f8
     6e0:	.word	0x0001497c
     6e4:	.word	0x000148b0
     6e8:	.word	0x0001491c
     6ec:	.word	0x000148d4

000006f0 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

/****************** File Utilities *****************************/
  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync()
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     6f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6f4:	mov	r7, r1
     6f6:	mov	r6, r2
     6f8:	mov	r8, r0
     6fa:	bl	8144 <year()>
     6fe:	mov	r4, r0
     700:	bl	8124 <month()>
     704:	mov	r5, r0
     706:	bl	8104 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     70a:	subw	r3, r4, #1980	; 0x7bc
     70e:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     710:	cmp	r3, #127	; 0x7f
     712:	bhi.n	71a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     714:	uxtb	r2, r5
     716:	cmp	r2, #12
     718:	bls.n	772 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     71a:	movs	r3, #0
     71c:	strh.w	r3, [r8]
      *time = FS_TIME(hour(), minute(), second());
     720:	bl	80a4 <hour()>
     724:	mov	r4, r0
     726:	bl	80c4 <minute()>
     72a:	mov	r5, r0
     72c:	bl	80e4 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     730:	uxtb	r3, r4
     732:	cmp	r3, #23
     734:	bhi.n	73c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     736:	uxtb	r3, r5
     738:	cmp	r3, #59	; 0x3b
     73a:	bls.n	754 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     73c:	movs	r3, #0
     73e:	strh	r3, [r7, #0]
      *ms10 = second() & 1 ? 100 : 0;
     740:	bl	80e4 <second()>
     744:	tst.w	r0, #1
     748:	ite	ne
     74a:	movne	r3, #100	; 0x64
     74c:	moveq	r3, #0
     74e:	strb	r3, [r6, #0]
     750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     754:	uxtb	r3, r0
     756:	cmp	r3, #59	; 0x3b
     758:	bhi.n	73c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     75a:	lsls	r4, r4, #11
     75c:	lsls	r3, r5, #5
     75e:	and.w	r4, r4, #522240	; 0x7f800
     762:	and.w	r3, r3, #8160	; 0x1fe0
     766:	orrs	r3, r4
     768:	ubfx	r0, r0, #1, #7
     76c:	orrs	r3, r0
     76e:	uxth	r3, r3
     770:	b.n	73e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

/****************** File Utilities *****************************/
  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync()
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     772:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     774:	cmp	r0, #31
     776:	bhi.n	71a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     778:	lsls	r5, r5, #5
     77a:	and.w	r5, r5, #8160	; 0x1fe0
     77e:	orrs	r0, r5
     780:	orr.w	r3, r0, r3, lsl #9
     784:	uxth	r3, r3
     786:	b.n	71c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000788 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     788:	push	{r4, lr}
     78a:	mov	r4, r0
		release();
     78c:	bl	f61c <DMAChannel::release()>
	}
     790:	mov	r0, r4
     792:	pop	{r4, pc}

00000794 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     794:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     796:	cbz	r2, 7b2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     798:	ldrb	r3, [r2, #0]
     79a:	and.w	r3, r3, #8
     79e:	and.w	r0, r3, #255	; 0xff
     7a2:	cbz	r3, 7e6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     7a4:	ldr	r3, [r2, #28]
     7a6:	ldr	r0, [r2, #20]
     7a8:	subs	r0, r3, r0
     7aa:	it	mi
     7ac:	mvnmi.w	r0, #2147483648	; 0x80000000
     7b0:	bx	lr
     7b2:	ldr	r1, [r0, #76]	; 0x4c
     7b4:	cbz	r1, 7e8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     7b6:	ldrb.w	r3, [r1, #49]	; 0x31
     7ba:	and.w	r3, r3, #8
     7be:	and.w	r0, r3, #255	; 0xff
     7c2:	cbz	r3, 7e6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     7c4:	ldrd	r2, r3, [r1, #16]
     7c8:	ldrd	r0, r1, [r1]
     7cc:	subs	r0, r2, r0
     7ce:	push	{r4, r5}
     7d0:	sbc.w	r1, r3, r1
     7d4:	movs	r5, #0
     7d6:	mvn.w	r4, #2147483648	; 0x80000000
     7da:	cmp	r5, r1
     7dc:	it	eq
     7de:	cmpeq	r4, r0
     7e0:	bcs.n	7e4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     7e2:	mov	r0, r4
    return BaseFile::available();
  }
     7e4:	pop	{r4, r5}
     7e6:	bx	lr
     7e8:	mov	r0, r1
     7ea:	bx	lr

000007ec <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7ec:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     7ee:	cbz	r3, 7f6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     7f0:	mov	r0, r3
     7f2:	b.w	adac <FatFile::peek()>
     7f6:	ldr	r0, [r0, #76]	; 0x4c
     7f8:	cbz	r0, 7fe <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     7fa:	b.w	923c <ExFatFile::peek()>
    return BaseFile::peek();
  }
     7fe:	mov.w	r0, #4294967295
     802:	bx	lr

00000804 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     804:	push	{lr}
     806:	ldr	r3, [r0, #72]	; 0x48
     808:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     80a:	cbz	r3, 826 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     80c:	mov	r0, r3
     80e:	movs	r2, #1
     810:	add.w	r1, sp, #7
     814:	bl	ac0c <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     818:	cmp	r0, #1
     81a:	bne.n	836 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     81c:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     820:	add	sp, #12
     822:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     826:	ldr	r0, [r0, #76]	; 0x4c
     828:	cbz	r0, 836 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     82a:	movs	r2, #1
     82c:	add.w	r1, sp, #7
     830:	bl	9094 <ExFatFile::read(void*, unsigned int)>
     834:	b.n	818 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     836:	mov.w	r0, #4294967295
     83a:	b.n	820 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000083c <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     83c:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     83e:	cbz	r3, 846 <SDFile::flush()+0xa>
     840:	mov	r0, r3
     842:	b.w	b250 <FatFile::sync()>
     846:	ldr	r0, [r0, #96]	; 0x60
     848:	cbz	r0, 84e <SDFile::flush()+0x12>
     84a:	b.w	a0d8 <ExFatFile::sync()>
     84e:	bx	lr

00000850 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     850:	push	{lr}
     852:	ldr	r3, [r0, #72]	; 0x48
     854:	sub	sp, #12
     856:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     85a:	cbz	r3, 86e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     85c:	mov	r0, r3
     85e:	movs	r2, #1
     860:	add.w	r1, sp, #7
     864:	bl	b2d4 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     868:	add	sp, #12
     86a:	ldr.w	pc, [sp], #4
     86e:	ldr	r0, [r0, #76]	; 0x4c
     870:	cmp	r0, #0
     872:	beq.n	868 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     874:	movs	r2, #1
     876:	add.w	r1, sp, #7
     87a:	bl	a4e4 <ExFatFile::write(void const*, unsigned int)>
     87e:	add	sp, #12
     880:	ldr.w	pc, [sp], #4

00000884 <logg(unsigned long, char const*) [clone .part.54]>:
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     884:	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     888:	ldr	r4, [pc, #72]	; (8d4 <logg(unsigned long, char const*) [clone .part.54]+0x50>)
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
     88a:	ldr	r5, [pc, #76]	; (8d8 <logg(unsigned long, char const*) [clone .part.54]+0x54>)
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     88c:	ldr	r1, [r4, #0]
     88e:	ldr	r6, [pc, #76]	; (8dc <logg(unsigned long, char const*) [clone .part.54]+0x58>)
     890:	ldr	r7, [pc, #76]	; (8e0 <logg(unsigned long, char const*) [clone .part.54]+0x5c>)
     892:	ldrh	r2, [r5, #0]
     894:	ldr.w	r9, [pc, #92]	; 8f4 <logg(unsigned long, char const*) [clone .part.54]+0x70>
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     898:	sub	sp, #24
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     89a:	ldr.w	r3, [r9]
     89e:	str	r1, [sp, #12]
     8a0:	ldr	r1, [r7, #0]
     8a2:	str	r2, [sp, #8]
     8a4:	mov	r2, r0
     8a6:	ldr	r0, [r6, #0]
     8a8:	str	r0, [sp, #4]
     8aa:	str	r1, [sp, #0]
     8ac:	ldr	r0, [pc, #52]	; (8e4 <logg(unsigned long, char const*) [clone .part.54]+0x60>)
     8ae:	ldr	r1, [pc, #56]	; (8e8 <logg(unsigned long, char const*) [clone .part.54]+0x64>)
     8b0:	bl	f7b0 <Print::printf(char const*, ...)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8b4:	ldr	r3, [pc, #52]	; (8ec <logg(unsigned long, char const*) [clone .part.54]+0x68>)
    loop_count=0;
    acq_count=0;
    acq_miss=0;
    maxCount=0;
    maxDel=0;
    to=millis();
     8b6:	ldr	r2, [pc, #56]	; (8f0 <logg(unsigned long, char const*) [clone .part.54]+0x6c>)
     8b8:	ldr	r3, [r3, #0]
     8ba:	str	r3, [sp, #20]
	return ret;
     8bc:	ldr	r1, [sp, #20]
     8be:	str	r1, [r2, #0]
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
    loop_count=0;
     8c0:	movs	r3, #0
     8c2:	str.w	r3, [r9]
    acq_count=0;
     8c6:	str	r3, [r7, #0]
    acq_miss=0;
     8c8:	str	r3, [r6, #0]
    maxCount=0;
     8ca:	strh	r3, [r5, #0]
    maxDel=0;
     8cc:	str	r3, [r4, #0]
    to=millis();
  }
}
     8ce:	add	sp, #24
     8d0:	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
     8d4:	.word	0x1fff1640
     8d8:	.word	0x20006a1c
     8dc:	.word	0x20006a30
     8e0:	.word	0x1fff3844
     8e4:	.word	0x1fff0c58
     8e8:	.word	0x00014a38
     8ec:	.word	0x2000701c
     8f0:	.word	0x20006a38
     8f4:	.word	0x20006a20

000008f8 <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     8f8:	push	{r4, lr}
     8fa:	ldr.w	r4, [r0, #1156]	; 0x484
     8fe:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     900:	cbz	r4, 92c <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     902:	mov	r2, r1
     904:	mov	r0, sp
     906:	mov	r1, r4
     908:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     90a:	movs	r4, #0
     90c:	strb.w	r4, [sp]
     910:	strb.w	r4, [sp, #1]
     914:	strb.w	r4, [sp, #2]
     918:	bl	abf0 <FatFile::open(FatVolume*, char const*, int)>
     91c:	cbnz	r0, 922 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     91e:	add	sp, #56	; 0x38
     920:	pop	{r4, pc}
     922:	mov	r0, sp
     924:	bl	bc04 <FatFile::remove()>
     928:	add	sp, #56	; 0x38
     92a:	pop	{r4, pc}
     92c:	ldr.w	r0, [r0, #1160]	; 0x488
     930:	cmp	r0, #0
     932:	beq.n	91e <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     934:	mov	r2, r1
     936:	movs	r3, #1
     938:	mov	r1, r0
     93a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     93c:	strb.w	r4, [sp, #49]	; 0x31
     940:	strb.w	r4, [sp, #50]	; 0x32
     944:	strb.w	r4, [sp, #51]	; 0x33
     948:	bl	9848 <ExFatFile::open(ExFatVolume*, char const*, int)>
     94c:	cmp	r0, #0
     94e:	beq.n	91e <SDClass::remove(char const*)+0x26>
     950:	mov	r0, sp
     952:	bl	9e60 <ExFatFile::remove()>
     956:	add	sp, #56	; 0x38
     958:	pop	{r4, pc}
     95a:	nop

0000095c <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     95c:	push	{r3, r4, r5, lr}
		if (!filename) {
     95e:	ldr	r4, [r0, #100]	; 0x64
     960:	cbz	r4, 966 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     962:	mov	r0, r4
     964:	pop	{r3, r4, r5, pc}
     966:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     968:	mov.w	r0, #256	; 0x100
     96c:	bl	10658 <malloc>
     970:	mov	r1, r0
     972:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     974:	cbz	r0, 998 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     976:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     978:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     97a:	cbz	r0, 988 <SDFile::name()+0x2c>
     97c:	mov.w	r2, #256	; 0x100
     980:	bl	b8cc <FatFile::getName(char*, unsigned int)>
     984:	ldr	r4, [r5, #100]	; 0x64
     986:	b.n	962 <SDFile::name()+0x6>
     988:	ldr	r0, [r5, #96]	; 0x60
     98a:	cbz	r0, 99e <SDFile::name()+0x42>
     98c:	mov.w	r2, #256	; 0x100
     990:	bl	8ef8 <ExFatFile::getName(char*, unsigned int)>
     994:	ldr	r4, [r5, #100]	; 0x64
     996:	b.n	962 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     998:	ldr	r4, [pc, #8]	; (9a4 <SDFile::name()+0x48>)
     99a:	str	r4, [r5, #100]	; 0x64
     99c:	b.n	962 <SDFile::name()+0x6>
     99e:	mov	r4, r1
     9a0:	b.n	962 <SDFile::name()+0x6>
     9a2:	nop
     9a4:	.word	0x1fff1634

000009a8 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     9a8:	push	{r4, r6, r7, lr}
     9aa:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     9ac:	cbz	r4, 9d2 <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     9ae:	cmp	r3, #1
     9b0:	it	eq
     9b2:	cmpeq	r2, #0
     9b4:	bcc.n	9ba <SDFile::truncate(unsigned long long)+0x12>
     9b6:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
     9b8:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     9ba:	mov	r1, r2
     9bc:	mov	r0, r4
     9be:	bl	b048 <FatFile::seekSet(unsigned long)>
     9c2:	cmp	r0, #0
     9c4:	beq.n	9b6 <SDFile::truncate(unsigned long long)+0xe>
     9c6:	mov	r0, r4
     9c8:	bl	b25c <FatFile::truncate()>
     9cc:	cmp	r0, #0
     9ce:	beq.n	9b6 <SDFile::truncate(unsigned long long)+0xe>
     9d0:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     9d2:	ldr	r4, [r0, #96]	; 0x60
     9d4:	cmp	r4, #0
     9d6:	beq.n	9b6 <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     9d8:	mov	r0, r4
     9da:	bl	926c <ExFatFile::seekSet(unsigned long long)>
     9de:	cmp	r0, #0
     9e0:	beq.n	9b6 <SDFile::truncate(unsigned long long)+0xe>
     9e2:	mov	r0, r4
     9e4:	ldmia.w	sp!, {r4, r6, r7, lr}
     9e8:	b.w	a400 <ExFatFile::truncate()>

000009ec <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     9ec:	push	{r4, lr}
     9ee:	ldr.w	r4, [r0, #1156]	; 0x484
     9f2:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     9f4:	cbz	r4, a16 <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     9f6:	mov	r2, r1
     9f8:	movs	r3, #1
     9fa:	addw	r1, r4, #1092	; 0x444
     9fe:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     a00:	movs	r4, #0
     a02:	strb.w	r4, [sp]
     a06:	strb.w	r4, [sp, #1]
     a0a:	strb.w	r4, [sp, #2]
     a0e:	bl	aa6c <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     a12:	add	sp, #56	; 0x38
     a14:	pop	{r4, pc}
     a16:	ldr.w	r0, [r0, #1160]	; 0x488
     a1a:	cmp	r0, #0
     a1c:	beq.n	a12 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     a1e:	mov	r2, r1
     a20:	movs	r3, #1
     a22:	add.w	r1, r0, #1096	; 0x448
     a26:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     a28:	strb.w	r4, [sp, #49]	; 0x31
     a2c:	strb.w	r4, [sp, #50]	; 0x32
     a30:	strb.w	r4, [sp, #51]	; 0x33
     a34:	bl	a27c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     a38:	add	sp, #56	; 0x38
     a3a:	pop	{r4, pc}

00000a3c <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     a3c:	push	{r4, r5, lr}
     a3e:	ldr.w	r4, [r0, #1156]	; 0x484
     a42:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     a44:	cbz	r4, a64 <SDClass::exists(char const*)+0x28>
     a46:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     a48:	mov	r2, r1
     a4a:	mov	r3, r5
     a4c:	mov	r1, r4
     a4e:	mov	r0, sp
     a50:	strb.w	r5, [sp]
     a54:	strb.w	r5, [sp, #1]
     a58:	strb.w	r5, [sp, #2]
     a5c:	bl	abf0 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     a60:	add	sp, #60	; 0x3c
     a62:	pop	{r4, r5, pc}
     a64:	ldr.w	r0, [r0, #1160]	; 0x488
     a68:	cmp	r0, #0
     a6a:	beq.n	a60 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     a6c:	mov	r2, r1
     a6e:	mov	r3, r4
     a70:	mov	r1, r0
     a72:	mov	r0, sp
     a74:	strb.w	r4, [sp, #49]	; 0x31
     a78:	strb.w	r4, [sp, #50]	; 0x32
     a7c:	strb.w	r4, [sp, #51]	; 0x33
     a80:	bl	9848 <ExFatFile::open(ExFatVolume*, char const*, int)>
     a84:	add	sp, #60	; 0x3c
     a86:	pop	{r4, r5, pc}

00000a88 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     a88:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     a8a:	cbz	r3, ab4 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     a8c:	ldrb	r2, [r3, #0]
     a8e:	tst.w	r2, #112	; 0x70
     a92:	bne.n	a96 <SDFile::rewindDirectory()+0xe>
     a94:	bx	lr
     a96:	push	{r4, lr}
     a98:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     a9a:	movs	r1, #0
     a9c:	mov	r0, r3
     a9e:	bl	b048 <FatFile::seekSet(unsigned long)>
     aa2:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     aa4:	cbz	r0, ab2 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     aa6:	movs	r2, #0
     aa8:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     aaa:	ldmia.w	sp!, {r4, lr}
     aae:	b.w	926c <ExFatFile::seekSet(unsigned long long)>
     ab2:	pop	{r4, pc}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     ab4:	ldr	r0, [r0, #96]	; 0x60
     ab6:	cmp	r0, #0
     ab8:	beq.n	a94 <SDFile::rewindDirectory()+0xc>
     aba:	ldrb.w	r3, [r0, #49]	; 0x31
     abe:	tst.w	r3, #80	; 0x50
     ac2:	beq.n	a94 <SDFile::rewindDirectory()+0xc>
     ac4:	movs	r2, #0
     ac6:	movs	r3, #0
     ac8:	b.w	926c <ExFatFile::seekSet(unsigned long long)>

00000acc <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     acc:	push	{r4, r5, lr}
     ace:	ldr.w	r4, [r0, #1156]	; 0x484
     ad2:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     ad4:	cbz	r4, b00 <SDClass::rmdir(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     ad6:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     ad8:	mov	r2, r1
     ada:	mov	r3, r5
     adc:	mov	r1, r4
     ade:	mov	r0, sp
     ae0:	strb.w	r5, [sp]
     ae4:	strb.w	r5, [sp, #1]
     ae8:	strb.w	r5, [sp, #2]
     aec:	bl	abf0 <FatFile::open(FatVolume*, char const*, int)>
     af0:	cbnz	r0, af6 <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     af2:	add	sp, #60	; 0x3c
     af4:	pop	{r4, r5, pc}
     af6:	mov	r0, sp
     af8:	bl	afec <FatFile::rmdir()>
     afc:	add	sp, #60	; 0x3c
     afe:	pop	{r4, r5, pc}
     b00:	ldr.w	r0, [r0, #1160]	; 0x488
     b04:	cmp	r0, #0
     b06:	beq.n	af2 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     b08:	mov	r2, r1
     b0a:	mov	r3, r4
     b0c:	mov	r1, r0
     b0e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     b10:	strb.w	r4, [sp, #49]	; 0x31
     b14:	strb.w	r4, [sp, #50]	; 0x32
     b18:	strb.w	r4, [sp, #51]	; 0x33
     b1c:	bl	9848 <ExFatFile::open(ExFatVolume*, char const*, int)>
     b20:	cmp	r0, #0
     b22:	beq.n	af2 <SDClass::rmdir(char const*)+0x26>
     b24:	mov	r0, sp
     b26:	bl	9f38 <ExFatFile::rmdir()>
     b2a:	add	sp, #60	; 0x3c
     b2c:	pop	{r4, r5, pc}
     b2e:	nop

00000b30 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     b30:	push	{r4, r5, r6, lr}
     b32:	ldr.w	r4, [r0, #1156]	; 0x484
     b36:	sub	sp, #56	; 0x38
     b38:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     b3a:	cbz	r4, b6e <SDClass::rename(char const*, char const*)+0x3e>
     b3c:	movs	r5, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     b3e:	addw	r4, r4, #1092	; 0x444
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     b42:	mov	r2, r1
     b44:	mov	r3, r5
     b46:	mov	r1, r4
     b48:	mov	r0, sp
     b4a:	strb.w	r5, [sp]
     b4e:	strb.w	r5, [sp, #1]
     b52:	strb.w	r5, [sp, #2]
     b56:	bl	ab30 <FatFile::open(FatFile*, char const*, int)>
     b5a:	cbnz	r0, b60 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     b5c:	add	sp, #56	; 0x38
     b5e:	pop	{r4, r5, r6, pc}
     b60:	mov	r2, r6
     b62:	mov	r1, r4
     b64:	mov	r0, sp
     b66:	bl	ae18 <FatFile::rename(FatFile*, char const*)>
     b6a:	add	sp, #56	; 0x38
     b6c:	pop	{r4, r5, r6, pc}
     b6e:	ldr.w	r0, [r0, #1160]	; 0x488
     b72:	cmp	r0, #0
     b74:	beq.n	b5c <SDClass::rename(char const*, char const*)+0x2c>
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     b76:	add.w	r5, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     b7a:	mov	r2, r1
     b7c:	mov	r3, r4
     b7e:	mov	r1, r5
     b80:	mov	r0, sp
     b82:	strb.w	r4, [sp, #49]	; 0x31
     b86:	strb.w	r4, [sp, #50]	; 0x32
     b8a:	strb.w	r4, [sp, #51]	; 0x33
     b8e:	bl	9748 <ExFatFile::open(ExFatFile*, char const*, int)>
     b92:	cmp	r0, #0
     b94:	beq.n	b5c <SDClass::rename(char const*, char const*)+0x2c>
     b96:	mov	r2, r6
     b98:	mov	r1, r5
     b9a:	mov	r0, sp
     b9c:	bl	a354 <ExFatFile::rename(ExFatFile*, char const*)>
     ba0:	add	sp, #56	; 0x38
     ba2:	pop	{r4, r5, r6, pc}

00000ba4 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
     ba4:	push	{r3, r4, r5, lr}
     ba6:	mov	r5, r0
     ba8:	ldr.w	r0, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     bac:	cbz	r0, be0 <SDClass::usedSize()+0x3c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     bae:	ldr	r4, [r0, #28]
     bb0:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     bb2:	bl	b684 <FatPartition::freeClusterCount()>
     bb6:	ldr.w	r3, [r5, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     bba:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     bbc:	cbz	r3, bd0 <SDClass::usedSize()+0x2c>
     bbe:	ldrb	r0, [r3, #6]
     bc0:	mov.w	r3, #512	; 0x200
     bc4:	lsl.w	r0, r3, r0
     bc8:	uxth	r0, r0
     bca:	umull	r0, r1, r0, r4
     bce:	pop	{r3, r4, r5, pc}
     bd0:	ldr.w	r3, [r5, #1160]	; 0x488
     bd4:	cbz	r3, bf0 <SDClass::usedSize()+0x4c>
     bd6:	ldr.w	r0, [r3, #1084]	; 0x43c
     bda:	umull	r0, r1, r0, r4
     bde:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     be0:	ldr.w	r0, [r5, #1160]	; 0x488
     be4:	cbz	r0, bf0 <SDClass::usedSize()+0x4c>
     be6:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     bea:	bl	9bd4 <ExFatPartition::freeClusterCount()>
     bee:	b.n	bb6 <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     bf0:	movs	r0, #0
     bf2:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     bf4:	pop	{r3, r4, r5, pc}
     bf6:	nop

00000bf8 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
     bf8:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     bfa:	cbz	r3, c02 <SDFile::position()+0xa>
     bfc:	ldr	r0, [r3, #20]
     bfe:	movs	r1, #0
     c00:	bx	lr
     c02:	ldr	r3, [r0, #96]	; 0x60
     c04:	cbz	r3, c0c <SDFile::position()+0x14>
     c06:	ldmia.w	r3, {r0, r1}
     c0a:	bx	lr
     c0c:	mov	r0, r3
     c0e:	mov	r1, r3
		return sdfatfile.curPosition();
	}
     c10:	bx	lr
     c12:	nop

00000c14 <SDFile::size()>:
	virtual uint64_t size() {
     c14:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c16:	cbz	r3, c1e <SDFile::size()+0xa>
     c18:	ldr	r0, [r3, #28]
     c1a:	movs	r1, #0
     c1c:	bx	lr
     c1e:	ldr	r3, [r0, #96]	; 0x60
     c20:	cbz	r3, c28 <SDFile::size()+0x14>
     c22:	ldr	r0, [r3, #16]
     c24:	ldr	r1, [r3, #20]
     c26:	bx	lr
     c28:	mov	r0, r3
     c2a:	mov	r1, r3
		return sdfatfile.size();
	}
     c2c:	bx	lr
     c2e:	nop

00000c30 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     c30:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     c32:	cbz	r3, c3a <SDFile::read(void*, unsigned int)+0xa>
     c34:	mov	r0, r3
     c36:	b.w	ac0c <FatFile::read(void*, unsigned int)>
     c3a:	ldr	r0, [r0, #96]	; 0x60
     c3c:	cbz	r0, c42 <SDFile::read(void*, unsigned int)+0x12>
     c3e:	b.w	9094 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     c42:	mov.w	r0, #4294967295
     c46:	bx	lr

00000c48 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     c48:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     c4a:	cbz	r3, c52 <SDFile::peek()+0xa>
     c4c:	mov	r0, r3
     c4e:	b.w	adac <FatFile::peek()>
     c52:	ldr	r0, [r0, #96]	; 0x60
     c54:	cbz	r0, c5a <SDFile::peek()+0x12>
     c56:	b.w	923c <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     c5a:	mov.w	r0, #4294967295
     c5e:	bx	lr

00000c60 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
     c60:	ldr.w	r2, [r0, #1156]	; 0x484
     c64:	cbz	r2, c7a <SDClass::totalSize()+0x1a>
     c66:	ldrb	r1, [r2, #6]
     c68:	ldr	r0, [r2, #28]
     c6a:	mov.w	r3, #512	; 0x200
     c6e:	lsls	r3, r1
     c70:	uxth	r3, r3
     c72:	subs	r0, #1
     c74:	umull	r0, r1, r3, r0
     c78:	bx	lr
     c7a:	ldr.w	r2, [r0, #1160]	; 0x488
     c7e:	cbz	r2, c8e <SDClass::totalSize()+0x2e>
     c80:	ldr.w	r3, [r2, #1072]	; 0x430
     c84:	ldr.w	r0, [r2, #1084]	; 0x43c
     c88:	umull	r0, r1, r3, r0
     c8c:	bx	lr
     c8e:	movs	r0, #0
     c90:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
     c92:	bx	lr

00000c94 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     c94:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     c96:	cbz	r3, ca6 <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     c98:	ldrb	r3, [r3, #0]
     c9a:	tst.w	r3, #112	; 0x70
     c9e:	ite	ne
     ca0:	movne	r0, #1
     ca2:	moveq	r0, #0
     ca4:	bx	lr
     ca6:	ldr	r0, [r0, #96]	; 0x60
     ca8:	cbz	r0, cb8 <SDFile::isDirectory()+0x24>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     caa:	ldrb.w	r3, [r0, #49]	; 0x31
     cae:	tst.w	r3, #80	; 0x50
     cb2:	ite	ne
     cb4:	movne	r0, #1
     cb6:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     cb8:	bx	lr
     cba:	nop

00000cbc <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     cbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     cc0:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     cc2:	sub	sp, #80	; 0x50
     cc4:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     cc6:	beq.n	d4c <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cc8:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cca:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cce:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cd2:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cd4:	it	ne
     cd6:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cd8:	bl	c434 <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     cdc:	ldr	r3, [sp, #72]	; 0x48
     cde:	cmp	r3, #0
     ce0:	beq.n	d5e <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
     ce2:	movs	r0, #104	; 0x68
     ce4:	bl	f920 <operator new(unsigned int)>
     ce8:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     cea:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     cee:	ldr	r0, [pc, #136]	; (d78 <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     cf0:	ldr	r1, [pc, #136]	; (d7c <SDClass::open(char const*, unsigned char)+0xc0>)
     cf2:	ldr	r2, [sp, #8]
     cf4:	ldrb.w	r3, [sp, #12]
     cf8:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     cfa:	add	r7, sp, #16
     cfc:	strb	r6, [r4, #24]
     cfe:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
     d00:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     d02:	mov.w	r8, #1000	; 0x3e8
     d06:	mov	r1, r7
     d08:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     d0c:	str	r2, [r4, #28]
     d0e:	strb.w	r3, [r4, #32]
     d12:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     d14:	strb	r6, [r4, #12]
     d16:	str	r6, [r4, #16]
     d18:	str.w	r8, [r4, #8]
     d1c:	bl	c1ec <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     d20:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     d22:	ldr	r1, [pc, #92]	; (d80 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     d24:	ldr	r2, [pc, #92]	; (d84 <SDClass::open(char const*, unsigned char)+0xc8>)
     d26:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     d28:	adds	r3, #1
     d2a:	strb	r6, [r5, #4]
     d2c:	str.w	r8, [r5, #8]
     d30:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     d32:	str	r4, [r5, #16]
     d34:	str	r1, [r4, #20]
		if (f) f->refcount++;
     d36:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     d38:	str	r2, [r5, #0]
     d3a:	ldr	r3, [pc, #76]	; (d88 <SDClass::open(char const*, unsigned char)+0xcc>)
     d3c:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     d3e:	mov	r0, r7
     d40:	bl	c264 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     d44:	mov	r0, r5
     d46:	add	sp, #80	; 0x50
     d48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     d4c:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     d50:	adds	r1, #4
     d52:	mov	r0, sp
     d54:	bl	c434 <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     d58:	ldr	r3, [sp, #72]	; 0x48
     d5a:	cmp	r3, #0
     d5c:	bne.n	ce2 <SDClass::open(char const*, unsigned char)+0x26>
     d5e:	ldr	r3, [sp, #76]	; 0x4c
     d60:	cmp	r3, #0
     d62:	bne.n	ce2 <SDClass::open(char const*, unsigned char)+0x26>
     d64:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     d68:	ldr	r2, [pc, #24]	; (d84 <SDClass::open(char const*, unsigned char)+0xc8>)
     d6a:	strb	r3, [r5, #4]
     d6c:	strb	r3, [r5, #12]
     d6e:	str	r3, [r5, #16]
     d70:	str	r1, [r5, #8]
     d72:	str	r2, [r5, #0]
     d74:	add	r7, sp, #16
     d76:	b.n	d3a <SDClass::open(char const*, unsigned char)+0x7e>
     d78:	.word	0x0001497c
     d7c:	.word	0x000148b0
     d80:	.word	0x000148f8
     d84:	.word	0x0001491c
     d88:	.word	0x000148d4

00000d8c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     d8c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     d8e:	cbz	r3, d96 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     d90:	mov	r0, r3
     d92:	b.w	b250 <FatFile::sync()>
     d96:	ldr	r0, [r0, #76]	; 0x4c
     d98:	cbz	r0, d9e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     d9a:	b.w	a0d8 <ExFatFile::sync()>
     d9e:	bx	lr

00000da0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     da0:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     da2:	cbz	r3, daa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     da4:	mov	r0, r3
     da6:	b.w	b2d4 <FatFile::write(void const*, unsigned int)>
     daa:	ldr	r0, [r0, #76]	; 0x4c
     dac:	cbz	r0, db2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     dae:	b.w	a4e4 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     db2:	bx	lr

00000db4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     db4:	ldr	r3, [r0, #92]	; 0x5c
     db6:	cbz	r3, dbe <SDFile::write(void const*, unsigned int)+0xa>
     db8:	mov	r0, r3
     dba:	b.w	b2d4 <FatFile::write(void const*, unsigned int)>
     dbe:	ldr	r0, [r0, #96]	; 0x60
     dc0:	cbz	r0, dc6 <SDFile::write(void const*, unsigned int)+0x12>
     dc2:	b.w	a4e4 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     dc6:	bx	lr

00000dc8 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     dc8:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     dca:	cbz	r2, de6 <SDFile::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     dcc:	ldrb	r3, [r2, #0]
     dce:	and.w	r3, r3, #8
     dd2:	and.w	r0, r3, #255	; 0xff
     dd6:	cbz	r3, e1a <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     dd8:	ldr	r3, [r2, #28]
     dda:	ldr	r0, [r2, #20]
     ddc:	subs	r0, r3, r0
     dde:	it	mi
     de0:	mvnmi.w	r0, #2147483648	; 0x80000000
     de4:	bx	lr
     de6:	ldr	r1, [r0, #96]	; 0x60
     de8:	cbz	r1, e1c <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     dea:	ldrb.w	r3, [r1, #49]	; 0x31
     dee:	and.w	r3, r3, #8
     df2:	and.w	r0, r3, #255	; 0xff
     df6:	cbz	r3, e1a <SDFile::available()+0x52>
     df8:	ldrd	r2, r3, [r1, #16]
     dfc:	ldrd	r0, r1, [r1]
     e00:	subs	r0, r2, r0
     e02:	push	{r4, r5}
     e04:	sbc.w	r1, r3, r1
     e08:	movs	r5, #0
     e0a:	mvn.w	r4, #2147483648	; 0x80000000
     e0e:	cmp	r5, r1
     e10:	it	eq
     e12:	cmpeq	r4, r0
     e14:	bcs.n	e18 <SDFile::available()+0x50>
     e16:	mov	r0, r4
		return sdfatfile.available();
	}
     e18:	pop	{r4, r5}
     e1a:	bx	lr
     e1c:	mov	r0, r1
     e1e:	bx	lr

00000e20 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     e20:	push	{r4, r6, r7}
     e22:	ldr	r4, [sp, #12]
     e24:	mov	r6, r2
     e26:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     e28:	cbz	r4, e38 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     e2a:	cmp	r4, #1
     e2c:	beq.n	e6c <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     e2e:	cmp	r4, #2
     e30:	beq.n	e4e <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
     e32:	movs	r0, #0
     e34:	pop	{r4, r6, r7}
     e36:	bx	lr
     e38:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e3a:	cbz	r4, e74 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e3c:	cmp	r3, #1
     e3e:	it	eq
     e40:	cmpeq	r2, #0
     e42:	bcs.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
     e44:	mov	r0, r4
     e46:	mov	r1, r2
     e48:	pop	{r4, r6, r7}
     e4a:	b.w	b048 <FatFile::seekSet(unsigned long)>
     e4e:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e50:	cbz	r3, e80 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     e52:	ldr	r2, [r3, #28]
     e54:	adds	r6, r6, r2
     e56:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e5a:	cmp	r7, #1
     e5c:	it	eq
     e5e:	cmpeq	r6, #0
     e60:	bcs.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
     e62:	mov	r1, r6
     e64:	mov	r0, r3
     e66:	pop	{r4, r6, r7}
     e68:	b.w	b048 <FatFile::seekSet(unsigned long)>
     e6c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e6e:	cbz	r3, e94 <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
     e70:	ldr	r2, [r3, #20]
     e72:	b.n	e54 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e74:	ldr	r0, [r0, #96]	; 0x60
     e76:	cmp	r0, #0
     e78:	beq.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
     e7a:	pop	{r4, r6, r7}
     e7c:	b.w	926c <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e80:	ldr	r0, [r0, #96]	; 0x60
     e82:	cmp	r0, #0
     e84:	beq.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e86:	ldrd	r2, r3, [r0, #16]
     e8a:	adds	r2, r2, r6
     e8c:	adcs	r3, r7
     e8e:	pop	{r4, r6, r7}
     e90:	b.w	926c <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e94:	ldr	r0, [r0, #96]	; 0x60
     e96:	cmp	r0, #0
     e98:	beq.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e9a:	ldrd	r2, r3, [r0]
     e9e:	adds	r2, r2, r6
     ea0:	adcs	r3, r7
     ea2:	b.n	e7a <SDFile::seek(unsigned long long, int)+0x5a>

00000ea4 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ea4:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ea6:	ldr	r3, [pc, #32]	; (ec8 <File::~File()+0x24>)
     ea8:	push	{r4, lr}
     eaa:	mov	r4, r0
     eac:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     eae:	cbz	r2, ec2 <File::~File()+0x1e>
     eb0:	ldr	r3, [r2, #16]
     eb2:	subs	r3, #1
     eb4:	str	r3, [r2, #16]
     eb6:	cbnz	r3, ec2 <File::~File()+0x1e>
     eb8:	ldr	r0, [r0, #16]
     eba:	cbz	r0, ec2 <File::~File()+0x1e>
     ebc:	ldr	r3, [r0, #0]
     ebe:	ldr	r3, [r3, #32]
     ec0:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     ec2:	mov	r0, r4
     ec4:	pop	{r4, pc}
     ec6:	nop
     ec8:	.word	0x0001491c

00000ecc <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     ecc:	push	{r3, r4, r5, lr}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     ece:	ldr	r3, [r0, #92]	; 0x5c
     ed0:	ldr	r2, [pc, #80]	; (f24 <SDFile::~SDFile()+0x58>)
     ed2:	str	r2, [r0, #0]
     ed4:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     ed6:	add.w	r5, r0, #36	; 0x24
     eda:	cbz	r3, f1a <SDFile::~SDFile()+0x4e>
     edc:	mov	r0, r5
     ede:	bl	c264 <FsBaseFile::close()>
		if (filename) free(filename);
     ee2:	ldr	r0, [r4, #100]	; 0x64
     ee4:	cbz	r0, eea <SDFile::~SDFile()+0x1e>
     ee6:	bl	10668 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     eea:	ldr	r3, [pc, #60]	; (f28 <SDFile::~SDFile()+0x5c>)
     eec:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     eee:	mov	r0, r5
     ef0:	bl	c264 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ef4:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ef6:	ldr	r3, [pc, #52]	; (f2c <SDFile::~SDFile()+0x60>)
     ef8:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     efa:	cbz	r2, f0e <SDFile::~SDFile()+0x42>
     efc:	ldr	r3, [r2, #16]
     efe:	subs	r3, #1
     f00:	str	r3, [r2, #16]
     f02:	cbnz	r3, f0e <SDFile::~SDFile()+0x42>
     f04:	ldr	r0, [r4, #16]
     f06:	cbz	r0, f0e <SDFile::~SDFile()+0x42>
     f08:	ldr	r3, [r0, #0]
     f0a:	ldr	r3, [r3, #32]
     f0c:	blx	r3
	}
     f0e:	mov	r0, r4
     f10:	movs	r1, #104	; 0x68
     f12:	bl	f924 <operator delete(void*, unsigned int)>
     f16:	mov	r0, r4
     f18:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     f1a:	ldr	r3, [r0, #96]	; 0x60
     f1c:	cmp	r3, #0
     f1e:	bne.n	edc <SDFile::~SDFile()+0x10>
     f20:	b.n	ee2 <SDFile::~SDFile()+0x16>
     f22:	nop
     f24:	.word	0x0001497c
     f28:	.word	0x000148d4
     f2c:	.word	0x0001491c

00000f30 <File::~File()>:
     f30:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f32:	ldr	r3, [pc, #40]	; (f5c <File::~File()+0x2c>)
     f34:	push	{r4, lr}
     f36:	mov	r4, r0
     f38:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f3a:	cbz	r2, f4e <File::~File()+0x1e>
     f3c:	ldr	r3, [r2, #16]
     f3e:	subs	r3, #1
     f40:	str	r3, [r2, #16]
     f42:	cbnz	r3, f4e <File::~File()+0x1e>
     f44:	ldr	r0, [r0, #16]
     f46:	cbz	r0, f4e <File::~File()+0x1e>
     f48:	ldr	r3, [r0, #0]
     f4a:	ldr	r3, [r3, #32]
     f4c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     f4e:	mov	r0, r4
     f50:	movs	r1, #20
     f52:	bl	f924 <operator delete(void*, unsigned int)>
     f56:	mov	r0, r4
     f58:	pop	{r4, pc}
     f5a:	nop
     f5c:	.word	0x0001491c

00000f60 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f60:	ldr.w	r2, [r0, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     f64:	push	{r3, r4, r5, lr}
     f66:	ldr	r3, [pc, #104]	; (fd0 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f68:	ldr	r5, [pc, #104]	; (fd4 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
     f6a:	str	r3, [r0, #0]
     f6c:	mov	r4, r0
     f6e:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f72:	cbz	r2, f7c <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f74:	ldr	r3, [r2, #16]
     f76:	subs	r3, #1
     f78:	str	r3, [r2, #16]
     f7a:	cbz	r3, fb0 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     f7c:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f80:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f84:	cbz	r2, f8e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f86:	ldr	r3, [r2, #16]
     f88:	subs	r3, #1
     f8a:	str	r3, [r2, #16]
     f8c:	cbz	r3, fc0 <MTPStorage_SD::~MTPStorage_SD()+0x60>
     f8e:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f92:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f96:	cbz	r2, fac <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f98:	ldr	r3, [r2, #16]
     f9a:	subs	r3, #1
     f9c:	str	r3, [r2, #16]
     f9e:	cbnz	r3, fac <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     fa0:	ldr.w	r0, [r4, #184]	; 0xb8
     fa4:	cbz	r0, fac <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     fa6:	ldr	r3, [r0, #0]
     fa8:	ldr	r3, [r3, #32]
     faa:	blx	r3
     fac:	mov	r0, r4
     fae:	pop	{r3, r4, r5, pc}
     fb0:	ldr.w	r0, [r0, #224]	; 0xe0
     fb4:	cmp	r0, #0
     fb6:	beq.n	f7c <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     fb8:	ldr	r3, [r0, #0]
     fba:	ldr	r3, [r3, #32]
     fbc:	blx	r3
     fbe:	b.n	f7c <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     fc0:	ldr.w	r0, [r4, #204]	; 0xcc
     fc4:	cmp	r0, #0
     fc6:	beq.n	f8e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     fc8:	ldr	r3, [r0, #0]
     fca:	ldr	r3, [r3, #32]
     fcc:	blx	r3
     fce:	b.n	f8e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     fd0:	.word	0x00014b7c
     fd4:	.word	0x0001491c

00000fd8 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     fd8:	push	{r3, r4, r5, lr}
     fda:	ldr	r3, [r0, #92]	; 0x5c
     fdc:	ldr	r2, [pc, #72]	; (1028 <SDFile::~SDFile()+0x50>)
     fde:	str	r2, [r0, #0]
     fe0:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     fe2:	add.w	r5, r0, #36	; 0x24
     fe6:	cbz	r3, 101e <SDFile::~SDFile()+0x46>
     fe8:	mov	r0, r5
     fea:	bl	c264 <FsBaseFile::close()>
		if (filename) free(filename);
     fee:	ldr	r0, [r4, #100]	; 0x64
     ff0:	cbz	r0, ff6 <SDFile::~SDFile()+0x1e>
     ff2:	bl	10668 <free>
     ff6:	ldr	r3, [pc, #52]	; (102c <SDFile::~SDFile()+0x54>)
     ff8:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     ffa:	mov	r0, r5
     ffc:	bl	c264 <FsBaseFile::close()>
    1000:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1002:	ldr	r3, [pc, #44]	; (1030 <SDFile::~SDFile()+0x58>)
    1004:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1006:	cbz	r2, 101a <SDFile::~SDFile()+0x42>
    1008:	ldr	r3, [r2, #16]
    100a:	subs	r3, #1
    100c:	str	r3, [r2, #16]
    100e:	cbnz	r3, 101a <SDFile::~SDFile()+0x42>
    1010:	ldr	r0, [r4, #16]
    1012:	cbz	r0, 101a <SDFile::~SDFile()+0x42>
    1014:	ldr	r3, [r0, #0]
    1016:	ldr	r3, [r3, #32]
    1018:	blx	r3
	}
    101a:	mov	r0, r4
    101c:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    101e:	ldr	r3, [r0, #96]	; 0x60
    1020:	cmp	r3, #0
    1022:	bne.n	fe8 <SDFile::~SDFile()+0x10>
    1024:	b.n	fee <SDFile::~SDFile()+0x16>
    1026:	nop
    1028:	.word	0x0001497c
    102c:	.word	0x000148d4
    1030:	.word	0x0001491c

00001034 <storage_configure()>:
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
    1034:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    1038:	movs	r1, #7
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
    103a:	sub	sp, #52	; 0x34
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    103c:	ldr	r0, [pc, #372]	; (11b4 <storage_configure()+0x180>)
    103e:	ldr	r6, [pc, #376]	; (11b8 <storage_configure()+0x184>)
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    1040:	ldr	r5, [pc, #376]	; (11bc <storage_configure()+0x188>)
    1042:	bl	7c40 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
    1046:	movs	r1, #12
    1048:	ldr	r0, [pc, #360]	; (11b4 <storage_configure()+0x180>)
    104a:	bl	7ce4 <SPIClass::setMISO(unsigned char)>
      SPI.setSCK(SD_SCK);
    104e:	movs	r1, #14
    1050:	ldr	r0, [pc, #352]	; (11b4 <storage_configure()+0x180>)
    1052:	bl	7d84 <SPIClass::setSCK(unsigned char)>
          }
        }
        else if(cs[ii]<BUILTIN_SDCARD)
      #endif
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
    1056:	movs	r1, #1
    1058:	movs	r0, #10
    105a:	bl	e6d0 <pinMode>
			} else if (pin == 8) {
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
			} else if (pin == 9) {
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
			} else if (pin == 10) {
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    105e:	ldr	r3, [pc, #352]	; (11c0 <storage_configure()+0x18c>)
    1060:	movs	r4, #0
    1062:	movs	r2, #16
    1064:	movs	r7, #10
    1066:	str	r2, [r3, #0]
    1068:	strb.w	r4, [sp, #13]
    106c:	str	r4, [sp, #20]
    106e:	add	r3, sp, #12
    1070:	strb.w	r7, [sp, #12]
    1074:	str	r6, [sp, #16]
    1076:	ldmia.w	r3, {r0, r1, r2}
    107a:	add	r3, sp, #24
    107c:	stmia.w	r3, {r0, r1, r2}
    1080:	strb.w	r4, [sp, #25]
    1084:	str	r4, [sp, #32]
    1086:	strb.w	r7, [sp, #24]
    108a:	str	r6, [sp, #28]
    108c:	ldmia.w	r3, {r0, r1, r2}
    1090:	add	r3, sp, #36	; 0x24
    1092:	stmia.w	r3, {r0, r1, r2}
    1096:	add.w	r4, r5, #1184	; 0x4a0
    109a:	ldmia	r3, {r1, r2, r3}
    109c:	mov	r0, r4
    109e:	bl	c6ec <SdSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    10a2:	ldrb.w	r3, [r5, #1203]	; 0x4b3
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    10a6:	str.w	r4, [r5, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    10aa:	cbz	r3, 10ca <storage_configure()+0x96>
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
    10ac:	ldr	r3, [pc, #276]	; (11c4 <storage_configure()+0x190>)
    10ae:	ldr	r1, [pc, #280]	; (11c8 <storage_configure()+0x194>)
    10b0:	ldr	r3, [r3, #0]
    10b2:	str	r3, [sp, #0]
    10b4:	movs	r2, #0
    10b6:	movs	r3, #10
    10b8:	ldr	r0, [pc, #272]	; (11cc <storage_configure()+0x198>)
    10ba:	bl	f7b0 <Print::printf(char const*, ...)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    10be:	ldr	r0, [pc, #268]	; (11cc <storage_configure()+0x198>)
      uint64_t totalSize = ramfs[ii].totalSize();
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    }
    #endif
}
    10c0:	add	sp, #52	; 0x34
    10c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10c6:	b.w	f780 <Print::println()>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
    10ca:	mov	r1, r4
    10cc:	adds	r0, r5, #4
    10ce:	bl	c36c <FsVolume::begin(BlockDeviceInterface*)>
    10d2:	cmp	r0, #0
    10d4:	beq.n	10ac <storage_configure()+0x78>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    10d6:	ldr	r1, [pc, #248]	; (11d0 <storage_configure()+0x19c>)
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
    10d8:	ldr.w	r8, [pc, #232]	; 11c4 <storage_configure()+0x190>
    10dc:	ldr	r3, [r1, #4]
    10de:	ldr.w	r2, [r8]
    10e2:	cmp	r3, #19
    10e4:	bgt.n	10f2 <storage_configure()+0xbe>
        sd_name[fsCount] = name;
    10e6:	add.w	r4, r1, r3, lsl #2
        sdx[fsCount++] = &fs;
    10ea:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    10ec:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    10ee:	str	r5, [r4, #88]	; 0x58
    10f0:	str	r3, [r1, #4]
    10f2:	ldr.w	r0, [r5, #1156]	; 0x484
    10f6:	ldr	r3, [pc, #196]	; (11bc <storage_configure()+0x188>)
    10f8:	cmp	r0, #0
    10fa:	beq.n	118a <storage_configure()+0x156>
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    10fc:	ldrb	r6, [r0, #6]
    10fe:	ldr	r4, [r0, #28]
    1100:	mov.w	r3, #512	; 0x200
    1104:	lsl.w	r6, r3, r6
    1108:	uxth	r6, r6
    110a:	subs	r4, #1
    110c:	umull	r6, r7, r6, r4
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    1110:	bl	b684 <FatPartition::freeClusterCount()>
    1114:	ldr.w	r3, [r5, #1156]	; 0x484
    1118:	ldr	r2, [pc, #160]	; (11bc <storage_configure()+0x188>)
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    111a:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    111c:	cbz	r3, 1176 <storage_configure()+0x142>
    111e:	ldrb	r0, [r3, #6]
    1120:	ldr.w	r2, [r8]
    1124:	mov.w	r3, #512	; 0x200
    1128:	lsl.w	r0, r3, r0
    112c:	uxth	r0, r0
    112e:	umull	r4, r5, r0, r4
          uint64_t totalSize = sdx[ii].totalSize();
          uint64_t usedSize  = sdx[ii].usedSize();
          Serial.printf("SD Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    1132:	str	r2, [sp, #0]
    1134:	movs	r2, #0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    1136:	mov	r9, r2
    1138:	ldr	r1, [pc, #152]	; (11d4 <storage_configure()+0x1a0>)
    113a:	ldr	r0, [pc, #144]	; (11cc <storage_configure()+0x198>)
    113c:	mov.w	r8, #10
    1140:	movs	r3, #10
    1142:	bl	f7b0 <Print::printf(char const*, ...)>
    1146:	mov	r2, r6
    1148:	mov	r3, r7
    114a:	stmia.w	sp, {r8, r9}
    114e:	ldr	r0, [pc, #124]	; (11cc <storage_configure()+0x198>)
    1150:	bl	f7cc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1154:	movs	r1, #1
    1156:	ldr	r0, [pc, #128]	; (11d8 <storage_configure()+0x1a4>)
    1158:	bl	ddcc <usb_serial_write>
    115c:	stmia.w	sp, {r8, r9}
    1160:	mov	r2, r4
    1162:	mov	r3, r5
    1164:	ldr	r0, [pc, #100]	; (11cc <storage_configure()+0x198>)
    1166:	bl	f7cc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    116a:	ldr	r0, [pc, #96]	; (11cc <storage_configure()+0x198>)
      uint64_t totalSize = ramfs[ii].totalSize();
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    }
    #endif
}
    116c:	add	sp, #52	; 0x34
    116e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1172:	b.w	f780 <Print::println()>
    1176:	ldr.w	r3, [r2, #1160]	; 0x488
    117a:	ldr.w	r2, [r8]
    117e:	cbz	r3, 11ac <storage_configure()+0x178>
    1180:	ldr.w	r0, [r3, #1084]	; 0x43c
    1184:	umull	r4, r5, r0, r4
    1188:	b.n	1132 <storage_configure()+0xfe>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    118a:	ldr.w	r0, [r3, #1160]	; 0x488
    118e:	cbz	r0, 11a2 <storage_configure()+0x16e>
    1190:	ldr.w	r4, [r0, #1072]	; 0x430
    1194:	ldr.w	r6, [r0, #1084]	; 0x43c
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    1198:	umull	r6, r7, r4, r6
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    119c:	bl	9bd4 <ExFatPartition::freeClusterCount()>
    11a0:	b.n	1114 <storage_configure()+0xe0>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    11a2:	movs	r4, #0
    11a4:	movs	r5, #0
    11a6:	mov	r6, r4
    11a8:	mov	r7, r5
    11aa:	b.n	1132 <storage_configure()+0xfe>
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    11ac:	movs	r4, #0
    11ae:	movs	r5, #0
    11b0:	b.n	1132 <storage_configure()+0xfe>
    11b2:	nop
    11b4:	.word	0x1fff0994
    11b8:	.word	0x01f78a40
    11bc:	.word	0x1fff4550
    11c0:	.word	0x400ff084
    11c4:	.word	0x1fff0978
    11c8:	.word	0x00014a54
    11cc:	.word	0x1fff0c58
    11d0:	.word	0x1fff3c48
    11d4:	.word	0x00014a7c
    11d8:	.word	0x00014ca8

000011dc <pushData(unsigned long*)>:
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11dc:	push	{r4, r5, r6, lr}
    11de:	ldr	r6, [pc, #76]	; (122c <pushData(unsigned long*)+0x50>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    11e0:	ldr	r3, [pc, #76]	; (1230 <pushData(unsigned long*)+0x54>)
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11e2:	ldrh	r4, [r6, #0]
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    11e4:	ldrh	r5, [r3, #0]
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11e6:	adds	r4, #1
    11e8:	uxth	r4, r4
  if(f >= MAXBUF) f=0;
    11ea:	cmp	r4, #72	; 0x48
    11ec:	it	cs
    11ee:	movcs	r4, #0
  if(f == rear_) return 0;
    11f0:	cmp	r4, r5
    11f2:	beq.n	1226 <pushData(unsigned long*)+0x4a>
    11f4:	mov	r1, r0

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
    11f6:	ldr	r0, [pc, #60]	; (1234 <pushData(unsigned long*)+0x58>)
    11f8:	mov.w	r2, #1024	; 0x400
    11fc:	add.w	r0, r0, r4, lsl #10
    1200:	bl	db58 <memcpy>
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    1204:	cmp	r4, r5
  if(count>maxCount) maxCount=count;
    1206:	ldr	r3, [pc, #48]	; (1238 <pushData(unsigned long*)+0x5c>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
    1208:	strh	r4, [r6, #0]
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    120a:	itet	cc
    120c:	rsbcc	r5, r5, #72	; 0x48
    1210:	subcs	r4, r4, r5
    1212:	addcc	r4, r4, r5
  if(count>maxCount) maxCount=count;
    1214:	ldrh	r2, [r3, #0]
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    1216:	uxth	r4, r4
  if(count>maxCount) maxCount=count;
    1218:	cmp	r2, r4
    121a:	bcs.n	1222 <pushData(unsigned long*)+0x46>
    121c:	strh	r4, [r3, #0]
  //
  return 1;
    121e:	movs	r0, #1
    1220:	pop	{r4, r5, r6, pc}
    1222:	movs	r0, #1
}
    1224:	pop	{r4, r5, r6, pc}
void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    1226:	movs	r0, #0
    1228:	pop	{r4, r5, r6, pc}
    122a:	nop
    122c:	.word	0x1fff3d4c
    1230:	.word	0x20006a1e
    1234:	.word	0x1fff4a08
    1238:	.word	0x20006a1c

0000123c <acq_isr()>:

  uint32_t acq_count=0;
  uint32_t acq_miss=0;

    void acq_isr(void)
    {
    123c:	push	{r3, r4, r5, r6, r7, lr}
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
    123e:	ldr	r0, [pc, #88]	; (1298 <acq_isr()+0x5c>)

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1240:	ldr	r4, [pc, #88]	; (129c <acq_isr()+0x60>)

        daddr = (uint32_t)(dma.TCD->DADDR);
    1242:	ldr	r2, [r0, #0]

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1244:	ldr	r1, [r4, #0]

        daddr = (uint32_t)(dma.TCD->DADDR);
        dma.clearInterrupt();

        if (daddr < (uint32_t)tdm_rx_buffer + sizeof(tdm_rx_buffer) / 2) {
    1246:	ldr	r3, [pc, #88]	; (12a0 <acq_isr()+0x64>)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
    1248:	ldr	r7, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    124a:	ldr	r5, [pc, #88]	; (12a4 <acq_isr()+0x68>)
    124c:	ldrb	r6, [r0, #4]
    124e:	ldr	r0, [pc, #88]	; (12a8 <acq_isr()+0x6c>)
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
    1250:	sub.w	r2, r3, #1024	; 0x400

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1254:	adds	r1, #1
    1256:	str	r1, [r4, #0]
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
    1258:	cmp	r7, r3
    125a:	it	cc
    125c:	movcc	r2, r3
    125e:	strb	r6, [r5, #0]
    1260:	movs	r3, #0

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
    1262:	ldr.w	r1, [r2, r3, lsl #3]
    1266:	str.w	r1, [r0, r3, lsl #3]
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
    126a:	adds	r3, #1
    126c:	cmp	r3, #128	; 0x80
    126e:	bne.n	1262 <acq_isr()+0x26>
    1270:	ldr	r1, [pc, #52]	; (12a8 <acq_isr()+0x6c>)
    1272:	mov	r3, r2
    1274:	add.w	r0, r1, #1024	; 0x400
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
    1278:	ldr	r2, [r3, #4]
    127a:	str	r2, [r1, #4]
    127c:	adds	r1, #8
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
    127e:	cmp	r0, r1
    1280:	add.w	r3, r3, #8
    1284:	bne.n	1278 <acq_isr()+0x3c>
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
          }
        }

        if(!pushData(acq_rx_buffer)) acq_miss++;
    1286:	ldr	r0, [pc, #32]	; (12a8 <acq_isr()+0x6c>)
    1288:	bl	11dc <pushData(unsigned long*)>
    128c:	cbnz	r0, 1296 <acq_isr()+0x5a>
    128e:	ldr	r2, [pc, #28]	; (12ac <acq_isr()+0x70>)
    1290:	ldr	r3, [r2, #0]
    1292:	adds	r3, #1
    1294:	str	r3, [r2, #0]
    1296:	pop	{r3, r4, r5, r6, r7, pc}
    1298:	.word	0x1fff1638
    129c:	.word	0x1fff3844
    12a0:	.word	0x1fff4150
    12a4:	.word	0x4000801f
    12a8:	.word	0x1fff3848
    12ac:	.word	0x20006a30

000012b0 <pullData(unsigned long*, unsigned long)>:
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12b0:	push	{r3, r4, r5, lr}
    12b2:	ldr	r4, [pc, #72]	; (12fc <pullData(unsigned long*, unsigned long)+0x4c>)
  if(r == (front_/ndbl)) return 0;
    12b4:	ldr	r3, [pc, #72]	; (1300 <pullData(unsigned long*, unsigned long)+0x50>)
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12b6:	ldrh	r2, [r4, #0]
  if(r == (front_/ndbl)) return 0;
    12b8:	ldrh	r3, [r3, #0]
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12ba:	udiv	r2, r2, r1
  if(r == (front_/ndbl)) return 0;
    12be:	udiv	r5, r3, r1
    12c2:	cmp	r2, r5
    12c4:	beq.n	12f8 <pullData(unsigned long*, unsigned long)+0x48>
    12c6:	uxth	r3, r2
  if(++r >= (MAXBUF/ndbl)) r=0;
    12c8:	adds	r3, #1
    12ca:	uxth	r3, r3
    12cc:	movs	r2, #72	; 0x48
    12ce:	udiv	r2, r2, r1
    12d2:	cmp	r3, r2
    12d4:	bcs.n	12f0 <pullData(unsigned long*, unsigned long)+0x40>
    12d6:	ldr	r5, [pc, #44]	; (1304 <pullData(unsigned long*, unsigned long)+0x54>)
    12d8:	lsls	r2, r1, #10
    12da:	smulbb	r1, r1, r3
    12de:	mla	r3, r2, r3, r5
    12e2:	uxth	r5, r1
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
    12e4:	mov	r1, r3
    12e6:	bl	db58 <memcpy>
  rear_ = r*ndbl;
    12ea:	strh	r5, [r4, #0]
  return 1;
    12ec:	movs	r0, #1
    12ee:	pop	{r3, r4, r5, pc}
    12f0:	ldr	r3, [pc, #16]	; (1304 <pullData(unsigned long*, unsigned long)+0x54>)
    12f2:	lsls	r2, r1, #10
    12f4:	movs	r5, #0
    12f6:	b.n	12e4 <pullData(unsigned long*, unsigned long)+0x34>
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
    12f8:	movs	r0, #0
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
  rear_ = r*ndbl;
  return 1;
}
    12fa:	pop	{r3, r4, r5, pc}
    12fc:	.word	0x20006a1e
    1300:	.word	0x1fff3d4c
    1304:	.word	0x1fff4a08

00001308 <do_menu(short)>:
void do_menu1(void);
void do_menu2(void);
void do_menu3(void);

int16_t do_menu(int16_t state)
{ // check Serial input
    1308:	push	{r4, lr}
    130a:	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    130c:	bl	dd78 <usb_serial_available>
  if(!Serial.available()) return state;
    1310:	cbnz	r0, 1316 <do_menu(short)+0xe>
      break;
    default:
      break;
  }
  return state;
}
    1312:	mov	r0, r4
    1314:	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
    1316:	bl	dd00 <usb_serial_getchar>

int16_t do_menu(int16_t state)
{ // check Serial input
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
    131a:	uxtb	r0, r0
    131c:	cmp	r0, #114	; 0x72
    131e:	beq.n	1354 <do_menu(short)+0x4c>
    1320:	cmp	r0, #115	; 0x73
    1322:	beq.n	133e <do_menu(short)+0x36>
    1324:	cmp	r0, #113	; 0x71
    1326:	bne.n	1312 <do_menu(short)+0xa>
      if(state>=0) return state;
      state=0;
      Serial.println("\nStart");
      break;
    case 'q': // stop acquisition
      if(state<0) return state;
    1328:	cmp	r4, #0
    132a:	blt.n	1312 <do_menu(short)+0xa>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    132c:	movs	r1, #5
    132e:	ldr	r0, [pc, #60]	; (136c <do_menu(short)+0x64>)
    1330:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1334:	ldr	r0, [pc, #56]	; (1370 <do_menu(short)+0x68>)
    1336:	bl	f780 <Print::println()>
      state=4;
    133a:	movs	r4, #4
    133c:	b.n	1312 <do_menu(short)+0xa>
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
  {
    case 's': // start acquisition
      if(state>=0) return state;
    133e:	cmp	r4, #0
    1340:	bge.n	1312 <do_menu(short)+0xa>
    1342:	movs	r1, #6
    1344:	ldr	r0, [pc, #44]	; (1374 <do_menu(short)+0x6c>)
    1346:	bl	ddcc <usb_serial_write>
    134a:	ldr	r0, [pc, #36]	; (1370 <do_menu(short)+0x68>)
    134c:	bl	f780 <Print::println()>
    1350:	movs	r4, #0
    1352:	b.n	1312 <do_menu(short)+0xa>
    1354:	movs	r1, #5
    1356:	ldr	r0, [pc, #32]	; (1378 <do_menu(short)+0x70>)
    1358:	bl	ddcc <usb_serial_write>
    135c:	ldr	r0, [pc, #16]	; (1370 <do_menu(short)+0x68>)
    135e:	bl	f780 <Print::println()>
      Serial.println("\nStop");
      break;
#if USE_EVENTS==1
    case 'r': 
      Serial.println("Reset");
      mtpd.send_DeviceResetEvent();
    1362:	ldr	r0, [pc, #24]	; (137c <do_menu(short)+0x74>)
    1364:	bl	7740 <MTPD::send_DeviceResetEvent()>
      break;
    1368:	b.n	1312 <do_menu(short)+0xa>
    136a:	nop
    136c:	.word	0x00014a9c
    1370:	.word	0x1fff0c58
    1374:	.word	0x00014a94
    1378:	.word	0x00014aa4
    137c:	.word	0x20006a08

00001380 <file_writeData(void*, unsigned long)>:
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    1380:	push	{r4, r5, r6, lr}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1382:	ldr	r6, [pc, #48]	; (13b4 <file_writeData(void*, unsigned long)+0x34>)
    1384:	ldr	r3, [r6, #16]
    1386:	cbz	r3, 13b0 <file_writeData(void*, unsigned long)+0x30>
    1388:	ldr	r2, [r3, #0]
    138a:	mov	r5, r0
    138c:	mov	r0, r3
    138e:	ldr	r3, [r2, #68]	; 0x44
    1390:	mov	r4, r1
    1392:	blx	r3
    1394:	cbz	r0, 13b0 <file_writeData(void*, unsigned long)+0x30>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1396:	ldr	r0, [r6, #16]
    1398:	cbz	r0, 13a4 <file_writeData(void*, unsigned long)+0x24>
    139a:	ldr	r3, [r0, #0]
    139c:	mov	r1, r5
    139e:	ldr	r3, [r3, #44]	; 0x2c
    13a0:	mov	r2, r4
    13a2:	blx	r3
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
    13a4:	subs	r0, r4, r0
    13a6:	clz	r0, r0
    13aa:	lsrs	r0, r0, #5
    13ac:	sxth	r0, r0
}
    13ae:	pop	{r4, r5, r6, pc}
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    13b0:	movs	r0, #0
    13b2:	pop	{r4, r5, r6, pc}
    13b4:	.word	0x1fff097c

000013b8 <file_close()>:
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    13b8:	push	{r4, lr}
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    13ba:	ldr	r4, [pc, #32]	; (13dc <file_close()+0x24>)
    13bc:	ldr	r0, [r4, #16]
    13be:	cbz	r0, 13d8 <file_close()+0x20>
    13c0:	ldr	r3, [r0, #0]
    13c2:	ldr	r3, [r3, #64]	; 0x40
    13c4:	blx	r3
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    13c6:	ldr	r0, [r4, #16]
    13c8:	cbz	r0, 13d8 <file_close()+0x20>
    13ca:	ldr	r3, [r0, #0]
    13cc:	ldr	r3, [r3, #68]	; 0x44
    13ce:	blx	r3
    13d0:	eor.w	r0, r0, #1
    13d4:	uxtb	r0, r0
  return (!mfile);
}
    13d6:	pop	{r4, pc}
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    13d8:	movs	r0, #1
    13da:	pop	{r4, pc}
    13dc:	.word	0x1fff097c

000013e0 <printTimestamp(unsigned long)>:
 */

/****************** Time Utilities *****************************/
#include "TimeLib.h"
void printTimestamp(uint32_t tt)
{
    13e0:	push	{r4, r5, lr}
    13e2:	sub	sp, #28
  tmElements_t tm;
  breakTime(tt, tm);
    13e4:	add	r1, sp, #16
    13e6:	bl	7e3c <breakTime(long, tmElements_t&)>
  Serial.printf("Now: %04d-%02d-%02d_%02d:%02d:%02d\r\n", 
                      tmYearToCalendar(tm.Year), tm.Month, tm.Day, tm.Hour, tm.Minute, tm.Second);
    13ea:	ldrb.w	r2, [sp, #22]
    13ee:	ldrb.w	r0, [sp, #18]
    13f2:	ldrb.w	r1, [sp, #20]
    13f6:	ldrb.w	r5, [sp, #16]
    13fa:	ldrb.w	r4, [sp, #17]
    13fe:	str	r0, [sp, #4]
    1400:	str	r1, [sp, #0]
    1402:	ldrb.w	r3, [sp, #21]
    1406:	str	r5, [sp, #12]
    1408:	addw	r2, r2, #1970	; 0x7b2
    140c:	str	r4, [sp, #8]
    140e:	ldr	r1, [pc, #12]	; (141c <printTimestamp(unsigned long)+0x3c>)
    1410:	ldr	r0, [pc, #12]	; (1420 <printTimestamp(unsigned long)+0x40>)
    1412:	bl	f7b0 <Print::printf(char const*, ...)>
}
    1416:	add	sp, #28
    1418:	pop	{r4, r5, pc}
    141a:	nop
    141c:	.word	0x00014aac
    1420:	.word	0x1fff0c58

00001424 <makeHeader(char*)>:
    }
  #endif


void makeHeader(char *header)
{
    1424:	push	{r4, lr}
  memset(header,0,512);
    1426:	movs	r1, #0
    1428:	mov.w	r2, #512	; 0x200
    }
  #endif


void makeHeader(char *header)
{
    142c:	mov	r4, r0
  memset(header,0,512);
    142e:	bl	10dec <memset>
  sprintf(header,"WMXZ");
    1432:	ldr	r3, [pc, #32]	; (1454 <makeHeader(char*)+0x30>)
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
    1434:	movs	r2, #1


void makeHeader(char *header)
{
  memset(header,0,512);
  sprintf(header,"WMXZ");
    1436:	ldr	r0, [r3, #0]
    1438:	ldrb	r3, [r3, #4]
    143a:	strb	r3, [r4, #4]
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
    143c:	str.w	r2, [r4, #5]


void makeHeader(char *header)
{
  memset(header,0,512);
  sprintf(header,"WMXZ");
    1440:	str	r0, [r4, #0]
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
  uhdr[1]=rtc_get();
    1442:	bl	e694 <rtc_get>
    1446:	str.w	r0, [r4, #9]
  uhdr[2]=micros();
    144a:	bl	e6dc <micros>
    144e:	str.w	r0, [r4, #13]
    1452:	pop	{r4, pc}
    1454:	.word	0x00014ad4

00001458 <file_writeHeader()>:
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    1458:	push	{r4, lr}
    145a:	ldr	r4, [pc, #52]	; (1490 <file_writeHeader()+0x38>)
    145c:	ldr	r0, [r4, #16]
    145e:	cbz	r0, 148c <file_writeHeader()+0x34>
    1460:	ldr	r3, [r0, #0]
    1462:	ldr	r3, [r3, #68]	; 0x44
    1464:	blx	r3
    1466:	cbz	r0, 148c <file_writeHeader()+0x34>
  makeHeader(header);
    1468:	ldr	r0, [pc, #40]	; (1494 <file_writeHeader()+0x3c>)
    146a:	bl	1424 <makeHeader(char*)>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    146e:	ldr	r0, [r4, #16]
    1470:	cbz	r0, 148a <file_writeHeader()+0x32>
    1472:	ldr	r3, [r0, #0]
    1474:	ldr	r1, [pc, #28]	; (1494 <file_writeHeader()+0x3c>)
    1476:	ldr	r3, [r3, #44]	; 0x2c
    1478:	mov.w	r2, #512	; 0x200
    147c:	blx	r3
    147e:	sub.w	r0, r0, #512	; 0x200
    1482:	clz	r0, r0
    1486:	lsrs	r0, r0, #5
    1488:	sxth	r0, r0
  size_t nb = mfile.write(header,512);
  return (nb==512);
}
    148a:	pop	{r4, pc}
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    148c:	movs	r0, #0
    148e:	pop	{r4, pc}
    1490:	.word	0x1fff097c
    1494:	.word	0x1fff1644

00001498 <makeFilename(char*)>:
  uhdr[1]=rtc_get();
  uhdr[2]=micros();
}

int16_t makeFilename(char *filename)
{
    1498:	push	{r4, r5, r6, r7, lr}
    149a:	sub	sp, #12
    149c:	mov	r7, r0
  uint32_t tt = rtc_get();
    149e:	bl	e694 <rtc_get>
  int dd;
  ss= tt % 60; tt /= 60;
  mm= tt % 60; tt /= 60;
  hh= tt % 24; tt /= 24;
  dd= tt;
  sprintf(filename,"/%d/%02d_%02d_%02d.raw",dd,hh,mm,ss);
    14a2:	ldr	r4, [pc, #100]	; (1508 <makeFilename(char*)+0x70>)
    14a4:	ldr	r3, [pc, #100]	; (150c <makeFilename(char*)+0x74>)
    14a6:	ldr	r6, [pc, #104]	; (1510 <makeFilename(char*)+0x78>)
    14a8:	ldr	r2, [pc, #104]	; (1514 <makeFilename(char*)+0x7c>)
    14aa:	ldr	r1, [pc, #108]	; (1518 <makeFilename(char*)+0x80>)
    14ac:	umull	lr, r5, r4, r0
    14b0:	lsrs	r5, r5, #5
    14b2:	umull	lr, r3, r3, r0
    14b6:	umull	lr, r4, r4, r5
    14ba:	lsrs	r3, r3, #11
    14bc:	lsrs	r4, r4, #5
    14be:	umull	lr, r6, r6, r3
    14c2:	rsb	r4, r4, r4, lsl #4
    14c6:	sub.w	r4, r5, r4, lsl #2
    14ca:	lsrs	r6, r6, #4
    14cc:	rsb	r5, r5, r5, lsl #4
    14d0:	sub.w	r5, r0, r5, lsl #2
    14d4:	add.w	r6, r6, r6, lsl #1
    14d8:	umull	r0, r2, r2, r0
    14dc:	lsrs	r2, r2, #16
    14de:	sub.w	r3, r3, r6, lsl #3
    14e2:	stmia.w	sp, {r4, r5}
    14e6:	mov	r0, r7
    14e8:	bl	11294 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    14ec:	mov	r0, r7
    14ee:	bl	11440 <strlen>
    14f2:	mov	r1, r0
    14f4:	mov	r0, r7
    14f6:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    14fa:	ldr	r0, [pc, #32]	; (151c <makeFilename(char*)+0x84>)
    14fc:	bl	f780 <Print::println()>
  Serial.println(filename);
  return 1;
}
    1500:	movs	r0, #1
    1502:	add	sp, #12
    1504:	pop	{r4, r5, r6, r7, pc}
    1506:	nop
    1508:	.word	0x88888889
    150c:	.word	0x91a2b3c5
    1510:	.word	0xaaaaaaab
    1514:	.word	0xc22e4507
    1518:	.word	0x00014adc
    151c:	.word	0x1fff0c58

00001520 <checkPath(unsigned short, char*)>:

int16_t checkPath(uint16_t store, char *filename)
{
    1520:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1524:	mov	r8, r0
    1526:	sub	sp, #56	; 0x38
  int ln=strlen(filename);
    1528:	mov	r0, r1
  Serial.println(filename);
  return 1;
}

int16_t checkPath(uint16_t store, char *filename)
{
    152a:	mov	r5, r1
  int ln=strlen(filename);
    152c:	bl	11440 <strlen>
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
    1530:	cmp	r0, #0
    1532:	ble.n	15ee <checkPath(unsigned short, char*)+0xce>
    1534:	subs	r1, r5, #1
    1536:	movs	r3, #0
    1538:	mov.w	r2, #4294967295
    153c:	ldrb.w	r4, [r1, #1]!
    1540:	cmp	r4, #47	; 0x2f
    1542:	it	eq
    1544:	moveq	r2, r3
    1546:	adds	r3, #1
    1548:	cmp	r0, r3
    154a:	bne.n	153c <checkPath(unsigned short, char*)+0x1c>
  if(i1<0) return 1; // no path
    154c:	cmp	r2, #0
    154e:	blt.n	15ee <checkPath(unsigned short, char*)+0xce>
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    1550:	ldr	r3, [pc, #200]	; (161c <checkPath(unsigned short, char*)+0xfc>)
    1552:	mov.w	r6, #1208	; 0x4b8
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    1556:	movs	r7, #0
  if(!sdx[store].exists(filename))
    1558:	mla	r6, r6, r8, r3
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    155c:	strb	r7, [r5, r2]
    155e:	ldr.w	lr, [r6, #1156]	; 0x484
    1562:	adds	r4, r5, r2
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1564:	cmp.w	lr, #0
    1568:	beq.n	1590 <checkPath(unsigned short, char*)+0x70>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    156a:	mov	r1, lr
    156c:	mov	r3, r7
    156e:	mov	r2, r5
    1570:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    1572:	strb.w	r7, [sp]
    1576:	strb.w	r7, [sp, #1]
    157a:	strb.w	r7, [sp, #2]
    157e:	bl	abf0 <FatFile::open(FatVolume*, char const*, int)>
  if(!sdx[store].exists(filename))
    1582:	cbz	r0, 15b0 <checkPath(unsigned short, char*)+0x90>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
    1584:	movs	r3, #47	; 0x2f
    1586:	strb	r3, [r4, #0]
  return 1;
    1588:	movs	r0, #1
}
    158a:	add	sp, #56	; 0x38
    158c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1590:	ldr.w	r1, [r6, #1160]	; 0x488
    1594:	cbz	r1, 15b0 <checkPath(unsigned short, char*)+0x90>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1596:	mov	r3, lr
    1598:	mov	r2, r5
    159a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    159c:	strb.w	lr, [sp, #49]	; 0x31
    15a0:	strb.w	lr, [sp, #50]	; 0x32
    15a4:	strb.w	lr, [sp, #51]	; 0x33
    15a8:	bl	9848 <ExFatFile::open(ExFatVolume*, char const*, int)>
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    15ac:	cmp	r0, #0
    15ae:	bne.n	1584 <checkPath(unsigned short, char*)+0x64>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    15b0:	mov	r0, r5
    15b2:	bl	11440 <strlen>
    15b6:	mov	r1, r0
    15b8:	mov	r0, r5
    15ba:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    15be:	ldr	r0, [pc, #96]	; (1620 <checkPath(unsigned short, char*)+0x100>)
    15c0:	bl	f780 <Print::println()>
    15c4:	ldr.w	r7, [r6, #1156]	; 0x484
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    15c8:	cbz	r7, 15f6 <checkPath(unsigned short, char*)+0xd6>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    15ca:	mov	r2, r5
    15cc:	addw	r1, r7, #1092	; 0x444
    15d0:	movs	r5, #0
    15d2:	movs	r3, #1
    15d4:	mov	r0, sp
    15d6:	strb.w	r5, [sp]
    15da:	strb.w	r5, [sp, #1]
    15de:	strb.w	r5, [sp, #2]
    15e2:	bl	aa6c <FatFile::mkdir(FatFile*, char const*, bool)>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
    15e6:	cmp	r0, #0
    15e8:	bne.n	1584 <checkPath(unsigned short, char*)+0x64>
    15ea:	movs	r0, #0
    15ec:	b.n	158a <checkPath(unsigned short, char*)+0x6a>
int16_t checkPath(uint16_t store, char *filename)
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
    15ee:	movs	r0, #1
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
  return 1;
}
    15f0:	add	sp, #56	; 0x38
    15f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15f6:	ldr.w	r1, [r6, #1160]	; 0x488
    15fa:	cmp	r1, #0
    15fc:	beq.n	15ea <checkPath(unsigned short, char*)+0xca>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    15fe:	mov	r2, r5
    1600:	add.w	r1, r1, #1096	; 0x448
    1604:	movs	r3, #1
    1606:	mov	r0, sp
    1608:	strb.w	r7, [sp, #49]	; 0x31
    160c:	strb.w	r7, [sp, #50]	; 0x32
    1610:	strb.w	r7, [sp, #51]	; 0x33
    1614:	bl	a27c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1618:	b.n	15e6 <checkPath(unsigned short, char*)+0xc6>
    161a:	nop
    161c:	.word	0x1fff4550
    1620:	.word	0x1fff0c58

00001624 <file_open(unsigned short)>:
void makeHeader(char *header);
int16_t makeFilename(char *filename);
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
    1624:	push	{r4, r5, r6, r7, lr}
    1626:	sub	sp, #164	; 0xa4
    1628:	mov	r4, r0
  if(!makeFilename(filename)) return 0;
    162a:	mov	r0, sp
    162c:	bl	1498 <makeFilename(char*)>
    1630:	cbnz	r0, 1638 <file_open(unsigned short)+0x14>
    1632:	movs	r0, #0
  if(!checkPath(store, filename)) return 0;
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    1634:	add	sp, #164	; 0xa4
    1636:	pop	{r4, r5, r6, r7, pc}
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
  if(!makeFilename(filename)) return 0;
  if(!checkPath(store, filename)) return 0;
    1638:	mov	r1, sp
    163a:	mov	r0, r4
    163c:	bl	1520 <checkPath(unsigned short, char*)>
    1640:	cmp	r0, #0
    1642:	beq.n	1632 <file_open(unsigned short)+0xe>
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1644:	ldr	r3, [pc, #188]	; (1704 <file_open(unsigned short)+0xe0>)
    1646:	mov.w	r1, #1208	; 0x4b8
    164a:	mla	r1, r1, r4, r3
    164e:	mov	r2, sp
    1650:	movw	r3, #16898	; 0x4202
    1654:	adds	r1, #4
    1656:	add	r0, sp, #80	; 0x50
    1658:	bl	c434 <FsVolume::open(char const*, int)>
    165c:	ldr	r3, [sp, #152]	; 0x98
    165e:	cmp	r3, #0
    1660:	beq.n	16f2 <file_open(unsigned short)+0xce>
		if (file) return File(new SDFile(file));
    1662:	movs	r0, #104	; 0x68
    1664:	bl	f920 <operator new(unsigned int)>
    1668:	mov	r4, r0
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    166a:	ldr	r5, [pc, #156]	; (1708 <file_open(unsigned short)+0xe4>)
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    166c:	ldrb.w	r1, [sp, #84]	; 0x54
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1670:	ldr	r2, [sp, #88]	; 0x58
    1672:	ldrb.w	r3, [sp, #92]	; 0x5c
    1676:	str	r5, [r4, #0]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1678:	mov.w	r0, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    167c:	movs	r5, #0
    167e:	add	r6, sp, #96	; 0x60
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1680:	ldr	r7, [pc, #136]	; (170c <file_open(unsigned short)+0xe8>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1682:	str	r0, [r4, #8]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1684:	strb	r1, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1686:	str	r2, [r4, #28]
    1688:	strb.w	r3, [r4, #32]
    168c:	add.w	r0, r4, #36	; 0x24
    1690:	mov	r1, r6
    1692:	str	r7, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    1694:	strb	r5, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1696:	strb	r5, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1698:	str	r5, [r4, #16]
    169a:	bl	c1ec <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    169e:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    16a0:	ldr	r2, [pc, #108]	; (1710 <file_open(unsigned short)+0xec>)
    16a2:	str	r5, [r4, #100]	; 0x64
    16a4:	adds	r3, #1
    16a6:	str	r2, [r4, #20]
    16a8:	str	r3, [r4, #16]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16aa:	ldr	r5, [pc, #104]	; (1714 <file_open(unsigned short)+0xf0>)
    16ac:	ldr	r3, [pc, #104]	; (1718 <file_open(unsigned short)+0xf4>)
    16ae:	str	r3, [sp, #80]	; 0x50
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    16b0:	mov	r0, r6
    16b2:	bl	c264 <FsBaseFile::close()>
    16b6:	ldr	r2, [r5, #16]
    16b8:	cbz	r2, 16cc <file_open(unsigned short)+0xa8>
    16ba:	ldr	r3, [r2, #16]
    16bc:	subs	r3, #1
    16be:	str	r3, [r2, #16]
    16c0:	cbnz	r3, 16cc <file_open(unsigned short)+0xa8>
    16c2:	ldr	r0, [r5, #16]
    16c4:	cbz	r0, 16cc <file_open(unsigned short)+0xa8>
    16c6:	ldr	r3, [r0, #0]
    16c8:	ldr	r3, [r3, #32]
    16ca:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    16cc:	str	r4, [r5, #16]
    16ce:	ldr	r5, [pc, #68]	; (1714 <file_open(unsigned short)+0xf0>)
		if (f) f->refcount++;
    16d0:	cbz	r4, 16fe <file_open(unsigned short)+0xda>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16d2:	ldr	r3, [r4, #16]
    16d4:	cbnz	r3, 16e4 <file_open(unsigned short)+0xc0>
    16d6:	ldr	r3, [r4, #0]
    16d8:	mov	r0, r4
    16da:	ldr	r3, [r3, #32]
    16dc:	blx	r3
    16de:	ldr	r4, [r5, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    16e0:	cmp	r4, #0
    16e2:	beq.n	1632 <file_open(unsigned short)+0xe>
    16e4:	ldr	r3, [r4, #0]
    16e6:	mov	r0, r4
    16e8:	ldr	r3, [r3, #68]	; 0x44
    16ea:	blx	r3
    16ec:	sxth	r0, r0
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    16ee:	add	sp, #164	; 0xa4
    16f0:	pop	{r4, r5, r6, r7, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    16f2:	ldr	r0, [sp, #156]	; 0x9c
    16f4:	cmp	r0, #0
    16f6:	bne.n	1662 <file_open(unsigned short)+0x3e>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    16f8:	mov	r4, r0
    16fa:	add	r6, sp, #96	; 0x60
    16fc:	b.n	16aa <file_open(unsigned short)+0x86>
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    16fe:	mov	r0, r4
    1700:	b.n	1634 <file_open(unsigned short)+0x10>
    1702:	nop
    1704:	.word	0x1fff4550
    1708:	.word	0x0001497c
    170c:	.word	0x000148b0
    1710:	.word	0x000148f8
    1714:	.word	0x1fff097c
    1718:	.word	0x000148d4

0000171c <do_logger(unsigned short, short)>:
#define NBUF_DISK (NDBL*NBUF_ACQ)
uint32_t diskBuffer[NBUF_DISK];
uint32_t maxDel=0;

int16_t do_logger(uint16_t store, int16_t state)
{ uint32_t to=millis();
    171c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    171e:	ldr	r5, [pc, #164]	; (17c4 <do_logger(unsigned short, short)+0xa8>)
    1720:	sub	sp, #12
    1722:	ldr	r3, [r5, #0]
    1724:	str	r3, [sp, #0]
    1726:	mov	r7, r0
    1728:	mov	r4, r1
  if(pullData(diskBuffer,NDBL))
    172a:	ldr	r0, [pc, #156]	; (17c8 <do_logger(unsigned short, short)+0xac>)
	return ret;
    172c:	ldr	r6, [sp, #0]
    172e:	movs	r1, #8
    1730:	bl	12b0 <pullData(unsigned long*, unsigned long)>
    1734:	cbz	r0, 174a <do_logger(unsigned short, short)+0x2e>
  {
    if(state==0)
    1736:	cbz	r4, 1770 <do_logger(unsigned short, short)+0x54>
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
      state=1;
    }
    if(state==1)
    1738:	cmp	r4, #1
    173a:	beq.n	1778 <do_logger(unsigned short, short)+0x5c>
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
      
    }
    if(state>=2)
    173c:	ble.n	174e <do_logger(unsigned short, short)+0x32>
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    173e:	mov.w	r1, #8192	; 0x2000
    1742:	ldr	r0, [pc, #132]	; (17c8 <do_logger(unsigned short, short)+0xac>)
    1744:	bl	1380 <file_writeData(void*, unsigned long)>
    1748:	cbz	r0, 17a4 <do_logger(unsigned short, short)+0x88>
    }
  }

  if(state==3)
    174a:	cmp	r4, #3
    174c:	beq.n	178e <do_logger(unsigned short, short)+0x72>
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    state=0;
  }

  if(state==4)
    174e:	cmp	r4, #4
    1750:	beq.n	1798 <do_logger(unsigned short, short)+0x7c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1752:	ldr	r3, [r5, #0]
    1754:	str	r3, [sp, #4]
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;
    1756:	ldr	r2, [pc, #116]	; (17cc <do_logger(unsigned short, short)+0xb0>)
	return ret;
    1758:	ldr	r3, [sp, #4]
    175a:	ldr	r1, [r2, #0]
  { // close file and stop acquisition
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
    175c:	subs	r3, r3, r6
  if(dt>maxDel) maxDel=dt;
    175e:	cmp	r3, r1
    1760:	bls.n	176a <do_logger(unsigned short, short)+0x4e>
    1762:	str	r3, [r2, #0]

  return state;
    1764:	mov	r0, r4
}
    1766:	add	sp, #12
    1768:	pop	{r4, r5, r6, r7, pc}
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;

  return state;
    176a:	mov	r0, r4
}
    176c:	add	sp, #12
    176e:	pop	{r4, r5, r6, r7, pc}
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    1770:	mov	r0, r7
    1772:	bl	1624 <file_open(unsigned short)>
    1776:	cbz	r0, 17aa <do_logger(unsigned short, short)+0x8e>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    1778:	bl	1458 <file_writeHeader()>
    177c:	cbz	r0, 17b0 <do_logger(unsigned short, short)+0x94>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    177e:	mov.w	r1, #8192	; 0x2000
    1782:	ldr	r0, [pc, #68]	; (17c8 <do_logger(unsigned short, short)+0xac>)
    1784:	bl	1380 <file_writeData(void*, unsigned long)>
    1788:	cbz	r0, 17a4 <do_logger(unsigned short, short)+0x88>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
    178a:	movs	r4, #2
    178c:	b.n	1752 <do_logger(unsigned short, short)+0x36>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    178e:	bl	13b8 <file_close()>
    1792:	cbz	r0, 17bc <do_logger(unsigned short, short)+0xa0>
    state=0;
    1794:	movs	r4, #0
    1796:	b.n	1752 <do_logger(unsigned short, short)+0x36>
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    1798:	bl	13b8 <file_close()>
    179c:	cbz	r0, 17b6 <do_logger(unsigned short, short)+0x9a>
    state=-1;
    179e:	mov.w	r4, #4294967295
    17a2:	b.n	1752 <do_logger(unsigned short, short)+0x36>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    17a4:	mvn.w	r0, #3
    17a8:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    17aa:	mvn.w	r0, #1
    17ae:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    17b0:	mvn.w	r0, #2
    17b4:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
    state=0;
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    17b6:	mvn.w	r0, #5
    17ba:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    17bc:	mvn.w	r0, #4
    17c0:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
    17c2:	nop
    17c4:	.word	0x2000701c
    17c8:	.word	0x1fff1844
    17cc:	.word	0x1fff1640

000017d0 <Approx_MCLK(long, long*, long*)>:
      *div=(int) X[iimin];
    }

    // estimate MCLK to generate minimal jitter sampling frequency, allowing sampling frequency to differ from desired one
    void Approx_MCLK(int32_t fsamp, int32_t *mult, int32_t *div)
    {
    17d0:	push	{r4, r5}
    17d2:	sub.w	sp, sp, #16384	; 0x4000
    17d6:	add	r4, sp, #4
      int ii;
      float A = (float)F_PLL / (BIT_DIV*ovr);
      float X[4095];
      for(ii=0; ii<4095;ii++) X[ii]=A*2.0/(float)(ii+1);
    17d8:	vldr	s13, [pc, #128]	; 185c <Approx_MCLK(long, long*, long*)+0x8c>
      *div=(int) X[iimin];
    }

    // estimate MCLK to generate minimal jitter sampling frequency, allowing sampling frequency to differ from desired one
    void Approx_MCLK(int32_t fsamp, int32_t *mult, int32_t *div)
    {
    17dc:	vmov	s12, r0
    17e0:	mov	r5, r4
      int ii;
      float A = (float)F_PLL / (BIT_DIV*ovr);
      float X[4095];
      for(ii=0; ii<4095;ii++) X[ii]=A*2.0/(float)(ii+1);
    17e2:	movs	r3, #0
    17e4:	movw	r0, #4095	; 0xfff
    17e8:	adds	r3, #1
    17ea:	vmov	s15, r3
    17ee:	vcvt.f32.s32	s14, s15
    17f2:	cmp	r3, r0
    17f4:	vdiv.f32	s15, s13, s14
    17f8:	vstmia	r5!, {s15}
    17fc:	bne.n	17e8 <Approx_MCLK(long, long*, long*)+0x18>
      int32_t iimin=0;
      float xmin=fsamp;
    17fe:	vcvt.f32.s32	s12, s12
    {
      int ii;
      float A = (float)F_PLL / (BIT_DIV*ovr);
      float X[4095];
      for(ii=0; ii<4095;ii++) X[ii]=A*2.0/(float)(ii+1);
      int32_t iimin=0;
    1802:	movs	r5, #0
      float xmin=fsamp;
    1804:	vmov.f32	s13, s12
      for(ii=0; ii<4095;ii++) if(abs(X[ii]-fsamp)<xmin) {iimin=ii; xmin=abs(X[ii]-fsamp);}
    1808:	mov	r3, r5
    180a:	movw	r0, #4095	; 0xfff
    180e:	vldmia	r4!, {s15}
    1812:	vsub.f32	s15, s15, s12
    1816:	vcmpe.f32	s15, #0.0
    181a:	vmrs	APSR_nzcv, fpscr
    181e:	ite	le
    1820:	vnegle.f32	s14, s15
    1824:	vmovgt.f32	s14, s15
    1828:	vcmpe.f32	s14, s13
    182c:	vmrs	APSR_nzcv, fpscr
    1830:	bpl.n	1846 <Approx_MCLK(long, long*, long*)+0x76>
    1832:	vcmpe.f32	s15, #0.0
    1836:	vmrs	APSR_nzcv, fpscr
    183a:	ite	le
    183c:	vnegle.f32	s13, s15
    1840:	vmovgt.f32	s13, s15
    1844:	mov	r5, r3
    1846:	adds	r3, #1
    1848:	cmp	r3, r0
    184a:	bne.n	180e <Approx_MCLK(long, long*, long*)+0x3e>
      *mult=2;
      *div= iimin+1;
    184c:	adds	r5, #1
      float X[4095];
      for(ii=0; ii<4095;ii++) X[ii]=A*2.0/(float)(ii+1);
      int32_t iimin=0;
      float xmin=fsamp;
      for(ii=0; ii<4095;ii++) if(abs(X[ii]-fsamp)<xmin) {iimin=ii; xmin=abs(X[ii]-fsamp);}
      *mult=2;
    184e:	movs	r3, #2
    1850:	str	r3, [r1, #0]
      *div= iimin+1;
    1852:	str	r5, [r2, #0]
    }
    1854:	add.w	sp, sp, #16384	; 0x4000
    1858:	pop	{r4, r5}
    185a:	bx	lr
    185c:	.word	0x49a037a0

00001860 <acq_init(long)>:
        SIM_SCGC7 |= SIM_SCGC7_DMA;
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    }

    void acq_init(int32_t fsamp)
    {
    1860:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1864:	sub	sp, #32

#define EST_MCKL 1 // 0 precise frequency, 1 minimal jitter
#if EST_MCKL==0
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
    1866:	add	r2, sp, #28
    1868:	add	r1, sp, #24
        SIM_SCGC7 |= SIM_SCGC7_DMA;
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    }

    void acq_init(int32_t fsamp)
    {
    186a:	mov	r4, r0

#define EST_MCKL 1 // 0 precise frequency, 1 minimal jitter
#if EST_MCKL==0
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
    186c:	bl	17d0 <Approx_MCLK(long, long*, long*)>
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    1870:	vldr	s15, [sp, #24]
    1874:	vldr	s14, [pc, #376]	; 19f0 <acq_init(long)+0x190>
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, (int32_t)mclk0,fsamp,(int32_t)fsamp0); Serial.flush();
    1878:	str	r4, [sp, #12]
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    187a:	vcvt.f32.s32	s12, s15
    187e:	vldr	s15, [sp, #28]
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, (int32_t)mclk0,fsamp,(int32_t)fsamp0); Serial.flush();
    1882:	ldr	r1, [sp, #28]
    1884:	ldr	r3, [sp, #24]
    1886:	ldr	r0, [pc, #364]	; (19f4 <acq_init(long)+0x194>)
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    1888:	ldr	r7, [pc, #364]	; (19f8 <acq_init(long)+0x198>)
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
    188a:	ldr	r6, [pc, #368]	; (19fc <acq_init(long)+0x19c>)
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    188c:	vcvt.f32.s32	s13, s15
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, (int32_t)mclk0,fsamp,(int32_t)fsamp0); Serial.flush();
    1890:	movs	r2, #2
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    1892:	vdiv.f32	s15, s12, s13
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, (int32_t)mclk0,fsamp,(int32_t)fsamp0); Serial.flush();
    1896:	stmia.w	sp, {r1, r2}
    189a:	ldr	r2, [pc, #356]	; (1a00 <acq_init(long)+0x1a0>)
    189c:	ldr	r1, [pc, #356]	; (1a04 <acq_init(long)+0x1a4>)
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    189e:	vmul.f32	s15, s15, s14
    18a2:	vcvt.s32.f32	s15, s15
    18a6:	vmov	r4, s15
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, (int32_t)mclk0,fsamp,(int32_t)fsamp0); Serial.flush();
    18aa:	lsrs	r5, r4, #8
    18ac:	vstr	s15, [sp, #8]
    18b0:	str	r5, [sp, #16]
    18b2:	bl	f7b0 <Print::printf(char const*, ...)>
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 
    18b6:	ldr	r5, [pc, #336]	; (1a08 <acq_init(long)+0x1a8>)
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    18b8:	bl	df34 <usb_serial_flush_output>

        I2S0_RCSR=0;
    18bc:	ldr	r2, [pc, #332]	; (1a0c <acq_init(long)+0x1ac>)

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    18be:	ldr	r0, [pc, #336]	; (1a10 <acq_init(long)+0x1b0>)
        while(I2S0_MCR & I2S_MCR_DUF);
    18c0:	ldr	r1, [pc, #336]	; (1a14 <acq_init(long)+0x1b4>)
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    18c2:	mov.w	r3, #1536	; 0x600
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 

        I2S0_RCSR=0;
    18c6:	movs	r4, #0
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    18c8:	str	r3, [r7, #0]
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
    18ca:	str	r3, [r6, #0]
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 
    18cc:	str	r3, [r5, #0]

        I2S0_RCSR=0;
    18ce:	str	r4, [r2, #0]

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    18d0:	ldr	r2, [sp, #24]
    18d2:	ldr	r3, [sp, #28]
    18d4:	subs	r2, #1
    18d6:	lsls	r2, r2, #12
    18d8:	subs	r3, #1
    18da:	and.w	r2, r2, #1044480	; 0xff000
    18de:	ubfx	r3, r3, #0, #12
    18e2:	orrs	r3, r2
    18e4:	str	r3, [r0, #0]
        while(I2S0_MCR & I2S_MCR_DUF);
    18e6:	ldr	r3, [r1, #0]
    18e8:	ldr	r2, [pc, #296]	; (1a14 <acq_init(long)+0x1b4>)
    18ea:	cmp	r3, #0
    18ec:	blt.n	18e6 <acq_init(long)+0x86>
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
    18ee:	ldr	r4, [pc, #296]	; (1a18 <acq_init(long)+0x1b8>)
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    18f0:	ldr.w	ip, [pc, #364]	; 1a60 <acq_init(long)+0x200>
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    18f4:	ldr.w	r8, [pc, #364]	; 1a64 <acq_init(long)+0x204>
        I2S0_TCR4 = I2S_TCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_TCR4_SYWD(31)
                    | I2S_TCR4_MF
                    | I2S_TCR4_FSE 
                    | I2S_TCR4_FSP 
                    | I2S_TCR4_FSD;
    18f8:	ldr	r3, [pc, #288]	; (1a1c <acq_init(long)+0x1bc>)
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    18fa:	ldr	r7, [pc, #292]	; (1a20 <acq_init(long)+0x1c0>)

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
    18fc:	ldr	r5, [pc, #292]	; (1a24 <acq_init(long)+0x1c4>)
        I2S0_RCR1 = I2S_RCR1_RFW(1); 
    18fe:	ldr.w	lr, [pc, #360]	; 1a68 <acq_init(long)+0x208>

        I2S0_RCR2 = I2S_RCR2_SYNC(1) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    1902:	ldr	r1, [pc, #292]	; (1a28 <acq_init(long)+0x1c8>)
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_SYWD(31)
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    1904:	ldr	r0, [pc, #292]	; (1a2c <acq_init(long)+0x1cc>)
        I2S0_RCSR=0;

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    1906:	mov.w	r6, #1124073472	; 0x43000000
    190a:	str	r6, [r2, #0]
        
        // configure transmitter
        I2S0_TMR = 0;
    190c:	movs	r6, #0
    190e:	str	r6, [r4, #0]
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    1910:	ldr	r2, [pc, #284]	; (1a30 <acq_init(long)+0x1d0>)
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    1912:	movs	r4, #1
    1914:	str.w	r4, [r8]
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    1918:	str.w	r2, [ip]
        I2S0_TCR4 = I2S_TCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_TCR4_SYWD(31)
                    | I2S_TCR4_MF
                    | I2S_TCR4_FSE 
                    | I2S_TCR4_FSP 
                    | I2S_TCR4_FSD;
    191c:	ldr	r2, [pc, #276]	; (1a34 <acq_init(long)+0x1d4>)
    191e:	str	r2, [r3, #0]
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    1920:	ldr	r3, [pc, #276]	; (1a38 <acq_init(long)+0x1d8>)
    1922:	str	r3, [r7, #0]

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
    1924:	str	r6, [r5, #0]
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);


  dma.begin(true); // Allocate the DMA channel first
    1926:	ldr	r5, [pc, #276]	; (1a3c <acq_init(long)+0x1dc>)
                    | I2S_TCR4_FSD;
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
        I2S0_RCR1 = I2S_RCR1_RFW(1); 
    1928:	str.w	r4, [lr]

        I2S0_RCR2 = I2S_RCR2_SYNC(1) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    192c:	ldr.w	lr, [pc, #316]	; 1a6c <acq_init(long)+0x20c>
    1930:	str.w	lr, [r1]
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_SYWD(31)
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    1934:	str	r2, [r0, #0]
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);


  dma.begin(true); // Allocate the DMA channel first
    1936:	mov	r1, r4
    1938:	mov	r0, r5
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    193a:	str.w	r3, [r7, #128]	; 0x80


  dma.begin(true); // Allocate the DMA channel first
    193e:	bl	f550 <DMAChannel::begin(bool)>

#if N_ADC==1
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
    1942:	ldr	r3, [pc, #252]	; (1a40 <acq_init(long)+0x1e0>)

          I2S0_TCR3 = I2S_TCR3_TCE;
    1944:	ldr	r0, [pc, #252]	; (1a44 <acq_init(long)+0x1e4>)
          I2S0_RCR3 = I2S_RCR3_RCE;
    1946:	ldr	r1, [pc, #256]	; (1a48 <acq_init(long)+0x1e8>)

          dma.TCD->SADDR = &I2S0_RDR0;
    1948:	ldr	r2, [pc, #256]	; (1a4c <acq_init(long)+0x1ec>)
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    194a:	ldr.w	lr, [pc, #292]	; 1a70 <acq_init(long)+0x210>


  dma.begin(true); // Allocate the DMA channel first

#if N_ADC==1
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
    194e:	mov.w	r7, #1024	; 0x400
    1952:	str	r7, [r3, #0]

          I2S0_TCR3 = I2S_TCR3_TCE;
    1954:	mov.w	r3, #65536	; 0x10000
    1958:	str	r3, [r0, #0]
          I2S0_RCR3 = I2S_RCR3_RCE;
    195a:	str	r3, [r1, #0]

          dma.TCD->SADDR = &I2S0_RDR0;
    195c:	ldr	r3, [r5, #0]
    195e:	str	r2, [r3, #0]
          dma.TCD->SOFF = 0;
    1960:	strh	r6, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1962:	ldrb	r2, [r5, #4]
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    1964:	str.w	lr, [r3, #16]
    1968:	add.w	r2, r2, #1073741824	; 0x40000000
    196c:	add.w	r2, r2, #135168	; 0x21000
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    1970:	sub.w	r7, r7, #3072	; 0xc00
          I2S0_TCR3 = I2S_TCR3_TCE;
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    1974:	movw	r1, #514	; 0x202
    1978:	strh	r1, [r3, #6]
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    197a:	str	r7, [r3, #24]
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    197c:	mov.w	r0, #512	; 0x200
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
    1980:	movs	r1, #4
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1982:	mov.w	lr, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    1986:	movs	r7, #140	; 0x8c
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    1988:	strh	r0, [r3, #30]

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
    198a:	str	r6, [r3, #12]
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    198c:	strh	r0, [r3, #22]
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
    198e:	str	r1, [r3, #8]
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1990:	strh.w	lr, [r3, #28]
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
    1994:	strh	r1, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1996:	strb	r6, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    1998:	strb	r7, [r2, #0]
    199a:	ldrb	r2, [r5, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    199c:	ldr	r3, [pc, #176]	; (1a50 <acq_init(long)+0x1f0>)
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
          dma.enable();

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    199e:	ldr	r1, [pc, #108]	; (1a0c <acq_init(long)+0x1ac>)
    19a0:	strb	r2, [r3, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19a2:	asrs	r3, r2, #5
    19a4:	lsls	r3, r3, #2
    19a6:	add.w	r3, r3, #3758096384	; 0xe0000000
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19aa:	ldr	r0, [pc, #168]	; (1a54 <acq_init(long)+0x1f4>)
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19ac:	ldr	r7, [pc, #168]	; (1a58 <acq_init(long)+0x1f8>)
    19ae:	ldr.w	lr, [pc, #196]	; 1a74 <acq_init(long)+0x214>
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19b2:	and.w	r6, r2, #31
    19b6:	add.w	r3, r3, #57600	; 0xe100
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19ba:	adds	r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19bc:	lsls	r4, r6
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
          dma.enable();

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19be:	ldr	r6, [pc, #156]	; (1a5c <acq_init(long)+0x1fc>)
    19c0:	str	r6, [r1, #0]
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19c2:	str	r6, [r0, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19c4:	str.w	lr, [r7, r2, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19c8:	str	r4, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
    19ca:	ldrb	r3, [r5, #4]
    19cc:	add.w	r3, r3, #3758096384	; 0xe0000000
    19d0:	add.w	r3, r3, #58368	; 0xe400
    19d4:	movs	r2, #96	; 0x60
    19d6:	strb	r2, [r3, #0]
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    19d8:	ldr	r3, [r0, #0]
    19da:	orr.w	r3, r3, #2415919104	; 0x90000000
    19de:	str	r3, [r0, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    19e0:	ldr	r3, [r1, #0]
    19e2:	orr.w	r3, r3, #2415919104	; 0x90000000
    19e6:	str	r3, [r1, #0]

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
          dma.attachInterrupt(acq_isr,I2S_DMA_PRIO*16);	
          acq_start();
    }
    19e8:	add	sp, #32
    19ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19ee:	nop
    19f0:	.word	0x4d2037a0
    19f4:	.word	0x1fff0c58
    19f8:	.word	0x4004b018
    19fc:	.word	0x4004b00c
    1a00:	.word	0x0a037a00
    1a04:	.word	0x00014af4
    1a08:	.word	0x4004b008
    1a0c:	.word	0x4002f080
    1a10:	.word	0x4002f104
    1a14:	.word	0x4002f100
    1a18:	.word	0x4002f060
    1a1c:	.word	0x4002f010
    1a20:	.word	0x4002f014
    1a24:	.word	0x4002f0e0
    1a28:	.word	0x4002f088
    1a2c:	.word	0x4002f090
    1a30:	.word	0x07000001
    1a34:	.word	0x00011f1b
    1a38:	.word	0x1f1f1f00
    1a3c:	.word	0x1fff1638
    1a40:	.word	0x4004b014
    1a44:	.word	0x4002f00c
    1a48:	.word	0x4002f08c
    1a4c:	.word	0x4002f0a0
    1a50:	.word	0x4000801b
    1a54:	.word	0x4002f000
    1a58:	.word	0x1fff0200
    1a5c:	.word	0x02000001
    1a60:	.word	0x4002f008
    1a64:	.word	0x4002f004
    1a68:	.word	0x4002f084
    1a6c:	.word	0x43000001
    1a70:	.word	0x1fff3d50
    1a74:	.word	0x0000123d

00001a78 <acq_check(short)>:
        if(!pushData(acq_rx_buffer)) acq_miss++;

    }

  int16_t acq_check(int16_t state)
  { if(!state)
    1a78:	cbnz	r0, 1a90 <acq_check(short)+0x18>
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    1a7a:	ldr	r1, [pc, #48]	; (1aac <acq_check(short)+0x34>)
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    1a7c:	ldr	r2, [pc, #48]	; (1ab0 <acq_check(short)+0x38>)
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    1a7e:	ldr	r3, [r1, #0]
    1a80:	orr.w	r3, r3, #2415919104	; 0x90000000
    1a84:	str	r3, [r1, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    1a86:	ldr	r3, [r2, #0]
    1a88:	orr.w	r3, r3, #2415919104	; 0x90000000
    1a8c:	str	r3, [r2, #0]
    1a8e:	bx	lr
  int16_t acq_check(int16_t state)
  { if(!state)
    { // start acquisition
      acq_start();
    }
    if(state>3)
    1a90:	cmp	r0, #3
    1a92:	ble.n	1aa8 <acq_check(short)+0x30>
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1a94:	ldr	r1, [pc, #20]	; (1aac <acq_check(short)+0x34>)
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1a96:	ldr	r2, [pc, #24]	; (1ab0 <acq_check(short)+0x38>)
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1a98:	ldr	r3, [r1, #0]
    1a9a:	bic.w	r3, r3, #2415919104	; 0x90000000
    1a9e:	str	r3, [r1, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1aa0:	ldr	r3, [r2, #0]
    1aa2:	bic.w	r3, r3, #2415919104	; 0x90000000
    1aa6:	str	r3, [r2, #0]
    if(state>3)
    { // stop acquisition
      acq_stop();
    }
    return state;
  }
    1aa8:	bx	lr
    1aaa:	nop
    1aac:	.word	0x4002f000
    1ab0:	.word	0x4002f080

00001ab4 <loop>:
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1ab4:	push	{r4, r5, r6, lr}
    1ab6:	ldr	r2, [pc, #132]	; (1b3c <loop+0x88>)
  state = do_menu(state);
    1ab8:	ldr	r4, [pc, #132]	; (1b40 <loop+0x8c>)
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1aba:	ldr	r3, [r2, #0]
  state = do_menu(state);
    1abc:	ldrsh.w	r0, [r4]
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1ac0:	adds	r3, #1
    1ac2:	sub	sp, #16
    1ac4:	str	r3, [r2, #0]
  state = do_menu(state);
    1ac6:	bl	1308 <do_menu(short)>
    1aca:	strh	r0, [r4, #0]
  state = acq_check(state);
    1acc:	bl	1a78 <acq_check(short)>

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    1ad0:	cmp	r0, #2

uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
    1ad2:	mov	r1, r0
    1ad4:	strh	r0, [r4, #0]

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    1ad6:	beq.n	1b16 <loop+0x62>
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
  //
  if(state<0)
    1ad8:	cmp	r0, #0
    1ada:	blt.n	1b0a <loop+0x56>
    mtpd.loop();
  else
    state=do_logger(0,state);
    1adc:	movs	r0, #0
    1ade:	bl	171c <do_logger(unsigned short, short)>
    1ae2:	strh	r0, [r4, #0]

  if(state>=0) logg(1000,"loop");
    1ae4:	cmp	r0, #0
    1ae6:	blt.n	1afc <loop+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ae8:	ldr	r3, [pc, #88]	; (1b44 <loop+0x90>)
/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
    1aea:	ldr	r2, [pc, #92]	; (1b48 <loop+0x94>)
    1aec:	ldr	r3, [r3, #0]
    1aee:	str	r3, [sp, #12]
	return ret;
    1af0:	ldr	r3, [sp, #12]
    1af2:	ldr	r2, [r2, #0]
    1af4:	subs	r3, r3, r2
    1af6:	cmp.w	r3, #1000	; 0x3e8
    1afa:	bhi.n	1b00 <loop+0x4c>
  else
    state=do_logger(0,state);

  if(state>=0) logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    1afc:	add	sp, #16
    1afe:	pop	{r4, r5, r6, pc}
    1b00:	ldr	r0, [pc, #72]	; (1b4c <loop+0x98>)
    1b02:	bl	884 <logg(unsigned long, char const*) [clone .part.54]>
    1b06:	add	sp, #16
    1b08:	pop	{r4, r5, r6, pc}
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
  //
  if(state<0)
    mtpd.loop();
    1b0a:	ldr	r0, [pc, #68]	; (1b50 <loop+0x9c>)
    1b0c:	bl	704c <MTPD::loop()>
    1b10:	ldrsh.w	r0, [r4]
    1b14:	b.n	1ae4 <loop+0x30>
    1b16:	str	r0, [sp, #4]
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    1b18:	bl	e694 <rtc_get>
    uint32_t dt = tt % t_on;
    1b1c:	ldr	r3, [pc, #52]	; (1b54 <loop+0xa0>)
    if(dt<to) state = 3;
    1b1e:	ldr	r2, [pc, #56]	; (1b58 <loop+0xa4>)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1b20:	ldr	r3, [r3, #0]
    if(dt<to) state = 3;
    1b22:	ldr	r5, [r2, #0]
    1b24:	ldr	r1, [sp, #4]
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1b26:	udiv	r6, r0, r3
    1b2a:	mls	r0, r6, r3, r0
    if(dt<to) state = 3;
    1b2e:	cmp	r0, r5
    1b30:	it	cc
    1b32:	movcc	r1, #3
uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
    1b34:	strh	r1, [r4, #0]
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    if(dt<to) state = 3;
    to = dt;
    1b36:	str	r0, [r2, #0]
    1b38:	b.n	1adc <loop+0x28>
    1b3a:	nop
    1b3c:	.word	0x20006a20
    1b40:	.word	0x1fff3d4e
    1b44:	.word	0x2000701c
    1b48:	.word	0x20006a38
    1b4c:	.word	0x00014b0c
    1b50:	.word	0x20006a08
    1b54:	.word	0x1fff0974
    1b58:	.word	0x20006a34

00001b5c <_GLOBAL__sub_I_audioShield>:

void SGTL5000_disable(void)
{
  chipWrite(CHIP_DIG_POWER, 0); 
  chipWrite(CHIP_ANA_POWER, 0); 
}
    1b5c:	push	{r3, r4, r5, r6, r7, lr}
#define AUDIO_HEADPHONE_LINEIN 1

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    1b5e:	ldr	r1, [pc, #240]	; (1c50 <_GLOBAL__sub_I_audioShield+0xf4>)


class SDClass : public FS
{
public:
	SDClass() { }
    1b60:	ldr	r3, [pc, #240]	; (1c54 <_GLOBAL__sub_I_audioShield+0xf8>)
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
    1b62:	ldr	r6, [pc, #244]	; (1c58 <_GLOBAL__sub_I_audioShield+0xfc>)
    1b64:	ldr	r2, [pc, #244]	; (1c5c <_GLOBAL__sub_I_audioShield+0x100>)
    1b66:	ldr	r0, [pc, #248]	; (1c60 <_GLOBAL__sub_I_audioShield+0x104>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    1b68:	ldr	r7, [pc, #248]	; (1c64 <_GLOBAL__sub_I_audioShield+0x108>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1b6a:	ldr.w	lr, [pc, #296]	; 1c94 <_GLOBAL__sub_I_audioShield+0x138>
    1b6e:	str	r2, [r1, #0]
    1b70:	movs	r4, #10
    1b72:	strb	r4, [r1, #8]
    1b74:	str	r0, [r3, #0]
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    1b76:	movs	r4, #0
    1b78:	str.w	r7, [r3, #1184]	; 0x4a0
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    1b7c:	ldr	r0, [pc, #232]	; (1c68 <_GLOBAL__sub_I_audioShield+0x10c>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1b7e:	ldr	r5, [pc, #236]	; (1c6c <_GLOBAL__sub_I_audioShield+0x110>)
    1b80:	str.w	lr, [r3, #1172]	; 0x494
    1b84:	movs	r1, #1
    1b86:	movs	r7, #41	; 0x29
    1b88:	mov	r2, r6
    1b8a:	str.w	r0, [r3, #1192]	; 0x4a8
    1b8e:	strb.w	r1, [r3, #1201]	; 0x4b1
    1b92:	strb.w	r7, [r3, #1203]	; 0x4b3
    1b96:	str.w	r4, [r3, #1156]	; 0x484
    1b9a:	str.w	r4, [r3, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    1b9e:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1ba2:	strb.w	r4, [r3, #1181]	; 0x49d
    1ba6:	strb.w	r4, [r3, #1206]	; 0x4b6
    1baa:	mov	r0, r4
    1bac:	ldr	r1, [pc, #192]	; (1c70 <_GLOBAL__sub_I_audioShield+0x114>)
    1bae:	bl	f928 <__aeabi_atexit>

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1bb2:	mvn.w	r7, #1
    1bb6:	ldr	r0, [pc, #188]	; (1c74 <_GLOBAL__sub_I_audioShield+0x118>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1bb8:	ldr	r3, [pc, #188]	; (1c78 <_GLOBAL__sub_I_audioShield+0x11c>)
    1bba:	str	r0, [r5, #0]
  const int nfs = sizeof(lfs_size)/sizeof(int);

  LittleFS_RAM ramfs[nfs]; // needs to be declared if LittleFS is used in storage.h
#endif

MTPStorage_SD storage;
    1bbc:	mov	r2, r6
    1bbe:	str.w	r7, [r5, #240]	; 0xf0
    1bc2:	ldr	r1, [pc, #184]	; (1c7c <_GLOBAL__sub_I_audioShield+0x120>)
    1bc4:	str.w	r3, [r5, #168]	; 0xa8
    1bc8:	mov.w	r7, #1000	; 0x3e8
    1bcc:	mov	r0, r5
    1bce:	str.w	r7, [r5, #176]	; 0xb0
    1bd2:	str.w	r7, [r5, #196]	; 0xc4
    1bd6:	str.w	r7, [r5, #216]	; 0xd8
    1bda:	str.w	r3, [r5, #188]	; 0xbc
    1bde:	str.w	r3, [r5, #208]	; 0xd0
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    1be2:	ldr	r7, [pc, #156]	; (1c80 <_GLOBAL__sub_I_audioShield+0x124>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1be4:	str	r4, [r5, #4]
    1be6:	strb.w	r4, [r5, #172]	; 0xac
    1bea:	strb.w	r4, [r5, #180]	; 0xb4
    1bee:	str.w	r4, [r5, #184]	; 0xb8
    1bf2:	strb.w	r4, [r5, #192]	; 0xc0
    1bf6:	strb.w	r4, [r5, #200]	; 0xc8
    1bfa:	str.w	r4, [r5, #204]	; 0xcc
    1bfe:	strb.w	r4, [r5, #212]	; 0xd4
    1c02:	strb.w	r4, [r5, #220]	; 0xdc
    1c06:	str.w	r4, [r5, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1c0a:	str.w	r4, [r5, #228]	; 0xe4
    1c0e:	str.w	r4, [r5, #232]	; 0xe8
    1c12:	str.w	r4, [r5, #236]	; 0xec
    1c16:	str.w	r4, [r5, #244]	; 0xf4
    1c1a:	strb.w	r4, [r5, #248]	; 0xf8
    1c1e:	strb.w	r4, [r5, #249]	; 0xf9
    1c22:	bl	f928 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    1c26:	ldr	r3, [pc, #92]	; (1c84 <_GLOBAL__sub_I_audioShield+0x128>)
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
static File mfile;
    1c28:	ldr	r1, [pc, #92]	; (1c88 <_GLOBAL__sub_I_audioShield+0x12c>)
    1c2a:	ldr	r0, [pc, #96]	; (1c8c <_GLOBAL__sub_I_audioShield+0x130>)
    1c2c:	str	r5, [r3, #0]
    1c2e:	mov	r2, r6
    1c30:	str	r4, [r3, #4]
    1c32:	strb	r4, [r3, #8]
    1c34:	str	r4, [r3, #12]
    1c36:	bl	f928 <__aeabi_atexit>
    1c3a:	mov	r1, r4
    1c3c:	mov	r0, r7
    1c3e:	bl	f550 <DMAChannel::begin(bool)>
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1c42:	mov	r2, r6
    1c44:	mov	r0, r7
    1c46:	ldr	r1, [pc, #72]	; (1c90 <_GLOBAL__sub_I_audioShield+0x134>)

void SGTL5000_disable(void)
{
  chipWrite(CHIP_DIG_POWER, 0); 
  chipWrite(CHIP_ANA_POWER, 0); 
}
    1c48:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1c4c:	b.w	f928 <__aeabi_atexit>
    1c50:	.word	0x20006a24
    1c54:	.word	0x1fff4550
    1c58:	.word	0x1fff0970
    1c5c:	.word	0x00014e88
    1c60:	.word	0x000149dc
    1c64:	.word	0x00014f30
    1c68:	.word	0x38002003
    1c6c:	.word	0x1fff3c48
    1c70:	.word	0x000005d5
    1c74:	.word	0x00014b7c
    1c78:	.word	0x0001491c
    1c7c:	.word	0x00000f61
    1c80:	.word	0x1fff1638
    1c84:	.word	0x20006a08
    1c88:	.word	0x00000ea5
    1c8c:	.word	0x1fff097c
    1c90:	.word	0x00000789
    1c94:	.word	0x00014f88

00001c98 <chipWrite(unsigned int, unsigned int)>:
  val |= Wire.read();
  return val;
}

bool chipWrite(unsigned int reg, unsigned int val)
{
    1c98:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1c9a:	ldr	r4, [pc, #72]	; (1ce4 <chipWrite(unsigned int, unsigned int)+0x4c>)
    1c9c:	movs	r3, #20
    1c9e:	mov	r6, r1
		transmitting = 1;
    1ca0:	movs	r5, #1
    1ca2:	mov	r7, r0
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1ca4:	ubfx	r1, r0, #8, #8
    1ca8:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1caa:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    1cae:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    1cb2:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1cb6:	bl	87f8 <TwoWire::write(unsigned char)>
    1cba:	uxtb	r1, r7
    1cbc:	mov	r0, r4
    1cbe:	bl	87f8 <TwoWire::write(unsigned char)>
    1cc2:	ubfx	r1, r6, #8, #8
    1cc6:	mov	r0, r4
    1cc8:	bl	87f8 <TwoWire::write(unsigned char)>
    1ccc:	uxtb	r1, r6
    1cce:	mov	r0, r4
    1cd0:	bl	87f8 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1cd4:	mov	r1, r5
    1cd6:	mov	r0, r4
    1cd8:	bl	8ad0 <TwoWire::endTransmission(unsigned char)>
  Wire.write(reg);
  Wire.write(val >> 8);
  Wire.write(val);
  if (Wire.endTransmission() == 0) return true;
  return false;
}
    1cdc:	clz	r0, r0
    1ce0:	lsrs	r0, r0, #5
    1ce2:	pop	{r3, r4, r5, r6, r7, pc}
    1ce4:	.word	0x1fff0a84

00001ce8 <setup>:
void printTimestamp(uint32_t tt);

#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
    1ce8:	push	{r4, r5, r6, lr}
    1cea:	ldr	r1, [pc, #260]	; (1df0 <setup+0x108>)
    1cec:	ldr	r2, [pc, #260]	; (1df4 <setup+0x10c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1cee:	ldr	r4, [pc, #264]	; (1df8 <setup+0x110>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1cf0:	ldr	r6, [pc, #264]	; (1dfc <setup+0x114>)
    1cf2:	sub	sp, #8
    1cf4:	movw	r0, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1cf8:	ldrb	r3, [r1, #0]
    1cfa:	cmp	r3, #0
    1cfc:	beq.n	1dc6 <setup+0xde>
    1cfe:	ldrb	r3, [r4, #0]
    1d00:	lsls	r3, r3, #31
    1d02:	bpl.n	1dc6 <setup+0xde>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d04:	ldr	r3, [r2, #0]
    1d06:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d08:	subs	r3, r3, r5
    1d0a:	cmp	r3, #14
    1d0c:	bls.n	1dc6 <setup+0xde>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1d0e:	movs	r1, #10
    1d10:	ldr	r0, [pc, #236]	; (1e00 <setup+0x118>)
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
        SIM_SCGC7 |= SIM_SCGC7_DMA;
    1d12:	ldr	r6, [pc, #240]	; (1e04 <setup+0x11c>)
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1d14:	ldr	r5, [pc, #240]	; (1e08 <setup+0x120>)

  acq_setup();
  acq_stop();
  acq_init(fsamp);

  audioShield.enable();
    1d16:	ldr	r4, [pc, #244]	; (1e0c <setup+0x124>)
    1d18:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1d1c:	ldr	r0, [pc, #240]	; (1e10 <setup+0x128>)
    1d1e:	bl	f780 <Print::println()>
#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
  Serial.println("MTP logger");
  setSyncProvider((long int (*)()) rtc_get);
    1d22:	ldr	r0, [pc, #240]	; (1e14 <setup+0x12c>)
    1d24:	bl	8168 <setSyncProvider(long (*)())>

  printTimestamp(rtc_get());
    1d28:	bl	e694 <rtc_get>
    1d2c:	bl	13e0 <printTimestamp(unsigned long)>

  #if USE_EVENTS==1
    usb_init_events();
    1d30:	bl	76c4 <usb_init_events>
  #endif

  #if !__has_include("usb_mtp.h")
    usb_mtp_configure();
  #endif
  storage_configure();
    1d34:	bl	1034 <storage_configure()>
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d38:	ldr	r3, [pc, #220]	; (1e18 <setup+0x130>)
  #endif
  storage_configure();

  #if USE_SD==1
    // Set Time callback // needed for SDFat
    FsDateTime::callback = dateTime;
    1d3a:	ldr	r2, [pc, #224]	; (1e1c <setup+0x134>)
    1d3c:	ldr	r1, [pc, #224]	; (1e20 <setup+0x138>)
    1d3e:	str	r1, [r2, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d40:	ldr	r2, [r3, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1d42:	ldr	r1, [pc, #224]	; (1e24 <setup+0x13c>)
    FsDateTime::callback = dateTime;
  #endif

  acq_setup();
  acq_stop();
  acq_init(fsamp);
    1d44:	ldr	r0, [pc, #224]	; (1e28 <setup+0x140>)
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d46:	orr.w	r2, r2, #32768	; 0x8000
    1d4a:	str	r2, [r3, #0]
        SIM_SCGC7 |= SIM_SCGC7_DMA;
    1d4c:	ldr	r2, [r6, #0]
    1d4e:	orr.w	r2, r2, #2
    1d52:	str	r2, [r6, #0]
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    1d54:	ldr	r2, [r3, #0]
    1d56:	orr.w	r2, r2, #2
    1d5a:	str	r2, [r3, #0]
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1d5c:	ldr	r3, [r5, #0]
    1d5e:	bic.w	r3, r3, #2415919104	; 0x90000000
    1d62:	str	r3, [r5, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1d64:	ldr	r3, [r1, #0]
    1d66:	bic.w	r3, r3, #2415919104	; 0x90000000
    1d6a:	str	r3, [r1, #0]
    FsDateTime::callback = dateTime;
  #endif

  acq_setup();
  acq_stop();
  acq_init(fsamp);
    1d6c:	bl	1860 <acq_init(long)>

  audioShield.enable();
    1d70:	mov	r0, r4
    1d72:	bl	854c <AudioControlSGTL5000::enable()>
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    1d76:	mov	r0, r4
    1d78:	movw	r2, #371	; 0x173
    1d7c:	movs	r1, #42	; 0x2a
    1d7e:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1d82:	cbnz	r0, 1dd2 <setup+0xea>
  audioShield.inputSelect(AUDIO_SELECT);  //AUDIO_INPUT_LINEIN or AUDIO_INPUT_MIC

  delay(10);
    1d84:	movs	r0, #10
    1d86:	bl	e724 <delay>
  if(sgtl_mode>3) sgtl_mode = 3; 
  if(sgtl_mode<0) sgtl_mode = 0;
  
//  write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
//	write(CHIP_I2S_CTRL, 0x0130); // SCLK=32*Fs, 16bit, I2S format
  chipWrite(CHIP_CLK_CTRL, (sgtl_mode<<2));  // 256*Fs| sgtl_mode = 0:32 kHz; 1:44.1 kHz; 2:48 kHz; 3:96 kHz
    1d8a:	movs	r1, #12
    1d8c:	movs	r0, #4
    1d8e:	bl	1c98 <chipWrite(unsigned int, unsigned int)>
  delay(10);
  SGTL5000_modification(IFR); // must be called after I2S initialization stabilized 
  //(0: 8kHz, 1: 16 kHz 2:32 kHz, 3:44.1 kHz, 4:48 kHz, 5:96 kHz, 6:192 kHz)
  
  #if AUDIO_SELECT == AUDIO_INPUT_MIC
    audioShield.micGain(MicGain);
    1d92:	movs	r1, #0
    1d94:	ldr	r0, [pc, #116]	; (1e0c <setup+0x124>)
    1d96:	bl	82e0 <AudioControlSGTL5000::micGain(unsigned int)>
  #endif

  state=-1;
    1d9a:	ldr	r3, [pc, #144]	; (1e2c <setup+0x144>)
    1d9c:	ldr	r0, [pc, #144]	; (1e30 <setup+0x148>)
    1d9e:	movw	r2, #65535	; 0xffff
    1da2:	movs	r1, #10
    1da4:	strh	r2, [r3, #0]
    1da6:	bl	ddcc <usb_serial_write>
    1daa:	ldr	r0, [pc, #100]	; (1e10 <setup+0x128>)
    1dac:	bl	f780 <Print::println()>
    1db0:	movs	r1, #67	; 0x43
    1db2:	ldr	r0, [pc, #128]	; (1e34 <setup+0x14c>)
    1db4:	bl	ddcc <usb_serial_write>
    1db8:	ldr	r0, [pc, #84]	; (1e10 <setup+0x128>)
    1dba:	bl	f780 <Print::println()>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1dbe:	bl	df34 <usb_serial_flush_output>

  Serial.println("Setup done");
  Serial.println(" Enter 's' to start, 'q' to stop acquisition and 'r' to restart MTP");
  Serial.flush();
}
    1dc2:	add	sp, #8
    1dc4:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dc6:	ldr	r3, [r2, #0]
    1dc8:	str	r3, [sp, #4]
	return ret;
    1dca:	ldr	r3, [sp, #4]
void printTimestamp(uint32_t tt);

#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
    1dcc:	cmp	r3, r0
    1dce:	bls.n	1cf8 <setup+0x10>
    1dd0:	b.n	1d0e <setup+0x26>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    1dd2:	movs	r2, #136	; 0x88
    1dd4:	movs	r1, #32
    1dd6:	mov	r0, r4
    1dd8:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1ddc:	cmp	r0, #0
    1dde:	beq.n	1d84 <setup+0x9c>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1de0:	ldrh	r2, [r4, #6]
    1de2:	mov	r0, r4
    1de4:	bic.w	r2, r2, #4
    1de8:	movs	r1, #36	; 0x24
    1dea:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1dee:	b.n	1d84 <setup+0x9c>
    1df0:	.word	0x20007120
    1df4:	.word	0x2000701c
    1df8:	.word	0x20007018
    1dfc:	.word	0x200071a4
    1e00:	.word	0x00014b14
    1e04:	.word	0x40048040
    1e08:	.word	0x4002f000
    1e0c:	.word	0x20006a24
    1e10:	.word	0x1fff0c58
    1e14:	.word	0x0000e695
    1e18:	.word	0x4004803c
    1e1c:	.word	0x20006af8
    1e20:	.word	0x000006f1
    1e24:	.word	0x4002f080
    1e28:	.word	0x00017700
    1e2c:	.word	0x1fff3d4e
    1e30:	.word	0x00014b20
    1e34:	.word	0x00014b2c

00001e38 <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    1e38:	ldr	r3, [r0, #4]
    1e3a:	cmp	r3, #19
    1e3c:	bgt.n	1e50 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x18>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1e3e:	push	{r4}
    1e40:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    1e44:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    1e46:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    1e48:	str	r3, [r0, #4]
    1e4a:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1e4c:	ldr.w	r4, [sp], #4
    1e50:	bx	lr
    1e52:	nop

00001e54 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1e54:	ldr	r0, [r0, #4]
    1e56:	bx	lr

00001e58 <MTPStorage_SD::get_FSName(unsigned long)>:
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    1e58:	add.w	r1, r0, r1, lsl #2
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1e5c:	ldr	r0, [r1, #8]
    1e5e:	bx	lr

00001e60 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    1e60:	movs	r0, #0
    1e62:	bx	lr

00001e64 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    1e64:	movs	r0, #1
    1e66:	bx	lr

00001e68 <MTPStorage_SD::totalSize(unsigned long)>:
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }

    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    1e68:	add.w	r1, r0, r1, lsl #2
    1e6c:	ldr	r0, [r1, #88]	; 0x58
    1e6e:	ldr	r3, [r0, #0]
    1e70:	ldr	r3, [r3, #28]
    1e72:	bx	r3

00001e74 <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    1e74:	add.w	r1, r0, r1, lsl #2
    1e78:	ldr	r0, [r1, #88]	; 0x58
    1e7a:	ldr	r3, [r0, #0]
    1e7c:	ldr	r3, [r3, #24]
    1e7e:	bx	r3

00001e80 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1e80:	ldr.w	r0, [r0, #204]	; 0xcc
    1e84:	cmp	r0, #0
    1e86:	beq.n	1eee <MTPStorage_SD::write(char const*, unsigned long)+0x6e>
    #endif
    return ret;
  }

  size_t MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    1e88:	push	{r4, r5, r6}
    1e8a:	ldr	r4, [r0, #0]
    1e8c:	ldr	r3, [pc, #108]	; (1efc <MTPStorage_SD::write(char const*, unsigned long)+0x7c>)
    1e8e:	ldr	r4, [r4, #44]	; 0x2c
    1e90:	cmp	r4, r3
    1e92:	bne.n	1ee8 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1e94:	ldr	r0, [r0, #16]
    1e96:	cbz	r0, 1ee2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1e98:	ldr	r4, [r0, #0]
    1e9a:	ldr	r4, [r4, #44]	; 0x2c
    1e9c:	cmp	r4, r3
    1e9e:	bne.n	1ee8 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1ea0:	ldr	r0, [r0, #16]
    1ea2:	cbz	r0, 1ee2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ea4:	ldr	r4, [r0, #0]
    1ea6:	ldr	r4, [r4, #44]	; 0x2c
    1ea8:	cmp	r4, r3
    1eaa:	bne.n	1ee8 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1eac:	ldr	r0, [r0, #16]
    1eae:	cbz	r0, 1ee2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1eb0:	ldr	r4, [r0, #0]
    1eb2:	ldr	r4, [r4, #44]	; 0x2c
    1eb4:	cmp	r4, r3
    1eb6:	bne.n	1ee8 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1eb8:	ldr	r0, [r0, #16]
    1eba:	cbz	r0, 1ee2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ebc:	mov	r6, r2
    1ebe:	ldr	r2, [r0, #0]
    1ec0:	ldr	r4, [r2, #44]	; 0x2c
    1ec2:	cmp	r4, r3
    1ec4:	mov	r5, r1
    1ec6:	bne.n	1ef2 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1ec8:	ldr	r0, [r0, #16]
    1eca:	cbz	r0, 1ee2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ecc:	ldr	r2, [r0, #0]
    1ece:	ldr	r4, [r2, #44]	; 0x2c
    1ed0:	cmp	r4, r3
    1ed2:	bne.n	1ef2 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1ed4:	ldr	r0, [r0, #16]
    1ed6:	cbz	r0, 1ee2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ed8:	ldr	r3, [r0, #0]
    1eda:	mov	r2, r6
    1edc:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    1ede:	pop	{r4, r5, r6}
    1ee0:	bx	r3
    1ee2:	movs	r0, #0
    1ee4:	pop	{r4, r5, r6}
    1ee6:	bx	lr
    1ee8:	mov	r3, r4
    1eea:	pop	{r4, r5, r6}
    1eec:	bx	r3
    1eee:	movs	r0, #0
    1ef0:	bx	lr
    1ef2:	mov	r2, r6
    1ef4:	mov	r1, r5
    1ef6:	mov	r3, r4
    1ef8:	pop	{r4, r5, r6}
    1efa:	bx	r3
    1efc:	.word	0x00000489

00001f00 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1f00:	ldr.w	r3, [r0, #184]	; 0xb8
    1f04:	cmp	r3, #0
    1f06:	beq.n	1f70 <MTPStorage_SD::ResetIndex()+0x70>
    1f08:	ldr	r2, [r3, #0]
    1f0a:	ldr	r1, [pc, #108]	; (1f78 <MTPStorage_SD::ResetIndex()+0x78>)
    1f0c:	ldr	r2, [r2, #68]	; 0x44
    1f0e:	cmp	r2, r1
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    1f10:	push	{r4, lr}
    1f12:	mov	r4, r0
    1f14:	bne.n	1f6a <MTPStorage_SD::ResetIndex()+0x6a>
    1f16:	ldr	r0, [r3, #16]
    1f18:	cbz	r0, 1f68 <MTPStorage_SD::ResetIndex()+0x68>
    1f1a:	ldr	r3, [r0, #0]
    1f1c:	ldr	r3, [r3, #68]	; 0x44
    1f1e:	cmp	r3, r2
    1f20:	bne.n	1f72 <MTPStorage_SD::ResetIndex()+0x72>
    1f22:	ldr	r0, [r0, #16]
    1f24:	cbz	r0, 1f68 <MTPStorage_SD::ResetIndex()+0x68>
    1f26:	ldr	r2, [r0, #0]
    1f28:	ldr	r2, [r2, #68]	; 0x44
    1f2a:	cmp	r2, r3
    1f2c:	bne.n	1f6c <MTPStorage_SD::ResetIndex()+0x6c>
    1f2e:	ldr	r0, [r0, #16]
    1f30:	cbz	r0, 1f68 <MTPStorage_SD::ResetIndex()+0x68>
    1f32:	ldr	r3, [r0, #0]
    1f34:	ldr	r3, [r3, #68]	; 0x44
    1f36:	cmp	r3, r2
    1f38:	bne.n	1f72 <MTPStorage_SD::ResetIndex()+0x72>
    1f3a:	ldr	r0, [r0, #16]
    1f3c:	cbz	r0, 1f68 <MTPStorage_SD::ResetIndex()+0x68>
    1f3e:	ldr	r2, [r0, #0]
    1f40:	ldr	r2, [r2, #68]	; 0x44
    1f42:	cmp	r2, r3
    1f44:	bne.n	1f6c <MTPStorage_SD::ResetIndex()+0x6c>
    1f46:	ldr	r0, [r0, #16]
    1f48:	cbz	r0, 1f68 <MTPStorage_SD::ResetIndex()+0x68>
    1f4a:	ldr	r3, [r0, #0]
    1f4c:	ldr	r3, [r3, #68]	; 0x44
    1f4e:	blx	r3
    if(!sd_isOpen(index_)) return;
    1f50:	cbz	r0, 1f68 <MTPStorage_SD::ResetIndex()+0x68>
    CloseIndex();
    1f52:	ldr	r3, [r4, #0]
    1f54:	mov	r0, r4
    1f56:	ldr	r3, [r3, #64]	; 0x40
    1f58:	blx	r3
//    OpenIndex();

    all_scanned_ = false;
    1f5a:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1f5c:	mvn.w	r3, #1
  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    CloseIndex();
//    OpenIndex();

    all_scanned_ = false;
    1f60:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    1f64:	str.w	r3, [r4, #240]	; 0xf0
    1f68:	pop	{r4, pc}
    1f6a:	mov	r0, r3
    1f6c:	blx	r2
    1f6e:	b.n	1f50 <MTPStorage_SD::ResetIndex()+0x50>
    1f70:	bx	lr
    1f72:	blx	r3
    1f74:	b.n	1f50 <MTPStorage_SD::ResetIndex()+0x50>
    1f76:	nop
    1f78:	.word	0x0000050d

00001f7c <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    1f7c:	push	{r4, lr}
    1f7e:	mov	r4, r0
    1f80:	ldr.w	r0, [r0, #184]	; 0xb8
    1f84:	cmp	r0, #0
    1f86:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    1f88:	ldr	r3, [r0, #0]
    1f8a:	ldr	r2, [pc, #256]	; (208c <MTPStorage_SD::CloseIndex()+0x110>)
    1f8c:	ldr	r3, [r3, #68]	; 0x44
    1f8e:	cmp	r3, r2
    1f90:	bne.n	2074 <MTPStorage_SD::CloseIndex()+0xf8>
    1f92:	ldr	r0, [r0, #16]
    1f94:	cmp	r0, #0
    1f96:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    1f98:	ldr	r2, [r0, #0]
    1f9a:	ldr	r2, [r2, #68]	; 0x44
    1f9c:	cmp	r2, r3
    1f9e:	bne.n	2086 <MTPStorage_SD::CloseIndex()+0x10a>
    1fa0:	ldr	r0, [r0, #16]
    1fa2:	cmp	r0, #0
    1fa4:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    1fa6:	ldr	r3, [r0, #0]
    1fa8:	ldr	r3, [r3, #68]	; 0x44
    1faa:	cmp	r3, r2
    1fac:	bne.n	2074 <MTPStorage_SD::CloseIndex()+0xf8>
    1fae:	ldr	r0, [r0, #16]
    1fb0:	cmp	r0, #0
    1fb2:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    1fb4:	ldr	r2, [r0, #0]
    1fb6:	ldr	r2, [r2, #68]	; 0x44
    1fb8:	cmp	r2, r3
    1fba:	bne.n	2086 <MTPStorage_SD::CloseIndex()+0x10a>
    1fbc:	ldr	r0, [r0, #16]
    1fbe:	cmp	r0, #0
    1fc0:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    1fc2:	ldr	r3, [r0, #0]
    1fc4:	ldr	r3, [r3, #68]	; 0x44
    1fc6:	cmp	r3, r2
    1fc8:	bne.n	2074 <MTPStorage_SD::CloseIndex()+0xf8>
    1fca:	ldr	r0, [r0, #16]
    1fcc:	cmp	r0, #0
    1fce:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    1fd0:	ldr	r3, [r0, #0]
    1fd2:	ldr	r3, [r3, #68]	; 0x44
    1fd4:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    1fd6:	cmp	r0, #0
    1fd8:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1fda:	ldr.w	r0, [r4, #184]	; 0xb8
    1fde:	cmp	r0, #0
    1fe0:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    1fe2:	ldr	r2, [r0, #0]
    1fe4:	ldr	r3, [pc, #168]	; (2090 <MTPStorage_SD::CloseIndex()+0x114>)
    1fe6:	ldr	r2, [r2, #64]	; 0x40
    1fe8:	cmp	r2, r3
    1fea:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    1fec:	ldr	r0, [r0, #16]
    1fee:	cmp	r0, #0
    1ff0:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    1ff2:	ldr	r2, [r0, #0]
    1ff4:	ldr	r2, [r2, #64]	; 0x40
    1ff6:	cmp	r2, r3
    1ff8:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    1ffa:	ldr	r0, [r0, #16]
    1ffc:	cmp	r0, #0
    1ffe:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    2000:	ldr	r2, [r0, #0]
    2002:	ldr	r2, [r2, #64]	; 0x40
    2004:	cmp	r2, r3
    2006:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    2008:	ldr	r0, [r0, #16]
    200a:	cmp	r0, #0
    200c:	beq.n	2068 <MTPStorage_SD::CloseIndex()+0xec>
    200e:	ldr	r2, [r0, #0]
    2010:	ldr	r2, [r2, #64]	; 0x40
    2012:	cmp	r2, r3
    2014:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    2016:	ldr	r0, [r0, #16]
    2018:	cbz	r0, 2068 <MTPStorage_SD::CloseIndex()+0xec>
    201a:	ldr	r2, [r0, #0]
    201c:	ldr	r2, [r2, #64]	; 0x40
    201e:	cmp	r2, r3
    2020:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    2022:	ldr	r0, [r0, #16]
    2024:	cbz	r0, 2068 <MTPStorage_SD::CloseIndex()+0xec>
    2026:	ldr	r2, [r0, #0]
    2028:	ldr	r2, [r2, #64]	; 0x40
    202a:	cmp	r2, r3
    202c:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    202e:	ldr	r0, [r0, #16]
    2030:	cbz	r0, 2068 <MTPStorage_SD::CloseIndex()+0xec>
    2032:	ldr	r2, [r0, #0]
    2034:	ldr	r2, [r2, #64]	; 0x40
    2036:	cmp	r2, r3
    2038:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    203a:	ldr	r0, [r0, #16]
    203c:	cbz	r0, 2068 <MTPStorage_SD::CloseIndex()+0xec>
    203e:	ldr	r2, [r0, #0]
    2040:	ldr	r2, [r2, #64]	; 0x40
    2042:	cmp	r2, r3
    2044:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    2046:	ldr	r0, [r0, #16]
    2048:	cbz	r0, 2068 <MTPStorage_SD::CloseIndex()+0xec>
    204a:	ldr	r2, [r0, #0]
    204c:	ldr	r2, [r2, #64]	; 0x40
    204e:	cmp	r2, r3
    2050:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    2052:	ldr	r0, [r0, #16]
    2054:	cbz	r0, 2068 <MTPStorage_SD::CloseIndex()+0xec>
    2056:	ldr	r2, [r0, #0]
    2058:	ldr	r2, [r2, #64]	; 0x40
    205a:	cmp	r2, r3
    205c:	bne.n	2078 <MTPStorage_SD::CloseIndex()+0xfc>
    205e:	ldr	r0, [r0, #16]
    2060:	cbz	r0, 2068 <MTPStorage_SD::CloseIndex()+0xec>
    2062:	ldr	r3, [r0, #0]
    2064:	ldr	r3, [r3, #64]	; 0x40
    2066:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    2068:	movs	r3, #0
    206a:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    206e:	str.w	r3, [r4, #244]	; 0xf4
    2072:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2074:	blx	r3
    2076:	b.n	1fd6 <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2078:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    207a:	movs	r3, #0
    207c:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    2080:	str.w	r3, [r4, #244]	; 0xf4
    2084:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2086:	blx	r2
    2088:	b.n	1fd6 <MTPStorage_SD::CloseIndex()+0x5a>
    208a:	nop
    208c:	.word	0x0000050d
    2090:	.word	0x00000501

00002094 <File::invalidate() [clone .isra.1]>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2094:	ldr	r2, [r0, #0]
    2096:	cmp	r2, #0
    2098:	beq.n	2114 <File::invalidate() [clone .isra.1]+0x80>
    209a:	ldr	r3, [r2, #16]
    209c:	subs	r3, #1
    209e:	str	r3, [r2, #16]
    20a0:	cmp	r3, #0
    20a2:	bne.n	2114 <File::invalidate() [clone .isra.1]+0x80>
	}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
    20a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (f && --(f->refcount) == 0) delete f;
    20a8:	ldr	r4, [r0, #0]
    20aa:	cmp	r4, #0
    20ac:	beq.n	2116 <File::invalidate() [clone .isra.1]+0x82>
    20ae:	ldr	r3, [r4, #0]
    20b0:	ldr	r1, [pc, #120]	; (212c <File::invalidate() [clone .isra.1]+0x98>)
    20b2:	ldr	r3, [r3, #32]
    20b4:	cmp	r3, r1
    20b6:	bne.n	211a <File::invalidate() [clone .isra.1]+0x86>
    20b8:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    20ba:	ldr	r6, [pc, #116]	; (2130 <File::invalidate() [clone .isra.1]+0x9c>)
    20bc:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    20be:	cbz	r2, 2108 <File::invalidate() [clone .isra.1]+0x74>
    20c0:	ldr	r3, [r2, #16]
    20c2:	subs	r3, #1
    20c4:	str	r3, [r2, #16]
    20c6:	cbnz	r3, 2108 <File::invalidate() [clone .isra.1]+0x74>
    20c8:	ldr	r5, [r4, #16]
    20ca:	cbz	r5, 2108 <File::invalidate() [clone .isra.1]+0x74>
    20cc:	ldr	r3, [r5, #0]
    20ce:	ldr	r3, [r3, #32]
    20d0:	cmp	r3, r1
    20d2:	bne.n	2122 <File::invalidate() [clone .isra.1]+0x8e>
    20d4:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    20d6:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    20d8:	cbz	r2, 2100 <File::invalidate() [clone .isra.1]+0x6c>
    20da:	ldr	r3, [r2, #16]
    20dc:	subs	r3, #1
    20de:	str	r3, [r2, #16]
    20e0:	cbnz	r3, 2100 <File::invalidate() [clone .isra.1]+0x6c>
    20e2:	ldr	r7, [r5, #16]
    20e4:	cbz	r7, 2100 <File::invalidate() [clone .isra.1]+0x6c>
    20e6:	ldr	r3, [r7, #0]
    20e8:	ldr	r3, [r3, #32]
    20ea:	cmp	r3, r1
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    20ec:	mov	r0, r7
    20ee:	bne.n	2128 <File::invalidate() [clone .isra.1]+0x94>
    20f0:	str.w	r6, [r0], #16
		invalidate();
    20f4:	bl	2094 <File::invalidate() [clone .isra.1]>
	}
    20f8:	mov	r0, r7
    20fa:	movs	r1, #20
    20fc:	bl	f924 <operator delete(void*, unsigned int)>
    2100:	mov	r0, r5
    2102:	movs	r1, #20
    2104:	bl	f924 <operator delete(void*, unsigned int)>
    2108:	mov	r0, r4
    210a:	movs	r1, #20
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
	}
    210c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2110:	b.w	f924 <operator delete(void*, unsigned int)>
    2114:	bx	lr
    2116:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    211a:	mov	r0, r4
	}
    211c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2120:	bx	r3
    2122:	mov	r0, r5
    2124:	blx	r3
    2126:	b.n	2108 <File::invalidate() [clone .isra.1]+0x74>
    2128:	blx	r3
    212a:	b.n	2100 <File::invalidate() [clone .isra.1]+0x6c>
    212c:	.word	0x00000f31
    2130:	.word	0x0001491c

00002134 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    2134:	bx	lr
    2136:	nop

00002138 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    2138:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    213c:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    213e:	ldr.w	r0, [r0, #184]	; 0xb8
    2142:	sub	sp, #28
    2144:	cbz	r0, 2198 <MTPStorage_SD::OpenIndex()+0x60>
    2146:	ldr	r3, [r0, #0]
    2148:	ldr	r2, [pc, #536]	; (2364 <MTPStorage_SD::OpenIndex()+0x22c>)
    214a:	ldr	r3, [r3, #68]	; 0x44
    214c:	cmp	r3, r2
    214e:	bne.w	2468 <MTPStorage_SD::OpenIndex()+0x330>
    2152:	ldr	r0, [r0, #16]
    2154:	cbz	r0, 2198 <MTPStorage_SD::OpenIndex()+0x60>
    2156:	ldr	r2, [r0, #0]
    2158:	ldr	r2, [r2, #68]	; 0x44
    215a:	cmp	r2, r3
    215c:	bne.w	247c <MTPStorage_SD::OpenIndex()+0x344>
    2160:	ldr	r0, [r0, #16]
    2162:	cbz	r0, 2198 <MTPStorage_SD::OpenIndex()+0x60>
    2164:	ldr	r3, [r0, #0]
    2166:	ldr	r3, [r3, #68]	; 0x44
    2168:	cmp	r3, r2
    216a:	bne.w	2468 <MTPStorage_SD::OpenIndex()+0x330>
    216e:	ldr	r0, [r0, #16]
    2170:	cbz	r0, 2198 <MTPStorage_SD::OpenIndex()+0x60>
    2172:	ldr	r2, [r0, #0]
    2174:	ldr	r2, [r2, #68]	; 0x44
    2176:	cmp	r2, r3
    2178:	bne.w	247c <MTPStorage_SD::OpenIndex()+0x344>
    217c:	ldr	r0, [r0, #16]
    217e:	cbz	r0, 2198 <MTPStorage_SD::OpenIndex()+0x60>
    2180:	ldr	r3, [r0, #0]
    2182:	ldr	r3, [r3, #68]	; 0x44
    2184:	cmp	r3, r2
    2186:	bne.w	2468 <MTPStorage_SD::OpenIndex()+0x330>
    218a:	ldr	r0, [r0, #16]
    218c:	cbz	r0, 2198 <MTPStorage_SD::OpenIndex()+0x60>
    218e:	ldr	r3, [r0, #0]
    2190:	ldr	r3, [r3, #68]	; 0x44
    2192:	blx	r3
    2194:	cmp	r0, #0
    2196:	bne.n	226c <MTPStorage_SD::OpenIndex()+0x134>
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    2198:	ldr	r1, [r4, #88]	; 0x58
    219a:	ldr	r2, [pc, #460]	; (2368 <MTPStorage_SD::OpenIndex()+0x230>)
    219c:	ldr	r3, [r1, #0]
    219e:	add	r0, sp, #4
    21a0:	ldr	r5, [r3, #0]
    21a2:	movs	r3, #2
    21a4:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    21a6:	ldr.w	r3, [r4, #184]	; 0xb8
    21aa:	cbz	r3, 21b8 <MTPStorage_SD::OpenIndex()+0x80>
    21ac:	ldr	r2, [r3, #16]
    21ae:	subs	r2, #1
    21b0:	str	r2, [r3, #16]
    21b2:	cmp	r2, #0
    21b4:	beq.w	237c <MTPStorage_SD::OpenIndex()+0x244>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    21b8:	ldr	r3, [sp, #20]
    21ba:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    21be:	cbz	r3, 21d8 <MTPStorage_SD::OpenIndex()+0xa0>
    21c0:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    21c2:	ldr	r1, [pc, #424]	; (236c <MTPStorage_SD::OpenIndex()+0x234>)
    21c4:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    21c6:	adds	r2, #1
    21c8:	str	r2, [r3, #16]
    21ca:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    21cc:	cbz	r2, 21d8 <MTPStorage_SD::OpenIndex()+0xa0>
    21ce:	ldr	r3, [r2, #16]
    21d0:	subs	r3, #1
    21d2:	str	r3, [r2, #16]
    21d4:	cmp	r3, #0
    21d6:	beq.n	2272 <MTPStorage_SD::OpenIndex()+0x13a>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    21d8:	ldr.w	r0, [r4, #184]	; 0xb8
    21dc:	cmp	r0, #0
    21de:	beq.n	225e <MTPStorage_SD::OpenIndex()+0x126>
    21e0:	ldr	r2, [r0, #0]
    21e2:	ldr	r3, [pc, #384]	; (2364 <MTPStorage_SD::OpenIndex()+0x22c>)
    21e4:	ldr	r2, [r2, #68]	; 0x44
    21e6:	cmp	r2, r3
    21e8:	bne.w	2472 <MTPStorage_SD::OpenIndex()+0x33a>
    21ec:	ldr	r0, [r0, #16]
    21ee:	cmp	r0, #0
    21f0:	beq.n	225e <MTPStorage_SD::OpenIndex()+0x126>
    21f2:	ldr	r2, [r0, #0]
    21f4:	ldr	r2, [r2, #68]	; 0x44
    21f6:	cmp	r2, r3
    21f8:	bne.w	2472 <MTPStorage_SD::OpenIndex()+0x33a>
    21fc:	ldr	r0, [r0, #16]
    21fe:	cmp	r0, #0
    2200:	beq.n	225e <MTPStorage_SD::OpenIndex()+0x126>
    2202:	ldr	r2, [r0, #0]
    2204:	ldr	r2, [r2, #68]	; 0x44
    2206:	cmp	r2, r3
    2208:	bne.w	2472 <MTPStorage_SD::OpenIndex()+0x33a>
    220c:	ldr	r0, [r0, #16]
    220e:	cbz	r0, 225e <MTPStorage_SD::OpenIndex()+0x126>
    2210:	ldr	r2, [r0, #0]
    2212:	ldr	r2, [r2, #68]	; 0x44
    2214:	cmp	r2, r3
    2216:	bne.w	2472 <MTPStorage_SD::OpenIndex()+0x33a>
    221a:	ldr	r0, [r0, #16]
    221c:	cbz	r0, 225e <MTPStorage_SD::OpenIndex()+0x126>
    221e:	ldr	r2, [r0, #0]
    2220:	ldr	r2, [r2, #68]	; 0x44
    2222:	cmp	r2, r3
    2224:	bne.w	2472 <MTPStorage_SD::OpenIndex()+0x33a>
    2228:	ldr	r0, [r0, #16]
    222a:	cbz	r0, 225e <MTPStorage_SD::OpenIndex()+0x126>
    222c:	ldr	r2, [r0, #0]
    222e:	ldr	r2, [r2, #68]	; 0x44
    2230:	cmp	r2, r3
    2232:	bne.w	2472 <MTPStorage_SD::OpenIndex()+0x33a>
    2236:	ldr	r0, [r0, #16]
    2238:	cbz	r0, 225e <MTPStorage_SD::OpenIndex()+0x126>
    223a:	ldr	r2, [r0, #0]
    223c:	ldr	r2, [r2, #68]	; 0x44
    223e:	cmp	r2, r3
    2240:	bne.w	2472 <MTPStorage_SD::OpenIndex()+0x33a>
    2244:	ldr	r0, [r0, #16]
    2246:	cbz	r0, 225e <MTPStorage_SD::OpenIndex()+0x126>
    2248:	ldr	r2, [r0, #0]
    224a:	ldr	r2, [r2, #68]	; 0x44
    224c:	cmp	r2, r3
    224e:	bne.w	2472 <MTPStorage_SD::OpenIndex()+0x33a>
    2252:	ldr	r0, [r0, #16]
    2254:	cbz	r0, 225e <MTPStorage_SD::OpenIndex()+0x126>
    2256:	ldr	r3, [r0, #0]
    2258:	ldr	r3, [r3, #68]	; 0x44
    225a:	blx	r3
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    225c:	cbnz	r0, 226c <MTPStorage_SD::OpenIndex()+0x134>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    225e:	movs	r1, #22
    2260:	ldr	r0, [pc, #268]	; (2370 <MTPStorage_SD::OpenIndex()+0x238>)
    2262:	bl	ddcc <usb_serial_write>
    2266:	ldr	r0, [pc, #268]	; (2374 <MTPStorage_SD::OpenIndex()+0x23c>)
    2268:	bl	f780 <Print::println()>
    mtp_lock_storage(false);
  }
    226c:	add	sp, #28
    226e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2272:	ldr	r5, [sp, #20]
    2274:	cmp	r5, #0
    2276:	beq.n	21d8 <MTPStorage_SD::OpenIndex()+0xa0>
    2278:	ldr	r2, [r5, #0]
    227a:	ldr	r3, [pc, #252]	; (2378 <MTPStorage_SD::OpenIndex()+0x240>)
    227c:	ldr	r2, [r2, #32]
    227e:	cmp	r2, r3
    2280:	bne.w	248c <MTPStorage_SD::OpenIndex()+0x354>
    2284:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2286:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2288:	cmp	r0, #0
    228a:	beq.n	235a <MTPStorage_SD::OpenIndex()+0x222>
    228c:	ldr	r2, [r0, #16]
    228e:	subs	r2, #1
    2290:	str	r2, [r0, #16]
    2292:	cmp	r2, #0
    2294:	bne.n	235a <MTPStorage_SD::OpenIndex()+0x222>
    2296:	ldr	r6, [r5, #16]
    2298:	cmp	r6, #0
    229a:	beq.n	235a <MTPStorage_SD::OpenIndex()+0x222>
    229c:	ldr	r2, [r6, #0]
    229e:	ldr	r2, [r2, #32]
    22a0:	cmp	r2, r3
    22a2:	bne.w	2492 <MTPStorage_SD::OpenIndex()+0x35a>
    22a6:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    22a8:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22aa:	cmp	r0, #0
    22ac:	beq.n	2352 <MTPStorage_SD::OpenIndex()+0x21a>
    22ae:	ldr	r2, [r0, #16]
    22b0:	subs	r2, #1
    22b2:	str	r2, [r0, #16]
    22b4:	cmp	r2, #0
    22b6:	bne.n	2352 <MTPStorage_SD::OpenIndex()+0x21a>
    22b8:	ldr	r7, [r6, #16]
    22ba:	cmp	r7, #0
    22bc:	beq.n	2352 <MTPStorage_SD::OpenIndex()+0x21a>
    22be:	ldr	r2, [r7, #0]
    22c0:	ldr	r2, [r2, #32]
    22c2:	cmp	r2, r3
    22c4:	bne.w	24a4 <MTPStorage_SD::OpenIndex()+0x36c>
    22c8:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    22ca:	str	r1, [r7, #0]
    22cc:	ldr.w	lr, [pc, #156]	; 236c <MTPStorage_SD::OpenIndex()+0x234>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22d0:	cmp	r0, #0
    22d2:	beq.n	234a <MTPStorage_SD::OpenIndex()+0x212>
    22d4:	ldr	r2, [r0, #16]
    22d6:	subs	r2, #1
    22d8:	str	r2, [r0, #16]
    22da:	cmp	r2, #0
    22dc:	bne.n	234a <MTPStorage_SD::OpenIndex()+0x212>
    22de:	ldr.w	r8, [r7, #16]
    22e2:	cmp.w	r8, #0
    22e6:	beq.n	234a <MTPStorage_SD::OpenIndex()+0x212>
    22e8:	ldr.w	r2, [r8]
    22ec:	ldr	r2, [r2, #32]
    22ee:	cmp	r2, r3
    22f0:	bne.w	24b0 <MTPStorage_SD::OpenIndex()+0x378>
    22f4:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    22f8:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22fc:	cbz	r0, 2342 <MTPStorage_SD::OpenIndex()+0x20a>
    22fe:	ldr	r2, [r0, #16]
    2300:	subs	r2, #1
    2302:	str	r2, [r0, #16]
    2304:	cbnz	r2, 2342 <MTPStorage_SD::OpenIndex()+0x20a>
    2306:	ldr.w	r9, [r8, #16]
    230a:	cmp.w	r9, #0
    230e:	beq.n	2342 <MTPStorage_SD::OpenIndex()+0x20a>
    2310:	ldr.w	r2, [r9]
    2314:	ldr	r2, [r2, #32]
    2316:	cmp	r2, r3
    2318:	bne.w	24bc <MTPStorage_SD::OpenIndex()+0x384>
    231c:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2320:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2324:	cbz	r2, 233a <MTPStorage_SD::OpenIndex()+0x202>
    2326:	ldr	r3, [r2, #16]
    2328:	subs	r3, #1
    232a:	str	r3, [r2, #16]
    232c:	cbnz	r3, 233a <MTPStorage_SD::OpenIndex()+0x202>
    232e:	ldr.w	r0, [r9, #16]
    2332:	cbz	r0, 233a <MTPStorage_SD::OpenIndex()+0x202>
    2334:	ldr	r3, [r0, #0]
    2336:	ldr	r3, [r3, #32]
    2338:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    233a:	mov	r0, r9
    233c:	movs	r1, #20
    233e:	bl	f924 <operator delete(void*, unsigned int)>
    2342:	mov	r0, r8
    2344:	movs	r1, #20
    2346:	bl	f924 <operator delete(void*, unsigned int)>
    234a:	mov	r0, r7
    234c:	movs	r1, #20
    234e:	bl	f924 <operator delete(void*, unsigned int)>
    2352:	mov	r0, r6
    2354:	movs	r1, #20
    2356:	bl	f924 <operator delete(void*, unsigned int)>
    235a:	mov	r0, r5
    235c:	movs	r1, #20
    235e:	bl	f924 <operator delete(void*, unsigned int)>
    2362:	b.n	21d8 <MTPStorage_SD::OpenIndex()+0xa0>
    2364:	.word	0x0000050d
    2368:	.word	0x00014bd4
    236c:	.word	0x0001491c
    2370:	.word	0x00014be4
    2374:	.word	0x1fff0c58
    2378:	.word	0x00000f31
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    237c:	ldr.w	r5, [r4, #184]	; 0xb8
    2380:	cmp	r5, #0
    2382:	beq.w	21b8 <MTPStorage_SD::OpenIndex()+0x80>
    2386:	ldr	r2, [r5, #0]
    2388:	ldr	r3, [pc, #312]	; (24c4 <MTPStorage_SD::OpenIndex()+0x38c>)
    238a:	ldr	r2, [r2, #32]
    238c:	cmp	r2, r3
    238e:	bne.n	2486 <MTPStorage_SD::OpenIndex()+0x34e>
    2390:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2392:	ldr	r1, [pc, #308]	; (24c8 <MTPStorage_SD::OpenIndex()+0x390>)
    2394:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2396:	cmp	r0, #0
    2398:	beq.n	245e <MTPStorage_SD::OpenIndex()+0x326>
    239a:	ldr	r2, [r0, #16]
    239c:	subs	r2, #1
    239e:	str	r2, [r0, #16]
    23a0:	cmp	r2, #0
    23a2:	bne.n	245e <MTPStorage_SD::OpenIndex()+0x326>
    23a4:	ldr	r6, [r5, #16]
    23a6:	cmp	r6, #0
    23a8:	beq.n	245e <MTPStorage_SD::OpenIndex()+0x326>
    23aa:	ldr	r2, [r6, #0]
    23ac:	ldr	r2, [r2, #32]
    23ae:	cmp	r2, r3
    23b0:	bne.n	2498 <MTPStorage_SD::OpenIndex()+0x360>
    23b2:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23b4:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23b6:	cmp	r0, #0
    23b8:	beq.n	2456 <MTPStorage_SD::OpenIndex()+0x31e>
    23ba:	ldr	r2, [r0, #16]
    23bc:	subs	r2, #1
    23be:	str	r2, [r0, #16]
    23c0:	cmp	r2, #0
    23c2:	bne.n	2456 <MTPStorage_SD::OpenIndex()+0x31e>
    23c4:	ldr	r7, [r6, #16]
    23c6:	cmp	r7, #0
    23c8:	beq.n	2456 <MTPStorage_SD::OpenIndex()+0x31e>
    23ca:	ldr	r2, [r7, #0]
    23cc:	ldr	r2, [r2, #32]
    23ce:	cmp	r2, r3
    23d0:	bne.n	249e <MTPStorage_SD::OpenIndex()+0x366>
    23d2:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23d4:	str	r1, [r7, #0]
    23d6:	ldr.w	lr, [pc, #240]	; 24c8 <MTPStorage_SD::OpenIndex()+0x390>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23da:	cmp	r0, #0
    23dc:	beq.n	244e <MTPStorage_SD::OpenIndex()+0x316>
    23de:	ldr	r2, [r0, #16]
    23e0:	subs	r2, #1
    23e2:	str	r2, [r0, #16]
    23e4:	cbnz	r2, 244e <MTPStorage_SD::OpenIndex()+0x316>
    23e6:	ldr.w	r8, [r7, #16]
    23ea:	cmp.w	r8, #0
    23ee:	beq.n	244e <MTPStorage_SD::OpenIndex()+0x316>
    23f0:	ldr.w	r2, [r8]
    23f4:	ldr	r2, [r2, #32]
    23f6:	cmp	r2, r3
    23f8:	bne.n	24aa <MTPStorage_SD::OpenIndex()+0x372>
    23fa:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23fe:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2402:	cbz	r0, 2446 <MTPStorage_SD::OpenIndex()+0x30e>
    2404:	ldr	r2, [r0, #16]
    2406:	subs	r2, #1
    2408:	str	r2, [r0, #16]
    240a:	cbnz	r2, 2446 <MTPStorage_SD::OpenIndex()+0x30e>
    240c:	ldr.w	r9, [r8, #16]
    2410:	cmp.w	r9, #0
    2414:	beq.n	2446 <MTPStorage_SD::OpenIndex()+0x30e>
    2416:	ldr.w	r2, [r9]
    241a:	ldr	r2, [r2, #32]
    241c:	cmp	r2, r3
    241e:	bne.n	24b6 <MTPStorage_SD::OpenIndex()+0x37e>
    2420:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2424:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2428:	cbz	r2, 243e <MTPStorage_SD::OpenIndex()+0x306>
    242a:	ldr	r3, [r2, #16]
    242c:	subs	r3, #1
    242e:	str	r3, [r2, #16]
    2430:	cbnz	r3, 243e <MTPStorage_SD::OpenIndex()+0x306>
    2432:	ldr.w	r0, [r9, #16]
    2436:	cbz	r0, 243e <MTPStorage_SD::OpenIndex()+0x306>
    2438:	ldr	r3, [r0, #0]
    243a:	ldr	r3, [r3, #32]
    243c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    243e:	mov	r0, r9
    2440:	movs	r1, #20
    2442:	bl	f924 <operator delete(void*, unsigned int)>
    2446:	mov	r0, r8
    2448:	movs	r1, #20
    244a:	bl	f924 <operator delete(void*, unsigned int)>
    244e:	mov	r0, r7
    2450:	movs	r1, #20
    2452:	bl	f924 <operator delete(void*, unsigned int)>
    2456:	mov	r0, r6
    2458:	movs	r1, #20
    245a:	bl	f924 <operator delete(void*, unsigned int)>
    245e:	mov	r0, r5
    2460:	movs	r1, #20
    2462:	bl	f924 <operator delete(void*, unsigned int)>
    2466:	b.n	21b8 <MTPStorage_SD::OpenIndex()+0x80>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2468:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    246a:	cmp	r0, #0
    246c:	bne.w	226c <MTPStorage_SD::OpenIndex()+0x134>
    2470:	b.n	2198 <MTPStorage_SD::OpenIndex()+0x60>
    2472:	blx	r2
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    2474:	cmp	r0, #0
    2476:	bne.w	226c <MTPStorage_SD::OpenIndex()+0x134>
    247a:	b.n	225e <MTPStorage_SD::OpenIndex()+0x126>
    247c:	blx	r2
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    247e:	cmp	r0, #0
    2480:	bne.w	226c <MTPStorage_SD::OpenIndex()+0x134>
    2484:	b.n	2198 <MTPStorage_SD::OpenIndex()+0x60>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2486:	mov	r0, r5
    2488:	blx	r2
    248a:	b.n	21b8 <MTPStorage_SD::OpenIndex()+0x80>
    248c:	mov	r0, r5
    248e:	blx	r2
    2490:	b.n	21d8 <MTPStorage_SD::OpenIndex()+0xa0>
    2492:	mov	r0, r6
    2494:	blx	r2
    2496:	b.n	235a <MTPStorage_SD::OpenIndex()+0x222>
    2498:	mov	r0, r6
    249a:	blx	r2
    249c:	b.n	245e <MTPStorage_SD::OpenIndex()+0x326>
    249e:	mov	r0, r7
    24a0:	blx	r2
    24a2:	b.n	2456 <MTPStorage_SD::OpenIndex()+0x31e>
    24a4:	mov	r0, r7
    24a6:	blx	r2
    24a8:	b.n	2352 <MTPStorage_SD::OpenIndex()+0x21a>
    24aa:	mov	r0, r8
    24ac:	blx	r2
    24ae:	b.n	244e <MTPStorage_SD::OpenIndex()+0x316>
    24b0:	mov	r0, r8
    24b2:	blx	r2
    24b4:	b.n	234a <MTPStorage_SD::OpenIndex()+0x212>
    24b6:	mov	r0, r9
    24b8:	blx	r2
    24ba:	b.n	2446 <MTPStorage_SD::OpenIndex()+0x30e>
    24bc:	mov	r0, r9
    24be:	blx	r2
    24c0:	b.n	2342 <MTPStorage_SD::OpenIndex()+0x20a>
    24c2:	nop
    24c4:	.word	0x00000f31
    24c8:	.word	0x0001491c

000024cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    all_scanned_ = false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    24cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24d0:	mov	r6, r0
    24d2:	sub	sp, #12
    24d4:	mov	r4, r1
    24d6:	mov	r7, r2
    24d8:	bl	2138 <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    24dc:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    24e0:	add.w	r4, r4, r4, lsl #4
    24e4:	cmp	r5, #0
    24e6:	beq.n	25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    24e8:	ldr	r0, [r5, #0]
    24ea:	ldr	r1, [pc, #308]	; (2620 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    24ec:	lsls	r2, r4, #4
    24ee:	ldr	r4, [r0, #52]	; 0x34
    24f0:	cmp	r4, r1
    24f2:	mov.w	ip, #0
    24f6:	bne.n	25e6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x11a>
    24f8:	ldr	r1, [r5, #16]
    24fa:	cmp	r1, #0
    24fc:	beq.n	25b6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xea>
    24fe:	ldr	r3, [r1, #0]
    2500:	ldr.w	r8, [r3, #52]	; 0x34
    2504:	cmp	r8, r4
    2506:	bne.n	25f2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x126>
    2508:	ldr.w	lr, [r1, #16]
    250c:	cmp.w	lr, #0
    2510:	beq.n	25c4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    2512:	ldr.w	r4, [lr]
    2516:	ldr	r4, [r4, #52]	; 0x34
    2518:	cmp	r4, r8
    251a:	bne.n	25fe <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x132>
    251c:	ldr.w	lr, [lr, #16]
    2520:	cmp.w	lr, #0
    2524:	beq.n	25c4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    2526:	ldr.w	r3, [lr]
    252a:	ldr.w	r8, [r3, #52]	; 0x34
    252e:	cmp	r8, r4
    2530:	bne.n	260a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13e>
    2532:	ldr.w	r4, [lr, #16]
    2536:	cmp	r4, #0
    2538:	beq.n	25c4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    253a:	ldr	r3, [r4, #0]
    253c:	ldr.w	r9, [r3, #52]	; 0x34
    2540:	cmp	r9, r8
    2542:	bne.n	2616 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14a>
    2544:	ldr	r4, [r4, #16]
    2546:	cmp	r4, #0
    2548:	beq.n	25c4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    254a:	ldr	r1, [r4, #0]
    254c:	str.w	ip, [sp]
    2550:	mov	r3, ip
    2552:	mov	r0, r4
    2554:	ldr	r1, [r1, #52]	; 0x34
    2556:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2558:	ldr.w	r5, [r6, #184]	; 0xb8
    255c:	cmp	r5, #0
    255e:	beq.n	25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2560:	ldr	r2, [r5, #0]
    2562:	ldr	r3, [pc, #192]	; (2624 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    2564:	ldr	r4, [r2, #44]	; 0x2c
    2566:	cmp	r4, r3
    2568:	bne.n	25d0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    256a:	ldr	r0, [r5, #16]
    256c:	cbz	r0, 25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    256e:	ldr	r2, [r0, #0]
    2570:	ldr	r4, [r2, #44]	; 0x2c
    2572:	cmp	r4, r3
    2574:	bne.n	25e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2576:	ldr	r0, [r0, #16]
    2578:	cbz	r0, 25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    257a:	ldr	r2, [r0, #0]
    257c:	ldr	r4, [r2, #44]	; 0x2c
    257e:	cmp	r4, r3
    2580:	bne.n	25e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2582:	ldr	r0, [r0, #16]
    2584:	cbz	r0, 25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2586:	ldr	r2, [r0, #0]
    2588:	ldr	r4, [r2, #44]	; 0x2c
    258a:	cmp	r4, r3
    258c:	bne.n	25e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    258e:	ldr	r0, [r0, #16]
    2590:	cbz	r0, 25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2592:	ldr	r2, [r0, #0]
    2594:	ldr	r4, [r2, #44]	; 0x2c
    2596:	cmp	r4, r3
    2598:	bne.n	25e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    259a:	ldr	r0, [r0, #16]
    259c:	cbz	r0, 25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    259e:	ldr	r2, [r0, #0]
    25a0:	ldr	r4, [r2, #44]	; 0x2c
    25a2:	cmp	r4, r3
    25a4:	bne.n	25e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    25a6:	ldr	r0, [r0, #16]
    25a8:	cbz	r0, 25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    25aa:	ldr	r3, [r0, #0]
    25ac:	mov	r1, r7
    25ae:	ldr	r3, [r3, #44]	; 0x2c
    25b0:	mov.w	r2, #272	; 0x110
    25b4:	b.n	25da <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10e>
    25b6:	ldr	r4, [r0, #44]	; 0x2c
    25b8:	ldr	r3, [pc, #104]	; (2624 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    25ba:	cmp	r4, r3
    25bc:	bne.n	25d0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    25be:	add	sp, #12
    25c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25c4:	ldr	r4, [r0, #44]	; 0x2c
    25c6:	ldr	r3, [pc, #92]	; (2624 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    25c8:	cmp	r4, r3
    25ca:	bne.n	25d0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    25cc:	mov	r0, r1
    25ce:	b.n	256e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xa2>
    25d0:	mov	r1, r7
    25d2:	mov	r0, r5
    25d4:	mov.w	r2, #272	; 0x110
    25d8:	mov	r3, r4
    25da:	add	sp, #12
    25dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    25e0:	bx	r3
    25e2:	mov	r1, r7
    25e4:	b.n	25d4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x108>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    25e6:	str.w	ip, [sp]
    25ea:	mov	r3, ip
    25ec:	mov	r0, r5
    25ee:	blx	r4
    25f0:	b.n	2558 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    25f2:	str.w	ip, [sp]
    25f6:	mov	r3, ip
    25f8:	mov	r0, r1
    25fa:	blx	r8
    25fc:	b.n	2558 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    25fe:	str.w	ip, [sp]
    2602:	mov	r3, ip
    2604:	mov	r0, lr
    2606:	blx	r4
    2608:	b.n	2558 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    260a:	str.w	ip, [sp]
    260e:	mov	r3, ip
    2610:	mov	r0, lr
    2612:	blx	r8
    2614:	b.n	2558 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2616:	movs	r3, #0
    2618:	mov	r0, r4
    261a:	str	r3, [sp, #0]
    261c:	blx	r9
    261e:	b.n	2558 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2620:	.word	0x000004c9
    2624:	.word	0x00000489

00002628 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    2628:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  { if (index_generated) return; 
    index_generated = true;
    262c:	movs	r7, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    262e:	mov	r4, r0
    2630:	sub	sp, #272	; 0x110
    2632:	movs	r1, #13
  { if (index_generated) return; 
    index_generated = true;
    2634:	strb.w	r7, [r0, #248]	; 0xf8
    2638:	ldr	r0, [pc, #104]	; (26a4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    263a:	bl	ddcc <usb_serial_write>
    263e:	ldr	r0, [pc, #104]	; (26a8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x80>)
    2640:	bl	f780 <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    2644:	ldr	r0, [r4, #88]	; 0x58
    2646:	ldr	r1, [pc, #92]	; (26a4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    2648:	ldr	r3, [r0, #0]
    264a:	ldr	r3, [r3, #16]
    264c:	blx	r3
    264e:	ldr	r3, [r4, #4]
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    2650:	str.w	r3, [r4, #228]	; 0xe4

    index_entries_ = 0;
    2654:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2656:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    2658:	str.w	r1, [r4, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    265c:	ble.n	269e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x76>
    265e:	mov	r5, r1
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
    2660:	mov	r6, r1
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    2662:	mov.w	r8, #4294967295
    2666:	b.n	266c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x44>
    2668:	ldr.w	r1, [r4, #244]	; 0xf4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
    266c:	strh.w	r5, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2670:	adds	r3, r1, #1
    2672:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    2676:	mov	r2, sp
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    2678:	movs	r3, #47	; 0x2f
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    267a:	mov	r0, r4
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    267c:	strh.w	r3, [sp, #16]
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    2680:	str.w	r8, [sp]
      r.sibling = 0;
    2684:	str	r6, [sp, #8]
      r.child = 0;
    2686:	str	r6, [sp, #4]
      r.isdir = true;
    2688:	strb.w	r7, [sp, #12]
      r.scanned = false;
    268c:	strb.w	r6, [sp, #13]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2690:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2694:	ldr.w	r3, [r4, #228]	; 0xe4
    2698:	adds	r5, #1
    269a:	cmp	r3, r5
    269c:	bgt.n	2668 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x40>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    269e:	add	sp, #272	; 0x110
    26a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26a4:	.word	0x00014bd4
    26a8:	.word	0x1fff0c58

000026ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    26ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26b0:	mov	r5, r1
    26b2:	mov	r4, r2
    26b4:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    26b6:	movs	r1, #0
    26b8:	mov.w	r2, #272	; 0x110
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    26bc:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    26be:	bl	10dec <memset>
    if (i > index_entries_) 
    26c2:	ldr.w	r3, [r5, #244]	; 0xf4
    26c6:	cmp	r3, r4
    26c8:	bcc.w	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x196>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    26cc:	mov	r0, r5
    26ce:	bl	2138 <MTPStorage_SD::OpenIndex()>
    26d2:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    26d6:	add.w	r4, r4, r4, lsl #4
    26da:	lsls	r2, r4, #4
    26dc:	mov.w	ip, #0
    26e0:	cmp	r0, #0
    26e2:	beq.w	283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    26e6:	ldr	r7, [r0, #0]
    26e8:	ldr	r4, [pc, #456]	; (28b4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x208>)
    26ea:	ldr	r1, [r7, #52]	; 0x34
    26ec:	cmp	r1, r4
    26ee:	bne.w	286e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    26f2:	ldr	r1, [r0, #16]
    26f4:	cmp	r1, #0
    26f6:	beq.w	2856 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1aa>
    26fa:	ldr	r3, [r1, #0]
    26fc:	ldr.w	r8, [r3, #52]	; 0x34
    2700:	cmp	r8, r4
    2702:	bne.w	289c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f0>
    2706:	ldr.w	lr, [r1, #16]
    270a:	cmp.w	lr, #0
    270e:	beq.n	27c2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2710:	ldr.w	r3, [lr]
    2714:	ldr.w	r8, [r3, #52]	; 0x34
    2718:	cmp	r8, r4
    271a:	bne.w	2890 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    271e:	ldr.w	lr, [lr, #16]
    2722:	cmp.w	lr, #0
    2726:	beq.n	27c2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2728:	ldr.w	r3, [lr]
    272c:	ldr.w	r8, [r3, #52]	; 0x34
    2730:	cmp	r8, r4
    2732:	bne.w	2890 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    2736:	ldr.w	lr, [lr, #16]
    273a:	cmp.w	lr, #0
    273e:	beq.n	27c2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2740:	ldr.w	r3, [lr]
    2744:	ldr.w	r8, [r3, #52]	; 0x34
    2748:	cmp	r8, r4
    274a:	bne.w	28a8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    274e:	ldr.w	lr, [lr, #16]
    2752:	cmp.w	lr, #0
    2756:	beq.n	27c2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2758:	ldr.w	r3, [lr]
    275c:	ldr.w	r8, [r3, #52]	; 0x34
    2760:	cmp	r8, r4
    2762:	bne.w	28a8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2766:	ldr.w	lr, [lr, #16]
    276a:	cmp.w	lr, #0
    276e:	beq.n	27c2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2770:	ldr.w	r3, [lr]
    2774:	ldr.w	r8, [r3, #52]	; 0x34
    2778:	cmp	r8, r4
    277a:	bne.w	28a8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    277e:	ldr.w	lr, [lr, #16]
    2782:	cmp.w	lr, #0
    2786:	beq.n	27c2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2788:	ldr.w	r3, [lr]
    278c:	ldr.w	r8, [r3, #52]	; 0x34
    2790:	cmp	r8, r4
    2792:	bne.w	28a8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2796:	ldr.w	lr, [lr, #16]
    279a:	cmp.w	lr, #0
    279e:	beq.n	27c2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    27a0:	ldr.w	r3, [lr]
    27a4:	ldr.w	r8, [r3, #52]	; 0x34
    27a8:	cmp	r8, r4
    27aa:	bne.n	28a8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    27ac:	ldr.w	r4, [lr, #16]
    27b0:	cbz	r4, 27c2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    27b2:	ldr	r1, [r4, #0]
    27b4:	str.w	ip, [sp]
    27b8:	mov	r3, ip
    27ba:	mov	r0, r4
    27bc:	ldr	r1, [r1, #52]	; 0x34
    27be:	blx	r1
    27c0:	b.n	2876 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    27c2:	ldr	r4, [r7, #40]	; 0x28
    27c4:	ldr	r3, [pc, #240]	; (28b8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    27c6:	cmp	r4, r3
    27c8:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27ca:	mov	r0, r1
    27cc:	ldr	r2, [r0, #0]
    27ce:	ldr	r4, [r2, #40]	; 0x28
    27d0:	cmp	r4, r3
    27d2:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27d4:	ldr	r0, [r0, #16]
    27d6:	cmp	r0, #0
    27d8:	beq.n	283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27da:	ldr	r2, [r0, #0]
    27dc:	ldr	r4, [r2, #40]	; 0x28
    27de:	cmp	r4, r3
    27e0:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27e2:	ldr	r0, [r0, #16]
    27e4:	cbz	r0, 283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27e6:	ldr	r2, [r0, #0]
    27e8:	ldr	r4, [r2, #40]	; 0x28
    27ea:	cmp	r4, r3
    27ec:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27ee:	ldr	r0, [r0, #16]
    27f0:	cbz	r0, 283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27f2:	ldr	r2, [r0, #0]
    27f4:	ldr	r4, [r2, #40]	; 0x28
    27f6:	cmp	r4, r3
    27f8:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27fa:	ldr	r0, [r0, #16]
    27fc:	cbz	r0, 283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27fe:	ldr	r2, [r0, #0]
    2800:	ldr	r4, [r2, #40]	; 0x28
    2802:	cmp	r4, r3
    2804:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2806:	ldr	r0, [r0, #16]
    2808:	cbz	r0, 283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    280a:	ldr	r2, [r0, #0]
    280c:	ldr	r4, [r2, #40]	; 0x28
    280e:	cmp	r4, r3
    2810:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2812:	ldr	r0, [r0, #16]
    2814:	cbz	r0, 283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2816:	ldr	r2, [r0, #0]
    2818:	ldr	r4, [r2, #40]	; 0x28
    281a:	cmp	r4, r3
    281c:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    281e:	ldr	r0, [r0, #16]
    2820:	cbz	r0, 283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2822:	ldr	r2, [r0, #0]
    2824:	ldr	r4, [r2, #40]	; 0x28
    2826:	cmp	r4, r3
    2828:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    282a:	ldr	r0, [r0, #16]
    282c:	cbz	r0, 283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    282e:	ldr	r3, [r0, #0]
    2830:	mov.w	r2, #272	; 0x110
    2834:	ldr	r3, [r3, #40]	; 0x28
    2836:	mov	r1, r6
    2838:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    283a:	mov	r0, r6
    283c:	add	sp, #8
    283e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    2842:	mov.w	r2, #272	; 0x110
    2846:	movs	r1, #0
    2848:	mov	r0, r6
    284a:	bl	10dec <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    284e:	mov	r0, r6
    2850:	add	sp, #8
    2852:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2856:	ldr	r4, [r7, #40]	; 0x28
    2858:	ldr	r3, [pc, #92]	; (28b8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    285a:	cmp	r4, r3
    285c:	beq.n	283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    285e:	mov.w	r2, #272	; 0x110
    2862:	mov	r1, r6
    2864:	blx	r4
    2866:	mov	r0, r6
    2868:	add	sp, #8
    286a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    286e:	str.w	ip, [sp]
    2872:	mov	r3, ip
    2874:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2876:	ldr.w	r0, [r5, #184]	; 0xb8
    287a:	cmp	r0, #0
    287c:	beq.n	283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    287e:	ldr	r2, [r0, #0]
    2880:	ldr	r3, [pc, #52]	; (28b8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2882:	ldr	r4, [r2, #40]	; 0x28
    2884:	cmp	r4, r3
    2886:	bne.n	285e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2888:	ldr	r0, [r0, #16]
    288a:	cmp	r0, #0
    288c:	bne.n	27cc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x120>
    288e:	b.n	283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2890:	str.w	ip, [sp]
    2894:	mov	r3, ip
    2896:	mov	r0, lr
    2898:	blx	r8
    289a:	b.n	2876 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    289c:	str.w	ip, [sp]
    28a0:	mov	r3, ip
    28a2:	mov	r0, r1
    28a4:	blx	r8
    28a6:	b.n	2876 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    28a8:	movs	r3, #0
    28aa:	mov	r0, lr
    28ac:	str	r3, [sp, #0]
    28ae:	blx	r8
    28b0:	b.n	2876 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    28b2:	nop
    28b4:	.word	0x000004c9
    28b8:	.word	0x0000047d

000028bc <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    28bc:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    28be:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    28c2:	sub	sp, #276	; 0x114
    28c4:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    28c6:	cbnz	r5, 28dc <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
    28c8:	b.n	2912 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    28ca:	ldr	r3, [sp, #8]
    28cc:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    28d0:	ldrb.w	r3, [sp, #16]
    28d4:	cbnz	r3, 290c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    28d6:	ldr.w	r5, [r4, #252]	; 0xfc
    28da:	cbz	r5, 2912 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    28dc:	mov	r2, r5
    28de:	mov	r1, r4
    28e0:	mov	r0, sp
    28e2:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    28e6:	ldrb.w	r2, [r4, #256]	; 0x100
    28ea:	cmp	r2, #0
    28ec:	bne.n	28ca <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    28ee:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    28f2:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    28f6:	adds	r3, #1
    28f8:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    28fc:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    28fe:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    2902:	it	cs
    2904:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    2908:	cmp	r3, #0
    290a:	beq.n	28d6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    290c:	mov	r0, r5
    290e:	add	sp, #276	; 0x114
    2910:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    2912:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    2914:	mov	r0, r5
    2916:	add	sp, #276	; 0x114
    2918:	pop	{r4, r5, pc}
    291a:	nop

0000291c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    291c:	push	{r4, r5, r6, r7, lr}
    291e:	sub	sp, #276	; 0x114
    2920:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    2922:	mov	r2, r1
    2924:	mov	r1, r0
    2926:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    2928:	mov	r5, r3
    292a:	ldr	r6, [sp, #296]	; 0x128
    292c:	ldr	r4, [sp, #300]	; 0x12c
    Record r = ReadIndexRecord(handle);
    292e:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    2932:	mov	r0, r7
    2934:	add	r1, sp, #16
    2936:	bl	112e0 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    293a:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    293e:	ldr	r2, [sp, #0]
    2940:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2942:	cbnz	r3, 2952 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    2944:	ldr	r3, [sp, #4]
    *store = r.store;
    2946:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    294a:	str	r3, [r5, #0]
    *store = r.store;
    294c:	strh	r2, [r4, #0]
  }
    294e:	add	sp, #276	; 0x114
    2950:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2952:	mov.w	r3, #4294967295
    2956:	b.n	2946 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

00002958 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    2958:	push	{lr}
    295a:	sub	sp, #276	; 0x114
    return ReadIndexRecord(handle).child;
    295c:	mov	r2, r1
    295e:	mov	r1, r0
    2960:	mov	r0, sp
    2962:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    2966:	ldr	r0, [sp, #4]
    2968:	add	sp, #276	; 0x114
    296a:	ldr.w	pc, [sp], #4
    296e:	nop

00002970 <MTPStorage_SD::close()>:
      mtp_lock_storage(false);
      return ret;
  }

  void MTPStorage_SD::close() 
  {
    2970:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2972:	ldr.w	r3, [r0, #204]	; 0xcc
    2976:	sub	sp, #272	; 0x110
    2978:	mov	r4, r0
    297a:	cmp	r3, #0
    297c:	beq.n	2a18 <MTPStorage_SD::close()+0xa8>
    297e:	ldr	r5, [r3, #0]
    2980:	ldr	r1, [pc, #384]	; (2b04 <MTPStorage_SD::close()+0x194>)
    2982:	ldr	r2, [r5, #60]	; 0x3c
    2984:	cmp	r2, r1
    2986:	bne.w	2af8 <MTPStorage_SD::close()+0x188>
    298a:	ldr	r2, [r3, #16]
    298c:	cmp	r2, #0
    298e:	beq.w	2ae8 <MTPStorage_SD::close()+0x178>
    2992:	ldr	r0, [r2, #0]
    2994:	ldr	r6, [r0, #60]	; 0x3c
    2996:	cmp	r6, r1
    2998:	bne.n	2a40 <MTPStorage_SD::close()+0xd0>
    299a:	ldr	r0, [r2, #16]
    299c:	cmp	r0, #0
    299e:	beq.n	2a0a <MTPStorage_SD::close()+0x9a>
    29a0:	ldr	r6, [r0, #0]
    29a2:	ldr	r6, [r6, #60]	; 0x3c
    29a4:	cmp	r6, r1
    29a6:	bne.n	2a42 <MTPStorage_SD::close()+0xd2>
    29a8:	ldr	r0, [r0, #16]
    29aa:	cmp	r0, #0
    29ac:	beq.n	2a0a <MTPStorage_SD::close()+0x9a>
    29ae:	ldr	r6, [r0, #0]
    29b0:	ldr	r6, [r6, #60]	; 0x3c
    29b2:	cmp	r6, r1
    29b4:	bne.n	2a42 <MTPStorage_SD::close()+0xd2>
    29b6:	ldr	r0, [r0, #16]
    29b8:	cbz	r0, 2a0a <MTPStorage_SD::close()+0x9a>
    29ba:	ldr	r6, [r0, #0]
    29bc:	ldr	r6, [r6, #60]	; 0x3c
    29be:	cmp	r6, r1
    29c0:	bne.n	2a42 <MTPStorage_SD::close()+0xd2>
    29c2:	ldr	r0, [r0, #16]
    29c4:	cbz	r0, 2a0a <MTPStorage_SD::close()+0x9a>
    29c6:	ldr	r6, [r0, #0]
    29c8:	ldr	r6, [r6, #60]	; 0x3c
    29ca:	cmp	r6, r1
    29cc:	bne.n	2a42 <MTPStorage_SD::close()+0xd2>
    29ce:	ldr	r0, [r0, #16]
    29d0:	cbz	r0, 2a0a <MTPStorage_SD::close()+0x9a>
    29d2:	ldr	r6, [r0, #0]
    29d4:	ldr	r6, [r6, #60]	; 0x3c
    29d6:	cmp	r6, r1
    29d8:	bne.n	2a42 <MTPStorage_SD::close()+0xd2>
    29da:	ldr	r0, [r0, #16]
    29dc:	cbz	r0, 2a0a <MTPStorage_SD::close()+0x9a>
    29de:	ldr	r6, [r0, #0]
    29e0:	ldr	r6, [r6, #60]	; 0x3c
    29e2:	cmp	r6, r1
    29e4:	bne.n	2a42 <MTPStorage_SD::close()+0xd2>
    29e6:	ldr	r0, [r0, #16]
    29e8:	cbz	r0, 2a0a <MTPStorage_SD::close()+0x9a>
    29ea:	ldr	r6, [r0, #0]
    29ec:	ldr	r6, [r6, #60]	; 0x3c
    29ee:	cmp	r6, r1
    29f0:	bne.n	2a42 <MTPStorage_SD::close()+0xd2>
    29f2:	ldr	r0, [r0, #16]
    29f4:	cbz	r0, 2a0a <MTPStorage_SD::close()+0x9a>
    29f6:	ldr	r6, [r0, #0]
    29f8:	ldr	r6, [r6, #60]	; 0x3c
    29fa:	cmp	r6, r1
    29fc:	bne.n	2a42 <MTPStorage_SD::close()+0xd2>
    29fe:	ldr	r0, [r0, #16]
    2a00:	cbz	r0, 2a0a <MTPStorage_SD::close()+0x9a>
    2a02:	ldr	r3, [r0, #0]
    2a04:	ldr	r3, [r3, #60]	; 0x3c
    2a06:	blx	r3
    2a08:	b.n	2a44 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    2a0a:	ldr	r6, [r5, #64]	; 0x40
    2a0c:	ldr	r1, [pc, #248]	; (2b08 <MTPStorage_SD::close()+0x198>)
    2a0e:	cmp	r6, r1
    2a10:	bne.n	2afe <MTPStorage_SD::close()+0x18e>
    2a12:	mov	r0, r2
    2a14:	movs	r5, #0
    2a16:	b.n	2a5e <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    2a18:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    2a1a:	mov	r0, sp
    2a1c:	ldr.w	r2, [r4, #240]	; 0xf0
    2a20:	mov	r1, r4
    2a22:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    2a26:	mov	r2, sp
    2a28:	ldr.w	r1, [r4, #240]	; 0xf0
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    2a2c:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    2a2e:	mov	r0, r4
    2a30:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    2a34:	mvn.w	r3, #1
    2a38:	str.w	r3, [r4, #240]	; 0xf0
  }
    2a3c:	add	sp, #272	; 0x110
    2a3e:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2a40:	mov	r0, r2
    2a42:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    2a44:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    2a48:	mov	r5, r0
    2a4a:	cmp	r3, #0
    2a4c:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2a4e:	ldr	r2, [r3, #0]
    2a50:	ldr	r1, [pc, #180]	; (2b08 <MTPStorage_SD::close()+0x198>)
    2a52:	ldr	r6, [r2, #64]	; 0x40
    2a54:	cmp	r6, r1
    2a56:	bne.n	2af2 <MTPStorage_SD::close()+0x182>
    2a58:	ldr	r0, [r3, #16]
    2a5a:	cmp	r0, #0
    2a5c:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2a5e:	ldr	r3, [r0, #0]
    2a60:	ldr	r3, [r3, #64]	; 0x40
    2a62:	cmp	r3, r1
    2a64:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2a66:	ldr	r0, [r0, #16]
    2a68:	cmp	r0, #0
    2a6a:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2a6c:	ldr	r3, [r0, #0]
    2a6e:	ldr	r3, [r3, #64]	; 0x40
    2a70:	cmp	r3, r1
    2a72:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2a74:	ldr	r0, [r0, #16]
    2a76:	cmp	r0, #0
    2a78:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2a7a:	ldr	r3, [r0, #0]
    2a7c:	ldr	r3, [r3, #64]	; 0x40
    2a7e:	cmp	r3, r1
    2a80:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2a82:	ldr	r0, [r0, #16]
    2a84:	cmp	r0, #0
    2a86:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2a88:	ldr	r3, [r0, #0]
    2a8a:	ldr	r3, [r3, #64]	; 0x40
    2a8c:	cmp	r3, r1
    2a8e:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2a90:	ldr	r0, [r0, #16]
    2a92:	cmp	r0, #0
    2a94:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2a96:	ldr	r3, [r0, #0]
    2a98:	ldr	r3, [r3, #64]	; 0x40
    2a9a:	cmp	r3, r1
    2a9c:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2a9e:	ldr	r0, [r0, #16]
    2aa0:	cmp	r0, #0
    2aa2:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2aa4:	ldr	r3, [r0, #0]
    2aa6:	ldr	r3, [r3, #64]	; 0x40
    2aa8:	cmp	r3, r1
    2aaa:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2aac:	ldr	r0, [r0, #16]
    2aae:	cmp	r0, #0
    2ab0:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2ab2:	ldr	r3, [r0, #0]
    2ab4:	ldr	r3, [r3, #64]	; 0x40
    2ab6:	cmp	r3, r1
    2ab8:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2aba:	ldr	r0, [r0, #16]
    2abc:	cmp	r0, #0
    2abe:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2ac0:	ldr	r3, [r0, #0]
    2ac2:	ldr	r3, [r3, #64]	; 0x40
    2ac4:	cmp	r3, r1
    2ac6:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2ac8:	ldr	r0, [r0, #16]
    2aca:	cmp	r0, #0
    2acc:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2ace:	ldr	r3, [r0, #0]
    2ad0:	ldr	r3, [r3, #64]	; 0x40
    2ad2:	cmp	r3, r1
    2ad4:	bne.n	2ae4 <MTPStorage_SD::close()+0x174>
    2ad6:	ldr	r0, [r0, #16]
    2ad8:	cmp	r0, #0
    2ada:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2adc:	ldr	r3, [r0, #0]
    2ade:	ldr	r3, [r3, #64]	; 0x40
    2ae0:	blx	r3
    2ae2:	b.n	2a1a <MTPStorage_SD::close()+0xaa>
    2ae4:	blx	r3
    2ae6:	b.n	2a1a <MTPStorage_SD::close()+0xaa>
    2ae8:	ldr	r6, [r5, #64]	; 0x40
    2aea:	ldr	r1, [pc, #28]	; (2b08 <MTPStorage_SD::close()+0x198>)
    2aec:	cmp	r6, r1
    2aee:	mov	r5, r2
    2af0:	beq.n	2a1a <MTPStorage_SD::close()+0xaa>
    2af2:	mov	r0, r3
    2af4:	blx	r6
    2af6:	b.n	2a1a <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2af8:	mov	r0, r3
    2afa:	blx	r2
    2afc:	b.n	2a44 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    2afe:	movs	r5, #0
    2b00:	b.n	2af2 <MTPStorage_SD::close()+0x182>
    2b02:	nop
    2b04:	.word	0x000004f1
    2b08:	.word	0x00000501

00002b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2b0c:	push	{r4, r5, r6, lr}
    2b0e:	mov	r6, r0
    2b10:	sub	sp, #272	; 0x110
    2b12:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    2b14:	mov	r0, sp
    2b16:	mov	r2, r1
    2b18:	mov	r1, r6

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2b1a:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    2b1c:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    2b20:	ldr	r1, [sp, #0]
    2b22:	adds	r3, r1, #1
    2b24:	beq.n	2b5c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    2b26:	mov	r3, r5
    2b28:	mov	r2, r4
    2b2a:	mov	r0, r6
    2b2c:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    2b30:	mov	r0, r4
    2b32:	bl	11440 <strlen>
    2b36:	add	r0, r4
    2b38:	ldrb.w	r3, [r0, #-1]
    2b3c:	cmp	r3, #47	; 0x2f
    2b3e:	beq.n	2b4a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3e>
    2b40:	mov	r2, r5
    2b42:	ldr	r1, [pc, #40]	; (2b6c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    2b44:	mov	r0, r4
    2b46:	bl	1139c <strlcat>
      strlcat(out, tmp.name,len);
    2b4a:	mov	r2, r5
    2b4c:	mov	r0, r4
    2b4e:	add	r1, sp, #16
    2b50:	bl	1139c <strlcat>
      return tmp.store;
    2b54:	ldrh.w	r0, [sp, #14]
    }
  }
    2b58:	add	sp, #272	; 0x110
    2b5a:	pop	{r4, r5, r6, pc}
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2b5c:	ldr	r3, [pc, #12]	; (2b6c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    2b5e:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2b62:	ldrh	r3, [r3, #0]
    2b64:	strh	r3, [r4, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
      strlcat(out, tmp.name,len);
      return tmp.store;
    }
  }
    2b66:	add	sp, #272	; 0x110
    2b68:	pop	{r4, r5, r6, pc}
    2b6a:	nop
    2b6c:	.word	0x00014bfc

00002b70 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2b70:	push	{r4, r5, r6, r7, lr}
    2b72:	subw	sp, sp, #1044	; 0x414
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2b76:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2b7a:	mov	r7, r2
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2b7c:	mov	r2, sp
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2b7e:	mov	r5, r1
    2b80:	mov	r4, r0
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2b82:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2b86:	mov	r6, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2b88:	mov	r0, sp
    2b8a:	bl	11440 <strlen>
    2b8e:	mov	r1, r0
    2b90:	mov	r0, sp
    2b92:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2b96:	ldr	r0, [pc, #132]	; (2c1c <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2b98:	bl	f780 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    2b9c:	mov	r2, r5
    2b9e:	mov	r1, r4
    2ba0:	add	r0, sp, #768	; 0x300
    2ba2:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    2ba6:	add	r1, sp, #784	; 0x310
    2ba8:	mov.w	r2, #256	; 0x100
    2bac:	add	r0, sp, #512	; 0x200
    2bae:	bl	113f0 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    2bb2:	mov	r1, r7
    2bb4:	mov.w	r2, #256	; 0x100
    2bb8:	add	r0, sp, #784	; 0x310
    2bba:	bl	113f0 <strlcpy>

    WriteIndexRecord(handle, p1);
    2bbe:	add	r2, sp, #768	; 0x300
    2bc0:	mov	r1, r5
    2bc2:	mov	r0, r4
    2bc4:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    2bc8:	add	r2, sp, #256	; 0x100
    2bca:	mov.w	r3, #256	; 0x100
    2bce:	mov	r1, r5
    2bd0:	mov	r0, r4
    2bd2:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2bd6:	add	r0, sp, #256	; 0x100
    2bd8:	bl	11440 <strlen>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    2bdc:	add.w	r6, r4, r6, lsl #2
    2be0:	mov	r1, r0
    2be2:	add	r0, sp, #256	; 0x100
    2be4:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2be8:	ldr	r0, [pc, #48]	; (2c1c <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2bea:	bl	f780 <Print::println()>
    2bee:	ldr	r0, [r6, #88]	; 0x58
    2bf0:	ldr	r3, [r0, #0]
    2bf2:	add	r2, sp, #256	; 0x100
    2bf4:	mov	r1, sp
    2bf6:	ldr	r3, [r3, #12]
    2bf8:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    2bfa:	mov	r6, r0
    2bfc:	cbnz	r0, 2c14 <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    2bfe:	add	r1, sp, #512	; 0x200
    2c00:	mov.w	r2, #256	; 0x100
    2c04:	add	r0, sp, #784	; 0x310
    2c06:	bl	113f0 <strlcpy>
    WriteIndexRecord(handle, p1);
    2c0a:	add	r2, sp, #768	; 0x300
    2c0c:	mov	r1, r5
    2c0e:	mov	r0, r4
    2c10:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    2c14:	mov	r0, r6
    2c16:	addw	sp, sp, #1044	; 0x414
    2c1a:	pop	{r4, r5, r6, r7, pc}
    2c1c:	.word	0x1fff0c58

00002c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    2c20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    2c24:	ldr.w	r3, [r0, #240]	; 0xf0
    2c28:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    2c2a:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    2c2c:	beq.w	3024 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    2c30:	mov	r6, r2
    char filename[MAX_FILENAME_LEN];
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    2c32:	mov.w	r3, #256	; 0x100
    2c36:	add	r2, sp, #32
    2c38:	mov	r4, r0
    2c3a:	mov	r5, r1
    2c3c:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2c40:	mov	r7, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2c42:	ldr.w	r0, [r4, #204]	; 0xcc
    2c46:	cmp	r0, #0
    2c48:	beq.w	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c4c:	ldr	r2, [r0, #0]
    2c4e:	ldr	r3, [pc, #348]	; (2dac <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    2c50:	ldr	r2, [r2, #68]	; 0x44
    2c52:	cmp	r2, r3
    2c54:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c58:	ldr	r0, [r0, #16]
    2c5a:	cmp	r0, #0
    2c5c:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c5e:	ldr	r2, [r0, #0]
    2c60:	ldr	r2, [r2, #68]	; 0x44
    2c62:	cmp	r2, r3
    2c64:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c68:	ldr	r0, [r0, #16]
    2c6a:	cmp	r0, #0
    2c6c:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c6e:	ldr	r2, [r0, #0]
    2c70:	ldr	r2, [r2, #68]	; 0x44
    2c72:	cmp	r2, r3
    2c74:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c78:	ldr	r0, [r0, #16]
    2c7a:	cmp	r0, #0
    2c7c:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c7e:	ldr	r2, [r0, #0]
    2c80:	ldr	r2, [r2, #68]	; 0x44
    2c82:	cmp	r2, r3
    2c84:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c88:	ldr	r0, [r0, #16]
    2c8a:	cmp	r0, #0
    2c8c:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c8e:	ldr	r2, [r0, #0]
    2c90:	ldr	r2, [r2, #68]	; 0x44
    2c92:	cmp	r2, r3
    2c94:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c98:	ldr	r0, [r0, #16]
    2c9a:	cmp	r0, #0
    2c9c:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c9e:	ldr	r2, [r0, #0]
    2ca0:	ldr	r2, [r2, #68]	; 0x44
    2ca2:	cmp	r2, r3
    2ca4:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2ca8:	ldr	r0, [r0, #16]
    2caa:	cmp	r0, #0
    2cac:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cae:	ldr	r2, [r0, #0]
    2cb0:	ldr	r2, [r2, #68]	; 0x44
    2cb2:	cmp	r2, r3
    2cb4:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cb8:	ldr	r0, [r0, #16]
    2cba:	cmp	r0, #0
    2cbc:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cbe:	ldr	r2, [r0, #0]
    2cc0:	ldr	r2, [r2, #68]	; 0x44
    2cc2:	cmp	r2, r3
    2cc4:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cc8:	ldr	r0, [r0, #16]
    2cca:	cmp	r0, #0
    2ccc:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cce:	ldr	r2, [r0, #0]
    2cd0:	ldr	r2, [r2, #68]	; 0x44
    2cd2:	cmp	r2, r3
    2cd4:	bne.w	3034 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cd8:	ldr	r0, [r0, #16]
    2cda:	cmp	r0, #0
    2cdc:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cde:	ldr	r3, [r0, #0]
    2ce0:	ldr	r3, [r3, #68]	; 0x44
    2ce2:	blx	r3

    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    2ce4:	cmp	r0, #0
    2ce6:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2ce8:	ldr.w	r0, [r4, #204]	; 0xcc
    2cec:	cmp	r0, #0
    2cee:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cf0:	ldr	r2, [r0, #0]
    2cf2:	ldr	r3, [pc, #188]	; (2db0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    2cf4:	ldr	r2, [r2, #64]	; 0x40
    2cf6:	cmp	r2, r3
    2cf8:	bne.w	3038 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2cfc:	ldr	r0, [r0, #16]
    2cfe:	cmp	r0, #0
    2d00:	beq.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d02:	ldr	r2, [r0, #0]
    2d04:	ldr	r2, [r2, #64]	; 0x40
    2d06:	cmp	r2, r3
    2d08:	bne.w	3038 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d0c:	ldr	r0, [r0, #16]
    2d0e:	cbz	r0, 2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d10:	ldr	r2, [r0, #0]
    2d12:	ldr	r2, [r2, #64]	; 0x40
    2d14:	cmp	r2, r3
    2d16:	bne.w	3038 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d1a:	ldr	r0, [r0, #16]
    2d1c:	cbz	r0, 2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d1e:	ldr	r2, [r0, #0]
    2d20:	ldr	r2, [r2, #64]	; 0x40
    2d22:	cmp	r2, r3
    2d24:	bne.w	3038 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d28:	ldr	r0, [r0, #16]
    2d2a:	cbz	r0, 2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d2c:	ldr	r2, [r0, #0]
    2d2e:	ldr	r2, [r2, #64]	; 0x40
    2d30:	cmp	r2, r3
    2d32:	bne.w	3038 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d36:	ldr	r0, [r0, #16]
    2d38:	cbz	r0, 2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d3a:	ldr	r2, [r0, #0]
    2d3c:	ldr	r2, [r2, #64]	; 0x40
    2d3e:	cmp	r2, r3
    2d40:	bne.w	3038 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d44:	ldr	r0, [r0, #16]
    2d46:	cbz	r0, 2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d48:	ldr	r2, [r0, #0]
    2d4a:	ldr	r2, [r2, #64]	; 0x40
    2d4c:	cmp	r2, r3
    2d4e:	bne.w	3038 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d52:	ldr	r0, [r0, #16]
    2d54:	cbz	r0, 2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d56:	ldr	r3, [r0, #0]
    2d58:	ldr	r3, [r3, #64]	; 0x40
    2d5a:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    2d5c:	add.w	r7, r4, r7, lsl #2
    2d60:	add	r2, sp, #32
    2d62:	ldr	r1, [r7, #88]	; 0x58
    2d64:	ldr	r3, [r1, #0]
    2d66:	add	r0, sp, #12
    2d68:	ldr	r7, [r3, #0]
    2d6a:	uxtb	r3, r6
    2d6c:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d6e:	ldr.w	r2, [r4, #204]	; 0xcc
    2d72:	cbz	r2, 2d7c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2d74:	ldr	r3, [r2, #16]
    2d76:	subs	r3, #1
    2d78:	str	r3, [r2, #16]
    2d7a:	cbz	r3, 2db8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2d7c:	ldr	r2, [sp, #28]
    2d7e:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    2d82:	cbz	r2, 2d9e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2d84:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    2d86:	ldr	r3, [pc, #44]	; (2db4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
    2d88:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2d8a:	adds	r1, #1
    2d8c:	str	r1, [r2, #16]
    2d8e:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d90:	cbz	r1, 2d9e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2d92:	ldr	r2, [r1, #16]
    2d94:	subs	r2, #1
    2d96:	str	r2, [r1, #16]
    2d98:	cmp	r2, #0
    2d9a:	beq.w	2ef4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    2d9e:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    2da2:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    2da6:	add	sp, #292	; 0x124
    2da8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dac:	.word	0x0000050d
    2db0:	.word	0x00000501
    2db4:	.word	0x0001491c
    2db8:	ldr.w	r7, [r4, #204]	; 0xcc
    2dbc:	cmp	r7, #0
    2dbe:	beq.n	2d7c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2dc0:	ldr	r3, [r7, #0]
    2dc2:	ldr	r1, [pc, #680]	; (306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2dc4:	ldr	r3, [r3, #32]
    2dc6:	cmp	r3, r1
    2dc8:	bne.w	303c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
    2dcc:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2dce:	ldr	r3, [pc, #672]	; (3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
    2dd0:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2dd2:	cmp	r0, #0
    2dd4:	beq.w	2eea <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2dd8:	ldr	r2, [r0, #16]
    2dda:	subs	r2, #1
    2ddc:	str	r2, [r0, #16]
    2dde:	cmp	r2, #0
    2de0:	bne.w	2eea <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2de4:	ldr.w	r8, [r7, #16]
    2de8:	cmp.w	r8, #0
    2dec:	beq.n	2eea <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2dee:	ldr.w	r2, [r8]
    2df2:	ldr	r2, [r2, #32]
    2df4:	cmp	r2, r1
    2df6:	bne.w	305a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    2dfa:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2dfe:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e02:	cmp	r0, #0
    2e04:	beq.n	2ee2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2e06:	ldr	r2, [r0, #16]
    2e08:	subs	r2, #1
    2e0a:	str	r2, [r0, #16]
    2e0c:	cmp	r2, #0
    2e0e:	bne.n	2ee2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2e10:	ldr.w	r9, [r8, #16]
    2e14:	cmp.w	r9, #0
    2e18:	beq.n	2ee2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2e1a:	ldr.w	r2, [r9]
    2e1e:	ldr	r2, [r2, #32]
    2e20:	cmp	r2, r1
    2e22:	bne.w	304e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    2e26:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e2a:	str.w	r3, [r9]
    2e2e:	ldr.w	lr, [pc, #576]	; 3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e32:	cmp	r0, #0
    2e34:	beq.n	2eda <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e36:	ldr	r2, [r0, #16]
    2e38:	subs	r2, #1
    2e3a:	str	r2, [r0, #16]
    2e3c:	cmp	r2, #0
    2e3e:	bne.n	2eda <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e40:	ldr.w	sl, [r9, #16]
    2e44:	cmp.w	sl, #0
    2e48:	beq.n	2eda <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e4a:	ldr.w	r2, [sl]
    2e4e:	ldr	r2, [r2, #32]
    2e50:	cmp	r2, r1
    2e52:	bne.w	3066 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    2e56:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e5a:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e5e:	cmp	r0, #0
    2e60:	beq.n	2ed2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2e62:	ldr	r2, [r0, #16]
    2e64:	subs	r2, #1
    2e66:	str	r2, [r0, #16]
    2e68:	cmp	r2, #0
    2e6a:	bne.n	2ed2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2e6c:	ldr.w	fp, [sl, #16]
    2e70:	cmp.w	fp, #0
    2e74:	beq.n	2ed2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2e76:	ldr.w	r2, [fp]
    2e7a:	ldr	r2, [r2, #32]
    2e7c:	cmp	r2, r1
    2e7e:	bne.w	307a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    2e82:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e86:	str.w	r3, [fp]
    2e8a:	ldr	r0, [pc, #484]	; (3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e8c:	cbz	r2, 2eca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2e8e:	ldr	r3, [r2, #16]
    2e90:	subs	r3, #1
    2e92:	str	r3, [r2, #16]
    2e94:	cbnz	r3, 2eca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2e96:	ldr.w	r2, [fp, #16]
    2e9a:	cbz	r2, 2eca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2e9c:	ldr	r3, [r2, #0]
    2e9e:	ldr	r3, [r3, #32]
    2ea0:	cmp	r3, r1
    2ea2:	bne.w	3086 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    2ea6:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ea8:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2eaa:	cbz	r1, 2ec2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2eac:	ldr	r3, [r1, #16]
    2eae:	subs	r3, #1
    2eb0:	str	r3, [r1, #16]
    2eb2:	cbnz	r3, 2ec2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2eb4:	ldr	r0, [r2, #16]
    2eb6:	cbz	r0, 2ec2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2eb8:	ldr	r3, [r0, #0]
    2eba:	str	r2, [sp, #4]
    2ebc:	ldr	r3, [r3, #32]
    2ebe:	blx	r3
    2ec0:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2ec2:	mov	r0, r2
    2ec4:	movs	r1, #20
    2ec6:	bl	f924 <operator delete(void*, unsigned int)>
    2eca:	mov	r0, fp
    2ecc:	movs	r1, #20
    2ece:	bl	f924 <operator delete(void*, unsigned int)>
    2ed2:	mov	r0, sl
    2ed4:	movs	r1, #20
    2ed6:	bl	f924 <operator delete(void*, unsigned int)>
    2eda:	mov	r0, r9
    2edc:	movs	r1, #20
    2ede:	bl	f924 <operator delete(void*, unsigned int)>
    2ee2:	mov	r0, r8
    2ee4:	movs	r1, #20
    2ee6:	bl	f924 <operator delete(void*, unsigned int)>
    2eea:	mov	r0, r7
    2eec:	movs	r1, #20
    2eee:	bl	f924 <operator delete(void*, unsigned int)>
    2ef2:	b.n	2d7c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ef4:	ldr	r7, [sp, #28]
    2ef6:	cmp	r7, #0
    2ef8:	beq.w	2d9e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2efc:	ldr	r2, [r7, #0]
    2efe:	ldr	r1, [pc, #364]	; (306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2f00:	ldr	r2, [r2, #32]
    2f02:	cmp	r2, r1
    2f04:	bne.w	3042 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    2f08:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f0a:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f0c:	cmp	r0, #0
    2f0e:	beq.w	301a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2f12:	ldr	r2, [r0, #16]
    2f14:	subs	r2, #1
    2f16:	str	r2, [r0, #16]
    2f18:	cmp	r2, #0
    2f1a:	bne.n	301a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2f1c:	ldr.w	r8, [r7, #16]
    2f20:	cmp.w	r8, #0
    2f24:	beq.n	301a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2f26:	ldr.w	r2, [r8]
    2f2a:	ldr	r2, [r2, #32]
    2f2c:	cmp	r2, r1
    2f2e:	bne.w	3054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    2f32:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f36:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f3a:	cmp	r0, #0
    2f3c:	beq.n	3012 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f3e:	ldr	r2, [r0, #16]
    2f40:	subs	r2, #1
    2f42:	str	r2, [r0, #16]
    2f44:	cmp	r2, #0
    2f46:	bne.n	3012 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f48:	ldr.w	r9, [r8, #16]
    2f4c:	cmp.w	r9, #0
    2f50:	beq.n	3012 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f52:	ldr.w	r2, [r9]
    2f56:	ldr	r2, [r2, #32]
    2f58:	cmp	r2, r1
    2f5a:	bne.n	3048 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    2f5c:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f60:	str.w	r3, [r9]
    2f64:	ldr.w	lr, [pc, #264]	; 3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f68:	cmp	r0, #0
    2f6a:	beq.n	300a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2f6c:	ldr	r2, [r0, #16]
    2f6e:	subs	r2, #1
    2f70:	str	r2, [r0, #16]
    2f72:	cmp	r2, #0
    2f74:	bne.n	300a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2f76:	ldr.w	sl, [r9, #16]
    2f7a:	cmp.w	sl, #0
    2f7e:	beq.n	300a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2f80:	ldr.w	r2, [sl]
    2f84:	ldr	r2, [r2, #32]
    2f86:	cmp	r2, r1
    2f88:	bne.n	3060 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    2f8a:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f8e:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f92:	cmp	r0, #0
    2f94:	beq.n	3002 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2f96:	ldr	r2, [r0, #16]
    2f98:	subs	r2, #1
    2f9a:	str	r2, [r0, #16]
    2f9c:	cmp	r2, #0
    2f9e:	bne.n	3002 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2fa0:	ldr.w	fp, [sl, #16]
    2fa4:	cmp.w	fp, #0
    2fa8:	beq.n	3002 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2faa:	ldr.w	r2, [fp]
    2fae:	ldr	r2, [r2, #32]
    2fb0:	cmp	r2, r1
    2fb2:	bne.n	3074 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    2fb4:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2fb8:	str.w	r3, [fp]
    2fbc:	ldr	r0, [pc, #176]	; (3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fbe:	cbz	r2, 2ffa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2fc0:	ldr	r3, [r2, #16]
    2fc2:	subs	r3, #1
    2fc4:	str	r3, [r2, #16]
    2fc6:	cbnz	r3, 2ffa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2fc8:	ldr.w	r2, [fp, #16]
    2fcc:	cbz	r2, 2ffa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2fce:	ldr	r3, [r2, #0]
    2fd0:	ldr	r3, [r3, #32]
    2fd2:	cmp	r3, r1
    2fd4:	bne.n	3080 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    2fd6:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2fd8:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fda:	cbz	r1, 2ff2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2fdc:	ldr	r3, [r1, #16]
    2fde:	subs	r3, #1
    2fe0:	str	r3, [r1, #16]
    2fe2:	cbnz	r3, 2ff2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2fe4:	ldr	r0, [r2, #16]
    2fe6:	cbz	r0, 2ff2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2fe8:	ldr	r3, [r0, #0]
    2fea:	str	r2, [sp, #4]
    2fec:	ldr	r3, [r3, #32]
    2fee:	blx	r3
    2ff0:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2ff2:	mov	r0, r2
    2ff4:	movs	r1, #20
    2ff6:	bl	f924 <operator delete(void*, unsigned int)>
    2ffa:	mov	r0, fp
    2ffc:	movs	r1, #20
    2ffe:	bl	f924 <operator delete(void*, unsigned int)>
    3002:	mov	r0, sl
    3004:	movs	r1, #20
    3006:	bl	f924 <operator delete(void*, unsigned int)>
    300a:	mov	r0, r9
    300c:	movs	r1, #20
    300e:	bl	f924 <operator delete(void*, unsigned int)>
    3012:	mov	r0, r8
    3014:	movs	r1, #20
    3016:	bl	f924 <operator delete(void*, unsigned int)>
    301a:	mov	r0, r7
    301c:	movs	r1, #20
    301e:	bl	f924 <operator delete(void*, unsigned int)>
    3022:	b.n	2d9e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    3024:	ldr.w	r3, [r0, #236]	; 0xec
    3028:	cmp	r3, r2
    302a:	bne.w	2c30 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    302e:	add	sp, #292	; 0x124
    3030:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3034:	blx	r2
    3036:	b.n	2ce4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3038:	blx	r2
    303a:	b.n	2d5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    303c:	mov	r0, r7
    303e:	blx	r3
    3040:	b.n	2d7c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    3042:	mov	r0, r7
    3044:	blx	r2
    3046:	b.n	2d9e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    3048:	mov	r0, r9
    304a:	blx	r2
    304c:	b.n	3012 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    304e:	mov	r0, r9
    3050:	blx	r2
    3052:	b.n	2ee2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    3054:	mov	r0, r8
    3056:	blx	r2
    3058:	b.n	301a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    305a:	mov	r0, r8
    305c:	blx	r2
    305e:	b.n	2eea <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    3060:	mov	r0, sl
    3062:	blx	r2
    3064:	b.n	300a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    3066:	mov	r0, sl
    3068:	blx	r2
    306a:	b.n	2eda <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    306c:	.word	0x00000f31
    3070:	.word	0x0001491c
    3074:	mov	r0, fp
    3076:	blx	r2
    3078:	b.n	3002 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    307a:	mov	r0, fp
    307c:	blx	r2
    307e:	b.n	2ed2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    3080:	mov	r0, r2
    3082:	blx	r3
    3084:	b.n	2ffa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    3086:	mov	r0, r2
    3088:	blx	r3
    308a:	b.n	2eca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

0000308c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    308c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3090:	mov	r5, r0
    3092:	sub	sp, #8
    3094:	mov	r7, r2
    OpenFileByIndex(handle);
    3096:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    3098:	mov	r8, r3
    309a:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    309e:	bl	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    30a2:	ldr.w	r4, [r5, #204]	; 0xcc
    30a6:	cmp	r4, #0
    30a8:	beq.n	3180 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    30aa:	ldr	r0, [r4, #0]
    30ac:	ldr	r2, [pc, #308]	; (31e4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    30ae:	ldr	r6, [r0, #52]	; 0x34
    30b0:	cmp	r6, r2
    30b2:	mov.w	r3, #0
    30b6:	bne.n	31b0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x124>
    30b8:	ldr	r1, [r4, #16]
    30ba:	cmp	r1, #0
    30bc:	beq.n	3178 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xec>
    30be:	ldr	r2, [r1, #0]
    30c0:	ldr.w	sl, [r2, #52]	; 0x34
    30c4:	cmp	sl, r6
    30c6:	bne.n	31ba <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12e>
    30c8:	ldr.w	lr, [r1, #16]
    30cc:	cmp.w	lr, #0
    30d0:	beq.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    30d2:	ldr.w	r2, [lr]
    30d6:	ldr	r6, [r2, #52]	; 0x34
    30d8:	cmp	r6, sl
    30da:	bne.n	31c4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x138>
    30dc:	ldr.w	lr, [lr, #16]
    30e0:	cmp.w	lr, #0
    30e4:	beq.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    30e6:	ldr.w	r2, [lr]
    30ea:	ldr.w	sl, [r2, #52]	; 0x34
    30ee:	cmp	sl, r6
    30f0:	bne.n	31ce <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x142>
    30f2:	ldr.w	lr, [lr, #16]
    30f6:	cmp.w	lr, #0
    30fa:	beq.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    30fc:	ldr.w	r3, [lr]
    3100:	ldr	r6, [r3, #52]	; 0x34
    3102:	cmp	r6, sl
    3104:	bne.n	31d8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14c>
    3106:	ldr.w	r6, [lr, #16]
    310a:	cmp	r6, #0
    310c:	beq.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    310e:	ldr	r1, [r6, #0]
    3110:	movs	r3, #0
    3112:	str	r3, [sp, #0]
    3114:	mov	r2, r7
    3116:	mov	r0, r6
    3118:	ldr	r1, [r1, #52]	; 0x34
    311a:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    311c:	ldr.w	r4, [r5, #204]	; 0xcc
    3120:	cmp	r4, #0
    3122:	beq.n	3180 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3124:	ldr	r2, [r4, #0]
    3126:	ldr	r3, [pc, #192]	; (31e8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    3128:	ldr	r5, [r2, #40]	; 0x28
    312a:	cmp	r5, r3
    312c:	bne.n	3192 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    312e:	ldr	r0, [r4, #16]
    3130:	cbz	r0, 3180 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3132:	ldr	r2, [r0, #0]
    3134:	ldr	r4, [r2, #40]	; 0x28
    3136:	cmp	r4, r3
    3138:	bne.n	31a2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    313a:	ldr	r0, [r0, #16]
    313c:	cbz	r0, 3180 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    313e:	ldr	r2, [r0, #0]
    3140:	ldr	r4, [r2, #40]	; 0x28
    3142:	cmp	r4, r3
    3144:	bne.n	31a2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3146:	ldr	r0, [r0, #16]
    3148:	cbz	r0, 3180 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    314a:	ldr	r2, [r0, #0]
    314c:	ldr	r4, [r2, #40]	; 0x28
    314e:	cmp	r4, r3
    3150:	bne.n	31a2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3152:	ldr	r0, [r0, #16]
    3154:	cbz	r0, 3180 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3156:	ldr	r2, [r0, #0]
    3158:	ldr	r4, [r2, #40]	; 0x28
    315a:	cmp	r4, r3
    315c:	bne.n	31a2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    315e:	ldr	r0, [r0, #16]
    3160:	cbz	r0, 3180 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3162:	ldr	r2, [r0, #0]
    3164:	ldr	r4, [r2, #40]	; 0x28
    3166:	cmp	r4, r3
    3168:	bne.n	31a2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    316a:	ldr	r0, [r0, #16]
    316c:	cbz	r0, 3180 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    316e:	ldr	r3, [r0, #0]
    3170:	mov	r2, r9
    3172:	mov	r1, r8
    3174:	ldr	r3, [r3, #40]	; 0x28
    3176:	b.n	319a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10e>
    3178:	ldr	r5, [r0, #40]	; 0x28
    317a:	ldr	r3, [pc, #108]	; (31e8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    317c:	cmp	r5, r3
    317e:	bne.n	3192 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    3180:	add	sp, #8
    3182:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3186:	ldr	r5, [r0, #40]	; 0x28
    3188:	ldr	r3, [pc, #92]	; (31e8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    318a:	cmp	r5, r3
    318c:	bne.n	3192 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    318e:	mov	r0, r1
    3190:	b.n	3132 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa6>
    3192:	mov	r2, r9
    3194:	mov	r1, r8
    3196:	mov	r0, r4
    3198:	mov	r3, r5
    319a:	add	sp, #8
    319c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31a0:	bx	r3
    31a2:	mov	r2, r9
    31a4:	mov	r1, r8
    31a6:	mov	r3, r4
    31a8:	add	sp, #8
    31aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31ae:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    31b0:	str	r3, [sp, #0]
    31b2:	mov	r2, r7
    31b4:	mov	r0, r4
    31b6:	blx	r6
    31b8:	b.n	311c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31ba:	str	r3, [sp, #0]
    31bc:	mov	r2, r7
    31be:	mov	r0, r1
    31c0:	blx	sl
    31c2:	b.n	311c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31c4:	str	r3, [sp, #0]
    31c6:	mov	r2, r7
    31c8:	mov	r0, lr
    31ca:	blx	r6
    31cc:	b.n	311c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31ce:	str	r3, [sp, #0]
    31d0:	mov	r2, r7
    31d2:	mov	r0, lr
    31d4:	blx	sl
    31d6:	b.n	311c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31d8:	movs	r3, #0
    31da:	mov	r2, r7
    31dc:	mov	r0, lr
    31de:	str	r3, [sp, #0]
    31e0:	blx	r6
    31e2:	b.n	311c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31e4:	.word	0x000004c9
    31e8:	.word	0x0000047d

000031ec <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    31ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    31f0:	cmp.w	r2, #4294967295
    31f4:	ite	ne
    31f6:	movne	r6, r2
    31f8:	moveq	r6, r1
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    31fa:	sub.w	sp, sp, #800	; 0x320
    31fe:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    3200:	mov	r2, r6
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    3202:	mov	r7, r1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    3204:	mov	r1, r0
    3206:	add	r0, sp, #256	; 0x100
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    3208:	mov	r8, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    320a:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    320e:	ldr	r1, [sp, #824]	; 0x338
    3210:	mov.w	r2, #256	; 0x100
    3214:	add	r0, sp, #544	; 0x220
    3216:	bl	113f0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    321a:	ldr.w	r5, [r4, #244]	; 0xf4
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    321e:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    3222:	ldr	r2, [sp, #260]	; 0x104
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    3224:	strh.w	r3, [sp, #542]	; 0x21e
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3228:	adds	r1, r5, #1
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    322a:	movs	r3, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    322c:	str.w	r1, [r4, #244]	; 0xf4
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    3230:	str	r3, [sp, #532]	; 0x214
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3232:	mov	r1, r5
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    3234:	movs	r3, #1
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    3236:	str	r2, [sp, #536]	; 0x218
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3238:	mov	r0, r4
    323a:	add	r2, sp, #528	; 0x210
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    323c:	str	r6, [sp, #528]	; 0x210
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    323e:	strb.w	r8, [sp, #540]	; 0x21c
    // New folder is empty, scanned = true.
    r.scanned = 1;
    3242:	strb.w	r3, [sp, #541]	; 0x21d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3246:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    324a:	mov	r1, r6
    324c:	add	r2, sp, #256	; 0x100
    324e:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    3250:	str	r5, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    3252:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    3256:	cmp.w	r8, #0
    325a:	bne.n	3270 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x84>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    325c:	mov	r0, r4
    325e:	movs	r2, #2
    3260:	mov	r1, r5
    3262:	bl	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    3266:	mov	r0, r5
    3268:	add.w	sp, sp, #800	; 0x320
    326c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    3270:	mov	r0, r4
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    3272:	add.w	r4, r4, r7, lsl #2
    3276:	mov	r2, sp
    3278:	mov	r1, r5
    327a:	mov.w	r3, #256	; 0x100
    327e:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    3282:	ldr	r0, [r4, #88]	; 0x58
    3284:	ldr	r3, [r0, #0]
    3286:	mov	r1, sp
    3288:	ldr	r3, [r3, #8]
    328a:	blx	r3
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    328c:	mov	r0, r5
    328e:	add.w	sp, sp, #800	; 0x320
    3292:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3296:	nop

00003298 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    3298:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    329c:	cmp.w	r2, #4294967295
    32a0:	ite	ne
    32a2:	movne	r6, r2
    32a4:	moveq	r6, r1
    32a6:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    32aa:	mov	r1, r0
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    32ac:	mov	r4, r0
    
    Record record = ReadIndexRecord(i);
    32ae:	mov	r2, r6
    32b0:	add	r0, sp, #16
    32b2:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    32b6:	ldrb.w	r3, [sp, #28]
    32ba:	cbz	r3, 32c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32bc:	ldrb.w	r2, [sp, #29]
    32c0:	cbz	r2, 32ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    32c2:	add.w	sp, sp, #564	; 0x234
    32c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    32ca:	mov	r0, r4
    32cc:	mov	r1, r6
    32ce:	bl	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    32d2:	ldr.w	r0, [r4, #204]	; 0xcc
    32d6:	cmp	r0, #0
    32d8:	beq.n	32c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32da:	ldr	r3, [r0, #0]
    32dc:	ldr.w	r8, [pc, #892]	; 365c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c4>
    32e0:	ldr	r3, [r3, #68]	; 0x44
    32e2:	cmp	r3, r8
    32e4:	bne.n	33a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    32e6:	ldr	r0, [r0, #16]
    32e8:	cmp	r0, #0
    32ea:	beq.n	32c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32ec:	ldr	r3, [r0, #0]
    32ee:	ldr	r3, [r3, #68]	; 0x44
    32f0:	cmp	r3, r8
    32f2:	bne.n	33a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    32f4:	ldr	r0, [r0, #16]
    32f6:	cmp	r0, #0
    32f8:	beq.n	32c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32fa:	ldr	r3, [r0, #0]
    32fc:	ldr	r3, [r3, #68]	; 0x44
    32fe:	cmp	r3, r8
    3300:	bne.n	33a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3302:	ldr	r0, [r0, #16]
    3304:	cmp	r0, #0
    3306:	beq.n	32c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3308:	ldr	r3, [r0, #0]
    330a:	ldr	r3, [r3, #68]	; 0x44
    330c:	cmp	r3, r8
    330e:	bne.n	33a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3310:	ldr	r0, [r0, #16]
    3312:	cmp	r0, #0
    3314:	beq.n	32c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3316:	ldr	r3, [r0, #0]
    3318:	ldr	r3, [r3, #68]	; 0x44
    331a:	cmp	r3, r8
    331c:	bne.n	33a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    331e:	ldr	r0, [r0, #16]
    3320:	cmp	r0, #0
    3322:	beq.n	32c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3324:	ldr	r3, [r0, #0]
    3326:	ldr	r3, [r3, #68]	; 0x44
    3328:	blx	r3
      if (!sd_isOpen(file_)) return;
    332a:	cmp	r0, #0
    332c:	beq.n	32c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    332e:	ldr.w	r9, [pc, #804]	; 3654 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>
    3332:	ldr.w	fp, [pc, #812]	; 3660 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3336:	movs	r5, #0
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3338:	ldr.w	r1, [r4, #204]	; 0xcc
    333c:	cmp	r1, #0
    333e:	beq.n	33a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3340:	ldr	r3, [r1, #0]
    3342:	ldr	r3, [r3, #80]	; 0x50
    3344:	cmp	r3, fp
    3346:	bne.w	385a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    334a:	ldr	r1, [r1, #16]
    334c:	cbz	r1, 33a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    334e:	ldr	r3, [r1, #0]
    3350:	ldr	r3, [r3, #80]	; 0x50
    3352:	cmp	r3, fp
    3354:	bne.w	385a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3358:	ldr	r1, [r1, #16]
    335a:	cbz	r1, 33a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    335c:	ldr	r3, [r1, #0]
    335e:	ldr	r3, [r3, #80]	; 0x50
    3360:	cmp	r3, fp
    3362:	bne.w	385a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3366:	ldr	r1, [r1, #16]
    3368:	cbz	r1, 33a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    336a:	ldr	r3, [r1, #0]
    336c:	ldr	r3, [r3, #80]	; 0x50
    336e:	cmp	r3, fp
    3370:	bne.w	385a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3374:	ldr	r1, [r1, #16]
    3376:	cbz	r1, 33a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3378:	ldr	r3, [r1, #0]
    337a:	ldr	r3, [r3, #80]	; 0x50
    337c:	cmp	r3, fp
    337e:	bne.w	385a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3382:	ldr	r1, [r1, #16]
    3384:	cbz	r1, 33a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3386:	ldr	r3, [r1, #0]
    3388:	ldr	r3, [r3, #80]	; 0x50
    338a:	cmp	r3, fp
    338c:	bne.w	385a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3390:	ldr	r1, [r1, #16]
    3392:	cbz	r1, 33a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3394:	ldr	r3, [r1, #0]
    3396:	movs	r2, #0
    3398:	ldr	r3, [r3, #80]	; 0x50
    339a:	add	r0, sp, #288	; 0x120
    339c:	blx	r3
    339e:	b.n	33ba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    33a0:	blx	r3
    33a2:	b.n	332a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x92>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    33a4:	movs	r3, #0
    33a6:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    33aa:	str.w	r9, [sp, #288]	; 0x120
    33ae:	strb.w	r3, [sp, #292]	; 0x124
    33b2:	strb.w	r3, [sp, #300]	; 0x12c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    33b6:	str	r3, [sp, #304]	; 0x130
    33b8:	str	r2, [sp, #296]	; 0x128
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    33ba:	ldr.w	r2, [r4, #224]	; 0xe0
    33be:	cmp	r2, #0
    33c0:	beq.n	3456 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    33c2:	ldr	r3, [r2, #16]
    33c4:	subs	r3, #1
    33c6:	str	r3, [r2, #16]
    33c8:	cmp	r3, #0
    33ca:	bne.n	3456 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    33cc:	ldr.w	r7, [r4, #224]	; 0xe0
    33d0:	cmp	r7, #0
    33d2:	beq.n	3456 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    33d4:	ldr	r3, [r7, #0]
    33d6:	ldr	r0, [pc, #632]	; (3650 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    33d8:	ldr	r3, [r3, #32]
    33da:	cmp	r3, r0
    33dc:	bne.w	387c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e4>
    33e0:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    33e2:	str.w	r9, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    33e6:	cbz	r2, 344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    33e8:	ldr	r3, [r2, #16]
    33ea:	subs	r3, #1
    33ec:	str	r3, [r2, #16]
    33ee:	cbnz	r3, 344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    33f0:	ldr.w	sl, [r7, #16]
    33f4:	cmp.w	sl, #0
    33f8:	beq.n	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    33fa:	ldr.w	r3, [sl]
    33fe:	ldr	r3, [r3, #32]
    3400:	cmp	r3, r0
    3402:	bne.w	3a4a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b2>
    3406:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    340a:	ldr	r3, [pc, #584]	; (3654 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    340c:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3410:	cbz	r2, 3446 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3412:	ldr	r3, [r2, #16]
    3414:	subs	r3, #1
    3416:	str	r3, [r2, #16]
    3418:	cbnz	r3, 3446 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    341a:	ldr.w	r3, [sl, #16]
    341e:	cbz	r3, 3446 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3420:	ldr	r2, [r3, #0]
    3422:	ldr	r2, [r2, #32]
    3424:	cmp	r2, r0
    3426:	bne.w	3a5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
    342a:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    342c:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3430:	cbz	r1, 343e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3432:	ldr	r2, [r1, #16]
    3434:	subs	r2, #1
    3436:	str	r2, [r1, #16]
    3438:	cmp	r2, #0
    343a:	beq.w	3894 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5fc>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    343e:	mov	r0, r3
    3440:	movs	r1, #20
    3442:	bl	f924 <operator delete(void*, unsigned int)>
    3446:	mov	r0, sl
    3448:	movs	r1, #20
    344a:	bl	f924 <operator delete(void*, unsigned int)>
    344e:	mov	r0, r7
    3450:	movs	r1, #20
    3452:	bl	f924 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3456:	ldr	r3, [sp, #304]	; 0x130
    3458:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    345c:	cmp	r3, #0
    345e:	beq.n	3502 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3460:	ldr	r2, [r3, #16]
    3462:	adds	r2, #1
    3464:	str	r2, [r3, #16]
    3466:	ldr	r2, [sp, #304]	; 0x130
		return *this;
	}
	virtual ~File() {
    3468:	str.w	r9, [sp, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    346c:	cmp	r2, #0
    346e:	beq.n	3502 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3470:	ldr	r3, [r2, #16]
    3472:	subs	r3, #1
    3474:	str	r3, [r2, #16]
    3476:	cmp	r3, #0
    3478:	bne.n	3502 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    347a:	ldr	r7, [sp, #304]	; 0x130
    347c:	cmp	r7, #0
    347e:	beq.n	3502 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3480:	ldr	r3, [r7, #0]
    3482:	ldr	r0, [pc, #460]	; (3650 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    3484:	ldr	r3, [r3, #32]
    3486:	cmp	r3, r0
    3488:	bne.w	3876 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5de>
    348c:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    348e:	ldr	r3, [pc, #452]	; (3654 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    3490:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3492:	cbz	r2, 34fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3494:	ldr	r3, [r2, #16]
    3496:	subs	r3, #1
    3498:	str	r3, [r2, #16]
    349a:	cbnz	r3, 34fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    349c:	ldr.w	sl, [r7, #16]
    34a0:	cmp.w	sl, #0
    34a4:	beq.n	34fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    34a6:	ldr.w	r3, [sl]
    34aa:	ldr	r3, [r3, #32]
    34ac:	cmp	r3, r0
    34ae:	bne.w	3a50 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b8>
    34b2:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34b6:	ldr	r3, [pc, #412]	; (3654 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    34b8:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34bc:	cbz	r2, 34f2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    34be:	ldr	r3, [r2, #16]
    34c0:	subs	r3, #1
    34c2:	str	r3, [r2, #16]
    34c4:	cbnz	r3, 34f2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    34c6:	ldr.w	r3, [sl, #16]
    34ca:	cbz	r3, 34f2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    34cc:	ldr	r2, [r3, #0]
    34ce:	ldr	r2, [r2, #32]
    34d0:	cmp	r2, r0
    34d2:	bne.w	3a56 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7be>
    34d6:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34d8:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34dc:	cbz	r1, 34ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    34de:	ldr	r2, [r1, #16]
    34e0:	subs	r2, #1
    34e2:	str	r2, [r1, #16]
    34e4:	cmp	r2, #0
    34e6:	beq.w	3972 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6da>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    34ea:	mov	r0, r3
    34ec:	movs	r1, #20
    34ee:	bl	f924 <operator delete(void*, unsigned int)>
    34f2:	mov	r0, sl
    34f4:	movs	r1, #20
    34f6:	bl	f924 <operator delete(void*, unsigned int)>
    34fa:	mov	r0, r7
    34fc:	movs	r1, #20
    34fe:	bl	f924 <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3502:	ldr.w	r0, [r4, #224]	; 0xe0
    3506:	cmp	r0, #0
    3508:	beq.w	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    350c:	ldr	r3, [r0, #0]
    350e:	ldr	r3, [r3, #68]	; 0x44
    3510:	cmp	r3, r8
    3512:	bne.w	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3516:	ldr	r0, [r0, #16]
    3518:	cmp	r0, #0
    351a:	beq.w	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    351e:	ldr	r3, [r0, #0]
    3520:	ldr	r3, [r3, #68]	; 0x44
    3522:	cmp	r3, r8
    3524:	bne.w	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3528:	ldr	r0, [r0, #16]
    352a:	cmp	r0, #0
    352c:	beq.w	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3530:	ldr	r3, [r0, #0]
    3532:	ldr	r3, [r3, #68]	; 0x44
    3534:	cmp	r3, r8
    3536:	bne.w	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    353a:	ldr	r0, [r0, #16]
    353c:	cmp	r0, #0
    353e:	beq.n	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3540:	ldr	r3, [r0, #0]
    3542:	ldr	r3, [r3, #68]	; 0x44
    3544:	cmp	r3, r8
    3546:	bne.w	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    354a:	ldr	r0, [r0, #16]
    354c:	cmp	r0, #0
    354e:	beq.n	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3550:	ldr	r3, [r0, #0]
    3552:	ldr	r3, [r3, #68]	; 0x44
    3554:	cmp	r3, r8
    3556:	bne.n	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3558:	ldr	r0, [r0, #16]
    355a:	cmp	r0, #0
    355c:	beq.n	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    355e:	ldr	r3, [r0, #0]
    3560:	ldr	r3, [r3, #68]	; 0x44
    3562:	cmp	r3, r8
    3564:	bne.n	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3566:	ldr	r0, [r0, #16]
    3568:	cmp	r0, #0
    356a:	beq.n	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    356c:	ldr	r3, [r0, #0]
    356e:	ldr	r3, [r3, #68]	; 0x44
    3570:	cmp	r3, r8
    3572:	bne.n	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3574:	ldr	r0, [r0, #16]
    3576:	cmp	r0, #0
    3578:	beq.n	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    357a:	ldr	r3, [r0, #0]
    357c:	ldr	r3, [r3, #68]	; 0x44
    357e:	cmp	r3, r8
    3580:	bne.n	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3582:	ldr	r0, [r0, #16]
    3584:	cmp	r0, #0
    3586:	beq.n	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3588:	ldr	r3, [r0, #0]
    358a:	ldr	r3, [r3, #68]	; 0x44
    358c:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    358e:	cmp	r0, #0
    3590:	beq.n	3632 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3592:	ldr.w	r3, [r4, #224]	; 0xe0

        Record r;
        r.store = record.store;
    3596:	ldrh.w	r2, [sp, #30]
        r.parent = i;
    359a:	str	r6, [sp, #288]	; 0x120
        r.sibling = sibling;
    359c:	str	r5, [sp, #296]	; 0x128
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    359e:	strh.w	r2, [sp, #302]	; 0x12e
    35a2:	cmp	r3, #0
    35a4:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35a8:	ldr	r1, [r3, #0]
    35aa:	ldr	r2, [pc, #172]	; (3658 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c0>)
    35ac:	ldr	r1, [r1, #76]	; 0x4c
    35ae:	cmp	r1, r2
    35b0:	bne.n	3664 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>
    35b2:	ldr	r0, [r3, #16]
    35b4:	cmp	r0, #0
    35b6:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35ba:	ldr	r1, [r0, #0]
    35bc:	ldr	r1, [r1, #76]	; 0x4c
    35be:	cmp	r1, r2
    35c0:	bne.n	3666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35c2:	ldr	r0, [r0, #16]
    35c4:	cmp	r0, #0
    35c6:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35ca:	ldr	r1, [r0, #0]
    35cc:	ldr	r1, [r1, #76]	; 0x4c
    35ce:	cmp	r1, r2
    35d0:	bne.n	3666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35d2:	ldr	r0, [r0, #16]
    35d4:	cmp	r0, #0
    35d6:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35da:	ldr	r1, [r0, #0]
    35dc:	ldr	r1, [r1, #76]	; 0x4c
    35de:	cmp	r1, r2
    35e0:	bne.n	3666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35e2:	ldr	r0, [r0, #16]
    35e4:	cmp	r0, #0
    35e6:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35ea:	ldr	r1, [r0, #0]
    35ec:	ldr	r1, [r1, #76]	; 0x4c
    35ee:	cmp	r1, r2
    35f0:	bne.n	3666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35f2:	ldr	r0, [r0, #16]
    35f4:	cmp	r0, #0
    35f6:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35fa:	ldr	r1, [r0, #0]
    35fc:	ldr	r1, [r1, #76]	; 0x4c
    35fe:	cmp	r1, r2
    3600:	bne.n	3666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3602:	ldr	r0, [r0, #16]
    3604:	cmp	r0, #0
    3606:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    360a:	ldr	r1, [r0, #0]
    360c:	ldr	r1, [r1, #76]	; 0x4c
    360e:	cmp	r1, r2
    3610:	bne.n	3666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3612:	ldr	r0, [r0, #16]
    3614:	cmp	r0, #0
    3616:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    361a:	ldr	r1, [r0, #0]
    361c:	ldr	r1, [r1, #76]	; 0x4c
    361e:	cmp	r1, r2
    3620:	bne.n	3666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3622:	ldr	r0, [r0, #16]
    3624:	cmp	r0, #0
    3626:	beq.w	37ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    362a:	ldr	r3, [r0, #0]
    362c:	ldr	r3, [r3, #76]	; 0x4c
    362e:	blx	r3
    3630:	b.n	3668 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3632:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    3634:	mov	r1, r6
    3636:	mov	r0, r4
    3638:	add	r2, sp, #16
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    363a:	str	r5, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    363c:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    3640:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    3644:	add.w	sp, sp, #564	; 0x234
    3648:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    364c:	blx	r3
    364e:	b.n	358e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2f6>
    3650:	.word	0x00000f31
    3654:	.word	0x0001491c
    3658:	.word	0x0000052d
    365c:	.word	0x0000050d
    3660:	.word	0x00000539
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3664:	mov	r0, r3
    3666:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3668:	strb.w	r0, [sp, #300]	; 0x12c
    366c:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3670:	cmp	r0, #0
    3672:	beq.w	37d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53c>
    3676:	movs	r0, #0
        r.scanned = false;
    3678:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    367a:	str	r0, [sp, #292]	; 0x124
        r.scanned = false;
    367c:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3680:	cmp	r3, #0
    3682:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3686:	ldr	r1, [r3, #0]
    3688:	ldr	r2, [pc, #504]	; (3884 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    368a:	ldr	r1, [r1, #72]	; 0x48
    368c:	cmp	r1, r2
    368e:	bne.w	384e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    3692:	ldr	r0, [r3, #16]
    3694:	cmp	r0, #0
    3696:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    369a:	ldr	r3, [r0, #0]
    369c:	ldr	r3, [r3, #72]	; 0x48
    369e:	cmp	r3, r2
    36a0:	bne.n	3714 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36a2:	ldr	r0, [r0, #16]
    36a4:	cmp	r0, #0
    36a6:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36aa:	ldr	r3, [r0, #0]
    36ac:	ldr	r3, [r3, #72]	; 0x48
    36ae:	cmp	r3, r2
    36b0:	bne.n	3714 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36b2:	ldr	r0, [r0, #16]
    36b4:	cmp	r0, #0
    36b6:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36ba:	ldr	r3, [r0, #0]
    36bc:	ldr	r3, [r3, #72]	; 0x48
    36be:	cmp	r3, r2
    36c0:	bne.n	3714 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36c2:	ldr	r0, [r0, #16]
    36c4:	cmp	r0, #0
    36c6:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36ca:	ldr	r3, [r0, #0]
    36cc:	ldr	r3, [r3, #72]	; 0x48
    36ce:	cmp	r3, r2
    36d0:	bne.n	3714 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36d2:	ldr	r0, [r0, #16]
    36d4:	cmp	r0, #0
    36d6:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36da:	ldr	r3, [r0, #0]
    36dc:	ldr	r3, [r3, #72]	; 0x48
    36de:	cmp	r3, r2
    36e0:	bne.n	3714 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36e2:	ldr	r0, [r0, #16]
    36e4:	cmp	r0, #0
    36e6:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36ea:	ldr	r3, [r0, #0]
    36ec:	ldr	r3, [r3, #72]	; 0x48
    36ee:	cmp	r3, r2
    36f0:	bne.n	3714 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36f2:	ldr	r0, [r0, #16]
    36f4:	cmp	r0, #0
    36f6:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36fa:	ldr	r3, [r0, #0]
    36fc:	ldr	r3, [r3, #72]	; 0x48
    36fe:	cmp	r3, r2
    3700:	bne.n	3714 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3702:	ldr	r0, [r0, #16]
    3704:	cmp	r0, #0
    3706:	beq.w	3856 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    370a:	ldr	r3, [r0, #0]
    370c:	ldr	r3, [r3, #72]	; 0x48
    370e:	blx	r3
    3710:	mov	r1, r0
    3712:	b.n	3718 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    3714:	blx	r3
    3716:	mov	r1, r0
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
    3718:	mov.w	r2, #256	; 0x100
    371c:	add	r0, sp, #304	; 0x130
    371e:	bl	113f0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3722:	ldr.w	r5, [r4, #244]	; 0xf4
    3726:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    3728:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    372a:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    372e:	mov	r1, r5
    3730:	add	r2, sp, #288	; 0x120
    3732:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3736:	ldr.w	r0, [r4, #224]	; 0xe0
    373a:	cmp	r0, #0
    373c:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3740:	ldr	r2, [r0, #0]
    3742:	ldr	r3, [pc, #324]	; (3888 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>)
    3744:	ldr	r2, [r2, #64]	; 0x40
    3746:	cmp	r2, r3
    3748:	bne.n	37ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    374a:	ldr	r0, [r0, #16]
    374c:	cmp	r0, #0
    374e:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3752:	ldr	r2, [r0, #0]
    3754:	ldr	r2, [r2, #64]	; 0x40
    3756:	cmp	r2, r3
    3758:	bne.n	37ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    375a:	ldr	r0, [r0, #16]
    375c:	cmp	r0, #0
    375e:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3762:	ldr	r2, [r0, #0]
    3764:	ldr	r2, [r2, #64]	; 0x40
    3766:	cmp	r2, r3
    3768:	bne.n	37ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    376a:	ldr	r0, [r0, #16]
    376c:	cmp	r0, #0
    376e:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3772:	ldr	r2, [r0, #0]
    3774:	ldr	r2, [r2, #64]	; 0x40
    3776:	cmp	r2, r3
    3778:	bne.n	37ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    377a:	ldr	r0, [r0, #16]
    377c:	cmp	r0, #0
    377e:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3782:	ldr	r2, [r0, #0]
    3784:	ldr	r2, [r2, #64]	; 0x40
    3786:	cmp	r2, r3
    3788:	bne.n	37ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    378a:	ldr	r0, [r0, #16]
    378c:	cmp	r0, #0
    378e:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3792:	ldr	r2, [r0, #0]
    3794:	ldr	r2, [r2, #64]	; 0x40
    3796:	cmp	r2, r3
    3798:	bne.n	37ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    379a:	ldr	r0, [r0, #16]
    379c:	cmp	r0, #0
    379e:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37a2:	ldr	r2, [r0, #0]
    37a4:	ldr	r2, [r2, #64]	; 0x40
    37a6:	cmp	r2, r3
    37a8:	bne.n	37ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    37aa:	ldr	r0, [r0, #16]
    37ac:	cmp	r0, #0
    37ae:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37b2:	ldr	r2, [r0, #0]
    37b4:	ldr	r2, [r2, #64]	; 0x40
    37b6:	cmp	r2, r3
    37b8:	bne.n	37ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    37ba:	ldr	r0, [r0, #16]
    37bc:	cmp	r0, #0
    37be:	beq.w	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37c2:	ldr	r3, [r0, #0]
    37c4:	ldr	r3, [r3, #64]	; 0x40
    37c6:	blx	r3
    37c8:	b.n	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37ca:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    37cc:	b.n	3338 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    37ce:	movs	r2, #0
    37d0:	strb.w	r2, [sp, #300]	; 0x12c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    37d4:	cmp	r3, #0
    37d6:	beq.n	386c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d4>
    37d8:	ldr	r1, [r3, #0]
    37da:	ldr	r2, [pc, #176]	; (388c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f4>)
    37dc:	ldr	r1, [r1, #60]	; 0x3c
    37de:	cmp	r1, r2
    37e0:	bne.n	3862 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    37e2:	ldr	r0, [r3, #16]
    37e4:	cbz	r0, 383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    37e6:	ldr	r1, [r0, #0]
    37e8:	ldr	r1, [r1, #60]	; 0x3c
    37ea:	cmp	r1, r2
    37ec:	bne.n	3864 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    37ee:	ldr	r0, [r0, #16]
    37f0:	cbz	r0, 383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    37f2:	ldr	r1, [r0, #0]
    37f4:	ldr	r1, [r1, #60]	; 0x3c
    37f6:	cmp	r1, r2
    37f8:	bne.n	3864 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    37fa:	ldr	r0, [r0, #16]
    37fc:	cbz	r0, 383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    37fe:	ldr	r1, [r0, #0]
    3800:	ldr	r1, [r1, #60]	; 0x3c
    3802:	cmp	r1, r2
    3804:	bne.n	3864 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3806:	ldr	r0, [r0, #16]
    3808:	cbz	r0, 383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    380a:	ldr	r1, [r0, #0]
    380c:	ldr	r1, [r1, #60]	; 0x3c
    380e:	cmp	r1, r2
    3810:	bne.n	3864 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3812:	ldr	r0, [r0, #16]
    3814:	cbz	r0, 383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3816:	ldr	r1, [r0, #0]
    3818:	ldr	r1, [r1, #60]	; 0x3c
    381a:	cmp	r1, r2
    381c:	bne.n	3864 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    381e:	ldr	r0, [r0, #16]
    3820:	cbz	r0, 383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3822:	ldr	r1, [r0, #0]
    3824:	ldr	r1, [r1, #60]	; 0x3c
    3826:	cmp	r1, r2
    3828:	bne.n	3864 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    382a:	ldr	r0, [r0, #16]
    382c:	cbz	r0, 383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    382e:	ldr	r3, [r0, #0]
    3830:	ldr	r3, [r3, #60]	; 0x3c
    3832:	blx	r3
    3834:	ldr.w	r3, [r4, #224]	; 0xe0
    3838:	b.n	3678 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    383a:	movs	r2, #0
        r.scanned = false;
    383c:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3840:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3842:	str	r2, [sp, #292]	; 0x124
    3844:	ldr	r1, [r1, #72]	; 0x48
    3846:	ldr	r2, [pc, #60]	; (3884 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    3848:	cmp	r1, r2
    384a:	beq.w	3692 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3fa>
    384e:	mov	r0, r3
    3850:	blx	r1
    3852:	mov	r1, r0
    3854:	b.n	3718 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    3856:	ldr	r1, [pc, #56]	; (3890 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3858:	b.n	3718 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    385a:	movs	r2, #0
    385c:	add	r0, sp, #288	; 0x120
    385e:	blx	r3
    3860:	b.n	33ba <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3862:	mov	r0, r3
    3864:	blx	r1
    3866:	ldr.w	r3, [r4, #224]	; 0xe0
    386a:	b.n	3678 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
    386c:	str	r3, [sp, #292]	; 0x124
        r.scanned = false;
    386e:	strb.w	r3, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3872:	ldr	r1, [pc, #28]	; (3890 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3874:	b.n	3718 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3876:	mov	r0, r7
    3878:	blx	r3
    387a:	b.n	3502 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    387c:	mov	r0, r7
    387e:	blx	r3
    3880:	b.n	3456 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3882:	nop
    3884:	.word	0x00000519
    3888:	.word	0x00000501
    388c:	.word	0x000004f1
    3890:	.word	0x00014ad0
    3894:	ldr	r2, [r3, #16]
    3896:	cmp	r2, #0
    3898:	beq.w	343e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    389c:	ldr	r1, [r2, #0]
    389e:	ldr	r1, [r1, #32]
    38a0:	cmp	r1, r0
    38a2:	bne.w	3a6c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d4>
    38a6:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38aa:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38ae:	cmp.w	lr, #0
    38b2:	beq.n	3964 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    38b4:	ldr.w	r1, [lr, #16]
    38b8:	subs	r1, #1
    38ba:	str.w	r1, [lr, #16]
    38be:	cmp	r1, #0
    38c0:	bne.n	3964 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    38c2:	ldr	r1, [r2, #16]
    38c4:	str	r1, [sp, #0]
    38c6:	cmp	r1, #0
    38c8:	beq.n	3964 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    38ca:	ldr	r1, [sp, #0]
    38cc:	ldr	r1, [r1, #0]
    38ce:	ldr	r1, [r1, #32]
    38d0:	cmp	r1, r0
    38d2:	bne.w	3a84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ec>
    38d6:	ldr	r1, [sp, #0]
    38d8:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38dc:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38e0:	cmp.w	lr, #0
    38e4:	beq.n	3954 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    38e6:	ldr.w	r1, [lr, #16]
    38ea:	subs	r1, #1
    38ec:	str.w	r1, [lr, #16]
    38f0:	cbnz	r1, 3954 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    38f2:	ldr	r1, [sp, #0]
    38f4:	ldr.w	ip, [r1, #16]
    38f8:	cmp.w	ip, #0
    38fc:	beq.n	3954 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    38fe:	ldr.w	r1, [ip]
    3902:	ldr	r1, [r1, #32]
    3904:	cmp	r1, r0
    3906:	bne.w	3aa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x808>
    390a:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    390e:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3912:	cbz	r0, 3944 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    3914:	ldr	r1, [r0, #16]
    3916:	add.w	lr, r1, #4294967295
    391a:	str.w	lr, [r0, #16]
    391e:	cmp.w	lr, #0
    3922:	bne.n	3944 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    3924:	ldr.w	r0, [ip, #16]
    3928:	cbz	r0, 3944 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    392a:	ldr.w	lr, [r0]
    392e:	str.w	ip, [sp, #12]
    3932:	str	r2, [sp, #8]
    3934:	str	r3, [sp, #4]
    3936:	ldr.w	r3, [lr, #32]
    393a:	blx	r3
    393c:	ldr.w	ip, [sp, #12]
    3940:	ldr	r2, [sp, #8]
    3942:	ldr	r3, [sp, #4]
    3944:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3946:	mov	r0, ip
    3948:	movs	r1, #20
    394a:	str	r3, [sp, #4]
    394c:	bl	f924 <operator delete(void*, unsigned int)>
    3950:	ldr	r3, [sp, #4]
    3952:	ldr	r2, [sp, #8]
    3954:	ldr	r0, [sp, #0]
    3956:	str	r2, [sp, #8]
    3958:	movs	r1, #20
    395a:	str	r3, [sp, #4]
    395c:	bl	f924 <operator delete(void*, unsigned int)>
    3960:	ldr	r3, [sp, #4]
    3962:	ldr	r2, [sp, #8]
    3964:	str	r3, [sp, #0]
    3966:	mov	r0, r2
    3968:	movs	r1, #20
    396a:	bl	f924 <operator delete(void*, unsigned int)>
    396e:	ldr	r3, [sp, #0]
    3970:	b.n	343e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3972:	ldr	r2, [r3, #16]
    3974:	cmp	r2, #0
    3976:	beq.w	34ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    397a:	ldr	r1, [r2, #0]
    397c:	ldr	r1, [r1, #32]
    397e:	cmp	r1, r0
    3980:	bne.n	3a62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ca>
    3982:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3986:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    398a:	cmp.w	lr, #0
    398e:	beq.n	3a3c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3990:	ldr.w	r1, [lr, #16]
    3994:	subs	r1, #1
    3996:	str.w	r1, [lr, #16]
    399a:	cmp	r1, #0
    399c:	bne.n	3a3c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    399e:	ldr	r1, [r2, #16]
    39a0:	str	r1, [sp, #0]
    39a2:	cmp	r1, #0
    39a4:	beq.n	3a3c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    39a6:	ldr	r1, [sp, #0]
    39a8:	ldr	r1, [r1, #0]
    39aa:	ldr	r1, [r1, #32]
    39ac:	cmp	r1, r0
    39ae:	bne.n	3a76 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7de>
    39b0:	ldr	r1, [sp, #0]
    39b2:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39b6:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39ba:	cmp.w	lr, #0
    39be:	beq.n	3a2c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    39c0:	ldr.w	r1, [lr, #16]
    39c4:	subs	r1, #1
    39c6:	str.w	r1, [lr, #16]
    39ca:	cbnz	r1, 3a2c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    39cc:	ldr	r1, [sp, #0]
    39ce:	ldr.w	ip, [r1, #16]
    39d2:	cmp.w	ip, #0
    39d6:	beq.n	3a2c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    39d8:	ldr.w	r1, [ip]
    39dc:	ldr	r1, [r1, #32]
    39de:	cmp	r1, r0
    39e0:	bne.n	3a92 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7fa>
    39e2:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39e6:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39ea:	cbz	r0, 3a1c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    39ec:	ldr	r1, [r0, #16]
    39ee:	add.w	lr, r1, #4294967295
    39f2:	str.w	lr, [r0, #16]
    39f6:	cmp.w	lr, #0
    39fa:	bne.n	3a1c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    39fc:	ldr.w	r0, [ip, #16]
    3a00:	cbz	r0, 3a1c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    3a02:	ldr.w	lr, [r0]
    3a06:	str.w	ip, [sp, #12]
    3a0a:	str	r2, [sp, #8]
    3a0c:	str	r3, [sp, #4]
    3a0e:	ldr.w	r3, [lr, #32]
    3a12:	blx	r3
    3a14:	ldr.w	ip, [sp, #12]
    3a18:	ldr	r2, [sp, #8]
    3a1a:	ldr	r3, [sp, #4]
    3a1c:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3a1e:	mov	r0, ip
    3a20:	movs	r1, #20
    3a22:	str	r3, [sp, #4]
    3a24:	bl	f924 <operator delete(void*, unsigned int)>
    3a28:	ldr	r3, [sp, #4]
    3a2a:	ldr	r2, [sp, #8]
    3a2c:	ldr	r0, [sp, #0]
    3a2e:	str	r2, [sp, #8]
    3a30:	movs	r1, #20
    3a32:	str	r3, [sp, #4]
    3a34:	bl	f924 <operator delete(void*, unsigned int)>
    3a38:	ldr	r3, [sp, #4]
    3a3a:	ldr	r2, [sp, #8]
    3a3c:	str	r3, [sp, #0]
    3a3e:	mov	r0, r2
    3a40:	movs	r1, #20
    3a42:	bl	f924 <operator delete(void*, unsigned int)>
    3a46:	ldr	r3, [sp, #0]
    3a48:	b.n	34ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3a4a:	mov	r0, sl
    3a4c:	blx	r3
    3a4e:	b.n	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3a50:	mov	r0, sl
    3a52:	blx	r3
    3a54:	b.n	34fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3a56:	mov	r0, r3
    3a58:	blx	r2
    3a5a:	b.n	34f2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    3a5c:	mov	r0, r3
    3a5e:	blx	r2
    3a60:	b.n	3446 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3a62:	str	r3, [sp, #0]
    3a64:	mov	r0, r2
    3a66:	blx	r1
    3a68:	ldr	r3, [sp, #0]
    3a6a:	b.n	34ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    3a6c:	str	r3, [sp, #0]
    3a6e:	mov	r0, r2
    3a70:	blx	r1
    3a72:	ldr	r3, [sp, #0]
    3a74:	b.n	343e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3a76:	str	r2, [sp, #8]
    3a78:	str	r3, [sp, #4]
    3a7a:	ldr	r0, [sp, #0]
    3a7c:	blx	r1
    3a7e:	ldr	r2, [sp, #8]
    3a80:	ldr	r3, [sp, #4]
    3a82:	b.n	3a3c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3a84:	str	r2, [sp, #8]
    3a86:	str	r3, [sp, #4]
    3a88:	ldr	r0, [sp, #0]
    3a8a:	blx	r1
    3a8c:	ldr	r2, [sp, #8]
    3a8e:	ldr	r3, [sp, #4]
    3a90:	b.n	3964 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3a92:	str	r2, [sp, #8]
    3a94:	str	r3, [sp, #4]
    3a96:	mov	r0, ip
    3a98:	blx	r1
    3a9a:	ldr	r2, [sp, #8]
    3a9c:	ldr	r3, [sp, #4]
    3a9e:	b.n	3a2c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    3aa0:	str	r2, [sp, #8]
    3aa2:	str	r3, [sp, #4]
    3aa4:	mov	r0, ip
    3aa6:	blx	r1
    3aa8:	ldr	r2, [sp, #8]
    3aaa:	ldr	r3, [sp, #4]
    3aac:	b.n	3954 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    3aae:	nop

00003ab0 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3ab0:	ldrb.w	r3, [r0, #248]	; 0xf8
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    3ab4:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    3ab6:	push	{r4, r5, r6, lr}
    3ab8:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    3aba:	strb.w	r2, [r0, #249]	; 0xf9
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    3abe:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3ac0:	cbz	r3, 3ae0 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    3ac2:	ldr.w	r3, [r5, #244]	; 0xf4
    3ac6:	cbz	r3, 3ade <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x2e>
    3ac8:	movs	r4, #0
    3aca:	mov	r2, r4
    3acc:	mov	r1, r6
    3ace:	mov	r0, r5
    3ad0:	bl	3298 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    3ad4:	ldr.w	r3, [r5, #244]	; 0xf4
    3ad8:	adds	r4, #1
    3ada:	cmp	r3, r4
    3adc:	bhi.n	3aca <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x1a>
    3ade:	pop	{r4, r5, r6, pc}
    3ae0:	bl	2628 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    3ae4:	b.n	3ac2 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x12>
    3ae6:	nop

00003ae8 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    3ae8:	push	{r4, r5, lr}
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    3aea:	cmp.w	r2, #4294967295
    3aee:	ite	ne
    3af0:	movne	r5, r2
    3af2:	moveq	r5, r1

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    3af4:	mov	r4, r0
    3af6:	sub	sp, #276	; 0x114
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization

      ScanDir(store, parent);
    3af8:	mov	r2, r5
    3afa:	bl	3298 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    3afe:	movs	r3, #1
    3b00:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    3b04:	mov	r2, r5
    3b06:	mov	r1, r4
    3b08:	mov	r0, sp
    3b0a:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3b0e:	ldr	r3, [sp, #4]
    3b10:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3b14:	add	sp, #276	; 0x114
    3b16:	pop	{r4, r5, pc}

00003b18 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    3b18:	push	{r4, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3b1a:	ldrb.w	r3, [r0, #248]	; 0xf8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    3b1e:	sub	sp, #8
    3b20:	mov	r4, r0

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3b22:	cbz	r3, 3b48 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    GenerateIndex(store);
    if (parent) 
    3b24:	cbz	r2, 3b32 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1a>
    3b26:	mov	r0, r4
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3b28:	add	sp, #8
    3b2a:	ldmia.w	sp!, {r4, lr}
    3b2e:	b.w	3ae8 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    3b32:	ldrb.w	r3, [r4, #249]	; 0xf9
    3b36:	cbz	r3, 3b56 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3b38:	movs	r2, #0
      next_ = 1;
    3b3a:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3b3c:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    3b40:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    3b44:	add	sp, #8
    3b46:	pop	{r4, pc}
    3b48:	stmia.w	sp, {r1, r2}
    3b4c:	bl	2628 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    3b50:	ldmia.w	sp, {r1, r2}
    3b54:	b.n	3b24 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xc>
    3b56:	mov	r0, r4
    3b58:	bl	3ab0 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>
    3b5c:	b.n	3b38 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x20>
    3b5e:	nop

00003b60 <MTPStorage_SD::removeFile(unsigned long, char*)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    3b60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b64:	add.w	r9, r0, r1, lsl #2
    3b68:	sub	sp, #340	; 0x154
    3b6a:	str	r1, [sp, #12]
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3b6c:	ldr.w	r1, [r9, #88]	; 0x58
    3b70:	str	r0, [sp, #8]
    3b72:	ldr	r3, [r1, #0]
    3b74:	str	r2, [sp, #4]
    3b76:	ldr	r4, [r3, #0]
    3b78:	add	r0, sp, #40	; 0x28
    3b7a:	movs	r3, #0
    3b7c:	blx	r4
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3b7e:	ldr	r0, [sp, #56]	; 0x38
    3b80:	cmp	r0, #0
    3b82:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3b86:	ldr	r3, [r0, #0]
    3b88:	ldr.w	sl, [pc, #868]	; 3ef0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x390>
    3b8c:	ldr	r3, [r3, #76]	; 0x4c
    3b8e:	cmp	r3, sl
    3b90:	bne.w	4090 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3b94:	ldr	r0, [r0, #16]
    3b96:	cmp	r0, #0
    3b98:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3b9c:	ldr	r3, [r0, #0]
    3b9e:	ldr	r3, [r3, #76]	; 0x4c
    3ba0:	cmp	r3, sl
    3ba2:	bne.w	4090 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3ba6:	ldr	r0, [r0, #16]
    3ba8:	cmp	r0, #0
    3baa:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bae:	ldr	r3, [r0, #0]
    3bb0:	ldr	r3, [r3, #76]	; 0x4c
    3bb2:	cmp	r3, sl
    3bb4:	bne.w	4090 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bb8:	ldr	r0, [r0, #16]
    3bba:	cmp	r0, #0
    3bbc:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bc0:	ldr	r3, [r0, #0]
    3bc2:	ldr	r3, [r3, #76]	; 0x4c
    3bc4:	cmp	r3, sl
    3bc6:	bne.w	4090 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bca:	ldr	r0, [r0, #16]
    3bcc:	cmp	r0, #0
    3bce:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bd2:	ldr	r3, [r0, #0]
    3bd4:	ldr	r3, [r3, #76]	; 0x4c
    3bd6:	cmp	r3, sl
    3bd8:	bne.w	4090 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bdc:	ldr	r0, [r0, #16]
    3bde:	cmp	r0, #0
    3be0:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3be4:	ldr	r3, [r0, #0]
    3be6:	ldr	r3, [r3, #76]	; 0x4c
    3be8:	cmp	r3, sl
    3bea:	bne.w	4090 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bee:	ldr	r0, [r0, #16]
    3bf0:	cmp	r0, #0
    3bf2:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bf6:	ldr	r3, [r0, #0]
    3bf8:	ldr	r3, [r3, #76]	; 0x4c
    3bfa:	cmp	r3, sl
    3bfc:	bne.w	4090 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3c00:	ldr	r0, [r0, #16]
    3c02:	cmp	r0, #0
    3c04:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c08:	ldr	r3, [r0, #0]
    3c0a:	ldr	r3, [r3, #76]	; 0x4c
    3c0c:	cmp	r3, sl
    3c0e:	bne.w	4090 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3c12:	ldr	r0, [r0, #16]
    3c14:	cmp	r0, #0
    3c16:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c1a:	ldr	r3, [r0, #0]
    3c1c:	ldr	r3, [r3, #76]	; 0x4c
    3c1e:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
    3c20:	cmp	r0, #0
    3c22:	beq.w	3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c26:	ldr.w	fp, [pc, #700]	; 3ee4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
    3c2a:	ldr.w	r8, [pc, #712]	; 3ef4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x394>
    3c2e:	movs	r4, #0
    3c30:	mov	r7, fp
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3c32:	ldr	r1, [sp, #56]	; 0x38
    3c34:	cmp	r1, #0
    3c36:	beq.w	3f16 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c3a:	ldr	r3, [r1, #0]
    3c3c:	ldr	r2, [pc, #668]	; (3edc <MTPStorage_SD::removeFile(unsigned long, char*)+0x37c>)
    3c3e:	ldr	r3, [r3, #80]	; 0x50
    3c40:	cmp	r3, r2
    3c42:	bne.w	4094 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c46:	ldr	r1, [r1, #16]
    3c48:	cmp	r1, #0
    3c4a:	beq.w	3f16 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c4e:	ldr	r3, [r1, #0]
    3c50:	ldr	r3, [r3, #80]	; 0x50
    3c52:	cmp	r3, r2
    3c54:	bne.w	4094 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c58:	ldr	r1, [r1, #16]
    3c5a:	cmp	r1, #0
    3c5c:	beq.w	3f16 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c60:	ldr	r3, [r1, #0]
    3c62:	ldr	r3, [r3, #80]	; 0x50
    3c64:	cmp	r3, r2
    3c66:	bne.w	4094 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c6a:	ldr	r1, [r1, #16]
    3c6c:	cmp	r1, #0
    3c6e:	beq.w	3f16 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c72:	ldr	r3, [r1, #0]
    3c74:	ldr	r3, [r3, #80]	; 0x50
    3c76:	cmp	r3, r2
    3c78:	bne.w	4094 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c7c:	ldr	r1, [r1, #16]
    3c7e:	cmp	r1, #0
    3c80:	beq.w	3f16 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c84:	ldr	r3, [r1, #0]
    3c86:	ldr	r3, [r3, #80]	; 0x50
    3c88:	cmp	r3, r2
    3c8a:	bne.w	4094 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c8e:	ldr	r1, [r1, #16]
    3c90:	cmp	r1, #0
    3c92:	beq.w	3f16 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c96:	ldr	r3, [r1, #0]
    3c98:	ldr	r3, [r3, #80]	; 0x50
    3c9a:	cmp	r3, r2
    3c9c:	bne.w	4094 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3ca0:	ldr	r1, [r1, #16]
    3ca2:	cmp	r1, #0
    3ca4:	beq.w	3f16 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3ca8:	ldr	r3, [r1, #0]
    3caa:	movs	r2, #0
    3cac:	ldr	r3, [r3, #80]	; 0x50
    3cae:	add	r0, sp, #60	; 0x3c
    3cb0:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3cb2:	cbz	r4, 3cd0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3cb4:	ldr	r3, [r4, #16]
    3cb6:	subs	r3, #1
    3cb8:	str	r3, [r4, #16]
    3cba:	cbnz	r3, 3cd0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3cbc:	ldr	r3, [r4, #0]
    3cbe:	ldr	r2, [pc, #544]	; (3ee0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3cc0:	ldr	r3, [r3, #32]
    3cc2:	cmp	r3, r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3cc4:	mov	r0, r4
    3cc6:	bne.w	4284 <MTPStorage_SD::removeFile(unsigned long, char*)+0x724>
    3cca:	movs	r1, #20
    3ccc:	bl	f924 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3cd0:	ldr	r4, [sp, #76]	; 0x4c
		if (f) f->refcount++;
    3cd2:	cmp	r4, #0
    3cd4:	beq.w	4250 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
    3cd8:	ldr	r3, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3cda:	ldr	r2, [r4, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    3cdc:	adds	r0, r3, #1
    3cde:	str	r0, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3ce0:	ldr	r2, [r2, #68]	; 0x44
    3ce2:	cmp	r2, r8
    3ce4:	bne.w	423c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6dc>
    3ce8:	cmp	r0, #0
    3cea:	beq.w	421c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3cee:	ldr.w	r3, [r3, #1]
    3cf2:	ldr	r3, [r3, #68]	; 0x44
    3cf4:	cmp	r3, r8
    3cf6:	bne.w	4234 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3cfa:	ldr	r0, [r0, #16]
    3cfc:	cmp	r0, #0
    3cfe:	beq.w	421c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d02:	ldr	r3, [r0, #0]
    3d04:	ldr	r3, [r3, #68]	; 0x44
    3d06:	cmp	r3, r8
    3d08:	bne.w	4234 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d0c:	ldr	r0, [r0, #16]
    3d0e:	cmp	r0, #0
    3d10:	beq.w	421c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d14:	ldr	r3, [r0, #0]
    3d16:	ldr	r3, [r3, #68]	; 0x44
    3d18:	cmp	r3, r8
    3d1a:	bne.w	4234 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d1e:	ldr	r0, [r0, #16]
    3d20:	cmp	r0, #0
    3d22:	beq.w	421c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d26:	ldr	r3, [r0, #0]
    3d28:	ldr	r3, [r3, #68]	; 0x44
    3d2a:	cmp	r3, r8
    3d2c:	bne.w	4234 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d30:	ldr	r0, [r0, #16]
    3d32:	cmp	r0, #0
    3d34:	beq.w	421c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d38:	ldr	r3, [r0, #0]
    3d3a:	ldr	r3, [r3, #68]	; 0x44
    3d3c:	blx	r3
    3d3e:	ldr	r2, [sp, #76]	; 0x4c
    3d40:	mov	r6, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d42:	str	r7, [sp, #60]	; 0x3c
    3d44:	ldr	r1, [pc, #412]	; (3ee4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d46:	cmp	r2, #0
    3d48:	beq.n	3de0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d4a:	ldr	r3, [r2, #16]
    3d4c:	subs	r3, #1
    3d4e:	str	r3, [r2, #16]
    3d50:	cmp	r3, #0
    3d52:	bne.n	3de0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d54:	ldr	r5, [sp, #76]	; 0x4c
    3d56:	cmp	r5, #0
    3d58:	beq.n	3de0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d5a:	ldr	r3, [r5, #0]
    3d5c:	ldr	r2, [pc, #384]	; (3ee0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3d5e:	ldr	r3, [r3, #32]
    3d60:	cmp	r3, r2
    3d62:	bne.w	4246 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6e6>
    3d66:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d68:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d6a:	cmp	r2, #0
    3d6c:	beq.n	3dd8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3d6e:	ldr	r3, [r2, #16]
    3d70:	subs	r3, #1
    3d72:	str	r3, [r2, #16]
    3d74:	cbnz	r3, 3dd8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3d76:	ldr.w	fp, [r5, #16]
    3d7a:	cmp.w	fp, #0
    3d7e:	beq.n	3dd8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3d80:	ldr.w	r3, [fp]
    3d84:	ldr	r2, [pc, #344]	; (3ee0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3d86:	ldr	r3, [r3, #32]
    3d88:	cmp	r3, r2
    3d8a:	bne.w	4288 <MTPStorage_SD::removeFile(unsigned long, char*)+0x728>
    3d8e:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d92:	str.w	r1, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d96:	cbz	r2, 3dd0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3d98:	ldr	r3, [r2, #16]
    3d9a:	subs	r3, #1
    3d9c:	str	r3, [r2, #16]
    3d9e:	cbnz	r3, 3dd0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3da0:	ldr.w	r3, [fp, #16]
    3da4:	cbz	r3, 3dd0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3da6:	ldr	r2, [r3, #0]
    3da8:	ldr	r1, [pc, #308]	; (3ee0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3daa:	ldr	r2, [r2, #32]
    3dac:	cmp	r2, r1
    3dae:	bne.w	428e <MTPStorage_SD::removeFile(unsigned long, char*)+0x72e>
    3db2:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3db4:	str	r7, [r3, #0]
    3db6:	ldr.w	ip, [pc, #300]	; 3ee4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3dba:	cbz	r1, 3dc8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3dbc:	ldr	r2, [r1, #16]
    3dbe:	subs	r2, #1
    3dc0:	str	r2, [r1, #16]
    3dc2:	cmp	r2, #0
    3dc4:	beq.w	40a8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x548>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3dc8:	mov	r0, r3
    3dca:	movs	r1, #20
    3dcc:	bl	f924 <operator delete(void*, unsigned int)>
    3dd0:	mov	r0, fp
    3dd2:	movs	r1, #20
    3dd4:	bl	f924 <operator delete(void*, unsigned int)>
    3dd8:	mov	r0, r5
    3dda:	movs	r1, #20
    3ddc:	bl	f924 <operator delete(void*, unsigned int)>
  {
    File f2;
    while(f2=f1.openNextFile())
    3de0:	cmp	r6, #0
    3de2:	beq.w	4250 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3de6:	cmp	r4, #0
    3de8:	beq.w	41ec <MTPStorage_SD::removeFile(unsigned long, char*)+0x68c>
    3dec:	ldr	r2, [r4, #0]
    3dee:	ldr	r3, [pc, #248]	; (3ee8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x388>)
    3df0:	ldr	r2, [r2, #72]	; 0x48
    3df2:	cmp	r2, r3
    3df4:	bne.w	4228 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c8>
    3df8:	ldr	r0, [r4, #16]
    3dfa:	cmp	r0, #0
    3dfc:	beq.w	4230 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e00:	ldr	r2, [r0, #0]
    3e02:	ldr	r2, [r2, #72]	; 0x48
    3e04:	cmp	r2, r3
    3e06:	bne.w	422a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e0a:	ldr	r0, [r0, #16]
    3e0c:	cmp	r0, #0
    3e0e:	beq.w	4230 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e12:	ldr	r2, [r0, #0]
    3e14:	ldr	r2, [r2, #72]	; 0x48
    3e16:	cmp	r2, r3
    3e18:	bne.w	422a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e1c:	ldr	r0, [r0, #16]
    3e1e:	cmp	r0, #0
    3e20:	beq.w	4230 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e24:	ldr	r2, [r0, #0]
    3e26:	ldr	r2, [r2, #72]	; 0x48
    3e28:	cmp	r2, r3
    3e2a:	bne.w	422a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e2e:	ldr	r0, [r0, #16]
    3e30:	cmp	r0, #0
    3e32:	beq.w	4230 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e36:	ldr	r2, [r0, #0]
    3e38:	ldr	r2, [r2, #72]	; 0x48
    3e3a:	cmp	r2, r3
    3e3c:	bne.w	422a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e40:	ldr	r0, [r0, #16]
    3e42:	cmp	r0, #0
    3e44:	beq.w	4230 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e48:	ldr	r2, [r0, #0]
    3e4a:	ldr	r2, [r2, #72]	; 0x48
    3e4c:	cmp	r2, r3
    3e4e:	bne.w	422a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e52:	ldr	r0, [r0, #16]
    3e54:	cmp	r0, #0
    3e56:	beq.w	4230 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e5a:	ldr	r3, [r0, #0]
    3e5c:	ldr	r3, [r3, #72]	; 0x48
    3e5e:	blx	r3
    3e60:	mov	r3, r0
    { sprintf(tname,"%s/%s",file,f2.name());
    3e62:	add	r5, sp, #80	; 0x50
    3e64:	ldr	r1, [pc, #132]	; (3eec <MTPStorage_SD::removeFile(unsigned long, char*)+0x38c>)
    3e66:	ldr	r2, [sp, #4]
    3e68:	mov	r0, r5
    3e6a:	bl	11294 <sprintf>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3e6e:	ldr	r3, [r4, #0]
    3e70:	ldr	r3, [r3, #76]	; 0x4c
    3e72:	cmp	r3, sl
    3e74:	bne.w	4222 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c2>
    3e78:	ldr	r0, [r4, #16]
    3e7a:	cmp	r0, #0
    3e7c:	beq.w	41fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3e80:	ldr	r3, [r0, #0]
    3e82:	ldr	r3, [r3, #76]	; 0x4c
    3e84:	cmp	r3, sl
    3e86:	bne.w	4224 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3e8a:	ldr	r0, [r0, #16]
    3e8c:	cmp	r0, #0
    3e8e:	beq.w	41fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3e92:	ldr	r3, [r0, #0]
    3e94:	ldr	r3, [r3, #76]	; 0x4c
    3e96:	cmp	r3, sl
    3e98:	bne.w	4224 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3e9c:	ldr	r0, [r0, #16]
    3e9e:	cmp	r0, #0
    3ea0:	beq.w	41fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3ea4:	ldr	r3, [r0, #0]
    3ea6:	ldr	r3, [r3, #76]	; 0x4c
    3ea8:	cmp	r3, sl
    3eaa:	bne.w	4224 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3eae:	ldr	r0, [r0, #16]
    3eb0:	cmp	r0, #0
    3eb2:	beq.w	41fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3eb6:	ldr	r3, [r0, #0]
    3eb8:	ldr	r3, [r3, #76]	; 0x4c
    3eba:	cmp	r3, sl
    3ebc:	bne.w	4224 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3ec0:	ldr	r0, [r0, #16]
    3ec2:	cmp	r0, #0
    3ec4:	beq.w	41fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3ec8:	ldr	r3, [r0, #0]
    3eca:	ldr	r3, [r3, #76]	; 0x4c
    3ecc:	cmp	r3, sl
    3ece:	bne.w	4224 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3ed2:	ldr	r0, [r0, #16]
    3ed4:	cmp	r0, #0
    3ed6:	beq.w	41fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3eda:	b.n	3ef8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x398>
    3edc:	.word	0x00000539
    3ee0:	.word	0x00000f31
    3ee4:	.word	0x0001491c
    3ee8:	.word	0x00000519
    3eec:	.word	0x00014c00
    3ef0:	.word	0x0000052d
    3ef4:	.word	0x0000050d
    3ef8:	ldr	r3, [r0, #0]
    3efa:	ldr	r3, [r3, #76]	; 0x4c
    3efc:	blx	r3
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    3efe:	cmp	r0, #0
    3f00:	beq.w	41fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3f04:	ldr	r1, [sp, #12]
    3f06:	ldr	r0, [sp, #8]
    3f08:	mov	r2, r5
    3f0a:	bl	3b60 <MTPStorage_SD::removeFile(unsigned long, char*)>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3f0e:	ldr	r1, [sp, #56]	; 0x38
    3f10:	cmp	r1, #0
    3f12:	bne.w	3c3a <MTPStorage_SD::removeFile(unsigned long, char*)+0xda>
    3f16:	movs	r3, #0
    3f18:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3f1c:	str	r7, [sp, #60]	; 0x3c
    3f1e:	strb.w	r3, [sp, #64]	; 0x40
    3f22:	strb.w	r3, [sp, #72]	; 0x48
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    3f26:	str	r3, [sp, #76]	; 0x4c
    3f28:	str	r2, [sp, #68]	; 0x44
    3f2a:	b.n	3cb2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3f2c:	ldr	r4, [sp, #4]
    3f2e:	ldr.w	fp, [pc, #368]	; 40a0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>
    3f32:	mov	r0, r4
    3f34:	bl	11440 <strlen>
    3f38:	mov	r1, r0
    3f3a:	mov	r0, r4
    3f3c:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3f40:	ldr	r0, [pc, #344]	; (409c <MTPStorage_SD::removeFile(unsigned long, char*)+0x53c>)
    3f42:	bl	f780 <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    3f46:	ldr.w	r0, [r9, #88]	; 0x58
    3f4a:	ldr	r3, [r0, #0]
    3f4c:	mov	r1, r4
    3f4e:	ldr	r3, [r3, #16]
    3f50:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f52:	ldr	r2, [sp, #56]	; 0x38
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f54:	str.w	fp, [sp, #40]	; 0x28
    3f58:	ldr	r1, [pc, #324]	; (40a0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f5a:	cmp	r2, #0
    3f5c:	beq.w	408a <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3f60:	ldr	r3, [r2, #16]
    3f62:	subs	r3, #1
    3f64:	str	r3, [r2, #16]
    3f66:	cmp	r3, #0
    3f68:	bne.w	408a <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3f6c:	ldr	r4, [sp, #56]	; 0x38
    3f6e:	cmp	r4, #0
    3f70:	beq.w	408a <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3f74:	ldr	r3, [r4, #0]
    3f76:	ldr	r0, [pc, #300]	; (40a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x544>)
    3f78:	ldr	r3, [r3, #32]
    3f7a:	cmp	r3, r0
    3f7c:	bne.w	4294 <MTPStorage_SD::removeFile(unsigned long, char*)+0x734>
    3f80:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f82:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f84:	cmp	r2, #0
    3f86:	beq.n	4082 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3f88:	ldr	r3, [r2, #16]
    3f8a:	subs	r3, #1
    3f8c:	str	r3, [r2, #16]
    3f8e:	cmp	r3, #0
    3f90:	bne.n	4082 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3f92:	ldr	r5, [r4, #16]
    3f94:	cmp	r5, #0
    3f96:	beq.n	4082 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3f98:	ldr	r3, [r5, #0]
    3f9a:	ldr	r3, [r3, #32]
    3f9c:	cmp	r3, r0
    3f9e:	bne.w	42a8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x748>
    3fa2:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fa4:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fa6:	cmp	r2, #0
    3fa8:	beq.n	407a <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3faa:	ldr	r3, [r2, #16]
    3fac:	subs	r3, #1
    3fae:	str	r3, [r2, #16]
    3fb0:	cmp	r3, #0
    3fb2:	bne.n	407a <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3fb4:	ldr	r6, [r5, #16]
    3fb6:	cmp	r6, #0
    3fb8:	beq.n	407a <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3fba:	ldr	r3, [r6, #0]
    3fbc:	ldr	r3, [r3, #32]
    3fbe:	cmp	r3, r0
    3fc0:	bne.w	42bc <MTPStorage_SD::removeFile(unsigned long, char*)+0x75c>
    3fc4:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fc6:	str.w	fp, [r6]
    3fca:	ldr	r1, [pc, #212]	; (40a0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fcc:	cmp	r2, #0
    3fce:	beq.n	4072 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3fd0:	ldr	r3, [r2, #16]
    3fd2:	subs	r3, #1
    3fd4:	str	r3, [r2, #16]
    3fd6:	cmp	r3, #0
    3fd8:	bne.n	4072 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3fda:	ldr	r7, [r6, #16]
    3fdc:	cmp	r7, #0
    3fde:	beq.n	4072 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3fe0:	ldr	r3, [r7, #0]
    3fe2:	ldr	r3, [r3, #32]
    3fe4:	cmp	r3, r0
    3fe6:	bne.w	42c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x762>
    3fea:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fec:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fee:	cmp	r2, #0
    3ff0:	beq.n	406a <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3ff2:	ldr	r3, [r2, #16]
    3ff4:	subs	r3, #1
    3ff6:	str	r3, [r2, #16]
    3ff8:	cmp	r3, #0
    3ffa:	bne.n	406a <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3ffc:	ldr.w	r8, [r7, #16]
    4000:	cmp.w	r8, #0
    4004:	beq.n	406a <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    4006:	ldr.w	r3, [r8]
    400a:	ldr	r3, [r3, #32]
    400c:	cmp	r3, r0
    400e:	bne.w	42e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x784>
    4012:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4016:	str.w	fp, [r8]
    401a:	ldr	r1, [pc, #132]	; (40a0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    401c:	cbz	r2, 4062 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    401e:	ldr	r3, [r2, #16]
    4020:	subs	r3, #1
    4022:	str	r3, [r2, #16]
    4024:	cbnz	r3, 4062 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    4026:	ldr.w	r9, [r8, #16]
    402a:	cmp.w	r9, #0
    402e:	beq.n	4062 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    4030:	ldr.w	r3, [r9]
    4034:	ldr	r3, [r3, #32]
    4036:	cmp	r3, r0
    4038:	bne.w	42fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x79a>
    403c:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4040:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4044:	cbz	r2, 405a <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    4046:	ldr	r3, [r2, #16]
    4048:	subs	r3, #1
    404a:	str	r3, [r2, #16]
    404c:	cbnz	r3, 405a <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    404e:	ldr.w	r0, [r9, #16]
    4052:	cbz	r0, 405a <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    4054:	ldr	r3, [r0, #0]
    4056:	ldr	r3, [r3, #32]
    4058:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    405a:	mov	r0, r9
    405c:	movs	r1, #20
    405e:	bl	f924 <operator delete(void*, unsigned int)>
    4062:	mov	r0, r8
    4064:	movs	r1, #20
    4066:	bl	f924 <operator delete(void*, unsigned int)>
    406a:	mov	r0, r7
    406c:	movs	r1, #20
    406e:	bl	f924 <operator delete(void*, unsigned int)>
    4072:	mov	r0, r6
    4074:	movs	r1, #20
    4076:	bl	f924 <operator delete(void*, unsigned int)>
    407a:	mov	r0, r5
    407c:	movs	r1, #20
    407e:	bl	f924 <operator delete(void*, unsigned int)>
    4082:	mov	r0, r4
    4084:	movs	r1, #20
    4086:	bl	f924 <operator delete(void*, unsigned int)>
  }
  else
  {
    sd_remove(store,file);
  }
}
    408a:	add	sp, #340	; 0x154
    408c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    4090:	blx	r3
    4092:	b.n	3c20 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc0>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4094:	movs	r2, #0
    4096:	add	r0, sp, #60	; 0x3c
    4098:	blx	r3
    409a:	b.n	3cb2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
    409c:	.word	0x1fff0c58
    40a0:	.word	0x0001491c
    40a4:	.word	0x00000f31
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40a8:	ldr	r2, [r3, #16]
    40aa:	cmp	r2, #0
    40ac:	beq.w	3dc8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    40b0:	ldr	r1, [r2, #0]
    40b2:	ldr	r0, [pc, #588]	; (4300 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    40b4:	ldr	r1, [r1, #32]
    40b6:	cmp	r1, r0
    40b8:	bne.w	429e <MTPStorage_SD::removeFile(unsigned long, char*)+0x73e>
    40bc:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40c0:	str.w	ip, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40c4:	cmp.w	lr, #0
    40c8:	beq.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    40cc:	ldr.w	r1, [lr, #16]
    40d0:	subs	r1, #1
    40d2:	str.w	r1, [lr, #16]
    40d6:	cmp	r1, #0
    40d8:	bne.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    40dc:	ldr	r1, [r2, #16]
    40de:	str	r1, [sp, #16]
    40e0:	cmp	r1, #0
    40e2:	beq.n	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    40e4:	ldr	r1, [sp, #16]
    40e6:	ldr	r0, [pc, #536]	; (4300 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    40e8:	ldr	r1, [r1, #0]
    40ea:	ldr	r1, [r1, #32]
    40ec:	cmp	r1, r0
    40ee:	bne.w	42ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x74e>
    40f2:	ldr	r1, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40f4:	ldr.w	ip, [pc, #536]	; 4310 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7b0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40f8:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40fc:	str	r7, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40fe:	cmp.w	lr, #0
    4102:	beq.n	41ce <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    4104:	ldr.w	r1, [lr, #16]
    4108:	subs	r1, #1
    410a:	str.w	r1, [lr, #16]
    410e:	cmp	r1, #0
    4110:	bne.n	41ce <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    4112:	ldr	r1, [sp, #16]
    4114:	ldr	r1, [r1, #16]
    4116:	str	r1, [sp, #20]
    4118:	cmp	r1, #0
    411a:	beq.n	41ce <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    411c:	ldr	r1, [sp, #20]
    411e:	ldr	r0, [pc, #480]	; (4300 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    4120:	ldr	r1, [r1, #0]
    4122:	ldr	r1, [r1, #32]
    4124:	cmp	r1, r0
    4126:	bne.w	42c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x768>
    412a:	ldr	r0, [sp, #20]
    412c:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4130:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4134:	cmp.w	lr, #0
    4138:	beq.n	41be <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    413a:	ldr.w	r1, [lr, #16]
    413e:	subs	r1, #1
    4140:	str.w	r1, [lr, #16]
    4144:	cmp	r1, #0
    4146:	bne.n	41be <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    4148:	ldr	r1, [sp, #20]
    414a:	ldr	r1, [r1, #16]
    414c:	str	r1, [sp, #24]
    414e:	cmp	r1, #0
    4150:	beq.n	41be <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    4152:	ldr	r1, [sp, #24]
    4154:	ldr	r0, [pc, #424]	; (4300 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    4156:	ldr	r1, [r1, #0]
    4158:	ldr	r1, [r1, #32]
    415a:	cmp	r1, r0
    415c:	bne.w	42d6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x776>
    4160:	ldr	r0, [sp, #24]
    4162:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4166:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    416a:	cmp.w	lr, #0
    416e:	beq.n	41ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    4170:	ldr.w	r1, [lr, #16]
    4174:	subs	r1, #1
    4176:	str.w	r1, [lr, #16]
    417a:	cbnz	r1, 41ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    417c:	ldr	r1, [sp, #24]
    417e:	ldr	r1, [r1, #16]
    4180:	cbz	r1, 41ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    4182:	ldr	r0, [r1, #0]
    4184:	ldr	r0, [r0, #32]
    4186:	mov	lr, r0
    4188:	ldr	r0, [pc, #372]	; (4300 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    418a:	cmp	lr, r0
    418c:	bne.w	42ea <MTPStorage_SD::removeFile(unsigned long, char*)+0x78a>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4190:	mov	r0, r1
    4192:	str	r2, [sp, #36]	; 0x24
    4194:	str.w	r7, [r0], #16
    4198:	str	r3, [sp, #32]
    419a:	str	r1, [sp, #28]
		invalidate();
    419c:	bl	2094 <File::invalidate() [clone .isra.1]>
	}
    41a0:	ldr	r1, [sp, #28]
    41a2:	mov	r0, r1
    41a4:	movs	r1, #20
    41a6:	bl	f924 <operator delete(void*, unsigned int)>
    41aa:	ldr	r3, [sp, #32]
    41ac:	ldr	r2, [sp, #36]	; 0x24
    41ae:	ldr	r0, [sp, #24]
    41b0:	str	r2, [sp, #32]
    41b2:	movs	r1, #20
    41b4:	str	r3, [sp, #28]
    41b6:	bl	f924 <operator delete(void*, unsigned int)>
    41ba:	ldr	r3, [sp, #28]
    41bc:	ldr	r2, [sp, #32]
    41be:	ldr	r0, [sp, #20]
    41c0:	str	r2, [sp, #28]
    41c2:	movs	r1, #20
    41c4:	str	r3, [sp, #24]
    41c6:	bl	f924 <operator delete(void*, unsigned int)>
    41ca:	ldr	r3, [sp, #24]
    41cc:	ldr	r2, [sp, #28]
    41ce:	ldr	r0, [sp, #16]
    41d0:	str	r2, [sp, #24]
    41d2:	movs	r1, #20
    41d4:	str	r3, [sp, #20]
    41d6:	bl	f924 <operator delete(void*, unsigned int)>
    41da:	ldr	r3, [sp, #20]
    41dc:	ldr	r2, [sp, #24]
    41de:	str	r3, [sp, #16]
    41e0:	mov	r0, r2
    41e2:	movs	r1, #20
    41e4:	bl	f924 <operator delete(void*, unsigned int)>
    41e8:	ldr	r3, [sp, #16]
    41ea:	b.n	3dc8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    { sprintf(tname,"%s/%s",file,f2.name());
    41ec:	add	r5, sp, #80	; 0x50
    41ee:	mov	r0, r5
    41f0:	ldr	r3, [pc, #272]	; (4304 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    41f2:	ldr	r1, [pc, #276]	; (4308 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a8>)
    41f4:	ldr	r2, [sp, #4]
    41f6:	bl	11294 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    41fa:	mov	r0, r5
    41fc:	bl	11440 <strlen>
    4200:	mov	r1, r0
    4202:	mov	r0, r5
    4204:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    4208:	ldr	r0, [pc, #256]	; (430c <MTPStorage_SD::removeFile(unsigned long, char*)+0x7ac>)
    420a:	bl	f780 <Print::println()>
    420e:	ldr.w	r0, [r9, #88]	; 0x58
    4212:	ldr	r3, [r0, #0]
    4214:	mov	r1, r5
    4216:	ldr	r3, [r3, #16]
    4218:	blx	r3
    421a:	b.n	3c32 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
    421c:	ldr	r2, [sp, #76]	; 0x4c
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    421e:	movs	r6, #0
    4220:	b.n	3d42 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    4222:	mov	r0, r4
    4224:	blx	r3
    4226:	b.n	3efe <MTPStorage_SD::removeFile(unsigned long, char*)+0x39e>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    4228:	mov	r0, r4
    422a:	blx	r2
    422c:	mov	r3, r0
    422e:	b.n	3e62 <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
    4230:	ldr	r3, [pc, #208]	; (4304 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    4232:	b.n	3e62 <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4234:	blx	r3
    4236:	ldr	r2, [sp, #76]	; 0x4c
    4238:	mov	r6, r0
    423a:	b.n	3d42 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
    423c:	mov	r0, r4
    423e:	blx	r2
    4240:	ldr	r2, [sp, #76]	; 0x4c
    4242:	mov	r6, r0
    4244:	b.n	3d42 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4246:	mov	r0, r5
    4248:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    424a:	cmp	r6, #0
    424c:	bne.w	3de6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x286>
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    4250:	ldr.w	r0, [r9, #88]	; 0x58
    4254:	ldr	r1, [sp, #4]
    4256:	ldr	r3, [r0, #0]
    4258:	ldr	r3, [r3, #20]
    425a:	mov	fp, r7
    425c:	blx	r3
    425e:	cmp	r4, #0
    4260:	beq.w	3f52 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    4264:	ldr	r3, [r4, #16]
    4266:	subs	r3, #1
    4268:	str	r3, [r4, #16]
    426a:	cmp	r3, #0
    426c:	bne.w	3f52 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    4270:	ldr	r3, [r4, #0]
    4272:	ldr	r2, [pc, #140]	; (4300 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    4274:	ldr	r3, [r3, #32]
    4276:	cmp	r3, r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4278:	mov	r0, r4
    427a:	bne.n	429a <MTPStorage_SD::removeFile(unsigned long, char*)+0x73a>
    427c:	movs	r1, #20
    427e:	bl	f924 <operator delete(void*, unsigned int)>
    4282:	b.n	3f52 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4284:	blx	r3
    4286:	b.n	3cd0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    4288:	mov	r0, fp
    428a:	blx	r3
    428c:	b.n	3dd8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    428e:	mov	r0, r3
    4290:	blx	r2
    4292:	b.n	3dd0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    4294:	mov	r0, r4
    4296:	blx	r3
  }
  else
  {
    sd_remove(store,file);
  }
}
    4298:	b.n	408a <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    429a:	blx	r3
    429c:	b.n	3f52 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    429e:	str	r3, [sp, #16]
    42a0:	mov	r0, r2
    42a2:	blx	r1
    42a4:	ldr	r3, [sp, #16]
    42a6:	b.n	3dc8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    42a8:	mov	r0, r5
    42aa:	blx	r3
    42ac:	b.n	4082 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    42ae:	str	r2, [sp, #24]
    42b0:	str	r3, [sp, #20]
    42b2:	ldr	r0, [sp, #16]
    42b4:	blx	r1
    42b6:	ldr	r2, [sp, #24]
    42b8:	ldr	r3, [sp, #20]
    42ba:	b.n	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    42bc:	mov	r0, r6
    42be:	blx	r3
    42c0:	b.n	407a <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    42c2:	mov	r0, r7
    42c4:	blx	r3
    42c6:	b.n	4072 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    42c8:	str	r2, [sp, #28]
    42ca:	str	r3, [sp, #24]
    42cc:	ldr	r0, [sp, #20]
    42ce:	blx	r1
    42d0:	ldr	r2, [sp, #28]
    42d2:	ldr	r3, [sp, #24]
    42d4:	b.n	41ce <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    42d6:	str	r2, [sp, #32]
    42d8:	str	r3, [sp, #28]
    42da:	ldr	r0, [sp, #24]
    42dc:	blx	r1
    42de:	ldr	r2, [sp, #32]
    42e0:	ldr	r3, [sp, #28]
    42e2:	b.n	41be <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    42e4:	mov	r0, r8
    42e6:	blx	r3
    42e8:	b.n	406a <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    42ea:	str	r2, [sp, #32]
    42ec:	str	r3, [sp, #28]
    42ee:	mov	r0, r1
    42f0:	mov	r3, lr
    42f2:	blx	r3
    42f4:	ldr	r2, [sp, #32]
    42f6:	ldr	r3, [sp, #28]
    42f8:	b.n	41ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    42fa:	mov	r0, r9
    42fc:	blx	r3
    42fe:	b.n	4062 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    4300:	.word	0x00000f31
    4304:	.word	0x00014ad0
    4308:	.word	0x00014c00
    430c:	.word	0x1fff0c58
    4310:	.word	0x0001491c

00004314 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    4314:	push	{r4, r5, r6, r7, lr}
    4316:	subw	sp, sp, #1348	; 0x544
    431a:	mov	r5, r0
    431c:	mov	r6, r1
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    431e:	mov.w	r3, #256	; 0x100
    4322:	add	r2, sp, #272	; 0x110
    4324:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    4328:	mov	r2, r6
    432a:	mov	r1, r5
    432c:	add	r0, sp, #528	; 0x210
    432e:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    4332:	add	r2, sp, #272	; 0x110
    4334:	ldrh.w	r1, [sp, #542]	; 0x21e
    4338:	mov	r0, r5
    433a:	bl	3b60 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    433e:	movs	r3, #0
    WriteIndexRecord(object, r);
    4340:	add	r2, sp, #528	; 0x210
    4342:	mov	r1, r6
    4344:	mov	r0, r5
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    4346:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    434a:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    434e:	ldr	r2, [sp, #528]	; 0x210
    4350:	mov	r1, r5
    4352:	add	r0, sp, #800	; 0x320
    4354:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    4358:	ldr	r7, [sp, #804]	; 0x324
    435a:	cmp	r6, r7
    435c:	beq.n	43ae <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x9a>
    }
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
    435e:	add.w	r0, sp, #1072	; 0x430
    4362:	mov	r2, r7
    4364:	mov	r1, r5
    4366:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    436a:	ldr.w	r4, [sp, #1080]	; 0x438
    436e:	cmp	r6, r4
    4370:	bne.n	4376 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x62>
    4372:	b.n	43c2 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0xae>
    4374:	mov	r4, r3
    4376:	mov	r2, r4
    4378:	mov	r1, r5
    437a:	mov	r0, sp
    437c:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    4380:	mov.w	r2, #272	; 0x110
    4384:	mov	r1, sp
    4386:	add.w	r0, sp, #1072	; 0x430
    438a:	bl	db58 <memcpy>
    438e:	ldr.w	r3, [sp, #1080]	; 0x438
    4392:	cmp	r6, r3
    4394:	bne.n	4374 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x60>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    4396:	mov	r0, r5
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
    4398:	ldr	r3, [sp, #536]	; 0x218
    439a:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    439e:	add.w	r2, sp, #1072	; 0x430
    43a2:	mov	r1, r4
    43a4:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    43a8:	addw	sp, sp, #1348	; 0x544
    43ac:	pop	{r4, r5, r6, r7, pc}
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
      WriteIndexRecord(r.parent, t);
    43ae:	mov	r0, r5
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    43b0:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    43b2:	ldr	r1, [sp, #528]	; 0x210
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    43b4:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    43b6:	add	r2, sp, #800	; 0x320
    43b8:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    43bc:	addw	sp, sp, #1348	; 0x544
    43c0:	pop	{r4, r5, r6, r7, pc}
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    43c2:	mov	r4, r7
    43c4:	b.n	4396 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x82>
    43c6:	nop

000043c8 <MTPStorage_SD::DeleteObject(unsigned long)>:
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    43c8:	adds	r2, r1, #1
    43ca:	beq.n	43d6 <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
    sd_remove(store,file);
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    43cc:	push	{r3, lr}
    43ce:	bl	4314 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    43d2:	movs	r0, #1
    43d4:	pop	{r3, pc}
    43d6:	movs	r0, #1
    43d8:	bx	lr
    43da:	nop

000043dc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    43dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    43e0:	add.w	r1, r0, r1, lsl #2
    43e4:	mov	r6, r0
    43e6:	ldr	r1, [r1, #84]	; 0x54
    43e8:	ldr	r0, [r1, #0]
    43ea:	subw	sp, sp, #2092	; 0x82c
    43ee:	ldr	r4, [r0, #0]
    43f0:	mov	r7, r3
    43f2:	mov	r0, sp
    43f4:	movs	r3, #0
    43f6:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    43f8:	ldr	r3, [sp, #16]
    43fa:	cmp	r3, #0
    43fc:	beq.w	4826 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x44a>
    4400:	ldr	r2, [r3, #0]
    4402:	ldr	r5, [pc, #624]	; (4674 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x298>)
    4404:	ldr	r2, [r2, #68]	; 0x44
    4406:	cmp	r2, r5
    4408:	bne.w	4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a8>
    440c:	ldr	r0, [r3, #16]
    440e:	cmp	r0, #0
    4410:	beq.w	4634 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4414:	ldr	r2, [r0, #0]
    4416:	ldr	r2, [r2, #68]	; 0x44
    4418:	cmp	r2, r5
    441a:	bne.w	4786 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    441e:	ldr	r0, [r0, #16]
    4420:	cmp	r0, #0
    4422:	beq.w	4634 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4426:	ldr	r2, [r0, #0]
    4428:	ldr	r2, [r2, #68]	; 0x44
    442a:	cmp	r2, r5
    442c:	bne.w	4786 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4430:	ldr	r0, [r0, #16]
    4432:	cmp	r0, #0
    4434:	beq.w	4634 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4438:	ldr	r2, [r0, #0]
    443a:	ldr	r2, [r2, #68]	; 0x44
    443c:	cmp	r2, r5
    443e:	bne.w	4786 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4442:	ldr	r0, [r0, #16]
    4444:	cmp	r0, #0
    4446:	beq.w	4634 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    444a:	ldr	r2, [r0, #0]
    444c:	ldr	r2, [r2, #68]	; 0x44
    444e:	cmp	r2, r5
    4450:	bne.w	4786 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4454:	ldr	r0, [r0, #16]
    4456:	cmp	r0, #0
    4458:	beq.w	4634 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    445c:	ldr	r2, [r0, #0]
    445e:	ldr	r2, [r2, #68]	; 0x44
    4460:	cmp	r2, r5
    4462:	bne.w	4786 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4466:	ldr	r0, [r0, #16]
    4468:	cmp	r0, #0
    446a:	beq.w	4634 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    446e:	ldr	r2, [r0, #0]
    4470:	ldr	r2, [r2, #68]	; 0x44
    4472:	cmp	r2, r5
    4474:	bne.w	4786 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4478:	ldr	r0, [r0, #16]
    447a:	cmp	r0, #0
    447c:	beq.w	4634 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4480:	ldr	r3, [r0, #0]
    4482:	ldr	r3, [r3, #68]	; 0x44
    4484:	blx	r3
    4486:	mov	r4, r0
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    4488:	cmp	r4, #0
    448a:	beq.w	4c6e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x892>
    448e:	add.w	r6, r6, r7, lsl #2
    4492:	add	r0, sp, #20
    4494:	ldr	r1, [r6, #84]	; 0x54
    4496:	ldr.w	r2, [sp, #2128]	; 0x850
    449a:	ldr	r3, [r1, #0]
    449c:	ldr	r4, [r3, #0]
    449e:	movs	r3, #2
    44a0:	blx	r4
    44a2:	ldr	r0, [sp, #36]	; 0x24
    44a4:	cmp	r0, #0
    44a6:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44aa:	ldr	r3, [r0, #0]
    44ac:	ldr	r3, [r3, #68]	; 0x44
    44ae:	cmp	r3, r5
    44b0:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44b4:	ldr	r0, [r0, #16]
    44b6:	cmp	r0, #0
    44b8:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44bc:	ldr	r3, [r0, #0]
    44be:	ldr	r3, [r3, #68]	; 0x44
    44c0:	cmp	r3, r5
    44c2:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44c6:	ldr	r0, [r0, #16]
    44c8:	cmp	r0, #0
    44ca:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44ce:	ldr	r3, [r0, #0]
    44d0:	ldr	r3, [r3, #68]	; 0x44
    44d2:	cmp	r3, r5
    44d4:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44d8:	ldr	r0, [r0, #16]
    44da:	cmp	r0, #0
    44dc:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44e0:	ldr	r3, [r0, #0]
    44e2:	ldr	r3, [r3, #68]	; 0x44
    44e4:	cmp	r3, r5
    44e6:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44ea:	ldr	r0, [r0, #16]
    44ec:	cmp	r0, #0
    44ee:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44f2:	ldr	r3, [r0, #0]
    44f4:	ldr	r3, [r3, #68]	; 0x44
    44f6:	cmp	r3, r5
    44f8:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44fc:	ldr	r0, [r0, #16]
    44fe:	cmp	r0, #0
    4500:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4504:	ldr	r3, [r0, #0]
    4506:	ldr	r3, [r3, #68]	; 0x44
    4508:	cmp	r3, r5
    450a:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    450e:	ldr	r0, [r0, #16]
    4510:	cmp	r0, #0
    4512:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4516:	ldr	r3, [r0, #0]
    4518:	ldr	r3, [r3, #68]	; 0x44
    451a:	cmp	r3, r5
    451c:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4520:	ldr	r0, [r0, #16]
    4522:	cmp	r0, #0
    4524:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4528:	ldr	r3, [r0, #0]
    452a:	ldr	r3, [r3, #68]	; 0x44
    452c:	cmp	r3, r5
    452e:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4532:	ldr	r0, [r0, #16]
    4534:	cmp	r0, #0
    4536:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    453a:	ldr	r3, [r0, #0]
    453c:	ldr	r3, [r3, #68]	; 0x44
    453e:	cmp	r3, r5
    4540:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4544:	ldr	r0, [r0, #16]
    4546:	cmp	r0, #0
    4548:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    454c:	ldr	r3, [r0, #0]
    454e:	ldr	r3, [r3, #68]	; 0x44
    4550:	cmp	r3, r5
    4552:	bne.w	4956 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4556:	ldr	r0, [r0, #16]
    4558:	cmp	r0, #0
    455a:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    455e:	ldr	r3, [r0, #0]
    4560:	ldr	r3, [r3, #68]	; 0x44
    4562:	blx	r3
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4564:	cmp	r0, #0
    4566:	beq.w	478c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    456a:	ldr	r5, [pc, #268]	; (4678 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x29c>)
    456c:	mov.w	r4, #4294967295
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4570:	ldr	r3, [sp, #16]
    4572:	cmp	r3, #0
    4574:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4578:	ldr	r1, [r3, #0]
    457a:	ldr	r2, [r1, #16]
    457c:	cmp	r2, r5
    457e:	bne.w	4b64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x788>
    4582:	ldr	r2, [r3, #16]
    4584:	cmp	r2, #0
    4586:	beq.w	4b6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x78e>
    458a:	ldr	r0, [r2, #0]
    458c:	ldr	r6, [r0, #16]
    458e:	cmp	r6, r5
    4590:	bne.w	4a0c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x630>
    4594:	ldr	r0, [r2, #16]
    4596:	cmp	r0, #0
    4598:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    459c:	ldr	r6, [r0, #0]
    459e:	ldr	r6, [r6, #16]
    45a0:	cmp	r6, r5
    45a2:	bne.w	4a0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45a6:	ldr	r0, [r0, #16]
    45a8:	cmp	r0, #0
    45aa:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45ae:	ldr	r6, [r0, #0]
    45b0:	ldr	r6, [r6, #16]
    45b2:	cmp	r6, r5
    45b4:	bne.w	4a0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45b8:	ldr	r0, [r0, #16]
    45ba:	cmp	r0, #0
    45bc:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45c0:	ldr	r6, [r0, #0]
    45c2:	ldr	r6, [r6, #16]
    45c4:	cmp	r6, r5
    45c6:	bne.w	4a0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45ca:	ldr	r0, [r0, #16]
    45cc:	cmp	r0, #0
    45ce:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45d2:	ldr	r6, [r0, #0]
    45d4:	ldr	r6, [r6, #16]
    45d6:	cmp	r6, r5
    45d8:	bne.w	4a0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45dc:	ldr	r0, [r0, #16]
    45de:	cmp	r0, #0
    45e0:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45e4:	ldr	r6, [r0, #0]
    45e6:	ldr	r6, [r6, #16]
    45e8:	cmp	r6, r5
    45ea:	bne.w	4a0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45ee:	ldr	r0, [r0, #16]
    45f0:	cmp	r0, #0
    45f2:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45f6:	ldr	r6, [r0, #0]
    45f8:	ldr	r6, [r6, #16]
    45fa:	cmp	r6, r5
    45fc:	bne.w	4a0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4600:	ldr	r0, [r0, #16]
    4602:	cmp	r0, #0
    4604:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4608:	ldr	r6, [r0, #0]
    460a:	ldr	r6, [r6, #16]
    460c:	cmp	r6, r5
    460e:	bne.w	4a0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4612:	ldr	r0, [r0, #16]
    4614:	cmp	r0, #0
    4616:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    461a:	ldr	r6, [r0, #0]
    461c:	ldr	r6, [r6, #16]
    461e:	cmp	r6, r5
    4620:	bne.w	4a0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4624:	ldr	r0, [r0, #16]
    4626:	cmp	r0, #0
    4628:	beq.w	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    462c:	ldr	r3, [r0, #0]
    462e:	ldr	r3, [r3, #16]
    4630:	blx	r3
    4632:	b.n	4a10 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4634:	ldr	r6, [pc, #68]	; (467c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a0>)
    4636:	str	r6, [sp, #0]
    4638:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    463a:	ldr	r2, [r3, #16]
    463c:	subs	r2, #1
    463e:	str	r2, [r3, #16]
    4640:	cbnz	r2, 4668 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    4642:	ldr	r5, [sp, #16]
    4644:	cbz	r5, 4668 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    4646:	ldr	r3, [r5, #0]
    4648:	ldr	r2, [pc, #52]	; (4680 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a4>)
    464a:	ldr	r3, [r3, #32]
    464c:	cmp	r3, r2
    464e:	bne.w	4c02 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x826>
    4652:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4654:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4656:	cbz	r1, 4660 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4658:	ldr	r3, [r1, #16]
    465a:	subs	r3, #1
    465c:	str	r3, [r1, #16]
    465e:	cbz	r3, 4684 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a8>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4660:	mov	r0, r5
    4662:	movs	r1, #20
    4664:	bl	f924 <operator delete(void*, unsigned int)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    4668:	mov	r0, r4
    466a:	addw	sp, sp, #2092	; 0x82c
    466e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4672:	nop
    4674:	.word	0x0000050d
    4678:	.word	0x00000495
    467c:	.word	0x0001491c
    4680:	.word	0x00000f31
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4684:	ldr	r7, [r5, #16]
    4686:	cmp	r7, #0
    4688:	beq.n	4660 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    468a:	ldr	r3, [r7, #0]
    468c:	ldr	r3, [r3, #32]
    468e:	cmp	r3, r2
    4690:	bne.w	4c24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x848>
    4694:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4696:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4698:	cmp	r1, #0
    469a:	beq.n	477a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    469c:	ldr	r3, [r1, #16]
    469e:	subs	r3, #1
    46a0:	str	r3, [r1, #16]
    46a2:	cmp	r3, #0
    46a4:	bne.n	477a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    46a6:	ldr.w	r8, [r7, #16]
    46aa:	cmp.w	r8, #0
    46ae:	beq.n	477a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    46b0:	ldr.w	r3, [r8]
    46b4:	ldr	r3, [r3, #32]
    46b6:	cmp	r3, r2
    46b8:	bne.w	4c4a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x86e>
    46bc:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46c0:	str.w	r6, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46c4:	cmp	r1, #0
    46c6:	beq.n	4772 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    46c8:	ldr	r3, [r1, #16]
    46ca:	subs	r3, #1
    46cc:	str	r3, [r1, #16]
    46ce:	cmp	r3, #0
    46d0:	bne.n	4772 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    46d2:	ldr.w	r9, [r8, #16]
    46d6:	cmp.w	r9, #0
    46da:	beq.n	4772 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    46dc:	ldr.w	r3, [r9]
    46e0:	ldr	r3, [r3, #32]
    46e2:	cmp	r3, r2
    46e4:	bne.w	4c50 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x874>
    46e8:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46ec:	str.w	r6, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46f0:	cmp	r1, #0
    46f2:	beq.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    46f4:	ldr	r3, [r1, #16]
    46f6:	subs	r3, #1
    46f8:	str	r3, [r1, #16]
    46fa:	cmp	r3, #0
    46fc:	bne.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    46fe:	ldr.w	sl, [r9, #16]
    4702:	cmp.w	sl, #0
    4706:	beq.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4708:	ldr.w	r3, [sl]
    470c:	ldr	r3, [r3, #32]
    470e:	cmp	r3, r2
    4710:	bne.w	4c62 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x886>
    4714:	ldr.w	r1, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4718:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    471c:	cbz	r1, 4762 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    471e:	ldr	r3, [r1, #16]
    4720:	subs	r3, #1
    4722:	str	r3, [r1, #16]
    4724:	cbnz	r3, 4762 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4726:	ldr.w	fp, [sl, #16]
    472a:	cmp.w	fp, #0
    472e:	beq.n	4762 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4730:	ldr.w	r3, [fp]
    4734:	ldr	r3, [r3, #32]
    4736:	cmp	r3, r2
    4738:	bne.w	4c68 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x88c>
    473c:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4740:	str.w	r6, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4744:	cbz	r2, 475a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    4746:	ldr	r3, [r2, #16]
    4748:	subs	r3, #1
    474a:	str	r3, [r2, #16]
    474c:	cbnz	r3, 475a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    474e:	ldr.w	r0, [fp, #16]
    4752:	cbz	r0, 475a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    4754:	ldr	r3, [r0, #0]
    4756:	ldr	r3, [r3, #32]
    4758:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    475a:	mov	r0, fp
    475c:	movs	r1, #20
    475e:	bl	f924 <operator delete(void*, unsigned int)>
    4762:	mov	r0, sl
    4764:	movs	r1, #20
    4766:	bl	f924 <operator delete(void*, unsigned int)>
    476a:	mov	r0, r9
    476c:	movs	r1, #20
    476e:	bl	f924 <operator delete(void*, unsigned int)>
    4772:	mov	r0, r8
    4774:	movs	r1, #20
    4776:	bl	f924 <operator delete(void*, unsigned int)>
    477a:	mov	r0, r7
    477c:	movs	r1, #20
    477e:	bl	f924 <operator delete(void*, unsigned int)>
    4782:	b.n	4660 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4784:	mov	r0, r3
    4786:	blx	r2
    4788:	mov	r4, r0
    478a:	b.n	4488 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xac>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    478c:	ldr	r0, [sp, #16]
    478e:	cmp	r0, #0
    4790:	beq.n	4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4792:	ldr	r3, [r0, #0]
    4794:	ldr	r1, [pc, #616]	; (4a00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    4796:	ldr	r3, [r3, #64]	; 0x40
    4798:	cmp	r3, r1
    479a:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    479e:	ldr	r0, [r0, #16]
    47a0:	cmp	r0, #0
    47a2:	beq.n	4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47a4:	ldr	r3, [r0, #0]
    47a6:	ldr	r3, [r3, #64]	; 0x40
    47a8:	cmp	r3, r1
    47aa:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47ae:	ldr	r0, [r0, #16]
    47b0:	cmp	r0, #0
    47b2:	beq.n	4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47b4:	ldr	r3, [r0, #0]
    47b6:	ldr	r3, [r3, #64]	; 0x40
    47b8:	cmp	r3, r1
    47ba:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47be:	ldr	r0, [r0, #16]
    47c0:	cmp	r0, #0
    47c2:	beq.n	4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47c4:	ldr	r3, [r0, #0]
    47c6:	ldr	r3, [r3, #64]	; 0x40
    47c8:	cmp	r3, r1
    47ca:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47ce:	ldr	r0, [r0, #16]
    47d0:	cmp	r0, #0
    47d2:	beq.n	4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47d4:	ldr	r3, [r0, #0]
    47d6:	ldr	r3, [r3, #64]	; 0x40
    47d8:	cmp	r3, r1
    47da:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47de:	ldr	r0, [r0, #16]
    47e0:	cbz	r0, 4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47e2:	ldr	r3, [r0, #0]
    47e4:	ldr	r3, [r3, #64]	; 0x40
    47e6:	cmp	r3, r1
    47e8:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47ec:	ldr	r0, [r0, #16]
    47ee:	cbz	r0, 4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47f0:	ldr	r3, [r0, #0]
    47f2:	ldr	r3, [r3, #64]	; 0x40
    47f4:	cmp	r3, r1
    47f6:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47fa:	ldr	r0, [r0, #16]
    47fc:	cbz	r0, 4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47fe:	ldr	r3, [r0, #0]
    4800:	ldr	r3, [r3, #64]	; 0x40
    4802:	cmp	r3, r1
    4804:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4808:	ldr	r0, [r0, #16]
    480a:	cbz	r0, 4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    480c:	ldr	r3, [r0, #0]
    480e:	ldr	r3, [r3, #64]	; 0x40
    4810:	cmp	r3, r1
    4812:	bne.w	494e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4816:	ldr	r0, [r0, #16]
    4818:	cbz	r0, 4832 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    481a:	ldr	r3, [r0, #0]
    481c:	ldr	r3, [r3, #64]	; 0x40
    481e:	blx	r3
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4820:	movs	r4, #0
    4822:	ldr	r3, [sp, #36]	; 0x24
    4824:	b.n	4836 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    4826:	mov	r4, r3
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    4828:	mov	r0, r4
    482a:	addw	sp, sp, #2092	; 0x82c
    482e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4832:	ldr	r3, [sp, #36]	; 0x24
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4834:	movs	r4, #0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4836:	ldr	r6, [pc, #460]	; (4a04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
    4838:	str	r6, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    483a:	cmp	r3, #0
    483c:	beq.w	4942 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4840:	ldr	r2, [r3, #16]
    4842:	subs	r2, #1
    4844:	str	r2, [r3, #16]
    4846:	cmp	r2, #0
    4848:	bne.n	4942 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    484a:	ldr	r5, [sp, #36]	; 0x24
    484c:	cmp	r5, #0
    484e:	beq.n	4942 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4850:	ldr	r3, [r5, #0]
    4852:	ldr	r2, [pc, #436]	; (4a08 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x62c>)
    4854:	ldr	r3, [r3, #32]
    4856:	cmp	r3, r2
    4858:	bne.w	4c2a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x84e>
    485c:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    485e:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4860:	cmp	r1, #0
    4862:	beq.n	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4864:	ldr	r3, [r1, #16]
    4866:	subs	r3, #1
    4868:	str	r3, [r1, #16]
    486a:	cmp	r3, #0
    486c:	bne.n	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    486e:	ldr	r7, [r5, #16]
    4870:	cmp	r7, #0
    4872:	beq.n	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4874:	ldr	r3, [r7, #0]
    4876:	ldr	r3, [r3, #32]
    4878:	cmp	r3, r2
    487a:	bne.w	4c44 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x868>
    487e:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4880:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4882:	cmp	r1, #0
    4884:	beq.n	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4886:	ldr	r3, [r1, #16]
    4888:	subs	r3, #1
    488a:	str	r3, [r1, #16]
    488c:	cmp	r3, #0
    488e:	bne.n	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4890:	ldr.w	r8, [r7, #16]
    4894:	cmp.w	r8, #0
    4898:	beq.n	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    489a:	ldr.w	r3, [r8]
    489e:	ldr	r3, [r3, #32]
    48a0:	cmp	r3, r2
    48a2:	bne.w	4c56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x87a>
    48a6:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    48aa:	str.w	r6, [r8]
    48ae:	ldr	r0, [pc, #340]	; (4a04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    48b0:	cmp	r1, #0
    48b2:	beq.n	492a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    48b4:	ldr	r3, [r1, #16]
    48b6:	subs	r3, #1
    48b8:	str	r3, [r1, #16]
    48ba:	cmp	r3, #0
    48bc:	bne.n	492a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    48be:	ldr.w	r9, [r8, #16]
    48c2:	cmp.w	r9, #0
    48c6:	beq.n	492a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    48c8:	ldr.w	r3, [r9]
    48cc:	ldr	r3, [r3, #32]
    48ce:	cmp	r3, r2
    48d0:	bne.w	4c5c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x880>
    48d4:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    48d8:	str.w	r0, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    48dc:	cbz	r1, 4922 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    48de:	ldr	r3, [r1, #16]
    48e0:	subs	r3, #1
    48e2:	str	r3, [r1, #16]
    48e4:	cbnz	r3, 4922 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    48e6:	ldr.w	sl, [r9, #16]
    48ea:	cmp.w	sl, #0
    48ee:	beq.n	4922 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    48f0:	ldr.w	r3, [sl]
    48f4:	ldr	r3, [r3, #32]
    48f6:	cmp	r3, r2
    48f8:	bne.w	4c78 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x89c>
    48fc:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4900:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4904:	cbz	r2, 491a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    4906:	ldr	r3, [r2, #16]
    4908:	subs	r3, #1
    490a:	str	r3, [r2, #16]
    490c:	cbnz	r3, 491a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    490e:	ldr.w	r0, [sl, #16]
    4912:	cbz	r0, 491a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    4914:	ldr	r3, [r0, #0]
    4916:	ldr	r3, [r3, #32]
    4918:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    491a:	mov	r0, sl
    491c:	movs	r1, #20
    491e:	bl	f924 <operator delete(void*, unsigned int)>
    4922:	mov	r0, r9
    4924:	movs	r1, #20
    4926:	bl	f924 <operator delete(void*, unsigned int)>
    492a:	mov	r0, r8
    492c:	movs	r1, #20
    492e:	bl	f924 <operator delete(void*, unsigned int)>
    4932:	mov	r0, r7
    4934:	movs	r1, #20
    4936:	bl	f924 <operator delete(void*, unsigned int)>
    493a:	mov	r0, r5
    493c:	movs	r1, #20
    493e:	bl	f924 <operator delete(void*, unsigned int)>
    4942:	ldr	r3, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4944:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4946:	cmp	r3, #0
    4948:	bne.w	463a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x25e>
    494c:	b.n	4668 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    494e:	blx	r3
    4950:	movs	r4, #0
    4952:	ldr	r3, [sp, #36]	; 0x24
    4954:	b.n	4836 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4956:	blx	r3
    4958:	b.n	4564 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x188>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    495a:	ldr	r5, [r1, #64]	; 0x40
    495c:	ldr	r1, [pc, #160]	; (4a00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    495e:	cmp	r5, r1
    4960:	bne.w	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4964:	mov	r0, r2
    4966:	ldr	r3, [r0, #0]
    4968:	ldr	r3, [r3, #64]	; 0x40
    496a:	cmp	r3, r1
    496c:	bne.w	4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4970:	ldr	r0, [r0, #16]
    4972:	cmp	r0, #0
    4974:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4978:	ldr	r3, [r0, #0]
    497a:	ldr	r3, [r3, #64]	; 0x40
    497c:	cmp	r3, r1
    497e:	bne.w	4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4982:	ldr	r0, [r0, #16]
    4984:	cmp	r0, #0
    4986:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    498a:	ldr	r3, [r0, #0]
    498c:	ldr	r3, [r3, #64]	; 0x40
    498e:	cmp	r3, r1
    4990:	bne.w	4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4994:	ldr	r0, [r0, #16]
    4996:	cmp	r0, #0
    4998:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    499c:	ldr	r3, [r0, #0]
    499e:	ldr	r3, [r3, #64]	; 0x40
    49a0:	cmp	r3, r1
    49a2:	bne.w	4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49a6:	ldr	r0, [r0, #16]
    49a8:	cmp	r0, #0
    49aa:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49ae:	ldr	r3, [r0, #0]
    49b0:	ldr	r3, [r3, #64]	; 0x40
    49b2:	cmp	r3, r1
    49b4:	bne.w	4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49b8:	ldr	r0, [r0, #16]
    49ba:	cmp	r0, #0
    49bc:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49c0:	ldr	r3, [r0, #0]
    49c2:	ldr	r3, [r3, #64]	; 0x40
    49c4:	cmp	r3, r1
    49c6:	bne.w	4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49ca:	ldr	r0, [r0, #16]
    49cc:	cmp	r0, #0
    49ce:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49d2:	ldr	r3, [r0, #0]
    49d4:	ldr	r3, [r3, #64]	; 0x40
    49d6:	cmp	r3, r1
    49d8:	bne.w	4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49dc:	ldr	r0, [r0, #16]
    49de:	cmp	r0, #0
    49e0:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49e4:	ldr	r3, [r0, #0]
    49e6:	ldr	r3, [r3, #64]	; 0x40
    49e8:	cmp	r3, r1
    49ea:	bne.w	4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49ee:	ldr	r0, [r0, #16]
    49f0:	cmp	r0, #0
    49f2:	beq.w	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49f6:	ldr	r3, [r0, #0]
    49f8:	ldr	r3, [r3, #64]	; 0x40
    49fa:	blx	r3
    49fc:	b.n	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49fe:	nop
    4a00:	.word	0x00000501
    4a04:	.word	0x0001491c
    4a08:	.word	0x00000f31
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4a0c:	mov	r0, r2
    4a0e:	blx	r6

  while(f1.available()>0)
    4a10:	cmp	r0, #0
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    4a12:	ldr	r3, [sp, #16]
    4a14:	ble.n	4ac0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e4>
    4a16:	cmp	r3, #0
    4a18:	beq.n	4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a1a:	ldr	r1, [r3, #0]
    4a1c:	ldr	r2, [pc, #536]	; (4c38 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x85c>)
    4a1e:	ldr	r4, [r1, #40]	; 0x28
    4a20:	cmp	r4, r2
    4a22:	bne.n	4aa2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c6>
    4a24:	ldr	r0, [r3, #16]
    4a26:	cmp	r0, #0
    4a28:	beq.n	4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a2a:	ldr	r1, [r0, #0]
    4a2c:	ldr	r4, [r1, #40]	; 0x28
    4a2e:	cmp	r4, r2
    4a30:	bne.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a32:	ldr	r0, [r0, #16]
    4a34:	cmp	r0, #0
    4a36:	beq.n	4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a38:	ldr	r1, [r0, #0]
    4a3a:	ldr	r4, [r1, #40]	; 0x28
    4a3c:	cmp	r4, r2
    4a3e:	bne.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a40:	ldr	r0, [r0, #16]
    4a42:	cmp	r0, #0
    4a44:	beq.n	4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a46:	ldr	r1, [r0, #0]
    4a48:	ldr	r4, [r1, #40]	; 0x28
    4a4a:	cmp	r4, r2
    4a4c:	bne.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a4e:	ldr	r0, [r0, #16]
    4a50:	cmp	r0, #0
    4a52:	beq.n	4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a54:	ldr	r1, [r0, #0]
    4a56:	ldr	r4, [r1, #40]	; 0x28
    4a58:	cmp	r4, r2
    4a5a:	bne.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a5c:	ldr	r0, [r0, #16]
    4a5e:	cmp	r0, #0
    4a60:	beq.n	4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a62:	ldr	r1, [r0, #0]
    4a64:	ldr	r4, [r1, #40]	; 0x28
    4a66:	cmp	r4, r2
    4a68:	bne.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a6a:	ldr	r0, [r0, #16]
    4a6c:	cbz	r0, 4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a6e:	ldr	r1, [r0, #0]
    4a70:	ldr	r4, [r1, #40]	; 0x28
    4a72:	cmp	r4, r2
    4a74:	bne.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a76:	ldr	r0, [r0, #16]
    4a78:	cbz	r0, 4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a7a:	ldr	r1, [r0, #0]
    4a7c:	ldr	r4, [r1, #40]	; 0x28
    4a7e:	cmp	r4, r2
    4a80:	bne.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a82:	ldr	r0, [r0, #16]
    4a84:	cbz	r0, 4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a86:	ldr	r1, [r0, #0]
    4a88:	ldr	r4, [r1, #40]	; 0x28
    4a8a:	cmp	r4, r2
    4a8c:	bne.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a8e:	ldr	r0, [r0, #16]
    4a90:	cbz	r0, 4ac8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a92:	ldr	r3, [r0, #0]
    4a94:	mov.w	r2, #2048	; 0x800
    4a98:	ldr	r3, [r3, #40]	; 0x28
    4a9a:	add	r1, sp, #40	; 0x28
    4a9c:	blx	r3
    4a9e:	mov	r2, r0
    4aa0:	b.n	4aae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6d2>
    4aa2:	mov	r0, r3
    4aa4:	mov.w	r2, #2048	; 0x800
    4aa8:	add	r1, sp, #40	; 0x28
    4aaa:	blx	r4
    4aac:	mov	r2, r0
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    4aae:	subs	r4, r2, #0
    4ab0:	blt.n	4abe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e2>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4ab2:	ldr	r0, [sp, #36]	; 0x24
    4ab4:	cbnz	r0, 4ad4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6f8>
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    4ab6:	cmp.w	r4, #2048	; 0x800
    4aba:	bge.w	4570 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x194>
    4abe:	ldr	r3, [sp, #16]
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4ac0:	cmp	r3, #0
    4ac2:	bne.w	4c0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x832>
    4ac6:	b.n	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4ac8:	ldr	r0, [sp, #36]	; 0x24
    4aca:	cmp	r0, #0
    4acc:	beq.w	4c08 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x82c>
    4ad0:	movs	r2, #0
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4ad2:	mov	r4, r2
    4ad4:	ldr	r1, [r0, #0]
    4ad6:	ldr	r3, [pc, #356]	; (4c3c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x860>)
    4ad8:	ldr	r6, [r1, #44]	; 0x2c
    4ada:	cmp	r6, r3
    4adc:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4ade:	ldr	r0, [r0, #16]
    4ae0:	cmp	r0, #0
    4ae2:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4ae4:	ldr	r1, [r0, #0]
    4ae6:	ldr	r6, [r1, #44]	; 0x2c
    4ae8:	cmp	r6, r3
    4aea:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4aec:	ldr	r0, [r0, #16]
    4aee:	cmp	r0, #0
    4af0:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4af2:	ldr	r1, [r0, #0]
    4af4:	ldr	r6, [r1, #44]	; 0x2c
    4af6:	cmp	r6, r3
    4af8:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4afa:	ldr	r0, [r0, #16]
    4afc:	cmp	r0, #0
    4afe:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b00:	ldr	r1, [r0, #0]
    4b02:	ldr	r6, [r1, #44]	; 0x2c
    4b04:	cmp	r6, r3
    4b06:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b08:	ldr	r0, [r0, #16]
    4b0a:	cmp	r0, #0
    4b0c:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b0e:	ldr	r1, [r0, #0]
    4b10:	ldr	r6, [r1, #44]	; 0x2c
    4b12:	cmp	r6, r3
    4b14:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b16:	ldr	r0, [r0, #16]
    4b18:	cmp	r0, #0
    4b1a:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b1c:	ldr	r1, [r0, #0]
    4b1e:	ldr	r6, [r1, #44]	; 0x2c
    4b20:	cmp	r6, r3
    4b22:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b24:	ldr	r0, [r0, #16]
    4b26:	cmp	r0, #0
    4b28:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b2a:	ldr	r1, [r0, #0]
    4b2c:	ldr	r6, [r1, #44]	; 0x2c
    4b2e:	cmp	r6, r3
    4b30:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b32:	ldr	r0, [r0, #16]
    4b34:	cmp	r0, #0
    4b36:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b38:	ldr	r1, [r0, #0]
    4b3a:	ldr	r6, [r1, #44]	; 0x2c
    4b3c:	cmp	r6, r3
    4b3e:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b40:	ldr	r0, [r0, #16]
    4b42:	cmp	r0, #0
    4b44:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b46:	ldr	r1, [r0, #0]
    4b48:	ldr	r6, [r1, #44]	; 0x2c
    4b4a:	cmp	r6, r3
    4b4c:	bne.n	4b5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b4e:	ldr	r0, [r0, #16]
    4b50:	cmp	r0, #0
    4b52:	beq.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b54:	ldr	r3, [r0, #0]
    4b56:	add	r1, sp, #40	; 0x28
    4b58:	ldr	r3, [r3, #44]	; 0x2c
    4b5a:	blx	r3
    4b5c:	b.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b5e:	add	r1, sp, #40	; 0x28
    4b60:	blx	r6
    4b62:	b.n	4ab6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4b64:	mov	r0, r3
    4b66:	blx	r2
    4b68:	b.n	4a10 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4b6a:	ldr	r5, [r1, #64]	; 0x40
    4b6c:	ldr	r2, [pc, #208]	; (4c40 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4b6e:	cmp	r5, r2
    4b70:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4b72:	ldr	r3, [sp, #36]	; 0x24
    4b74:	cmp	r3, #0
    4b76:	beq.n	4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4b78:	ldr	r2, [r3, #0]
    4b7a:	ldr	r1, [pc, #196]	; (4c40 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4b7c:	ldr	r2, [r2, #64]	; 0x40
    4b7e:	cmp	r2, r1
    4b80:	bne.n	4bf6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81a>
    4b82:	ldr	r0, [r3, #16]
    4b84:	cmp	r0, #0
    4b86:	beq.n	4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4b88:	ldr	r2, [r0, #0]
    4b8a:	ldr	r2, [r2, #64]	; 0x40
    4b8c:	cmp	r2, r1
    4b8e:	bne.n	4bf8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4b90:	ldr	r0, [r0, #16]
    4b92:	cmp	r0, #0
    4b94:	beq.n	4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4b96:	ldr	r2, [r0, #0]
    4b98:	ldr	r2, [r2, #64]	; 0x40
    4b9a:	cmp	r2, r1
    4b9c:	bne.n	4bf8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4b9e:	ldr	r0, [r0, #16]
    4ba0:	cmp	r0, #0
    4ba2:	beq.n	4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4ba4:	ldr	r2, [r0, #0]
    4ba6:	ldr	r2, [r2, #64]	; 0x40
    4ba8:	cmp	r2, r1
    4baa:	bne.n	4bf8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bac:	ldr	r0, [r0, #16]
    4bae:	cbz	r0, 4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bb0:	ldr	r2, [r0, #0]
    4bb2:	ldr	r2, [r2, #64]	; 0x40
    4bb4:	cmp	r2, r1
    4bb6:	bne.n	4bf8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bb8:	ldr	r0, [r0, #16]
    4bba:	cbz	r0, 4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bbc:	ldr	r2, [r0, #0]
    4bbe:	ldr	r2, [r2, #64]	; 0x40
    4bc0:	cmp	r2, r1
    4bc2:	bne.n	4bf8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bc4:	ldr	r0, [r0, #16]
    4bc6:	cbz	r0, 4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bc8:	ldr	r2, [r0, #0]
    4bca:	ldr	r2, [r2, #64]	; 0x40
    4bcc:	cmp	r2, r1
    4bce:	bne.n	4bf8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bd0:	ldr	r0, [r0, #16]
    4bd2:	cbz	r0, 4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bd4:	ldr	r2, [r0, #0]
    4bd6:	ldr	r2, [r2, #64]	; 0x40
    4bd8:	cmp	r2, r1
    4bda:	bne.n	4bf8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bdc:	ldr	r0, [r0, #16]
    4bde:	cbz	r0, 4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4be0:	ldr	r2, [r0, #0]
    4be2:	ldr	r2, [r2, #64]	; 0x40
    4be4:	cmp	r2, r1
    4be6:	bne.n	4bf8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4be8:	ldr	r0, [r0, #16]
    4bea:	cbz	r0, 4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bec:	ldr	r3, [r0, #0]
    4bee:	ldr	r3, [r3, #64]	; 0x40
    4bf0:	blx	r3
    4bf2:	ldr	r3, [sp, #36]	; 0x24
    4bf4:	b.n	4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bf6:	mov	r0, r3
    4bf8:	blx	r2
    4bfa:	ldr	r3, [sp, #36]	; 0x24
    if(nd<nbuf) break;  // end of file
  }
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    4bfc:	mvns	r4, r4
    4bfe:	lsrs	r4, r4, #31
    4c00:	b.n	4836 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c02:	mov	r0, r5
    4c04:	blx	r3
    4c06:	b.n	4668 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4c08:	mov	r4, r0
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4c0a:	cmp	r3, #0
    4c0c:	beq.n	4c74 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x898>
    4c0e:	ldr	r2, [r3, #0]
    4c10:	ldr	r1, [pc, #44]	; (4c40 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4c12:	ldr	r5, [r2, #64]	; 0x40
    4c14:	cmp	r5, r1
    4c16:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4c18:	ldr	r0, [r3, #16]
    4c1a:	cmp	r0, #0
    4c1c:	beq.n	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4c1e:	b.n	4966 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x58a>
    4c20:	blx	r3
    4c22:	b.n	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c24:	mov	r0, r7
    4c26:	blx	r3
    4c28:	b.n	4660 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4c2a:	mov	r0, r5
    4c2c:	blx	r3
    4c2e:	b.n	4942 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4c30:	mov	r0, r3
    4c32:	blx	r5
    4c34:	b.n	4b72 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4c36:	nop
    4c38:	.word	0x0000047d
    4c3c:	.word	0x00000489
    4c40:	.word	0x00000501
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c44:	mov	r0, r7
    4c46:	blx	r3
    4c48:	b.n	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4c4a:	mov	r0, r8
    4c4c:	blx	r3
    4c4e:	b.n	477a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4c50:	mov	r0, r9
    4c52:	blx	r3
    4c54:	b.n	4772 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4c56:	mov	r0, r8
    4c58:	blx	r3
    4c5a:	b.n	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4c5c:	mov	r0, r9
    4c5e:	blx	r3
    4c60:	b.n	492a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4c62:	mov	r0, sl
    4c64:	blx	r3
    4c66:	b.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4c68:	mov	r0, fp
    4c6a:	blx	r3
    4c6c:	b.n	4762 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4c6e:	ldr	r3, [sp, #16]
    4c70:	ldr	r6, [pc, #12]	; (4c80 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8a4>)
    4c72:	b.n	4944 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x568>
    4c74:	mov	r4, r3
    4c76:	b.n	4bfc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c78:	mov	r0, sl
    4c7a:	blx	r3
    4c7c:	b.n	4922 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4c7e:	nop
    4c80:	.word	0x0001491c

00004c84 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4c84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c88:	mov	r8, r1
    4c8a:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    4c8e:	cmp.w	r3, #4294967295
    4c92:	ite	ne
    4c94:	movne	r7, r3
    4c96:	moveq	r7, r2

    Record p1 = ReadIndexRecord(handle);
    4c98:	mov	r1, r0
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4c9a:	mov	r4, r0
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4c9c:	mov	r2, r8
    4c9e:	add	r0, sp, #520	; 0x208
    4ca0:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    4ca4:	mov	r2, r7
    4ca6:	mov	r1, r4
    4ca8:	add	r0, sp, #792	; 0x318
    4caa:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t newHandle;
    if(p1.isdir)
    4cae:	ldrb.w	r6, [sp, #532]	; 0x214
    4cb2:	cmp	r6, #0
    4cb4:	bne.n	4d3c <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0xb8>
      CopyFiles(handle, p2.store, newHandle);
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    4cb6:	add	r1, sp, #536	; 0x218
    4cb8:	mov.w	r2, #256	; 0x100
    4cbc:	add.w	r0, sp, #1080	; 0x438
    4cc0:	bl	113f0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4cc4:	ldr.w	r5, [r4, #244]	; 0xf4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4cc8:	ldrh.w	r0, [sp, #806]	; 0x326
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4ccc:	ldr	r3, [sp, #796]	; 0x31c
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4cce:	strh.w	r0, [sp, #1078]	; 0x436
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4cd2:	adds	r2, r5, #1
    4cd4:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4cd8:	mov	r1, r5
    4cda:	add.w	r2, sp, #1064	; 0x428
    4cde:	mov	r0, r4
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4ce0:	str.w	r3, [sp, #1072]	; 0x430
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
    4ce4:	str.w	r7, [sp, #1064]	; 0x428
      r.child = 0;
    4ce8:	str.w	r6, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
      r.isdir = 0;
    4cec:	strb.w	r6, [sp, #1076]	; 0x434
      r.scanned = 0;
    4cf0:	strb.w	r6, [sp, #1077]	; 0x435
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4cf4:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);
    4cf8:	add	r2, sp, #792	; 0x318
    4cfa:	mov	r1, r7
    4cfc:	mov	r0, r4
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
    4cfe:	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    4d00:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    4d04:	mov	r1, r8
    4d06:	add	r2, sp, #8
    4d08:	mov.w	r3, #256	; 0x100
    4d0c:	mov	r0, r4
    4d0e:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4d12:	add	r6, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    4d14:	mov	r7, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4d16:	mov	r1, r5
    4d18:	mov	r2, r6
    4d1a:	mov.w	r3, #256	; 0x100
    4d1e:	mov	r0, r4
    4d20:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>

      sd_copy(store0,oldfilename,store1,newfilename);
    4d24:	str	r6, [sp, #0]
    4d26:	mov	r3, r0
    4d28:	add	r2, sp, #8
    4d2a:	mov	r1, r7
    4d2c:	adds	r0, r4, #4
    4d2e:	bl	43dc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }

    return newHandle;
  }
    4d32:	mov	r0, r5
    4d34:	add.w	sp, sp, #1336	; 0x538
    4d38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    4d3c:	ldrh.w	r1, [sp, #534]	; 0x216
    4d40:	mov	r2, r8
    4d42:	mov	r0, r4
    4d44:	adds	r1, #1
    4d46:	bl	3298 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4d4a:	ldrb.w	r3, [sp, #532]	; 0x214
    4d4e:	ldr	r0, [r4, #0]
    4d50:	ldrh.w	r1, [sp, #806]	; 0x326
    4d54:	add	r2, sp, #536	; 0x218
    4d56:	adds	r3, #0
    4d58:	str	r2, [sp, #0]
    4d5a:	it	ne
    4d5c:	movne	r3, #1
    4d5e:	mov	r2, r7
    4d60:	ldr	r5, [r0, #44]	; 0x2c
    4d62:	mov	r0, r4
    4d64:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    4d66:	ldr	r3, [r4, #0]
    4d68:	ldrh.w	r2, [sp, #806]	; 0x326
    4d6c:	ldr	r6, [r3, #84]	; 0x54

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4d6e:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    4d70:	mov	r3, r0
    4d72:	mov	r1, r8
    4d74:	mov	r0, r4
    4d76:	blx	r6

      sd_copy(store0,oldfilename,store1,newfilename);
    }

    return newHandle;
  }
    4d78:	mov	r0, r5
    4d7a:	add.w	sp, sp, #1336	; 0x538
    4d7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d82:	nop

00004d84 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:

bool MTPStorage_SD::CopyFiles(uint32_t handle, uint32_t store, uint32_t newHandle)
{ // assume handle and newHandle point to existing directories
    4d84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d88:	mov	r4, r0
    4d8a:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    4d8e:	cmp.w	r3, #4294967295
    4d92:	ite	ne
    4d94:	movne	r8, r3
    4d96:	moveq	r8, r2
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4d98:	add	r0, sp, #520	; 0x208
    4d9a:	mov	r2, r1
    4d9c:	mov	r1, r4
    4d9e:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    4da2:	mov	r2, r8
    4da4:	mov	r1, r4
    4da6:	add	r0, sp, #792	; 0x318
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4da8:	ldrh.w	r9, [sp, #534]	; 0x216
  Record p2=ReadIndexRecord(newHandle);
    4dac:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    4db0:	ldr	r6, [sp, #524]	; 0x20c
  uint32_t iy= 0;
  while(ix)
    4db2:	cmp	r6, #0
    4db4:	beq.n	4e8a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x106>
    4db6:	movs	r5, #0
    4db8:	add	r7, sp, #264	; 0x108

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4dba:	add.w	sl, r4, #4
    4dbe:	b.n	4df4 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    4dc0:	ldrh.w	r3, [sp, #1350]	; 0x546
    4dc4:	add.w	r3, r4, r3, lsl #2
    4dc8:	ldr	r0, [r3, #88]	; 0x58
    4dca:	ldr	r3, [r0, #0]
    4dcc:	ldr	r3, [r3, #8]
    4dce:	blx	r3

    if(py.isdir) 
    { 
      sd_mkdir(py.store,newfilename);

      ScanDir(p1.store,ix); 
    4dd0:	mov	r2, r6
    4dd2:	mov	r1, r9
    4dd4:	mov	r0, r4
    4dd6:	bl	3298 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    4dda:	ldr	r3, [r4, #0]
    4ddc:	ldrh.w	r2, [sp, #806]	; 0x326
    4de0:	ldr.w	fp, [r3, #84]	; 0x54
    4de4:	mov	r1, r6
    4de6:	mov	r3, r5
    4de8:	mov	r0, r4
    4dea:	blx	fp
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
    4dec:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4df0:	cmp	r6, #0
    4df2:	beq.n	4e74 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
  { // get child
    Record px = ReadIndexRecord(ix) ;
    4df4:	mov	r2, r6
    4df6:	mov	r1, r4
    4df8:	add.w	r0, sp, #1064	; 0x428
    4dfc:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    4e00:	mov.w	r2, #272	; 0x110
    4e04:	add.w	r1, sp, #1064	; 0x428
    4e08:	add.w	r0, sp, #1336	; 0x538
    4e0c:	bl	db58 <memcpy>
    py.store = p2.store;
    py.parent = newHandle;
    py.sibling = iy;
    4e10:	str.w	r5, [sp, #1344]	; 0x540
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4e14:	ldr.w	r5, [r4, #244]	; 0xf4
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    4e18:	ldrh.w	r3, [sp, #806]	; 0x326
    4e1c:	strh.w	r3, [sp, #1350]	; 0x546
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4e20:	adds	r2, r5, #1
    4e22:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4e26:	mov	r1, r5
    4e28:	add.w	r2, sp, #1336	; 0x538
    4e2c:	mov	r0, r4
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    py.parent = newHandle;
    4e2e:	str.w	r8, [sp, #1336]	; 0x538
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4e32:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    py.sibling = iy;
    iy = AppendIndexRecord(py);

    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    4e36:	mov.w	r3, #256	; 0x100
    4e3a:	add	r2, sp, #8
    4e3c:	mov	r1, r6
    4e3e:	mov	r0, r4
    4e40:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    4e44:	mov	r1, r5
    4e46:	mov.w	r3, #256	; 0x100
    4e4a:	mov	r2, r7
    4e4c:	mov	r0, r4
    4e4e:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>

    if(py.isdir) 
    4e52:	ldrb.w	r3, [sp, #1348]	; 0x544
    4e56:	mov	r1, r7

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4e58:	add	r2, sp, #8
    4e5a:	mov	r0, sl
    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);

    if(py.isdir) 
    4e5c:	cmp	r3, #0
    4e5e:	bne.n	4dc0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4e60:	ldrh.w	r3, [sp, #1350]	; 0x546
    4e64:	str	r7, [sp, #0]
    4e66:	mov	r1, r9
    4e68:	bl	43dc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }
    ix = px.sibling;
    4e6c:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4e70:	cmp	r6, #0
    4e72:	bne.n	4df4 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
  WriteIndexRecord(newHandle,p2);
    4e74:	mov	r0, r4
    4e76:	mov	r1, r8
    4e78:	add	r2, sp, #792	; 0x318
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
    4e7a:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    4e7c:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  return true;
}
    4e80:	movs	r0, #1
    4e82:	addw	sp, sp, #1612	; 0x64c
    4e86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  #endif

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
    4e8a:	mov	r5, r6
    4e8c:	b.n	4e74 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
    4e8e:	nop

00004e90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    4e90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e94:	mov	r5, r3
    4e96:	add.w	r3, r0, r3, lsl #2
    4e9a:	mov	r4, r0
    4e9c:	ldr	r0, [r3, #84]	; 0x54
    4e9e:	ldr	r6, [sp, #24]
    4ea0:	ldr	r3, [r0, #0]
    4ea2:	mov	r7, r1
    4ea4:	ldr	r3, [r3, #8]
    4ea6:	mov	r1, r6
    4ea8:	mov	r8, r2
    4eaa:	blx	r3

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    4eac:	cbnz	r0, 4eb2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x22>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4eae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4eb2:	str	r6, [sp, #24]
    4eb4:	mov	r3, r5
    4eb6:	mov	r2, r8
    4eb8:	mov	r1, r7
    4eba:	mov	r0, r4
    4ebc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4ec0:	b.w	4ec4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>

00004ec4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>:
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    4ec4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ec8:	add.w	sl, r0, r1, lsl #2
    4ecc:	mov	r8, r1
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    4ece:	ldr.w	r1, [sl, #84]	; 0x54
    4ed2:	sub.w	sp, sp, #596	; 0x254
    4ed6:	mov	r9, r0
    4ed8:	ldr	r0, [r1, #0]
    4eda:	str	r3, [sp, #8]
    4edc:	ldr	r4, [r0, #0]
    4ede:	str	r2, [sp, #12]
    4ee0:	movs	r3, #0
    4ee2:	add	r0, sp, #40	; 0x28
    4ee4:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4ee6:	ldr	r3, [sp, #56]	; 0x38
    4ee8:	cmp	r3, #0
    4eea:	beq.w	5842 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x97e>
    4eee:	ldr	r2, [r3, #0]
    4ef0:	ldr	r6, [pc, #460]	; (50c0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1fc>)
    4ef2:	ldr	r2, [r2, #68]	; 0x44
    4ef4:	cmp	r2, r6
    4ef6:	bne.w	51ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30a>
    4efa:	ldr	r0, [r3, #16]
    4efc:	cmp	r0, #0
    4efe:	beq.w	507c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f02:	ldr	r2, [r0, #0]
    4f04:	ldr	r2, [r2, #68]	; 0x44
    4f06:	cmp	r2, r6
    4f08:	bne.w	51d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f0c:	ldr	r0, [r0, #16]
    4f0e:	cmp	r0, #0
    4f10:	beq.w	507c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f14:	ldr	r2, [r0, #0]
    4f16:	ldr	r2, [r2, #68]	; 0x44
    4f18:	cmp	r2, r6
    4f1a:	bne.w	51d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f1e:	ldr	r0, [r0, #16]
    4f20:	cmp	r0, #0
    4f22:	beq.w	507c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f26:	ldr	r2, [r0, #0]
    4f28:	ldr	r2, [r2, #68]	; 0x44
    4f2a:	cmp	r2, r6
    4f2c:	bne.w	51d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f30:	ldr	r0, [r0, #16]
    4f32:	cmp	r0, #0
    4f34:	beq.w	507c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f38:	ldr	r2, [r0, #0]
    4f3a:	ldr	r2, [r2, #68]	; 0x44
    4f3c:	cmp	r2, r6
    4f3e:	bne.w	51d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f42:	ldr	r0, [r0, #16]
    4f44:	cmp	r0, #0
    4f46:	beq.w	507c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f4a:	ldr	r2, [r0, #0]
    4f4c:	ldr	r2, [r2, #68]	; 0x44
    4f4e:	cmp	r2, r6
    4f50:	bne.w	51d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f54:	ldr	r0, [r0, #16]
    4f56:	cmp	r0, #0
    4f58:	beq.w	507c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f5c:	ldr	r2, [r0, #0]
    4f5e:	ldr	r2, [r2, #68]	; 0x44
    4f60:	cmp	r2, r6
    4f62:	bne.w	51d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f66:	ldr	r0, [r0, #16]
    4f68:	cmp	r0, #0
    4f6a:	beq.w	507c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f6e:	ldr	r3, [r0, #0]
    4f70:	ldr	r3, [r3, #68]	; 0x44
    4f72:	blx	r3
    4f74:	mov	r4, r0
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    4f76:	cmp	r4, #0
    4f78:	beq.w	58f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa34>
    4f7c:	ldr.w	fp, [pc, #336]	; 50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    4f80:	add	r4, sp, #336	; 0x150
  { while(1)
    {
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    4f82:	mov.w	r2, #256	; 0x100
    4f86:	ldr	r1, [sp, #12]
    4f88:	add	r0, sp, #80	; 0x50
    4f8a:	bl	113f0 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    4f8e:	add	r0, sp, #80	; 0x50
    4f90:	bl	11440 <strlen>
    4f94:	add	r3, sp, #80	; 0x50
    4f96:	add	r0, r3
    4f98:	ldrb.w	r3, [r0, #-1]
    4f9c:	cmp	r3, #47	; 0x2f
    4f9e:	beq.n	4fac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xe8>
    4fa0:	mov.w	r2, #256	; 0x100
    4fa4:	ldr	r1, [pc, #284]	; (50c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4fa6:	add	r0, sp, #80	; 0x50
    4fa8:	bl	1139c <strlcat>

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    4fac:	mov.w	r2, #256	; 0x100
    4fb0:	ldr	r1, [sp, #632]	; 0x278
    4fb2:	mov	r0, r4
    4fb4:	bl	113f0 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    4fb8:	mov	r0, r4
    4fba:	bl	11440 <strlen>
    4fbe:	add	r0, r4
    4fc0:	ldrb.w	r3, [r0, #-1]
    4fc4:	cmp	r3, #47	; 0x2f
    4fc6:	beq.n	4fd4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x110>
    4fc8:	mov.w	r2, #256	; 0x100
    4fcc:	ldr	r1, [pc, #244]	; (50c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4fce:	mov	r0, r4
    4fd0:	bl	1139c <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4fd4:	ldr	r1, [sp, #56]	; 0x38
    4fd6:	cmp	r1, #0
    4fd8:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4fdc:	ldr	r3, [r1, #0]
    4fde:	ldr	r2, [pc, #232]	; (50c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x204>)
    4fe0:	ldr	r3, [r3, #80]	; 0x50
    4fe2:	cmp	r3, r2
    4fe4:	bne.w	52b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4fe8:	ldr	r1, [r1, #16]
    4fea:	cmp	r1, #0
    4fec:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4ff0:	ldr	r3, [r1, #0]
    4ff2:	ldr	r3, [r3, #80]	; 0x50
    4ff4:	cmp	r3, r2
    4ff6:	bne.w	52b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4ffa:	ldr	r1, [r1, #16]
    4ffc:	cmp	r1, #0
    4ffe:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5002:	ldr	r3, [r1, #0]
    5004:	ldr	r3, [r3, #80]	; 0x50
    5006:	cmp	r3, r2
    5008:	bne.w	52b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    500c:	ldr	r1, [r1, #16]
    500e:	cmp	r1, #0
    5010:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5014:	ldr	r3, [r1, #0]
    5016:	ldr	r3, [r3, #80]	; 0x50
    5018:	cmp	r3, r2
    501a:	bne.w	52b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    501e:	ldr	r1, [r1, #16]
    5020:	cmp	r1, #0
    5022:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5026:	ldr	r3, [r1, #0]
    5028:	ldr	r3, [r3, #80]	; 0x50
    502a:	cmp	r3, r2
    502c:	bne.w	52b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5030:	ldr	r1, [r1, #16]
    5032:	cmp	r1, #0
    5034:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5038:	ldr	r3, [r1, #0]
    503a:	ldr	r3, [r3, #80]	; 0x50
    503c:	cmp	r3, r2
    503e:	bne.w	52b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5042:	ldr	r1, [r1, #16]
    5044:	cmp	r1, #0
    5046:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    504a:	ldr	r3, [r1, #0]
    504c:	ldr	r3, [r3, #80]	; 0x50
    504e:	cmp	r3, r2
    5050:	bne.w	52b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5054:	ldr	r1, [r1, #16]
    5056:	cmp	r1, #0
    5058:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    505c:	ldr	r3, [r1, #0]
    505e:	ldr	r3, [r3, #80]	; 0x50
    5060:	cmp	r3, r2
    5062:	bne.w	52b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5066:	ldr	r1, [r1, #16]
    5068:	cmp	r1, #0
    506a:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    506e:	ldr	r3, [r1, #0]
    5070:	add	r5, sp, #60	; 0x3c
    5072:	ldr	r3, [r3, #80]	; 0x50
    5074:	mov	r0, r5
    5076:	movs	r2, #0
    5078:	blx	r3
    507a:	b.n	52c0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3fc>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    507c:	ldr.w	fp, [pc, #80]	; 50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    5080:	str.w	fp, [sp, #40]	; 0x28
    5084:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5086:	ldr	r2, [r3, #16]
    5088:	subs	r2, #1
    508a:	str	r2, [r3, #16]
    508c:	cbnz	r2, 50b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    508e:	ldr	r5, [sp, #56]	; 0x38
    5090:	cbz	r5, 50b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    5092:	ldr	r2, [r5, #0]
    5094:	ldr	r3, [pc, #52]	; (50cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x208>)
    5096:	ldr	r2, [r2, #32]
    5098:	cmp	r2, r3
    509a:	bne.w	585c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x998>
    509e:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50a0:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50a4:	cbz	r1, 50ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    50a6:	ldr	r2, [r1, #16]
    50a8:	subs	r2, #1
    50aa:	str	r2, [r1, #16]
    50ac:	cbz	r2, 50d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x210>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    50ae:	mov	r0, r5
    50b0:	movs	r1, #20
    50b2:	bl	f924 <operator delete(void*, unsigned int)>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    50b6:	mov	r0, r4
    50b8:	add.w	sp, sp, #596	; 0x254
    50bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50c0:	.word	0x0000050d
    50c4:	.word	0x00014bfc
    50c8:	.word	0x00000539
    50cc:	.word	0x00000f31
    50d0:	.word	0x0001491c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50d4:	ldr	r6, [r5, #16]
    50d6:	cmp	r6, #0
    50d8:	beq.n	50ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    50da:	ldr	r2, [r6, #0]
    50dc:	ldr	r2, [r2, #32]
    50de:	cmp	r2, r3
    50e0:	bne.w	5872 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ae>
    50e4:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50e6:	str.w	fp, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50ea:	cmp	r1, #0
    50ec:	beq.n	51c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    50ee:	ldr	r2, [r1, #16]
    50f0:	subs	r2, #1
    50f2:	str	r2, [r1, #16]
    50f4:	cmp	r2, #0
    50f6:	bne.n	51c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    50f8:	ldr	r7, [r6, #16]
    50fa:	cmp	r7, #0
    50fc:	beq.n	51c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    50fe:	ldr	r2, [r7, #0]
    5100:	ldr	r2, [r2, #32]
    5102:	cmp	r2, r3
    5104:	bne.w	588e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ca>
    5108:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    510a:	str.w	fp, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    510e:	cmp	r1, #0
    5110:	beq.n	51bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    5112:	ldr	r2, [r1, #16]
    5114:	subs	r2, #1
    5116:	str	r2, [r1, #16]
    5118:	cmp	r2, #0
    511a:	bne.n	51bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    511c:	ldr.w	r8, [r7, #16]
    5120:	cmp.w	r8, #0
    5124:	beq.n	51bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    5126:	ldr.w	r2, [r8]
    512a:	ldr	r2, [r2, #32]
    512c:	cmp	r2, r3
    512e:	bne.w	58a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e0>
    5132:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5136:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    513a:	cmp	r1, #0
    513c:	beq.n	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    513e:	ldr	r2, [r1, #16]
    5140:	subs	r2, #1
    5142:	str	r2, [r1, #16]
    5144:	cmp	r2, #0
    5146:	bne.n	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    5148:	ldr.w	r9, [r8, #16]
    514c:	cmp.w	r9, #0
    5150:	beq.n	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    5152:	ldr.w	r2, [r9]
    5156:	ldr	r2, [r2, #32]
    5158:	cmp	r2, r3
    515a:	bne.w	58cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa08>
    515e:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5162:	str.w	fp, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5166:	cbz	r1, 51ac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    5168:	ldr	r2, [r1, #16]
    516a:	subs	r2, #1
    516c:	str	r2, [r1, #16]
    516e:	cbnz	r2, 51ac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    5170:	ldr.w	sl, [r9, #16]
    5174:	cmp.w	sl, #0
    5178:	beq.n	51ac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    517a:	ldr.w	r2, [sl]
    517e:	ldr	r2, [r2, #32]
    5180:	cmp	r2, r3
    5182:	bne.w	58d2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa0e>
    5186:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    518a:	str.w	fp, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    518e:	cbz	r2, 51a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    5190:	ldr	r3, [r2, #16]
    5192:	subs	r3, #1
    5194:	str	r3, [r2, #16]
    5196:	cbnz	r3, 51a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    5198:	ldr.w	r0, [sl, #16]
    519c:	cbz	r0, 51a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    519e:	ldr	r3, [r0, #0]
    51a0:	ldr	r3, [r3, #32]
    51a2:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    51a4:	mov	r0, sl
    51a6:	movs	r1, #20
    51a8:	bl	f924 <operator delete(void*, unsigned int)>
    51ac:	mov	r0, r9
    51ae:	movs	r1, #20
    51b0:	bl	f924 <operator delete(void*, unsigned int)>
    51b4:	mov	r0, r8
    51b6:	movs	r1, #20
    51b8:	bl	f924 <operator delete(void*, unsigned int)>
    51bc:	mov	r0, r7
    51be:	movs	r1, #20
    51c0:	bl	f924 <operator delete(void*, unsigned int)>
    51c4:	mov	r0, r6
    51c6:	movs	r1, #20
    51c8:	bl	f924 <operator delete(void*, unsigned int)>
    51cc:	b.n	50ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    51ce:	mov	r0, r3
    51d0:	blx	r2
    51d2:	mov	r4, r0
    51d4:	b.n	4f76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xb2>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51d6:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51da:	ldr	r3, [r2, #16]
    51dc:	subs	r3, #1
    51de:	str	r3, [r2, #16]
    51e0:	cmp	r3, #0
    51e2:	bne.n	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    51e4:	ldr	r4, [r5, #16]
    51e6:	cmp	r4, #0
    51e8:	beq.n	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    51ea:	ldr	r2, [r4, #0]
    51ec:	ldr	r3, [pc, #192]	; (52b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ec>)
    51ee:	ldr	r2, [r2, #32]
    51f0:	cmp	r2, r3
    51f2:	bne.w	587e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ba>
    51f6:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51f8:	str.w	fp, [r4]
    51fc:	ldr	r0, [pc, #180]	; (52b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51fe:	cmp	r1, #0
    5200:	beq.n	528a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    5202:	ldr	r2, [r1, #16]
    5204:	subs	r2, #1
    5206:	str	r2, [r1, #16]
    5208:	cmp	r2, #0
    520a:	bne.n	528a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    520c:	ldr	r5, [r4, #16]
    520e:	cmp	r5, #0
    5210:	beq.n	528a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    5212:	ldr	r2, [r5, #0]
    5214:	ldr	r2, [r2, #32]
    5216:	cmp	r2, r3
    5218:	bne.w	5894 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d0>
    521c:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    521e:	str	r0, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5220:	cmp	r1, #0
    5222:	beq.n	5282 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5224:	ldr	r2, [r1, #16]
    5226:	subs	r2, #1
    5228:	str	r2, [r1, #16]
    522a:	cbnz	r2, 5282 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    522c:	ldr	r6, [r5, #16]
    522e:	cbz	r6, 5282 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5230:	ldr	r2, [r6, #0]
    5232:	ldr	r2, [r2, #32]
    5234:	cmp	r2, r3
    5236:	bne.w	58ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9f6>
    523a:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    523c:	str.w	fp, [r6]
    5240:	ldr	r0, [pc, #112]	; (52b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5242:	cbz	r1, 527a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    5244:	ldr	r2, [r1, #16]
    5246:	subs	r2, #1
    5248:	str	r2, [r1, #16]
    524a:	cbnz	r2, 527a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    524c:	ldr	r7, [r6, #16]
    524e:	cbz	r7, 527a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    5250:	ldr	r2, [r7, #0]
    5252:	ldr	r2, [r2, #32]
    5254:	cmp	r2, r3
    5256:	bne.w	58c0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9fc>
    525a:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    525c:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    525e:	cbz	r2, 5272 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    5260:	ldr	r3, [r2, #16]
    5262:	subs	r3, #1
    5264:	str	r3, [r2, #16]
    5266:	cbnz	r3, 5272 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    5268:	ldr	r0, [r7, #16]
    526a:	cbz	r0, 5272 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    526c:	ldr	r3, [r0, #0]
    526e:	ldr	r3, [r3, #32]
    5270:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5272:	mov	r0, r7
    5274:	movs	r1, #20
    5276:	bl	f924 <operator delete(void*, unsigned int)>
    527a:	mov	r0, r6
    527c:	movs	r1, #20
    527e:	bl	f924 <operator delete(void*, unsigned int)>
    5282:	mov	r0, r5
    5284:	movs	r1, #20
    5286:	bl	f924 <operator delete(void*, unsigned int)>
    528a:	mov	r0, r4
    528c:	movs	r1, #20
    528e:	bl	f924 <operator delete(void*, unsigned int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    5292:	ldr.w	r0, [sl, #84]	; 0x54
    5296:	ldr	r1, [sp, #12]
    5298:	ldr	r3, [r0, #0]
    529a:	ldr	r3, [r3, #20]
    529c:	blx	r3
    529e:	ldr	r3, [sp, #56]	; 0x38
    52a0:	mov	r4, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    52a2:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    52a6:	cmp	r3, #0
    52a8:	bne.w	5086 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1c2>
    52ac:	b.n	50b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    52ae:	nop
    52b0:	.word	0x00000f31
    52b4:	.word	0x0001491c
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    52b8:	add	r5, sp, #60	; 0x3c
    52ba:	mov	r0, r5
    52bc:	movs	r2, #0
    52be:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    52c0:	ldr	r2, [r5, #16]
    52c2:	cmp	r2, #0
    52c4:	beq.n	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    52c6:	ldr	r3, [r2, #0]
    52c8:	ldr	r3, [r3, #68]	; 0x44
    52ca:	cmp	r3, r6
    52cc:	bne.w	5810 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94c>
    52d0:	ldr	r0, [r2, #16]
    52d2:	cmp	r0, #0
    52d4:	beq.w	51d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    52d8:	ldr	r1, [r0, #0]
    52da:	ldr	r1, [r1, #68]	; 0x44
    52dc:	cmp	r1, r6
    52de:	bne.w	5826 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x962>
    52e2:	ldr	r0, [r0, #16]
    52e4:	cmp	r0, #0
    52e6:	beq.w	51d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    52ea:	ldr	r3, [r0, #0]
    52ec:	ldr	r3, [r3, #68]	; 0x44
    52ee:	cmp	r3, r6
    52f0:	bne.w	5812 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    52f4:	ldr	r0, [r0, #16]
    52f6:	cmp	r0, #0
    52f8:	beq.w	51d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    52fc:	ldr	r3, [r0, #0]
    52fe:	ldr	r3, [r3, #68]	; 0x44
    5300:	cmp	r3, r6
    5302:	bne.w	5812 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    5306:	ldr	r0, [r0, #16]
    5308:	cmp	r0, #0
    530a:	beq.w	51d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    530e:	ldr	r3, [r0, #0]
    5310:	ldr	r3, [r3, #68]	; 0x44
    5312:	cmp	r3, r6
    5314:	bne.w	5812 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    5318:	ldr	r0, [r0, #16]
    531a:	cmp	r0, #0
    531c:	beq.w	51d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5320:	ldr	r3, [r0, #0]
    5322:	ldr	r3, [r3, #68]	; 0x44
    5324:	cmp	r3, r6
    5326:	bne.w	5812 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    532a:	ldr	r0, [r0, #16]
    532c:	cmp	r0, #0
    532e:	beq.w	51d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5332:	ldr	r3, [r0, #0]
    5334:	ldr	r3, [r3, #68]	; 0x44
    5336:	blx	r3

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);

      File f2=f1.openNextFile();
      if(!f2) break;
    5338:	cmp	r0, #0
    533a:	beq.w	58ea <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa26>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    533e:	ldr	r0, [r5, #16]
    5340:	cmp	r0, #0
    5342:	beq.w	580c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5346:	ldr	r2, [r0, #0]
    5348:	ldr	r3, [pc, #696]	; (5604 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    534a:	ldr	r2, [r2, #72]	; 0x48
    534c:	cmp	r2, r3
    534e:	bne.w	5816 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    5352:	ldr	r0, [r0, #16]
    5354:	cmp	r0, #0
    5356:	beq.w	580c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    535a:	ldr	r2, [r0, #0]
    535c:	ldr	r2, [r2, #72]	; 0x48
    535e:	cmp	r2, r3
    5360:	bne.w	5816 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    5364:	ldr	r0, [r0, #16]
    5366:	cmp	r0, #0
    5368:	beq.w	580c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    536c:	ldr	r2, [r0, #0]
    536e:	ldr	r2, [r2, #72]	; 0x48
    5370:	cmp	r2, r3
    5372:	bne.w	5816 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    5376:	ldr	r0, [r0, #16]
    5378:	cmp	r0, #0
    537a:	beq.w	580c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    537e:	ldr	r2, [r0, #0]
    5380:	ldr	r2, [r2, #72]	; 0x48
    5382:	cmp	r2, r3
    5384:	bne.w	5816 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    5388:	ldr	r0, [r0, #16]
    538a:	cmp	r0, #0
    538c:	beq.w	580c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5390:	ldr	r2, [r0, #0]
    5392:	ldr	r2, [r2, #72]	; 0x48
    5394:	cmp	r2, r3
    5396:	bne.w	5816 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    539a:	ldr	r0, [r0, #16]
    539c:	cmp	r0, #0
    539e:	beq.w	580c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    53a2:	ldr	r2, [r0, #0]
    53a4:	ldr	r2, [r2, #72]	; 0x48
    53a6:	cmp	r2, r3
    53a8:	bne.w	5816 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    53ac:	ldr	r0, [r0, #16]
    53ae:	cmp	r0, #0
    53b0:	beq.w	580c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    53b4:	ldr	r3, [r0, #0]
    53b6:	ldr	r3, [r3, #72]	; 0x48
    53b8:	blx	r3
    53ba:	mov	r1, r0
      { // generate filenames
        strlcat(tmp0Name,f2.name(),MAX_FILENAME_LEN);
    53bc:	mov.w	r2, #256	; 0x100
    53c0:	add	r0, sp, #80	; 0x50
    53c2:	bl	1139c <strlcat>
    53c6:	ldr	r0, [r5, #16]
    53c8:	cmp	r0, #0
    53ca:	beq.w	5808 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    53ce:	ldr	r2, [r0, #0]
    53d0:	ldr	r3, [pc, #560]	; (5604 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    53d2:	ldr	r2, [r2, #72]	; 0x48
    53d4:	cmp	r2, r3
    53d6:	bne.w	5820 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    53da:	ldr	r0, [r0, #16]
    53dc:	cmp	r0, #0
    53de:	beq.w	5808 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    53e2:	ldr	r2, [r0, #0]
    53e4:	ldr	r2, [r2, #72]	; 0x48
    53e6:	cmp	r2, r3
    53e8:	bne.w	5820 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    53ec:	ldr	r0, [r0, #16]
    53ee:	cmp	r0, #0
    53f0:	beq.w	5808 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    53f4:	ldr	r2, [r0, #0]
    53f6:	ldr	r2, [r2, #72]	; 0x48
    53f8:	cmp	r2, r3
    53fa:	bne.w	5820 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    53fe:	ldr	r0, [r0, #16]
    5400:	cmp	r0, #0
    5402:	beq.w	5808 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5406:	ldr	r2, [r0, #0]
    5408:	ldr	r2, [r2, #72]	; 0x48
    540a:	cmp	r2, r3
    540c:	bne.w	5820 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5410:	ldr	r0, [r0, #16]
    5412:	cmp	r0, #0
    5414:	beq.w	5808 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5418:	ldr	r2, [r0, #0]
    541a:	ldr	r2, [r2, #72]	; 0x48
    541c:	cmp	r2, r3
    541e:	bne.w	5820 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5422:	ldr	r0, [r0, #16]
    5424:	cmp	r0, #0
    5426:	beq.w	5808 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    542a:	ldr	r2, [r0, #0]
    542c:	ldr	r2, [r2, #72]	; 0x48
    542e:	cmp	r2, r3
    5430:	bne.w	5820 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5434:	ldr	r0, [r0, #16]
    5436:	cmp	r0, #0
    5438:	beq.w	5808 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    543c:	ldr	r3, [r0, #0]
    543e:	ldr	r3, [r3, #72]	; 0x48
    5440:	blx	r3
    5442:	mov	r1, r0
        strlcat(tmp1Name,f2.name(),MAX_FILENAME_LEN);
    5444:	mov.w	r2, #256	; 0x100
    5448:	mov	r0, r4
    544a:	bl	1139c <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    544e:	ldr	r0, [r5, #16]
    5450:	cmp	r0, #0
    5452:	beq.w	56d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5456:	ldr	r2, [r0, #0]
    5458:	ldr	r3, [pc, #428]	; (5608 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x744>)
    545a:	ldr	r2, [r2, #76]	; 0x4c
    545c:	cmp	r2, r3
    545e:	bne.w	581c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5462:	ldr	r0, [r0, #16]
    5464:	cmp	r0, #0
    5466:	beq.w	56d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    546a:	ldr	r2, [r0, #0]
    546c:	ldr	r2, [r2, #76]	; 0x4c
    546e:	cmp	r2, r3
    5470:	bne.w	581c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5474:	ldr	r0, [r0, #16]
    5476:	cmp	r0, #0
    5478:	beq.w	56d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    547c:	ldr	r2, [r0, #0]
    547e:	ldr	r2, [r2, #76]	; 0x4c
    5480:	cmp	r2, r3
    5482:	bne.w	581c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5486:	ldr	r0, [r0, #16]
    5488:	cmp	r0, #0
    548a:	beq.w	56d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    548e:	ldr	r2, [r0, #0]
    5490:	ldr	r2, [r2, #76]	; 0x4c
    5492:	cmp	r2, r3
    5494:	bne.w	581c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5498:	ldr	r0, [r0, #16]
    549a:	cmp	r0, #0
    549c:	beq.w	56d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54a0:	ldr	r2, [r0, #0]
    54a2:	ldr	r2, [r2, #76]	; 0x4c
    54a4:	cmp	r2, r3
    54a6:	bne.w	581c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    54aa:	ldr	r0, [r0, #16]
    54ac:	cmp	r0, #0
    54ae:	beq.w	56d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54b2:	ldr	r2, [r0, #0]
    54b4:	ldr	r2, [r2, #76]	; 0x4c
    54b6:	cmp	r2, r3
    54b8:	bne.w	581c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    54bc:	ldr	r0, [r0, #16]
    54be:	cmp	r0, #0
    54c0:	beq.w	56d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54c4:	ldr	r3, [r0, #0]
    54c6:	ldr	r3, [r3, #76]	; 0x4c
    54c8:	blx	r3

        if(f2.isDirectory())
    54ca:	cmp	r0, #0
    54cc:	beq.w	56d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
        { 
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    54d0:	str	r4, [sp, #0]
    54d2:	ldr	r3, [sp, #8]
    54d4:	add	r2, sp, #80	; 0x50
    54d6:	mov	r1, r8
    54d8:	mov	r0, r9
    54da:	bl	4e90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    54de:	cmp	r0, #0
    54e0:	beq.w	570a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    54e4:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    54e6:	str.w	fp, [r5]
    54ea:	ldr	r1, [pc, #288]	; (560c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    54ec:	cmp	r2, #0
    54ee:	beq.w	4f82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    54f2:	ldr	r3, [r2, #16]
    54f4:	subs	r3, #1
    54f6:	str	r3, [r2, #16]
    54f8:	cmp	r3, #0
    54fa:	bne.w	4f82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    54fe:	ldr	r5, [r5, #16]
    5500:	cmp	r5, #0
    5502:	beq.w	4f82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    5506:	ldr	r2, [r5, #0]
    5508:	ldr	r3, [pc, #260]	; (5610 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x74c>)
    550a:	ldr	r2, [r2, #32]
    550c:	cmp	r2, r3
    550e:	bne.w	582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x966>
    5512:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5514:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5516:	cmp	r0, #0
    5518:	beq.w	56ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    551c:	ldr	r2, [r0, #16]
    551e:	subs	r2, #1
    5520:	str	r2, [r0, #16]
    5522:	cmp	r2, #0
    5524:	bne.w	56ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5528:	ldr	r7, [r5, #16]
    552a:	cmp	r7, #0
    552c:	beq.w	56ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5530:	ldr	r2, [r7, #0]
    5532:	ldr	r2, [r2, #32]
    5534:	cmp	r2, r3
    5536:	bne.w	5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x96e>
    553a:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    553c:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    553e:	cmp	r0, #0
    5540:	beq.w	56c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5544:	ldr	r2, [r0, #16]
    5546:	subs	r2, #1
    5548:	str	r2, [r0, #16]
    554a:	cmp	r2, #0
    554c:	bne.w	56c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5550:	ldr	r2, [r7, #16]
    5552:	cmp	r2, #0
    5554:	beq.w	56c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5558:	ldr	r1, [r2, #0]
    555a:	ldr	r1, [r1, #32]
    555c:	cmp	r1, r3
    555e:	bne.w	584e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x98a>
    5562:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5566:	str.w	fp, [r2]
    556a:	ldr	r0, [pc, #160]	; (560c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    556c:	cmp.w	lr, #0
    5570:	beq.w	56ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5574:	ldr.w	r1, [lr, #16]
    5578:	subs	r1, #1
    557a:	str.w	r1, [lr, #16]
    557e:	cmp	r1, #0
    5580:	bne.w	56ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5584:	ldr	r1, [r2, #16]
    5586:	str	r1, [sp, #16]
    5588:	cmp	r1, #0
    558a:	beq.w	56ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    558e:	ldr	r1, [sp, #16]
    5590:	ldr	r1, [r1, #0]
    5592:	ldr	r1, [r1, #32]
    5594:	cmp	r1, r3
    5596:	bne.w	5862 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x99e>
    559a:	ldr	r1, [sp, #16]
    559c:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    55a0:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    55a2:	cmp.w	lr, #0
    55a6:	beq.w	56ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    55aa:	ldr.w	r1, [lr, #16]
    55ae:	subs	r1, #1
    55b0:	str.w	r1, [lr, #16]
    55b4:	cmp	r1, #0
    55b6:	bne.n	56ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    55b8:	ldr	r1, [sp, #16]
    55ba:	ldr	r1, [r1, #16]
    55bc:	str	r1, [sp, #20]
    55be:	cmp	r1, #0
    55c0:	beq.n	56ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    55c2:	ldr	r0, [sp, #20]
    55c4:	ldr	r1, [r0, #0]
    55c6:	ldr	r1, [r1, #32]
    55c8:	cmp	r1, r3
    55ca:	bne.w	5884 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9c0>
    55ce:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    55d2:	str.w	fp, [r0]
    55d6:	ldr	r0, [pc, #52]	; (560c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    55d8:	cmp.w	lr, #0
    55dc:	beq.n	56a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    55de:	ldr.w	r1, [lr, #16]
    55e2:	subs	r1, #1
    55e4:	str.w	r1, [lr, #16]
    55e8:	cmp	r1, #0
    55ea:	bne.n	56a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    55ec:	ldr	r1, [sp, #20]
    55ee:	ldr	r1, [r1, #16]
    55f0:	str	r1, [sp, #24]
    55f2:	cmp	r1, #0
    55f4:	beq.n	56a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    55f6:	ldr	r1, [sp, #24]
    55f8:	ldr	r1, [r1, #0]
    55fa:	ldr	r1, [r1, #32]
    55fc:	cmp	r1, r3
    55fe:	bne.w	589a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d6>
    5602:	b.n	5614 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x750>
    5604:	.word	0x00000519
    5608:	.word	0x0000052d
    560c:	.word	0x0001491c
    5610:	.word	0x00000f31
    5614:	ldr	r1, [sp, #24]
    5616:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    561a:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    561c:	cmp.w	lr, #0
    5620:	beq.n	5696 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5622:	ldr.w	r1, [lr, #16]
    5626:	subs	r1, #1
    5628:	str.w	r1, [lr, #16]
    562c:	cmp	r1, #0
    562e:	bne.n	5696 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5630:	ldr	r1, [sp, #24]
    5632:	ldr	r1, [r1, #16]
    5634:	str	r1, [sp, #28]
    5636:	cbz	r1, 5696 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5638:	ldr	r1, [sp, #28]
    563a:	ldr	r1, [r1, #0]
    563c:	ldr	r1, [r1, #32]
    563e:	cmp	r1, r3
    5640:	bne.w	58b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ec>
    5644:	ldr	r1, [sp, #28]
    5646:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    564a:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    564c:	cmp.w	lr, #0
    5650:	beq.n	568a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5652:	ldr.w	r1, [lr, #16]
    5656:	subs	r1, #1
    5658:	str.w	r1, [lr, #16]
    565c:	cbnz	r1, 568a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    565e:	ldr	r1, [sp, #28]
    5660:	ldr	r1, [r1, #16]
    5662:	cbz	r1, 568a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5664:	ldr	r0, [r1, #0]
    5666:	ldr	r0, [r0, #32]
    5668:	cmp	r0, r3
    566a:	mov	lr, r0
    566c:	bne.w	58d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa14>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5670:	mov	r0, r1
    5672:	str	r2, [sp, #36]	; 0x24
    5674:	str.w	fp, [r0], #16
    5678:	str	r1, [sp, #32]
		invalidate();
    567a:	bl	2094 <File::invalidate() [clone .isra.1]>
	}
    567e:	ldr	r1, [sp, #32]
    5680:	mov	r0, r1
    5682:	movs	r1, #20
    5684:	bl	f924 <operator delete(void*, unsigned int)>
    5688:	ldr	r2, [sp, #36]	; 0x24
    568a:	ldr	r0, [sp, #28]
    568c:	str	r2, [sp, #32]
    568e:	movs	r1, #20
    5690:	bl	f924 <operator delete(void*, unsigned int)>
    5694:	ldr	r2, [sp, #32]
    5696:	ldr	r0, [sp, #24]
    5698:	str	r2, [sp, #28]
    569a:	movs	r1, #20
    569c:	bl	f924 <operator delete(void*, unsigned int)>
    56a0:	ldr	r2, [sp, #28]
    56a2:	ldr	r0, [sp, #20]
    56a4:	str	r2, [sp, #24]
    56a6:	movs	r1, #20
    56a8:	bl	f924 <operator delete(void*, unsigned int)>
    56ac:	ldr	r2, [sp, #24]
    56ae:	ldr	r0, [sp, #16]
    56b0:	str	r2, [sp, #20]
    56b2:	movs	r1, #20
    56b4:	bl	f924 <operator delete(void*, unsigned int)>
    56b8:	ldr	r2, [sp, #20]
    56ba:	mov	r0, r2
    56bc:	movs	r1, #20
    56be:	bl	f924 <operator delete(void*, unsigned int)>
    56c2:	mov	r0, r7
    56c4:	movs	r1, #20
    56c6:	bl	f924 <operator delete(void*, unsigned int)>
    56ca:	mov	r0, r5
    56cc:	movs	r1, #20
    56ce:	bl	f924 <operator delete(void*, unsigned int)>
    56d2:	b.n	4f82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
        }
        else
        { 
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    56d4:	str	r4, [sp, #0]
    56d6:	ldr	r3, [sp, #8]
    56d8:	add	r2, sp, #80	; 0x50
    56da:	mov	r1, r8
    56dc:	mov	r0, r9
    56de:	bl	43dc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    56e2:	cbz	r0, 570a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    56e4:	add	r0, sp, #80	; 0x50
    56e6:	bl	11440 <strlen>
    56ea:	mov	r1, r0
    56ec:	add	r0, sp, #80	; 0x50
    56ee:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    56f2:	ldr	r0, [pc, #524]	; (5900 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa3c>)
    56f4:	bl	f780 <Print::println()>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    56f8:	ldr.w	r0, [sl, #84]	; 0x54
    56fc:	ldr	r3, [r0, #0]
    56fe:	add	r1, sp, #80	; 0x50
    5700:	ldr	r3, [r3, #16]
    5702:	blx	r3
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    5704:	cmp	r0, #0
    5706:	bne.w	54e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x620>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    570a:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    570c:	str.w	fp, [r5]
    5710:	ldr	r1, [pc, #496]	; (5904 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5712:	cmp	r2, #0
    5714:	beq.n	5802 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5716:	ldr	r3, [r2, #16]
    5718:	subs	r3, #1
    571a:	str	r3, [r2, #16]
    571c:	cmp	r3, #0
    571e:	bne.n	5802 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5720:	ldr	r4, [r5, #16]
    5722:	cmp	r4, #0
    5724:	beq.n	5802 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5726:	ldr	r2, [r4, #0]
    5728:	ldr	r3, [pc, #476]	; (5908 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa44>)
    572a:	ldr	r2, [r2, #32]
    572c:	cmp	r2, r3
    572e:	bne.w	5878 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9b4>
    5732:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5734:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5736:	cmp	r0, #0
    5738:	beq.n	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    573a:	ldr	r2, [r0, #16]
    573c:	subs	r2, #1
    573e:	str	r2, [r0, #16]
    5740:	cmp	r2, #0
    5742:	bne.n	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5744:	ldr	r5, [r4, #16]
    5746:	cmp	r5, #0
    5748:	beq.n	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    574a:	ldr	r2, [r5, #0]
    574c:	ldr	r2, [r2, #32]
    574e:	cmp	r2, r3
    5750:	bne.w	586c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a8>
    5754:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5756:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5758:	cmp	r0, #0
    575a:	beq.n	57f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    575c:	ldr	r2, [r0, #16]
    575e:	subs	r2, #1
    5760:	str	r2, [r0, #16]
    5762:	cmp	r2, #0
    5764:	bne.n	57f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5766:	ldr	r6, [r5, #16]
    5768:	cmp	r6, #0
    576a:	beq.n	57f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    576c:	ldr	r2, [r6, #0]
    576e:	ldr	r2, [r2, #32]
    5770:	cmp	r2, r3
    5772:	bne.w	58aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e6>
    5776:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5778:	str.w	fp, [r6]
    577c:	ldr	r0, [pc, #388]	; (5904 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    577e:	cmp	r1, #0
    5780:	beq.n	57ea <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5782:	ldr	r2, [r1, #16]
    5784:	subs	r2, #1
    5786:	str	r2, [r1, #16]
    5788:	cbnz	r2, 57ea <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    578a:	ldr	r7, [r6, #16]
    578c:	cbz	r7, 57ea <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    578e:	ldr	r2, [r7, #0]
    5790:	ldr	r2, [r2, #32]
    5792:	cmp	r2, r3
    5794:	bne.w	58c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa02>
    5798:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    579a:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    579c:	cbz	r1, 57e2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    579e:	ldr	r2, [r1, #16]
    57a0:	subs	r2, #1
    57a2:	str	r2, [r1, #16]
    57a4:	cbnz	r2, 57e2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    57a6:	ldr.w	r8, [r7, #16]
    57aa:	cmp.w	r8, #0
    57ae:	beq.n	57e2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    57b0:	ldr.w	r2, [r8]
    57b4:	ldr	r2, [r2, #32]
    57b6:	cmp	r2, r3
    57b8:	bne.w	58e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa20>
    57bc:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    57c0:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    57c4:	cbz	r2, 57da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    57c6:	ldr	r3, [r2, #16]
    57c8:	subs	r3, #1
    57ca:	str	r3, [r2, #16]
    57cc:	cbnz	r3, 57da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    57ce:	ldr.w	r0, [r8, #16]
    57d2:	cbz	r0, 57da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    57d4:	ldr	r3, [r0, #0]
    57d6:	ldr	r3, [r3, #32]
    57d8:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    57da:	mov	r0, r8
    57dc:	movs	r1, #20
    57de:	bl	f924 <operator delete(void*, unsigned int)>
    57e2:	mov	r0, r7
    57e4:	movs	r1, #20
    57e6:	bl	f924 <operator delete(void*, unsigned int)>
    57ea:	mov	r0, r6
    57ec:	movs	r1, #20
    57ee:	bl	f924 <operator delete(void*, unsigned int)>
    57f2:	mov	r0, r5
    57f4:	movs	r1, #20
    57f6:	bl	f924 <operator delete(void*, unsigned int)>
    57fa:	mov	r0, r4
    57fc:	movs	r1, #20
    57fe:	bl	f924 <operator delete(void*, unsigned int)>
    5802:	ldr	r3, [sp, #56]	; 0x38
    5804:	movs	r4, #0
    5806:	b.n	52a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5808:	ldr	r1, [pc, #256]	; (590c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    580a:	b.n	5444 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
    580c:	ldr	r1, [pc, #252]	; (590c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    580e:	b.n	53bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    5810:	mov	r0, r2
    5812:	blx	r3
    5814:	b.n	5338 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5816:	blx	r2
    5818:	mov	r1, r0
    581a:	b.n	53bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    581c:	blx	r2
    581e:	b.n	54ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x606>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5820:	blx	r2
    5822:	mov	r1, r0
    5824:	b.n	5444 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    5826:	blx	r1
    5828:	b.n	5338 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    582a:	mov	r0, r5
    582c:	blx	r2
    582e:	b.w	4f82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    5832:	mov	r0, r7
    5834:	blx	r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5836:	mov	r0, r5
    5838:	movs	r1, #20
    583a:	bl	f924 <operator delete(void*, unsigned int)>
    583e:	b.w	4f82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    5842:	mov	r4, r3
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    5844:	mov	r0, r4
    5846:	add.w	sp, sp, #596	; 0x254
    584a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    584e:	mov	r0, r2
    5850:	blx	r1
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5852:	mov	r0, r7
    5854:	movs	r1, #20
    5856:	bl	f924 <operator delete(void*, unsigned int)>
    585a:	b.n	56ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    585c:	mov	r0, r5
    585e:	blx	r2
    5860:	b.n	50b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    5862:	str	r2, [sp, #20]
    5864:	ldr	r0, [sp, #16]
    5866:	blx	r1
    5868:	ldr	r2, [sp, #20]
    586a:	b.n	56ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    586c:	mov	r0, r5
    586e:	blx	r2
    5870:	b.n	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5872:	mov	r0, r6
    5874:	blx	r2
    5876:	b.n	50ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    5878:	mov	r0, r4
    587a:	blx	r2
    587c:	b.n	5802 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    587e:	mov	r0, r4
    5880:	blx	r2
    5882:	b.n	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5884:	str	r2, [sp, #24]
    5886:	ldr	r0, [sp, #20]
    5888:	blx	r1
    588a:	ldr	r2, [sp, #24]
    588c:	b.n	56ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    588e:	mov	r0, r7
    5890:	blx	r2
    5892:	b.n	51c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5894:	mov	r0, r5
    5896:	blx	r2
    5898:	b.n	528a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    589a:	str	r2, [sp, #28]
    589c:	ldr	r0, [sp, #24]
    589e:	blx	r1
    58a0:	ldr	r2, [sp, #28]
    58a2:	b.n	56a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    58a4:	mov	r0, r8
    58a6:	blx	r2
    58a8:	b.n	51bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    58aa:	mov	r0, r6
    58ac:	blx	r2
    58ae:	b.n	57f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    58b0:	str	r2, [sp, #32]
    58b2:	ldr	r0, [sp, #28]
    58b4:	blx	r1
    58b6:	ldr	r2, [sp, #32]
    58b8:	b.n	5696 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    58ba:	mov	r0, r6
    58bc:	blx	r2
    58be:	b.n	5282 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    58c0:	mov	r0, r7
    58c2:	blx	r2
    58c4:	b.n	527a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    58c6:	mov	r0, r7
    58c8:	blx	r2
    58ca:	b.n	57ea <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    58cc:	mov	r0, r9
    58ce:	blx	r2
    58d0:	b.n	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    58d2:	mov	r0, sl
    58d4:	blx	r2
    58d6:	b.n	51ac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    58d8:	str	r2, [sp, #32]
    58da:	mov	r0, r1
    58dc:	mov	r3, lr
    58de:	blx	r3
    58e0:	ldr	r2, [sp, #32]
    58e2:	b.n	568a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    58e4:	mov	r0, r8
    58e6:	blx	r2
    58e8:	b.n	57e2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    58ea:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    58ec:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    58f0:	cmp	r2, #0
    58f2:	beq.w	5292 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    58f6:	b.n	51da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x316>
    58f8:	ldr	r3, [sp, #56]	; 0x38
    58fa:	ldr.w	fp, [pc, #8]	; 5904 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>
    58fe:	b.n	52a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
    5900:	.word	0x1fff0c58
    5904:	.word	0x0001491c
    5908:	.word	0x00000f31
    590c:	.word	0x00014ad0

00005910 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5910:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5914:	mov	r6, r1
    5916:	subw	sp, sp, #2696	; 0xa88
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    591a:	cmp.w	r3, #4294967295
    591e:	ite	ne
    5920:	movne	r7, r3
    5922:	moveq	r7, r2
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5924:	mov	r4, r0
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    5926:	mov	r1, r0
    5928:	mov	r2, r6
    592a:	add	r0, sp, #792	; 0x318
    592c:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    5930:	mov	r2, r7
    5932:	mov	r1, r4
    5934:	add.w	r0, sp, #1064	; 0x428
    5938:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    593c:	ldr	r2, [sp, #792]	; 0x318
    593e:	mov	r1, r4
    5940:	add.w	r0, sp, #1336	; 0x538
    5944:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if(p1.isdir) 
    5948:	ldrb.w	r3, [sp, #804]	; 0x324
    594c:	cbz	r3, 5958 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    594e:	ldrb.w	r3, [sp, #805]	; 0x325
    5952:	cmp	r3, #0
    5954:	beq.w	5b04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f4>
      { ScanDir(p1.store, handle) ; // in case scan directory
        WriteIndexRecord(handle, p1);
      }
    }

    Record p1o = p1;
    5958:	mov.w	r2, #272	; 0x110
    595c:	add	r1, sp, #792	; 0x318
    595e:	add.w	r0, sp, #1608	; 0x648
    5962:	bl	db58 <memcpy>
    Record p2o = p2;
    5966:	mov.w	r2, #272	; 0x110
    596a:	add.w	r1, sp, #1064	; 0x428
    596e:	add.w	r0, sp, #1880	; 0x758
    5972:	bl	db58 <memcpy>
    Record p3o = p3;

    char oldName[MAX_FILENAME_LEN];
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5976:	add	r2, sp, #280	; 0x118
    5978:	mov.w	r3, #256	; 0x100
    597c:	mov	r1, r6
    597e:	mov	r0, r4
    5980:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
    uint32_t jx=-1;
    Record pxo;

      // remove index from old parent
      Record px;
      if(p3.child==handle)
    5984:	ldr.w	r8, [sp, #1340]	; 0x53c
    5988:	cmp	r6, r8
    598a:	beq.w	5aca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1ba>
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
    598e:	add	r0, sp, #8
    5990:	mov	r2, r8
    5992:	mov	r1, r4
    5994:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5998:	add	r1, sp, #8
    599a:	mov.w	r2, #272	; 0x110
    599e:	addw	r0, sp, #2424	; 0x978
    59a2:	bl	db58 <memcpy>
        pxo = px;
    59a6:	addw	r1, sp, #2424	; 0x978
    59aa:	addw	r0, sp, #2152	; 0x868
    59ae:	mov.w	r2, #272	; 0x110
    59b2:	bl	db58 <memcpy>
        while(handle != px.sibling)
    59b6:	ldr.w	r5, [sp, #2432]	; 0x980
    59ba:	cmp	r6, r5
    59bc:	bne.n	59c2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb2>
    59be:	b.n	5b1c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x20c>
    59c0:	mov	r5, r3
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
    59c2:	mov	r2, r5
    59c4:	mov	r1, r4
    59c6:	add	r0, sp, #8
    59c8:	bl	26ac <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    59cc:	mov.w	r2, #272	; 0x110
    59d0:	add	r1, sp, #8
    59d2:	addw	r0, sp, #2424	; 0x978
    59d6:	bl	db58 <memcpy>
          pxo = px;
    59da:	mov.w	r2, #272	; 0x110
    59de:	addw	r1, sp, #2424	; 0x978
    59e2:	addw	r0, sp, #2152	; 0x868
    59e6:	bl	db58 <memcpy>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    59ea:	ldr.w	r3, [sp, #2432]	; 0x980
    59ee:	cmp	r6, r3
    59f0:	bne.n	59c0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb0>
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    59f2:	ldr	r3, [sp, #800]	; 0x320
    59f4:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    59f8:	addw	r2, sp, #2424	; 0x978
    59fc:	mov	r1, r5
    59fe:	mov	r0, r4
    5a00:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    5a04:	ldrh.w	r0, [sp, #1078]	; 0x436
      p1.sibling = p2.child;
    5a08:	ldr.w	r3, [sp, #1068]	; 0x42c
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    5a0c:	strh.w	r0, [sp, #806]	; 0x326
      p1.sibling = p2.child;
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    5a10:	add	r2, sp, #792	; 0x318
    5a12:	mov	r1, r6
    5a14:	mov	r0, r4
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    5a16:	str	r3, [sp, #800]	; 0x320
        px.sibling = p1.sibling;
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
    5a18:	str	r7, [sp, #792]	; 0x318
      p1.store = p2.store;
      p1.sibling = p2.child;
      p2.child = handle;
    5a1a:	str.w	r6, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    5a1e:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    5a22:	add.w	r2, sp, #1064	; 0x428
    5a26:	mov	r1, r7
    5a28:	mov	r0, r4
    5a2a:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      // now working on disk storage
      char newName[MAX_FILENAME_LEN];
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5a2e:	mov.w	r3, #256	; 0x100
    5a32:	mov	r1, r6
    5a34:	add	r2, sp, #536	; 0x218
    5a36:	mov	r0, r4
    5a38:	bl	2b0c <MTPStorage_SD::ConstructFilename(int, char*, int)>
        Serial.print(p1.store); Serial.print(": ");Serial.println(newName);
        dumpIndexList();
      #endif


    if(p1o.store == p2o.store)
    5a3c:	ldrh.w	r1, [sp, #1622]	; 0x656
    5a40:	ldrh.w	r3, [sp, #1894]	; 0x766
    5a44:	cmp	r1, r3
    5a46:	beq.n	5ae2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1d2>
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    5a48:	ldrb.w	r2, [sp, #1620]	; 0x654
    5a4c:	cbz	r2, 5a90 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x180>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    }
    else
    { // move directory cross mtp-disks
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5a4e:	add	r2, sp, #536	; 0x218
    5a50:	str	r2, [sp, #0]
    5a52:	adds	r0, r4, #4
    5a54:	add	r2, sp, #280	; 0x118
    5a56:	bl	4e90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5a5a:	cmp	r0, #0
    5a5c:	bne.n	5af6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e6>
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    5a5e:	mov	r1, r5
    5a60:	addw	r2, sp, #2152	; 0x868
    5a64:	mov	r0, r4
    5a66:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    5a6a:	add.w	r2, sp, #1608	; 0x648
    5a6e:	mov	r1, r6
    5a70:	mov	r0, r4
    5a72:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    5a76:	add.w	r2, sp, #1880	; 0x758
    5a7a:	mov	r1, r7
    5a7c:	mov	r0, r4
    5a7e:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    5a82:	mov.w	r8, #0
  }
    5a86:	mov	r0, r8
    5a88:	addw	sp, sp, #2696	; 0xa88
    5a8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5a90:	add	r2, sp, #536	; 0x218
    5a92:	str	r2, [sp, #0]
    5a94:	adds	r0, r4, #4
    5a96:	add	r2, sp, #280	; 0x118
    5a98:	bl	43dc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5a9c:	mov	r8, r0
    5a9e:	cmp	r0, #0
    5aa0:	beq.n	5a5e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    5aa2:	add	r0, sp, #280	; 0x118
    5aa4:	bl	11440 <strlen>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5aa8:	ldrh.w	r5, [sp, #1894]	; 0x766
    5aac:	mov	r1, r0
    5aae:	add.w	r4, r4, r5, lsl #2
    5ab2:	add	r0, sp, #280	; 0x118
    5ab4:	bl	ddcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    5ab8:	ldr	r0, [pc, #100]	; (5b20 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x210>)
    5aba:	bl	f780 <Print::println()>
    5abe:	ldr	r0, [r4, #88]	; 0x58
    5ac0:	ldr	r3, [r0, #0]
    5ac2:	add	r1, sp, #280	; 0x118
    5ac4:	ldr	r3, [r3, #16]
    5ac6:	blx	r3
    5ac8:	b.n	5a86 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x176>

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5aca:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(p1.parent, p3);    
    5acc:	ldr	r1, [sp, #792]	; 0x318

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5ace:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    5ad2:	add.w	r2, sp, #1336	; 0x538
    5ad6:	mov	r0, r4
    5ad8:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    #if DEBUG>1
      Serial.print(p1.store); Serial.print(": "); Serial.println(oldName);
      dumpIndexList();
    #endif

    uint32_t jx=-1;
    5adc:	mov.w	r5, #4294967295
    5ae0:	b.n	5a04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf4>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    5ae2:	add.w	r1, r4, r1, lsl #2
    5ae6:	add	r2, sp, #536	; 0x218
    5ae8:	ldr	r0, [r1, #88]	; 0x58
    5aea:	ldr	r3, [r0, #0]
    5aec:	add	r1, sp, #280	; 0x118
    5aee:	ldr	r3, [r3, #12]
    5af0:	blx	r3
      #endif


    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5af2:	cmp	r0, #0
    5af4:	beq.n	5a5e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    5af6:	mov.w	r8, #1
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
  }
    5afa:	mov	r0, r8
    5afc:	addw	sp, sp, #2696	; 0xa88
    5b00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(p1.parent); 

    if(p1.isdir) 
    { if(!p1.scanned) 
      { ScanDir(p1.store, handle) ; // in case scan directory
    5b04:	mov	r2, r6
    5b06:	ldrh.w	r1, [sp, #806]	; 0x326
    5b0a:	mov	r0, r4
    5b0c:	bl	3298 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    5b10:	add	r2, sp, #792	; 0x318
    5b12:	mov	r1, r6
    5b14:	mov	r0, r4
    5b16:	bl	24cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    5b1a:	b.n	5958 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    5b1c:	mov	r5, r8
    5b1e:	b.n	59f2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>
    5b20:	.word	0x1fff0c58

00005b24 <MTPD::GetNumObjects(unsigned long, unsigned long)>:

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5b24:	push	{r4, r5, r6, lr}
    5b26:	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    5b28:	ldr	r0, [r0, #0]
    5b2a:	ldr	r3, [r0, #0]

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5b2c:	subs	r5, r1, #1
    storage_->StartGetObjectHandles(store, parent);
    5b2e:	ldr	r3, [r3, #28]
    5b30:	mov	r1, r5
    5b32:	blx	r3
    int num = 0;
    5b34:	movs	r4, #0
    5b36:	b.n	5b3a <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    while (storage_->GetNextObjectHandle(store)) num++;
    5b38:	adds	r4, #1
    5b3a:	ldr	r0, [r6, #0]
    5b3c:	ldr	r3, [r0, #0]
    5b3e:	mov	r1, r5
    5b40:	ldr	r3, [r3, #32]
    5b42:	blx	r3
    5b44:	cmp	r0, #0
    5b46:	bne.n	5b38 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    return num;
  }
    5b48:	mov	r0, r4
    5b4a:	pop	{r4, r5, r6, pc}

00005b4c <MTPD::get_buffer()>:


#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    5b4c:	push	{r4, lr}
    5b4e:	mov	r4, r0
    5b50:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    5b52:	cbnz	r0, 5b5c <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    5b54:	bl	e930 <usb_malloc>
    5b58:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    5b5a:	cbz	r0, 5b5e <MTPD::get_buffer()+0x12>
    5b5c:	pop	{r4, pc}
    5b5e:	bl	2134 <mtp_yield()>
    5b62:	b.n	5b50 <MTPD::get_buffer()+0x4>

00005b64 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b64:	cmp	r2, #0
    5b66:	ble.n	5bc6 <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    5b68:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b6c:	mov.w	r9, #0
    5b70:	mov	r6, r2
    5b72:	mov	r7, r1
    5b74:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5b76:	mov	r8, r9
    5b78:	b.n	5b7e <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b7a:	cmp	r6, r9
    5b7c:	ble.n	5bc2 <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    5b7e:	mov	r0, r5
    5b80:	bl	5b4c <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    5b84:	ldr	r3, [r5, #4]
    5b86:	ldrh.w	r0, [r3], #8
    5b8a:	rsb	r2, r9, r6
    5b8e:	rsb	r4, r0, #64	; 0x40
    5b92:	cmp	r4, r2
    5b94:	it	ge
    5b96:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    5b98:	add.w	r1, r7, r9
    5b9c:	add	r0, r3
    5b9e:	mov	r2, r4
    5ba0:	bl	db58 <memcpy>
        data_buffer_->len += to_copy;
    5ba4:	ldr	r1, [r5, #4]
    5ba6:	ldrh	r3, [r1, #0]
    5ba8:	add	r3, r4
    5baa:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5bac:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    5bae:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    5bb0:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5bb2:	bne.n	5b7a <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    5bb4:	movs	r0, #4
    5bb6:	bl	eaa8 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5bba:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5bbc:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5bc0:	bgt.n	5b7e <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    5bc2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bc6:	bx	lr

00005bc8 <MTPD::writestring(char const*)>:
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5bc8:	push	{r4, r5, lr}
    if (*str) 
    5bca:	ldrb	r3, [r1, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5bcc:	sub	sp, #12
    5bce:	mov	r4, r0
    if (*str) 
    5bd0:	cbz	r3, 5c2c <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    5bd2:	mov	r0, r1
    5bd4:	mov	r5, r1
    5bd6:	bl	11440 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5bda:	ldrb	r1, [r4, #8]
    5bdc:	adds	r0, #1
    5bde:	strb.w	r0, [sp, #3]
    5be2:	cbz	r1, 5c3e <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    5be4:	ldr	r3, [r4, #12]
    5be6:	adds	r3, #1
    5be8:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5bea:	ldrb	r2, [r5, #0]
    5bec:	cbnz	r2, 5bfc <MTPD::writestring(char const*)+0x34>
    5bee:	b.n	5c24 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5bf0:	ldr	r3, [r4, #12]
    5bf2:	adds	r3, #2
    5bf4:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5bf6:	ldrb.w	r2, [r5, #1]!
    5bfa:	cbz	r2, 5c1a <MTPD::writestring(char const*)+0x52>
    5bfc:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c00:	cmp	r1, #0
    5c02:	bne.n	5bf0 <MTPD::writestring(char const*)+0x28>
    5c04:	movs	r2, #2
    5c06:	add.w	r1, sp, #6
    5c0a:	mov	r0, r4
    5c0c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c10:	ldrb.w	r2, [r5, #1]!
    5c14:	ldrb	r1, [r4, #8]
    5c16:	cmp	r2, #0
    5c18:	bne.n	5bfc <MTPD::writestring(char const*)+0x34>
    5c1a:	movs	r3, #0
    5c1c:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c20:	cbz	r1, 5c62 <MTPD::writestring(char const*)+0x9a>
    5c22:	ldr	r3, [r4, #12]
      write_length_ += len;
    5c24:	adds	r3, #2
    5c26:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5c28:	add	sp, #12
    5c2a:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c2c:	ldrb	r2, [r0, #8]
    5c2e:	strb.w	r3, [sp, #2]
    5c32:	cbz	r2, 5c54 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    5c34:	ldr	r3, [r0, #12]
    5c36:	adds	r3, #1
    5c38:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5c3a:	add	sp, #12
    5c3c:	pop	{r4, r5, pc}
    5c3e:	movs	r2, #1
    5c40:	add.w	r1, sp, #3
    5c44:	mov	r0, r4
    5c46:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c4a:	ldrb	r2, [r5, #0]
    5c4c:	ldrb	r1, [r4, #8]
    5c4e:	cmp	r2, #0
    5c50:	bne.n	5bfc <MTPD::writestring(char const*)+0x34>
    5c52:	b.n	5c1a <MTPD::writestring(char const*)+0x52>
    5c54:	movs	r2, #1
    5c56:	add.w	r1, sp, #2
    5c5a:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    5c5e:	add	sp, #12
    5c60:	pop	{r4, r5, pc}
    5c62:	mov	r0, r4
    5c64:	movs	r2, #2
    5c66:	add	r1, sp, #4
    5c68:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5c6c:	add	sp, #12
    5c6e:	pop	{r4, r5, pc}

00005c70 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5c70:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c72:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5c74:	sub	sp, #8
    5c76:	mov	r4, r0
    5c78:	mov	r5, r1
    5c7a:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c7e:	cbz	r3, 5cb8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    5c80:	ldr	r3, [r0, #12]
    5c82:	movw	r2, #65535	; 0xffff
    5c86:	adds	r3, #2
    5c88:	str	r3, [r0, #12]
    5c8a:	strh.w	r2, [sp, #6]
    5c8e:	adds	r3, #2
    5c90:	movs	r2, #0
    5c92:	str	r3, [r4, #12]
    5c94:	strb.w	r2, [sp, #2]
    5c98:	adds	r3, #1
    5c9a:	str	r3, [r4, #12]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5c9c:	movw	r3, #54274	; 0xd402
    5ca0:	cmp	r5, r3
    5ca2:	beq.n	5cf4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ca4:	ldrb	r3, [r4, #8]
    5ca6:	movs	r2, #0
    5ca8:	strb.w	r2, [sp, #3]
    5cac:	cbz	r3, 5d10 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    5cae:	ldr	r3, [r4, #12]
    5cb0:	adds	r3, #1
    5cb2:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5cb4:	add	sp, #8
    5cb6:	pop	{r4, r5, r6, pc}
    5cb8:	movs	r2, #2
    5cba:	add	r1, sp, #4
    5cbc:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5cc0:	ldrb	r6, [r4, #8]
    5cc2:	movw	r3, #65535	; 0xffff
    5cc6:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cca:	cbnz	r6, 5d20 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    5ccc:	movs	r2, #2
    5cce:	add.w	r1, sp, #6
    5cd2:	mov	r0, r4
    5cd4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5cd8:	ldrb	r3, [r4, #8]
    5cda:	strb.w	r6, [sp, #2]
    5cde:	cbnz	r3, 5d24 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    5ce0:	movs	r2, #1
    5ce2:	add.w	r1, sp, #2
    5ce6:	mov	r0, r4
    5ce8:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5cec:	movw	r3, #54274	; 0xd402
    5cf0:	cmp	r5, r3
    5cf2:	bne.n	5ca4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5cf4:	ldr	r1, [pc, #48]	; (5d28 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    5cf6:	mov	r0, r4
    5cf8:	bl	5bc8 <MTPD::writestring(char const*)>
    5cfc:	ldr	r1, [pc, #40]	; (5d28 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    5cfe:	mov	r0, r4
    5d00:	bl	5bc8 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d04:	ldrb	r3, [r4, #8]
    5d06:	movs	r2, #0
    5d08:	strb.w	r2, [sp, #3]
    5d0c:	cmp	r3, #0
    5d0e:	bne.n	5cae <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    5d10:	mov	r0, r4
    5d12:	movs	r2, #1
    5d14:	add.w	r1, sp, #3
    5d18:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5d1c:	add	sp, #8
    5d1e:	pop	{r4, r5, r6, pc}
    5d20:	ldr	r3, [r4, #12]
    5d22:	b.n	5c8e <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    5d24:	ldr	r3, [r4, #12]
    5d26:	b.n	5c98 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    5d28:	.word	0x00014c6c

00005d2c <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5d2c:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d2e:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5d30:	sub	sp, #68	; 0x44
    5d32:	movs	r5, #100	; 0x64
    5d34:	mov	r4, r0
    5d36:	strh.w	r5, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d3a:	cmp	r3, #0
    5d3c:	beq.w	5e8c <MTPD::WriteDescriptor()+0x160>
      write_length_ += len;
    5d40:	ldr	r3, [r0, #12]
    5d42:	movs	r2, #6
    5d44:	adds	r3, #2
    5d46:	str	r3, [r0, #12]
    5d48:	str	r2, [sp, #24]
    5d4a:	adds	r3, #4
    5d4c:	movs	r2, #100	; 0x64
    5d4e:	str	r3, [r4, #12]
    5d50:	strh.w	r2, [sp, #6]
    5d54:	adds	r3, #2
    5d56:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    5d58:	ldr	r1, [pc, #556]	; (5f88 <MTPD::WriteDescriptor()+0x25c>)
    5d5a:	mov	r0, r4
    5d5c:	bl	5bc8 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d60:	ldrb	r3, [r4, #8]
    5d62:	movs	r2, #0
    5d64:	strh.w	r2, [sp, #4]
    5d68:	cmp	r3, #0
    5d6a:	beq.w	5f46 <MTPD::WriteDescriptor()+0x21a>
      write_length_ += len;
    5d6e:	ldr	r3, [r4, #12]
    5d70:	movs	r2, #20
    5d72:	adds	r3, #2
    5d74:	str	r3, [r4, #12]
    5d76:	str	r2, [sp, #20]
    5d78:	adds	r3, #4
    5d7a:	str	r3, [r4, #12]
    5d7c:	movs	r6, #1
    5d7e:	ldr	r5, [pc, #524]	; (5f8c <MTPD::WriteDescriptor()+0x260>)
    5d80:	movw	r3, #4097	; 0x1001
    5d84:	add.w	r7, r5, #38	; 0x26
    5d88:	b.n	5d9a <MTPD::WriteDescriptor()+0x6e>
    5d8a:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5d8c:	cmp	r5, r7
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5d8e:	add.w	r3, r3, #2
    5d92:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5d94:	beq.n	5db4 <MTPD::WriteDescriptor()+0x88>
    5d96:	ldrh.w	r3, [r5, #2]!
    5d9a:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d9e:	cmp	r6, #0
    5da0:	bne.n	5d8a <MTPD::WriteDescriptor()+0x5e>
    5da2:	movs	r2, #2
    5da4:	add.w	r1, sp, #10
    5da8:	mov	r0, r4
    5daa:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5dae:	cmp	r5, r7
    5db0:	ldrb	r6, [r4, #8]
    5db2:	bne.n	5d96 <MTPD::WriteDescriptor()+0x6a>
    5db4:	movs	r2, #4
    5db6:	str	r2, [sp, #28]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5db8:	cmp	r6, #0
    5dba:	beq.w	5f3a <MTPD::WriteDescriptor()+0x20e>
      write_length_ += len;
    5dbe:	ldr	r3, [r4, #12]
    5dc0:	adds	r3, #4
    5dc2:	str	r3, [r4, #12]
    5dc4:	ldr	r5, [pc, #456]	; (5f90 <MTPD::WriteDescriptor()+0x264>)
    5dc6:	movw	r3, #16388	; 0x4004
    5dca:	adds	r7, r5, #6
    5dcc:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5dd0:	cbz	r6, 5dea <MTPD::WriteDescriptor()+0xbe>
      write_length_ += len;
    5dd2:	ldr	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5dd4:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5dd6:	add.w	r3, r3, #2
    5dda:	str	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5ddc:	beq.n	5dfa <MTPD::WriteDescriptor()+0xce>
    5dde:	ldrh.w	r3, [r5, #2]!
    5de2:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5de6:	cmp	r6, #0
    5de8:	bne.n	5dd2 <MTPD::WriteDescriptor()+0xa6>
    5dea:	movs	r2, #2
    5dec:	add	r1, sp, #12
    5dee:	mov	r0, r4
    5df0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5df4:	cmp	r7, r5
    5df6:	ldrb	r6, [r4, #8]
    5df8:	bne.n	5dde <MTPD::WriteDescriptor()+0xb2>
    5dfa:	movs	r3, #1
    5dfc:	str	r3, [sp, #40]	; 0x28
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5dfe:	cmp	r6, #0
    5e00:	beq.n	5ec0 <MTPD::WriteDescriptor()+0x194>
      write_length_ += len;
    5e02:	ldr	r3, [r4, #12]
    5e04:	movw	r2, #54274	; 0xd402
    5e08:	adds	r3, #4
    5e0a:	str	r3, [r4, #12]
    5e0c:	strh.w	r2, [sp, #18]
    5e10:	adds	r3, #2
    5e12:	movs	r2, #0
    5e14:	str	r3, [r4, #12]
    5e16:	str	r2, [sp, #36]	; 0x24
    5e18:	adds	r3, #4
    5e1a:	movs	r2, #2
    5e1c:	str	r3, [r4, #12]
    5e1e:	str	r2, [sp, #32]
    5e20:	adds	r3, #4
    5e22:	mov.w	r2, #12288	; 0x3000
    5e26:	str	r3, [r4, #12]
    5e28:	strh.w	r2, [sp, #16]
    5e2c:	adds	r3, #2
    5e2e:	movw	r2, #12289	; 0x3001
    5e32:	str	r3, [r4, #12]
    5e34:	strh.w	r2, [sp, #14]
    5e38:	adds	r3, #2
    5e3a:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    5e3c:	ldr	r1, [pc, #340]	; (5f94 <MTPD::WriteDescriptor()+0x268>)
    5e3e:	mov	r0, r4
    5e40:	bl	5bc8 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    5e44:	ldr	r1, [pc, #336]	; (5f98 <MTPD::WriteDescriptor()+0x26c>)
    5e46:	mov	r0, r4
    5e48:	bl	5bc8 <MTPD::writestring(char const*)>
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    5e4c:	vldr	s0, [pc, #332]	; 5f9c <MTPD::WriteDescriptor()+0x270>
    5e50:	add	r2, sp, #44	; 0x2c
    5e52:	movs	r1, #2
    5e54:	movs	r0, #3
    5e56:	bl	e27c <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    5e5a:	movs	r2, #20
    5e5c:	ldr	r1, [pc, #320]	; (5fa0 <MTPD::WriteDescriptor()+0x274>)
    5e5e:	add	r0, sp, #44	; 0x2c
    5e60:	bl	1139c <strlcat>
    writestring( buf );    
    5e64:	mov	r0, r4
    5e66:	add	r1, sp, #44	; 0x2c
    5e68:	bl	5bc8 <MTPD::writestring(char const*)>
    5e6c:	ldr	r2, [pc, #308]	; (5fa4 <MTPD::WriteDescriptor()+0x278>)
    5e6e:	add	r3, sp, #44	; 0x2c
    5e70:	add.w	r0, sp, #54	; 0x36
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    5e74:	ldrh.w	r1, [r2, #2]!
    5e78:	strb.w	r1, [r3], #1
    5e7c:	cmp	r3, r0
    5e7e:	bne.n	5e74 <MTPD::WriteDescriptor()+0x148>
    #pragma GCC diagnostic pop
    writestring(buf);    
    5e80:	add	r1, sp, #44	; 0x2c
    5e82:	mov	r0, r4
    5e84:	bl	5bc8 <MTPD::writestring(char const*)>
  }
    5e88:	add	sp, #68	; 0x44
    5e8a:	pop	{r4, r5, r6, r7, pc}
    5e8c:	movs	r2, #2
    5e8e:	add	r1, sp, #8
    5e90:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5e94:	ldrb	r3, [r4, #8]
    5e96:	movs	r2, #6
    5e98:	str	r2, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e9a:	cmp	r3, #0
    5e9c:	bne.n	5f66 <MTPD::WriteDescriptor()+0x23a>
    5e9e:	movs	r2, #4
    5ea0:	add	r1, sp, #24
    5ea2:	mov	r0, r4
    5ea4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5ea8:	ldrb	r3, [r4, #8]
    5eaa:	strh.w	r5, [sp, #6]
    5eae:	cmp	r3, #0
    5eb0:	bne.n	5f6a <MTPD::WriteDescriptor()+0x23e>
    5eb2:	movs	r2, #2
    5eb4:	add.w	r1, sp, #6
    5eb8:	mov	r0, r4
    5eba:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5ebe:	b.n	5d58 <MTPD::WriteDescriptor()+0x2c>
    5ec0:	movs	r2, #4
    5ec2:	add	r1, sp, #40	; 0x28
    5ec4:	mov	r0, r4
    5ec6:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5eca:	ldrb	r3, [r4, #8]
    5ecc:	movw	r2, #54274	; 0xd402
    5ed0:	strh.w	r2, [sp, #18]
    5ed4:	cmp	r3, #0
    5ed6:	bne.n	5f6e <MTPD::WriteDescriptor()+0x242>
    5ed8:	movs	r2, #2
    5eda:	add.w	r1, sp, #18
    5ede:	mov	r0, r4
    5ee0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5ee4:	ldrb	r3, [r4, #8]
    5ee6:	str	r6, [sp, #36]	; 0x24
    5ee8:	cmp	r3, #0
    5eea:	bne.n	5f72 <MTPD::WriteDescriptor()+0x246>
    5eec:	movs	r2, #4
    5eee:	add	r1, sp, #36	; 0x24
    5ef0:	mov	r0, r4
    5ef2:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5ef6:	ldrb	r3, [r4, #8]
    5ef8:	movs	r5, #2
    5efa:	str	r5, [sp, #32]
    5efc:	cmp	r3, #0
    5efe:	bne.n	5f76 <MTPD::WriteDescriptor()+0x24a>
    5f00:	movs	r2, #4
    5f02:	add	r1, sp, #32
    5f04:	mov	r0, r4
    5f06:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5f0a:	ldrb	r3, [r4, #8]
    5f0c:	mov.w	r2, #12288	; 0x3000
    5f10:	strh.w	r2, [sp, #16]
    5f14:	cbnz	r3, 5f7a <MTPD::WriteDescriptor()+0x24e>
    5f16:	mov	r2, r5
    5f18:	add	r1, sp, #16
    5f1a:	mov	r0, r4
    5f1c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5f20:	ldrb	r3, [r4, #8]
    5f22:	movw	r2, #12289	; 0x3001
    5f26:	strh.w	r2, [sp, #14]
    5f2a:	cbnz	r3, 5f7e <MTPD::WriteDescriptor()+0x252>
    5f2c:	mov	r2, r5
    5f2e:	add.w	r1, sp, #14
    5f32:	mov	r0, r4
    5f34:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5f38:	b.n	5e3c <MTPD::WriteDescriptor()+0x110>
    5f3a:	add	r1, sp, #28
    5f3c:	mov	r0, r4
    5f3e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5f42:	ldrb	r6, [r4, #8]
    5f44:	b.n	5dc4 <MTPD::WriteDescriptor()+0x98>
    5f46:	movs	r2, #2
    5f48:	add	r1, sp, #4
    5f4a:	mov	r0, r4
    5f4c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5f50:	ldrb	r3, [r4, #8]
    5f52:	movs	r2, #20
    5f54:	str	r2, [sp, #20]
    5f56:	cbnz	r3, 5f82 <MTPD::WriteDescriptor()+0x256>
    5f58:	movs	r2, #4
    5f5a:	add	r1, sp, #20
    5f5c:	mov	r0, r4
    5f5e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    5f62:	ldrb	r6, [r4, #8]
    5f64:	b.n	5d7e <MTPD::WriteDescriptor()+0x52>
    5f66:	ldr	r3, [r4, #12]
    5f68:	b.n	5d4a <MTPD::WriteDescriptor()+0x1e>
    5f6a:	ldr	r3, [r4, #12]
    5f6c:	b.n	5d54 <MTPD::WriteDescriptor()+0x28>
    5f6e:	ldr	r3, [r4, #12]
    5f70:	b.n	5e10 <MTPD::WriteDescriptor()+0xe4>
    5f72:	ldr	r3, [r4, #12]
    5f74:	b.n	5e18 <MTPD::WriteDescriptor()+0xec>
    5f76:	ldr	r3, [r4, #12]
    5f78:	b.n	5e20 <MTPD::WriteDescriptor()+0xf4>
    5f7a:	ldr	r3, [r4, #12]
    5f7c:	b.n	5e2c <MTPD::WriteDescriptor()+0x100>
    5f7e:	ldr	r3, [r4, #12]
    5f80:	b.n	5e38 <MTPD::WriteDescriptor()+0x10c>
    5f82:	ldr	r3, [r4, #12]
    5f84:	b.n	5d78 <MTPD::WriteDescriptor()+0x4c>
    5f86:	nop
    5f88:	.word	0x00014c74
    5f8c:	.word	0x00014c34
    5f90:	.word	0x00014cb8
    5f94:	.word	0x00014c88
    5f98:	.word	0x00014c6c
    5f9c:	.word	0x3fc51eb8
    5fa0:	.word	0x00014c90
    5fa4:	.word	0x1fff0c38

00005fa8 <MTPD::WriteStorageIDs()>:
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5fa8:	push	{r4, r5, r6, lr}
    5faa:	mov	r5, r0
    uint32_t num=storage_->get_FSCount();
    5fac:	ldr	r0, [r0, #0]
    5fae:	ldr	r2, [pc, #92]	; (600c <MTPD::WriteStorageIDs()+0x64>)
    5fb0:	ldr	r3, [r0, #0]
    5fb2:	ldr	r3, [r3, #4]
    5fb4:	cmp	r3, r2
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5fb6:	sub	sp, #8
    5fb8:	bne.n	6004 <MTPD::WriteStorageIDs()+0x5c>
    {
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    5fba:	ldr	r6, [r0, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5fbc:	ldrb	r3, [r5, #8]
    5fbe:	str	r6, [sp, #0]
    5fc0:	cbz	r3, 5ff8 <MTPD::WriteStorageIDs()+0x50>
      write_length_ += len;
    5fc2:	ldr	r3, [r5, #12]
    5fc4:	adds	r3, #4
    5fc6:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fc8:	cbz	r6, 5ff4 <MTPD::WriteStorageIDs()+0x4c>
    5fca:	movs	r4, #0
    5fcc:	b.n	5fda <MTPD::WriteStorageIDs()+0x32>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5fce:	ldr	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fd0:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5fd2:	add.w	r3, r3, #4
    5fd6:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fd8:	beq.n	5ff4 <MTPD::WriteStorageIDs()+0x4c>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5fda:	ldrb	r3, [r5, #8]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fdc:	adds	r4, #1
    5fde:	str	r4, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5fe0:	cmp	r3, #0
    5fe2:	bne.n	5fce <MTPD::WriteStorageIDs()+0x26>
    5fe4:	movs	r2, #4
    5fe6:	add.w	r1, sp, r2
    5fea:	mov	r0, r5
    5fec:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5ff0:	cmp	r6, r4
    5ff2:	bne.n	5fda <MTPD::WriteStorageIDs()+0x32>
  }
    5ff4:	add	sp, #8
    5ff6:	pop	{r4, r5, r6, pc}
    5ff8:	movs	r2, #4
    5ffa:	mov	r1, sp
    5ffc:	mov	r0, r5
    5ffe:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6002:	b.n	5fc8 <MTPD::WriteStorageIDs()+0x20>
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    6004:	blx	r3
    6006:	mov	r6, r0
    6008:	b.n	5fbc <MTPD::WriteStorageIDs()+0x14>
    600a:	nop
    600c:	.word	0x00001e55

00006010 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    6010:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    6012:	ldrb	r3, [r0, #8]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    6014:	sub	sp, #8
    6016:	mov	r4, r0
    if (write_get_length_) {
    6018:	cbnz	r3, 6064 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x54>
    601a:	mov	r5, r1
    601c:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    601e:	bl	5b24 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6022:	ldrb	r3, [r4, #8]
    6024:	str	r0, [sp, #0]
    6026:	cbz	r3, 6072 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x62>
      write_length_ += len;
    6028:	ldr	r3, [r4, #12]
    602a:	adds	r3, #4
    602c:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    602e:	ldr	r0, [r4, #0]
    6030:	ldr	r3, [r0, #0]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    6032:	subs	r5, #1
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    6034:	mov	r2, r6
    6036:	ldr	r3, [r3, #28]
    6038:	mov	r1, r5
    603a:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    603c:	ldr	r0, [r4, #0]
    603e:	ldr	r3, [r0, #0]
    6040:	mov	r1, r5
    6042:	ldr	r3, [r3, #32]
    6044:	blx	r3
    6046:	cbz	r0, 606e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6048:	ldrb	r3, [r4, #8]
    604a:	str	r0, [sp, #4]
    604c:	cbz	r3, 6056 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x46>
      write_length_ += len;
    604e:	ldr	r3, [r4, #12]
    6050:	adds	r3, #4
    6052:	str	r3, [r4, #12]
    6054:	b.n	603c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
    6056:	movs	r2, #4
    6058:	add.w	r1, sp, r2
    605c:	mov	r0, r4
    605e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6062:	b.n	603c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    6064:	bl	5b24 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    6068:	adds	r0, #1
    606a:	lsls	r0, r0, #2
    606c:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    }
  }
    606e:	add	sp, #8
    6070:	pop	{r4, r5, r6, pc}
    6072:	movs	r2, #4
    6074:	mov	r1, sp
    6076:	mov	r0, r4
    6078:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    607c:	b.n	602e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
    607e:	nop

00006080 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    6080:	push	{r4, r5, r6, r7, lr}
    6082:	mov	r4, r0
    6084:	sub	sp, #332	; 0x14c
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    6086:	ldr	r0, [r0, #0]
    6088:	add.w	r6, sp, #10
    608c:	add	r5, sp, #24
    608e:	ldr	r3, [r0, #0]
    6090:	stmia.w	sp, {r5, r6}
    6094:	add	r2, sp, #72	; 0x48
    6096:	ldr	r7, [r3, #36]	; 0x24
    6098:	add	r3, sp, #20
    609a:	blx	r7
    609c:	ldrh	r3, [r6, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    609e:	ldrb	r2, [r4, #8]
    60a0:	adds	r3, #1
    60a2:	str	r3, [sp, #28]
    60a4:	cmp	r2, #0
    60a6:	beq.n	615c <MTPD::GetObjectInfo(unsigned long)+0xdc>
      write_length_ += len;
    60a8:	ldr	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60aa:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60ac:	adds	r3, #4
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60ae:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60b0:	str	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60b2:	beq.w	628c <MTPD::GetObjectInfo(unsigned long)+0x20c>
    60b6:	movs	r2, #0
    60b8:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60bc:	adds	r3, #2
    60be:	movs	r2, #0
    60c0:	str	r3, [r4, #12]
    60c2:	strh.w	r2, [sp, #14]
    60c6:	adds	r3, #2
    60c8:	ldr	r2, [sp, #20]
    60ca:	str	r3, [r4, #12]
    60cc:	str	r2, [sp, #60]	; 0x3c
    60ce:	adds	r3, #4
    60d0:	movs	r2, #0
    60d2:	str	r3, [r4, #12]
    60d4:	strh.w	r2, [sp, #12]
    60d8:	adds	r3, #2
    60da:	movs	r2, #0
    60dc:	str	r3, [r4, #12]
    60de:	str	r2, [sp, #56]	; 0x38
    60e0:	adds	r3, #4
    60e2:	movs	r2, #0
    60e4:	str	r3, [r4, #12]
    60e6:	str	r2, [sp, #52]	; 0x34
    60e8:	adds	r3, #4
    60ea:	movs	r2, #0
    60ec:	str	r3, [r4, #12]
    60ee:	str	r2, [sp, #48]	; 0x30
    60f0:	adds	r3, #4
    60f2:	movs	r2, #0
    60f4:	str	r3, [r4, #12]
    60f6:	str	r2, [sp, #44]	; 0x2c
    60f8:	adds	r3, #4
    60fa:	movs	r2, #0
    60fc:	str	r3, [r4, #12]
    60fe:	str	r2, [sp, #40]	; 0x28
    6100:	adds	r3, #4
    6102:	movs	r2, #0
    6104:	str	r3, [r4, #12]
    6106:	str	r2, [sp, #36]	; 0x24
    6108:	adds	r3, #4
    610a:	ldr	r2, [r5, #0]
    610c:	str	r3, [r4, #12]
    610e:	str	r2, [sp, #32]
    6110:	ldr	r2, [sp, #20]
    6112:	sub.w	r2, r2, #4294967295
    6116:	clz	r2, r2
    611a:	lsrs	r2, r2, #5
    611c:	adds	r3, #4
    611e:	str	r3, [r4, #12]
    6120:	strh.w	r2, [sp, #18]
    6124:	adds	r3, #2
    6126:	movs	r2, #0
    6128:	str	r3, [r4, #12]
    612a:	str	r2, [sp, #68]	; 0x44
    612c:	adds	r3, #4
    612e:	movs	r2, #0
    6130:	str	r3, [r4, #12]
    6132:	str	r2, [sp, #64]	; 0x40
    6134:	adds	r3, #4
    6136:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    6138:	add	r1, sp, #72	; 0x48
    613a:	mov	r0, r4
    613c:	bl	5bc8 <MTPD::writestring(char const*)>
    writestring("");  // date created
    6140:	mov	r0, r4
    6142:	ldr	r1, [pc, #396]	; (62d0 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    6144:	bl	5bc8 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    6148:	mov	r0, r4
    614a:	ldr	r1, [pc, #388]	; (62d0 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    614c:	bl	5bc8 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    6150:	mov	r0, r4
    6152:	ldr	r1, [pc, #380]	; (62d0 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    6154:	bl	5bc8 <MTPD::writestring(char const*)>
  }
    6158:	add	sp, #332	; 0x14c
    615a:	pop	{r4, r5, r6, r7, pc}
    615c:	add	r1, sp, #28
    615e:	movs	r2, #4
    6160:	mov	r0, r4
    6162:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    6166:	ldr	r3, [sp, #20]
    6168:	ldrb	r6, [r4, #8]
    616a:	adds	r3, #1
    616c:	movw	r3, #12289	; 0x3001
    6170:	it	ne
    6172:	movne	r3, #0
    6174:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6178:	cmp	r6, #0
    617a:	bne.w	629e <MTPD::GetObjectInfo(unsigned long)+0x21e>
    617e:	add	r1, sp, #16
    6180:	movs	r2, #2
    6182:	mov	r0, r4
    6184:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6188:	ldrb	r3, [r4, #8]
    618a:	strh.w	r6, [sp, #14]
    618e:	cmp	r3, #0
    6190:	bne.w	62a2 <MTPD::GetObjectInfo(unsigned long)+0x222>
    6194:	movs	r2, #2
    6196:	add.w	r1, sp, #14
    619a:	mov	r0, r4
    619c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    61a0:	ldrb	r3, [r4, #8]
    61a2:	ldr	r2, [sp, #20]
    61a4:	str	r2, [sp, #60]	; 0x3c
    61a6:	cmp	r3, #0
    61a8:	bne.n	62a6 <MTPD::GetObjectInfo(unsigned long)+0x226>
    61aa:	add	r1, sp, #60	; 0x3c
    61ac:	movs	r2, #4
    61ae:	mov	r0, r4
    61b0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    61b4:	ldrb	r3, [r4, #8]
    61b6:	strh.w	r6, [sp, #12]
    61ba:	cmp	r3, #0
    61bc:	bne.n	62aa <MTPD::GetObjectInfo(unsigned long)+0x22a>
    61be:	add	r1, sp, #12
    61c0:	movs	r2, #2
    61c2:	mov	r0, r4
    61c4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    61c8:	ldrb	r3, [r4, #8]
    61ca:	str	r6, [sp, #56]	; 0x38
    61cc:	cmp	r3, #0
    61ce:	bne.n	62ae <MTPD::GetObjectInfo(unsigned long)+0x22e>
    61d0:	add	r1, sp, #56	; 0x38
    61d2:	movs	r2, #4
    61d4:	mov	r0, r4
    61d6:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    61da:	ldrb	r3, [r4, #8]
    61dc:	str	r6, [sp, #52]	; 0x34
    61de:	cmp	r3, #0
    61e0:	bne.n	62b2 <MTPD::GetObjectInfo(unsigned long)+0x232>
    61e2:	add	r1, sp, #52	; 0x34
    61e4:	movs	r2, #4
    61e6:	mov	r0, r4
    61e8:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    61ec:	ldrb	r3, [r4, #8]
    61ee:	str	r6, [sp, #48]	; 0x30
    61f0:	cmp	r3, #0
    61f2:	bne.n	62b6 <MTPD::GetObjectInfo(unsigned long)+0x236>
    61f4:	add	r1, sp, #48	; 0x30
    61f6:	movs	r2, #4
    61f8:	mov	r0, r4
    61fa:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    61fe:	ldrb	r3, [r4, #8]
    6200:	str	r6, [sp, #44]	; 0x2c
    6202:	cmp	r3, #0
    6204:	bne.n	62ba <MTPD::GetObjectInfo(unsigned long)+0x23a>
    6206:	add	r1, sp, #44	; 0x2c
    6208:	movs	r2, #4
    620a:	mov	r0, r4
    620c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6210:	ldrb	r3, [r4, #8]
    6212:	str	r6, [sp, #40]	; 0x28
    6214:	cmp	r3, #0
    6216:	bne.n	62be <MTPD::GetObjectInfo(unsigned long)+0x23e>
    6218:	add	r1, sp, #40	; 0x28
    621a:	movs	r2, #4
    621c:	mov	r0, r4
    621e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6222:	ldrb	r3, [r4, #8]
    6224:	str	r6, [sp, #36]	; 0x24
    6226:	cmp	r3, #0
    6228:	bne.n	62c2 <MTPD::GetObjectInfo(unsigned long)+0x242>
    622a:	movs	r2, #4
    622c:	add	r1, sp, #36	; 0x24
    622e:	mov	r0, r4
    6230:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6234:	ldrb	r3, [r4, #8]
    6236:	ldr	r2, [r5, #0]
    6238:	str	r2, [sp, #32]
    623a:	cmp	r3, #0
    623c:	bne.n	62c6 <MTPD::GetObjectInfo(unsigned long)+0x246>
    623e:	add	r1, sp, #32
    6240:	movs	r2, #4
    6242:	mov	r0, r4
    6244:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6248:	ldr	r3, [sp, #20]
    624a:	ldrb	r6, [r4, #8]
    624c:	sub.w	r3, r3, #4294967295
    6250:	clz	r3, r3
    6254:	lsrs	r3, r3, #5
    6256:	strh.w	r3, [sp, #18]
    625a:	cmp	r6, #0
    625c:	bne.n	62ca <MTPD::GetObjectInfo(unsigned long)+0x24a>
    625e:	add.w	r1, sp, #18
    6262:	movs	r2, #2
    6264:	mov	r0, r4
    6266:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    626a:	ldrb	r5, [r4, #8]
    626c:	str	r6, [sp, #68]	; 0x44
    626e:	cbnz	r5, 629a <MTPD::GetObjectInfo(unsigned long)+0x21a>
    6270:	add	r1, sp, #68	; 0x44
    6272:	movs	r2, #4
    6274:	mov	r0, r4
    6276:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    627a:	ldrb	r3, [r4, #8]
    627c:	str	r5, [sp, #64]	; 0x40
    627e:	cbnz	r3, 6296 <MTPD::GetObjectInfo(unsigned long)+0x216>
    6280:	add	r1, sp, #64	; 0x40
    6282:	movs	r2, #4
    6284:	mov	r0, r4
    6286:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    628a:	b.n	6138 <MTPD::GetObjectInfo(unsigned long)+0xb8>
    628c:	movw	r2, #12289	; 0x3001
    6290:	strh.w	r2, [sp, #16]
    6294:	b.n	60bc <MTPD::GetObjectInfo(unsigned long)+0x3c>
    6296:	ldr	r3, [r4, #12]
    6298:	b.n	6134 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    629a:	ldr	r3, [r4, #12]
    629c:	b.n	612c <MTPD::GetObjectInfo(unsigned long)+0xac>
    629e:	ldr	r3, [r4, #12]
    62a0:	b.n	60bc <MTPD::GetObjectInfo(unsigned long)+0x3c>
    62a2:	ldr	r3, [r4, #12]
    62a4:	b.n	60c6 <MTPD::GetObjectInfo(unsigned long)+0x46>
    62a6:	ldr	r3, [r4, #12]
    62a8:	b.n	60ce <MTPD::GetObjectInfo(unsigned long)+0x4e>
    62aa:	ldr	r3, [r4, #12]
    62ac:	b.n	60d8 <MTPD::GetObjectInfo(unsigned long)+0x58>
    62ae:	ldr	r3, [r4, #12]
    62b0:	b.n	60e0 <MTPD::GetObjectInfo(unsigned long)+0x60>
    62b2:	ldr	r3, [r4, #12]
    62b4:	b.n	60e8 <MTPD::GetObjectInfo(unsigned long)+0x68>
    62b6:	ldr	r3, [r4, #12]
    62b8:	b.n	60f0 <MTPD::GetObjectInfo(unsigned long)+0x70>
    62ba:	ldr	r3, [r4, #12]
    62bc:	b.n	60f8 <MTPD::GetObjectInfo(unsigned long)+0x78>
    62be:	ldr	r3, [r4, #12]
    62c0:	b.n	6100 <MTPD::GetObjectInfo(unsigned long)+0x80>
    62c2:	ldr	r3, [r4, #12]
    62c4:	b.n	6108 <MTPD::GetObjectInfo(unsigned long)+0x88>
    62c6:	ldr	r3, [r4, #12]
    62c8:	b.n	6110 <MTPD::GetObjectInfo(unsigned long)+0x90>
    62ca:	ldr	r3, [r4, #12]
    62cc:	b.n	6124 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    62ce:	nop
    62d0:	.word	0x00014ad0

000062d4 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    62d4:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    62d6:	ldr	r7, [pc, #96]	; (6338 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    62d8:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    62da:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    62dc:	sub	sp, #12
    62de:	mov	r4, r0
    62e0:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    62e2:	cbz	r2, 632a <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    62e4:	ldr	r2, [r0, #12]
    62e6:	adds	r2, #4
    62e8:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    62ea:	cbz	r3, 6326 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    62ec:	ldr	r6, [pc, #76]	; (633c <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    62ee:	movw	r3, #56321	; 0xdc01
    62f2:	movs	r5, #0
    62f4:	b.n	6308 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    62f6:	ldr	r3, [r4, #12]
    62f8:	adds	r3, #2
    62fa:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    62fc:	ldr	r3, [r7, #0]
    62fe:	adds	r5, #1
    6300:	cmp	r3, r5
    6302:	bls.n	6326 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    6304:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6308:	ldrb	r2, [r4, #8]
    630a:	strh.w	r3, [sp, #2]
    630e:	cmp	r2, #0
    6310:	bne.n	62f6 <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    6312:	movs	r2, #2
    6314:	add.w	r1, sp, r2
    6318:	mov	r0, r4
    631a:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    631e:	ldr	r3, [r7, #0]
    6320:	adds	r5, #1
    6322:	cmp	r3, r5
    6324:	bhi.n	6304 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    6326:	add	sp, #12
    6328:	pop	{r4, r5, r6, r7, pc}
    632a:	movs	r2, #4
    632c:	add.w	r1, sp, r2
    6330:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6334:	ldr	r3, [r7, #0]
    6336:	b.n	62ea <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    6338:	.word	0x1fff0990
    633c:	.word	0x00014c5c

00006340 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6340:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6344:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6346:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6348:	sub	sp, #316	; 0x13c
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    634a:	ldr	r3, [r0, #0]
    634c:	add.w	r6, sp, #10
    6350:	add	r7, sp, #20
    6352:	str	r6, [sp, #4]
    6354:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6356:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6358:	ldr.w	r8, [r3, #36]	; 0x24
    635c:	add	r2, sp, #56	; 0x38
    635e:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6360:	mov	r9, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6362:	blx	r8
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
      switch(p2)
    6364:	sub.w	r2, r4, #56320	; 0xdc00
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    6368:	ldrh	r3, [r6, #0]
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    636a:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
      switch(p2)
    636c:	subs	r2, #1
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    636e:	adds	r4, r3, #1
      switch(p2)
    6370:	cmp	r2, #67	; 0x43
    6372:	bhi.n	63d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6374:	tbb	[pc, r2]
    6378:	.word	0x776a4b41
    637c:	.word	0x333a3030
    6380:	.word	0x305c3033
    6384:	.word	0x30303030
    6388:	.word	0x30303030
    638c:	.word	0x30303030
    6390:	.word	0x30303030
    6394:	.word	0x30303030
    6398:	.word	0x30303030
    639c:	.word	0x30303030
    63a0:	.word	0x30303030
    63a4:	.word	0x30303030
    63a8:	.word	0x30303030
    63ac:	.word	0x30303030
    63b0:	.word	0x30303030
    63b4:	.word	0x30303030
    63b8:	.word	0x3a303022
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    63bc:	ldrb	r3, [r5, #8]
    63be:	str.w	r9, [sp, #52]	; 0x34
    63c2:	cmp	r3, #0
    63c4:	beq.n	6476 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x136>
      write_length_ += len;
    63c6:	ldr	r3, [r5, #12]
    63c8:	adds	r3, #4
    63ca:	str	r3, [r5, #12]
    63cc:	adds	r3, #4
    63ce:	str	r3, [r5, #12]
    63d0:	adds	r3, #4
    63d2:	str	r3, [r5, #12]
    63d4:	adds	r3, #4
    63d6:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    63d8:	add	sp, #316	; 0x13c
    63da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    63de:	mov	r0, r5
    63e0:	ldr	r1, [pc, #276]	; (64f8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b8>)
    63e2:	bl	5bc8 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    63e6:	add	sp, #316	; 0x13c
    63e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(parent);
          write32(storage);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    63ec:	add	r1, sp, #56	; 0x38
    63ee:	mov	r0, r5
    63f0:	bl	5bc8 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    63f4:	add	sp, #316	; 0x13c
    63f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    63fa:	ldrb	r3, [r5, #8]
    63fc:	str	r4, [sp, #24]
    63fe:	cmp	r3, #0
    6400:	beq.n	64c2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x182>
      write_length_ += len;
    6402:	ldr	r3, [r5, #12]
    6404:	adds	r3, #4
    6406:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6408:	add	sp, #316	; 0x13c
    640a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    640e:	adds	r1, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6410:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6412:	movw	r3, #12289	; 0x3001
    6416:	it	ne
    6418:	movne.w	r3, #12288	; 0x3000
    641c:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6420:	cmp	r2, #0
    6422:	beq.n	64b6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x176>
      write_length_ += len;
    6424:	ldr	r3, [r5, #12]
    6426:	adds	r3, #2
    6428:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    642a:	add	sp, #316	; 0x13c
    642c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6430:	ldr	r2, [r7, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6432:	ldrb	r1, [r5, #8]
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6434:	cmp	r3, r2
    6436:	it	eq
    6438:	moveq	r2, #0
    643a:	str	r2, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    643c:	cmp	r1, #0
    643e:	bne.n	6402 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc2>
    6440:	add	r1, sp, #36	; 0x24
    6442:	mov	r0, r5
    6444:	movs	r2, #4
    6446:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    644a:	b.n	63d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    644c:	ldrb	r3, [r5, #8]
    644e:	movs	r2, #0
    6450:	strh.w	r2, [sp, #14]
    6454:	cmp	r3, #0
    6456:	bne.n	6424 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe4>
    6458:	add.w	r1, sp, #14
    645c:	mov	r0, r5
    645e:	movs	r2, #2
    6460:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6464:	b.n	63d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6466:	ldrb	r4, [r5, #8]
    6468:	str	r1, [sp, #32]
    646a:	cmp	r4, #0
    646c:	beq.n	64ce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18e>
      write_length_ += len;
    646e:	ldr	r3, [r5, #12]
    6470:	adds	r3, #4
    6472:	str	r3, [r5, #12]
    6474:	b.n	63d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    6476:	movs	r2, #4
    6478:	add	r1, sp, #52	; 0x34
    647a:	mov	r0, r5
    647c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6480:	ldrb	r3, [r5, #8]
    6482:	ldr	r2, [r7, #0]
    6484:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6486:	cmp	r3, #0
    6488:	bne.n	64f2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b2>
    648a:	add	r1, sp, #48	; 0x30
    648c:	movs	r2, #4
    648e:	mov	r0, r5
    6490:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6494:	ldrb	r6, [r5, #8]
    6496:	str	r4, [sp, #44]	; 0x2c
    6498:	cbnz	r6, 64ee <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ae>
    649a:	add	r1, sp, #44	; 0x2c
    649c:	movs	r2, #4
    649e:	mov	r0, r5
    64a0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    64a4:	ldrb	r3, [r5, #8]
    64a6:	str	r6, [sp, #40]	; 0x28
    64a8:	cbnz	r3, 64ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1aa>
    64aa:	add	r1, sp, #40	; 0x28
    64ac:	mov	r0, r5
    64ae:	movs	r2, #4
    64b0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    64b4:	b.n	63d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64b6:	add	r1, sp, #12
    64b8:	mov	r0, r5
    64ba:	movs	r2, #2
    64bc:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    64c0:	b.n	63d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64c2:	add	r1, sp, #24
    64c4:	mov	r0, r5
    64c6:	movs	r2, #4
    64c8:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    64cc:	b.n	63d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64ce:	add	r1, sp, #32
    64d0:	movs	r2, #4
    64d2:	mov	r0, r5
    64d4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    64d8:	ldrb	r3, [r5, #8]
    64da:	str	r4, [sp, #28]
    64dc:	cbnz	r3, 64ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1aa>
    64de:	add	r1, sp, #28
    64e0:	mov	r0, r5
    64e2:	movs	r2, #4
    64e4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    64e8:	b.n	63d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64ea:	ldr	r3, [r5, #12]
    64ec:	b.n	63d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    64ee:	ldr	r3, [r5, #12]
    64f0:	b.n	63d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    64f2:	ldr	r3, [r5, #12]
    64f4:	b.n	63cc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8c>
    64f6:	nop
    64f8:	.word	0x00014ad0

000064fc <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    64fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6500:	mov	r4, r0
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    6502:	ldr	r0, [r0, #0]
    6504:	ldr	r3, [r0, #0]
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    6506:	subs	r5, r1, #1
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    6508:	sub	sp, #36	; 0x24
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    650a:	ldr	r3, [r3, #20]
    650c:	mov	r1, r5
    650e:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6510:	ldrb	r3, [r4, #8]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    6512:	cmp	r0, #0
    6514:	ite	eq
    6516:	moveq	r2, #4
    6518:	movne	r2, #1
    651a:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    651e:	cmp	r3, #0
    6520:	beq.n	65bc <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    6522:	ldr	r3, [r4, #12]
    6524:	adds	r3, #2
    6526:	str	r3, [r4, #12]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    6528:	ldr	r0, [r4, #0]
    652a:	ldr	r3, [r0, #0]
    652c:	mov	r1, r5
    652e:	ldr	r3, [r3, #24]
    6530:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6532:	ldrb	r6, [r4, #8]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    6534:	cmp	r0, #0
    6536:	ite	eq
    6538:	moveq	r3, #1
    653a:	movne	r3, #2
    653c:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6540:	cmp	r6, #0
    6542:	beq.n	6604 <MTPD::GetStorageInfo(unsigned long)+0x108>
      write_length_ += len;
    6544:	ldr	r3, [r4, #12]
    6546:	movs	r2, #0
    6548:	adds	r3, #2
    654a:	str	r3, [r4, #12]
    654c:	strh.w	r2, [sp, #8]
    6550:	adds	r3, #2
    6552:	str	r3, [r4, #12]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    6554:	ldr	r0, [r4, #0]
    6556:	ldr	r3, [r0, #0]
    6558:	mov	r1, r5
    655a:	ldr	r3, [r3, #12]
    655c:	blx	r3
    655e:	mov	r6, r0
    uint64_t nused = storage_->usedSize(store) ; 
    6560:	ldr	r0, [r4, #0]
    6562:	ldr	r3, [r0, #0]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    6564:	mov	r7, r1
    uint64_t nused = storage_->usedSize(store) ; 
    6566:	ldr	r3, [r3, #16]
    6568:	mov	r1, r5
    656a:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    656c:	ldrb	r3, [r4, #8]
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    uint64_t nused = storage_->usedSize(store) ; 
    656e:	mov	r8, r0
    6570:	mov	r9, r1
    6572:	strd	r6, r7, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6576:	cbz	r3, 65ca <MTPD::GetStorageInfo(unsigned long)+0xce>
    6578:	subs	r6, r6, r0
      write_length_ += len;
    657a:	ldr	r3, [r4, #12]
    657c:	sbc.w	r7, r7, r1
    6580:	strd	r6, r7, [sp, #16]
    6584:	adds	r3, #8
    6586:	str	r3, [r4, #12]
    6588:	adds	r3, #8
    658a:	mov.w	r2, #4294967295
    658e:	str	r3, [r4, #12]
    6590:	str	r2, [sp, #12]
    6592:	adds	r3, #4
    6594:	str	r3, [r4, #12]

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    6596:	ldr	r0, [r4, #0]
    6598:	ldr	r2, [pc, #156]	; (6638 <MTPD::GetStorageInfo(unsigned long)+0x13c>)
    659a:	ldr	r3, [r0, #0]
    659c:	ldr	r3, [r3, #8]
    659e:	cmp	r3, r2
    65a0:	bne.n	6624 <MTPD::GetStorageInfo(unsigned long)+0x128>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    65a2:	add.w	r0, r0, r5, lsl #2
    65a6:	ldr	r1, [r0, #8]
    writestring(name);  // storage descriptor
    65a8:	mov	r0, r4
    65aa:	bl	5bc8 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    65ae:	mov	r0, r4
    65b0:	ldr	r1, [pc, #136]	; (663c <MTPD::GetStorageInfo(unsigned long)+0x140>)
    65b2:	bl	5bc8 <MTPD::writestring(char const*)>

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    65b6:	add	sp, #36	; 0x24
    65b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    65bc:	movs	r2, #2
    65be:	add.w	r1, sp, #6
    65c2:	mov	r0, r4
    65c4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    65c8:	b.n	6528 <MTPD::GetStorageInfo(unsigned long)+0x2c>
    65ca:	movs	r2, #8
    65cc:	add	r1, sp, #24
    65ce:	mov	r0, r4
    65d0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    65d4:	subs.w	r6, r6, r8
    65d8:	ldrb	r3, [r4, #8]
    65da:	sbc.w	r7, r7, r9
    65de:	strd	r6, r7, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    65e2:	cbnz	r3, 6630 <MTPD::GetStorageInfo(unsigned long)+0x134>
    65e4:	movs	r2, #8
    65e6:	add	r1, sp, #16
    65e8:	mov	r0, r4
    65ea:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    65ee:	ldrb	r3, [r4, #8]
    65f0:	mov.w	r2, #4294967295
    65f4:	str	r2, [sp, #12]
    65f6:	cbnz	r3, 662c <MTPD::GetStorageInfo(unsigned long)+0x130>
    65f8:	movs	r2, #4
    65fa:	add	r1, sp, #12
    65fc:	mov	r0, r4
    65fe:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6602:	b.n	6596 <MTPD::GetStorageInfo(unsigned long)+0x9a>
    6604:	movs	r2, #2
    6606:	add.w	r1, sp, #10
    660a:	mov	r0, r4
    660c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6610:	ldrb	r3, [r4, #8]
    6612:	strh.w	r6, [sp, #8]
    6616:	cbnz	r3, 6634 <MTPD::GetStorageInfo(unsigned long)+0x138>
    6618:	movs	r2, #2
    661a:	add	r1, sp, #8
    661c:	mov	r0, r4
    661e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6622:	b.n	6554 <MTPD::GetStorageInfo(unsigned long)+0x58>

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    6624:	mov	r1, r5
    6626:	blx	r3
    6628:	mov	r1, r0
    662a:	b.n	65a8 <MTPD::GetStorageInfo(unsigned long)+0xac>
    662c:	ldr	r3, [r4, #12]
    662e:	b.n	6592 <MTPD::GetStorageInfo(unsigned long)+0x96>
    6630:	ldr	r3, [r4, #12]
    6632:	b.n	6588 <MTPD::GetStorageInfo(unsigned long)+0x8c>
    6634:	ldr	r3, [r4, #12]
    6636:	b.n	6550 <MTPD::GetStorageInfo(unsigned long)+0x54>
    6638:	.word	0x00001e59
    663c:	.word	0x00014ad0

00006640 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    6640:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    6644:	sub.w	r1, r1, #56320	; 0xdc00
    6648:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    664a:	sub	sp, #148	; 0x94
    664c:	mov	r4, r0
      switch(p1)
    664e:	cmp	r1, #67	; 0x43
    6650:	bhi.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6652:	tbh	[pc, r1, lsl #1]
    6656:	.short	0x005c
    6658:	.word	0x0080006e
    665c:	.word	0x005900c6
    6660:	.word	0x00d80059
    6664:	.word	0x01690121
    6668:	.word	0x01b10059
    666c:	.word	0x00590059
    6670:	.word	0x00590059
    6674:	.word	0x00590059
    6678:	.word	0x00590059
    667c:	.word	0x00590059
    6680:	.word	0x00590059
    6684:	.word	0x00590059
    6688:	.word	0x00590059
    668c:	.word	0x00590059
    6690:	.word	0x00590059
    6694:	.word	0x00590059
    6698:	.word	0x00590059
    669c:	.word	0x00590059
    66a0:	.word	0x00590059
    66a4:	.word	0x00590059
    66a8:	.word	0x00590059
    66ac:	.word	0x00590059
    66b0:	.word	0x00590059
    66b4:	.word	0x00590059
    66b8:	.word	0x00590059
    66bc:	.word	0x00590059
    66c0:	.word	0x00590059
    66c4:	.word	0x00590059
    66c8:	.word	0x00590059
    66cc:	.word	0x00590059
    66d0:	.word	0x00590059
    66d4:	.word	0x01f70059
    66d8:	.word	0x00590059
    66dc:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    66de:	ldrb	r3, [r0, #8]
    66e0:	movw	r2, #56388	; 0xdc44
    66e4:	strh.w	r2, [sp, #70]	; 0x46
    66e8:	cmp	r3, #0
    66ea:	beq.w	6b68 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    66ee:	ldr	r3, [r4, #12]
    66f0:	adds	r3, #2
    66f2:	str	r3, [r4, #12]
    66f4:	adds	r3, #2
    66f6:	str	r3, [r4, #12]
    66f8:	adds	r3, #1
    66fa:	str	r3, [r4, #12]
    66fc:	adds	r3, #1
    66fe:	str	r3, [r4, #12]
    6700:	adds	r3, #4
    6702:	str	r3, [r4, #12]
    6704:	adds	r3, #1
    6706:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    6708:	add	sp, #148	; 0x94
    670a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    670e:	ldrb	r3, [r0, #8]
    6710:	movw	r2, #56321	; 0xdc01
    6714:	strh.w	r2, [sp, #30]
    6718:	cmp	r3, #0
    671a:	beq.w	6c7c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    671e:	ldr	r3, [r4, #12]
    6720:	adds	r3, #2
    6722:	str	r3, [r4, #12]
    6724:	adds	r3, #2
    6726:	str	r3, [r4, #12]
    6728:	adds	r3, #1
    672a:	str	r3, [r4, #12]
    672c:	adds	r3, #4
    672e:	str	r3, [r4, #12]
    6730:	b.n	6700 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6732:	ldrb	r3, [r0, #8]
    6734:	movw	r2, #56322	; 0xdc02
    6738:	strh.w	r2, [sp, #36]	; 0x24
    673c:	cmp	r3, #0
    673e:	beq.w	6aea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    6742:	ldr	r3, [r4, #12]
    6744:	adds	r3, #2
    6746:	str	r3, [r4, #12]
    6748:	adds	r3, #2
    674a:	str	r3, [r4, #12]
    674c:	adds	r3, #1
    674e:	str	r3, [r4, #12]
    6750:	adds	r3, #2
    6752:	str	r3, [r4, #12]
    6754:	b.n	6700 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6756:	ldrb	r3, [r0, #8]
    6758:	movw	r2, #56323	; 0xdc03
    675c:	strh.w	r2, [sp, #42]	; 0x2a
    6760:	cmp	r3, #0
    6762:	bne.n	6742 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    6764:	movs	r2, #2
    6766:	add.w	r1, sp, #42	; 0x2a
    676a:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    676e:	ldrb	r7, [r4, #8]
    6770:	movs	r6, #4
    6772:	strh.w	r6, [sp, #40]	; 0x28
    6776:	cmp	r7, #0
    6778:	bne.w	6d12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    677c:	movs	r2, #2
    677e:	add	r1, sp, #40	; 0x28
    6780:	mov	r0, r4
    6782:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6786:	ldrb	r5, [r4, #8]
    6788:	strb.w	r7, [sp, #9]
    678c:	cmp	r5, #0
    678e:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    6792:	movs	r2, #1
    6794:	add.w	r1, sp, #9
    6798:	mov	r0, r4
    679a:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    679e:	ldrb	r7, [r4, #8]
    67a0:	strh.w	r5, [sp, #38]	; 0x26
    67a4:	cmp	r7, #0
    67a6:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    67aa:	movs	r2, #2
    67ac:	add.w	r1, sp, #38	; 0x26
    67b0:	mov	r0, r4
    67b2:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    67b6:	ldrb	r5, [r4, #8]
    67b8:	str	r7, [sp, #84]	; 0x54
    67ba:	cmp	r5, #0
    67bc:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    67c0:	mov	r2, r6
    67c2:	add	r1, sp, #84	; 0x54
    67c4:	mov	r0, r4
    67c6:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    67ca:	ldrb	r3, [r4, #8]
    67cc:	strb.w	r5, [sp, #8]
    67d0:	cmp	r3, #0
    67d2:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    67d6:	mov	r0, r4
    67d8:	movs	r2, #1
    67da:	add	r1, sp, #8
    67dc:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    67e0:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    67e2:	ldrb	r3, [r0, #8]
    67e4:	movw	r2, #56324	; 0xdc04
    67e8:	strh.w	r2, [sp, #46]	; 0x2e
    67ec:	cmp	r3, #0
    67ee:	beq.w	6a68 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    67f2:	ldr	r3, [r0, #12]
    67f4:	adds	r3, #2
    67f6:	str	r3, [r0, #12]
    67f8:	adds	r3, #2
    67fa:	str	r3, [r4, #12]
    67fc:	adds	r3, #1
    67fe:	str	r3, [r4, #12]
    6800:	adds	r3, #8
    6802:	str	r3, [r4, #12]
    6804:	b.n	6700 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6806:	ldrb	r3, [r0, #8]
    6808:	movw	r2, #56327	; 0xdc07
    680c:	strh.w	r2, [sp, #50]	; 0x32
    6810:	cmp	r3, #0
    6812:	bne.w	66ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    6816:	movs	r2, #2
    6818:	add.w	r1, sp, #50	; 0x32
    681c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6820:	ldrb	r3, [r4, #8]
    6822:	movw	r2, #65535	; 0xffff
    6826:	strh.w	r2, [sp, #48]	; 0x30
    682a:	cmp	r3, #0
    682c:	bne.w	6cfa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6830:	movs	r2, #2
    6832:	add	r1, sp, #48	; 0x30
    6834:	mov	r0, r4
    6836:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    683a:	ldrb	r6, [r4, #8]
    683c:	movs	r5, #1
    683e:	strb.w	r5, [sp, #14]
    6842:	cmp	r6, #0
    6844:	bne.w	6cf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6848:	mov	r2, r5
    684a:	add.w	r1, sp, #14
    684e:	mov	r0, r4
    6850:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6854:	ldrb	r7, [r4, #8]
    6856:	strb.w	r6, [sp, #13]
    685a:	cmp	r7, #0
    685c:	bne.w	6d06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6860:	mov	r2, r5
    6862:	add.w	r1, sp, #13
    6866:	mov	r0, r4
    6868:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    686c:	ldrb	r6, [r4, #8]
    686e:	str	r7, [sp, #92]	; 0x5c
    6870:	cmp	r6, #0
    6872:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6876:	movs	r2, #4
    6878:	add	r1, sp, #92	; 0x5c
    687a:	mov	r0, r4
    687c:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6880:	ldrb	r3, [r4, #8]
    6882:	strb.w	r6, [sp, #12]
    6886:	cmp	r3, #0
    6888:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    688c:	mov	r2, r5
    688e:	mov	r0, r4
    6890:	add	r1, sp, #12
    6892:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6896:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6898:	ldrb	r3, [r0, #8]
    689a:	movw	r2, #56328	; 0xdc08
    689e:	strh.w	r2, [sp, #54]	; 0x36
    68a2:	cmp	r3, #0
    68a4:	bne.w	66ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    68a8:	movs	r2, #2
    68aa:	add.w	r1, sp, #54	; 0x36
    68ae:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    68b2:	ldrb	r6, [r4, #8]
    68b4:	movw	r3, #65535	; 0xffff
    68b8:	strh.w	r3, [sp, #52]	; 0x34
    68bc:	cmp	r6, #0
    68be:	bne.w	6cfa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    68c2:	movs	r2, #2
    68c4:	add	r1, sp, #52	; 0x34
    68c6:	mov	r0, r4
    68c8:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    68cc:	ldrb	r5, [r4, #8]
    68ce:	strb.w	r6, [sp, #17]
    68d2:	cmp	r5, #0
    68d4:	bne.w	6cf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    68d8:	movs	r2, #1
    68da:	add.w	r1, sp, #17
    68de:	mov	r0, r4
    68e0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    68e4:	ldrb	r6, [r4, #8]
    68e6:	strb.w	r5, [sp, #16]
    68ea:	cmp	r6, #0
    68ec:	bne.w	6d06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    68f0:	movs	r2, #1
    68f2:	add	r1, sp, #16
    68f4:	mov	r0, r4
    68f6:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    68fa:	ldrb	r5, [r4, #8]
    68fc:	str	r6, [sp, #96]	; 0x60
    68fe:	cmp	r5, #0
    6900:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6904:	movs	r2, #4
    6906:	add	r1, sp, #96	; 0x60
    6908:	mov	r0, r4
    690a:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    690e:	ldrb	r3, [r4, #8]
    6910:	strb.w	r5, [sp, #15]
    6914:	cmp	r3, #0
    6916:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    691a:	mov	r0, r4
    691c:	movs	r2, #1
    691e:	add.w	r1, sp, #15
    6922:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6926:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6928:	ldrb	r3, [r0, #8]
    692a:	movw	r2, #56329	; 0xdc09
    692e:	strh.w	r2, [sp, #58]	; 0x3a
    6932:	cmp	r3, #0
    6934:	bne.w	66ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    6938:	movs	r2, #2
    693a:	add.w	r1, sp, #58	; 0x3a
    693e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6942:	ldrb	r6, [r4, #8]
    6944:	movw	r3, #65535	; 0xffff
    6948:	strh.w	r3, [sp, #56]	; 0x38
    694c:	cmp	r6, #0
    694e:	bne.w	6cfa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6952:	movs	r2, #2
    6954:	add	r1, sp, #56	; 0x38
    6956:	mov	r0, r4
    6958:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    695c:	ldrb	r5, [r4, #8]
    695e:	strb.w	r6, [sp, #20]
    6962:	cmp	r5, #0
    6964:	bne.w	6cf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6968:	movs	r2, #1
    696a:	add	r1, sp, #20
    696c:	mov	r0, r4
    696e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6972:	ldrb	r6, [r4, #8]
    6974:	strb.w	r5, [sp, #19]
    6978:	cmp	r6, #0
    697a:	bne.w	6d06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    697e:	movs	r2, #1
    6980:	add.w	r1, sp, #19
    6984:	mov	r0, r4
    6986:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    698a:	ldrb	r5, [r4, #8]
    698c:	str	r6, [sp, #100]	; 0x64
    698e:	cmp	r5, #0
    6990:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6994:	movs	r2, #4
    6996:	add	r1, sp, #100	; 0x64
    6998:	mov	r0, r4
    699a:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    699e:	ldrb	r3, [r4, #8]
    69a0:	strb.w	r5, [sp, #18]
    69a4:	cmp	r3, #0
    69a6:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    69aa:	mov	r0, r4
    69ac:	movs	r2, #1
    69ae:	add.w	r1, sp, #18
    69b2:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    69b6:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    69b8:	ldrb	r3, [r0, #8]
    69ba:	movw	r2, #56331	; 0xdc0b
    69be:	strh.w	r2, [sp, #62]	; 0x3e
    69c2:	cmp	r3, #0
    69c4:	bne.w	671e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    69c8:	movs	r2, #2
    69ca:	add.w	r1, sp, #62	; 0x3e
    69ce:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    69d2:	ldrb	r6, [r4, #8]
    69d4:	movs	r3, #6
    69d6:	strh.w	r3, [sp, #60]	; 0x3c
    69da:	cmp	r6, #0
    69dc:	bne.w	6cf2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    69e0:	movs	r2, #2
    69e2:	add	r1, sp, #60	; 0x3c
    69e4:	mov	r0, r4
    69e6:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    69ea:	ldrb	r5, [r4, #8]
    69ec:	strb.w	r6, [sp, #22]
    69f0:	cmp	r5, #0
    69f2:	bne.w	6cee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    69f6:	movs	r2, #1
    69f8:	add.w	r1, sp, #22
    69fc:	mov	r0, r4
    69fe:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6a02:	ldrb	r6, [r4, #8]
    6a04:	str	r5, [sp, #108]	; 0x6c
    6a06:	cmp	r6, #0
    6a08:	bne.w	6cea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    6a0c:	movs	r2, #4
    6a0e:	add	r1, sp, #108	; 0x6c
    6a10:	mov	r0, r4
    6a12:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6a16:	ldrb	r5, [r4, #8]
    6a18:	str	r6, [sp, #104]	; 0x68
    6a1a:	cmp	r5, #0
    6a1c:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6a20:	movs	r2, #4
    6a22:	add	r1, sp, #104	; 0x68
    6a24:	mov	r0, r4
    6a26:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6a2a:	ldrb	r3, [r4, #8]
    6a2c:	strb.w	r5, [sp, #21]
    6a30:	cmp	r3, #0
    6a32:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6a36:	mov	r0, r4
    6a38:	movs	r2, #1
    6a3a:	add.w	r1, sp, #21
    6a3e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6a42:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6a44:	ldrb	r3, [r0, #8]
    6a46:	movw	r2, #56385	; 0xdc41
    6a4a:	strh.w	r2, [sp, #66]	; 0x42
    6a4e:	cmp	r3, #0
    6a50:	beq.w	6bea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    6a54:	ldr	r3, [r0, #12]
    6a56:	adds	r3, #2
    6a58:	str	r3, [r0, #12]
    6a5a:	adds	r3, #2
    6a5c:	str	r3, [r4, #12]
    6a5e:	adds	r3, #1
    6a60:	str	r3, [r4, #12]
    6a62:	adds	r3, #8
    6a64:	str	r3, [r4, #12]
    6a66:	b.n	6800 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    6a68:	movs	r2, #2
    6a6a:	add.w	r1, sp, #46	; 0x2e
    6a6e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6a72:	ldrb	r6, [r4, #8]
    6a74:	movs	r5, #8
    6a76:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6a7a:	cmp	r6, #0
    6a7c:	bne.w	6d02 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    6a80:	movs	r2, #2
    6a82:	add	r1, sp, #44	; 0x2c
    6a84:	mov	r0, r4
    6a86:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6a8a:	ldrb	r3, [r4, #8]
    6a8c:	strb.w	r6, [sp, #11]
    6a90:	cmp	r3, #0
    6a92:	bne.w	6cfe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    6a96:	movs	r2, #1
    6a98:	add.w	r1, sp, #11
    6a9c:	mov	r0, r4
    6a9e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6aa2:	ldrb	r6, [r4, #8]
    6aa4:	movs	r2, #0
    6aa6:	movs	r3, #0
    6aa8:	strd	r2, r3, [sp, #120]	; 0x78
    6aac:	cmp	r6, #0
    6aae:	bne.w	6d16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6ab2:	mov	r2, r5
    6ab4:	add	r1, sp, #120	; 0x78
    6ab6:	mov	r0, r4
    6ab8:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6abc:	ldrb	r5, [r4, #8]
    6abe:	str	r6, [sp, #88]	; 0x58
    6ac0:	cmp	r5, #0
    6ac2:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6ac6:	movs	r2, #4
    6ac8:	add	r1, sp, #88	; 0x58
    6aca:	mov	r0, r4
    6acc:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6ad0:	ldrb	r3, [r4, #8]
    6ad2:	strb.w	r5, [sp, #10]
    6ad6:	cmp	r3, #0
    6ad8:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6adc:	mov	r0, r4
    6ade:	movs	r2, #1
    6ae0:	add.w	r1, sp, #10
    6ae4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6ae8:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6aea:	movs	r2, #2
    6aec:	add	r1, sp, #36	; 0x24
    6aee:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6af2:	ldrb	r7, [r4, #8]
    6af4:	movs	r6, #4
    6af6:	strh.w	r6, [sp, #34]	; 0x22
    6afa:	cmp	r7, #0
    6afc:	bne.w	6d12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    6b00:	movs	r2, #2
    6b02:	add.w	r1, sp, #34	; 0x22
    6b06:	mov	r0, r4
    6b08:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6b0c:	ldrb	r5, [r4, #8]
    6b0e:	strb.w	r7, [sp, #7]
    6b12:	cmp	r5, #0
    6b14:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    6b18:	movs	r2, #1
    6b1a:	add.w	r1, sp, #7
    6b1e:	mov	r0, r4
    6b20:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6b24:	ldrb	r7, [r4, #8]
    6b26:	strh.w	r5, [sp, #32]
    6b2a:	cmp	r7, #0
    6b2c:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    6b30:	movs	r2, #2
    6b32:	add	r1, sp, #32
    6b34:	mov	r0, r4
    6b36:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6b3a:	ldrb	r5, [r4, #8]
    6b3c:	str	r7, [sp, #80]	; 0x50
    6b3e:	cmp	r5, #0
    6b40:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6b44:	mov	r2, r6
    6b46:	add	r1, sp, #80	; 0x50
    6b48:	mov	r0, r4
    6b4a:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6b4e:	ldrb	r3, [r4, #8]
    6b50:	strb.w	r5, [sp, #6]
    6b54:	cmp	r3, #0
    6b56:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6b5a:	mov	r0, r4
    6b5c:	movs	r2, #1
    6b5e:	add.w	r1, sp, #6
    6b62:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6b66:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6b68:	movs	r2, #2
    6b6a:	add.w	r1, sp, #70	; 0x46
    6b6e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6b72:	ldrb	r6, [r4, #8]
    6b74:	movw	r3, #65535	; 0xffff
    6b78:	strh.w	r3, [sp, #68]	; 0x44
    6b7c:	cmp	r6, #0
    6b7e:	bne.w	6cfa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6b82:	movs	r2, #2
    6b84:	add	r1, sp, #68	; 0x44
    6b86:	mov	r0, r4
    6b88:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6b8c:	ldrb	r5, [r4, #8]
    6b8e:	strb.w	r6, [sp, #27]
    6b92:	cmp	r5, #0
    6b94:	bne.w	6cf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6b98:	movs	r2, #1
    6b9a:	add.w	r1, sp, #27
    6b9e:	mov	r0, r4
    6ba0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6ba4:	ldrb	r6, [r4, #8]
    6ba6:	strb.w	r5, [sp, #26]
    6baa:	cmp	r6, #0
    6bac:	bne.w	6d06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6bb0:	movs	r2, #1
    6bb2:	add.w	r1, sp, #26
    6bb6:	mov	r0, r4
    6bb8:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6bbc:	ldrb	r5, [r4, #8]
    6bbe:	str	r6, [sp, #116]	; 0x74
    6bc0:	cmp	r5, #0
    6bc2:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6bc6:	movs	r2, #4
    6bc8:	add	r1, sp, #116	; 0x74
    6bca:	mov	r0, r4
    6bcc:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6bd0:	ldrb	r3, [r4, #8]
    6bd2:	strb.w	r5, [sp, #25]
    6bd6:	cmp	r3, #0
    6bd8:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6bdc:	mov	r0, r4
    6bde:	movs	r2, #1
    6be0:	add.w	r1, sp, #25
    6be4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6be8:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6bea:	movs	r2, #2
    6bec:	add.w	r1, sp, #66	; 0x42
    6bf0:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6bf4:	ldrb	r5, [r4, #8]
    6bf6:	movs	r3, #10
    6bf8:	strh.w	r3, [sp, #64]	; 0x40
    6bfc:	cmp	r5, #0
    6bfe:	bne.w	6d22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    6c02:	movs	r2, #2
    6c04:	add	r1, sp, #64	; 0x40
    6c06:	mov	r0, r4
    6c08:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6c0c:	ldrb	r3, [r4, #8]
    6c0e:	strb.w	r5, [sp, #24]
    6c12:	cmp	r3, #0
    6c14:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    6c18:	movs	r2, #1
    6c1a:	add	r1, sp, #24
    6c1c:	mov	r0, r4
    6c1e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6c22:	ldrb	r3, [r4, #8]
    6c24:	mov.w	r8, #0
    6c28:	mov.w	r9, #0
    6c2c:	strd	r8, r9, [sp, #136]	; 0x88
    6c30:	cmp	r3, #0
    6c32:	bne.n	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    6c34:	movs	r2, #8
    6c36:	add	r1, sp, #136	; 0x88
    6c38:	mov	r0, r4
    6c3a:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6c3e:	ldrb	r6, [r4, #8]
    6c40:	strd	r8, r9, [sp, #128]	; 0x80
    6c44:	cmp	r6, #0
    6c46:	bne.n	6d16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6c48:	movs	r2, #8
    6c4a:	add	r1, sp, #128	; 0x80
    6c4c:	mov	r0, r4
    6c4e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6c52:	ldrb	r5, [r4, #8]
    6c54:	str	r6, [sp, #112]	; 0x70
    6c56:	cmp	r5, #0
    6c58:	bne.n	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6c5a:	movs	r2, #4
    6c5c:	add	r1, sp, #112	; 0x70
    6c5e:	mov	r0, r4
    6c60:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6c64:	ldrb	r3, [r4, #8]
    6c66:	strb.w	r5, [sp, #23]
    6c6a:	cmp	r3, #0
    6c6c:	bne.n	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6c6e:	mov	r0, r4
    6c70:	movs	r2, #1
    6c72:	add.w	r1, sp, #23
    6c76:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6c7a:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6c7c:	movs	r2, #2
    6c7e:	add.w	r1, sp, #30
    6c82:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6c86:	ldrb	r6, [r4, #8]
    6c88:	movs	r3, #6
    6c8a:	strh.w	r3, [sp, #28]
    6c8e:	cbnz	r6, 6cf2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    6c90:	movs	r2, #2
    6c92:	add	r1, sp, #28
    6c94:	mov	r0, r4
    6c96:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6c9a:	ldrb	r5, [r4, #8]
    6c9c:	strb.w	r6, [sp, #5]
    6ca0:	cbnz	r5, 6cee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    6ca2:	movs	r2, #1
    6ca4:	add.w	r1, sp, #5
    6ca8:	mov	r0, r4
    6caa:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6cae:	ldrb	r6, [r4, #8]
    6cb0:	str	r5, [sp, #76]	; 0x4c
    6cb2:	cbnz	r6, 6cea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    6cb4:	movs	r2, #4
    6cb6:	add	r1, sp, #76	; 0x4c
    6cb8:	mov	r0, r4
    6cba:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6cbe:	ldrb	r5, [r4, #8]
    6cc0:	str	r6, [sp, #72]	; 0x48
    6cc2:	cbnz	r5, 6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6cc4:	movs	r2, #4
    6cc6:	add	r1, sp, #72	; 0x48
    6cc8:	mov	r0, r4
    6cca:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6cce:	ldrb	r3, [r4, #8]
    6cd0:	strb.w	r5, [sp, #4]
    6cd4:	cbnz	r3, 6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6cd6:	mov	r0, r4
    6cd8:	movs	r2, #1
    6cda:	add	r1, sp, #4
    6cdc:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    6ce0:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6ce2:	ldr	r3, [r4, #12]
    6ce4:	b.n	6704 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    6ce6:	ldr	r3, [r4, #12]
    6ce8:	b.n	6700 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    6cea:	ldr	r3, [r4, #12]
    6cec:	b.n	672c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    6cee:	ldr	r3, [r4, #12]
    6cf0:	b.n	6728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    6cf2:	ldr	r3, [r4, #12]
    6cf4:	b.n	6724 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    6cf6:	ldr	r3, [r4, #12]
    6cf8:	b.n	66f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    6cfa:	ldr	r3, [r4, #12]
    6cfc:	b.n	66f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    6cfe:	ldr	r3, [r4, #12]
    6d00:	b.n	67fc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    6d02:	ldr	r3, [r4, #12]
    6d04:	b.n	67f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    6d06:	ldr	r3, [r4, #12]
    6d08:	b.n	66fc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    6d0a:	ldr	r3, [r4, #12]
    6d0c:	b.n	6750 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    6d0e:	ldr	r3, [r4, #12]
    6d10:	b.n	674c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    6d12:	ldr	r3, [r4, #12]
    6d14:	b.n	6748 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    6d16:	ldr	r3, [r4, #12]
    6d18:	b.n	6800 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    6d1a:	ldr	r3, [r4, #12]
    6d1c:	b.n	6a62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    6d1e:	ldr	r3, [r4, #12]
    6d20:	b.n	6a5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    6d22:	ldr	r3, [r4, #12]
    6d24:	b.n	6a5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    6d26:	nop

00006d28 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    6d28:	push	{r4, lr}
    6d2a:	mov	r4, r0
    6d2c:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    6d2e:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    6d30:	cbnz	r3, 6d3a <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    6d32:	bl	e9bc <usb_rx>
    6d36:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    6d38:	cbz	r0, 6d3c <MTPD::receive_buffer()+0x14>
    6d3a:	pop	{r4, pc}
    6d3c:	bl	2134 <mtp_yield()>
    6d40:	b.n	6d2c <MTPD::receive_buffer()+0x4>
    6d42:	nop

00006d44 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d48:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    6d4a:	ldr	r0, [r0, #0]
    6d4c:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d4e:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    6d50:	ldr	r3, [r3, #40]	; 0x28
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d52:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    6d54:	blx	r3
    if (write_get_length_) {
    6d56:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    6d58:	mov	r7, r0
    if (write_get_length_) {
    6d5a:	cbnz	r5, 6db4 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d5c:	cbz	r0, 6dae <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6d5e:	mov	r9, r5
    6d60:	b.n	6d66 <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d62:	cmp	r7, r5
    6d64:	bls.n	6dae <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    6d66:	mov	r0, r6
    6d68:	bl	5b4c <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    6d6c:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    6d70:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    6d74:	ldr	r1, [r0, #0]
    6d76:	subs	r4, r7, r5
    6d78:	rsb	lr, r2, #64	; 0x40
    6d7c:	cmp	r4, lr
    6d7e:	it	cs
    6d80:	movcs	r4, lr
    6d82:	str	r4, [sp, #0]
    6d84:	add	r3, r2
    6d86:	ldr.w	sl, [r1, #48]	; 0x30
    6d8a:	mov	r2, r5
    6d8c:	mov	r1, r8
    6d8e:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    6d90:	ldr	r1, [r6, #4]
    6d92:	ldrh	r3, [r1, #0]
    6d94:	add	r3, r4
    6d96:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6d98:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    6d9a:	add	r5, r4
        data_buffer_->len += to_copy;
    6d9c:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6d9e:	bne.n	6d62 <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    6da0:	movs	r0, #4
    6da2:	bl	eaa8 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6da6:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6da8:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6dac:	bhi.n	6d66 <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6dae:	add	sp, #8
    6db0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    6db4:	ldr	r3, [r6, #12]
    6db6:	add	r7, r3
    6db8:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6dba:	add	sp, #8
    6dbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006dc0 <MTPD::read(char*, unsigned long)>:
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6dc0:	cbz	r2, 6e2c <MTPD::read(char*, unsigned long)+0x6c>
      if(CONTAINER->len>20) printf(" %x", CONTAINER->params[2]); \
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    6dc2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dc6:	mov	r6, r0
    6dc8:	mov	r5, r1
    while (size) {
    6dca:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    6dcc:	movs	r7, #0
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    6dce:	mov	r0, r6
    6dd0:	bl	6d28 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6dd4:	ldr	r3, [r6, #4]
    6dd6:	ldrh.w	lr, [r3, #2]
    6dda:	ldrh.w	ip, [r3]
    6dde:	rsb	r4, lr, ip
    6de2:	cmp	r4, r8
    6de4:	it	cs
    6de6:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    6de8:	add.w	r1, r3, #8
    6dec:	add	r1, lr
    6dee:	mov	r0, r5
    6df0:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    6df2:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    6df6:	cbz	r5, 6e08 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    6df8:	bl	db58 <memcpy>
    6dfc:	ldr	r3, [r6, #4]
    6dfe:	ldrh.w	lr, [r3, #2]
    6e02:	ldrh.w	ip, [r3]
        data += to_copy;
    6e06:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    6e08:	add	r4, lr
    6e0a:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    6e0c:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    6e0e:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    6e10:	beq.n	6e1c <MTPD::read(char*, unsigned long)+0x5c>
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6e12:	cmp.w	r8, #0
    6e16:	bne.n	6dce <MTPD::read(char*, unsigned long)+0xe>
    6e18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    6e1c:	mov	r0, r3
    6e1e:	bl	e970 <usb_free>
        data_buffer_ = NULL;
    6e22:	str	r7, [r6, #4]
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6e24:	cmp.w	r8, #0
    6e28:	bne.n	6dce <MTPD::read(char*, unsigned long)+0xe>
    6e2a:	b.n	6e18 <MTPD::read(char*, unsigned long)+0x58>
    6e2c:	bx	lr
    6e2e:	nop

00006e30 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e30:	push	{r4, r5, r6, lr}
    6e32:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e34:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e36:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e38:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e3c:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e3e:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6e42:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    6e46:	cbz	r4, 6e68 <MTPD::readstring(char*)+0x38>
    6e48:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e4a:	cbz	r2, 6e64 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e4c:	movs	r2, #2
    6e4e:	add.w	r1, sp, #6
    6e52:	mov	r0, r6
    6e54:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6e58:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    6e5c:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e60:	cmp	r5, r4
    6e62:	bne.n	6e4c <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    6e64:	add	sp, #8
    6e66:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    6e68:	lsls	r2, r2, #1
    6e6a:	mov	r1, r4
    6e6c:	mov	r0, r6
    6e6e:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6e72:	b.n	6e64 <MTPD::readstring(char*)+0x34>

00006e74 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
    }
    storage_->close();
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    6e74:	push	{r4, r5, lr}
    6e76:	sub	sp, #260	; 0x104
    6e78:	mov	r4, r0
    6e7a:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6e7c:	movs	r2, #12
    6e7e:	mov	r1, sp
    6e80:	bl	6dc0 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[MAX_FILENAME_LEN];
        ReadMTPHeader();
        readstring(filename);
    6e84:	mov	r1, sp
    6e86:	mov	r0, r4
    6e88:	bl	6e30 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    6e8c:	ldr	r0, [r4, #0]
    6e8e:	ldr	r3, [r0, #0]
    6e90:	mov	r2, sp
    6e92:	mov	r1, r5
    6e94:	ldr	r3, [r3, #72]	; 0x48
    6e96:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    6e98:	movw	r0, #8193	; 0x2001
    6e9c:	add	sp, #260	; 0x104
    6e9e:	pop	{r4, r5, pc}

00006ea0 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6ea0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ea4:	sub	sp, #276	; 0x114
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6ea6:	add	r7, sp, #16
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6ea8:	mov	r9, r1
    6eaa:	mov	fp, r2
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6eac:	mov	r1, r7
    6eae:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6eb0:	mov	r5, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6eb2:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6eb6:	ldrh	r3, [r7, #4]
    6eb8:	cmp	r3, #2
    6eba:	it	eq
    6ebc:	ldreq	r4, [r7, #0]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ebe:	mov.w	r2, #4
    6ec2:	mov	r1, r7
    6ec4:	mov	r0, r5
    6ec6:	ite	eq
    6ec8:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    6eca:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ece:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ed2:	movs	r2, #2
    6ed4:	mov	r1, r7
    6ed6:	mov	r0, r5
    6ed8:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6edc:	ldrh.w	sl, [r7]
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6ee0:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ee4:	movs	r2, #2
    6ee6:	mov	r1, r7
    6ee8:	mov	r0, r5
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6eea:	rsb	sl, r3, sl
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6eee:	bl	6dc0 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ef2:	movs	r2, #4
    6ef4:	mov	r1, r7
    6ef6:	mov	r0, r5
    6ef8:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6efc:	movs	r2, #2
    6efe:	mov	r1, r7
    6f00:	mov	r0, r5
    6f02:	bl	6dc0 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f06:	movs	r2, #4
    6f08:	mov	r1, r7
    6f0a:	mov	r0, r5
    6f0c:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6f10:	movs	r2, #4
    6f12:	mov	r1, r7
    6f14:	mov	r0, r5
    6f16:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6f1a:	movs	r2, #4
    6f1c:	mov	r1, r7
    6f1e:	mov	r0, r5
    6f20:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6f24:	movs	r2, #4
    6f26:	mov	r1, r7
    6f28:	mov	r0, r5
    6f2a:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6f2e:	movs	r2, #4
    6f30:	mov	r1, r7
    6f32:	mov	r0, r5
    6f34:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6f38:	movs	r2, #4
    6f3a:	mov	r1, r7
    6f3c:	mov	r0, r5
    6f3e:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6f42:	movs	r2, #4
    6f44:	mov	r1, r7
    6f46:	mov	r0, r5
    6f48:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f4c:	movs	r2, #2
    6f4e:	mov	r1, r7
    6f50:	mov	r0, r5
    6f52:	bl	6dc0 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f56:	movs	r2, #4
    6f58:	mov	r1, r7
    6f5a:	mov	r0, r5
    6f5c:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    6f60:	movs	r2, #4
    6f62:	mov	r1, r7
    6f64:	mov	r0, r5
    6f66:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    6f6a:	mov	r1, r7
    6f6c:	mov	r0, r5
    6f6e:	bl	6e30 <MTPD::readstring(char*)>
    6f72:	mov	r0, r7
    6f74:	bl	11440 <strlen>
    6f78:	adds	r0, #1
    6f7a:	sub.w	r4, r4, r0, lsl #1
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6f7e:	clz	sl, sl
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6f82:	cmp	r4, #3
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6f84:	mov.w	sl, sl, lsr #5

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);
    6f88:	add.w	r9, r9, #4294967295
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6f8c:	bls.n	6fa8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x108>
    6f8e:	mov	r6, r4
    6f90:	add.w	r8, sp, #12
    6f94:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f96:	movs	r2, #4
    6f98:	mov	r1, r8
    6f9a:	mov	r0, r5
    6f9c:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6fa0:	cmp	r6, #3
    6fa2:	bhi.n	6f94 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xf4>
    6fa4:	and.w	r4, r4, #3
    6fa8:	add.w	r8, sp, #12
    while(len) {read8(); len--;}
    6fac:	cbz	r4, 6fbc <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11c>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6fae:	movs	r2, #1
    6fb0:	mov	r1, r8
    6fb2:	mov	r0, r5
    6fb4:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    6fb8:	subs	r4, #1
    6fba:	bne.n	6fae <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10e>
    
    return storage_->Create(store, parent, dir, filename);
    6fbc:	ldr	r0, [r5, #0]
    6fbe:	ldr	r4, [r0, #0]
    6fc0:	str	r7, [sp, #0]
    6fc2:	mov	r3, sl
    6fc4:	mov	r2, fp
    6fc6:	mov	r1, r9
    6fc8:	ldr	r4, [r4, #44]	; 0x2c
    6fca:	blx	r4
  }
    6fcc:	add	sp, #276	; 0x114
    6fce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fd2:	nop

00006fd4 <MTPD::SendObject()>:

  bool MTPD::SendObject() {
    6fd4:	push	{r4, r5, r6, r7, lr}
    6fd6:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6fd8:	movs	r2, #12
    6fda:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    6fdc:	mov	r6, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6fde:	bl	6dc0 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6fe2:	ldrh.w	r3, [sp, #8]
    6fe6:	cmp	r3, #2
    6fe8:	beq.n	6ff8 <MTPD::SendObject()+0x24>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    6fea:	ldr	r0, [r6, #0]
    6fec:	ldr	r3, [r0, #0]
    6fee:	ldr	r3, [r3, #56]	; 0x38
    6ff0:	blx	r3
    return true;
    6ff2:	movs	r0, #1
  }
    6ff4:	add	sp, #20
    6ff6:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    6ff8:	ldr	r7, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    6ffa:	subs	r7, #12
    6ffc:	beq.n	6fea <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    6ffe:	movs	r5, #0

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    7000:	mov	r0, r6
    7002:	bl	6d28 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    7006:	ldmia.w	r6, {r0, r1}
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    700a:	ldrh	r2, [r1, #2]
    700c:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    7010:	ldr	r3, [r0, #0]
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    7012:	subs	r4, r4, r2
    7014:	cmp	r4, r7
    7016:	it	cs
    7018:	movcs	r4, r7
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    701a:	add	r1, r2
    701c:	ldr	r3, [r3, #52]	; 0x34
    701e:	mov	r2, r4
    7020:	blx	r3
      data_buffer_->index += to_copy;
      len -= to_copy;
    7022:	subs	r7, r7, r4
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    7024:	cmp	r0, #0
    7026:	beq.n	6ff4 <MTPD::SendObject()+0x20>
      data_buffer_->index += to_copy;
    7028:	ldr	r0, [r6, #4]
    702a:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    702c:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    702e:	add	r4, r3
    7030:	uxth	r4, r4
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    7032:	cmp	r2, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    7034:	strh	r4, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    7036:	beq.n	703e <MTPD::SendObject()+0x6a>
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    7038:	cmp	r7, #0
    703a:	bne.n	7000 <MTPD::SendObject()+0x2c>
    703c:	b.n	6fea <MTPD::SendObject()+0x16>
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    703e:	bl	e970 <usb_free>
        data_buffer_ = NULL;
    7042:	str	r5, [r6, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    7044:	cmp	r7, #0
    7046:	bne.n	7000 <MTPD::SendObject()+0x2c>
    7048:	b.n	6fea <MTPD::SendObject()+0x16>
    704a:	nop

0000704c <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    704c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7050:	mov	r5, r0
    7052:	sub	sp, #36	; 0x24
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    7054:	movs	r0, #5
    7056:	bl	e9bc <usb_rx>
    705a:	cmp	r0, #0
    705c:	beq.n	70c2 <MTPD::loop()+0x76>
      printContainer();
    705e:	ldr	r1, [r0, #16]
    7060:	ldr	r3, [r0, #8]
    7062:	ldrh	r2, [r0, #14]
    7064:	str	r1, [sp, #4]
    7066:	ldrh	r1, [r0, #12]
    7068:	str	r1, [sp, #0]
    706a:	mov	r4, r0
    706c:	ldr	r1, [pc, #764]	; (736c <MTPD::loop()+0x320>)
    706e:	ldr	r0, [pc, #768]	; (7370 <MTPD::loop()+0x324>)
    7070:	bl	f7b0 <Print::printf(char const*, ...)>
    7074:	ldr	r3, [r4, #8]
    7076:	cmp	r3, #12
    7078:	bhi.n	710a <MTPD::loop()+0xbe>
    707a:	ldr	r1, [pc, #760]	; (7374 <MTPD::loop()+0x328>)
    707c:	ldr	r0, [pc, #752]	; (7370 <MTPD::loop()+0x324>)
    707e:	bl	f7b0 <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    7082:	ldrh	r2, [r4, #0]
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    7084:	ldr	r6, [r4, #16]
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
    7086:	ldrh	r0, [r4, #14]
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    7088:	ldr	r7, [r4, #8]
        int typ= CONTAINER->type;
    708a:	ldrh	r1, [r4, #12]
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    708c:	add.w	r3, r4, #20
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    7090:	cmp	r2, #11
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    7092:	ldmia.w	r3, {r3, r9, fp}
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    7096:	str	r6, [r5, #16]

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    7098:	bls.n	7102 <MTPD::loop()+0xb6>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    709a:	mov.w	sl, #12
        
        if (typ == 1) { // command
    709e:	cmp	r1, #1
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    70a0:	strh.w	sl, [r4]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    70a4:	mov	r8, r3
      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
    70a6:	beq.n	7162 <MTPD::loop()+0x116>
    70a8:	mov.w	r0, #8192	; 0x2000
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    70ac:	movs	r3, #3
        CONTAINER->len=len;
        CONTAINER->op=return_code;
    70ae:	strh	r0, [r4, #14]
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
        CONTAINER->len=len;
    70b0:	str	r7, [r4, #8]
        CONTAINER->op=return_code;
        CONTAINER->transaction_id=id;
    70b2:	str	r6, [r4, #16]
        CONTAINER->params[0]=p1;
    70b4:	str.w	r8, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    70b8:	strh	r3, [r4, #12]
        CONTAINER->params[0]=p1;
        #if DEBUG>1
          printContainer();
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    70ba:	mov	r1, r4
    70bc:	movs	r0, #4
    70be:	bl	eaa8 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    70c2:	movs	r0, #6
    70c4:	bl	e9bc <usb_rx>
    70c8:	mov	r4, r0
    70ca:	cbz	r0, 70fc <MTPD::loop()+0xb0>
      printf("Event: "); printContainer();
    70cc:	ldr	r1, [pc, #680]	; (7378 <MTPD::loop()+0x32c>)
    70ce:	ldr	r0, [pc, #672]	; (7370 <MTPD::loop()+0x324>)
    70d0:	bl	f7b0 <Print::printf(char const*, ...)>
    70d4:	ldr	r1, [r4, #16]
    70d6:	ldr	r3, [r4, #8]
    70d8:	ldrh	r2, [r4, #14]
    70da:	str	r1, [sp, #4]
    70dc:	ldrh	r1, [r4, #12]
    70de:	str	r1, [sp, #0]
    70e0:	ldr	r0, [pc, #652]	; (7370 <MTPD::loop()+0x324>)
    70e2:	ldr	r1, [pc, #648]	; (736c <MTPD::loop()+0x320>)
    70e4:	bl	f7b0 <Print::printf(char const*, ...)>
    70e8:	ldr	r3, [r4, #8]
    70ea:	cmp	r3, #12
    70ec:	bhi.n	7136 <MTPD::loop()+0xea>
    70ee:	ldr	r1, [pc, #644]	; (7374 <MTPD::loop()+0x328>)
    70f0:	ldr	r0, [pc, #636]	; (7370 <MTPD::loop()+0x324>)
    70f2:	bl	f7b0 <Print::printf(char const*, ...)>
      usb_free(receive_buffer);
    70f6:	mov	r0, r4
    70f8:	bl	e970 <usb_free>
    }
  }
    70fc:	add	sp, #36	; 0x24
    70fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    7102:	mov	r0, r4
    7104:	bl	e970 <usb_free>
    7108:	b.n	70c2 <MTPD::loop()+0x76>

  void MTPD::loop(void) 
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
    710a:	ldr	r2, [r4, #20]
    710c:	ldr	r1, [pc, #620]	; (737c <MTPD::loop()+0x330>)
    710e:	ldr	r0, [pc, #608]	; (7370 <MTPD::loop()+0x324>)
    7110:	bl	f7b0 <Print::printf(char const*, ...)>
    7114:	ldr	r3, [r4, #8]
    7116:	cmp	r3, #16
    7118:	bls.n	707a <MTPD::loop()+0x2e>
    711a:	ldr	r2, [r4, #24]
    711c:	ldr	r1, [pc, #604]	; (737c <MTPD::loop()+0x330>)
    711e:	ldr	r0, [pc, #592]	; (7370 <MTPD::loop()+0x324>)
    7120:	bl	f7b0 <Print::printf(char const*, ...)>
    7124:	ldr	r3, [r4, #8]
    7126:	cmp	r3, #20
    7128:	bls.n	707a <MTPD::loop()+0x2e>
    712a:	ldr	r2, [r4, #28]
    712c:	ldr	r1, [pc, #588]	; (737c <MTPD::loop()+0x330>)
    712e:	ldr	r0, [pc, #576]	; (7370 <MTPD::loop()+0x324>)
    7130:	bl	f7b0 <Print::printf(char const*, ...)>
    7134:	b.n	707a <MTPD::loop()+0x2e>
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
      printf("Event: "); printContainer();
    7136:	ldr	r2, [r4, #20]
    7138:	ldr	r1, [pc, #576]	; (737c <MTPD::loop()+0x330>)
    713a:	ldr	r0, [pc, #564]	; (7370 <MTPD::loop()+0x324>)
    713c:	bl	f7b0 <Print::printf(char const*, ...)>
    7140:	ldr	r3, [r4, #8]
    7142:	cmp	r3, #16
    7144:	bls.n	70ee <MTPD::loop()+0xa2>
    7146:	ldr	r2, [r4, #24]
    7148:	ldr	r1, [pc, #560]	; (737c <MTPD::loop()+0x330>)
    714a:	ldr	r0, [pc, #548]	; (7370 <MTPD::loop()+0x324>)
    714c:	bl	f7b0 <Print::printf(char const*, ...)>
    7150:	ldr	r3, [r4, #8]
    7152:	cmp	r3, #20
    7154:	bls.n	70ee <MTPD::loop()+0xa2>
    7156:	ldr	r2, [r4, #28]
    7158:	ldr	r1, [pc, #544]	; (737c <MTPD::loop()+0x330>)
    715a:	ldr	r0, [pc, #532]	; (7370 <MTPD::loop()+0x324>)
    715c:	bl	f7b0 <Print::printf(char const*, ...)>
    7160:	b.n	70ee <MTPD::loop()+0xa2>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7162:	movw	r2, #4108	; 0x100c
    7166:	cmp	r0, r2
    7168:	beq.w	74a6 <MTPD::loop()+0x45a>
    716c:	bhi.n	71aa <MTPD::loop()+0x15e>
    716e:	movw	r2, #4101	; 0x1005
    7172:	cmp	r0, r2
    7174:	beq.w	75ac <MTPD::loop()+0x560>
    7178:	bls.n	7234 <MTPD::loop()+0x1e8>
    717a:	movw	r2, #4104	; 0x1008
    717e:	cmp	r0, r2
    7180:	beq.w	756c <MTPD::loop()+0x520>
    7184:	bhi.w	7300 <MTPD::loop()+0x2b4>
    7188:	movw	r2, #4102	; 0x1006
    718c:	cmp	r0, r2
    718e:	beq.w	73ec <MTPD::loop()+0x3a0>
    7192:	movw	r2, #4103	; 0x1007
    7196:	cmp	r0, r2
    7198:	bne.w	72fa <MTPD::loop()+0x2ae>
              } else {
                p1 = GetNumObjects(p1, p3);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
    719c:	cmp.w	r9, #0
    71a0:	beq.w	7610 <MTPD::loop()+0x5c4>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    71a4:	movw	r0, #8212	; 0x2014
    71a8:	b.n	70ac <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    71aa:	movw	r2, #4121	; 0x1019
    71ae:	cmp	r0, r2
    71b0:	beq.w	7544 <MTPD::loop()+0x4f8>
    71b4:	bls.n	7290 <MTPD::loop()+0x244>
    71b6:	movw	r2, #38914	; 0x9802
    71ba:	cmp	r0, r2
    71bc:	beq.w	74c0 <MTPD::loop()+0x474>
    71c0:	bhi.w	7336 <MTPD::loop()+0x2ea>
    71c4:	movw	r2, #4122	; 0x101a
    71c8:	cmp	r0, r2
    71ca:	beq.w	75ec <MTPD::loop()+0x5a0>
    71ce:	movw	r2, #38913	; 0x9801
    71d2:	cmp	r0, r2
    71d4:	bne.w	72fa <MTPD::loop()+0x2ae>
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
              else {p1 = return_code; return_code=0x2001;}
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    71d8:	movs	r2, #1
    71da:	mov.w	r9, #0
    71de:	mov	r1, r3
    71e0:	strb	r2, [r5, #8]
    71e2:	mov	r0, r5
    71e4:	str.w	r9, [r5, #12]
    71e8:	str	r3, [sp, #12]
    71ea:	bl	62d4 <MTPD::getObjectPropsSupported(unsigned long)>
    71ee:	ldr	r2, [r5, #12]
    71f0:	strb.w	r9, [r5, #8]
    71f4:	adds	r2, #12
    71f6:	movs	r1, #2
    71f8:	strh.w	r1, [sp, #24]
    71fc:	str	r2, [sp, #20]
    71fe:	ldrh	r2, [r4, #14]
    7200:	strh.w	r2, [sp, #26]
    7204:	ldr	r2, [r4, #16]
    7206:	str	r2, [sp, #28]
    7208:	add	r1, sp, #20
    720a:	mov	r0, r5
    720c:	movs	r2, #12
    720e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    7212:	ldr	r3, [sp, #12]
    7214:	mov	r0, r5
    7216:	mov	r1, r3
    7218:	bl	62d4 <MTPD::getObjectPropsSupported(unsigned long)>
    721c:	mov	r0, r5
    721e:	bl	5b4c <MTPD::get_buffer()>
    7222:	ldr	r1, [r5, #4]
    7224:	movs	r0, #4
    7226:	bl	eaa8 <usb_tx>
    722a:	str.w	r9, [r5, #4]
              break;
    722e:	movw	r0, #8193	; 0x2001
    7232:	b.n	70ac <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7234:	movw	r3, #4098	; 0x1002
    7238:	cmp	r0, r3
    723a:	beq.w	73d8 <MTPD::loop()+0x38c>
    723e:	bls.w	7394 <MTPD::loop()+0x348>
    7242:	movw	r3, #4099	; 0x1003
    7246:	cmp	r0, r3
    7248:	beq.n	722e <MTPD::loop()+0x1e2>
    724a:	movw	r3, #4100	; 0x1004
    724e:	cmp	r0, r3
    7250:	bne.n	72fa <MTPD::loop()+0x2ae>
              openSession(p1);
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    7252:	mov.w	r9, #0
    7256:	movs	r3, #1
    7258:	strb	r3, [r5, #8]
    725a:	mov	r0, r5
    725c:	str.w	r9, [r5, #12]
    7260:	bl	5fa8 <MTPD::WriteStorageIDs()>
    7264:	ldr	r3, [r5, #12]
    7266:	strb.w	r9, [r5, #8]
    726a:	adds	r3, #12
    726c:	movs	r2, #2
    726e:	strh.w	r2, [sp, #24]
    7272:	str	r3, [sp, #20]
    7274:	ldrh	r3, [r4, #14]
    7276:	strh.w	r3, [sp, #26]
    727a:	ldr	r3, [r4, #16]
    727c:	str	r3, [sp, #28]
    727e:	mov	r0, r5
    7280:	movs	r2, #12
    7282:	add	r1, sp, #20
    7284:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    7288:	mov	r0, r5
    728a:	bl	5fa8 <MTPD::WriteStorageIDs()>
    728e:	b.n	721c <MTPD::loop()+0x1d0>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7290:	movw	r2, #4112	; 0x1010
    7294:	cmp	r0, r2
    7296:	beq.n	72fa <MTPD::loop()+0x2ae>
    7298:	bls.n	7380 <MTPD::loop()+0x334>
    729a:	movw	r2, #4116	; 0x1014
    729e:	cmp	r0, r2
    72a0:	beq.w	7406 <MTPD::loop()+0x3ba>
    72a4:	movw	r2, #4117	; 0x1015
    72a8:	cmp	r0, r2
    72aa:	bne.n	72fa <MTPD::loop()+0x2ae>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    72ac:	movw	r2, #54274	; 0xd402
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    72b0:	mov.w	r9, #0
    72b4:	movs	r1, #1
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    72b6:	cmp	r3, r2
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    72b8:	str.w	r9, [r5, #12]
    72bc:	strb	r1, [r5, #8]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    72be:	beq.w	7656 <MTPD::loop()+0x60a>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    72c2:	movs	r3, #2
    72c4:	movs	r2, #12
    72c6:	strb.w	r9, [r5, #8]
    72ca:	str	r2, [sp, #20]
    72cc:	strh.w	r3, [sp, #24]
    72d0:	ldrh	r3, [r4, #14]
    72d2:	strh.w	r3, [sp, #26]
    72d6:	ldr	r3, [r4, #16]
    72d8:	str	r3, [sp, #28]
    72da:	add	r1, sp, #20
    72dc:	mov	r0, r5
    72de:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    72e2:	mov	r0, r5
    72e4:	bl	5b4c <MTPD::get_buffer()>
    72e8:	movs	r0, #4
    72ea:	ldr	r1, [r5, #4]
    72ec:	bl	eaa8 <usb_tx>
    72f0:	movs	r3, #0
    72f2:	str	r3, [r5, #4]
              break;
    72f4:	movw	r0, #8193	; 0x2001
    72f8:	b.n	70ac <MTPD::loop()+0x60>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    72fa:	movw	r0, #8197	; 0x2005
    72fe:	b.n	70ac <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7300:	movw	r2, #4105	; 0x1009
    7304:	cmp	r0, r2
    7306:	beq.w	7504 <MTPD::loop()+0x4b8>
    730a:	movw	r2, #4107	; 0x100b
    730e:	cmp	r0, r2
    7310:	bne.n	72fa <MTPD::loop()+0x2ae>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    7312:	cmp.w	r9, #0
    7316:	bne.w	71a4 <MTPD::loop()+0x158>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(p1)) {
    731a:	ldr	r0, [r5, #0]
    731c:	ldr	r2, [r0, #0]
    731e:	mov	r1, r3
    7320:	ldr	r3, [r2, #60]	; 0x3c
    7322:	blx	r3
    7324:	movw	r3, #8210	; 0x2012
    7328:	movw	r2, #8193	; 0x2001
    732c:	cmp	r0, #0
    732e:	ite	eq
    7330:	moveq	r0, r3
    7332:	movne	r0, r2
    7334:	b.n	70ac <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7336:	movw	r2, #38915	; 0x9803
    733a:	cmp	r0, r2
    733c:	beq.w	7450 <MTPD::loop()+0x404>
    7340:	movw	r2, #38916	; 0x9804
    7344:	cmp	r0, r2
    7346:	bne.n	72fa <MTPD::loop()+0x2ae>
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    7348:	mov	r0, r5
    734a:	str	r3, [sp, #12]
    734c:	bl	6d28 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    7350:	movw	r2, #56327	; 0xdc07
    7354:	cmp	r9, r2
    7356:	ldr	r3, [sp, #12]
    7358:	bne.n	72fa <MTPD::loop()+0x2ae>
    735a:	mov	r1, r3
    735c:	mov	r0, r5
    735e:	bl	6e74 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    7362:	cmp	r0, #0
    7364:	beq.w	7102 <MTPD::loop()+0xb6>
    7368:	uxth	r0, r0
    736a:	b.n	70ac <MTPD::loop()+0x60>
    736c:	.word	0x00014c9c
    7370:	.word	0x1fff0c58
    7374:	.word	0x00014b08
    7378:	.word	0x00014cb0
    737c:	.word	0x00014cac
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7380:	movw	r3, #4109	; 0x100d
    7384:	cmp	r0, r3
    7386:	bne.n	72fa <MTPD::loop()+0x2ae>
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    7388:	mov	r0, r5
    738a:	bl	6fd4 <MTPD::SendObject()>
              break;
    738e:	movw	r0, #8193	; 0x2001
    7392:	b.n	70ac <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7394:	movw	r3, #4097	; 0x1001
    7398:	cmp	r0, r3
    739a:	bne.n	72fa <MTPD::loop()+0x2ae>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    739c:	mov.w	r9, #0
    73a0:	strb	r1, [r5, #8]
    73a2:	mov	r0, r5
    73a4:	str.w	r9, [r5, #12]
    73a8:	bl	5d2c <MTPD::WriteDescriptor()>
    73ac:	ldr	r3, [r5, #12]
    73ae:	strb.w	r9, [r5, #8]
    73b2:	adds	r3, #12
    73b4:	movs	r2, #2
    73b6:	strh.w	r2, [sp, #24]
    73ba:	str	r3, [sp, #20]
    73bc:	ldrh	r3, [r4, #14]
    73be:	strh.w	r3, [sp, #26]
    73c2:	ldr	r3, [r4, #16]
    73c4:	str	r3, [sp, #28]
    73c6:	mov	r0, r5
    73c8:	mov	r2, sl
    73ca:	add	r1, sp, #20
    73cc:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    73d0:	mov	r0, r5
    73d2:	bl	5d2c <MTPD::WriteDescriptor()>
    73d6:	b.n	721c <MTPD::loop()+0x1d0>
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
      storage_->ResetIndex();
    73d8:	ldr	r0, [r5, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    73da:	ldr	r2, [pc, #736]	; (76bc <MTPD::loop()+0x670>)
      storage_->ResetIndex();
    73dc:	ldr	r3, [r0, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    73de:	str.w	r8, [r2]
      storage_->ResetIndex();
    73e2:	ldr	r3, [r3, #68]	; 0x44
    73e4:	blx	r3
    73e6:	movw	r0, #8193	; 0x2001
    73ea:	b.n	70ac <MTPD::loop()+0x60>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
              break;
            case 0x1006:  // GetNumObjects
              if (p2) {
    73ec:	cmp.w	r9, #0
    73f0:	bne.w	71a4 <MTPD::loop()+0x158>
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(p1, p3);
    73f4:	mov	r2, fp
    73f6:	mov	r1, r3
    73f8:	mov	r0, r5
    73fa:	bl	5b24 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    73fe:	mov	r8, r0
    7400:	movw	r0, #8193	; 0x2001
    7404:	b.n	70ac <MTPD::loop()+0x60>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7406:	movw	r2, #54274	; 0xd402
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    740a:	movs	r0, #0
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    740c:	cmp	r3, r2
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    740e:	strb	r1, [r5, #8]
    7410:	str	r0, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7412:	beq.w	768c <MTPD::loop()+0x640>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7416:	movs	r2, #12
    7418:	movs	r0, #0
    741a:	movs	r1, #2
    741c:	strb	r0, [r5, #8]
    741e:	str	r2, [sp, #20]
    7420:	strh.w	r1, [sp, #24]
    7424:	ldrh	r1, [r4, #14]
    7426:	strh.w	r1, [sp, #26]
    742a:	ldr	r1, [r4, #16]
    742c:	str	r1, [sp, #28]
    742e:	mov	r0, r5
    7430:	add	r1, sp, #20
    7432:	str	r3, [sp, #12]
    7434:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7438:	ldr	r3, [sp, #12]
    743a:	movw	r2, #54274	; 0xd402
    743e:	cmp	r3, r2
    7440:	bne.w	72e2 <MTPD::loop()+0x296>
    7444:	movw	r1, #54274	; 0xd402
    7448:	mov	r0, r5
    744a:	bl	5c70 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    744e:	b.n	72e2 <MTPD::loop()+0x296>
          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
    7450:	mov.w	fp, #0
    7454:	strb	r1, [r5, #8]
    7456:	mov	r2, r9
    7458:	mov	r1, r3
    745a:	mov	r0, r5
    745c:	str.w	fp, [r5, #12]
    7460:	bl	6340 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    7464:	ldr	r3, [r5, #12]
    7466:	strb.w	fp, [r5, #8]
    746a:	adds	r3, #12
    746c:	movs	r2, #2
    746e:	strh.w	r2, [sp, #24]
    7472:	str	r3, [sp, #20]
    7474:	ldrh	r3, [r4, #14]
    7476:	strh.w	r3, [sp, #26]
    747a:	mov	r2, sl
    747c:	ldr	r3, [r4, #16]
    747e:	str	r3, [sp, #28]
    7480:	add	r1, sp, #20
    7482:	mov	r0, r5
    7484:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    7488:	mov	r2, r9
    748a:	mov	r1, r8
    748c:	mov	r0, r5
    748e:	bl	6340 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    7492:	mov	r0, r5
    7494:	bl	5b4c <MTPD::get_buffer()>
    7498:	ldr	r1, [r5, #4]
    749a:	movs	r0, #4
    749c:	bl	eaa8 <usb_tx>
    74a0:	str.w	fp, [r5, #4]
    74a4:	b.n	722e <MTPD::loop()+0x1e2>
                  return_code = 0x2012; // partial deletion
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
    74a6:	mov	r0, r5
    74a8:	mov	r2, r9
    74aa:	mov	r1, r3
    74ac:	bl	6ea0 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                   p2); // parent
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
    74b0:	movs	r7, #24
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
                                   p2); // parent
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
    74b2:	str	r0, [r4, #28]
              }
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
                                   p2); // parent
              CONTAINER->params[1]=p2;
    74b4:	str.w	r9, [r4, #24]
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
    74b8:	strh	r7, [r4, #0]
              break;
    74ba:	movw	r0, #8193	; 0x2001
    74be:	b.n	70ac <MTPD::loop()+0x60>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
    74c0:	mov.w	fp, #0
    74c4:	strb	r1, [r5, #8]
    74c6:	mov	r2, r9
    74c8:	mov	r1, r3
    74ca:	mov	r0, r5
    74cc:	str.w	fp, [r5, #12]
    74d0:	bl	6640 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    74d4:	ldr	r3, [r5, #12]
    74d6:	strb.w	fp, [r5, #8]
    74da:	adds	r3, #12
    74dc:	movs	r2, #2
    74de:	strh.w	r2, [sp, #24]
    74e2:	str	r3, [sp, #20]
    74e4:	ldrh	r3, [r4, #14]
    74e6:	strh.w	r3, [sp, #26]
    74ea:	mov	r2, sl
    74ec:	ldr	r3, [r4, #16]
    74ee:	str	r3, [sp, #28]
    74f0:	add	r1, sp, #20
    74f2:	mov	r0, r5
    74f4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    74f8:	mov	r2, r9
    74fa:	mov	r1, r8
    74fc:	mov	r0, r5
    74fe:	bl	6640 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    7502:	b.n	7492 <MTPD::loop()+0x446>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
    7504:	mov.w	r9, #0
    7508:	strb	r1, [r5, #8]
    750a:	mov	r0, r5
    750c:	mov	r1, r3
    750e:	str.w	r9, [r5, #12]
    7512:	bl	6d44 <MTPD::GetObject(unsigned long)>
    7516:	ldr	r3, [r5, #12]
    7518:	strb.w	r9, [r5, #8]
    751c:	adds	r3, #12
    751e:	movs	r2, #2
    7520:	strh.w	r2, [sp, #24]
    7524:	str	r3, [sp, #20]
    7526:	ldrh	r3, [r4, #14]
    7528:	strh.w	r3, [sp, #26]
    752c:	ldr	r3, [r4, #16]
    752e:	str	r3, [sp, #28]
    7530:	add	r1, sp, #20
    7532:	mov	r0, r5
    7534:	mov	r2, sl
    7536:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    753a:	mov	r1, r8
    753c:	mov	r0, r5
    753e:	bl	6d44 <MTPD::GetObject(unsigned long)>
    7542:	b.n	721c <MTPD::loop()+0x1d0>
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    7544:	ldr	r0, [r5, #0]
    7546:	ldr	r1, [r0, #0]
    7548:	mov	r3, fp
    754a:	add.w	r2, r9, #4294967295
    754e:	ldr	r5, [r1, #76]	; 0x4c
    7550:	mov	r1, r8
    7552:	blx	r5
    7554:	movw	r3, #8197	; 0x2005
    7558:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
    755c:	strh.w	sl, [r4]
              break;
    7560:	mov	r7, sl
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    7562:	cmp	r0, #0
    7564:	ite	eq
    7566:	moveq	r0, r3
    7568:	movne	r0, r2
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
              break;
    756a:	b.n	70ac <MTPD::loop()+0x60>
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
    756c:	mov.w	r9, #0
    7570:	strb	r1, [r5, #8]
    7572:	mov	r0, r5
    7574:	mov	r1, r3
    7576:	str.w	r9, [r5, #12]
    757a:	bl	6080 <MTPD::GetObjectInfo(unsigned long)>
    757e:	ldr	r3, [r5, #12]
    7580:	strb.w	r9, [r5, #8]
    7584:	adds	r3, #12
    7586:	movs	r2, #2
    7588:	strh.w	r2, [sp, #24]
    758c:	str	r3, [sp, #20]
    758e:	ldrh	r3, [r4, #14]
    7590:	strh.w	r3, [sp, #26]
    7594:	ldr	r3, [r4, #16]
    7596:	str	r3, [sp, #28]
    7598:	add	r1, sp, #20
    759a:	mov	r0, r5
    759c:	mov	r2, sl
    759e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    75a2:	mov	r1, r8
    75a4:	mov	r0, r5
    75a6:	bl	6080 <MTPD::GetObjectInfo(unsigned long)>
    75aa:	b.n	721c <MTPD::loop()+0x1d0>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
    75ac:	mov.w	r9, #0
    75b0:	strb	r1, [r5, #8]
    75b2:	mov	r0, r5
    75b4:	mov	r1, r3
    75b6:	str.w	r9, [r5, #12]
    75ba:	bl	64fc <MTPD::GetStorageInfo(unsigned long)>
    75be:	ldr	r3, [r5, #12]
    75c0:	strb.w	r9, [r5, #8]
    75c4:	adds	r3, #12
    75c6:	movs	r2, #2
    75c8:	strh.w	r2, [sp, #24]
    75cc:	str	r3, [sp, #20]
    75ce:	ldrh	r3, [r4, #14]
    75d0:	strh.w	r3, [sp, #26]
    75d4:	ldr	r3, [r4, #16]
    75d6:	str	r3, [sp, #28]
    75d8:	add	r1, sp, #20
    75da:	mov	r0, r5
    75dc:	mov	r2, sl
    75de:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    75e2:	mov	r1, r8
    75e4:	mov	r0, r5
    75e6:	bl	64fc <MTPD::GetStorageInfo(unsigned long)>
    75ea:	b.n	721c <MTPD::loop()+0x1d0>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    }
    
    uint32_t MTPD::copyObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      return storage_->copy(handle,store1,newHandle);
    75ec:	ldr	r0, [r5, #0]
    75ee:	ldr	r1, [r0, #0]
    75f0:	mov	r3, fp
    75f2:	ldr	r5, [r1, #80]	; 0x50
    75f4:	add.w	r2, r9, #4294967295
    75f8:	mov	r1, r8
    75fa:	blx	r5
              len  = receive_buffer->len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
    75fc:	cbnz	r0, 7608 <MTPD::loop()+0x5bc>
    75fe:	movs	r7, #12
    7600:	strh	r7, [r4, #0]
    7602:	movw	r0, #8197	; 0x2005
    7606:	b.n	70ac <MTPD::loop()+0x60>
              else {p1 = return_code; return_code=0x2001;}
    7608:	mov	r8, r0
    760a:	movw	r0, #8193	; 0x2001
    760e:	b.n	70ac <MTPD::loop()+0x60>
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
    7610:	movs	r2, #1
    7612:	mov	r1, r3
    7614:	strb	r2, [r5, #8]
    7616:	mov	r0, r5
    7618:	mov	r2, fp
    761a:	str.w	r9, [r5, #12]
    761e:	str	r3, [sp, #12]
    7620:	bl	6010 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7624:	ldr	r2, [r5, #12]
    7626:	strb.w	r9, [r5, #8]
    762a:	adds	r2, #12
    762c:	movs	r1, #2
    762e:	strh.w	r1, [sp, #24]
    7632:	str	r2, [sp, #20]
    7634:	ldrh	r2, [r4, #14]
    7636:	strh.w	r2, [sp, #26]
    763a:	ldr	r2, [r4, #16]
    763c:	str	r2, [sp, #28]
    763e:	add	r1, sp, #20
    7640:	mov	r0, r5
    7642:	movs	r2, #12
    7644:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    7648:	ldr	r3, [sp, #12]
    764a:	mov	r2, fp
    764c:	mov	r1, r3
    764e:	mov	r0, r5
    7650:	bl	6010 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7654:	b.n	721c <MTPD::loop()+0x1d0>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    7656:	mov	r0, r5
    7658:	ldr	r1, [pc, #100]	; (76c0 <MTPD::loop()+0x674>)
    765a:	bl	5bc8 <MTPD::writestring(char const*)>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    765e:	ldr	r3, [r5, #12]
    7660:	strb.w	r9, [r5, #8]
    7664:	adds	r3, #12
    7666:	movs	r2, #2
    7668:	strh.w	r2, [sp, #24]
    766c:	str	r3, [sp, #20]
    766e:	ldrh	r3, [r4, #14]
    7670:	strh.w	r3, [sp, #26]
    7674:	ldr	r3, [r4, #16]
    7676:	str	r3, [sp, #28]
    7678:	add	r1, sp, #20
    767a:	mov	r0, r5
    767c:	movs	r2, #12
    767e:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    7682:	ldr	r1, [pc, #60]	; (76c0 <MTPD::loop()+0x674>)
    7684:	mov	r0, r5
    7686:	bl	5bc8 <MTPD::writestring(char const*)>
    768a:	b.n	72e2 <MTPD::loop()+0x296>
    768c:	mov	r1, r2
    768e:	mov	r0, r5
    7690:	bl	5c70 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7694:	ldr	r3, [r5, #12]
    7696:	movs	r1, #0
    7698:	adds	r3, #12
    769a:	movs	r2, #2
    769c:	strb	r1, [r5, #8]
    769e:	strh.w	r2, [sp, #24]
    76a2:	str	r3, [sp, #20]
    76a4:	ldrh	r3, [r4, #14]
    76a6:	strh.w	r3, [sp, #26]
    76aa:	ldr	r3, [r4, #16]
    76ac:	str	r3, [sp, #28]
    76ae:	movs	r2, #12
    76b0:	add	r1, sp, #20
    76b2:	mov	r0, r5
    76b4:	bl	5b64 <MTPD::write(char const*, int) [clone .part.2]>
    76b8:	b.n	7444 <MTPD::loop()+0x3f8>
    76ba:	nop
    76bc:	.word	0x20006a3c
    76c0:	.word	0x00014c6c

000076c4 <usb_init_events>:
  extern "C"
  {
    usb_packet_t *tx_event_packet=NULL;

    int usb_init_events(void)
    {
    76c4:	push	{r3, lr}
      tx_event_packet = usb_malloc();
    76c6:	bl	e930 <usb_malloc>
    76ca:	ldr	r2, [pc, #12]	; (76d8 <usb_init_events+0x14>)
    76cc:	mov	r3, r0
      if(tx_event_packet) return 1; else return 0; 
    }
    76ce:	adds	r0, #0
    76d0:	it	ne
    76d2:	movne	r0, #1
  {
    usb_packet_t *tx_event_packet=NULL;

    int usb_init_events(void)
    {
      tx_event_packet = usb_malloc();
    76d4:	str	r3, [r2, #0]
      if(tx_event_packet) return 1; else return 0; 
    }
    76d6:	pop	{r3, pc}
    76d8:	.word	0x20006a40

000076dc <usb_mtp_sendEvent>:


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
    76dc:	push	{r3, r4, r5, lr}
      if (!usb_configuration) return -1;
    76de:	ldr	r3, [pc, #44]	; (770c <usb_mtp_sendEvent+0x30>)
    76e0:	ldrb	r3, [r3, #0]
    76e2:	cbz	r3, 7704 <usb_mtp_sendEvent+0x28>
      memcpy(tx_event_packet->buf, buffer, len);
    76e4:	ldr	r3, [pc, #40]	; (7710 <usb_mtp_sendEvent+0x34>)
    76e6:	ldr	r5, [r3, #0]
    76e8:	mov	r4, r1
    76ea:	mov	r2, r4
    76ec:	mov	r1, r0
    76ee:	add.w	r0, r5, #8
    76f2:	bl	db58 <memcpy>
      tx_event_packet->len = len;
    76f6:	strh	r4, [r5, #0]
      usb_tx(MTP_EVENT_ENDPOINT, tx_event_packet);
    76f8:	mov	r1, r5
    76fa:	movs	r0, #6
    76fc:	bl	eaa8 <usb_tx>
      return len;
    7700:	mov	r0, r4
    7702:	pop	{r3, r4, r5, pc}
    }


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
      if (!usb_configuration) return -1;
    7704:	mov.w	r0, #4294967295
      memcpy(tx_event_packet->buf, buffer, len);
      tx_event_packet->len = len;
      usb_tx(MTP_EVENT_ENDPOINT, tx_event_packet);
      return len;
    }
    7708:	pop	{r3, r4, r5, pc}
    770a:	nop
    770c:	.word	0x20007120
    7710:	.word	0x20006a40

00007714 <MTPD::send_Event(unsigned short)>:

  #endif
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    7714:	push	{r4, r5, lr}
    7716:	sub	sp, #36	; 0x24
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7718:	ldr	r3, [r0, #16]

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    771a:	strh.w	r1, [sp, #6]
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    771e:	movs	r4, #12
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7720:	str	r3, [sp, #8]
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7722:	mov	r1, r4
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    event.params[0]=0;
    7724:	movs	r3, #0
  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    7726:	movs	r5, #4
    event.transaction_id=TID;
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7728:	movs	r2, #60	; 0x3c
    772a:	mov	r0, sp
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    772c:	str	r4, [sp, #0]
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    772e:	strh.w	r5, [sp, #4]
    event.transaction_id=TID;
    event.params[0]=0;
    7732:	str	r3, [sp, #12]
    event.params[1]=0;
    7734:	str	r3, [sp, #16]
    event.params[2]=0;
    7736:	str	r3, [sp, #20]
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7738:	bl	76dc <usb_mtp_sendEvent>
  }
    773c:	add	sp, #36	; 0x24
    773e:	pop	{r4, r5, pc}

00007740 <MTPD::send_DeviceResetEvent()>:
    event.params[2]=p3;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
  }

  int MTPD::send_DeviceResetEvent(void) 
  { return send_Event(MTP_EVENT_DEVICE_RESET); } 
    7740:	movw	r1, #16395	; 0x400b
    7744:	b.w	7714 <MTPD::send_Event(unsigned short)>

00007748 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    7748:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    774a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    774c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    774e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7750:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7752:	beq.n	775c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    7754:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7758:	b.w	f654 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    775c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    775e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7762:	bx	r3

00007764 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7764:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7768:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    776a:	ldr	r5, [r4, #12]
    776c:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    7770:	ldr	r5, [pc, #484]	; (7958 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    7772:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    7774:	bne.n	781c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    7776:	lsls	r7, r3, #31
    7778:	bpl.w	78e2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    777c:	cmp	r1, #0
    777e:	beq.w	7948 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7782:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    7784:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7786:	it	ne
    7788:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    778c:	str	r5, [r4, #52]	; 0x34
    778e:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    7790:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    7794:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    7798:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    779c:	cmp.w	ip, #0
    77a0:	beq.w	78f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    77a4:	cbz	r1, 77b0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    77a6:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    77a8:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    77ac:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    77b0:	ldr	r5, [r0, #4]
    77b2:	ldrb	r6, [r5, #8]
			if (count == 2)
    77b4:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    77b8:	add.w	r6, r6, #4294967295
    77bc:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    77c0:	ite	eq
    77c2:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    77c6:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    77ca:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    77cc:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    77ce:	sub.w	ip, ip, #2
    77d2:	b.n	77e6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    77d4:	cbz	r2, 77da <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    77d6:	strb	r4, [r2, #0]
    77d8:	adds	r2, #1
						} 
						count_read--;
    77da:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    77dc:	and.w	r5, r5, #61440	; 0xf000
    77e0:	cmp	r5, r6
    77e2:	bls.n	7812 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    77e4:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    77e6:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    77e8:	tst.w	r5, #240	; 0xf0
    77ec:	beq.n	77dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    77ee:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    77f0:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    77f4:	mov	r7, r2
    77f6:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    77fa:	bne.n	77d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    77fc:	cbz	r2, 7806 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    77fe:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    7802:	strb	r4, [r2, #1]
    7804:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7806:	and.w	r5, r5, #61440	; 0xf000
    780a:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    780c:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7810:	bhi.n	77e4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    7812:	cmp.w	ip, #0
    7816:	beq.n	78f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    7818:	ldr	r4, [r0, #0]
    781a:	b.n	77a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    781c:	lsls	r5, r3, #31
    781e:	bpl.n	78ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    7820:	cmp	r1, #0
    7822:	beq.w	7938 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7826:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    7828:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    782a:	it	ne
    782c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    7830:	str	r5, [r4, #52]	; 0x34
    7832:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    7834:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    7838:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    783c:	cmp.w	lr, #0
    7840:	beq.n	78c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    7842:	cbz	r1, 7850 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    7844:	ldrb.w	ip, [r1, #1]
    7848:	ldrb	r5, [r1, #0]
    784a:	adds	r1, #2
    784c:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7850:	ldr	r5, [r0, #4]
    7852:	ldrb	r6, [r5, #8]
			if (count == 2)
    7854:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7858:	add.w	r6, r6, #4294967295
    785c:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    7860:	ite	eq
    7862:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    7866:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    786a:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    786c:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    786e:	sub.w	lr, lr, #2
    7872:	b.n	7886 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    7874:	cbz	r2, 787a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    7876:	strb	r4, [r2, #0]
    7878:	adds	r2, #1
						} 
						count_read--;
    787a:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    787c:	and.w	r5, r5, #61440	; 0xf000
    7880:	cmp	r5, r6
    7882:	bls.n	78b0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    7884:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    7886:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    7888:	tst.w	r5, #240	; 0xf0
    788c:	beq.n	787c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    788e:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    7892:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    7894:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    7896:	bne.n	7874 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    7898:	cbz	r2, 78a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    789a:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    789e:	asrs	r4, r4, #8
    78a0:	strb	r4, [r2, #1]
    78a2:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    78a4:	and.w	r5, r5, #61440	; 0xf000
    78a8:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    78aa:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    78ae:	bhi.n	7884 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    78b0:	cmp.w	lr, #0
    78b4:	beq.n	78c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    78b6:	ldr	r4, [r0, #0]
    78b8:	b.n	7842 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    78ba:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    78bc:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    78c0:	cmp.w	lr, #0
    78c4:	bne.n	7842 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    78c6:	cbz	r3, 7910 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    78c8:	ldr	r4, [r0, #0]
			sr = port().SR;
    78ca:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    78cc:	tst.w	r1, #240	; 0xf0
    78d0:	beq.n	78ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    78d2:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    78d4:	lsls	r4, r3, #31
    78d6:	bpl.n	7914 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    78d8:	cbz	r2, 78de <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    78da:	strb	r1, [r2, #0]
    78dc:	adds	r2, #1
					count_read--;
    78de:	subs	r3, #1
    78e0:	b.n	78c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    78e2:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    78e6:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    78e8:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    78ec:	cmp.w	ip, #0
    78f0:	bne.w	77a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    78f4:	cbz	r3, 7910 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    78f6:	ldr	r4, [r0, #0]
			sr = port().SR;
    78f8:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    78fa:	tst.w	r1, #240	; 0xf0
    78fe:	beq.n	78f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    7900:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    7902:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    7904:	bpl.n	7926 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    7906:	cbz	r2, 790c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    7908:	strb	r1, [r2, #0]
    790a:	adds	r2, #1
					count_read--;
    790c:	subs	r3, #1
    790e:	b.n	78f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    7910:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    7914:	cbz	r2, 7922 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    7916:	mov	r4, r2
						*p_read++ = w >> 8;
    7918:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    791a:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    791e:	strb	r5, [r2, #1]
    7920:	mov	r2, r4
					}
					count_read -= 2;
    7922:	subs	r3, #2
    7924:	b.n	78c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    7926:	cbz	r2, 7934 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    7928:	mov	r4, r2
    792a:	asrs	r5, r1, #8
    792c:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    7930:	strb	r1, [r2, #1]
    7932:	mov	r2, r4
					}
					count_read -= 2;
    7934:	subs	r3, #2
    7936:	b.n	78f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7938:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    793c:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    793e:	it	ne
    7940:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    7944:	str	r5, [r4, #52]	; 0x34
    7946:	b.n	7834 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7948:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    794c:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    794e:	it	ne
    7950:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    7954:	str	r5, [r4, #52]	; 0x34
    7956:	b.n	7790 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    7958:	.word	0x801f0400

0000795c <_spi_dma_rxISR1()>:
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    795c:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    795e:	ldr	r3, [pc, #280]	; (7a78 <_spi_dma_rxISR1()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7960:	ldr	r2, [pc, #280]	; (7a7c <_spi_dma_rxISR1()+0x120>)
    7962:	ldr	r0, [r3, #56]	; 0x38
    7964:	ldr	r4, [r3, #52]	; 0x34
    7966:	ldrb	r1, [r0, #4]
    7968:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    796a:	ldr	r1, [pc, #276]	; (7a80 <_spi_dma_rxISR1()+0x124>)
    796c:	ldrb	r2, [r4, #4]
    796e:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    7970:	ldr	r2, [r3, #48]	; 0x30
    7972:	ldrb	r0, [r0, #4]
    7974:	strb	r0, [r1, #0]
    7976:	cmp	r2, #0
    7978:	beq.n	7a08 <_spi_dma_rxISR1()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    797a:	ldr	r1, [r3, #4]
    797c:	ldr	r1, [r1, #12]
    797e:	cmp	r2, r1
    7980:	bhi.n	7a00 <_spi_dma_rxISR1()+0xa4>
    7982:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7984:	ldrh	r4, [r1, #30]
    7986:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    7988:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    798c:	bmi.n	7a5a <_spi_dma_rxISR1()+0xfe>
		tcd->BITER = len & 0x7fff;
    798e:	ubfx	r0, r0, #0, #15
    7992:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7994:	ldrh	r0, [r1, #30]
    7996:	uxth	r0, r0
    7998:	strh	r0, [r1, #22]
    799a:	ldr	r1, [r3, #56]	; 0x38
    799c:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    799e:	ldrh	r0, [r1, #30]
    79a0:	lsls	r0, r0, #16
    79a2:	bmi.n	7a4a <_spi_dma_rxISR1()+0xee>
		tcd->BITER = len & 0x7fff;
    79a4:	ubfx	r0, r2, #0, #15
    79a8:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79aa:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    79ac:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79ae:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    79b0:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79b4:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    79b6:	it	ne
    79b8:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    79ba:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    79bc:	ldr	r1, [r3, #52]	; 0x34
    79be:	ldr	r0, [pc, #184]	; (7a78 <_spi_dma_rxISR1()+0x11c>)
    79c0:	ldr	r1, [r1, #0]
    79c2:	ldr	r5, [r1, #0]
    79c4:	add.w	r4, r0, #44	; 0x2c
    79c8:	cmp	r5, r4
    79ca:	beq.n	7a3a <_spi_dma_rxISR1()+0xde>
    79cc:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    79ce:	ldr	r4, [r0, #12]
    79d0:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    79d4:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    79d6:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    79d8:	itete	ne
    79da:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    79dc:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    79de:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    79e0:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    79e2:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    79e6:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    79e8:	str	r4, [r0, #52]	; 0x34
    79ea:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    79ec:	ldr	r3, [pc, #148]	; (7a84 <_spi_dma_rxISR1()+0x128>)
    79ee:	ldrb	r1, [r1, #4]
    79f0:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    79f2:	ldr	r1, [pc, #132]	; (7a78 <_spi_dma_rxISR1()+0x11c>)
		if (should_reenable_tx)
    79f4:	cbz	r2, 79fc <_spi_dma_rxISR1()+0xa0>
    79f6:	ldr	r2, [r1, #52]	; 0x34
    79f8:	ldrb	r2, [r2, #4]
    79fa:	strb	r2, [r3, #0]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    79fc:	pop	{r4, r5, r6, r7}
    79fe:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    7a00:	subs	r2, r2, r1
    7a02:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7a04:	movs	r2, #1
    7a06:	b.n	79bc <_spi_dma_rxISR1()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a08:	ldr	r0, [r3, #60]	; 0x3c
    7a0a:	ldr	r1, [r3, #0]
    7a0c:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7a0e:	ldr	r4, [pc, #120]	; (7a88 <_spi_dma_rxISR1()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    7a10:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7a12:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a14:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a16:	ldr	r5, [r5, #0]
    7a18:	ldr	r6, [pc, #112]	; (7a8c <_spi_dma_rxISR1()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a1a:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a1e:	movs	r7, #3
    7a20:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a22:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a24:	strb.w	r7, [r3, #45]	; 0x2d
    7a28:	bne.n	7a6a <_spi_dma_rxISR1()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7a2a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7a2c:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7a2e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7a30:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7a32:	beq.n	7a72 <_spi_dma_rxISR1()+0x116>
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7a34:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7a36:	b.w	f654 <EventResponder::triggerEventNotImmediate()>
    7a3a:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a3c:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7a40:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a42:	orr.w	r0, r0, #2147483648	; 0x80000000
    7a46:	str	r0, [r1, #52]	; 0x34
    7a48:	b.n	79ea <_spi_dma_rxISR1()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7a4a:	ldrh	r4, [r1, #30]
    7a4c:	ubfx	r0, r2, #0, #9
    7a50:	and.w	r4, r4, #65024	; 0xfe00
    7a54:	orrs	r0, r4
    7a56:	strh	r0, [r1, #30]
    7a58:	b.n	79aa <_spi_dma_rxISR1()+0x4e>
    7a5a:	ldrh	r4, [r1, #30]
    7a5c:	ubfx	r0, r0, #0, #9
    7a60:	and.w	r4, r4, #65024	; 0xfe00
    7a64:	orrs	r0, r4
    7a66:	strh	r0, [r1, #30]
    7a68:	b.n	7994 <_spi_dma_rxISR1()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a6a:	mov	r3, r5
    7a6c:	mov	r1, r2
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7a6e:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a70:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7a72:	ldr	r3, [r0, #8]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7a74:	pop	{r4, r5, r6, r7}
    7a76:	bx	r3
    7a78:	.word	0x1fff09d4
    7a7c:	.word	0x4000801f
    7a80:	.word	0x4000801c
    7a84:	.word	0x4000801b
    7a88:	.word	0xff0f0000
    7a8c:	.word	0x00007749

00007a90 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a90:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7a92:	ldr	r3, [pc, #280]	; (7bac <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7a94:	ldr	r2, [pc, #280]	; (7bb0 <_spi_dma_rxISR0()+0x120>)
    7a96:	ldr	r0, [r3, #56]	; 0x38
    7a98:	ldr	r4, [r3, #52]	; 0x34
    7a9a:	ldrb	r1, [r0, #4]
    7a9c:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7a9e:	ldr	r1, [pc, #276]	; (7bb4 <_spi_dma_rxISR0()+0x124>)
    7aa0:	ldrb	r2, [r4, #4]
    7aa2:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    7aa4:	ldr	r2, [r3, #48]	; 0x30
    7aa6:	ldrb	r0, [r0, #4]
    7aa8:	strb	r0, [r1, #0]
    7aaa:	cmp	r2, #0
    7aac:	beq.n	7b3c <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    7aae:	ldr	r1, [r3, #4]
    7ab0:	ldr	r1, [r1, #12]
    7ab2:	cmp	r2, r1
    7ab4:	bhi.n	7b34 <_spi_dma_rxISR0()+0xa4>
    7ab6:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7ab8:	ldrh	r4, [r1, #30]
    7aba:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    7abc:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7ac0:	bmi.n	7b8e <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    7ac2:	ubfx	r0, r0, #0, #15
    7ac6:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7ac8:	ldrh	r0, [r1, #30]
    7aca:	uxth	r0, r0
    7acc:	strh	r0, [r1, #22]
    7ace:	ldr	r1, [r3, #56]	; 0x38
    7ad0:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7ad2:	ldrh	r0, [r1, #30]
    7ad4:	lsls	r0, r0, #16
    7ad6:	bmi.n	7b7e <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    7ad8:	ubfx	r0, r2, #0, #15
    7adc:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7ade:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    7ae0:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7ae2:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7ae4:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7ae8:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7aea:	it	ne
    7aec:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    7aee:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7af0:	ldr	r1, [r3, #52]	; 0x34
    7af2:	ldr	r0, [pc, #184]	; (7bac <_spi_dma_rxISR0()+0x11c>)
    7af4:	ldr	r1, [r1, #0]
    7af6:	ldr	r5, [r1, #0]
    7af8:	add.w	r4, r0, #44	; 0x2c
    7afc:	cmp	r5, r4
    7afe:	beq.n	7b6e <_spi_dma_rxISR0()+0xde>
    7b00:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7b02:	ldr	r4, [r0, #12]
    7b04:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7b08:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    7b0a:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7b0c:	itete	ne
    7b0e:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    7b10:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    7b12:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7b14:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7b16:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7b1a:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7b1c:	str	r4, [r0, #52]	; 0x34
    7b1e:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    7b20:	ldr	r3, [pc, #148]	; (7bb8 <_spi_dma_rxISR0()+0x128>)
    7b22:	ldrb	r1, [r1, #4]
    7b24:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    7b26:	ldr	r1, [pc, #132]	; (7bac <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    7b28:	cbz	r2, 7b30 <_spi_dma_rxISR0()+0xa0>
    7b2a:	ldr	r2, [r1, #52]	; 0x34
    7b2c:	ldrb	r2, [r2, #4]
    7b2e:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7b30:	pop	{r4, r5, r6, r7}
    7b32:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    7b34:	subs	r2, r2, r1
    7b36:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7b38:	movs	r2, #1
    7b3a:	b.n	7af0 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7b3c:	ldr	r0, [r3, #60]	; 0x3c
    7b3e:	ldr	r1, [r3, #0]
    7b40:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7b42:	ldr	r4, [pc, #120]	; (7bbc <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    7b44:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7b46:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7b48:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7b4a:	ldr	r5, [r5, #0]
    7b4c:	ldr	r6, [pc, #112]	; (7bc0 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7b4e:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7b52:	movs	r7, #3
    7b54:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7b56:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7b58:	strb.w	r7, [r3, #45]	; 0x2d
    7b5c:	bne.n	7b9e <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7b5e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7b60:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7b62:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7b64:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7b66:	beq.n	7ba6 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7b68:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7b6a:	b.w	f654 <EventResponder::triggerEventNotImmediate()>
    7b6e:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7b70:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7b74:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7b76:	orr.w	r0, r0, #2147483648	; 0x80000000
    7b7a:	str	r0, [r1, #52]	; 0x34
    7b7c:	b.n	7b1e <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7b7e:	ldrh	r4, [r1, #30]
    7b80:	ubfx	r0, r2, #0, #9
    7b84:	and.w	r4, r4, #65024	; 0xfe00
    7b88:	orrs	r0, r4
    7b8a:	strh	r0, [r1, #30]
    7b8c:	b.n	7ade <_spi_dma_rxISR0()+0x4e>
    7b8e:	ldrh	r4, [r1, #30]
    7b90:	ubfx	r0, r0, #0, #9
    7b94:	and.w	r4, r4, #65024	; 0xfe00
    7b98:	orrs	r0, r4
    7b9a:	strh	r0, [r1, #30]
    7b9c:	b.n	7ac8 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7b9e:	mov	r3, r5
    7ba0:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7ba2:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7ba4:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7ba6:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7ba8:	pop	{r4, r5, r6, r7}
    7baa:	bx	r3
    7bac:	.word	0x1fff0994
    7bb0:	.word	0x4000801f
    7bb4:	.word	0x4000801c
    7bb8:	.word	0x4000801b
    7bbc:	.word	0xff0f0000
    7bc0:	.word	0x00007749

00007bc4 <SPIClass::begin()>:
    7bc4:	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    7bc8:	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7bca:	ldr	r4, [r3, #0]
    7bcc:	ldr	r1, [r3, #4]
    7bce:	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7bd0:	ldr	r7, [pc, #88]	; (7c2c <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7bd2:	ldr	r6, [pc, #92]	; (7c30 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7bd4:	orrs	r1, r5
    7bd6:	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7bd8:	ldr	r5, [pc, #88]	; (7c34 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    7bda:	ldr	r1, [pc, #92]	; (7c38 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7bdc:	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7bde:	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7be0:	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    7be2:	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7be4:	ldrb	r1, [r0, #9]
    7be6:	ldr	r2, [pc, #84]	; (7c3c <SPIClass::begin()+0x78>)
    7be8:	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    7bea:	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7bec:	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    7bf0:	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7bf4:	add.w	r1, r2, r4, lsl #3
    7bf8:	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    7bfa:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7bfc:	ldrb	r1, [r0, #8]
    7bfe:	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    7c00:	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7c04:	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    7c06:	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7c08:	add.w	r1, r2, r4, lsl #3
    7c0c:	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    7c0e:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c10:	ldrb	r1, [r0, #10]
    7c12:	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    7c14:	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c18:	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    7c1c:	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c1e:	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    7c22:	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c24:	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    7c26:	str	r1, [r3, #0]
}
    7c28:	bx	lr
    7c2a:	nop
    7c2c:	.word	0x001f4001
    7c30:	.word	0x38001001
    7c34:	.word	0x78001001
    7c38:	.word	0x801f0000
    7c3c:	.word	0x00015048

00007c40 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    7c40:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7c42:	ldr	r3, [pc, #148]	; (7cd8 <SPIClass::setMOSI(unsigned char)+0x98>)
    7c44:	ldr	r5, [r0, #4]
    7c46:	cmp	r3, r5
    7c48:	beq.n	7c6e <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    7c4a:	ldrb	r3, [r0, #9]
    7c4c:	add	r3, r5
    7c4e:	ldrb.w	r6, [r3, #44]	; 0x2c
    7c52:	cmp	r1, r6
    7c54:	beq.n	7c6a <SPIClass::setMOSI(unsigned char)+0x2a>
    7c56:	add.w	r2, r5, #43	; 0x2b
    7c5a:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    7c5c:	ldrb.w	r4, [r2, #1]!
    7c60:	cmp	r4, r1
    7c62:	beq.n	7c9a <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    7c64:	adds	r3, #1
    7c66:	cmp	r3, #4
    7c68:	bne.n	7c5c <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    7c6a:	pop	{r4, r5, r6, r7}
    7c6c:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    7c6e:	cmp	r1, #11
    7c70:	beq.n	7ccc <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    7c72:	cmp	r1, #7
    7c74:	beq.n	7c8a <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    7c76:	cmp	r1, #28
    7c78:	bne.n	7c4a <SPIClass::setMOSI(unsigned char)+0xa>
    7c7a:	ldr	r2, [pc, #96]	; (7cdc <SPIClass::setMOSI(unsigned char)+0x9c>)
    7c7c:	ldrb	r3, [r2, #0]
    7c7e:	bic.w	r3, r3, #3
    7c82:	orr.w	r3, r3, #2
    7c86:	strb	r3, [r2, #0]
    7c88:	b.n	7c4a <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    7c8a:	ldr	r2, [pc, #80]	; (7cdc <SPIClass::setMOSI(unsigned char)+0x9c>)
    7c8c:	ldrb	r3, [r2, #0]
    7c8e:	bic.w	r3, r3, #3
    7c92:	orr.w	r3, r3, #1
    7c96:	strb	r3, [r2, #0]
    7c98:	b.n	7c4a <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7c9a:	ldmia.w	r5, {r1, r2}
    7c9e:	ldr	r1, [r1, #0]
    7ca0:	tst	r1, r2
    7ca2:	beq.n	7cc6 <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7ca4:	ldr	r2, [pc, #56]	; (7ce0 <SPIClass::setMOSI(unsigned char)+0xa0>)
    7ca6:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    7caa:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7cac:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7cae:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    7cb0:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7cb2:	ldrb.w	r1, [r1, #44]	; 0x2c
    7cb6:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    7cba:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7cbe:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    7cc0:	ldr.w	r2, [r5, r1, lsl #2]
    7cc4:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    7cc6:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    7cc8:	pop	{r4, r5, r6, r7}
    7cca:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    7ccc:	ldr	r2, [pc, #12]	; (7cdc <SPIClass::setMOSI(unsigned char)+0x9c>)
    7cce:	ldrb	r3, [r2, #0]
    7cd0:	bic.w	r3, r3, #3
    7cd4:	strb	r3, [r2, #0]
    7cd6:	b.n	7c4a <SPIClass::setMOSI(unsigned char)+0xa>
    7cd8:	.word	0x00014d84
    7cdc:	.word	0x20007141
    7ce0:	.word	0x00015048

00007ce4 <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    7ce4:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7ce6:	ldr	r3, [pc, #144]	; (7d78 <SPIClass::setMISO(unsigned char)+0x94>)
    7ce8:	ldr	r5, [r0, #4]
    7cea:	cmp	r3, r5
    7cec:	beq.n	7d10 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    7cee:	ldrb	r3, [r0, #8]
    7cf0:	add	r3, r5
    7cf2:	ldrb	r6, [r3, #24]
    7cf4:	cmp	r1, r6
    7cf6:	beq.n	7d0c <SPIClass::setMISO(unsigned char)+0x28>
    7cf8:	add.w	r2, r5, #23
    7cfc:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    7cfe:	ldrb.w	r4, [r2, #1]!
    7d02:	cmp	r4, r1
    7d04:	beq.n	7d3c <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    7d06:	adds	r3, #1
    7d08:	cmp	r3, #4
    7d0a:	bne.n	7cfe <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    7d0c:	pop	{r4, r5, r6, r7}
    7d0e:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    7d10:	cmp	r1, #12
    7d12:	beq.n	7d6a <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    7d14:	cmp	r1, #8
    7d16:	beq.n	7d2c <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    7d18:	cmp	r1, #39	; 0x27
    7d1a:	bne.n	7cee <SPIClass::setMISO(unsigned char)+0xa>
    7d1c:	ldr	r2, [pc, #92]	; (7d7c <SPIClass::setMISO(unsigned char)+0x98>)
    7d1e:	ldrb	r3, [r2, #0]
    7d20:	bic.w	r3, r3, #12
    7d24:	orr.w	r3, r3, #8
    7d28:	strb	r3, [r2, #0]
    7d2a:	b.n	7cee <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    7d2c:	ldr	r2, [pc, #76]	; (7d7c <SPIClass::setMISO(unsigned char)+0x98>)
    7d2e:	ldrb	r3, [r2, #0]
    7d30:	bic.w	r3, r3, #12
    7d34:	orr.w	r3, r3, #4
    7d38:	strb	r3, [r2, #0]
    7d3a:	b.n	7cee <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7d3c:	ldmia.w	r5, {r1, r2}
    7d40:	ldr	r1, [r1, #0]
    7d42:	tst	r1, r2
    7d44:	beq.n	7d64 <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7d46:	ldr	r2, [pc, #56]	; (7d80 <SPIClass::setMISO(unsigned char)+0x9c>)
    7d48:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7d4c:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7d4e:	ldr	r4, [r6, #4]
					*reg = 0;
    7d50:	movs	r7, #0
    7d52:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    7d54:	ldrb	r1, [r1, #24]
    7d56:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    7d5a:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7d5e:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    7d60:	ldr	r1, [r5, #28]
    7d62:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    7d64:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    7d66:	pop	{r4, r5, r6, r7}
    7d68:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    7d6a:	ldr	r2, [pc, #16]	; (7d7c <SPIClass::setMISO(unsigned char)+0x98>)
    7d6c:	ldrb	r3, [r2, #0]
    7d6e:	bic.w	r3, r3, #12
    7d72:	strb	r3, [r2, #0]
    7d74:	b.n	7cee <SPIClass::setMISO(unsigned char)+0xa>
    7d76:	nop
    7d78:	.word	0x00014d84
    7d7c:	.word	0x20007141
    7d80:	.word	0x00015048

00007d84 <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7d84:	ldr	r2, [pc, #160]	; (7e28 <SPIClass::setSCK(unsigned char)+0xa4>)
    7d86:	ldr	r3, [r0, #4]
    7d88:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    7d8a:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7d8c:	beq.n	7dba <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    7d8e:	ldrb	r2, [r0, #10]
    7d90:	add	r2, r3
    7d92:	ldrb.w	r2, [r2, #64]	; 0x40
    7d96:	cmp	r1, r2
    7d98:	beq.n	7db6 <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7d9a:	ldrb.w	r4, [r3, #64]	; 0x40
    7d9e:	cmp	r4, r1
    7da0:	beq.n	7e22 <SPIClass::setSCK(unsigned char)+0x9e>
    7da2:	ldrb.w	r4, [r3, #65]	; 0x41
    7da6:	cmp	r4, r1
    7da8:	beq.n	7de6 <SPIClass::setSCK(unsigned char)+0x62>
    7daa:	ldrb.w	r4, [r3, #66]	; 0x42
    7dae:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7db0:	it	eq
    7db2:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    7db4:	beq.n	7de8 <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    7db6:	pop	{r4, r5, r6}
    7db8:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    7dba:	cmp	r1, #13
    7dbc:	beq.n	7e16 <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    7dbe:	cmp	r1, #14
    7dc0:	beq.n	7dd6 <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    7dc2:	cmp	r1, #27
    7dc4:	bne.n	7d8e <SPIClass::setSCK(unsigned char)+0xa>
    7dc6:	ldr	r4, [pc, #100]	; (7e2c <SPIClass::setSCK(unsigned char)+0xa8>)
    7dc8:	ldrb	r2, [r4, #0]
    7dca:	bic.w	r2, r2, #48	; 0x30
    7dce:	orr.w	r2, r2, #32
    7dd2:	strb	r2, [r4, #0]
    7dd4:	b.n	7d8e <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    7dd6:	ldr	r4, [pc, #84]	; (7e2c <SPIClass::setSCK(unsigned char)+0xa8>)
    7dd8:	ldrb	r2, [r4, #0]
    7dda:	bic.w	r2, r2, #48	; 0x30
    7dde:	orr.w	r2, r2, #16
    7de2:	strb	r2, [r4, #0]
    7de4:	b.n	7d8e <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7de6:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7de8:	ldr	r5, [r3, #0]
    7dea:	ldr	r4, [r3, #4]
    7dec:	ldr	r5, [r5, #0]
    7dee:	tst	r5, r4
    7df0:	beq.n	7e12 <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7df2:	ldr	r4, [pc, #60]	; (7e30 <SPIClass::setSCK(unsigned char)+0xac>)
    7df4:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    7df8:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7dfa:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7dfc:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    7dfe:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    7e00:	ldrb.w	r2, [r2, #64]	; 0x40
    7e04:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    7e08:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7e0c:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    7e0e:	ldr	r3, [r3, #68]	; 0x44
    7e10:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    7e12:	strb	r1, [r0, #10]
				return;
    7e14:	b.n	7db6 <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    7e16:	ldr	r4, [pc, #20]	; (7e2c <SPIClass::setSCK(unsigned char)+0xa8>)
    7e18:	ldrb	r2, [r4, #0]
    7e1a:	bic.w	r2, r2, #48	; 0x30
    7e1e:	strb	r2, [r4, #0]
    7e20:	b.n	7d8e <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7e22:	movs	r1, #0
    7e24:	b.n	7de8 <SPIClass::setSCK(unsigned char)+0x64>
    7e26:	nop
    7e28:	.word	0x00014d84
    7e2c:	.word	0x20007141
    7e30:	.word	0x00015048

00007e34 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    7e34:	cbz	r3, 7e3a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7e36:	b.w	7764 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    7e3a:	bx	lr

00007e3c <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7e3c:	ldr	r2, [pc, #400]	; (7fd0 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e3e:	ldr	r3, [pc, #404]	; (7fd4 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    7e40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e44:	ldr	r6, [pc, #400]	; (7fd8 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e46:	ldr.w	sl, [pc, #416]	; 7fe8 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e4a:	ldr	r4, [pc, #400]	; (7fdc <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7e4c:	ldr.w	r9, [pc, #400]	; 7fe0 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7e50:	umull	r5, r2, r2, r0
    7e54:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e58:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e5c:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e60:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e64:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e68:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e6a:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7e6c:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e70:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e74:	rsb	r6, fp, r7
    7e78:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7e7c:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e7e:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e80:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e82:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7e86:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e8a:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7e8e:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e92:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e94:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e98:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e9c:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ea0:	adds	r6, #1
    7ea2:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ea4:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7ea6:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ea8:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7eaa:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    7eac:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7eae:	movw	fp, #365	; 0x16d
    7eb2:	mov.w	r8, #100	; 0x64
    7eb6:	mov.w	sl, #400	; 0x190
    7eba:	b.n	7eda <breakTime(long, tmElements_t&)+0x9e>
    7ebc:	rsb	r5, r6, r5, asr #7
    7ec0:	mls	r5, sl, r5, r3
    7ec4:	cbnz	r0, 7f24 <breakTime(long, tmElements_t&)+0xe8>
    7ec6:	cmp	r5, #0
    7ec8:	ite	ne
    7eca:	movne	r0, fp
    7ecc:	moveq.w	r0, #366	; 0x16e
    7ed0:	add	r2, r0
    7ed2:	cmp	ip, r2
    7ed4:	add.w	r4, r4, #1
    7ed8:	bcc.n	7f02 <breakTime(long, tmElements_t&)+0xc6>
    7eda:	uxtb	r7, r4
    7edc:	addw	r3, r7, #1970	; 0x7b2
    7ee0:	smull	r0, r5, r9, r3
    7ee4:	asrs	r6, r3, #31
    7ee6:	rsb	r0, r6, r5, asr #5
    7eea:	ands.w	lr, r3, #3
    7eee:	mls	r0, r8, r0, r3
    7ef2:	beq.n	7ebc <breakTime(long, tmElements_t&)+0x80>
    7ef4:	movw	r0, #365	; 0x16d
    7ef8:	add	r2, r0
    7efa:	cmp	ip, r2
    7efc:	add.w	r4, r4, #1
    7f00:	bcs.n	7eda <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    7f02:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7f04:	cmp.w	lr, #0
    7f08:	bne.n	7f2a <breakTime(long, tmElements_t&)+0xee>
    7f0a:	ldr	r0, [pc, #212]	; (7fe0 <breakTime(long, tmElements_t&)+0x1a4>)
    7f0c:	asrs	r6, r3, #31
    7f0e:	smull	r4, r0, r0, r3
    7f12:	rsb	r4, r6, r0, asr #5
    7f16:	movs	r5, #100	; 0x64
    7f18:	mls	r4, r5, r4, r3
    7f1c:	cbz	r4, 7f8e <breakTime(long, tmElements_t&)+0x152>
    7f1e:	mov.w	r4, #366	; 0x16e
    7f22:	b.n	7f30 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7f24:	mov.w	r0, #366	; 0x16e
    7f28:	b.n	7ed0 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7f2a:	movw	r4, #365	; 0x16d
    7f2e:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f30:	ldr	r0, [pc, #172]	; (7fe0 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    7f32:	ldr	r5, [pc, #176]	; (7fe4 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f34:	smull	r7, r0, r0, r3
    7f38:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7f3c:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f3e:	rsb	r6, r6, r0, asr #7
    7f42:	movs	r4, #100	; 0x64
    7f44:	mov.w	r0, #400	; 0x190
    7f48:	mls	r6, r0, r6, r3
    7f4c:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7f50:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f54:	movs	r0, #1
    7f56:	movs	r3, #0
    7f58:	b.n	7f60 <breakTime(long, tmElements_t&)+0x124>
    7f5a:	adds	r0, #1
    7f5c:	uxtb	r0, r0
    7f5e:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    7f60:	cmp	r3, #1
    7f62:	uxtb	r7, r3
    7f64:	beq.n	7fa8 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7f66:	ldrb	r4, [r3, r5]
    7f68:	cmp	r4, r2
    7f6a:	bhi.n	7f80 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7f6c:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    7f6e:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7f72:	bne.n	7f5a <breakTime(long, tmElements_t&)+0x11e>
    7f74:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7f76:	adds	r2, #1
    7f78:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7f7a:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7f7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f80:	adds	r7, #1
    7f82:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7f84:	adds	r2, #1
    7f86:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7f88:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7f8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7f8e:	mov.w	r4, #400	; 0x190
    7f92:	rsb	r0, r6, r0, asr #7
    7f96:	mls	r0, r4, r0, r3
    7f9a:	cmp	r0, #0
    7f9c:	movw	r4, #365	; 0x16d
    7fa0:	it	eq
    7fa2:	moveq.w	r4, #366	; 0x16e
    7fa6:	b.n	7f30 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7fa8:	cmp.w	lr, #0
    7fac:	bne.n	7fc4 <breakTime(long, tmElements_t&)+0x188>
    7fae:	cmp.w	r8, #0
    7fb2:	bne.n	7fcc <breakTime(long, tmElements_t&)+0x190>
    7fb4:	cmp	r6, #0
    7fb6:	ite	ne
    7fb8:	movne	r4, #28
    7fba:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7fbc:	cmp	r2, r4
    7fbe:	bcc.n	7fc8 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    7fc0:	subs	r2, r2, r4
    7fc2:	b.n	7f5a <breakTime(long, tmElements_t&)+0x11e>
    7fc4:	movs	r4, #28
    7fc6:	b.n	7fbc <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7fc8:	movs	r7, #2
    7fca:	b.n	7f76 <breakTime(long, tmElements_t&)+0x13a>
    7fcc:	movs	r4, #29
    7fce:	b.n	7fbc <breakTime(long, tmElements_t&)+0x180>
    7fd0:	.word	0xc22e4507
    7fd4:	.word	0x88888889
    7fd8:	.word	0x91a2b3c5
    7fdc:	.word	0xaaaaaaab
    7fe0:	.word	0x51eb851f
    7fe4:	.word	0x00014e74
    7fe8:	.word	0x24924925

00007fec <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    7fec:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    7fee:	ldr	r1, [pc, #12]	; (7ffc <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    7ff0:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    7ff2:	bl	7e3c <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    7ff6:	ldr	r3, [pc, #8]	; (8000 <refreshCache(long) [clone .part.0]+0x14>)
    7ff8:	str	r4, [r3, #0]
    7ffa:	pop	{r4, pc}
    7ffc:	.word	0x20006a48
    8000:	.word	0x20006a44

00008004 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    8004:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8006:	ldr	r4, [pc, #128]	; (8088 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8008:	ldr	r6, [pc, #128]	; (808c <now()+0x88>)
    800a:	ldr	r3, [r4, #0]
    800c:	ldr	r2, [r6, #0]
    800e:	ldr	r5, [pc, #128]	; (8090 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    8010:	sub	sp, #12
    8012:	ldr	r0, [r5, #0]
    8014:	str	r3, [sp, #0]
	return ret;
    8016:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8018:	subs	r3, r3, r2
    801a:	cmp.w	r3, #1000	; 0x3e8
    801e:	bcc.n	8040 <now()+0x3c>
    8020:	adds	r0, #1
    8022:	b.n	8026 <now()+0x22>
    8024:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8026:	ldr	r3, [r4, #0]
    8028:	str	r3, [sp, #0]
	return ret;
    802a:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    802c:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8030:	subs	r3, r3, r2
    8032:	cmp.w	r3, #1000	; 0x3e8
    8036:	add.w	r1, r0, #1
    803a:	bcs.n	8024 <now()+0x20>
    803c:	str	r0, [r5, #0]
    803e:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    8040:	ldr	r7, [pc, #80]	; (8094 <now()+0x90>)
    8042:	ldr	r3, [r7, #0]
    8044:	cmp	r0, r3
    8046:	bcc.n	8068 <now()+0x64>
    if (getTimePtr != 0) {
    8048:	ldr	r3, [pc, #76]	; (8098 <now()+0x94>)
    804a:	ldr	r3, [r3, #0]
    804c:	cbz	r3, 8068 <now()+0x64>
      time_t t = getTimePtr();
    804e:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8050:	ldr	r3, [pc, #72]	; (809c <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    8052:	cbnz	r0, 806c <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8054:	ldr	r1, [pc, #72]	; (80a0 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8056:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8058:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    805a:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    805c:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    805e:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8060:	it	ne
    8062:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8064:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8066:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    8068:	add	sp, #12
    806a:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    806c:	ldr	r2, [r4, #0]
    806e:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8070:	ldr	r3, [r3, #0]
  Status = timeSet;
    8072:	ldr	r2, [pc, #44]	; (80a0 <now()+0x9c>)
	return ret;
    8074:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    8076:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    8078:	add	r3, r0
  Status = timeSet;
    807a:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    807c:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    807e:	str	r3, [r7, #0]
  Status = timeSet;
    8080:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    8082:	add	sp, #12
    8084:	pop	{r4, r5, r6, r7, pc}
    8086:	nop
    8088:	.word	0x2000701c
    808c:	.word	0x20006a5c
    8090:	.word	0x20006a50
    8094:	.word	0x20006a60
    8098:	.word	0x20006a58
    809c:	.word	0x1fff0a14
    80a0:	.word	0x20006a54

000080a4 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    80a4:	push	{r3, lr}
  return hour(now()); 
    80a6:	bl	8004 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    80aa:	ldr	r3, [pc, #16]	; (80bc <hour()+0x18>)
    80ac:	ldr	r3, [r3, #0]
    80ae:	cmp	r0, r3
    80b0:	beq.n	80b6 <hour()+0x12>
    80b2:	bl	7fec <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    80b6:	ldr	r3, [pc, #8]	; (80c0 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    80b8:	ldrb	r0, [r3, #2]
    80ba:	pop	{r3, pc}
    80bc:	.word	0x20006a44
    80c0:	.word	0x20006a48

000080c4 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    80c4:	push	{r3, lr}
  return minute(now()); 
    80c6:	bl	8004 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    80ca:	ldr	r3, [pc, #16]	; (80dc <minute()+0x18>)
    80cc:	ldr	r3, [r3, #0]
    80ce:	cmp	r0, r3
    80d0:	beq.n	80d6 <minute()+0x12>
    80d2:	bl	7fec <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    80d6:	ldr	r3, [pc, #8]	; (80e0 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    80d8:	ldrb	r0, [r3, #1]
    80da:	pop	{r3, pc}
    80dc:	.word	0x20006a44
    80e0:	.word	0x20006a48

000080e4 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    80e4:	push	{r3, lr}
  return second(now()); 
    80e6:	bl	8004 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    80ea:	ldr	r3, [pc, #16]	; (80fc <second()+0x18>)
    80ec:	ldr	r3, [r3, #0]
    80ee:	cmp	r0, r3
    80f0:	beq.n	80f6 <second()+0x12>
    80f2:	bl	7fec <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    80f6:	ldr	r3, [pc, #8]	; (8100 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    80f8:	ldrb	r0, [r3, #0]
    80fa:	pop	{r3, pc}
    80fc:	.word	0x20006a44
    8100:	.word	0x20006a48

00008104 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    8104:	push	{r3, lr}
  return(day(now())); 
    8106:	bl	8004 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    810a:	ldr	r3, [pc, #16]	; (811c <day()+0x18>)
    810c:	ldr	r3, [r3, #0]
    810e:	cmp	r0, r3
    8110:	beq.n	8116 <day()+0x12>
    8112:	bl	7fec <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    8116:	ldr	r3, [pc, #8]	; (8120 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    8118:	ldrb	r0, [r3, #4]
    811a:	pop	{r3, pc}
    811c:	.word	0x20006a44
    8120:	.word	0x20006a48

00008124 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    8124:	push	{r3, lr}
  return month(now()); 
    8126:	bl	8004 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    812a:	ldr	r3, [pc, #16]	; (813c <month()+0x18>)
    812c:	ldr	r3, [r3, #0]
    812e:	cmp	r0, r3
    8130:	beq.n	8136 <month()+0x12>
    8132:	bl	7fec <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    8136:	ldr	r3, [pc, #8]	; (8140 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    8138:	ldrb	r0, [r3, #5]
    813a:	pop	{r3, pc}
    813c:	.word	0x20006a44
    8140:	.word	0x20006a48

00008144 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    8144:	push	{r3, lr}
  return year(now()); 
    8146:	bl	8004 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    814a:	ldr	r3, [pc, #20]	; (8160 <year()+0x1c>)
    814c:	ldr	r3, [r3, #0]
    814e:	cmp	r0, r3
    8150:	beq.n	8156 <year()+0x12>
    8152:	bl	7fec <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    8156:	ldr	r3, [pc, #12]	; (8164 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    8158:	ldrb	r0, [r3, #6]
}
    815a:	addw	r0, r0, #1970	; 0x7b2
    815e:	pop	{r3, pc}
    8160:	.word	0x20006a44
    8164:	.word	0x20006a48

00008168 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    8168:	ldr	r1, [pc, #12]	; (8178 <setSyncProvider(long (*)())+0x10>)
    816a:	ldr	r2, [pc, #16]	; (817c <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    816c:	ldr	r3, [pc, #16]	; (8180 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    816e:	ldr	r1, [r1, #0]
    8170:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    8172:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    8174:	b.w	8004 <now()>
    8178:	.word	0x20006a50
    817c:	.word	0x20006a60
    8180:	.word	0x20006a58

00008184 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    8184:	ldr	r2, [pc, #8]	; (8190 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    8186:	ldr	r1, [pc, #12]	; (8194 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    8188:	ldr	r0, [pc, #12]	; (8198 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    818a:	b.w	f928 <__aeabi_atexit>
    818e:	nop
    8190:	.word	0x1fff0970
    8194:	.word	0x00000789
    8198:	.word	0x20006a64

0000819c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    819c:	ldr	r2, [pc, #8]	; (81a8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    819e:	ldr	r1, [pc, #12]	; (81ac <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    81a0:	ldr	r0, [pc, #12]	; (81b0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    81a2:	b.w	f928 <__aeabi_atexit>
    81a6:	nop
    81a8:	.word	0x1fff0970
    81ac:	.word	0x00000789
    81b0:	.word	0x20006a6c

000081b4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    81b4:	ldr	r2, [pc, #8]	; (81c0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    81b6:	ldr	r1, [pc, #12]	; (81c4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    81b8:	ldr	r0, [pc, #12]	; (81c8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    81ba:	b.w	f928 <__aeabi_atexit>
    81be:	nop
    81c0:	.word	0x1fff0970
    81c4:	.word	0x00000789
    81c8:	.word	0x20006a74

000081cc <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    81cc:	ldr	r2, [pc, #8]	; (81d8 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    81ce:	ldr	r1, [pc, #12]	; (81dc <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    81d0:	ldr	r0, [pc, #12]	; (81e0 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    81d2:	b.w	f928 <__aeabi_atexit>
    81d6:	nop
    81d8:	.word	0x1fff0970
    81dc:	.word	0x00000789
    81e0:	.word	0x20006a7c

000081e4 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    81e4:	ldr	r2, [pc, #8]	; (81f0 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    81e6:	ldr	r1, [pc, #12]	; (81f4 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    81e8:	ldr	r0, [pc, #12]	; (81f8 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    81ea:	b.w	f928 <__aeabi_atexit>
    81ee:	nop
    81f0:	.word	0x1fff0970
    81f4:	.word	0x00000789
    81f8:	.word	0x20006a84

000081fc <AudioControlSGTL5000::disable()>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
    81fc:	movs	r0, #0
    81fe:	bx	lr

00008200 <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
    8200:	movs	r0, #0
    8202:	bx	lr

00008204 <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    8204:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8206:	ldr	r4, [pc, #124]	; (8284 <AudioControlSGTL5000::read(unsigned int)+0x80>)
    8208:	ldrb	r2, [r0, #8]
    820a:	mov	r6, r1
    820c:	lsls	r2, r2, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    820e:	ubfx	r1, r1, #8, #8
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    8212:	movs	r5, #1
    8214:	mov	r7, r0
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    8216:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8218:	strb.w	r2, [r4, #59]	; 0x3b
		transmitting = 1;
    821c:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    8220:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    8224:	bl	87f8 <TwoWire::write(unsigned char)>
    8228:	uxtb	r1, r6
    822a:	mov	r0, r4
    822c:	bl	87f8 <TwoWire::write(unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    8230:	mov	r0, r4
    8232:	movs	r1, #0
    8234:	bl	8ad0 <TwoWire::endTransmission(unsigned char)>
    8238:	cbz	r0, 823e <AudioControlSGTL5000::read(unsigned int)+0x3a>
    823a:	movs	r0, #0
    823c:	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    823e:	mov	r3, r5
    8240:	ldrb	r1, [r7, #8]
    8242:	movs	r2, #2
    8244:	mov	r0, r4
    8246:	bl	8be4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    824a:	cmp	r0, #1
    824c:	bls.n	823a <AudioControlSGTL5000::read(unsigned int)+0x36>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    824e:	ldrb.w	r1, [r4, #56]	; 0x38
    8252:	ldrb.w	r5, [r4, #57]	; 0x39
    8256:	cmp	r1, r5
    8258:	bcs.n	827c <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    825a:	adds	r3, r4, r1
    825c:	adds	r2, r1, #1
    825e:	uxtb	r2, r2
	val = Wire.read() << 8;
    8260:	ldrb	r0, [r3, #24]
    8262:	strb.w	r2, [r4, #56]	; 0x38
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8266:	cmp	r5, r2
    8268:	mov.w	r3, r0, lsl #8
    826c:	bls.n	827c <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    826e:	add	r2, r4
    8270:	adds	r1, #2
    8272:	ldrb	r0, [r2, #24]
    8274:	strb.w	r1, [r4, #56]	; 0x38
    8278:	orrs	r0, r3
    827a:	pop	{r3, r4, r5, r6, r7, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    827c:	mov.w	r0, #4294967295
	val |= Wire.read();
	return val;
}
    8280:	pop	{r3, r4, r5, r6, r7, pc}
    8282:	nop
    8284:	.word	0x1fff0a84

00008288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    8288:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    828a:	ldr	r4, [pc, #80]	; (82dc <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x54>)
    828c:	ldrb	r3, [r0, #8]
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    828e:	cmp	r1, #36	; 0x24
    8290:	it	eq
    8292:	strheq	r2, [r0, #6]
    8294:	lsls	r3, r3, #1
		transmitting = 1;
    8296:	movs	r5, #1
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    8298:	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    829a:	mov	r0, r4
    829c:	ubfx	r1, r1, #8, #8
    82a0:	mov	r7, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    82a2:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    82a6:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    82aa:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    82ae:	bl	87f8 <TwoWire::write(unsigned char)>
    82b2:	uxtb	r1, r6
    82b4:	mov	r0, r4
    82b6:	bl	87f8 <TwoWire::write(unsigned char)>
    82ba:	ubfx	r1, r7, #8, #8
    82be:	mov	r0, r4
    82c0:	bl	87f8 <TwoWire::write(unsigned char)>
    82c4:	uxtb	r1, r7
    82c6:	mov	r0, r4
    82c8:	bl	87f8 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    82cc:	mov	r1, r5
    82ce:	mov	r0, r4
    82d0:	bl	8ad0 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    82d4:	clz	r0, r0
    82d8:	lsrs	r0, r0, #5
    82da:	pop	{r3, r4, r5, r6, r7, pc}
    82dc:	.word	0x1fff0a84

000082e0 <AudioControlSGTL5000::micGain(unsigned int)>:

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    82e0:	cmp	r1, #39	; 0x27
	unsigned short m=((0x7F-calcVol(right,0x7F))<<8)|(0x7F-calcVol(left,0x7F));
	return write(CHIP_ANA_HP_CTRL, m);
}

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
    82e2:	push	{r3, r4, r5, lr}
    82e4:	mov	r4, r1
    82e6:	mov	r5, r0
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    82e8:	bls.n	82fe <AudioControlSGTL5000::micGain(unsigned int)+0x1e>
		preamp_gain = 3;
		dB -= 40;
    82ea:	sub.w	r4, r1, #40	; 0x28
    82ee:	movw	r2, #371	; 0x173
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    82f2:	movs	r1, #42	; 0x2a
    82f4:	mov	r0, r5
    82f6:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    82fa:	cbnz	r0, 8316 <AudioControlSGTL5000::micGain(unsigned int)+0x36>
}
    82fc:	pop	{r3, r4, r5, pc}
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
    82fe:	cmp	r1, #29
    8300:	bls.n	8336 <AudioControlSGTL5000::micGain(unsigned int)+0x56>
		preamp_gain = 2;
		dB -= 30;
    8302:	sub.w	r4, r1, #30
    8306:	mov.w	r2, #370	; 0x172
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    830a:	movs	r1, #42	; 0x2a
    830c:	mov	r0, r5
    830e:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    8312:	cmp	r0, #0
    8314:	beq.n	82fc <AudioControlSGTL5000::micGain(unsigned int)+0x1c>
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    8316:	ldr	r2, [pc, #48]	; (8348 <AudioControlSGTL5000::micGain(unsigned int)+0x68>)
    8318:	lsls	r4, r4, #1
    831a:	umull	r3, r2, r2, r4
    831e:	lsrs	r2, r2, #1
    8320:	cmp	r2, #15
    8322:	it	cs
    8324:	movcs	r2, #15
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    8326:	mov	r0, r5
    8328:	orr.w	r2, r2, r2, lsl #4
    832c:	movs	r1, #32
}
    832e:	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    8332:	b.w	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
		preamp_gain = 2;
		dB -= 30;
	} else if (dB >= 20) {
    8336:	cmp	r1, #19
		preamp_gain = 1;
		dB -= 20;
    8338:	itte	hi
    833a:	subhi.w	r4, r1, #20
    833e:	movwhi	r2, #369	; 0x171
    8342:	movls.w	r2, #368	; 0x170
    8346:	b.n	82f2 <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    8348:	.word	0xaaaaaaab

0000834c <AudioControlSGTL5000::enable(unsigned int, unsigned long)>:
	return enable(0);
#endif	
}

bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
{
    834c:	push	{r3, r4, r5, r6, r7, lr}
    834e:	mov	r4, r0

	Wire.begin();
    8350:	ldr	r0, [pc, #492]	; (8540 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1f4>)
	return enable(0);
#endif	
}

bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
{
    8352:	mov	r5, r1
    8354:	mov	r6, r2

	Wire.begin();
    8356:	bl	8820 <TwoWire::begin()>
	delay(5);
    835a:	movs	r0, #5
    835c:	bl	e724 <delay>
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
    8360:	mov	r0, r4
    8362:	movs	r1, #6
    8364:	bl	8204 <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    8368:	cmp	r5, #0
    836a:	beq.w	8498 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x14c>
    836e:	cmp	r0, #176	; 0xb0
    8370:	beq.w	8534 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1e8>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

        muted = true;
    8374:	movs	r7, #1
    8376:	strb	r7, [r4, #4]

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    8378:	movw	r2, #16480	; 0x4060
    837c:	movs	r1, #48	; 0x30
    837e:	mov	r0, r4
    8380:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    8384:	cbnz	r0, 838a <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x3e>
    8386:	movs	r0, #0
    8388:	pop	{r3, r4, r5, r6, r7, pc}
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    838a:	movs	r2, #108	; 0x6c
    838c:	movs	r1, #38	; 0x26
    838e:	mov	r0, r4
    8390:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    8394:	mov.w	r2, #498	; 0x1f2
    8398:	movs	r1, #40	; 0x28
    839a:	mov	r0, r4
    839c:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    83a0:	movw	r2, #3874	; 0xf22
    83a4:	movs	r1, #44	; 0x2c
    83a6:	mov	r0, r4
    83a8:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    83ac:	movw	r2, #17478	; 0x4446
    83b0:	movs	r1, #60	; 0x3c
    83b2:	mov	r0, r4
    83b4:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    83b8:	movw	r2, #311	; 0x137
    83bc:	movs	r1, #36	; 0x24
    83be:	mov	r0, r4
    83c0:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		
	if (extMCLK > 0) {
		//SGTL is I2S Master
		//Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
		if (extMCLK > 17000000) {
    83c4:	ldr	r3, [pc, #380]	; (8544 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1f8>)
    83c6:	cmp	r5, r3
    83c8:	bhi.w	8528 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1dc>
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
    83cc:	movs	r2, #0
    83ce:	movs	r1, #52	; 0x34
    83d0:	mov	r0, r4
    83d2:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    83d6:	udiv	r2, r6, r5
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    83da:	vmov	s15, r6
    83de:	vcvt.f32.u32	s13, s15
    83e2:	vmov	s15, r5
    83e6:	vcvt.f32.u32	s15, s15
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    83ea:	and.w	r2, r2, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    83ee:	vdiv.f32	s14, s13, s15
    83f2:	movs	r1, #50	; 0x32
    83f4:	mov	r0, r4
    83f6:	vmov	s15, r2
    83fa:	vcvt.f32.s32	s15, s15
    83fe:	vldr	s13, [pc, #328]	; 8548 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1fc>
    8402:	vsub.f32	s15, s14, s15
    8406:	vmul.f32	s15, s15, s13
    840a:	vcvt.u32.f32	s15, s15
    840e:	vmov	r3, s15
    8412:	ubfx	r3, r3, #0, #11
    8416:	orr.w	r2, r3, r2, lsl #11
    841a:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    841e:	movw	r2, #17919	; 0x45ff
    8422:	movs	r1, #48	; 0x30
    8424:	mov	r0, r4
    8426:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	} else {
		//SGTL is I2S Slave
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
	}

	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    842a:	movs	r2, #115	; 0x73
    842c:	movs	r1, #2
    842e:	mov	r0, r4
    8430:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    8434:	mov.w	r0, #400	; 0x190
    8438:	bl	e724 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    843c:	movw	r2, #7453	; 0x1d1d
    8440:	movs	r1, #46	; 0x2e
    8442:	mov	r0, r4
    8444:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	
	if (extMCLK > 0) { 
		//SGTL is I2S Master
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    8448:	movs	r2, #7
    844a:	movs	r1, #4
    844c:	mov	r0, r4
    844e:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    8452:	movs	r2, #176	; 0xb0
    8454:	movs	r1, #6
    8456:	mov	r0, r4
    8458:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
	}

	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    845c:	movs	r2, #16
    845e:	movs	r1, #10
    8460:	mov	r0, r4
    8462:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    8466:	movs	r2, #0
    8468:	movs	r1, #14
    846a:	mov	r0, r4
    846c:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    8470:	movw	r2, #15420	; 0x3c3c
    8474:	movs	r1, #16
    8476:	mov	r0, r4
    8478:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    847c:	movw	r2, #32639	; 0x7f7f
    8480:	movs	r1, #34	; 0x22
    8482:	mov	r0, r4
    8484:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    8488:	movs	r2, #54	; 0x36
    848a:	movs	r1, #36	; 0x24
    848c:	mov	r0, r4
    848e:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

	semi_automated = true;
    8492:	movs	r0, #1
    8494:	strb	r0, [r4, #9]
    8496:	pop	{r3, r4, r5, r6, r7, pc}
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

        muted = true;
    8498:	movs	r3, #1
    849a:	strb	r3, [r4, #4]

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    849c:	movw	r2, #16480	; 0x4060
    84a0:	movs	r1, #48	; 0x30
    84a2:	mov	r0, r4
    84a4:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    84a8:	cmp	r0, #0
    84aa:	beq.w	8386 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x3a>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    84ae:	movs	r2, #108	; 0x6c
    84b0:	movs	r1, #38	; 0x26
    84b2:	mov	r0, r4
    84b4:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    84b8:	mov.w	r2, #498	; 0x1f2
    84bc:	movs	r1, #40	; 0x28
    84be:	mov	r0, r4
    84c0:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    84c4:	movw	r2, #3874	; 0xf22
    84c8:	movs	r1, #44	; 0x2c
    84ca:	mov	r0, r4
    84cc:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    84d0:	movw	r2, #17478	; 0x4446
    84d4:	movs	r1, #60	; 0x3c
    84d6:	mov	r0, r4
    84d8:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    84dc:	movw	r2, #311	; 0x137
    84e0:	movs	r1, #36	; 0x24
    84e2:	mov	r0, r4
    84e4:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
	} else {
		//SGTL is I2S Slave
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    84e8:	movw	r2, #16639	; 0x40ff
    84ec:	movs	r1, #48	; 0x30
    84ee:	mov	r0, r4
    84f0:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	}

	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    84f4:	movs	r2, #115	; 0x73
    84f6:	movs	r1, #2
    84f8:	mov	r0, r4
    84fa:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    84fe:	mov.w	r0, #400	; 0x190
    8502:	bl	e724 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    8506:	movw	r2, #7453	; 0x1d1d
    850a:	movs	r1, #46	; 0x2e
    850c:	mov	r0, r4
    850e:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		//SGTL is I2S Master
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
	} else {
		//SGTL is I2S Slave
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    8512:	movs	r2, #4
    8514:	mov	r1, r2
    8516:	mov	r0, r4
    8518:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    851c:	movs	r2, #48	; 0x30
    851e:	movs	r1, #6
    8520:	mov	r0, r4
    8522:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    8526:	b.n	845c <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x110>
		
	if (extMCLK > 0) {
		//SGTL is I2S Master
		//Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
		if (extMCLK > 17000000) {
			write(CHIP_CLK_TOP_CTRL, 1);
    8528:	mov	r2, r7
    852a:	movs	r1, #52	; 0x34
    852c:	mov	r0, r4
    852e:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    8532:	b.n	83d6 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x8a>
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
		//Yes. Do not initialize.
		muted = false;
    8534:	movs	r3, #0
		semi_automated = true;
    8536:	movs	r0, #1
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
		//Yes. Do not initialize.
		muted = false;
    8538:	strb	r3, [r4, #4]
		semi_automated = true;
    853a:	strb	r0, [r4, #9]
		return true;
    853c:	pop	{r3, r4, r5, r6, r7, pc}
    853e:	nop
    8540:	.word	0x1fff0a84
    8544:	.word	0x01036640
    8548:	.word	0x45000000

0000854c <AudioControlSGTL5000::enable()>:

bool AudioControlSGTL5000::enable(void) {
#if defined(KINETISL)
	return enable(16000000); // SGTL as Master with 16MHz MCLK from Teensy LC
#else	
	return enable(0);
    854c:	ldr	r2, [pc, #4]	; (8554 <AudioControlSGTL5000::enable()+0x8>)
    854e:	movs	r1, #0
    8550:	b.w	834c <AudioControlSGTL5000::enable(unsigned int, unsigned long)>
    8554:	.word	0x0ac55a60

00008558 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    8558:	push	{r4, lr}
    855a:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    855c:	cbz	r1, 8566 <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    855e:	cmp	r1, #1
    8560:	beq.n	8586 <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    8562:	movs	r0, #0
    8564:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    8566:	movs	r2, #85	; 0x55
    8568:	movs	r1, #32
    856a:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    856e:	cmp	r0, #0
    8570:	beq.n	8562 <AudioControlSGTL5000::inputSelect(int)+0xa>
    8572:	ldrh	r2, [r4, #6]
    8574:	orr.w	r2, r2, #4
    8578:	mov	r0, r4
    857a:	uxth	r2, r2
    857c:	movs	r1, #36	; 0x24
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    857e:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    8582:	b.w	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    8586:	movw	r2, #371	; 0x173
    858a:	movs	r1, #42	; 0x2a
    858c:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    8590:	cmp	r0, #0
    8592:	beq.n	8562 <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    8594:	movs	r2, #136	; 0x88
    8596:	movs	r1, #32
    8598:	mov	r0, r4
    859a:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    859e:	cmp	r0, #0
    85a0:	beq.n	8562 <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    85a2:	ldrh	r2, [r4, #6]
    85a4:	mov	r0, r4
    85a6:	bic.w	r2, r2, #4
    85aa:	movs	r1, #36	; 0x24
		} else {
			return false;
		}
	}
    85ac:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    85b0:	b.w	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

000085b4 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    85b4:	push	{r3, r4, r5, lr}
    85b6:	mov	r5, r0
	if (n == 0) {
    85b8:	cbz	r1, 85f8 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x44>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    85ba:	cmp	r1, #128	; 0x80
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    85bc:	ldrb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    85be:	itte	ls
    85c0:	rsbls	r4, r1, #128	; 0x80
    85c4:	orrls.w	r4, r4, r4, lsl #8
    85c8:	movhi	r4, #0
	}
	if (muted) {
    85ca:	cbnz	r3, 85da <AudioControlSGTL5000::volumeInteger(unsigned int)+0x26>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    85cc:	mov	r2, r4
    85ce:	mov	r0, r5
    85d0:	movs	r1, #34	; 0x22
}
    85d2:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    85d6:	b.w	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    85da:	ldrh	r2, [r0, #6]
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
		muted = false;
    85dc:	movs	r3, #0
    85de:	bic.w	r2, r2, #16
    85e2:	strb	r3, [r0, #4]
    85e4:	movs	r1, #36	; 0x24
    85e6:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    85ea:	mov	r2, r4
    85ec:	mov	r0, r5
    85ee:	movs	r1, #34	; 0x22
}
    85f0:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    85f4:	b.w	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    85f8:	movs	r3, #1
    85fa:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    85fc:	movw	r2, #32639	; 0x7f7f
    8600:	movs	r1, #34	; 0x22
    8602:	bl	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    8606:	ldrh	r2, [r5, #6]
    8608:	orr.w	r2, r2, #16
    860c:	mov	r0, r5
    860e:	uxth	r2, r2
    8610:	movs	r1, #36	; 0x24
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    8612:	ldmia.w	sp!, {r3, r4, r5, lr}
    8616:	b.w	8288 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    861a:	nop

0000861c <AudioControlSGTL5000::volume(float)>:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    861c:	vldr	s14, [pc, #20]	; 8634 <AudioControlSGTL5000::volume(float)+0x18>
    8620:	vldr	s15, [pc, #20]	; 8638 <AudioControlSGTL5000::volume(float)+0x1c>
    8624:	vfma.f32	s15, s0, s14
    8628:	vcvt.u32.f32	s15, s15
    862c:	vmov	r1, s15
    8630:	b.w	85b4 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    8634:	.word	0x43010000
    8638:	.word	0x3eff7cee

0000863c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    863c:	ldr	r2, [pc, #8]	; (8648 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    863e:	ldr	r1, [pc, #12]	; (864c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    8640:	ldr	r0, [pc, #12]	; (8650 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    8642:	b.w	f928 <__aeabi_atexit>
    8646:	nop
    8648:	.word	0x1fff0970
    864c:	.word	0x00000789
    8650:	.word	0x20006a8c

00008654 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    8654:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    8656:	ldr	r5, [pc, #28]	; (8674 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    8658:	ldr	r4, [pc, #28]	; (8678 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    865a:	ldr	r0, [pc, #32]	; (867c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    865c:	mov	r2, r5
    865e:	mov	r1, r4
    8660:	bl	f928 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    8664:	mov	r2, r5
    8666:	mov	r1, r4
    8668:	ldr	r0, [pc, #20]	; (8680 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    866a:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    866e:	b.w	f928 <__aeabi_atexit>
    8672:	nop
    8674:	.word	0x1fff0970
    8678:	.word	0x00000789
    867c:	.word	0x20006a94
    8680:	.word	0x20006a9c

00008684 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    8684:	ldr	r2, [pc, #8]	; (8690 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    8686:	ldr	r1, [pc, #12]	; (8694 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    8688:	ldr	r0, [pc, #12]	; (8698 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    868a:	b.w	f928 <__aeabi_atexit>
    868e:	nop
    8690:	.word	0x1fff0970
    8694:	.word	0x00000789
    8698:	.word	0x20006aa4

0000869c <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    869c:	ldr	r2, [pc, #8]	; (86a8 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    869e:	ldr	r1, [pc, #12]	; (86ac <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    86a0:	ldr	r0, [pc, #12]	; (86b0 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    86a2:	b.w	f928 <__aeabi_atexit>
    86a6:	nop
    86a8:	.word	0x1fff0970
    86ac:	.word	0x00000789
    86b0:	.word	0x20006aac

000086b4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    86b4:	ldr	r2, [pc, #8]	; (86c0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    86b6:	ldr	r1, [pc, #12]	; (86c4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    86b8:	ldr	r0, [pc, #12]	; (86c8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    86ba:	b.w	f928 <__aeabi_atexit>
    86be:	nop
    86c0:	.word	0x1fff0970
    86c4:	.word	0x00000789
    86c8:	.word	0x20006ab4

000086cc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    86cc:	ldr	r2, [pc, #8]	; (86d8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    86ce:	ldr	r1, [pc, #12]	; (86dc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    86d0:	ldr	r0, [pc, #12]	; (86e0 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    86d2:	b.w	f928 <__aeabi_atexit>
    86d6:	nop
    86d8:	.word	0x1fff0970
    86dc:	.word	0x00000789
    86e0:	.word	0x20006abc

000086e4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    86e4:	ldr	r2, [pc, #8]	; (86f0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    86e6:	ldr	r1, [pc, #12]	; (86f4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    86e8:	ldr	r0, [pc, #12]	; (86f8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    86ea:	b.w	f928 <__aeabi_atexit>
    86ee:	nop
    86f0:	.word	0x1fff0970
    86f4:	.word	0x00000789
    86f8:	.word	0x20006ac4

000086fc <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    86fc:	ldr	r2, [pc, #8]	; (8708 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    86fe:	ldr	r1, [pc, #12]	; (870c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    8700:	ldr	r0, [pc, #12]	; (8710 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    8702:	b.w	f928 <__aeabi_atexit>
    8706:	nop
    8708:	.word	0x1fff0970
    870c:	.word	0x00000789
    8710:	.word	0x20006acc

00008714 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    8714:	ldr	r2, [pc, #8]	; (8720 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    8716:	ldr	r1, [pc, #12]	; (8724 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    8718:	ldr	r0, [pc, #12]	; (8728 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    871a:	b.w	f928 <__aeabi_atexit>
    871e:	nop
    8720:	.word	0x1fff0970
    8724:	.word	0x00000789
    8728:	.word	0x20006ad4

0000872c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    872c:	ldr	r2, [pc, #8]	; (8738 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    872e:	ldr	r1, [pc, #12]	; (873c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    8730:	ldr	r0, [pc, #12]	; (8740 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    8732:	b.w	f928 <__aeabi_atexit>
    8736:	nop
    8738:	.word	0x1fff0970
    873c:	.word	0x00000789
    8740:	.word	0x20006adc

00008744 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    8744:	ldr	r2, [pc, #8]	; (8750 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    8746:	ldr	r1, [pc, #12]	; (8754 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    8748:	ldr	r0, [pc, #12]	; (8758 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    874a:	b.w	f928 <__aeabi_atexit>
    874e:	nop
    8750:	.word	0x1fff0970
    8754:	.word	0x00000789
    8758:	.word	0x20006ae4

0000875c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    875c:	ldr	r2, [pc, #8]	; (8768 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    875e:	ldr	r1, [pc, #12]	; (876c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    8760:	ldr	r0, [pc, #12]	; (8770 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    8762:	b.w	f928 <__aeabi_atexit>
    8766:	nop
    8768:	.word	0x1fff0970
    876c:	.word	0x00000789
    8770:	.word	0x20006aec

00008774 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    8774:	ldrb.w	r2, [r0, #57]	; 0x39
    8778:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    877c:	subs	r0, r2, r0
    877e:	bx	lr

00008780 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8780:	ldrb.w	r3, [r0, #56]	; 0x38
    8784:	ldrb.w	r2, [r0, #57]	; 0x39
    8788:	cmp	r2, r3
    878a:	bls.n	8798 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    878c:	adds	r2, r3, #1
    878e:	add	r3, r0
    8790:	strb.w	r2, [r0, #56]	; 0x38
    8794:	ldrb	r0, [r3, #24]
    8796:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8798:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    879c:	bx	lr
    879e:	nop

000087a0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    87a0:	ldrb.w	r3, [r0, #56]	; 0x38
    87a4:	ldrb.w	r2, [r0, #57]	; 0x39
    87a8:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    87aa:	itte	hi
    87ac:	addhi	r3, r3, r0
    87ae:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    87b0:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    87b4:	bx	lr
    87b6:	nop

000087b8 <TwoWire::flush()>:
	virtual void flush(void) {
    87b8:	bx	lr
    87ba:	nop

000087bc <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    87bc:	push	{r3, r4, r5, lr}
    87be:	mov	r5, r0
	if (transmitting || slave_mode) {
    87c0:	ldrh.w	r0, [r0, #94]	; 0x5e
    87c4:	cbz	r0, 87ec <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    87c6:	ldrb.w	r3, [r5, #93]	; 0x5d
    87ca:	mov	r4, r2
    87cc:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    87d0:	cmp	r4, r2
    87d2:	bhi.n	87ee <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    87d4:	add.w	r0, r5, #59	; 0x3b
    87d8:	add	r0, r3
    87da:	mov	r2, r4
    87dc:	bl	db58 <memcpy>
		txBufferLength += quantity;
    87e0:	ldrb.w	r3, [r5, #93]	; 0x5d
    87e4:	add	r3, r4
    87e6:	strb.w	r3, [r5, #93]	; 0x5d
    87ea:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    87ec:	pop	{r3, r4, r5, pc}
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    87ee:	movs	r0, #1
    87f0:	mov	r4, r2
    87f2:	strb	r0, [r5, #4]
    87f4:	b.n	87d4 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    87f6:	nop

000087f8 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    87f8:	ldrh.w	r3, [r0, #94]	; 0x5e
    87fc:	cbz	r3, 881a <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    87fe:	ldrb.w	r3, [r0, #93]	; 0x5d
    8802:	cmp	r3, #32
    8804:	bhi.n	8816 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    8806:	adds	r2, r0, r3
    8808:	adds	r3, #1
    880a:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    880e:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    8810:	strb.w	r1, [r2, #59]	; 0x3b
    8814:	bx	lr
    8816:	movs	r3, #1
    8818:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    881a:	movs	r0, #0
    881c:	bx	lr
    881e:	nop

00008820 <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    8820:	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8822:	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    8824:	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    8828:	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    882c:	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    8830:	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    8834:	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    8838:	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    883c:	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    883e:	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8840:	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8842:	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    8844:	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8846:	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    8848:	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    884a:	str	r2, [r1, #0]
	port().C1 = 0;
    884c:	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    884e:	ldr	r2, [r0, #20]
    8850:	ldrb.w	r3, [r0, #97]	; 0x61
    8854:	ldr	r1, [pc, #88]	; (88b0 <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    8856:	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8858:	add	r3, r2
    885a:	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    885c:	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    885e:	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8862:	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8864:	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8866:	and.w	r3, r3, #1792	; 0x700
    886a:	orr.w	r3, r3, #100	; 0x64
    886e:	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8870:	ldrb.w	r3, [r0, #98]	; 0x62
    8874:	add	r3, r2
    8876:	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8878:	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    887a:	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    887e:	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8880:	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8882:	and.w	r3, r3, #1792	; 0x700
    8886:	orr.w	r3, r3, #100	; 0x64
    888a:	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    888c:	ldr	r1, [r4, #0]
    888e:	ldr	r3, [r2, #4]
    8890:	tst	r1, r3
    8892:	beq.n	88a0 <TwoWire::begin()+0x80>
    8894:	ldr	r3, [r0, #16]
		port().F = 0x12; // 938 kHz
	}
	port().FLT = 4;
#elif F_BUS == 56000000
	if (frequency < 400000) {
		port().F = 0x2B;	// 109 kHz
    8896:	movs	r2, #43	; 0x2b
    8898:	strb	r2, [r3, #1]
    889a:	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1C; // 389 kHz
	} else {
		port().F = 0x0E; // 1 MHz
	}
	port().FLT = 4;
    889c:	movs	r2, #4
    889e:	strb	r2, [r3, #6]
    88a0:	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    88a2:	movs	r2, #32
    88a4:	strb	r2, [r3, #5]
    88a6:	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    88a8:	movs	r2, #128	; 0x80
    88aa:	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    88ac:	pop	{r4, r5}
    88ae:	bx	lr
    88b0:	.word	0x00015048

000088b4 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    88b4:	push	{r3, r4, r5, lr}
    88b6:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    88b8:	ldrb	r4, [r2, #3]
    88ba:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    88bc:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    88be:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    88c0:	bpl.n	890c <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    88c2:	movs	r3, #16
    88c4:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    88c6:	lsls	r3, r4, #25
    88c8:	bpl.n	890a <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    88ca:	and.w	r4, r4, #4
    88ce:	and.w	r3, r4, #255	; 0xff
    88d2:	cmp	r4, #0
    88d4:	beq.n	898c <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    88d6:	ldr	r1, [pc, #264]	; (89e0 <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    88d8:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    88da:	movs	r3, #0
    88dc:	strb	r3, [r1, #0]
			txBufferLength = 0;
    88de:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    88e2:	cmp	r2, #0
    88e4:	beq.n	89b4 <TwoWire::isr()+0x100>
				user_onRequest();
    88e6:	blx	r2
			}
			if (txBufferLength == 0) {
    88e8:	ldrb.w	r3, [r5, #93]	; 0x5d
    88ec:	cmp	r3, #0
    88ee:	beq.n	89b4 <TwoWire::isr()+0x100>
    88f0:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    88f2:	movs	r2, #208	; 0xd0
    88f4:	strb	r2, [r3, #2]
    88f6:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    88f8:	ldrb.w	r2, [r5, #59]	; 0x3b
    88fc:	strb	r2, [r3, #4]
    88fe:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    8900:	movs	r2, #1
    8902:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    8906:	movs	r2, #2
    8908:	strb	r2, [r3, #3]
    890a:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    890c:	and.w	r3, r4, #64	; 0x40
    8910:	and.w	r0, r3, #255	; 0xff
    8914:	cmp	r3, #0
    8916:	bne.n	88ca <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    8918:	ldrb	r3, [r2, #6]
    891a:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    891c:	and.w	r1, r3, #96	; 0x60
    8920:	cmp	r1, #96	; 0x60
    8922:	beq.n	89c2 <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    8924:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    8926:	and.w	r3, r3, #16
    892a:	and.w	r1, r3, #255	; 0xff
    892e:	cbz	r3, 895e <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    8930:	ands.w	r4, r4, #1
    8934:	bne.n	89a6 <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    8936:	ldrb.w	r3, [r5, #92]	; 0x5c
    893a:	ldrb.w	r1, [r5, #93]	; 0x5d
    893e:	cmp	r1, r3
    8940:	bls.n	89da <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    8942:	adds	r1, r3, #1
    8944:	add	r3, r5
    8946:	strb.w	r1, [r5, #92]	; 0x5c
    894a:	ldrb.w	r3, [r3, #59]	; 0x3b
    894e:	strb	r3, [r2, #4]
    8950:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    8952:	movs	r2, #208	; 0xd0
    8954:	strb	r2, [r3, #2]
    8956:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    8958:	movs	r2, #2
    895a:	strb	r2, [r3, #3]
    895c:	b.n	890a <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    895e:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    8962:	ldrb	r3, [r2, #6]
    8964:	orr.w	r3, r3, #32
    8968:	strb	r3, [r2, #6]
    896a:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    896c:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    8970:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    8972:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    8974:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    8976:	bhi.n	8906 <TwoWire::isr()+0x52>
    8978:	ldr	r0, [pc, #100]	; (89e0 <TwoWire::isr()+0x12c>)
    897a:	ldrb	r0, [r0, #0]
    897c:	cmp	r0, #0
    897e:	beq.n	8906 <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    8980:	adds	r0, r5, r1
    8982:	adds	r1, #1
    8984:	strb.w	r1, [r5, #57]	; 0x39
    8988:	strb	r2, [r0, #24]
    898a:	b.n	8906 <TwoWire::isr()+0x52>
    898c:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    898e:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    8992:	movs	r3, #192	; 0xc0
    8994:	strb	r3, [r2, #2]
    8996:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    8998:	ldr	r2, [pc, #68]	; (89e0 <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    899a:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    899c:	movs	r1, #1
    899e:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    89a0:	movs	r2, #2
    89a2:	strb	r2, [r3, #3]
    89a4:	b.n	890a <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    89a6:	movs	r3, #192	; 0xc0
    89a8:	strb	r3, [r2, #2]
    89aa:	ldr	r3, [r5, #16]
			data = port().D;
    89ac:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    89ae:	movs	r2, #2
    89b0:	strb	r2, [r3, #3]
    89b2:	b.n	890a <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    89b4:	movs	r2, #1
				txBuffer[0] = 0;
    89b6:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    89b8:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    89bc:	strb.w	r3, [r5, #59]	; 0x3b
    89c0:	b.n	88f0 <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    89c2:	and.w	r3, r3, #223	; 0xdf
    89c6:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    89c8:	ldr	r3, [r5, #104]	; 0x68
    89ca:	cbz	r3, 89d6 <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    89cc:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    89d0:	ldrb.w	r0, [r5, #57]	; 0x39
    89d4:	blx	r3
    89d6:	ldr	r2, [r5, #16]
    89d8:	b.n	8924 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    89da:	strb	r4, [r2, #4]
    89dc:	b.n	8950 <TwoWire::isr()+0x9c>
    89de:	nop
    89e0:	.word	0x20006af4

000089e4 <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    89e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89e8:	ldr	r7, [pc, #220]	; (8ac8 <L_1438_delayMicroseconds+0x18>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    89ea:	ldr.w	r9, [pc, #224]	; 8acc <L_1438_delayMicroseconds+0x1c>
    89ee:	ldr	r3, [r7, #0]
    89f0:	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    89f2:	sub	sp, #8
    89f4:	mov	r6, r0
    89f6:	str	r3, [sp, #0]
	return ret;
    89f8:	ldr.w	r8, [sp]
	bool reset=false;
    89fc:	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    89fe:	mov.w	r5, #280	; 0x118
	uint8_t i2c_status(void) {
		return port().S;
    8a02:	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    8a04:	lsls	r3, r3, #26
    8a06:	bpl.n	8ac0 <L_1438_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8a08:	ldr	r3, [r7, #0]
    8a0a:	str	r3, [sp, #4]
	return ret;
    8a0c:	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    8a0e:	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    8a12:	cmp	r3, #15
    8a14:	bls.n	8a02 <TwoWire::wait_idle()+0x1e>
    8a16:	cbz	r1, 8a2c <TwoWire::wait_idle()+0x48>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    8a18:	cmp	r3, #16
    8a1a:	beq.n	8a02 <TwoWire::wait_idle()+0x1e>
			// bus stuck busy too long
			port().C1 = 0;
    8a1c:	movs	r0, #0
    8a1e:	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8a20:	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    8a22:	movs	r2, #128	; 0x80
    8a24:	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    8a26:	add	sp, #8
    8a28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    8a2c:	ldr	r2, [r6, #20]
    8a2e:	ldrb.w	r3, [r6, #97]	; 0x61
    8a32:	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    8a34:	movs	r1, #5
    8a36:	ldrb	r0, [r3, #8]
    8a38:	bl	e6d0 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    8a3c:	ldr	r2, [r6, #20]
    8a3e:	ldrb.w	r3, [r6, #97]	; 0x61
    8a42:	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    8a44:	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    8a46:	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    8a4a:	mov	r0, sl
    8a4c:	bl	e6d0 <pinMode>
    8a50:	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    8a52:	movs	r1, #0
    8a54:	mov	r0, sl
    8a56:	bl	e6c4 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    8a5a:	mov	r3, r5

00008a5c <L_1373_delayMicroseconds>:
    8a5c:	subs	r3, #1
    8a5e:	bne.n	8a5c <L_1373_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    8a60:	movs	r1, #1
    8a62:	mov	r0, sl
    8a64:	bl	e6c4 <digitalWrite>
    8a68:	mov	r3, r5

00008a6a <L_1387_delayMicroseconds>:
    8a6a:	subs	r3, #1
    8a6c:	bne.n	8a6a <L_1387_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    8a6e:	subs	r4, #1
    8a70:	bne.n	8a52 <TwoWire::wait_idle()+0x6e>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8a72:	ldr	r0, [r6, #20]
    8a74:	ldrb.w	r1, [r6, #97]	; 0x61
    8a78:	add	r1, r0
    8a7a:	mov.w	r2, #560	; 0x230
    8a7e:	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8a80:	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8a82:	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8a86:	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8a88:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8a8a:	and.w	r3, r3, #1792	; 0x700
    8a8e:	orr.w	r3, r3, #100	; 0x64
    8a92:	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8a94:	ldrb.w	r3, [r6, #98]	; 0x62
    8a98:	add	r3, r0
    8a9a:	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8a9c:	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8a9e:	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8aa2:	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8aa4:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8aa6:	and.w	r3, r3, #1792	; 0x700
    8aaa:	orr.w	r3, r3, #100	; 0x64
    8aae:	str	r3, [r1, #0]

00008ab0 <L_1438_delayMicroseconds>:
    8ab0:	subs	r2, #1
    8ab2:	bne.n	8ab0 <L_1438_delayMicroseconds>
    8ab4:	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    8ab6:	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    8ab8:	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    8aba:	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    8abe:	bmi.n	8a08 <TwoWire::wait_idle()+0x24>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    8ac0:	movs	r0, #1
}
    8ac2:	add	sp, #8
    8ac4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8ac8:	.word	0x2000701c
    8acc:	.word	0x00015048

00008ad0 <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    8ad0:	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8ad2:	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8ad4:	movs	r2, #18
    8ad6:	strb	r2, [r3, #3]
    8ad8:	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8ada:	ldrb	r3, [r2, #2]
    8adc:	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    8ae0:	sub	sp, #20
    8ae2:	mov	r4, r0
    8ae4:	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8ae6:	cmp	r3, #0
    8ae8:	beq.n	8ba8 <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    8aea:	movs	r3, #180	; 0xb4
    8aec:	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8aee:	ldr	r1, [pc, #240]	; (8be0 <TwoWire::endTransmission(unsigned char)+0x110>)
    8af0:	ldr	r2, [r4, #16]
    8af2:	ldr	r3, [r1, #0]
    8af4:	str	r3, [sp, #0]
	return ret;
    8af6:	ldr	r6, [sp, #0]
    8af8:	b.n	8b06 <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8afa:	ldr	r3, [r1, #0]
    8afc:	str	r3, [sp, #4]
	return ret;
    8afe:	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    8b00:	subs	r3, r3, r6
    8b02:	cmp	r3, #4
    8b04:	bhi.n	8b8c <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    8b06:	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    8b08:	and.w	r3, r3, #32
    8b0c:	and.w	r0, r3, #255	; 0xff
    8b10:	cmp	r3, #0
    8b12:	beq.n	8afa <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    8b14:	ldrb.w	r3, [r4, #93]	; 0x5d
    8b18:	cmp	r3, #0
    8b1a:	beq.n	8b80 <TwoWire::endTransmission(unsigned char)+0xb0>
    8b1c:	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    8b20:	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    8b24:	add.w	r3, r4, lr
    8b28:	ldrb.w	r3, [r3, #59]	; 0x3b
    8b2c:	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b2e:	ldr	r3, [r1, #0]
    8b30:	str	r3, [sp, #12]
	return ret;
    8b32:	ldr	r7, [sp, #12]
    8b34:	ldr	r0, [r4, #16]
    8b36:	b.n	8b48 <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    8b38:	lsls	r3, r3, #26
    8b3a:	bpl.n	8b58 <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b3c:	ldr	r3, [r1, #0]
    8b3e:	str	r3, [sp, #8]
	return ret;
    8b40:	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    8b42:	subs	r3, r3, r7
    8b44:	cmp	r3, #5
    8b46:	bhi.n	8b9a <TwoWire::endTransmission(unsigned char)+0xca>
    8b48:	ldrb	r3, [r0, #3]
    8b4a:	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    8b4c:	and.w	r2, r3, #2
    8b50:	and.w	r6, r2, #255	; 0xff
    8b54:	cmp	r2, #0
    8b56:	beq.n	8b38 <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    8b58:	strb.w	ip, [r0, #3]
    8b5c:	ldr	r6, [r4, #16]
    8b5e:	ldrb	r3, [r6, #3]
    8b60:	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    8b62:	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8b64:	mov	r2, r6
    8b66:	bmi.n	8bc4 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    8b68:	lsls	r7, r3, #26
    8b6a:	bpl.n	8bc4 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    8b6c:	lsls	r3, r3, #31
    8b6e:	bmi.n	8bd4 <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    8b70:	add.w	lr, lr, #1
    8b74:	ldrb.w	r3, [r4, #93]	; 0x5d
    8b78:	uxtb.w	lr, lr
    8b7c:	cmp	r3, lr
    8b7e:	bhi.n	8b24 <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    8b80:	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    8b82:	cbnz	r5, 8bcc <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    8b84:	movs	r3, #0
    8b86:	strb.w	r3, [r4, #94]	; 0x5e
    8b8a:	b.n	8b96 <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    8b8c:	strb	r0, [r2, #2]
    8b8e:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8b90:	movs	r2, #128	; 0x80
    8b92:	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    8b94:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8b96:	add	sp, #20
    8b98:	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    8b9a:	strb	r6, [r0, #2]
    8b9c:	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    8b9e:	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    8ba0:	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    8ba2:	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8ba4:	add	sp, #20
    8ba6:	pop	{r4, r5, r6, r7, pc}
    8ba8:	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    8bac:	bl	89e4 <TwoWire::wait_idle()>
    8bb0:	cbnz	r0, 8bb8 <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    8bb2:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8bb4:	add	sp, #20
    8bb6:	pop	{r4, r5, r6, r7, pc}
    8bb8:	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    8bba:	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8bbe:	movs	r2, #176	; 0xb0
    8bc0:	strb	r2, [r3, #2]
    8bc2:	b.n	8aee <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    8bc4:	movs	r3, #128	; 0x80
    8bc6:	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    8bc8:	movs	r0, #4
    8bca:	b.n	8b82 <TwoWire::endTransmission(unsigned char)+0xb2>
    8bcc:	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    8bce:	movs	r3, #128	; 0x80
    8bd0:	strb	r3, [r6, #2]
    8bd2:	b.n	8b84 <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    8bd4:	cmp.w	lr, #0
    8bd8:	ite	eq
    8bda:	moveq	r0, #2
    8bdc:	movne	r0, #3
    8bde:	b.n	8bce <TwoWire::endTransmission(unsigned char)+0xfe>
    8be0:	.word	0x2000701c

00008be4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    8be4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8be8:	ldr	r6, [r0, #16]
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    8bea:	movs	r5, #0
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8bec:	movs	r7, #18
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    8bee:	strb.w	r5, [r0, #56]	; 0x38
	rxBufferLength = 0;
    8bf2:	strb.w	r5, [r0, #57]	; 0x39
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8bf6:	strb	r7, [r6, #3]
    8bf8:	ldr.w	ip, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8bfc:	ldrb.w	lr, [ip, #2]
    8c00:	and.w	lr, lr, #32
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    8c04:	sub	sp, #32
    8c06:	mov	r4, r0
    8c08:	mov	r8, r1
    8c0a:	mov	r5, r2
    8c0c:	mov	r6, r3
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8c0e:	cmp.w	lr, #0
    8c12:	beq.n	8ca8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc4>
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    8c14:	movs	r3, #180	; 0xb4
    8c16:	strb.w	r3, [ip, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c1a:	ldr	r3, [pc, #488]	; (8e04 <L_2952_delayMicroseconds+0x1e>)
    8c1c:	ldr	r1, [r4, #16]
    8c1e:	ldr	r2, [r3, #0]
    8c20:	str	r2, [sp, #0]
	return ret;
    8c22:	ldr.w	lr, [sp]
    8c26:	b.n	8c36 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c28:	ldr	r2, [r3, #0]
    8c2a:	str	r2, [sp, #4]
	return ret;
    8c2c:	ldr	r0, [sp, #4]
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
    8c2e:	rsb	r0, lr, r0
    8c32:	cmp	r0, #4
    8c34:	bhi.n	8c98 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
	uint8_t i2c_status(void) {
		return port().S;
    8c36:	ldrb	r0, [r1, #3]
    8c38:	and.w	r0, r0, #32

	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    8c3c:	and.w	r7, r0, #255	; 0xff
    8c40:	cmp	r0, #0
    8c42:	beq.n	8c28 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
			//Serial.printf("requestFrom err2\n");
			return 0; // error generating start condition
		}
	}
	// send the address
	port().D = (address << 1) | 1;
    8c44:	mov.w	r2, r8, lsl #1
    8c48:	orr.w	r2, r2, #1
    8c4c:	uxtb	r2, r2
    8c4e:	strb	r2, [r1, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c50:	ldr	r2, [r3, #0]
    8c52:	str	r2, [sp, #8]
	return ret;
    8c54:	ldr.w	lr, [sp, #8]
    8c58:	ldr	r0, [r4, #16]
    8c5a:	b.n	8c6a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c5c:	ldr	r2, [r3, #0]
    8c5e:	str	r2, [sp, #12]
	return ret;
    8c60:	ldr	r1, [sp, #12]
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    8c62:	rsb	r1, lr, r1
    8c66:	cmp	r1, #5
    8c68:	bhi.n	8cc0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xdc>
		}
	}
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    8c6a:	ldrb	r1, [r0, #3]
    8c6c:	and.w	r1, r1, #2
    8c70:	and.w	r7, r1, #255	; 0xff
    8c74:	cmp	r1, #0
    8c76:	beq.n	8c5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("requestFrom err3\n");
			return 0; // clock stretch too long (during address)
		}
	}
	port().S = I2C_S_IICIF;
    8c78:	mov.w	ip, #2
    8c7c:	strb.w	ip, [r0, #3]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8c80:	ldr	r2, [r4, #16]
	uint8_t i2c_status(void) {
		return port().S;
    8c82:	ldrb	r1, [r2, #3]
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
    8c84:	ands.w	r7, r1, #17
    8c88:	bne.n	8cd0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
		//Serial.printf("requestFrom err4\n");
		return 0;
	}
	if (length == 0) {
    8c8a:	cbnz	r5, 8cd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf4>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
    8c8c:	cmp	r6, #0
    8c8e:	ite	eq
    8c90:	moveq	r3, #160	; 0xa0
    8c92:	movne	r3, #128	; 0x80
    8c94:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err5\n");
		return 0;
    8c96:	b.n	8ca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    8c98:	strb	r7, [r1, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8c9a:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8c9c:	movs	r2, #128	; 0x80
    8c9e:	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8ca0:	mov	r0, r7
    8ca2:	add	sp, #32
    8ca4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ca8:	and.w	r7, lr, #255	; 0xff
	if (port().C1 & I2C_C1_MST) {
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    8cac:	bl	89e4 <TwoWire::wait_idle()>
    8cb0:	cmp	r0, #0
    8cb2:	beq.n	8ca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    8cb4:	ldr	r3, [r4, #16]
			//Serial.printf("requestFrom err1\n");
			return 0; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    8cb6:	strb.w	r7, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8cba:	movs	r2, #176	; 0xb0
    8cbc:	strb	r2, [r3, #2]
    8cbe:	b.n	8c1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x36>
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    8cc0:	strb	r7, [r0, #2]
    8cc2:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8cc4:	movs	r2, #128	; 0x80
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8cc6:	mov	r0, r7
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    8cc8:	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8cca:	add	sp, #32
    8ccc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	port().S = I2C_S_IICIF;
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
		// the slave device did not acknowledge
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
    8cd0:	movs	r3, #128	; 0x80
    8cd2:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err4\n");
		return 0;
    8cd4:	movs	r7, #0
    8cd6:	b.n	8ca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
    8cd8:	cmp	r5, #1
    8cda:	beq.n	8dce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1ea>
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
    8cdc:	movs	r1, #160	; 0xa0
    8cde:	strb	r1, [r2, #2]
    8ce0:	ldr	r1, [r4, #16]
	}
	tmp = port().D; // initiate the first receive
    8ce2:	ldrb	r2, [r1, #4]
    8ce4:	mov	lr, r7
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    8ce6:	mov	r7, ip
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8ce8:	mov.w	ip, #168	; 0xa8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8cec:	ldr	r2, [r3, #0]
    8cee:	str	r2, [sp, #16]
	return ret;
    8cf0:	ldr	r0, [sp, #16]
    8cf2:	b.n	8d00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8cf4:	ldr	r2, [r3, #0]
    8cf6:	str	r2, [sp, #20]
	return ret;
    8cf8:	ldr	r2, [sp, #20]
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
    8cfa:	subs	r2, r2, r0
    8cfc:	cmp	r2, #5
    8cfe:	bhi.n	8d9c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b8>
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
    8d00:	ldrb	r2, [r1, #3]
    8d02:	and.w	r2, r2, #2
    8d06:	and.w	r8, r2, #255	; 0xff
    8d0a:	cmp	r2, #0
    8d0c:	beq.n	8cf4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    8d0e:	strb	r7, [r1, #3]
    8d10:	ldr	r1, [r4, #16]
		status = port().S;
    8d12:	ldrb	r2, [r1, #3]
    8d14:	uxtb	r2, r2
		if ((status & I2C_S_ARBL)) {
    8d16:	tst.w	r2, #16
    8d1a:	mov	r0, r1
    8d1c:	bne.n	8dda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f6>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7a\n");
			return count;
		}
		if (!(status & I2C_S_BUSY)) {
    8d1e:	lsls	r2, r2, #26
    8d20:	bpl.n	8dda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f6>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
    8d22:	subs	r5, #1
    8d24:	uxtb	r5, r5
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8d26:	cmp	r5, #1
    8d28:	beq.n	8dc4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1e0>
		if (count < BUFFER_LENGTH) {
    8d2a:	cmp.w	lr, #31
    8d2e:	bls.n	8dae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1ca>
			rxBuffer[count++] = port().D;
		} else {
			tmp = port().D;
    8d30:	ldrb	r2, [r1, #4]
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
    8d32:	cmp	r5, #1
    8d34:	bne.n	8cec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x108>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8d36:	ldr	r2, [r3, #0]
    8d38:	str	r2, [sp, #24]
	return ret;
    8d3a:	ldr	r5, [sp, #24]
    8d3c:	b.n	8d4a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x166>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8d3e:	ldr	r2, [r3, #0]
    8d40:	str	r2, [sp, #28]
	return ret;
    8d42:	ldr	r2, [sp, #28]
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    8d44:	subs	r2, r2, r5
    8d46:	cmp	r2, #5
    8d48:	bhi.n	8df8 <L_2952_delayMicroseconds+0x12>
		} else {
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    8d4a:	ldrb	r2, [r0, #3]
    8d4c:	and.w	r2, r2, #2
    8d50:	and.w	r1, r2, #255	; 0xff
    8d54:	cmp	r2, #0
    8d56:	beq.n	8d3e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15a>
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
		}
	}
	port().S = I2C_S_IICIF;
    8d58:	movs	r3, #2
    8d5a:	strb	r3, [r0, #3]
    8d5c:	ldr	r2, [r4, #16]
	status = port().S;
    8d5e:	ldrb	r3, [r2, #3]
    8d60:	uxtb	r3, r3
	if ((status & I2C_S_ARBL)) {
    8d62:	lsls	r1, r3, #27
    8d64:	bmi.n	8dde <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1fa>
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
		//Serial.printf("requestFrom err9a\n");
		return count;
	}
	if (!(status & I2C_S_BUSY)) {
    8d66:	lsls	r3, r3, #26
    8d68:	bpl.n	8dda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f6>
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8d6a:	movs	r3, #176	; 0xb0
	if (count < BUFFER_LENGTH) {
    8d6c:	cmp.w	lr, #31
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8d70:	strb	r3, [r2, #2]
	if (count < BUFFER_LENGTH) {
    8d72:	bhi.n	8dfc <L_2952_delayMicroseconds+0x16>
    8d74:	ldr	r2, [r4, #16]
		rxBuffer[count++] = port().D;
    8d76:	add.w	r3, r4, lr
    8d7a:	ldrb	r2, [r2, #4]
    8d7c:	strb	r2, [r3, #24]
    8d7e:	add.w	lr, lr, #1
    8d82:	uxtb.w	lr, lr
	} else {
		tmp = port().D;
	}
#if F_CPU > 120000000
	__asm__("nop");
    8d86:	nop
	__asm__("nop");
    8d88:	nop
	__asm__("nop");
    8d8a:	nop
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
    8d8c:	cbz	r6, 8d94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b0>
    8d8e:	ldr	r3, [r4, #16]
    8d90:	movs	r2, #128	; 0x80
    8d92:	strb	r2, [r3, #2]
	rxBufferLength = count;
    8d94:	strb.w	lr, [r4, #57]	; 0x39
	return count;
    8d98:	mov	r7, lr
    8d9a:	b.n	8ca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    8d9c:	strb.w	r8, [r1, #2]
    8da0:	ldr	r3, [r4, #16]
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    8da2:	movs	r2, #128	; 0x80
    8da4:	strb	r2, [r3, #2]
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    8da6:	mov	r7, lr
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
			rxBufferLength = count;
    8da8:	strb.w	lr, [r4, #57]	; 0x39
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    8dac:	b.n	8ca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
		if (count < BUFFER_LENGTH) {
			rxBuffer[count++] = port().D;
    8dae:	add.w	r2, r4, lr
    8db2:	ldrb.w	r8, [r1, #4]
    8db6:	strb.w	r8, [r2, #24]
    8dba:	add.w	lr, lr, #1
    8dbe:	uxtb.w	lr, lr
    8dc2:	b.n	8d32 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x14e>
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8dc4:	strb.w	ip, [r1, #2]
    8dc8:	ldr	r1, [r4, #16]
    8dca:	mov	r0, r1
    8dcc:	b.n	8d2a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x146>
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8dce:	movs	r1, #168	; 0xa8
    8dd0:	strb	r1, [r2, #2]
    8dd2:	ldr	r0, [r4, #16]


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
    8dd4:	mov	lr, r7
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
    8dd6:	ldrb	r2, [r0, #4]
    8dd8:	b.n	8d36 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x152>
    8dda:	mov	r7, lr
    8ddc:	b.n	8ca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	if ((status & I2C_S_ARBL)) {
		// we lost bus arbitration to another master
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
    8dde:	movs	r1, #16
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    8de0:	mov.w	r3, #280	; 0x118
    8de4:	strb	r1, [r2, #3]

00008de6 <L_2952_delayMicroseconds>:
    8de6:	subs	r3, #1
    8de8:	bne.n	8de6 <L_2952_delayMicroseconds>
    8dea:	ldr	r2, [r4, #16]
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    8dec:	ldrb	r3, [r2, #2]
    8dee:	and.w	r3, r3, #247	; 0xf7
		//Serial.printf("requestFrom err9a\n");
		return count;
    8df2:	mov	r7, lr
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    8df4:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err9a\n");
		return count;
    8df6:	b.n	8ca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    8df8:	strb	r1, [r0, #2]
    8dfa:	b.n	8da0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1bc>
    8dfc:	ldr	r3, [r4, #16]
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
	if (count < BUFFER_LENGTH) {
		rxBuffer[count++] = port().D;
	} else {
		tmp = port().D;
    8dfe:	ldrb	r3, [r3, #4]
    8e00:	b.n	8d86 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1a2>
    8e02:	nop
    8e04:	.word	0x2000701c

00008e08 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    8e08:	ldr	r0, [pc, #4]	; (8e10 <i2c0_isr+0x8>)
    8e0a:	b.w	88b4 <TwoWire::isr()>
    8e0e:	nop
    8e10:	.word	0x1fff0a84

00008e14 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    8e14:	ldr	r0, [pc, #4]	; (8e1c <i2c1_isr+0x8>)
    8e16:	b.w	88b4 <TwoWire::isr()>
    8e1a:	nop
    8e1c:	.word	0x1fff0af0

00008e20 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    8e20:	ldr	r0, [pc, #4]	; (8e28 <i2c2_isr+0x8>)
    8e22:	b.w	88b4 <TwoWire::isr()>
    8e26:	nop
    8e28:	.word	0x1fff0a18

00008e2c <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    8e2c:	push	{r3, r4, r5, r6, r7, lr}
    8e2e:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    8e30:	add.w	r6, r0, #16
    8e34:	ldr	r0, [r0, #4]
    8e36:	ldr	r1, [r4, #12]
    8e38:	ldr	r3, [r0, #0]
    8e3a:	mov	r2, r6
    8e3c:	ldr	r3, [r3, #28]
    8e3e:	blx	r3
    8e40:	cbz	r0, 8e54 <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    8e42:	ldrb	r3, [r4, #0]
    8e44:	lsls	r2, r3, #30
    8e46:	mov	r5, r0
    8e48:	bmi.n	8e5a <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    8e4a:	bic.w	r3, r3, #1
    8e4e:	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    8e50:	mov	r0, r5
    8e52:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    8e54:	movs	r5, #0
}
    8e56:	mov	r0, r5
    8e58:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    8e5a:	ldr	r0, [r4, #4]
    8e5c:	ldr	r1, [r4, #12]
    8e5e:	ldr	r2, [r0, #0]
    8e60:	ldr	r3, [r4, #8]
    8e62:	ldr	r7, [r2, #28]
    8e64:	add	r1, r3
    8e66:	mov	r2, r6
    8e68:	blx	r7
    8e6a:	cmp	r0, #0
    8e6c:	beq.n	8e54 <FsCache::sync() [clone .part.0]+0x28>
    8e6e:	ldrb	r3, [r4, #0]
    8e70:	b.n	8e4a <FsCache::sync() [clone .part.0]+0x1e>
    8e72:	nop

00008e74 <FsCache::get(unsigned long, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    8e74:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    8e76:	ldr	r5, [r0, #4]
    8e78:	cbz	r5, 8eba <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    8e7a:	ldr	r3, [r0, #12]
    8e7c:	cmp	r3, r1
    8e7e:	mov	r4, r0
    8e80:	mov	r7, r2
    8e82:	mov	r6, r1
    8e84:	beq.n	8ea4 <FsCache::get(unsigned long, unsigned char)+0x30>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8e86:	ldrb	r3, [r0, #0]
    8e88:	lsls	r2, r3, #31
    8e8a:	bmi.n	8eb2 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    8e8c:	lsls	r3, r7, #29
    8e8e:	bpl.n	8ebe <FsCache::get(unsigned long, unsigned char)+0x4a>
    8e90:	add.w	r5, r4, #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8e94:	and.w	r2, r7, #3
    8e98:	movs	r3, #0
    8e9a:	orrs	r3, r2
    8e9c:	strb	r3, [r4, #0]
    8e9e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    8ea0:	str	r6, [r4, #12]
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
}
    8ea2:	pop	{r3, r4, r5, r6, r7, pc}
    8ea4:	ldrsb.w	r3, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8ea8:	and.w	r2, r7, #3
    8eac:	orrs	r3, r2
    8eae:	strb	r3, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    8eb0:	pop	{r3, r4, r5, r6, r7, pc}
    8eb2:	bl	8e2c <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    8eb6:	cmp	r0, #0
    8eb8:	bne.n	8e8c <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    8eba:	movs	r0, #0
    8ebc:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    8ebe:	ldr	r0, [r4, #4]
    8ec0:	ldr	r3, [r0, #0]
    8ec2:	add.w	r5, r4, #16
    8ec6:	ldr	r3, [r3, #12]
    8ec8:	mov	r2, r5
    8eca:	mov	r1, r6
    8ecc:	blx	r3
    8ece:	cmp	r0, #0
    8ed0:	bne.n	8e94 <FsCache::get(unsigned long, unsigned char)+0x20>
    8ed2:	b.n	8eba <FsCache::get(unsigned long, unsigned char)+0x46>

00008ed4 <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8ed4:	ldrb	r3, [r0, #0]
    8ed6:	lsls	r3, r3, #31
    8ed8:	bmi.n	8ede <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    8eda:	movs	r0, #1
    8edc:	bx	lr
    8ede:	b.w	8e2c <FsCache::sync() [clone .part.0]>
    8ee2:	nop

00008ee4 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    8ee4:	push	{r4, lr}
    8ee6:	mov	r4, r0
  bool rtn = sync();
    8ee8:	bl	a0d8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    8eec:	movs	r3, #0
    8eee:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    8ef2:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    8ef6:	pop	{r4, pc}

00008ef8 <ExFatFile::getName(char*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8ef8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8efc:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8f00:	mov	r9, r0
    8f02:	mov	r7, r1
    8f04:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8f06:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8f0a:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    8f0c:	ldrb.w	r3, [r9, #49]	; 0x31
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8f10:	add	r6, sp, #4
    8f12:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    8f16:	cmp	r3, #0
    8f18:	beq.n	8f98 <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8f1a:	ldrb.w	r3, [r9, #48]	; 0x30
    8f1e:	cmp	r3, #1
    8f20:	bls.n	8fa2 <ExFatFile::getName(char*, unsigned int)+0xaa>
    8f22:	mov.w	r8, #1
    8f26:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    8f28:	cmp.w	r8, #1
    8f2c:	ite	ne
    8f2e:	movne	r2, #32
    8f30:	moveq	r2, #64	; 0x40
    8f32:	mov	r1, r6
    8f34:	ldr.w	r0, [r9, #32]
    8f38:	bl	9ac4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8f3c:	cmp	r0, #1
    8f3e:	bne.n	8f98 <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    8f40:	movs	r2, #0
    8f42:	mov	r1, r6
    8f44:	ldr.w	r0, [r9, #32]
    8f48:	bl	9a90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    8f4c:	cbz	r0, 8f98 <ExFatFile::getName(char*, unsigned int)+0xa0>
    8f4e:	ldrb	r3, [r0, #0]
    8f50:	cmp	r3, #193	; 0xc1
    8f52:	bne.n	8f98 <ExFatFile::getName(char*, unsigned int)+0xa0>
    8f54:	adds	r1, r7, r4
    8f56:	add.w	lr, r4, #15
    8f5a:	b.n	8f5e <ExFatFile::getName(char*, unsigned int)+0x66>
    8f5c:	mov	r4, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8f5e:	ldrh.w	r3, [r0, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
    8f62:	adds	r2, r4, #1
    8f64:	cbz	r3, 8f8c <ExFatFile::getName(char*, unsigned int)+0x94>
    8f66:	cmp	r2, r5
    8f68:	bcs.n	8f8c <ExFatFile::getName(char*, unsigned int)+0x94>
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8f6a:	cmp	r3, #126	; 0x7e
    8f6c:	ite	ls
    8f6e:	uxtbls	r3, r3
    8f70:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    8f72:	cmp	r2, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8f74:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    8f78:	bne.n	8f5c <ExFatFile::getName(char*, unsigned int)+0x64>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8f7a:	add.w	r8, r8, #1
    8f7e:	ldrb.w	r3, [r9, #48]	; 0x30
    8f82:	uxtb.w	r8, r8
    8f86:	cmp	r3, r8
    8f88:	mov	r4, r2
    8f8a:	bhi.n	8f28 <ExFatFile::getName(char*, unsigned int)+0x30>
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    8f8c:	movs	r3, #0
  return n;
    8f8e:	mov	r0, r4
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    8f90:	strb	r3, [r7, r4]
  return n;

 fail:
  *name = 0;
  return 0;
}
    8f92:	add	sp, #20
    8f94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    8f98:	movs	r0, #0
    8f9a:	strb	r0, [r7, #0]
  return 0;
}
    8f9c:	add	sp, #20
    8f9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8fa2:	movs	r4, #0
    8fa4:	b.n	8f8c <ExFatFile::getName(char*, unsigned int)+0x94>
    8fa6:	nop

00008fa8 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    8fa8:	ldrb.w	r2, [r0, #49]	; 0x31
    8fac:	cbz	r2, 8fb2 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    8fae:	movs	r0, #0
    8fb0:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    8fb2:	push	{r3, r4, r5, lr}
    8fb4:	mov	r4, r0
    8fb6:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    8fb8:	mov	r1, r2
    8fba:	movs	r2, #56	; 0x38
    8fbc:	bl	10dec <memset>
  m_attributes = FILE_ATTR_ROOT;
    8fc0:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8fc2:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    8fc4:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8fc8:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    8fcc:	str	r5, [r4, #32]
    8fce:	pop	{r3, r4, r5, pc}

00008fd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    8fd0:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    8fd2:	ldrb	r0, [r1, #0]
    8fd4:	cmp	r0, #32
    8fd6:	bne.n	8fe0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    8fd8:	ldrb.w	r0, [r1, #1]!
    8fdc:	cmp	r0, #32
    8fde:	beq.n	8fd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    8fe0:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    8fe2:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    8fe4:	cmp	r0, #0
    8fe6:	beq.n	908c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    8fe8:	cmp	r0, #47	; 0x2f
    8fea:	beq.n	9044 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8fec:	cmp	r0, #92	; 0x5c
    8fee:	beq.n	9032 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    8ff0:	sub.w	r4, r0, #34	; 0x22
    8ff4:	uxtb	r4, r4
    8ff6:	cmp	r4, #29
    8ff8:	bls.n	9036 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    8ffa:	ldr.w	lr, [pc, #148]	; 9090 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    8ffe:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    9000:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    9002:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    9004:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    9008:	mov	r7, r6
    900a:	beq.n	9032 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    900c:	cmp	r5, #94	; 0x5e
    900e:	bhi.n	9032 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    9010:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    9014:	sub.w	r5, r0, #34	; 0x22
    9018:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    901a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    901c:	cbz	r0, 907e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    901e:	cmp	r0, #47	; 0x2f
    9020:	beq.n	9046 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    9022:	cmp	r0, #92	; 0x5c
    9024:	lsr.w	r7, lr, r5
    9028:	beq.n	9032 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    902a:	cmp	r5, #29
    902c:	bhi.n	9002 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    902e:	lsls	r5, r7, #31
    9030:	bpl.n	9002 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    9032:	movs	r0, #0
    9034:	pop	{r4, r5, r6, r7, pc}
    9036:	ldr	r5, [pc, #88]	; (9090 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    9038:	lsr.w	r4, r5, r4
    903c:	lsls	r6, r4, #31
    903e:	bpl.n	8ffa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    9040:	movs	r0, #0
    9042:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    9044:	movs	r4, #0
    9046:	adds	r7, r1, r4
    9048:	mov	r6, r7
    904a:	mov	r5, r4
    904c:	movs	r0, #47	; 0x2f
    904e:	b.n	9056 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    9050:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    9054:	adds	r5, #1
    9056:	cmp	r0, #32
    9058:	beq.n	9050 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    905a:	cmp	r0, #47	; 0x2f
    905c:	beq.n	9050 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    905e:	add	r1, r5
    9060:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    9062:	cbz	r4, 9076 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    9064:	mov	r1, r7
    c = path[len - 1];
    9066:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    906a:	cmp	r3, #46	; 0x2e
    906c:	beq.n	9072 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    906e:	cmp	r3, #32
    9070:	bne.n	9084 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    9072:	subs	r4, #1
    9074:	bne.n	9066 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    9076:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    9078:	str	r0, [r2, #0]
  return true;
    907a:	movs	r0, #1
    907c:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    907e:	str	r7, [r3, #0]
    9080:	adds	r7, r1, r4
    9082:	b.n	9064 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    9084:	cmp	r4, #255	; 0xff
    9086:	ble.n	9076 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    9088:	movs	r0, #0
    908a:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    908c:	str	r1, [r3, #0]
    908e:	b.n	9078 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    9090:	.word	0x35000101

00009094 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    9094:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9098:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    909c:	lsls	r6, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    909e:	sub	sp, #12
    90a0:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    90a2:	bpl.n	915a <ExFatFile::read(void*, unsigned int)+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    90a4:	lsls	r5, r3, #25
    90a6:	mov	r6, r1
    90a8:	mov	fp, r2
    90aa:	bpl.w	921e <ExFatFile::read(void*, unsigned int)+0x18a>
    if ((m_curPosition + count) > m_validLength) {
    90ae:	ldrd	r0, r1, [r4]
    90b2:	ldrd	r2, r3, [r4, #16]
    90b6:	adds.w	r8, r0, fp
    90ba:	adc.w	r9, r1, #0
    90be:	cmp	r3, r9
    90c0:	it	eq
    90c2:	cmpeq	r2, r8
    90c4:	bcc.w	922a <ExFatFile::read(void*, unsigned int)+0x196>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    90c8:	cmp.w	fp, #0
    90cc:	beq.n	91ac <ExFatFile::read(void*, unsigned int)+0x118>
    90ce:	mov	r9, r4
    90d0:	ldrd	r0, r1, [r9], #24
    90d4:	mov	r5, fp
    clusterOffset = m_curPosition & m_vol->clusterMask();
    90d6:	ldr	r7, [r4, #32]
    90d8:	ldr.w	r3, [r7, #1080]	; 0x438
    90dc:	ands	r3, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    90de:	ubfx	sl, r3, #0, #9
    if (clusterOffset == 0) {
    90e2:	cmp	r3, #0
    90e4:	bne.n	91b8 <ExFatFile::read(void*, unsigned int)+0x124>
      if (m_curPosition == 0) {
    90e6:	orrs.w	r2, r0, r1
    90ea:	bne.n	91d8 <ExFatFile::read(void*, unsigned int)+0x144>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    90ec:	ldrb.w	r2, [r4, #49]	; 0x31
    90f0:	lsls	r1, r2, #25
    90f2:	ite	mi
    90f4:	ldrmi.w	r2, [r7, #1076]	; 0x434
    90f8:	ldrpl	r2, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    90fa:	str	r2, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    90fc:	ldr.w	r0, [r7, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    9100:	ldrb.w	lr, [r7, #1093]	; 0x445
    9104:	lsrs	r3, r3, #9
    9106:	subs	r2, #2
    9108:	adds	r1, r3, r0
    910a:	lsl.w	r2, r2, lr
    910e:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    9110:	cmp.w	sl, #0
    9114:	bne.n	9170 <ExFatFile::read(void*, unsigned int)+0xdc>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    9116:	cmp.w	r5, #512	; 0x200
    911a:	bcc.n	9170 <ExFatFile::read(void*, unsigned int)+0xdc>
    911c:	ldr.w	r2, [r7, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    9120:	cmp	r1, r2
    9122:	beq.n	9170 <ExFatFile::read(void*, unsigned int)+0xdc>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    9124:	cmp.w	r5, #1024	; 0x400
    9128:	bcc.n	91e6 <ExFatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    912a:	mov.w	r8, #1
    912e:	lsl.w	r8, r8, lr
    9132:	rsb	r3, r3, r8
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    9136:	mov.w	r8, r5, lsr #9
    913a:	cmp	r8, r3
    913c:	it	cs
    913e:	movcs	r8, r3
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    9140:	cmp	r1, r2
    9142:	bhi.n	91bc <ExFatFile::read(void*, unsigned int)+0x128>
    9144:	add.w	r3, r8, r1
    9148:	cmp	r2, r3
    914a:	bcs.n	91bc <ExFatFile::read(void*, unsigned int)+0x128>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    914c:	add.w	r0, r7, #528	; 0x210
    9150:	str	r1, [sp, #4]
    9152:	bl	8ed4 <FsCache::sync()>
    9156:	ldr	r1, [sp, #4]
    9158:	cbnz	r0, 91bc <ExFatFile::read(void*, unsigned int)+0x128>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    915a:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    915e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    9162:	orr.w	r3, r3, #2
    9166:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    916a:	add	sp, #12
    916c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    9170:	add.w	r0, r7, #528	; 0x210
    9174:	movs	r2, #0
    9176:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    917a:	cmp	r0, #0
    917c:	beq.n	915a <ExFatFile::read(void*, unsigned int)+0xc6>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    917e:	rsb	r8, sl, #512	; 0x200
    9182:	cmp	r8, r5
    9184:	it	cs
    9186:	movcs	r8, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    9188:	add.w	r1, r0, sl
    918c:	mov	r2, r8
    918e:	mov	r0, r6
    9190:	bl	db58 <memcpy>
    9194:	mov	r2, r8
    9196:	movs	r3, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    9198:	ldrd	r0, r1, [r4]
    919c:	adds	r0, r0, r2
    919e:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    91a0:	subs.w	r5, r5, r8
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    91a4:	add	r6, r8
    m_curPosition += n;
    91a6:	strd	r0, r1, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    91aa:	bne.n	90d6 <ExFatFile::read(void*, unsigned int)+0x42>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    91ac:	movs	r5, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    91ae:	rsb	r0, r5, fp

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    91b2:	add	sp, #12
    91b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91b8:	ldr	r2, [r4, #24]
    91ba:	b.n	90fc <ExFatFile::read(void*, unsigned int)+0x68>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    91bc:	ldr.w	r0, [r7, #532]	; 0x214
    91c0:	ldr	r3, [r0, #0]
    91c2:	mov	r2, r6
    91c4:	ldr	r7, [r3, #16]
    91c6:	mov	r3, r8
    91c8:	blx	r7
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    91ca:	cmp	r0, #0
    91cc:	beq.n	915a <ExFatFile::read(void*, unsigned int)+0xc6>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    91ce:	mov.w	r8, r8, lsl #9
    91d2:	mov	r2, r8
    91d4:	movs	r3, #0
    91d6:	b.n	9198 <ExFatFile::read(void*, unsigned int)+0x104>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    91d8:	ldrb.w	r2, [r4, #51]	; 0x33
    91dc:	lsls	r2, r2, #25
    91de:	bpl.n	9202 <ExFatFile::read(void*, unsigned int)+0x16e>
        m_curCluster++;
    91e0:	ldr	r2, [r4, #24]
    91e2:	adds	r2, #1
    91e4:	b.n	90fa <ExFatFile::read(void*, unsigned int)+0x66>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    91e6:	ldr.w	r0, [r7, #532]	; 0x214
    91ea:	ldr	r3, [r0, #0]
    91ec:	mov	r2, r6
    91ee:	ldr	r3, [r3, #12]
    91f0:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    91f2:	cmp	r0, #0
    91f4:	beq.n	915a <ExFatFile::read(void*, unsigned int)+0xc6>
    91f6:	mov.w	r2, #512	; 0x200
    91fa:	movs	r3, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    91fc:	mov.w	r8, #512	; 0x200
    9200:	b.n	9198 <ExFatFile::read(void*, unsigned int)+0x104>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9202:	mov	r0, r7
    9204:	mov	r2, r9
    9206:	ldr	r1, [r4, #24]
    9208:	str	r3, [sp, #4]
    920a:	bl	9b1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    920e:	sxtb	r0, r0
        if (fg < 0) {
    9210:	cmp	r0, #0
    9212:	blt.n	915a <ExFatFile::read(void*, unsigned int)+0xc6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    9214:	beq.n	9230 <ExFatFile::read(void*, unsigned int)+0x19c>
    9216:	ldr	r7, [r4, #32]
    9218:	ldr	r2, [r4, #24]
    921a:	ldr	r3, [sp, #4]
    921c:	b.n	90fc <ExFatFile::read(void*, unsigned int)+0x68>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    921e:	ldrb.w	r3, [r0, #49]	; 0x31
    9222:	lsls	r0, r3, #28
    9224:	bmi.w	90ae <ExFatFile::read(void*, unsigned int)+0x1a>
    9228:	b.n	90c8 <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    922a:	rsb	fp, r0, r2
    922e:	b.n	90c8 <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    9230:	ldrb.w	r3, [r4, #49]	; 0x31
    9234:	tst.w	r3, #80	; 0x50
    9238:	bne.n	91ae <ExFatFile::read(void*, unsigned int)+0x11a>
    923a:	b.n	915a <ExFatFile::read(void*, unsigned int)+0xc6>

0000923c <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    923c:	push	{r4, r5, r6, r7, lr}
    923e:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    9240:	movs	r2, #1
    9242:	add.w	r1, sp, #7
    9246:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    9248:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    924c:	ldr	r5, [r0, #24]
    924e:	bl	9094 <ExFatFile::read(void*, unsigned int)>
    9252:	cmp	r0, #1
    9254:	it	eq
    9256:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    925a:	str	r5, [r4, #24]
    925c:	it	ne
    925e:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    9262:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    9266:	add	sp, #12
    9268:	pop	{r4, r5, r6, r7, pc}
    926a:	nop

0000926c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    926c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9270:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    9274:	ldr	r5, [r0, #24]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    9276:	sub	sp, #12
    9278:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    927a:	cmp.w	lr, #0
    927e:	beq.n	92b8 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    9280:	ldrd	r0, r1, [r0]
    9284:	cmp	r1, r3
    9286:	it	eq
    9288:	cmpeq	r0, r2
    928a:	mov	r6, r2
    928c:	mov	r7, r3
    928e:	beq.n	9308 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    9290:	orrs.w	r3, r6, r7
    9294:	bne.n	92a6 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    9296:	movs	r3, #0
    9298:	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    929a:	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    929c:	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    92a0:	add	sp, #12
    92a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    92a6:	tst.w	lr, #8
    92aa:	beq.n	92c2 <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    92ac:	ldrd	r2, r3, [r4, #16]
    92b0:	cmp	r3, r7
    92b2:	it	eq
    92b4:	cmpeq	r2, r6
    92b6:	bcs.n	92c2 <ExFatFile::seekSet(unsigned long long)+0x56>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    92b8:	str	r5, [r4, #24]
  return false;
    92ba:	movs	r0, #0
}
    92bc:	add	sp, #12
    92be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    92c2:	ldr	r3, [r4, #32]
    92c4:	str	r3, [sp, #4]
    92c6:	ldrb.w	ip, [r3, #1093]	; 0x445
  if (isContiguous()) {
    92ca:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    92ce:	add.w	ip, ip, #9
    92d2:	uxtb.w	ip, ip
    92d6:	adds.w	r2, r6, #4294967295
    92da:	adc.w	r3, r7, #4294967295
    92de:	rsb	r8, ip, #32
    92e2:	lsl.w	fp, r3, r8
    92e6:	lsr.w	r2, r2, ip
    92ea:	orr.w	r2, r2, fp
    92ee:	sub.w	fp, ip, #32
    92f2:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    92f6:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    92fa:	orr.w	r2, r2, r3
  if (isContiguous()) {
    92fe:	beq.n	930c <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    9300:	ldr	r3, [r4, #28]
    9302:	add	r2, r3
    9304:	str	r2, [r4, #24]
    goto done;
    9306:	b.n	929a <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    9308:	movs	r0, #1
    930a:	b.n	92bc <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    930c:	adds.w	r9, r0, #4294967295
    9310:	adc.w	sl, r1, #4294967295
    9314:	lsr.w	ip, r9, ip
    9318:	lsl.w	r8, sl, r8
    931c:	orr.w	ip, ip, r8
    9320:	lsr.w	fp, sl, fp
    9324:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    9328:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    932a:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    932c:	bcs.n	935e <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    932e:	tst.w	lr, #64	; 0x40
    9332:	itet	ne
    9334:	ldrne	r3, [sp, #4]
    9336:	ldreq	r3, [r4, #28]
    9338:	ldrne.w	r3, [r3, #1076]	; 0x434
    933c:	str	r3, [r4, #24]
    933e:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    9340:	add.w	r9, r4, #24
    9344:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    9346:	cmp.w	r8, #0
    934a:	beq.n	929a <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    934c:	ldr	r1, [r4, #24]
    934e:	ldr	r0, [r4, #32]
    9350:	bl	9b1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    9354:	add.w	r8, r8, #4294967295
    9358:	cmp	r0, #0
    935a:	bne.n	9344 <ExFatFile::seekSet(unsigned long long)+0xd8>
    935c:	b.n	92b8 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    935e:	orrs.w	r3, r0, r1
    9362:	beq.n	932e <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    9364:	rsb	r2, ip, r2
    9368:	b.n	933e <ExFatFile::seekSet(unsigned long long)+0xd2>
    936a:	nop

0000936c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    936c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9370:	mov	r6, r1
    9372:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    9374:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    9378:	str	r2, [sp, #0]
    937a:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    937c:	cbnz	r1, 938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    937e:	mov	sl, r3
    9380:	ldrb.w	r3, [r6, #49]	; 0x31
    9384:	tst.w	r3, #80	; 0x50
    9388:	bne.n	939a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    938a:	movs	r0, #0
    938c:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    9390:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    9394:	add	sp, #76	; 0x4c
    9396:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    939a:	ldr	r3, [sp, #112]	; 0x70
    939c:	and.w	r3, r3, #3
    93a0:	cmp	r3, #1
    93a2:	beq.n	93b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    93a4:	cmp	r3, #2
    93a6:	beq.w	95bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    93aa:	cmp	r3, #0
    93ac:	bne.n	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    93ae:	movs	r3, #1
    93b0:	b.n	93b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    93b2:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    93b4:	ldr	r2, [sp, #112]	; 0x70
    93b6:	and.w	r2, r2, #8
    93ba:	orrs	r3, r2
    93bc:	str	r3, [sp, #4]
  if (name) {
    93be:	ldr	r3, [sp, #0]
    93c0:	cmp	r3, #0
    93c2:	beq.w	95c0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    93c6:	mov	r0, r3
    93c8:	movs	r2, #0
    93ca:	mov	r1, sl
    93cc:	bl	9d98 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    93d0:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    93d4:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    93d6:	cbz	r3, 93ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    93d8:	ldrd	r2, r3, [r6]
    93dc:	orrs	r3, r2
    93de:	beq.n	93ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    93e0:	movs	r2, #0
    93e2:	movs	r3, #0
    93e4:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    93e8:	movs	r1, #0
    93ea:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    93ec:	ldr	r2, [pc, #736]	; (96d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    93ee:	add.w	r3, sl, #14
    93f2:	smull	r1, r2, r2, r3
    93f6:	add	r2, r3
    93f8:	asrs	r3, r3, #31
    93fa:	rsb	r3, r3, r2, asr #3
    93fe:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    9400:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    9404:	str	r3, [sp, #12]
    9406:	adds	r3, #2
    9408:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    940c:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    940e:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    9410:	movs	r2, #32
    9412:	add	r1, sp, #40	; 0x28
    9414:	mov	r0, r6
    9416:	bl	9094 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    941a:	cmp	r0, #0
    941c:	beq.n	949a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    941e:	cmp	r0, #32
    9420:	bne.n	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    9422:	ldrb.w	r3, [sp, #40]	; 0x28
    9426:	lsls	r2, r3, #24
    9428:	bmi.n	94f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    942a:	cmp	r4, #0
    942c:	bne.n	94f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    942e:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    9430:	ldr	r1, [r6, #24]
    9432:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    9434:	subs	r2, #32
    9436:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    9438:	adds	r4, #1
    943a:	uxtb	r4, r4
      }
      if (!buf[0]) {
    943c:	cbz	r3, 949a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    943e:	cmp	r3, #192	; 0xc0
    9440:	beq.w	956a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    9444:	cmp	r3, #193	; 0xc1
    9446:	beq.n	950e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    9448:	cmp	r3, #133	; 0x85
    944a:	bne.n	9410 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    944c:	movs	r2, #56	; 0x38
    944e:	movs	r1, #0
    9450:	mov	r0, r5
    9452:	bl	10dec <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    9456:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    945a:	ldrb.w	r2, [sp, #41]	; 0x29
    945e:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    9462:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    9464:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    9468:	it	pl
    946a:	orrpl.w	r2, r2, #8
    946e:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    9472:	ldr	r3, [r6, #0]
    9474:	ldr	r1, [r6, #32]
    9476:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    9478:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    947a:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    947c:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    947e:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    9480:	ldrb.w	r3, [r6, #51]	; 0x33
    9484:	ubfx	r3, r3, #6, #1
    9488:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    948c:	movs	r2, #32
    948e:	add	r1, sp, #40	; 0x28
    9490:	mov	r0, r6
    9492:	bl	9094 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    9496:	cmp	r0, #0
    9498:	bne.n	941e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    949a:	ldr	r3, [sp, #112]	; 0x70
    949c:	lsls	r1, r3, #22
    949e:	bpl.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    94a2:	ldr	r3, [sp, #4]
    94a4:	lsls	r2, r3, #30
    94a6:	bpl.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    94aa:	ldr	r3, [sp, #0]
    94ac:	cmp	r3, #0
    94ae:	beq.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    94b2:	cmp	r4, fp
    94b4:	bcc.n	94d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    94b6:	b.n	95c6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    94b8:	cmp	r0, #32
    94ba:	bne.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    94be:	cbnz	r4, 94ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    94c0:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    94c2:	ldr	r1, [r6, #24]
    94c4:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    94c6:	subs	r2, #32
    94c8:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    94ca:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    94cc:	cmp	fp, r4
    94ce:	bls.n	95c6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    94d0:	movs	r2, #32
    94d2:	add	r1, sp, #40	; 0x28
    94d4:	mov	r0, r6
    94d6:	bl	9094 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    94da:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    94dc:	cmp	r0, #0
    94de:	bne.n	94b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    94e0:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    94e2:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    94e4:	bl	a138 <ExFatFile::addDirCluster()>
    94e8:	cmp	r0, #0
    94ea:	beq.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    94ee:	str	r7, [r6, #24]
      continue;
    94f0:	b.n	94cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    94f2:	cmp	r4, fp
    94f4:	bcs.n	943c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    94f6:	b.n	9438 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    94f8:	cmp.w	r9, #0
    94fc:	bne.n	943e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    94fe:	cmp	r4, fp
    9500:	it	cc
    9502:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    9504:	cmp	r3, #133	; 0x85
    9506:	bne.n	9410 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    9508:	mov.w	r9, #1
    950c:	b.n	944c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    950e:	rsb	r8, r7, sl
    9512:	uxtb.w	r8, r8
    9516:	cmp.w	r8, #15
    951a:	it	cs
    951c:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    9520:	mov	r3, r8
    9522:	mov	r2, r7
    9524:	ldr	r1, [sp, #0]
    9526:	add	r0, sp, #40	; 0x28
    9528:	bl	9d40 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    952c:	cmp	r0, #0
    952e:	beq.n	95aa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    9530:	add	r7, r8
    9532:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    9534:	cmp	sl, r7
    9536:	bne.w	9410 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    953a:	ldr	r3, [sp, #112]	; 0x70
    953c:	lsls	r3, r3, #20
    953e:	bmi.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    9542:	ldr	r3, [sp, #112]	; 0x70
    9544:	tst.w	r3, #17408	; 0x4400
    9548:	bne.w	968c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    954c:	ldrb.w	r3, [r5, #51]	; 0x33
    9550:	lsls	r7, r3, #30
    9552:	bmi.w	968c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    9556:	ldr	r3, [sp, #112]	; 0x70
    9558:	lsls	r3, r3, #21
    955a:	bmi.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    955e:	ldr	r3, [sp, #112]	; 0x70
    9560:	lsls	r0, r3, #17
    9562:	bmi.w	96d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    9566:	movs	r0, #1
    9568:	b.n	9394 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    956a:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    956e:	ldr	r2, [sp, #4]
    9570:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    9574:	lsls	r1, r3, #30
    9576:	bpl.n	9580 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    9578:	orr.w	r3, r2, #64	; 0x40
    957c:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    9580:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    9584:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    9588:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    958c:	ldr	r3, [sp, #60]	; 0x3c
    958e:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    9590:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    9592:	strd	r0, r1, [r5, #8]
        if (!name) {
    9596:	cmp	r3, #0
    9598:	beq.n	953a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    959a:	ldrb.w	r3, [sp, #43]	; 0x2b
    959e:	cmp	r3, sl
    95a0:	beq.n	95ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    95a2:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    95a6:	mov	r7, r9
    95a8:	b.n	9410 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    95aa:	mov	r9, r0
    95ac:	b.n	9410 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    95ae:	ldrh.w	r3, [sp, #44]	; 0x2c
    95b2:	ldr	r2, [sp, #8]
    95b4:	cmp	r3, r2
    95b6:	bne.n	95a2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    95b8:	movs	r7, #0
    95ba:	b.n	9410 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    95bc:	movs	r3, #3
    95be:	b.n	93b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    95c0:	ldr	r3, [sp, #0]
    95c2:	str	r3, [sp, #8]
    95c4:	b.n	93ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    95c6:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    95ca:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    95cc:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    95d0:	movs	r1, #0
    95d2:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    95d4:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    95d8:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    95dc:	bl	10dec <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    95e0:	ldr	r4, [sp, #12]
    95e2:	ldr	r3, [r6, #32]
    95e4:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    95e8:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    95ec:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    95f0:	movs	r4, #8
    95f2:	strb.w	r4, [r5, #49]	; 0x31
    95f6:	add.w	r7, sl, #30
  m_dirPos = freePos;
    95fa:	add.w	r4, r5, #36	; 0x24
    95fe:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    9602:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    9604:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    9608:	stmia.w	r4, {r0, r1, r2}
    960c:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    960e:	movs	r6, #0
    9610:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    9612:	movs	r2, #1
    9614:	mov	r1, r8
    9616:	bl	9a90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    961a:	mov	r4, r0
    961c:	cmp	r0, #0
    961e:	beq.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9622:	ldrsb.w	r3, [r0]
    9626:	cmp	r3, #0
    9628:	blt.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    962c:	movs	r2, #32
    962e:	movs	r1, #0
    9630:	bl	10dec <memset>
    if (i == 0) {
    9634:	cmp	r6, #0
    9636:	beq.n	9706 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    9638:	cmp	r6, #1
    963a:	beq.n	96e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    963c:	rsb	r3, r6, r6, lsl #4
    9640:	cmp	r7, #15
    9642:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    9646:	mov.w	r2, #193	; 0xc1
    964a:	mov	r1, r7
    964c:	it	cs
    964e:	movcs	r1, #15
    9650:	uxtb	r3, r3
    9652:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    9654:	cbz	r1, 966c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    9656:	adds	r4, #2
    9658:	sxth	r1, r1
    965a:	add.w	r1, r4, r1, lsl #1
    965e:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    9660:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9664:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    9668:	cmp	r1, r4
    966a:	bne.n	9660 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    966c:	adds	r6, #1
    966e:	uxtb	r6, r6
    9670:	cmp	fp, r6
    9672:	bls.n	96c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    9674:	movs	r2, #32
    9676:	mov	r1, r8
    9678:	ldr	r0, [r5, #32]
    967a:	bl	9ac4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    967e:	cmp	r0, #1
    9680:	bne.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9684:	subs	r7, #15
    9686:	uxtb	r7, r7
    9688:	ldr	r0, [r5, #32]
    968a:	b.n	9612 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    968c:	ldrb.w	r3, [r5, #49]	; 0x31
    9690:	tst.w	r3, #17
    9694:	bne.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    9698:	ldr	r3, [sp, #112]	; 0x70
    969a:	lsls	r6, r3, #21
    969c:	bpl.w	955e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    96a0:	ldrb.w	r3, [r5, #51]	; 0x33
    96a4:	lsls	r4, r3, #30
    96a6:	bpl.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    96aa:	movs	r2, #0
    96ac:	movs	r3, #0
    96ae:	mov	r0, r5
    96b0:	bl	926c <ExFatFile::seekSet(unsigned long long)>
    96b4:	cmp	r0, #0
    96b6:	beq.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    96ba:	mov	r0, r5
    96bc:	bl	a400 <ExFatFile::truncate()>
    96c0:	cmp	r0, #0
    96c2:	beq.w	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    96c6:	b.n	9566 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    96c8:	mov	r0, r5
    96ca:	bl	a0d8 <ExFatFile::sync()>
    96ce:	b.n	9394 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    96d0:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    96d4:	ldrd	r2, r3, [r5, #16]
    96d8:	mov	r0, r5
    96da:	bl	926c <ExFatFile::seekSet(unsigned long long)>
    96de:	cmp	r0, #0
    96e0:	bne.w	9566 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    96e4:	b.n	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    96e6:	movs	r3, #192	; 0xc0
    96e8:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    96ea:	ldr	r3, [sp, #4]
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    96ec:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    96ee:	orn	r3, r3, #63	; 0x3f
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    96f2:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    96f4:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    96f8:	ldrb.w	r3, [sp, #12]
    96fc:	strb	r3, [r4, #3]
    96fe:	ldrh.w	r3, [sp, #8]
    9702:	strh	r3, [r4, #4]
    9704:	b.n	966c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    9706:	movs	r3, #133	; 0x85
    9708:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    970a:	ldr	r3, [pc, #56]	; (9744 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d8>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    970c:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    9710:	strb.w	r9, [r4, #1]

      if (FsDateTime::callback) {
    9714:	ldr	r3, [r3, #0]
    9716:	cbz	r3, 9738 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3cc>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    9718:	add.w	r2, sp, #23
    971c:	add.w	r1, sp, #26
    9720:	add	r0, sp, #24
    9722:	blx	r3
    9724:	ldrh.w	r1, [sp, #24]
    9728:	ldrh.w	r2, [sp, #26]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    972c:	ldrb.w	r3, [sp, #23]
    9730:	strh	r1, [r4, #10]
    9732:	strh	r2, [r4, #8]
    9734:	strb	r3, [r4, #20]
    9736:	b.n	966c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    9738:	movw	r3, #21025	; 0x5221
    973c:	strh	r3, [r4, #10]
    973e:	strh	r3, [r4, #14]
    9740:	strh	r3, [r4, #18]
    9742:	b.n	966c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    9744:	.word	0x20006af8

00009748 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    9748:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    974c:	mov	r6, r0
    974e:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    9750:	ldrb.w	r4, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    9754:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    9756:	movs	r0, #0
    9758:	strb.w	r0, [sp, #73]	; 0x49
    975c:	strb.w	r0, [sp, #74]	; 0x4a
    9760:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    9764:	cbnz	r4, 9774 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    9766:	mov	r9, r3
    9768:	ldrb.w	r3, [r1, #49]	; 0x31
    976c:	tst.w	r3, #80	; 0x50
    9770:	mov	r5, r1
    9772:	bne.n	977c <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    9774:	movs	r0, #0
}
    9776:	add	sp, #84	; 0x54
    9778:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    977c:	ldrb	r3, [r2, #0]
    977e:	cmp	r3, #47	; 0x2f
    9780:	mov	r4, r2
    9782:	beq.n	97ea <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    9784:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    9788:	mov	r1, r4
    978a:	add	r3, sp, #12
    978c:	add	r2, sp, #16
    978e:	mov	r0, r6
    9790:	bl	8fd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    9794:	cmp	r0, #0
    9796:	beq.n	9774 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    9798:	ldr	r3, [sp, #12]
    979a:	ldrb	r3, [r3, #0]
    979c:	cmp	r3, #0
    979e:	beq.n	9814 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    97a0:	ldrb.w	r3, [sp, #16]
    97a4:	ldr	r2, [sp, #20]
    97a6:	str.w	r8, [sp]
    97aa:	mov	r1, r5
    97ac:	mov	r0, r6
    97ae:	bl	936c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    97b2:	cmp	r0, #0
    97b4:	beq.n	9774 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    97b6:	mov	r4, r6
    97b8:	add	r7, sp, #24
    97ba:	add.w	lr, r6, #48	; 0x30
    97be:	ldr	r0, [r4, #0]
    97c0:	ldr	r1, [r4, #4]
    97c2:	ldr	r2, [r4, #8]
    97c4:	ldr	r3, [r4, #12]
    97c6:	mov	r5, r7
    97c8:	stmia	r5!, {r0, r1, r2, r3}
    97ca:	adds	r4, #16
    97cc:	cmp	r4, lr
    97ce:	mov	r7, r5
    97d0:	bne.n	97be <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    97d2:	ldr	r0, [r4, #0]
    97d4:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    97d6:	mov	r0, r6
    97d8:	bl	a0d8 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    97dc:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    97de:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    97e2:	strb.w	r8, [r6, #51]	; 0x33
    97e6:	ldr	r4, [sp, #12]
    97e8:	b.n	9788 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    97ea:	adds	r4, #1
    97ec:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    97ee:	ldrb	r1, [r4, #0]
    97f0:	cmp	r1, #47	; 0x2f
    97f2:	beq.n	97ea <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    97f4:	cbz	r1, 982c <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    97f6:	movs	r2, #56	; 0x38
    97f8:	add	r0, sp, #24
    97fa:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    97fc:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    97fe:	bl	10dec <memset>
  m_attributes = FILE_ATTR_ROOT;
    9802:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9804:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    9806:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    9808:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    980a:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    980e:	strb.w	r3, [sp, #75]	; 0x4b
    9812:	b.n	9784 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    9814:	ldrb.w	r3, [sp, #16]
    9818:	ldr	r2, [sp, #20]
    981a:	str.w	r9, [sp]
    981e:	mov	r1, r5
    9820:	mov	r0, r6
    9822:	bl	936c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
}
    9826:	add	sp, #84	; 0x54
    9828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    982c:	movs	r2, #56	; 0x38
    982e:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    9830:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    9832:	bl	10dec <memset>
  m_attributes = FILE_ATTR_ROOT;
    9836:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9838:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    983a:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    983c:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9840:	strb.w	r0, [r6, #51]	; 0x33
    9844:	b.n	9776 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    9846:	nop

00009848 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    9848:	cbz	r1, 9852 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    984a:	add.w	r1, r1, #1096	; 0x448
    984e:	b.w	9748 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    9852:	mov	r0, r1
    9854:	bx	lr
    9856:	nop

00009858 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    9858:	ldrb.w	r3, [r0, #49]	; 0x31
    985c:	cbnz	r3, 9874 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    985e:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    9860:	ldrb.w	r4, [r1, #49]	; 0x31
    9864:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    9868:	sub	sp, #12
    986a:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    986c:	bne.n	9878 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    986e:	mov	r0, r4
}
    9870:	add	sp, #12
    9872:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    9874:	movs	r0, #0
}
    9876:	bx	lr
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    9878:	ldrd	r4, r5, [r5]
    987c:	movs	r5, #0
    987e:	and.w	r4, r4, #31
    9882:	orrs	r4, r5
    9884:	beq.n	988c <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    9886:	mov	r0, r3
}
    9888:	add	sp, #12
    988a:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    988c:	str	r2, [sp, #0]
    988e:	mov	r2, r3
    9890:	bl	936c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    9894:	add	sp, #12
    9896:	pop	{r4, r5, pc}

00009898 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//------------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9898:	push	{r3, r4, r5, lr}
    989a:	mov	r4, r1
    989c:	ldr.w	r1, [r0, #1060]	; 0x424
    98a0:	mov	r5, r2
    98a2:	add.w	r1, r1, r4, lsr #7
    98a6:	add.w	r0, r0, #528	; 0x210
    98aa:	movs	r2, #0
    98ac:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    98b0:	cbz	r0, 98c4 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    98b2:	lsls	r4, r4, #2
    98b4:	ubfx	r4, r4, #0, #9
    98b8:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    98ba:	adds	r2, r3, #1
    98bc:	beq.n	98c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    98be:	str	r3, [r5, #0]
  return 1;
    98c0:	movs	r0, #1
    98c2:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    98c4:	movs	r0, #255	; 0xff
    98c6:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    98c8:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    98ca:	pop	{r3, r4, r5, pc}

000098cc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    98cc:	push	{r3, r4, r5, lr}
    98ce:	mov	r4, r1
    98d0:	ldr.w	r1, [r0, #1060]	; 0x424
    98d4:	mov	r5, r2
    98d6:	add.w	r1, r1, r4, lsr #7
    98da:	add.w	r0, r0, #528	; 0x210
    98de:	movs	r2, #1
    98e0:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    98e4:	mov	r3, r0
    98e6:	cbz	r0, 98f4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    98e8:	lsls	r4, r4, #2
    98ea:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    98ee:	movs	r0, #1
    98f0:	str	r5, [r3, r4]
    98f2:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    98f4:	pop	{r3, r4, r5, pc}
    98f6:	nop

000098f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    98f8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98fc:	mov	r8, r0
    98fe:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    9900:	mov	fp, r1
    9902:	cmp	r1, #0
    9904:	beq.n	9990 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    9906:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    9908:	ldr.w	r3, [r8, #1072]	; 0x430
    990c:	cmp	r7, r3
    990e:	bcs.n	9988 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    9910:	and.w	r5, r7, #7
    9914:	movs	r3, #1
    9916:	lsl.w	r5, r3, r5
    991a:	uxtb	r5, r5
    991c:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    9920:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    9922:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    9924:	ldr.w	r1, [r8, #1068]	; 0x42c
    9928:	movs	r2, #0
    992a:	add.w	r1, r1, r4, lsr #12
    992e:	mov	r0, r8
    9930:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    9934:	cbz	r0, 9968 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    9936:	ldrb.w	r1, [r0, sl]
    993a:	b.n	9952 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    993c:	cmp	r2, r9
    993e:	beq.n	9996 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    9940:	cmp	r7, r4
    9942:	beq.n	9966 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    9944:	ldr.w	r2, [r8, #1072]	; 0x430
    9948:	cmp	r4, r2
    994a:	bcs.n	997c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    994c:	ands.w	r5, r3, #255	; 0xff
    9950:	beq.n	996c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    9952:	adds	r4, #1
        if (!(mask & cache[i])) {
    9954:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    9956:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    995a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    995e:	beq.n	993c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    9960:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    9962:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    9964:	bne.n	9944 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    9966:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    9968:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    996c:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    9970:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    9974:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    9978:	bne.n	9936 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    997a:	b.n	9980 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    997c:	movs	r6, #0
    997e:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    9980:	mov.w	sl, #0
    9984:	movs	r5, #1
    9986:	b.n	9924 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    9988:	movs	r7, #0
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    998a:	mov	sl, r7
    998c:	movs	r5, #1
    998e:	b.n	9920 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    9990:	ldr.w	r7, [r0, #1056]	; 0x420
    9994:	b.n	9908 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    9996:	cmp.w	fp, #0
    999a:	bne.n	99a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    999c:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    99a0:	it	eq
    99a2:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    99a6:	adds	r0, r6, #2
    99a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000099ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    99ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    99b0:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    99b2:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    99b4:	ldr.w	r0, [r0, #1072]	; 0x430
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    99b8:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    99ba:	adds	r2, r1, r2
    99bc:	cmp	r2, r0
    99be:	bhi.n	9a32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    99c0:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    99c2:	ldr.w	r3, [r8, #1056]	; 0x420
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    99c6:	cmp.w	sl, #0
    99ca:	bne.n	9a38 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    99cc:	cmp	r1, r3
      m_bitmapStart = start;
    99ce:	it	cc
    99d0:	strcc.w	r1, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    99d4:	and.w	r4, r1, #7
    99d8:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    99da:	ldr.w	r3, [r8, #1068]	; 0x42c
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    99de:	lsl.w	r4, r2, r4
    99e2:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    99e4:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    99e8:	ubfx	r6, r1, #3, #9
    99ec:	movs	r2, #1
    99ee:	mov	r1, r9
    99f0:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    99f2:	add	r9, r2
    99f4:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    99f8:	cbz	r0, 9a32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    99fa:	adds	r7, r0, r6
    99fc:	add.w	r0, r0, #512	; 0x200
    9a00:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    9a04:	tst	r2, r4
    9a06:	ite	ne
    9a08:	movne	r6, #1
    9a0a:	moveq	r6, #0
    9a0c:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    9a0e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    9a12:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    9a16:	beq.n	9a32 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    9a18:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    9a1a:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    9a1e:	beq.n	9a4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    9a20:	ands.w	r4, r4, #255	; 0xff
    9a24:	bne.n	9a04 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    9a26:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    9a28:	mov	r6, r4
    9a2a:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    9a2e:	bne.n	9a00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    9a30:	b.n	99ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    9a32:	movs	r0, #0
    9a34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    9a38:	cmp	r1, r3
    9a3a:	bhi.n	99d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    9a3c:	cmp	r2, r3
    9a3e:	bls.n	99d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    9a40:	cmp	r2, r0
    9a42:	it	cs
    9a44:	movcs	r2, #0
    9a46:	str.w	r2, [r8, #1056]	; 0x420
    9a4a:	b.n	99d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    9a4c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    9a4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a52:	nop

00009a54 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    9a54:	push	{r4, r5, r6, lr}
    9a56:	sub	sp, #8
    9a58:	add	r6, sp, #8
    9a5a:	mov	r5, r0
    9a5c:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    9a60:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9a62:	ldr.w	r3, [r5, #1072]	; 0x430
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    9a66:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9a68:	adds	r3, #1
    9a6a:	cmp	r1, r3
    9a6c:	bls.n	9a74 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    9a6e:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    9a70:	add	sp, #8
    9a72:	pop	{r4, r5, r6, pc}
    9a74:	mov	r2, r6
    9a76:	mov	r0, r5
    9a78:	bl	9898 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    9a7c:	sxtb	r0, r0
    if (status < 0) return 0;
    9a7e:	cmp	r0, #0
    9a80:	blt.n	9a6e <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    9a82:	add.w	r4, r4, #1
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    9a86:	bne.n	9a62 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    9a88:	mov	r0, r4
  } while (status);
  return n;
}
    9a8a:	add	sp, #8
    9a8c:	pop	{r4, r5, r6, pc}
    9a8e:	nop

00009a90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    9a90:	push	{r3, r4, r5, r6, r7, lr}
    9a92:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    9a94:	ldmia.w	r6, {r3, r5}
    9a98:	ldr.w	r1, [r0, #1080]	; 0x438
    9a9c:	ldr.w	r4, [r0, #1068]	; 0x42c
    9aa0:	ldrb.w	r7, [r0, #1093]	; 0x445
    9aa4:	ands	r1, r5
    9aa6:	subs	r3, #2
    9aa8:	add.w	r1, r4, r1, lsr #9
    9aac:	lsls	r3, r7
    9aae:	add	r1, r3
    9ab0:	add.w	r0, r0, #528	; 0x210
    9ab4:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    9ab8:	cbz	r0, 9ac2 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    9aba:	ldr	r3, [r6, #4]
    9abc:	ubfx	r3, r3, #0, #9
    9ac0:	add	r0, r3
}
    9ac2:	pop	{r3, r4, r5, r6, r7, pc}

00009ac4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9ac4:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9ac6:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9ac8:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    9aca:	adds	r3, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9acc:	ldr.w	r1, [r0, #1080]	; 0x438
  pos->position += offset;
    9ad0:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    9ad2:	ldrb.w	r3, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9ad6:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    9ad8:	adds	r3, #9
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9ada:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    9adc:	uxtb	r3, r3
    9ade:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9ae2:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    9ae4:	cbz	r4, 9af6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    9ae6:	ldrb	r3, [r5, #8]
    9ae8:	cbz	r3, 9afa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    9aea:	ldr	r3, [r5, #0]
    9aec:	adds	r3, #1
    9aee:	str	r3, [r5, #0]
    9af0:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    9af2:	cmp	r4, #0
    9af4:	bne.n	9ae6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    9af6:	movs	r0, #1
    9af8:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9afa:	ldr.w	r3, [r6, #1072]	; 0x430
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9afe:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9b00:	adds	r3, #1
    9b02:	cmp	r1, r3
    9b04:	bls.n	9b0c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9b06:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    9b0a:	pop	{r4, r5, r6, pc}
    9b0c:	mov	r2, r5
    9b0e:	mov	r0, r6
    9b10:	bl	9898 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9b14:	sxtb	r0, r0
      if (status != 1) {
    9b16:	cmp	r0, #1
    9b18:	beq.n	9af0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    9b1a:	pop	{r4, r5, r6, pc}

00009b1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9b1c:	ldr.w	r3, [r0, #1072]	; 0x430
    9b20:	adds	r3, #1
    9b22:	cmp	r3, r1
    9b24:	bcs.n	9b2a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    9b26:	movs	r0, #255	; 0xff
    9b28:	bx	lr
    9b2a:	b.w	9898 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    9b2e:	nop

00009b30 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9b30:	cmp	r1, #1
    9b32:	bls.n	9b50 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    9b34:	ldr.w	r3, [r0, #1072]	; 0x430
    9b38:	adds	r3, #1
    9b3a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9b3c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9b3e:	bls.n	9b48 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    9b40:	movs	r0, #0
    9b42:	ldr.w	r4, [sp], #4
    9b46:	bx	lr
    9b48:	ldr.w	r4, [sp], #4
    9b4c:	b.w	98cc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    9b50:	movs	r0, #0
    9b52:	bx	lr

00009b54 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    9b54:	push	{r4, r5, r6, r7, lr}
    9b56:	mov	r4, r1
    9b58:	sub	sp, #12
    9b5a:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    9b5c:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9b5e:	ldr.w	r3, [r5, #1072]	; 0x430
    9b62:	adds	r3, #1
    9b64:	cmp	r4, r3
    9b66:	bls.n	9b6e <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    9b68:	movs	r0, #0
}
    9b6a:	add	sp, #12
    9b6c:	pop	{r4, r5, r6, r7, pc}
    9b6e:	add	r2, sp, #4
    9b70:	mov	r1, r4
    9b72:	mov	r0, r5
    9b74:	bl	9898 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    9b78:	sxtb	r7, r0
    if (status < 0) {
    9b7a:	cmp	r7, #0
    9b7c:	blt.n	9b68 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9b7e:	cmp	r4, #1
    9b80:	bls.n	9b68 <ExFatPartition::freeChain(unsigned long)+0x14>
    9b82:	ldr.w	r3, [r5, #1072]	; 0x430
    9b86:	adds	r3, #1
    9b88:	cmp	r4, r3
    9b8a:	bhi.n	9b68 <ExFatPartition::freeChain(unsigned long)+0x14>
    9b8c:	movs	r2, #0
    9b8e:	mov	r1, r4
    9b90:	mov	r0, r5
    9b92:	bl	98cc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    9b96:	cmp	r0, #0
    9b98:	beq.n	9b68 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    9b9a:	ldr	r3, [sp, #4]
    9b9c:	adds	r4, #1
    9b9e:	cmp	r4, r3
    9ba0:	bne.n	9bba <ExFatPartition::freeChain(unsigned long)+0x66>
    9ba2:	cmp	r7, #0
    9ba4:	bne.n	9b5e <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9ba6:	mov	r3, r7
    9ba8:	subs	r2, r4, r6
    9baa:	mov	r1, r6
    9bac:	mov	r0, r5
    9bae:	bl	99ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9bb2:	cmp	r0, #0
    9bb4:	beq.n	9b68 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    9bb6:	add	sp, #12
    9bb8:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9bba:	subs	r2, r4, r6
    9bbc:	mov	r1, r6
    9bbe:	movs	r3, #0
    9bc0:	mov	r0, r5
    9bc2:	bl	99ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9bc6:	cmp	r0, #0
    9bc8:	beq.n	9b68 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9bca:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    9bcc:	cmp	r7, #0
    9bce:	beq.n	9b6a <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9bd0:	mov	r6, r4
    9bd2:	b.n	9b5e <ExFatPartition::freeChain(unsigned long)+0xa>

00009bd4 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    9bd4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    9bd8:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    9bda:	ldr.w	r6, [r0, #1068]	; 0x42c

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    9bde:	mov	r8, r0
    9be0:	add.w	r7, r0, #528	; 0x210
  uint32_t nc = 0;
    9be4:	mov	r5, r4
    9be6:	mov	r1, r6
    9be8:	movs	r2, #0
    9bea:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    9bec:	adds	r6, #1
    9bee:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    9bf2:	cbz	r0, 9c42 <ExFatPartition::freeClusterCount()+0x6e>
    9bf4:	add.w	lr, r0, #4294967295
    9bf8:	ldr.w	ip, [r8, #1072]	; 0x430
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    9bfc:	ldrb.w	r0, [lr, #1]!
    9c00:	cmp	r0, #255	; 0xff
    9c02:	add.w	r9, r5, #4096	; 0x1000
    9c06:	beq.n	9c30 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    9c08:	cbz	r0, 9c1e <ExFatPartition::freeClusterCount()+0x4a>
    9c0a:	movs	r2, #8
    9c0c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    9c0e:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9c10:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    9c14:	it	ne
    9c16:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9c18:	subs	r2, #1
    9c1a:	uxtb	r3, r1
    9c1c:	bne.n	9c0e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9c1e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9c20:	cmp	ip, r5
    9c22:	bls.n	9c3a <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    9c24:	cmp	r5, r9
    9c26:	beq.n	9be6 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    9c28:	ldrb.w	r0, [lr, #1]!
    9c2c:	cmp	r0, #255	; 0xff
    9c2e:	bne.n	9c08 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9c30:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9c32:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    9c34:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    9c38:	bhi.n	9c24 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    9c3a:	rsb	r0, r4, ip
    9c3e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    9c42:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9c46:	nop

00009c48 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9c48:	push	{r3, r4, r5, r6, r7, lr}
    9c4a:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9c4c:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    9c4e:	mov.w	r6, #4294967295
    9c52:	add.w	r7, r0, #528	; 0x210
  m_blockDev = dev;
    9c56:	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    9c5a:	str	r1, [r0, #4]
    9c5c:	str.w	r1, [r0, #532]	; 0x214
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9c60:	mov	r5, r2
    9c62:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9c64:	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9c68:	strb	r3, [r4, #0]
    9c6a:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    9c6e:	str	r6, [r4, #12]
    9c70:	str.w	r6, [r4, #540]	; 0x21c
    9c74:	mov	r2, r3
    9c76:	mov	r1, r3
    9c78:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    9c7c:	cmp	r5, #4
    9c7e:	bhi.n	9c9a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    9c80:	mov	r6, r0
    9c82:	cbz	r0, 9c9a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    9c84:	cbnz	r5, 9c9e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    9c86:	movs	r2, #5
    9c88:	ldr	r1, [pc, #152]	; (9d24 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    9c8a:	adds	r0, r6, #3
    9c8c:	bl	1151c <strncmp>
    9c90:	cbnz	r0, 9c9a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    9c92:	ldrb.w	r3, [r6, #108]	; 0x6c
    9c96:	cmp	r3, #9
    9c98:	beq.n	9cce <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    9c9a:	movs	r0, #0
    9c9c:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    9c9e:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    9ca0:	add.w	r3, r0, r3, lsl #4
    9ca4:	ldrb.w	r2, [r3, #446]	; 0x1be
    9ca8:	ands.w	r2, r2, #127	; 0x7f
    9cac:	bne.n	9c9a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    9cae:	ldrb.w	r3, [r3, #450]	; 0x1c2
    9cb2:	cmp	r3, #0
    9cb4:	beq.n	9c9a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    9cb6:	add.w	r5, r0, r5, lsl #4
    9cba:	mov	r0, r7
    9cbc:	ldr.w	r5, [r5, #438]	; 0x1b6
    9cc0:	mov	r1, r5
    9cc2:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    9cc6:	mov	r6, r0
    9cc8:	cmp	r0, #0
    9cca:	bne.n	9c86 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    9ccc:	b.n	9c9a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    9cce:	ldr	r3, [r6, #80]	; 0x50
    9cd0:	add	r3, r5
    9cd2:	str.w	r3, [r4, #1060]	; 0x424
    9cd6:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    9cd8:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    9cdc:	ldr	r3, [r6, #88]	; 0x58
    9cde:	add	r5, r3
    9ce0:	str.w	r5, [r4, #1068]	; 0x42c
    9ce4:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    9ce6:	str.w	r3, [r4, #1072]	; 0x430
    9cea:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    9cec:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    9cf0:	ldrb.w	r3, [r6, #109]	; 0x6d
    9cf4:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9cf8:	movs	r5, #1
    9cfa:	adds	r3, #9
    9cfc:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    9d00:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    9d02:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    9d06:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9d08:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    9d0c:	str.w	r2, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    9d10:	mov	r0, r4
    9d12:	mov	r2, r5
    9d14:	bl	98f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    9d18:	movs	r3, #64	; 0x40
    9d1a:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    9d1e:	mov	r0, r5

 fail:
  return false;
}
    9d20:	pop	{r3, r4, r5, r6, r7, pc}
    9d22:	nop
    9d24:	.word	0x00014f20

00009d28 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    9d28:	push	{r4, lr}
    9d2a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    9d2c:	ldr.w	r1, [r0, #1076]	; 0x434
    9d30:	bl	9a54 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    9d34:	ldrb.w	r3, [r4, #1093]	; 0x445
    9d38:	adds	r3, #9
    9d3a:	uxtb	r3, r3
}
    9d3c:	lsls	r0, r3
    9d3e:	pop	{r4, pc}

00009d40 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9d40:	cbz	r3, 9d94 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return true;
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    9d42:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    9d44:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9d46:	cmp	r4, #126	; 0x7e
    9d48:	bhi.n	9d88 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    9d4a:	add	r3, r2
    9d4c:	adds	r5, r1, r3
    9d4e:	add	r2, r1
    9d50:	adds	r0, #2
    9d52:	ldrb.w	r3, [r2], #1
    9d56:	uxtb	r4, r4
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    9d58:	sub.w	r1, r3, #97	; 0x61
    9d5c:	cmp	r1, #25
    9d5e:	sub.w	r1, r4, #97	; 0x61
    9d62:	ite	ls
    9d64:	movls	r6, #32
    9d66:	movhi	r6, #0
    9d68:	cmp	r1, #25
    9d6a:	ite	ls
    9d6c:	movls	r1, #32
    9d6e:	movhi	r1, #0
    9d70:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9d72:	subs	r4, r4, r1
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    9d74:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9d76:	uxtb	r4, r4
    9d78:	cmp	r4, r3
    9d7a:	bne.n	9d88 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9d7c:	cmp	r2, r5
    9d7e:	beq.n	9d8e <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    9d80:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9d84:	cmp	r4, #126	; 0x7e
    9d86:	bls.n	9d52 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    9d88:	movs	r0, #0
    }
  }
  return true;
}
    9d8a:	pop	{r4, r5, r6}
    9d8c:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9d8e:	movs	r0, #1
}
    9d90:	pop	{r4, r5, r6}
    9d92:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9d94:	movs	r0, #1
}
    9d96:	bx	lr

00009d98 <exFatHashName(char const*, unsigned int, unsigned short)>:
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9d98:	cbz	r1, 9dce <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
    hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    9d9a:	push	{r4}
    9d9c:	add	r1, r0
    9d9e:	lsls	r3, r2, #15
    9da0:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    9da4:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    9da8:	sub.w	r4, r2, #97	; 0x61
    9dac:	cmp	r4, #25
      c -= 'a' - 'A';
    9dae:	itt	ls
    9db0:	subls	r2, #32
    9db2:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    9db4:	uxtah	r2, r2, r3
    9db8:	uxth	r2, r2
    9dba:	lsls	r3, r2, #15
    9dbc:	orr.w	r2, r3, r2, lsr #1
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9dc0:	cmp	r1, r0
    9dc2:	uxth	r2, r2
    9dc4:	bne.n	9d9e <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    9dc6:	mov	r0, r2
    9dc8:	ldr.w	r4, [sp], #4
    9dcc:	bx	lr
    9dce:	mov	r0, r2
    9dd0:	bx	lr
    9dd2:	nop

00009dd4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9dd4:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    9dd6:	push	{r3, r4, r5, r6, r7, lr}
    9dd8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9dda:	ldr	r0, [r0, #32]
    9ddc:	cbz	r1, 9de0 <ExFatFile::addCluster()+0xc>
    9dde:	adds	r1, #1
    9de0:	movs	r2, #1
    9de2:	bl	98f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    9de6:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9de8:	mov	r6, r0
  if (find < 2) {
    9dea:	bls.n	9e4c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    9dec:	movs	r3, #1
    9dee:	mov	r1, r0
    9df0:	mov	r2, r3
    9df2:	ldr	r0, [r4, #32]
    9df4:	bl	99ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9df8:	mov	r7, r0
    9dfa:	cbz	r0, 9e4c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9dfc:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9dfe:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9e02:	cbz	r0, 9e52 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    9e04:	lsls	r2, r3, #25
    9e06:	bpl.n	9e30 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    9e08:	adds	r2, r0, #1
    9e0a:	cmp	r6, r2
    9e0c:	beq.n	9e5a <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    9e0e:	bic.w	r2, r3, #64	; 0x40
    9e12:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9e16:	ldr	r3, [r4, #28]
    9e18:	b.n	9e26 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    9e1a:	ldr	r0, [r4, #32]
    9e1c:	bl	9b30 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9e20:	cbz	r0, 9e4c <ExFatFile::addCluster()+0x78>
    9e22:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9e24:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    9e26:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9e28:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    9e2a:	mov	r1, r3
    9e2c:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9e2e:	bcc.n	9e1a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    9e30:	mov.w	r2, #4294967295
    9e34:	mov	r1, r6
    9e36:	ldr	r0, [r4, #32]
    9e38:	bl	9b30 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9e3c:	cbz	r0, 9e4c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    9e3e:	ldr	r1, [r4, #24]
    9e40:	cbz	r1, 9e5a <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    9e42:	mov	r2, r6
    9e44:	ldr	r0, [r4, #32]
    9e46:	bl	9b30 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9e4a:	cbnz	r0, 9e5a <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    9e4c:	movs	r7, #0
}
    9e4e:	mov	r0, r7
    9e50:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9e52:	orr.w	r3, r3, #64	; 0x40
    9e56:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    9e5a:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    9e5c:	mov	r0, r7
    9e5e:	pop	{r3, r4, r5, r6, r7, pc}

00009e60 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9e60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    9e64:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9e68:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    9e6a:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9e6e:	sub	sp, #20
    9e70:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    9e74:	add	r6, sp, #4
    9e76:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    9e7a:	lsls	r2, r3, #30
    9e7c:	bpl.n	9eb6 <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    9e7e:	ldr	r1, [r5, #28]
    9e80:	cbnz	r1, 9ebe <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    9e82:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    9e84:	movs	r2, #1
    9e86:	mov	r1, r6
    9e88:	ldr	r0, [r5, #32]
    9e8a:	bl	9a90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9e8e:	adds	r4, #1
    9e90:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    9e92:	cbz	r0, 9eb6 <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    9e94:	ldrb	r3, [r0, #0]
    9e96:	and.w	r3, r3, #127	; 0x7f
    9e9a:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9e9c:	ldrb.w	r3, [r5, #48]	; 0x30
    9ea0:	cmp	r3, r4
    9ea2:	bcc.n	9f08 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    9ea4:	cmp	r4, #0
    9ea6:	beq.n	9e84 <ExFatFile::remove()+0x24>
    9ea8:	movs	r2, #32
    9eaa:	mov	r1, r6
    9eac:	ldr	r0, [r5, #32]
    9eae:	bl	9ac4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9eb2:	cmp	r0, #1
    9eb4:	beq.n	9e84 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    9eb6:	movs	r0, #0
}
    9eb8:	add	sp, #20
    9eba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9ebe:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    9ec0:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9ec2:	bpl.n	9efe <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    9ec4:	ldrd	r2, r3, [r5, #8]
    9ec8:	ldrb.w	r4, [r0, #1093]	; 0x445
    9ecc:	adds	r4, #9
    9ece:	uxtb	r4, r4
    9ed0:	adds.w	r8, r2, #4294967295
    9ed4:	adc.w	r9, r3, #4294967295
    9ed8:	rsb	r7, r4, #32
    9edc:	lsl.w	r7, r9, r7
    9ee0:	lsr.w	r2, r8, r4
    9ee4:	sub.w	r3, r4, #32
    9ee8:	lsr.w	r3, r9, r3
    9eec:	orrs	r2, r7
    9eee:	orrs	r2, r3
    9ef0:	adds	r2, #1
    9ef2:	movs	r3, #0
    9ef4:	bl	99ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9ef8:	cmp	r0, #0
    9efa:	bne.n	9e82 <ExFatFile::remove()+0x22>
    9efc:	b.n	9eb6 <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    9efe:	bl	9b54 <ExFatPartition::freeChain(unsigned long)>
    9f02:	cmp	r0, #0
    9f04:	bne.n	9e82 <ExFatFile::remove()+0x22>
    9f06:	b.n	9eb6 <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    9f08:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9f0a:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9f0c:	mov	r0, r4
    9f0e:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    9f12:	strb.w	r3, [r5, #51]	; 0x33
    9f16:	bl	8ed4 <FsCache::sync()>
    9f1a:	cmp	r0, #0
    9f1c:	beq.n	9eb6 <ExFatFile::remove()+0x56>
    9f1e:	add.w	r0, r4, #528	; 0x210
    9f22:	bl	8ed4 <FsCache::sync()>
    9f26:	cmp	r0, #0
    9f28:	beq.n	9eb6 <ExFatFile::remove()+0x56>
    9f2a:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9f2e:	ldr	r3, [r0, #0]
    9f30:	ldr	r3, [r3, #24]
    9f32:	blx	r3
    9f34:	b.n	9eb8 <ExFatFile::remove()+0x58>
    9f36:	nop

00009f38 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    9f38:	ldrb.w	r3, [r0, #49]	; 0x31
    9f3c:	lsls	r1, r3, #27
    9f3e:	bmi.n	9f44 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9f40:	movs	r0, #0
}
    9f42:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    9f44:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    9f46:	movs	r2, #0
    9f48:	sub	sp, #32
    9f4a:	movs	r3, #0
    9f4c:	mov	r4, r0
    9f4e:	bl	926c <ExFatFile::seekSet(unsigned long long)>
    9f52:	b.n	9f62 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    9f54:	cmp	r0, #32
    9f56:	bne.n	9f8c <ExFatFile::rmdir()+0x54>
    9f58:	ldrb.w	r3, [sp]
    9f5c:	lsls	r2, r3, #24
    9f5e:	bmi.n	9f8c <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    9f60:	cbz	r3, 9f70 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    9f62:	movs	r2, #32
    9f64:	mov	r1, sp
    9f66:	mov	r0, r4
    9f68:	bl	9094 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    9f6c:	cmp	r0, #0
    9f6e:	bne.n	9f54 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    9f70:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9f74:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    9f76:	orr.w	r3, r3, #2
    9f7a:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9f7e:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    9f82:	mov	r0, r4
    9f84:	bl	9e60 <ExFatFile::remove()>

 fail:
  return false;
}
    9f88:	add	sp, #32
    9f8a:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9f8c:	movs	r0, #0
}
    9f8e:	add	sp, #32
    9f90:	pop	{r4, pc}
    9f92:	nop

00009f94 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9f94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9f98:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9f9c:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9f9e:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9fa2:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9fa4:	add.w	r8, sp, #12
    9fa8:	stmia.w	r8, {r0, r1, r2}
    9fac:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    9fae:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    9fb0:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    9fb2:	movs	r2, #0
    9fb4:	mov	r1, r8
    9fb6:	ldr	r0, [r6, #32]
    9fb8:	bl	9a90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    9fbc:	uxtb.w	r9, r7
    if (!cache) {
    9fc0:	mov	r5, r0
    9fc2:	cbz	r0, 9fd2 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    9fc4:	ldrb	r3, [r0, #0]
    9fc6:	cmp	r3, #192	; 0xc0
    9fc8:	beq.n	a06e <ExFatFile::syncDir()+0xda>
    9fca:	cmp	r3, #193	; 0xc1
    9fcc:	beq.n	a06a <ExFatFile::syncDir()+0xd6>
    9fce:	cmp	r3, #133	; 0x85
    9fd0:	beq.n	9fe6 <ExFatFile::syncDir()+0x52>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9fd2:	ldrb.w	r3, [r6, #50]	; 0x32
    9fd6:	orr.w	r3, r3, #1
    9fda:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    9fde:	movs	r0, #0
}
    9fe0:	add	sp, #28
    9fe2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9fe6:	ldr	r3, [pc, #236]	; (a0d4 <ExFatFile::syncDir()+0x140>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9fe8:	ldrb.w	r2, [r6, #49]	; 0x31
    9fec:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    9fee:	ldrb.w	sl, [r0, #1]
    9ff2:	and.w	r2, r2, #55	; 0x37
    9ff6:	strh	r2, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9ff8:	cbz	r3, a01c <ExFatFile::syncDir()+0x88>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    9ffa:	add.w	r2, sp, #7
    9ffe:	add.w	r1, sp, #10
    a002:	add	r0, sp, #8
    a004:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    a006:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    a00a:	ldrh.w	r3, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    a00e:	ldrb.w	r1, [sp, #7]
    a012:	strb	r1, [r5, #21]
    a014:	strh	r2, [r5, #12]
    a016:	strh	r2, [r5, #16]
    a018:	strh	r3, [r5, #14]
    a01a:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    a01c:	ldr	r2, [r6, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    a01e:	ldrb.w	r3, [r2, #528]	; 0x210
    a022:	orr.w	r3, r3, #1
    a026:	strb.w	r3, [r2, #528]	; 0x210
    a02a:	ldrb	r0, [r5, #0]
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    a02c:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    a02e:	ldrb	r2, [r5, r1]
    a030:	lsls	r3, r4, #15
    a032:	orr.w	r4, r3, r4, lsr #1
    a036:	uxtah	r4, r2, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    a03a:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    a03c:	uxth	r4, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    a03e:	add.w	r1, r1, #1
    a042:	beq.n	a060 <ExFatFile::syncDir()+0xcc>
    a044:	cmp	r1, #31
    a046:	bls.n	a02e <ExFatFile::syncDir()+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    a048:	cmp	sl, r9
    a04a:	beq.n	a09a <ExFatFile::syncDir()+0x106>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    a04c:	movs	r2, #32
    a04e:	mov	r1, r8
    a050:	ldr	r0, [r6, #32]
    a052:	bl	9ac4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    a056:	cmp	r0, #1
    a058:	add.w	r7, r7, #1
    a05c:	beq.n	9fb2 <ExFatFile::syncDir()+0x1e>
    a05e:	b.n	9fd2 <ExFatFile::syncDir()+0x3e>
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    a060:	cmp	r0, #133	; 0x85
    a062:	ite	eq
    a064:	moveq	r1, #4
    a066:	movne	r1, #2
    a068:	b.n	a02e <ExFatFile::syncDir()+0x9a>
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    a06a:	mov	r0, r3
    a06c:	b.n	a02c <ExFatFile::syncDir()+0x98>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    a06e:	ldrb.w	r3, [r6, #51]	; 0x33
    a072:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    a076:	ldrb	r3, [r0, #1]
    a078:	ite	ne
    a07a:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    a07e:	biceq.w	r3, r3, #2
    a082:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    a084:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    a088:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    a08c:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    a090:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    a092:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    a094:	strd	r2, r3, [r0, #24]
    a098:	b.n	a01c <ExFatFile::syncDir()+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    a09a:	mov	r1, fp
    a09c:	movs	r2, #1
    a09e:	ldr	r0, [r6, #32]
    a0a0:	bl	9a90 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    a0a4:	cmp	r0, #0
    a0a6:	beq.n	9fd2 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    a0a8:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a0aa:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a0ac:	mov	r0, r5
    a0ae:	bl	8ed4 <FsCache::sync()>
    a0b2:	cmp	r0, #0
    a0b4:	beq.n	9fd2 <ExFatFile::syncDir()+0x3e>
    a0b6:	add.w	r0, r5, #528	; 0x210
    a0ba:	bl	8ed4 <FsCache::sync()>
    a0be:	cmp	r0, #0
    a0c0:	beq.n	9fd2 <ExFatFile::syncDir()+0x3e>
    a0c2:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a0c6:	ldr	r3, [r0, #0]
    a0c8:	ldr	r3, [r3, #24]
    a0ca:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a0cc:	cmp	r0, #0
    a0ce:	beq.n	9fd2 <ExFatFile::syncDir()+0x3e>
    a0d0:	b.n	9fe0 <ExFatFile::syncDir()+0x4c>
    a0d2:	nop
    a0d4:	.word	0x20006af8

0000a0d8 <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    a0d8:	ldrb.w	r2, [r0, #49]	; 0x31
    a0dc:	cbz	r2, a104 <ExFatFile::sync()+0x2c>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    a0de:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a0e0:	ldrb.w	r2, [r0, #51]	; 0x33
    a0e4:	lsls	r1, r2, #24
    a0e6:	bmi.n	a108 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    a0e8:	ldr	r5, [r0, #32]
    a0ea:	mov	r4, r0
    a0ec:	mov	r0, r5
    a0ee:	bl	8ed4 <FsCache::sync()>
    a0f2:	cbnz	r0, a118 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    a0f4:	ldrb.w	r3, [r4, #50]	; 0x32
    a0f8:	orr.w	r3, r3, #1
    a0fc:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    a100:	movs	r0, #0
}
    a102:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    a104:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    a106:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    a108:	and.w	r2, r2, #127	; 0x7f
    a10c:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    a110:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    a114:	b.w	9f94 <ExFatFile::syncDir()>
    a118:	add.w	r0, r5, #528	; 0x210
    a11c:	bl	8ed4 <FsCache::sync()>
    a120:	cmp	r0, #0
    a122:	beq.n	a0f4 <ExFatFile::sync()+0x1c>
    a124:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a128:	ldr	r3, [r0, #0]
    a12a:	ldr	r3, [r3, #24]
    a12c:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a12e:	cmp	r0, #0
    a130:	beq.n	a0f4 <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    a132:	movs	r0, #1
    a134:	pop	{r3, r4, r5, pc}
    a136:	nop

0000a138 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    a138:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a13c:	ldrb.w	r3, [r0, #49]	; 0x31
    a140:	lsls	r1, r3, #25

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    a142:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a144:	bmi.n	a208 <ExFatFile::addDirCluster()+0xd0>
    a146:	ldr	r0, [r0, #8]
    a148:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    a14a:	ldr.w	r3, [r3, #1084]	; 0x43c
    a14e:	add	r0, r3
    a150:	cmp.w	r0, #67108864	; 0x4000000
    a154:	bcc.n	a15c <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    a156:	movs	r0, #0
    a158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a15c:	mov	r0, r4
    a15e:	bl	9dd4 <ExFatFile::addCluster()>
    a162:	cmp	r0, #0
    a164:	beq.n	a156 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    a166:	ldr	r6, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    a168:	ldrb.w	r3, [r6, #528]	; 0x210
    a16c:	lsls	r2, r3, #31
    a16e:	bmi.n	a210 <ExFatFile::addDirCluster()+0xd8>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a170:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a174:	movs	r5, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    a176:	add.w	r8, r6, #544	; 0x220
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a17a:	str.w	r3, [r6, #540]	; 0x21c
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a17e:	strb.w	r5, [r6, #528]	; 0x210
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    a182:	mov	r1, r5
    a184:	mov.w	r2, #512	; 0x200
    a188:	mov	r0, r8
    a18a:	bl	10dec <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    a18e:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    a190:	ldr	r3, [r4, #24]
    a192:	ldrb.w	r0, [r2, #1093]	; 0x445
    a196:	ldr.w	r1, [r2, #1068]	; 0x42c
    a19a:	subs	r3, #2
    a19c:	lsls	r3, r0
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    a19e:	movs	r6, #1
    a1a0:	adds	r7, r3, r1
    a1a2:	lsls.w	r3, r6, r0
    a1a6:	beq.n	a1ca <ExFatFile::addDirCluster()+0x92>
    a1a8:	ldr.w	r0, [r2, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a1ac:	ldr	r3, [r0, #0]
    a1ae:	adds	r1, r7, r5
    a1b0:	ldr	r3, [r3, #28]
    a1b2:	mov	r2, r8
    a1b4:	blx	r3
    a1b6:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    a1b8:	cmp	r0, #0
    a1ba:	beq.n	a156 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    a1bc:	ldr	r2, [r4, #32]
    a1be:	ldrb.w	r3, [r2, #1093]	; 0x445
    a1c2:	lsl.w	r3, r6, r3
    a1c6:	cmp	r3, r5
    a1c8:	bhi.n	a1a8 <ExFatFile::addDirCluster()+0x70>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    a1ca:	ldrb.w	r3, [r4, #49]	; 0x31
    a1ce:	lsls	r3, r3, #25
    a1d0:	bmi.n	a1fe <ExFatFile::addDirCluster()+0xc6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a1d2:	ldrb.w	r3, [r4, #51]	; 0x33
    a1d6:	orn	r3, r3, #127	; 0x7f
    a1da:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    a1de:	ldr.w	r6, [r2, #1084]	; 0x43c
    a1e2:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    a1e6:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    a1ea:	adds	r2, r2, r6
    a1ec:	mov.w	r7, #0
    a1f0:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    a1f2:	adds	r0, r0, r6
    a1f4:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    a1f6:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    a1fa:	strd	r0, r1, [r4, #16]
  }
  return sync();
    a1fe:	mov	r0, r4

 fail:
  return false;
}
    a200:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    a204:	b.w	a0d8 <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a208:	ldr	r0, [r0, #32]
    a20a:	bl	9d28 <ExFatPartition::rootLength()>
    a20e:	b.n	a148 <ExFatFile::addDirCluster()+0x10>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    a210:	add.w	r0, r6, #528	; 0x210
    a214:	bl	8ed4 <FsCache::sync()>
    a218:	cmp	r0, #0
    a21a:	bne.n	a170 <ExFatFile::addDirCluster()+0x38>
    a21c:	b.n	a156 <ExFatFile::addDirCluster()+0x1e>
    a21e:	nop

0000a220 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    a220:	ldrb.w	r3, [r1, #49]	; 0x31
    a224:	tst.w	r3, #80	; 0x50
    a228:	bne.n	a22e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a22a:	movs	r0, #0
    a22c:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    a22e:	push	{r4, r5, lr}
    a230:	sub	sp, #12
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a232:	movw	r5, #2562	; 0xa02
    a236:	ldrb	r3, [r2, #0]
    a238:	ldr	r2, [r2, #4]
    a23a:	str	r5, [sp, #0]
    a23c:	mov	r4, r0
    a23e:	bl	936c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    a242:	cbnz	r0, a24a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a244:	movs	r0, #0
    a246:	add	sp, #12
    a248:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    a24a:	movs	r3, #16
    a24c:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a250:	mov	r0, r4
    a252:	bl	a138 <ExFatFile::addDirCluster()>
    a256:	cmp	r0, #0
    a258:	beq.n	a244 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a25a:	ldr	r3, [r4, #24]
    a25c:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    a25e:	movs	r2, #0
    a260:	movs	r3, #0
    a262:	mov	r0, r4
    a264:	bl	926c <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    a268:	movs	r3, #193	; 0xc1
  return sync();
    a26a:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    a26c:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    a270:	add	sp, #12
    a272:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    a276:	b.w	a0d8 <ExFatFile::sync()>
    a27a:	nop

0000a27c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a280:	mov	r6, r0
    a282:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a284:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a288:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a28a:	movs	r0, #0
    a28c:	strb.w	r0, [sp, #73]	; 0x49
    a290:	strb.w	r0, [sp, #74]	; 0x4a
    a294:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a298:	cbnz	r5, a2a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a29a:	mov	r9, r3
    a29c:	ldrb.w	r3, [r1, #49]	; 0x31
    a2a0:	tst.w	r3, #80	; 0x50
    a2a4:	mov	r4, r1
    a2a6:	bne.n	a2b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    a2a8:	movs	r0, #0
}
    a2aa:	add	sp, #84	; 0x54
    a2ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    a2b0:	ldrb	r3, [r2, #0]
    a2b2:	cmp	r3, #47	; 0x2f
    a2b4:	mov	r1, r2
    a2b6:	beq.n	a326 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a2b8:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a2bc:	add	r3, sp, #12
    a2be:	add	r2, sp, #16
    a2c0:	mov	r0, r6
    a2c2:	bl	8fd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    a2c6:	cmp	r0, #0
    a2c8:	beq.n	a2a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a2ca:	ldr	r3, [sp, #12]
    a2cc:	ldrb	r3, [r3, #0]
    a2ce:	cmp	r3, #0
    a2d0:	beq.n	a342 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    a2d2:	ldrb.w	r3, [sp, #16]
    a2d6:	ldr	r2, [sp, #20]
    a2d8:	str.w	r8, [sp]
    a2dc:	mov	r1, r4
    a2de:	mov	r0, r6
    a2e0:	bl	936c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a2e4:	cbnz	r0, a2fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    a2e6:	cmp.w	r9, #0
    a2ea:	beq.n	a2a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a2ec:	mov	r1, r4
    a2ee:	add	r2, sp, #16
    a2f0:	mov	r0, r6
    a2f2:	bl	a220 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    a2f6:	cmp	r0, #0
    a2f8:	beq.n	a2a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a2fa:	mov	r4, r6
    a2fc:	add	r7, sp, #24
    a2fe:	add.w	lr, r6, #48	; 0x30
    a302:	ldr	r0, [r4, #0]
    a304:	ldr	r1, [r4, #4]
    a306:	ldr	r2, [r4, #8]
    a308:	ldr	r3, [r4, #12]
    a30a:	mov	r5, r7
    a30c:	stmia	r5!, {r0, r1, r2, r3}
    a30e:	adds	r4, #16
    a310:	cmp	r4, lr
    a312:	mov	r7, r5
    a314:	bne.n	a302 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    a316:	ldr	r0, [r4, #0]
    a318:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    a31a:	mov	r0, r6
    a31c:	bl	8ee4 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    a320:	add	r4, sp, #24
    a322:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    a324:	b.n	a2bc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    a326:	adds	r1, #1
    a328:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    a32a:	ldrb	r3, [r1, #0]
    a32c:	cmp	r3, #47	; 0x2f
    a32e:	beq.n	a326 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    a330:	ldr	r1, [r4, #32]
    a332:	add	r0, sp, #24
    a334:	bl	8fa8 <ExFatFile::openRoot(ExFatVolume*)>
    a338:	cmp	r0, #0
    a33a:	beq.n	a2a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a33c:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    a33e:	add	r4, sp, #24
    a340:	b.n	a2b8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    a342:	add	r2, sp, #16
    a344:	mov	r1, r4
    a346:	mov	r0, r6
    a348:	bl	a220 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

 fail:
  return false;
}
    a34c:	add	sp, #84	; 0x54
    a34e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a352:	nop

0000a354 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a354:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a356:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a35a:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a35c:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a35e:	tst.w	r4, #24
    a362:	strb.w	r3, [sp, #49]	; 0x31
    a366:	strb.w	r3, [sp, #50]	; 0x32
    a36a:	strb.w	r3, [sp, #51]	; 0x33
    a36e:	strb.w	r3, [sp, #105]	; 0x69
    a372:	strb.w	r3, [sp, #106]	; 0x6a
    a376:	strb.w	r3, [sp, #107]	; 0x6b
    a37a:	beq.n	a384 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    a37c:	ldr	r3, [r1, #32]
    a37e:	ldr	r4, [r0, #32]
    a380:	cmp	r4, r3
    a382:	beq.n	a38a <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    a384:	movs	r0, #0
}
    a386:	add	sp, #116	; 0x74
    a388:	pop	{r4, r5, r6, r7, pc}
    a38a:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    a38c:	movw	r3, #2561	; 0xa01
    a390:	mov	r0, sp
    a392:	bl	9748 <ExFatFile::open(ExFatFile*, char const*, int)>
    a396:	cmp	r0, #0
    a398:	beq.n	a384 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    a39a:	add	r7, sp, #56	; 0x38
    a39c:	mov	r5, r4
    a39e:	add.w	lr, r4, #48	; 0x30
    a3a2:	ldr	r0, [r5, #0]
    a3a4:	ldr	r1, [r5, #4]
    a3a6:	ldr	r2, [r5, #8]
    a3a8:	ldr	r3, [r5, #12]
    a3aa:	mov	r6, r7
    a3ac:	stmia	r6!, {r0, r1, r2, r3}
    a3ae:	adds	r5, #16
    a3b0:	cmp	r5, lr
    a3b2:	mov	r7, r6
    a3b4:	bne.n	a3a2 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    a3b6:	ldr	r0, [r5, #0]
    a3b8:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    a3ba:	add	r3, sp, #36	; 0x24
    a3bc:	ldmia.w	r3, {r0, r1, r2}
    a3c0:	add.w	r3, r4, #36	; 0x24
    a3c4:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a3c8:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    a3cc:	ldrb.w	r2, [sp, #48]	; 0x30
    a3d0:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a3d4:	orn	r3, r3, #127	; 0x7f
    a3d8:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    a3dc:	mov	r0, r4
    a3de:	bl	a0d8 <ExFatFile::sync()>
    a3e2:	cmp	r0, #0
    a3e4:	beq.n	a384 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a3e6:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    a3e8:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    a3ea:	movs	r3, #8
  return oldFile.remove();
    a3ec:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a3ee:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    a3f0:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    a3f4:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    a3f8:	bl	9e60 <ExFatFile::remove()>
    a3fc:	b.n	a386 <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    a3fe:	nop

0000a400 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a400:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    a404:	lsls	r2, r3, #30
    a406:	bpl.n	a43a <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a408:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a40a:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a40c:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a40e:	cbz	r5, a434 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    a410:	and.w	r3, r3, #64	; 0x40
    a414:	mov	r4, r0
    a416:	and.w	r0, r3, #255	; 0xff
    a41a:	cbnz	r3, a43e <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    a41c:	ldr	r1, [r4, #24]
    a41e:	cmp	r1, #0
    a420:	bne.n	a4a6 <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    a422:	str	r5, [sp, #4]
      m_firstCluster = 0;
    a424:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    a426:	mov	r1, r5
    a428:	ldr	r0, [r4, #32]
    a42a:	bl	9b54 <ExFatPartition::freeChain(unsigned long)>
    a42e:	cbnz	r0, a47e <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    a430:	movs	r0, #0
    a432:	b.n	a436 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a434:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a436:	add	sp, #12
    a438:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    a43a:	movs	r0, #0
}
    a43c:	bx	lr
    a43e:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    a440:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    a442:	ldrb.w	r3, [r0, #1093]	; 0x445
    a446:	ldrd	r6, r7, [r4, #8]
    a44a:	adds	r3, #9
    a44c:	uxtb	r3, r3
    a44e:	adds.w	r6, r6, #4294967295
    a452:	rsb	lr, r3, #32
    a456:	adc.w	r7, r7, #4294967295
    a45a:	lsr.w	r2, r6, r3
    a45e:	lsl.w	lr, r7, lr
    a462:	subs	r3, #32
    a464:	orr.w	r2, r2, lr
    a468:	lsr.w	r3, r7, r3
    a46c:	orrs	r2, r3
    a46e:	adds	r2, #1
    if (m_curCluster) {
    a470:	cbz	r1, a4a0 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    a472:	subs	r5, #1
    a474:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a476:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    a478:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a47a:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a47c:	cbnz	r2, a4c2 <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a47e:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a482:	ldrb.w	r3, [r4, #51]	; 0x33
    a486:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a48a:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    a48e:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a492:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    a496:	mov	r0, r4
    a498:	bl	a0d8 <ExFatFile::sync()>

 fail:
  return false;
}
    a49c:	add	sp, #12
    a49e:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    a4a0:	str	r5, [sp, #4]
      m_firstCluster = 0;
    a4a2:	str	r1, [r4, #28]
    a4a4:	b.n	a47c <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    a4a6:	add	r2, sp, #8
    a4a8:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a4ac:	ldr	r0, [r4, #32]
    a4ae:	bl	9b1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    a4b2:	sxtb	r0, r0
      if (fg < 0) {
    a4b4:	cmp	r0, #0
    a4b6:	blt.n	a430 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    a4b8:	bne.n	a4d0 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    a4ba:	ldr	r5, [sp, #4]
    a4bc:	cmp	r5, #0
    a4be:	beq.n	a47e <ExFatFile::truncate()+0x7e>
    a4c0:	b.n	a426 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a4c2:	movs	r3, #0
    a4c4:	ldr	r1, [sp, #4]
    a4c6:	bl	99ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    a4ca:	cmp	r0, #0
    a4cc:	bne.n	a47e <ExFatFile::truncate()+0x7e>
    a4ce:	b.n	a430 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    a4d0:	mov.w	r2, #4294967295
    a4d4:	ldr	r1, [r4, #24]
    a4d6:	ldr	r0, [r4, #32]
    a4d8:	bl	9b30 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    a4dc:	cmp	r0, #0
    a4de:	bne.n	a4ba <ExFatFile::truncate()+0xba>
    a4e0:	b.n	a430 <ExFatFile::truncate()+0x30>
    a4e2:	nop

0000a4e4 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a4e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4e8:	ldrb.w	r3, [r0, #51]	; 0x33
    a4ec:	sub	sp, #12

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a4ee:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a4f0:	mov	r4, r0
    a4f2:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a4f4:	bmi.n	a50c <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a4f6:	ldrb.w	r3, [r4, #50]	; 0x32
    a4fa:	orr.w	r3, r3, #1
    a4fe:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    a502:	mov.w	r0, #4294967295
}
    a506:	add	sp, #12
    a508:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    a50c:	lsls	r2, r3, #28
    a50e:	mov	r9, r1
    a510:	bmi.w	a716 <ExFatFile::write(void const*, unsigned int)+0x232>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a514:	ldr	r3, [sp, #0]
    a516:	cmp	r3, #0
    a518:	beq.w	a73e <ExFatFile::write(void const*, unsigned int)+0x25a>
    a51c:	mov	r1, r4
    a51e:	ldrd	r2, r3, [r1], #24
    a522:	ldr.w	r8, [sp]
    a526:	str	r1, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a528:	mov.w	fp, #1
    a52c:	mov	sl, r9
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    a52e:	ldr	r0, [r4, #32]
    a530:	ldr.w	r5, [r0, #1080]	; 0x438
    a534:	ands	r5, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    a536:	ubfx	r9, r5, #0, #9
    if (clusterOffset == 0) {
    a53a:	cbnz	r5, a58e <ExFatFile::write(void const*, unsigned int)+0xaa>
      // start of new cluster
      if (m_curCluster != 0) {
    a53c:	ldr	r1, [r4, #24]
    a53e:	cmp	r1, #0
    a540:	beq.w	a6a0 <ExFatFile::write(void const*, unsigned int)+0x1bc>
        int fg;

        if (isContiguous()) {
    a544:	ldrb.w	r3, [r4, #51]	; 0x33
    a548:	lsls	r3, r3, #25
    a54a:	bpl.w	a6e8 <ExFatFile::write(void const*, unsigned int)+0x204>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a54e:	ldrd	r6, r7, [r4, #8]
    a552:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    a556:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a558:	adds	r2, #9
    a55a:	uxtb	r2, r2
    a55c:	adds.w	r6, r6, #4294967295
    a560:	adc.w	r7, r7, #4294967295
    a564:	rsb	lr, r2, #32
    a568:	lsrs	r6, r2
    a56a:	lsl.w	lr, r7, lr
    a56e:	subs	r2, #32
    a570:	orr.w	r6, r6, lr
    a574:	lsr.w	r2, r7, r2
    a578:	orrs	r6, r2
    a57a:	add	r3, r6
    a57c:	cmp	r1, r3
    a57e:	bcc.w	a6ce <ExFatFile::write(void const*, unsigned int)+0x1ea>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    a582:	mov	r0, r4
    a584:	bl	9dd4 <ExFatFile::addCluster()>
    a588:	cmp	r0, #0
    a58a:	beq.n	a4f6 <ExFatFile::write(void const*, unsigned int)+0x12>
    a58c:	ldr	r0, [r4, #32]
    a58e:	ldr	r6, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    a590:	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    a594:	ldrb.w	lr, [r0, #1093]	; 0x445
    a598:	lsrs	r5, r5, #9
    a59a:	subs	r6, #2
    a59c:	adds	r1, r5, r7
    a59e:	lsl.w	r6, r6, lr
    a5a2:	add	r1, r6

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    a5a4:	cmp.w	r9, #0
    a5a8:	bne.n	a692 <ExFatFile::write(void const*, unsigned int)+0x1ae>
    a5aa:	cmp.w	r8, #512	; 0x200
    a5ae:	bcs.n	a64c <ExFatFile::write(void const*, unsigned int)+0x168>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    a5b0:	ldrd	r2, r3, [r4, #16]
    a5b4:	ldrd	r6, r7, [r4]
    a5b8:	cmp.w	r8, #512	; 0x200
    a5bc:	mov	r5, r8
    a5be:	it	cs
    a5c0:	movcs.w	r5, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    a5c4:	cmp	r7, r3
    a5c6:	it	eq
    a5c8:	cmpeq	r6, r2
    a5ca:	ite	cc
    a5cc:	movcc	r2, #1
    a5ce:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    a5d0:	add.w	r0, r0, #528	; 0x210
    a5d4:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    a5d8:	cmp	r0, #0
    a5da:	beq.n	a4f6 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a5dc:	add	r0, r9
    a5de:	mov	r2, r5
    a5e0:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a5e2:	add	r9, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a5e4:	bl	db58 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a5e8:	cmp.w	r9, #512	; 0x200
    a5ec:	beq.w	a704 <ExFatFile::write(void const*, unsigned int)+0x220>
    a5f0:	mov	r0, r5
    a5f2:	movs	r1, #0
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a5f4:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a5f8:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a5fc:	adds	r2, r2, r0
    a5fe:	adcs	r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a600:	cmp	r7, r3
    a602:	it	eq
    a604:	cmpeq	r6, r2
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    a606:	add	sl, r5
    toWrite -= n;
    a608:	rsb	r8, r5, r8
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a60c:	strd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a610:	bcs.n	a622 <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a612:	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    a616:	strd	r2, r3, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a61a:	orn	r1, r1, #127	; 0x7f
    a61e:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a622:	cmp.w	r8, #0
    a626:	bne.n	a52e <ExFatFile::write(void const*, unsigned int)+0x4a>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    a628:	ldrd	r0, r1, [r4, #8]
    a62c:	cmp	r1, r3
    a62e:	it	eq
    a630:	cmpeq	r0, r2
    a632:	bcc.n	a726 <ExFatFile::write(void const*, unsigned int)+0x242>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    a634:	ldr	r3, [pc, #268]	; (a744 <ExFatFile::write(void const*, unsigned int)+0x260>)
    a636:	ldr	r3, [r3, #0]
    a638:	cmp	r3, #0
    a63a:	beq.n	a73a <ExFatFile::write(void const*, unsigned int)+0x256>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a63c:	ldrb.w	r3, [r4, #51]	; 0x33
    a640:	ldr	r0, [sp, #0]
    a642:	orn	r3, r3, #127	; 0x7f
    a646:	strb.w	r3, [r4, #51]	; 0x33
    a64a:	b.n	a506 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    a64c:	cmp.w	r8, #1024	; 0x400
    a650:	bcc.n	a6a8 <ExFatFile::write(void const*, unsigned int)+0x1c4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    a652:	lsl.w	r3, fp, lr
    a656:	subs	r5, r3, r5
    a658:	ldr.w	r2, [r0, #540]	; 0x21c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    a65c:	mov.w	r3, r8, lsr #9
    a660:	cmp	r3, r5
    a662:	it	cs
    a664:	movcs	r3, r5
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    a666:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    a668:	mov.w	r5, r3, lsl #9
    a66c:	bhi.n	a680 <ExFatFile::write(void const*, unsigned int)+0x19c>
    a66e:	adds	r6, r1, r3
    a670:	cmp	r2, r6
    a672:	bcs.n	a680 <ExFatFile::write(void const*, unsigned int)+0x19c>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a674:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a678:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a67c:	str.w	r2, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    a680:	ldr.w	r0, [r0, #532]	; 0x214
    a684:	ldr	r6, [r0, #0]
    a686:	mov	r2, sl
    a688:	ldr	r6, [r6, #32]
    a68a:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    a68c:	cmp	r0, #0
    a68e:	bne.n	a5f0 <ExFatFile::write(void const*, unsigned int)+0x10c>
    a690:	b.n	a4f6 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a692:	rsb	r5, r9, #512	; 0x200
    a696:	cmp	r5, r8
    a698:	it	cs
    a69a:	movcs	r5, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a69c:	movs	r2, #1
    a69e:	b.n	a5d0 <ExFatFile::write(void const*, unsigned int)+0xec>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    a6a0:	ldr	r6, [r4, #28]
    a6a2:	cbz	r6, a6d4 <ExFatFile::write(void const*, unsigned int)+0x1f0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    a6a4:	str	r6, [r4, #24]
    a6a6:	b.n	a590 <ExFatFile::write(void const*, unsigned int)+0xac>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    a6a8:	ldr.w	r3, [r0, #540]	; 0x21c
    a6ac:	cmp	r1, r3
    a6ae:	beq.n	a6f6 <ExFatFile::write(void const*, unsigned int)+0x212>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    a6b0:	ldr.w	r0, [r0, #532]	; 0x214
    a6b4:	ldr	r3, [r0, #0]
    a6b6:	mov	r2, sl
    a6b8:	ldr	r3, [r3, #28]
    a6ba:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    a6bc:	cmp	r0, #0
    a6be:	beq.w	a4f6 <ExFatFile::write(void const*, unsigned int)+0x12>
    a6c2:	mov.w	r0, #512	; 0x200
    a6c6:	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    a6c8:	mov.w	r5, #512	; 0x200
    a6cc:	b.n	a5f4 <ExFatFile::write(void const*, unsigned int)+0x110>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    a6ce:	adds	r6, r1, #1
    a6d0:	str	r6, [r4, #24]
    a6d2:	b.n	a590 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    a6d4:	mov	r0, r4
    a6d6:	bl	9dd4 <ExFatFile::addCluster()>
    a6da:	cmp	r0, #0
    a6dc:	beq.w	a4f6 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    a6e0:	ldr	r6, [r4, #24]
    a6e2:	str	r6, [r4, #28]
    a6e4:	ldr	r0, [r4, #32]
    a6e6:	b.n	a590 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    a6e8:	ldr	r2, [sp, #4]
    a6ea:	bl	9b1c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    a6ee:	cmp	r0, #0
    a6f0:	bne.w	a58c <ExFatFile::write(void const*, unsigned int)+0xa8>
    a6f4:	b.n	a582 <ExFatFile::write(void const*, unsigned int)+0x9e>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a6f6:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a6fa:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a6fe:	str.w	r3, [r0, #540]	; 0x21c
    a702:	b.n	a6b0 <ExFatFile::write(void const*, unsigned int)+0x1cc>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    a704:	ldr	r0, [r4, #32]
    a706:	add.w	r0, r0, #528	; 0x210
    a70a:	bl	8ed4 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    a70e:	cmp	r0, #0
    a710:	bne.w	a5f0 <ExFatFile::write(void const*, unsigned int)+0x10c>
    a714:	b.n	a4f6 <ExFatFile::write(void const*, unsigned int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    a716:	ldrd	r2, r3, [r0, #16]
    a71a:	bl	926c <ExFatFile::seekSet(unsigned long long)>
    a71e:	cmp	r0, #0
    a720:	beq.w	a4f6 <ExFatFile::write(void const*, unsigned int)+0x12>
    a724:	b.n	a514 <ExFatFile::write(void const*, unsigned int)+0x30>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a726:	ldrb.w	r1, [r4, #51]	; 0x33
    a72a:	ldr	r0, [sp, #0]
    a72c:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    a730:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a734:	strb.w	r1, [r4, #51]	; 0x33
    a738:	b.n	a506 <ExFatFile::write(void const*, unsigned int)+0x22>
    a73a:	ldr	r0, [sp, #0]
    a73c:	b.n	a506 <ExFatFile::write(void const*, unsigned int)+0x22>
    a73e:	ldrd	r2, r3, [r4]
    a742:	b.n	a628 <ExFatFile::write(void const*, unsigned int)+0x144>
    a744:	.word	0x20006af8

0000a748 <FatFile::openRoot(FatVolume*) [clone .part.38]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    a748:	push	{r3, r4, r5, lr}
    a74a:	mov	r4, r0
    a74c:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    a74e:	movs	r2, #36	; 0x24
    a750:	movs	r1, #0
    a752:	bl	10dec <memset>

  m_vol = vol;
    a756:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    a758:	ldrb	r3, [r5, #7]
    a75a:	cmp	r3, #16
    a75c:	beq.n	a770 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x28>
    a75e:	cmp	r3, #32
    a760:	bne.n	a76c <FatFile::openRoot(FatVolume*) [clone .part.38]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    a762:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a764:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    a766:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a768:	strb	r0, [r4, #2]
    a76a:	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    a76c:	movs	r0, #0
}
    a76e:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    a770:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a772:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    a774:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a776:	strb	r0, [r4, #2]
    a778:	pop	{r3, r4, r5, pc}
    a77a:	nop

0000a77c <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a77c:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a77e:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a780:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a784:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    a786:	mov	r1, r5
    a788:	ldr	r0, [r0, #8]
    a78a:	bl	b5c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    a78e:	cbz	r0, a7a6 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    a790:	cbz	r5, a7a8 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    a792:	ldr	r3, [r4, #16]
    a794:	adds	r5, #1
    a796:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    a798:	ldrb	r3, [r4, #2]
    a79a:	it	ne
    a79c:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a7a0:	orn	r3, r3, #127	; 0x7f
    a7a4:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    a7a6:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    a7a8:	ldrb	r3, [r4, #2]
    a7aa:	orr.w	r3, r3, #64	; 0x40
    a7ae:	b.n	a7a0 <FatFile::addCluster()+0x24>

0000a7b0 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    a7b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    a7b4:	ldrb	r3, [r0, #0]
    a7b6:	and.w	r3, r3, #32
    a7ba:	cbnz	r3, a7c8 <FatFile::addDirCluster()+0x18>
    a7bc:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    a7c0:	ldr	r1, [r0, #20]
    a7c2:	ldr	r3, [pc, #128]	; (a844 <FatFile::addDirCluster()+0x94>)
    a7c4:	cmp	r1, r3
    a7c6:	bls.n	a7d0 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    a7c8:	movs	r6, #0
}
    a7ca:	mov	r0, r6
    a7cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a7d0:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a7d2:	bl	a77c <FatFile::addCluster()>
    a7d6:	mov	r6, r0
    a7d8:	cmp	r0, #0
    a7da:	beq.n	a7c8 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    a7dc:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    a7de:	ldr	r3, [r5, #16]
    a7e0:	ldrb	r7, [r0, #6]
    a7e2:	ldr	r2, [r0, #20]
    a7e4:	subs	r3, #2
    a7e6:	lsls	r3, r7
    a7e8:	adds	r7, r3, r2
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a7ea:	adds	r0, #36	; 0x24
    a7ec:	mov	r1, r7
    a7ee:	movs	r2, #5
    a7f0:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    a7f4:	mov	r8, r0
    a7f6:	cmp	r0, #0
    a7f8:	beq.n	a7c8 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    a7fa:	mov.w	r2, #512	; 0x200
    a7fe:	mov	r1, r4
    a800:	bl	10dec <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    a804:	ldr	r3, [r5, #8]
    a806:	ldrb	r2, [r3, #4]
    a808:	cmp	r2, #1
    a80a:	bls.n	a82e <FatFile::addDirCluster()+0x7e>
    a80c:	movs	r4, #1
    a80e:	b.n	a818 <FatFile::addDirCluster()+0x68>
    a810:	ldr	r3, [r5, #8]
    a812:	ldrb	r2, [r3, #4]
    a814:	cmp	r2, r4
    a816:	bls.n	a82e <FatFile::addDirCluster()+0x7e>
    a818:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a81a:	ldr	r3, [r0, #0]
    a81c:	adds	r1, r4, r7
    a81e:	ldr	r3, [r3, #28]
    a820:	mov	r2, r8
    a822:	blx	r3
    a824:	adds	r4, #1
    a826:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    a828:	cmp	r0, #0
    a82a:	bne.n	a810 <FatFile::addDirCluster()+0x60>
    a82c:	b.n	a7c8 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    a82e:	ldrb	r3, [r3, #6]
    a830:	ldr	r1, [r5, #20]
    a832:	mov.w	r2, #512	; 0x200
    a836:	lsl.w	r3, r2, r3
    a83a:	uxtah	r3, r1, r3
    a83e:	str	r3, [r5, #20]
    a840:	b.n	a7ca <FatFile::addDirCluster()+0x1a>
    a842:	nop
    a844:	.word	0x001ffdff

0000a848 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    a848:	push	{r4, lr}
    a84a:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a84c:	ldr	r0, [r0, #8]
    a84e:	mov	r2, r1
    a850:	adds	r0, #36	; 0x24
    a852:	ldr	r1, [r4, #24]
    a854:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    a858:	cbz	r0, a864 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    a85a:	ldrh	r3, [r4, #4]
    a85c:	and.w	r3, r3, #15
    a860:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    a864:	pop	{r4, pc}
    a866:	nop

0000a868 <FatFile::sync() [clone .part.42]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    a868:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a86a:	ldrsb.w	r3, [r0, #2]
    a86e:	cmp	r3, #0
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    a870:	sub	sp, #8
    a872:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a874:	blt.n	a8aa <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    a876:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a878:	add.w	r0, r5, #36	; 0x24
    a87c:	bl	8ed4 <FsCache::sync()>
    a880:	cbnz	r0, a890 <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    a882:	ldrb	r3, [r4, #1]
    a884:	orr.w	r3, r3, #1
    a888:	strb	r3, [r4, #1]
  return false;
    a88a:	movs	r0, #0
}
    a88c:	add	sp, #8
    a88e:	pop	{r4, r5, r6, pc}
    a890:	add.w	r0, r5, #564	; 0x234
    a894:	bl	8ed4 <FsCache::sync()>
    a898:	cmp	r0, #0
    a89a:	beq.n	a882 <FatFile::sync() [clone .part.42]+0x1a>
    a89c:	ldr	r0, [r5, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a89e:	ldr	r3, [r0, #0]
    a8a0:	ldr	r3, [r3, #24]
    a8a2:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a8a4:	cmp	r0, #0
    a8a6:	beq.n	a882 <FatFile::sync() [clone .part.42]+0x1a>
    a8a8:	b.n	a88c <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a8aa:	movs	r1, #1
    a8ac:	bl	a848 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    a8b0:	mov	r5, r0
    a8b2:	cmp	r0, #0
    a8b4:	beq.n	a882 <FatFile::sync() [clone .part.42]+0x1a>
    a8b6:	ldrb	r3, [r0, #0]
    a8b8:	cmp	r3, #229	; 0xe5
    a8ba:	beq.n	a882 <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    a8bc:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    a8be:	ldr	r2, [pc, #56]	; (a8f8 <FatFile::sync() [clone .part.42]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    a8c0:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    a8c2:	itt	mi
    a8c4:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    a8c6:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    a8c8:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    a8ca:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a8cc:	strh	r3, [r0, #26]
    a8ce:	lsrs	r3, r3, #16
    a8d0:	strh	r3, [r0, #20]
    a8d2:	cbz	r6, a8ee <FatFile::sync() [clone .part.42]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    a8d4:	add.w	r2, sp, #3
    a8d8:	add.w	r1, sp, #6
    a8dc:	add	r0, sp, #4
    a8de:	blx	r6
      setLe16(dir->modifyDate, date);
    a8e0:	ldrh.w	r3, [sp, #4]
    a8e4:	ldrh.w	r2, [sp, #6]
    a8e8:	strh	r3, [r5, #24]
    a8ea:	strh	r3, [r5, #18]
    a8ec:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    a8ee:	ldrb	r3, [r4, #2]
    a8f0:	and.w	r3, r3, #127	; 0x7f
    a8f4:	strb	r3, [r4, #2]
    a8f6:	b.n	a876 <FatFile::sync() [clone .part.42]+0xe>
    a8f8:	.word	0x20006af8

0000a8fc <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    a8fc:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a8fe:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    a900:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a902:	cbnz	r3, a90e <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a904:	movs	r3, #0
    a906:	strb	r3, [r4, #0]
  m_flags = 0;
    a908:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    a90a:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    a90c:	pop	{r4, pc}
    a90e:	bl	a868 <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a912:	movs	r3, #0
    a914:	strb	r3, [r4, #0]
  m_flags = 0;
    a916:	strb	r3, [r4, #2]
  return rtn;
}
    a918:	pop	{r4, pc}
    a91a:	nop

0000a91c <FatFile::mkdir(FatFile*, fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    a91c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    a920:	ldrb	r4, [r1, #0]
    a922:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    a926:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    a928:	bne.n	a932 <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
}
    a92a:	movs	r0, #0
    a92c:	add	sp, #36	; 0x24
    a92e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    a932:	movw	r3, #2562	; 0xa02
    a936:	mov	r5, r0
    a938:	mov	r4, r1
    a93a:	bl	bde4 <FatFile::open(FatFile*, fname_t*, int)>
    a93e:	cmp	r0, #0
    a940:	beq.n	a92a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    a942:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    a944:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    a946:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    a948:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a94a:	mov	r0, r5
    a94c:	bl	a7b0 <FatFile::addDirCluster()>
    a950:	cmp	r0, #0
    a952:	beq.n	a92a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a954:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a956:	ldr	r2, [r5, #16]
    a958:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a95a:	cmp	r3, #0
    a95c:	bne.n	aa4a <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a95e:	movs	r1, #1
    a960:	mov	r0, r5
    a962:	bl	a848 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a966:	mov	r6, r0
    a968:	cmp	r0, #0
    a96a:	beq.n	a92a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    a96c:	movs	r3, #16
    a96e:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a970:	ldr	r2, [r0, #8]
    a972:	ldr	r1, [r6, #4]
    a974:	ldr	r3, [r6, #12]
    a976:	ldr	r0, [r0, #0]
    a978:	ldrh.w	r8, [r6, #20]
    a97c:	ldrh.w	r9, [r6, #26]
    a980:	mov	r7, sp
    a982:	stmia	r7!, {r0, r1, r2, r3}
    a984:	ldr	r1, [r6, #20]
    a986:	ldr	r2, [r6, #24]
    a988:	ldr	r3, [r6, #28]
    a98a:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    a98c:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a98e:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    a990:	movs	r3, #46	; 0x2e
    a992:	strb.w	r3, [r6, #-32]!
    a996:	add.w	r1, sp, #10
    a99a:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    a99c:	movs	r2, #32
    a99e:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    a9a2:	cmp	r3, r1
    a9a4:	bne.n	a99e <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    a9a6:	ldr	r0, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a9a8:	ldr	r3, [r5, #32]
    a9aa:	ldrb	r2, [r0, #6]
    a9ac:	ldr	r1, [r0, #20]
    a9ae:	subs	r3, #2
    a9b0:	lsls	r3, r2
    a9b2:	add	r1, r3
    a9b4:	adds	r0, #36	; 0x24
    a9b6:	movs	r2, #1
    a9b8:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    a9bc:	mov	lr, r0
    a9be:	cmp	r0, #0
    a9c0:	beq.n	a92a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    a9c2:	mov	r7, r6
    a9c4:	strh.w	r8, [sp, #20]
    a9c8:	strh.w	r9, [sp, #26]
    a9cc:	ldmia	r7!, {r0, r1, r2, r3}
    a9ce:	str.w	r0, [lr]
    a9d2:	str.w	r1, [lr, #4]
    a9d6:	str.w	r2, [lr, #8]
    a9da:	str.w	r3, [lr, #12]
    a9de:	ldmia	r7!, {r0, r1, r2, r3}
    a9e0:	str.w	r0, [lr, #16]
    a9e4:	str.w	r1, [lr, #20]
    a9e8:	str.w	r2, [lr, #24]
    a9ec:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    a9f0:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a9f2:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    a9f6:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a9f8:	lsrs	r3, r3, #16
    a9fa:	mov	r4, r6
    a9fc:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    aa00:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    aa04:	ldmia	r4!, {r0, r1, r2, r3}
    aa06:	add.w	r6, lr, #32
    aa0a:	str.w	r0, [lr, #32]
    aa0e:	str	r1, [r6, #4]
    aa10:	str	r2, [r6, #8]
    aa12:	str	r3, [r6, #12]
    aa14:	ldmia	r4!, {r0, r1, r2, r3}
    aa16:	str	r0, [r6, #16]
    aa18:	str	r1, [r6, #20]
    aa1a:	str	r2, [r6, #24]
    aa1c:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    aa1e:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    aa20:	add.w	r0, r4, #36	; 0x24
    aa24:	bl	8ed4 <FsCache::sync()>
    aa28:	cmp	r0, #0
    aa2a:	beq.w	a92a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    aa2e:	add.w	r0, r4, #564	; 0x234
    aa32:	bl	8ed4 <FsCache::sync()>
    aa36:	cmp	r0, #0
    aa38:	beq.w	a92a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    aa3c:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    aa3e:	ldr	r3, [r0, #0]
    aa40:	ldr	r3, [r3, #24]

 fail:
  return false;
}
    aa42:	add	sp, #36	; 0x24
    aa44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aa48:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    aa4a:	ldr	r3, [r5, #20]
    aa4c:	cbz	r3, aa5c <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    aa4e:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    aa50:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    aa52:	bic.w	r3, r3, #32
    aa56:	strb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    aa58:	str	r2, [r5, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    aa5a:	str	r2, [r5, #20]
    aa5c:	mov	r0, r5
    aa5e:	bl	a868 <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    aa62:	cmp	r0, #0
    aa64:	beq.w	a92a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    aa68:	b.n	a95e <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    aa6a:	nop

0000aa6c <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    aa6c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa70:	mov	r6, r0
    aa72:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    aa74:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    aa76:	str	r2, [sp, #4]
    aa78:	movs	r0, #0
    aa7a:	strb.w	r0, [sp, #36]	; 0x24
    aa7e:	strb.w	r0, [sp, #37]	; 0x25
    aa82:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    aa86:	cbnz	r5, aa94 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    aa88:	mov	r8, r3
    aa8a:	ldrb	r3, [r1, #0]
    aa8c:	tst.w	r3, #112	; 0x70
    aa90:	mov	r4, r1
    aa92:	bne.n	aa9c <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    aa94:	movs	r0, #0
}
    aa96:	add	sp, #72	; 0x48
    aa98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    aa9c:	ldrb	r3, [r2, #0]
    aa9e:	cmp	r3, #47	; 0x2f
    aaa0:	mov	r0, r2
    aaa2:	beq.n	aafa <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aaa4:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    aaa6:	add	r2, sp, #4
    aaa8:	add	r1, sp, #12
    aaaa:	bl	b9b8 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aaae:	add	r2, sp, #12
    aab0:	mov	r1, r4
    aab2:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    aab4:	cmp	r0, #0
    aab6:	beq.n	aa94 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    aab8:	ldr	r5, [sp, #4]
    aaba:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aabc:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    aabe:	cmp	r5, #0
    aac0:	beq.n	ab1e <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aac2:	bl	bde4 <FatFile::open(FatFile*, fname_t*, int)>
    aac6:	cbnz	r0, aadc <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    aac8:	cmp.w	r8, #0
    aacc:	beq.n	aa94 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    aace:	mov	r1, r4
    aad0:	add	r2, sp, #12
    aad2:	mov	r0, r6
    aad4:	bl	a91c <FatFile::mkdir(FatFile*, fname_t*)>
    aad8:	cmp	r0, #0
    aada:	beq.n	aa94 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    aadc:	mov	r5, r6
    aade:	ldmia	r5!, {r0, r1, r2, r3}
    aae0:	add	r4, sp, #36	; 0x24
    aae2:	stmia	r4!, {r0, r1, r2, r3}
    aae4:	ldmia	r5!, {r0, r1, r2, r3}
    aae6:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    aae8:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    aaea:	ldr	r2, [r5, #0]
    aaec:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    aaee:	cbnz	r3, ab16 <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    aaf0:	strb	r7, [r6, #0]
  m_flags = 0;
    aaf2:	strb	r7, [r6, #2]
    aaf4:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    aaf6:	add	r4, sp, #36	; 0x24
    aaf8:	b.n	aaa6 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    aafa:	adds	r0, #1
    aafc:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    aafe:	ldrb	r3, [r0, #0]
    ab00:	cmp	r3, #47	; 0x2f
    ab02:	beq.n	aafa <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    ab04:	ldr	r1, [r4, #8]
    ab06:	add	r0, sp, #36	; 0x24
    ab08:	bl	a748 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    ab0c:	cmp	r0, #0
    ab0e:	beq.n	aa94 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    ab10:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    ab12:	add	r4, sp, #36	; 0x24
    ab14:	b.n	aaa4 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    ab16:	mov	r0, r6
    ab18:	bl	a868 <FatFile::sync() [clone .part.42]>
    ab1c:	b.n	aaf0 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    ab1e:	add	r2, sp, #12
    ab20:	mov	r1, r4
    ab22:	mov	r0, r6
    ab24:	bl	a91c <FatFile::mkdir(FatFile*, fname_t*)>

 fail:
  return false;
}
    ab28:	add	sp, #72	; 0x48
    ab2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab2e:	nop

0000ab30 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    ab30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab34:	mov	r6, r0
    ab36:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    ab38:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    ab3a:	str	r2, [sp, #4]
    ab3c:	movs	r0, #0
    ab3e:	strb.w	r0, [sp, #36]	; 0x24
    ab42:	strb.w	r0, [sp, #37]	; 0x25
    ab46:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    ab4a:	cbnz	r5, ab58 <FatFile::open(FatFile*, char const*, int)+0x28>
    ab4c:	mov	r8, r3
    ab4e:	ldrb	r3, [r1, #0]
    ab50:	tst.w	r3, #112	; 0x70
    ab54:	mov	r4, r1
    ab56:	bne.n	ab60 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    ab58:	movs	r0, #0
}
    ab5a:	add	sp, #72	; 0x48
    ab5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    ab60:	ldrb	r3, [r2, #0]
    ab62:	cmp	r3, #47	; 0x2f
    ab64:	mov	r0, r2
    ab66:	beq.n	abb4 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab68:	movs	r7, #0
    ab6a:	b.n	ab74 <FatFile::open(FatFile*, char const*, int)+0x44>
    ab6c:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    ab6e:	strb	r7, [r6, #0]
  m_flags = 0;
    ab70:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    ab72:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ab74:	add	r2, sp, #4
    ab76:	add	r1, sp, #12
    ab78:	bl	b9b8 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab7c:	add	r2, sp, #12
    ab7e:	mov	r1, r4
    ab80:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ab82:	cmp	r0, #0
    ab84:	beq.n	ab58 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    ab86:	ldr	r5, [sp, #4]
    ab88:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab8a:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    ab8c:	cbz	r5, abd2 <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab8e:	bl	bde4 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ab92:	mov	r5, r6
    ab94:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab96:	cmp	r0, #0
    ab98:	beq.n	ab58 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ab9a:	ldmia	r5!, {r0, r1, r2, r3}
    ab9c:	stmia	r4!, {r0, r1, r2, r3}
    ab9e:	ldmia	r5!, {r0, r1, r2, r3}
    aba0:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    aba2:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    aba4:	ldr	r2, [r5, #0]
    aba6:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    aba8:	cmp	r3, #0
    abaa:	beq.n	ab6c <FatFile::open(FatFile*, char const*, int)+0x3c>
    abac:	mov	r0, r6
    abae:	bl	a868 <FatFile::sync() [clone .part.42]>
    abb2:	b.n	ab6c <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    abb4:	adds	r0, #1
    abb6:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    abb8:	ldrb	r3, [r0, #0]
    abba:	cmp	r3, #47	; 0x2f
    abbc:	beq.n	abb4 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    abbe:	cbz	r3, abe4 <FatFile::open(FatFile*, char const*, int)+0xb4>
    abc0:	ldr	r1, [r4, #8]
    abc2:	add	r0, sp, #36	; 0x24
    abc4:	bl	a748 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    abc8:	cmp	r0, #0
    abca:	beq.n	ab58 <FatFile::open(FatFile*, char const*, int)+0x28>
    abcc:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    abce:	add	r4, sp, #36	; 0x24
    abd0:	b.n	ab68 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    abd2:	mov	r3, r8
    abd4:	add	r2, sp, #12
    abd6:	mov	r1, r4
    abd8:	mov	r0, r6
    abda:	bl	bde4 <FatFile::open(FatFile*, fname_t*, int)>

 fail:
  return false;
}
    abde:	add	sp, #72	; 0x48
    abe0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abe4:	ldr	r1, [r4, #8]
    abe6:	mov	r0, r6
    abe8:	bl	a748 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    abec:	b.n	ab5a <FatFile::open(FatFile*, char const*, int)+0x2a>
    abee:	nop

0000abf0 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    abf0:	cbz	r1, abfa <FatFile::open(FatVolume*, char const*, int)+0xa>
    abf2:	addw	r1, r1, #1092	; 0x444
    abf6:	b.w	ab30 <FatFile::open(FatFile*, char const*, int)>
}
    abfa:	mov	r0, r1
    abfc:	bx	lr
    abfe:	nop

0000ac00 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    ac00:	ldrb	r3, [r0, #0]
    ac02:	cbz	r3, ac08 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    ac04:	movs	r0, #0
    ac06:	bx	lr
    ac08:	b.w	a748 <FatFile::openRoot(FatVolume*) [clone .part.38]>

0000ac0c <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    ac0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    ac10:	ldrb	r3, [r0, #2]
    ac12:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    ac14:	sub	sp, #12
    ac16:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    ac18:	bpl.w	ad40 <FatFile::read(void*, unsigned int)+0x134>
    ac1c:	mov	r7, r1
    ac1e:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    ac20:	lsls	r6, r1, #28
    ac22:	mov	r9, r2
    ac24:	bmi.w	ad52 <FatFile::read(void*, unsigned int)+0x146>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    ac28:	lsls	r4, r1, #26
    ac2a:	bpl.n	ac3e <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    ac2c:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    ac2e:	ldr	r3, [r0, #20]
    ac30:	ldrh	r2, [r2, #8]
    ac32:	rsb	r3, r3, r2, lsl #5
    ac36:	uxth	r3, r3
    ac38:	cmp	r9, r3
    ac3a:	it	cs
    ac3c:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ac3e:	cmp.w	r9, #0
    ac42:	beq.w	ad9e <FatFile::read(void*, unsigned int)+0x192>
    ac46:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ac48:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    ac4a:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ac4c:	mov	r6, r9
    ac4e:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ac52:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ac56:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    ac5a:	bpl.n	acde <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    ac5c:	ldr	r1, [r2, #32]
    ac5e:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    ac62:	cmp.w	fp, #0
    ac66:	bne.n	ad14 <FatFile::read(void*, unsigned int)+0x108>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    ac68:	cmp.w	r6, #512	; 0x200
    ac6c:	bcc.n	ad14 <FatFile::read(void*, unsigned int)+0x108>
    ac6e:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    ac70:	cmp	r1, r3
    ac72:	beq.n	ad14 <FatFile::read(void*, unsigned int)+0x108>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    ac74:	cmp.w	r6, #1024	; 0x400
    ac78:	bcc.n	ad64 <FatFile::read(void*, unsigned int)+0x158>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    ac7a:	ldrb	r0, [r5, #0]
    ac7c:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    ac7e:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    ac82:	bmi.n	ac90 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    ac84:	ldrb	r0, [r2, #4]
    ac86:	rsb	r0, r8, r0
    ac8a:	cmp	fp, r0
    ac8c:	it	cs
    ac8e:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    ac90:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    ac92:	mov.w	r4, fp, lsl #9
    ac96:	bhi.n	acb4 <FatFile::read(void*, unsigned int)+0xa8>
    ac98:	add.w	r0, r1, fp
    ac9c:	cmp	r3, r0
    ac9e:	bcs.n	acb4 <FatFile::read(void*, unsigned int)+0xa8>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    aca0:	add.w	r0, r2, #36	; 0x24
    aca4:	str	r1, [sp, #4]
    aca6:	str	r2, [sp, #0]
    aca8:	bl	8ed4 <FsCache::sync()>
    acac:	ldr	r2, [sp, #0]
    acae:	ldr	r1, [sp, #4]
    acb0:	cmp	r0, #0
    acb2:	beq.n	ad40 <FatFile::read(void*, unsigned int)+0x134>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    acb4:	ldr	r0, [r2, #40]	; 0x28
    acb6:	ldr	r2, [r0, #0]
    acb8:	mov	r3, fp
    acba:	ldr.w	fp, [r2, #16]
    acbe:	mov	r2, r7
    acc0:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    acc2:	cmp	r0, #0
    acc4:	beq.n	ad40 <FatFile::read(void*, unsigned int)+0x134>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    acc6:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    acc8:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    acca:	add	r3, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    accc:	add	r7, r4
    m_curPosition += n;
    acce:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    acd0:	beq.n	ad9e <FatFile::read(void*, unsigned int)+0x192>
    acd2:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    acd4:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    acd6:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    acd8:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    acdc:	bmi.n	ac5c <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    acde:	ldrb.w	r8, [r2, #5]
    ace2:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    ace6:	cmp.w	fp, #0
    acea:	bne.n	ad60 <FatFile::read(void*, unsigned int)+0x154>
    acec:	cmp.w	r8, #0
    acf0:	bne.n	ad60 <FatFile::read(void*, unsigned int)+0x154>
        // start of new cluster
        if (m_curPosition == 0) {
    acf2:	cmp	r3, #0
    acf4:	bne.n	ad78 <FatFile::read(void*, unsigned int)+0x16c>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    acf6:	lsls	r1, r1, #25
    acf8:	ite	mi
    acfa:	ldrmi	r4, [r2, #32]
    acfc:	ldrpl	r4, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    acfe:	str	r4, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    ad00:	ldrb	r1, [r2, #6]
    ad02:	ldr	r0, [r2, #20]
    ad04:	subs	r4, #2
    ad06:	lsls	r4, r1
    ad08:	add.w	r1, r8, r0
    ad0c:	add	r1, r4
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    ad0e:	cmp.w	fp, #0
    ad12:	beq.n	ac68 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    ad14:	add.w	r0, r2, #36	; 0x24
    ad18:	movs	r2, #0
    ad1a:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    ad1e:	cbz	r0, ad40 <FatFile::read(void*, unsigned int)+0x134>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    ad20:	rsb	r4, fp, #512	; 0x200
    ad24:	cmp	r4, r6
    ad26:	it	cs
    ad28:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    ad2a:	add.w	r1, r0, fp
    ad2e:	mov	r2, r4
    ad30:	mov	r0, r7
    ad32:	bl	db58 <memcpy>
    ad36:	b.n	acc6 <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    ad38:	ldrb	r3, [r5, #0]
    ad3a:	tst.w	r3, #112	; 0x70
    ad3e:	bne.n	ada0 <FatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    ad40:	ldrb	r3, [r5, #1]
  return -1;
    ad42:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    ad46:	orr.w	r3, r3, #2
    ad4a:	strb	r3, [r5, #1]
  return -1;
}
    ad4c:	add	sp, #12
    ad4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    ad52:	ldr	r3, [r0, #28]
    ad54:	ldr	r2, [r0, #20]
    ad56:	subs	r3, r3, r2
    ad58:	cmp	r9, r3
    ad5a:	it	cs
    ad5c:	movcs	r9, r3
    ad5e:	b.n	ac3e <FatFile::read(void*, unsigned int)+0x32>
    ad60:	ldr	r4, [r5, #16]
    ad62:	b.n	ad00 <FatFile::read(void*, unsigned int)+0xf4>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    ad64:	ldr	r0, [r2, #40]	; 0x28
    ad66:	ldr	r3, [r0, #0]
    ad68:	mov	r2, r7
    ad6a:	ldr	r3, [r3, #12]
    ad6c:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    ad6e:	cmp	r0, #0
    ad70:	beq.n	ad40 <FatFile::read(void*, unsigned int)+0x134>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    ad72:	mov.w	r4, #512	; 0x200
    ad76:	b.n	acc6 <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    ad78:	lsls	r3, r1, #28
    ad7a:	bpl.n	ad88 <FatFile::read(void*, unsigned int)+0x17c>
    ad7c:	ldrb	r3, [r5, #2]
    ad7e:	lsls	r4, r3, #25
    ad80:	bpl.n	ad88 <FatFile::read(void*, unsigned int)+0x17c>
          m_curCluster++;
    ad82:	ldr	r4, [r5, #16]
    ad84:	adds	r4, #1
    ad86:	b.n	acfe <FatFile::read(void*, unsigned int)+0xf2>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ad88:	mov	r0, r2
    ad8a:	ldr	r1, [r5, #16]
    ad8c:	mov	r2, sl
    ad8e:	bl	b4ec <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    ad92:	cmp	r0, #0
    ad94:	blt.n	ad40 <FatFile::read(void*, unsigned int)+0x134>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    ad96:	beq.n	ad38 <FatFile::read(void*, unsigned int)+0x12c>
    ad98:	ldr	r2, [r5, #8]
    ad9a:	ldr	r4, [r5, #16]
    ad9c:	b.n	ad00 <FatFile::read(void*, unsigned int)+0xf4>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    ad9e:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    ada0:	rsb	r0, r6, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    ada4:	add	sp, #12
    ada6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adaa:	nop

0000adac <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    adac:	push	{r4, r5, r6, lr}
    adae:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    adb0:	movs	r2, #1
    adb2:	add.w	r1, sp, #7
    adb6:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    adb8:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    adba:	ldr	r5, [r0, #16]
    adbc:	bl	ac0c <FatFile::read(void*, unsigned int)>
    adc0:	cmp	r0, #1
    adc2:	it	eq
    adc4:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    adc8:	str	r6, [r4, #20]
    adca:	it	ne
    adcc:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    add0:	str	r5, [r4, #16]
  return c;
}
    add2:	add	sp, #8
    add4:	pop	{r4, r5, r6, pc}
    add6:	nop

0000add8 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    add8:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    adda:	ldr	r3, [r0, #20]
    addc:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    ade0:	sub	sp, #12
    ade2:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    ade4:	cbz	r5, ade8 <FatFile::readDirCache(bool)+0x10>
    ade6:	cbnz	r1, ae0c <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    ade8:	movs	r2, #1
    adea:	add.w	r1, sp, #7
    adee:	mov	r0, r4
    adf0:	bl	ac0c <FatFile::read(void*, unsigned int)>
    adf4:	sxtb	r0, r0
    if  (n != 1) {
    adf6:	cmp	r0, #1
    adf8:	bne.n	ae12 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    adfa:	ldr	r3, [r4, #20]
    adfc:	adds	r3, #31
    adfe:	str	r3, [r4, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    ae00:	ldr	r0, [r4, #8]
    ae02:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    ae04:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    ae08:	add	sp, #12
    ae0a:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    ae0c:	adds	r3, #32
    ae0e:	str	r3, [r0, #20]
    ae10:	b.n	ae00 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    ae12:	movs	r0, #0
}
    ae14:	add	sp, #12
    ae16:	pop	{r4, r5, pc}

0000ae18 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    ae18:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    ae1c:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    ae1e:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    ae20:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    ae22:	tst.w	r5, #24
    ae26:	strb.w	r4, [sp, #32]
    ae2a:	strb.w	r4, [sp, #33]	; 0x21
    ae2e:	strb.w	r4, [sp, #34]	; 0x22
    ae32:	strb.w	r4, [sp, #68]	; 0x44
    ae36:	strb.w	r4, [sp, #69]	; 0x45
    ae3a:	strb.w	r4, [sp, #70]	; 0x46
    ae3e:	beq.n	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    ae40:	ldr	r6, [r0, #8]
    ae42:	ldr	r5, [r1, #8]
    ae44:	cmp	r6, r5
    ae46:	mov	r3, r0
    ae48:	beq.n	ae52 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    ae4a:	movs	r0, #0
}
    ae4c:	add	sp, #104	; 0x68
    ae4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae52:	mov	r5, r3
    ae54:	mov	r8, r2
    ae56:	mov	r6, r1
    ae58:	bl	a868 <FatFile::sync() [clone .part.42]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    ae5c:	mov	lr, r5
    ae5e:	ldmia.w	lr!, {r0, r1, r2, r3}
    ae62:	add	r7, sp, #68	; 0x44
    ae64:	stmia	r7!, {r0, r1, r2, r3}
    ae66:	ldmia.w	lr!, {r0, r1, r2, r3}
    ae6a:	stmia	r7!, {r0, r1, r2, r3}
    ae6c:	ldr.w	r3, [lr]
    ae70:	str	r3, [r7, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    ae72:	mov	r1, r4
    ae74:	mov	r0, r5
    ae76:	bl	a848 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    ae7a:	mov	lr, r0
    ae7c:	cmp	r0, #0
    ae7e:	beq.n	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ae80:	ldr.w	r1, [lr, #4]
    ae84:	ldr.w	r2, [lr, #8]
    ae88:	ldr.w	r3, [lr, #12]
    ae8c:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    ae8e:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ae92:	mov	r7, sp
    ae94:	stmia	r7!, {r0, r1, r2, r3}
    ae96:	ldr.w	r1, [lr, #20]
    ae9a:	ldr.w	r2, [lr, #24]
    ae9e:	ldr.w	r3, [lr, #28]
    aea2:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    aea6:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    aeaa:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    aeac:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    aeb0:	mov	r2, r8
    aeb2:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    aeb4:	cmp.w	lr, #0
    aeb8:	beq.w	afdc <FatFile::rename(FatFile*, char const*)+0x1c4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    aebc:	movw	r3, #2561	; 0xa01
    aec0:	add	r0, sp, #32
    aec2:	bl	ab30 <FatFile::open(FatFile*, char const*, int)>
    aec6:	cmp	r0, #0
    aec8:	beq.n	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    aeca:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    aecc:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    aed0:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    aed4:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    aed6:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    aed8:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    aeda:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    aedc:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    aede:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    aee0:	movs	r1, #1
    aee2:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    aee4:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    aee8:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    aeec:	bl	a848 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    aef0:	cmp	r0, #0
    aef2:	beq.n	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    aef4:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    aef6:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    aefa:	ldr.w	r7, [r3, #-91]!
    aefe:	str.w	r7, [r0, #13]
    af02:	ldr	r7, [r3, #4]
    af04:	str.w	r7, [r0, #17]
    af08:	ldr	r7, [r3, #8]
    af0a:	str.w	r7, [r0, #21]
    af0e:	ldr	r7, [r3, #12]
    af10:	str.w	r7, [r0, #25]
    af14:	ldrh	r7, [r3, #16]
    af16:	ldrb	r3, [r3, #18]
    af18:	strh.w	r7, [r0, #29]
    af1c:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    af1e:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    af20:	cmp	r4, #0
    af22:	beq.n	af98 <FatFile::rename(FatFile*, char const*)+0x180>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    af24:	ldr	r0, [r5, #8]
    af26:	ldrb	r2, [r0, #6]
    af28:	ldr	r1, [r0, #20]
    af2a:	subs	r3, r4, #2
    af2c:	lsls	r3, r2
    af2e:	add	r1, r3
    af30:	mov	r2, r6
    af32:	adds	r0, #36	; 0x24
    af34:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    af38:	cmp	r0, #0
    af3a:	beq.n	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    af3c:	mov	r6, r0
    af3e:	mov	r7, sp
    af40:	ldr.w	r0, [r6, #32]!
    af44:	ldr	r1, [r6, #4]
    af46:	ldr	r2, [r6, #8]
    af48:	ldr	r3, [r6, #12]
    af4a:	stmia	r7!, {r0, r1, r2, r3}
    af4c:	ldr	r0, [r6, #16]
    af4e:	ldr	r1, [r6, #20]
    af50:	ldr	r2, [r6, #24]
    af52:	ldr	r3, [r6, #28]
    af54:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    af56:	mov	r1, r4
    af58:	ldr	r0, [r5, #8]
    af5a:	bl	b648 <FatPartition::freeChain(unsigned long)>
    af5e:	cmp	r0, #0
    af60:	beq.w	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    af64:	ldr	r0, [r5, #8]
    af66:	ldr	r3, [r5, #32]
    af68:	ldrb	r2, [r0, #6]
    af6a:	ldr	r1, [r0, #20]
    af6c:	subs	r3, #2
    af6e:	lsls	r3, r2
    af70:	add	r1, r3
    af72:	adds	r0, #36	; 0x24
    af74:	movs	r2, #1
    af76:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    af7a:	mov	r7, r0
    af7c:	cmp	r0, #0
    af7e:	beq.w	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    af82:	mov	r4, sp
    af84:	ldmia	r4!, {r0, r1, r2, r3}
    af86:	str	r0, [r7, #32]
    af88:	str	r1, [r7, #36]	; 0x24
    af8a:	str	r2, [r7, #40]	; 0x28
    af8c:	str	r3, [r7, #44]	; 0x2c
    af8e:	ldmia	r4!, {r0, r1, r2, r3}
    af90:	str	r0, [r7, #48]	; 0x30
    af92:	str	r1, [r7, #52]	; 0x34
    af94:	str	r2, [r7, #56]	; 0x38
    af96:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    af98:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    af9a:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    af9c:	movs	r3, #8
  if (!oldFile.remove()) {
    af9e:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    afa0:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    afa2:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    afa6:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    afaa:	bl	bc04 <FatFile::remove()>
    afae:	cmp	r0, #0
    afb0:	beq.w	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    afb4:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    afb6:	add.w	r0, r4, #36	; 0x24
    afba:	bl	8ed4 <FsCache::sync()>
    afbe:	cmp	r0, #0
    afc0:	beq.w	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
    afc4:	add.w	r0, r4, #564	; 0x234
    afc8:	bl	8ed4 <FsCache::sync()>
    afcc:	cmp	r0, #0
    afce:	beq.w	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
    afd2:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    afd4:	ldr	r3, [r0, #0]
    afd6:	ldr	r3, [r3, #24]
    afd8:	blx	r3
    afda:	b.n	ae4c <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    afdc:	add	r0, sp, #32
    afde:	bl	aa6c <FatFile::mkdir(FatFile*, char const*, bool)>
    afe2:	cmp	r0, #0
    afe4:	beq.w	ae4a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    afe8:	ldr	r4, [sp, #64]	; 0x40
    afea:	b.n	aeca <FatFile::rename(FatFile*, char const*)+0xb2>

0000afec <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    afec:	ldrb	r3, [r0, #0]
    afee:	lsls	r2, r3, #27
    aff0:	bpl.n	b028 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    aff2:	ldr	r3, [r0, #20]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    aff4:	push	{r4, lr}
    aff6:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    aff8:	cbz	r3, b008 <FatFile::rmdir()+0x1c>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    affa:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    affc:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    affe:	bic.w	r3, r3, #32
    b002:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    b004:	str	r2, [r0, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    b006:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    b008:	movs	r1, #1
    b00a:	mov	r0, r4
    b00c:	bl	add8 <FatFile::readDirCache(bool)>
    if (!dir) {
    b010:	cbz	r0, b02c <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    b012:	ldrb	r3, [r0, #0]
    b014:	cbz	r3, b032 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    b016:	cmp	r3, #229	; 0xe5
    b018:	beq.n	b008 <FatFile::rmdir()+0x1c>
    b01a:	cmp	r3, #46	; 0x2e
    b01c:	beq.n	b008 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    b01e:	ldrb	r3, [r0, #11]
    b020:	lsls	r3, r3, #28
    b022:	bmi.n	b008 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    b024:	movs	r0, #0
    b026:	pop	{r4, pc}
    b028:	movs	r0, #0
    b02a:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    b02c:	ldrb	r3, [r4, #1]
    b02e:	cmp	r3, #0
    b030:	bne.n	b024 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    b032:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    b034:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    b036:	orr.w	r3, r3, #2
    b03a:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    b03c:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    b03e:	mov	r0, r4

 fail:
  return false;
}
    b040:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    b044:	b.w	bc04 <FatFile::remove()>

0000b048 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    b048:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b04c:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    b04e:	ldr	r7, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    b050:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    b052:	cbz	r3, b082 <FatFile::seekSet(unsigned long)+0x3a>
    b054:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    b056:	ldr	r1, [r0, #20]
    b058:	cmp	r1, r5
    b05a:	beq.n	b0b4 <FatFile::seekSet(unsigned long)+0x6c>
    return true;
  }
  if (pos == 0) {
    b05c:	cbnz	r5, b070 <FatFile::seekSet(unsigned long)+0x28>
    b05e:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    b060:	str	r5, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    b062:	bic.w	r3, r3, #32
    b066:	strb	r3, [r4, #2]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    b068:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    b06a:	movs	r0, #1
    b06c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    b070:	lsls	r0, r3, #28
    b072:	bmi.n	b08a <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    b074:	lsls	r2, r3, #26
    b076:	bpl.n	b090 <FatFile::seekSet(unsigned long)+0x48>
    b078:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    b07a:	ldrh	r3, [r3, #8]
    b07c:	cmp.w	r5, r3, lsl #5
    b080:	bls.n	b0ec <FatFile::seekSet(unsigned long)+0xa4>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    b082:	str	r7, [r4, #16]
  return false;
    b084:	movs	r0, #0
    b086:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    b08a:	ldr	r2, [r4, #28]
    b08c:	cmp	r5, r2
    b08e:	bhi.n	b082 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    b090:	ldr.w	lr, [r4, #8]
    b094:	ldrb	r2, [r4, #2]
    b096:	ldrb.w	r0, [lr, #6]
    b09a:	adds	r0, #9
    b09c:	uxtb	r0, r0
    b09e:	subs	r6, r5, #1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    b0a0:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    b0a4:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    b0a8:	beq.n	b0ba <FatFile::seekSet(unsigned long)+0x72>
    m_curCluster = m_firstCluster + nNew;
    b0aa:	ldr	r3, [r4, #32]
    b0ac:	add	r6, r3
    b0ae:	str	r6, [r4, #16]
    goto done;
    b0b0:	mov	r3, r2
    b0b2:	b.n	b062 <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    b0b4:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    b0b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    b0ba:	subs	r2, r1, #1
    b0bc:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    b0c0:	cmp	r6, r0
    b0c2:	bcs.n	b0f0 <FatFile::seekSet(unsigned long)+0xa8>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    b0c4:	lsls	r3, r3, #25
    b0c6:	ite	mi
    b0c8:	ldrmi.w	r3, [lr, #32]
    b0cc:	ldrpl	r3, [r4, #32]
    b0ce:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    b0d0:	add.w	r8, r4, #16
    b0d4:	b.n	b0e6 <FatFile::seekSet(unsigned long)+0x9e>
    b0d6:	ldr	r1, [r4, #16]
    b0d8:	ldr	r0, [r4, #8]
    b0da:	bl	b4ec <FatPartition::fatGet(unsigned long, unsigned long*)>
    b0de:	cmp	r0, #0
    b0e0:	add.w	r6, r6, #4294967295
    b0e4:	ble.n	b082 <FatFile::seekSet(unsigned long)+0x3a>
    b0e6:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    b0e8:	cmp	r6, #0
    b0ea:	bne.n	b0d6 <FatFile::seekSet(unsigned long)+0x8e>
    b0ec:	ldrb	r3, [r4, #2]
    b0ee:	b.n	b062 <FatFile::seekSet(unsigned long)+0x1a>
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    b0f0:	cmp	r1, #0
    b0f2:	beq.n	b0c4 <FatFile::seekSet(unsigned long)+0x7c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    b0f4:	subs	r6, r6, r0
    b0f6:	b.n	b0d0 <FatFile::seekSet(unsigned long)+0x88>

0000b0f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    b0f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0fc:	mov	r5, r1
    b0fe:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    b100:	movs	r1, #0
    b102:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    b104:	mov	r4, r0
    b106:	mov	r7, r3
    b108:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    b10c:	bl	10dec <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    b110:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    b112:	ldr	r3, [r5, #32]
    b114:	str	r3, [r4, #12]
    b116:	add.w	r2, r0, #52	; 0x34
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    b11a:	and.w	r3, r8, #15
    b11e:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    b122:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    b124:	strh.w	r8, [r4, #4]
    b128:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    b12a:	lsls	r5, r1, #28
    b12c:	bmi.n	b154 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    b12e:	and.w	r1, r1, #23
    b132:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    b134:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    b136:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    b138:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    b13c:	it	eq
    b13e:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b142:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    b146:	it	eq
    b148:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b14a:	cmp	r3, #1
    b14c:	beq.n	b15e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    b14e:	cmp	r3, #2
    b150:	beq.n	b1a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    b152:	cbz	r3, b19c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    b154:	movs	r0, #0
    b156:	strb	r0, [r4, #0]
  m_flags = 0;
    b158:	strb	r0, [r4, #2]
  return false;
    b15a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    b15e:	movs	r3, #2
    b160:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b162:	ldrb	r1, [r4, #0]
    b164:	tst.w	r1, #17
    b168:	bne.n	b154 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b16a:	sxtb	r1, r3
    b16c:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    b170:	and.w	r3, r7, #8
    b174:	orrs	r3, r1
    b176:	uxtb	r3, r3
    b178:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b17a:	ldrh.w	lr, [r2, #20]
    b17e:	ldrh	r1, [r2, #26]
    b180:	ldr	r6, [r0, #48]	; 0x30
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    b182:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b184:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    b188:	cbz	r5, b1ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b18a:	cbnz	r1, b1c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b18c:	orn	r3, r3, #127	; 0x7f
    b190:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b192:	lsls	r3, r7, #17
    b194:	bmi.n	b1b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    b196:	movs	r0, #1
    b198:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    b19c:	ands.w	r5, r7, #1024	; 0x400
    b1a0:	bne.n	b154 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b1a2:	movs	r1, #1
    b1a4:	b.n	b170 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    b1a6:	movs	r3, #3
    b1a8:	strb	r3, [r4, #2]
      break;
    b1aa:	b.n	b162 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    b1ac:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b1ae:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    b1b0:	str	r3, [r4, #28]
    b1b2:	b.n	b192 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b1b4:	ldr	r1, [r4, #28]
    b1b6:	mov	r0, r4
    b1b8:	bl	b048 <FatFile::seekSet(unsigned long)>
    b1bc:	cmp	r0, #0
    b1be:	bne.n	b196 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    b1c0:	b.n	b154 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b1c2:	bl	b648 <FatPartition::freeChain(unsigned long)>
    b1c6:	cmp	r0, #0
    b1c8:	beq.n	b154 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b1ca:	ldrb	r3, [r4, #2]
    b1cc:	b.n	b18c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    b1ce:	nop

0000b1d0 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b1d0:	ldrb	r3, [r0, #0]
    b1d2:	cbnz	r3, b1dc <FatFile::openNext(FatFile*, int)+0xc>
    b1d4:	ldrb	r3, [r1, #0]
    b1d6:	tst.w	r3, #112	; 0x70
    b1da:	bne.n	b1e0 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b1dc:	movs	r0, #0
}
    b1de:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b1e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1e4:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b1e6:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b1ea:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b1ec:	bne.n	b232 <FatFile::openNext(FatFile*, int)+0x62>
    b1ee:	mov	r9, r2
    b1f0:	mov	r5, r1
    b1f2:	mov	r8, r0
    b1f4:	mov	sl, r7
    b1f6:	b.n	b1fc <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    b1f8:	movs	r7, #0
    b1fa:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    b1fc:	movs	r1, #0
    b1fe:	mov	r0, r5
    b200:	bl	add8 <FatFile::readDirCache(bool)>
    if (!dir) {
    b204:	cbz	r0, b232 <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    b206:	ldrb	r3, [r0, #0]
    b208:	cbz	r3, b232 <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    b20a:	cmp	r3, #46	; 0x2e
    b20c:	beq.n	b1f8 <FatFile::openNext(FatFile*, int)+0x28>
    b20e:	cmp	r3, #229	; 0xe5
    b210:	beq.n	b1f8 <FatFile::openNext(FatFile*, int)+0x28>
    b212:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    b214:	lsls	r1, r2, #28
    b216:	bpl.n	b23a <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    b218:	cmp	r2, #15
    b21a:	bne.n	b1f8 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b21c:	lsls	r2, r3, #25
    b21e:	bpl.n	b1fa <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    b220:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    b224:	ldrb.w	sl, [r0, #13]
    b228:	b.n	b1fa <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b22a:	bl	b878 <FatFile::lfnChecksum(unsigned char*)>
    b22e:	cmp	r0, sl
    b230:	beq.n	b23e <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b232:	movs	r0, #0
}
    b234:	add	sp, #8
    b236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b23a:	cmp	r7, #0
    b23c:	bne.n	b22a <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    b23e:	str	r7, [sp, #0]
    b240:	mov	r3, r9
    b242:	ubfx	r2, r6, #5, #16
    b246:	mov	r1, r5
    b248:	mov	r0, r8
    b24a:	bl	b0f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    b24e:	b.n	b234 <FatFile::openNext(FatFile*, int)+0x64>

0000b250 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b250:	ldrb	r3, [r0, #0]
    b252:	cbz	r3, b258 <FatFile::sync()+0x8>
    b254:	b.w	a868 <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    b258:	movs	r0, #1
    b25a:	bx	lr

0000b25c <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    b25c:	ldrb	r3, [r0, #2]
    b25e:	lsls	r3, r3, #30
    b260:	bpl.n	b298 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    b262:	ldr	r3, [r0, #32]
    b264:	cbz	r3, b294 <FatFile::truncate()+0x38>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    b266:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    b268:	ldr	r1, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    b26a:	sub	sp, #8
    b26c:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    b26e:	cbnz	r1, b2ae <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    b270:	str	r3, [sp, #4]
    m_firstCluster = 0;
    b272:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    b274:	mov	r1, r3
    b276:	ldr	r0, [r4, #8]
    b278:	bl	b648 <FatPartition::freeChain(unsigned long)>
    b27c:	cbz	r0, b2aa <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b27e:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b280:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    b282:	ldr	r1, [r4, #20]
    b284:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b286:	orn	r3, r3, #127	; 0x7f
    b28a:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b28c:	cbnz	r2, b2ca <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    b28e:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    b290:	add	sp, #8
    b292:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    b294:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    b296:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    b298:	movs	r0, #0
}
    b29a:	bx	lr
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    b29c:	mvn.w	r2, #4026531840	; 0xf0000000
    b2a0:	ldr	r1, [r4, #16]
    b2a2:	ldr	r0, [r4, #8]
    b2a4:	bl	b55c <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    b2a8:	cbnz	r0, b2c2 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    b2aa:	movs	r0, #0
    b2ac:	b.n	b290 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    b2ae:	add	r2, sp, #8
    b2b0:	movs	r3, #0
    b2b2:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    b2b6:	ldr	r0, [r0, #8]
    b2b8:	bl	b4ec <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b2bc:	cmp	r0, #0
    b2be:	blt.n	b2aa <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    b2c0:	bne.n	b29c <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    b2c2:	ldr	r3, [sp, #4]
    b2c4:	cmp	r3, #0
    b2c6:	beq.n	b27e <FatFile::truncate()+0x22>
    b2c8:	b.n	b274 <FatFile::truncate()+0x18>
    b2ca:	mov	r0, r4
    b2cc:	bl	a868 <FatFile::sync() [clone .part.42]>
    b2d0:	b.n	b290 <FatFile::truncate()+0x34>
    b2d2:	nop

0000b2d4 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    b2d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b2d8:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    b2da:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    b2dc:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    b2de:	bmi.n	b2f0 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    b2e0:	ldrb	r3, [r4, #1]
    b2e2:	orr.w	r3, r3, #1
    b2e6:	strb	r3, [r4, #1]
  return -1;
    b2e8:	mov.w	r0, #4294967295
    b2ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b2f0:	mov	r8, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    b2f2:	lsls	r2, r3, #28
    b2f4:	mov	r7, r1
    b2f6:	bmi.w	b496 <FatFile::write(void const*, unsigned int)+0x1c2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    b2fa:	ldr	r2, [r4, #20]
    b2fc:	mvns	r3, r2
    b2fe:	cmp	r8, r3
    b300:	bhi.n	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b302:	cmp.w	r8, #0
    b306:	beq.w	b4b8 <FatFile::write(void const*, unsigned int)+0x1e4>
    b30a:	mov	r6, r8
    b30c:	b.n	b384 <FatFile::write(void const*, unsigned int)+0xb0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b30e:	cmp.w	r9, #0
    b312:	bne.n	b3c6 <FatFile::write(void const*, unsigned int)+0xf2>
      // start of new cluster
      if (m_curCluster != 0) {
    b314:	ldr	r1, [r4, #16]
    b316:	cmp	r1, #0
    b318:	beq.w	b442 <FatFile::write(void const*, unsigned int)+0x16e>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    b31c:	ldrb	r3, [r4, #2]
    b31e:	lsls	r3, r3, #25
    b320:	bpl.w	b456 <FatFile::write(void const*, unsigned int)+0x182>
    b324:	ldr	r3, [r4, #28]
    b326:	cmp	r3, r2
    b328:	bls.w	b456 <FatFile::write(void const*, unsigned int)+0x182>
          m_curCluster++;
    b32c:	adds	r3, r1, #1
    b32e:	str	r3, [r4, #16]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    b330:	ldrb	r2, [r0, #6]
    b332:	ldr	r3, [r0, #20]
    b334:	subs	r1, #1
    b336:	lsls	r1, r2
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b338:	cmp.w	r6, #512	; 0x200
    b33c:	add	r1, r3
    b33e:	bcs.n	b3e2 <FatFile::write(void const*, unsigned int)+0x10e>
    b340:	cmp.w	r6, #512	; 0x200
    b344:	mov	r5, r6
    b346:	it	cs
    b348:	movcs.w	r5, #512	; 0x200
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    b34c:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    b34e:	tst.w	r3, #32
    b352:	ite	eq
    b354:	moveq	r2, #1
    b356:	movne	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b358:	adds	r0, #36	; 0x24
    b35a:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    b35e:	cmp	r0, #0
    b360:	beq.n	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    b362:	add	r0, r9
    b364:	mov	r2, r5
    b366:	mov	r1, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    b368:	add	r9, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    b36a:	bl	db58 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    b36e:	cmp.w	r9, #512	; 0x200
    b372:	beq.w	b486 <FatFile::write(void const*, unsigned int)+0x1b2>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b376:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b378:	subs	r6, r6, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b37a:	add	r2, r5
    src += n;
    b37c:	add	r7, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b37e:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b380:	beq.w	b4b8 <FatFile::write(void const*, unsigned int)+0x1e4>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    b384:	ldr	r0, [r4, #8]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    b386:	ldrb	r3, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b388:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    b38c:	ubfx	r9, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b390:	beq.n	b30e <FatFile::write(void const*, unsigned int)+0x3a>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    b392:	ldr	r3, [r4, #16]
    b394:	ldrb	r1, [r0, #6]
    b396:	ldr	r2, [r0, #20]
    b398:	subs	r3, #2
    b39a:	lsl.w	r1, r3, r1
    b39e:	add	r1, r2
    b3a0:	add	r1, r5

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b3a2:	cmp.w	r9, #0
    b3a6:	bne.n	b3d4 <FatFile::write(void const*, unsigned int)+0x100>
    b3a8:	cmp.w	r6, #512	; 0x200
    b3ac:	bcs.n	b3e2 <FatFile::write(void const*, unsigned int)+0x10e>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    b3ae:	ldr	r2, [r4, #20]
    b3b0:	ldr	r3, [r4, #28]
    b3b2:	cmp.w	r6, #512	; 0x200
    b3b6:	mov	r5, r6
    b3b8:	it	cs
    b3ba:	movcs.w	r5, #512	; 0x200
    b3be:	cmp	r2, r3
    b3c0:	bcc.n	b34c <FatFile::write(void const*, unsigned int)+0x78>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    b3c2:	movs	r2, #5
    b3c4:	b.n	b358 <FatFile::write(void const*, unsigned int)+0x84>
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    b3c6:	ldr	r3, [r4, #16]
    b3c8:	ldrb	r1, [r0, #6]
    b3ca:	ldr	r2, [r0, #20]
    b3cc:	subs	r3, #2
    b3ce:	lsl.w	r1, r3, r1
    b3d2:	add	r1, r2
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    b3d4:	rsb	r5, r9, #512	; 0x200
    b3d8:	cmp	r5, r6
    b3da:	it	cs
    b3dc:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    b3de:	movs	r2, #1
    b3e0:	b.n	b358 <FatFile::write(void const*, unsigned int)+0x84>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    b3e2:	cmp.w	r6, #1024	; 0x400
    b3e6:	bcc.n	b426 <FatFile::write(void const*, unsigned int)+0x152>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    b3e8:	ldrb	r3, [r0, #4]
    b3ea:	ldr.w	lr, [r0, #48]	; 0x30
    b3ee:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    b3f0:	lsrs	r2, r6, #9
    b3f2:	cmp	r3, r2
    b3f4:	it	cs
    b3f6:	movcs	r3, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    b3f8:	cmp	lr, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    b3fa:	mov.w	r5, r3, lsl #9
    b3fe:	bcc.n	b414 <FatFile::write(void const*, unsigned int)+0x140>
    b400:	adds	r2, r3, r1
    b402:	cmp	lr, r2
    b404:	bcs.n	b414 <FatFile::write(void const*, unsigned int)+0x140>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b406:	mov.w	lr, #0
    m_sector = 0XFFFFFFFF;
    b40a:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b40e:	strb.w	lr, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    b412:	str	r2, [r0, #48]	; 0x30
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    b414:	ldr	r0, [r0, #40]	; 0x28
    b416:	ldr	r2, [r0, #0]
    b418:	ldr.w	r9, [r2, #32]
    b41c:	mov	r2, r7
    b41e:	blx	r9
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    b420:	cmp	r0, #0
    b422:	bne.n	b376 <FatFile::write(void const*, unsigned int)+0xa2>
    b424:	b.n	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    b426:	ldr	r3, [r0, #48]	; 0x30
    b428:	cmp	r3, r1
    b42a:	beq.n	b478 <FatFile::write(void const*, unsigned int)+0x1a4>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    b42c:	ldr	r0, [r0, #40]	; 0x28
    b42e:	ldr	r3, [r0, #0]
    b430:	mov	r2, r7
    b432:	ldr	r3, [r3, #28]
    b434:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    b436:	cmp	r0, #0
    b438:	beq.w	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    b43c:	mov.w	r5, #512	; 0x200
    b440:	b.n	b376 <FatFile::write(void const*, unsigned int)+0xa2>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    b442:	ldr	r3, [r4, #32]
    b444:	cbz	r3, b4a4 <FatFile::write(void const*, unsigned int)+0x1d0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    b446:	str	r3, [r4, #16]
    b448:	ldrb	r1, [r0, #6]
    b44a:	ldr	r2, [r0, #20]
    b44c:	subs	r3, #2
    b44e:	lsl.w	r1, r3, r1
    b452:	add	r1, r2
    b454:	b.n	b3a8 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    b456:	add.w	r2, r4, #16
    b45a:	bl	b4ec <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    b45e:	cmp	r0, #0
    b460:	blt.w	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    b464:	bne.n	b472 <FatFile::write(void const*, unsigned int)+0x19e>
          // add cluster if at end of chain
          if (!addCluster()) {
    b466:	mov	r0, r4
    b468:	bl	a77c <FatFile::addCluster()>
    b46c:	cmp	r0, #0
    b46e:	beq.w	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
    b472:	ldr	r3, [r4, #16]
    b474:	ldr	r0, [r4, #8]
    b476:	b.n	b448 <FatFile::write(void const*, unsigned int)+0x174>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b478:	movs	r2, #0
    m_sector = 0XFFFFFFFF;
    b47a:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b47e:	strb.w	r2, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    b482:	str	r3, [r0, #48]	; 0x30
    b484:	b.n	b42c <FatFile::write(void const*, unsigned int)+0x158>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    b486:	ldr	r0, [r4, #8]
    b488:	adds	r0, #36	; 0x24
    b48a:	bl	8ed4 <FsCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    b48e:	cmp	r0, #0
    b490:	bne.w	b376 <FatFile::write(void const*, unsigned int)+0xa2>
    b494:	b.n	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    b496:	ldr	r1, [r0, #28]
    b498:	bl	b048 <FatFile::seekSet(unsigned long)>
    b49c:	cmp	r0, #0
    b49e:	beq.w	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
    b4a2:	b.n	b2fa <FatFile::write(void const*, unsigned int)+0x26>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    b4a4:	mov	r0, r4
    b4a6:	bl	a77c <FatFile::addCluster()>
    b4aa:	cmp	r0, #0
    b4ac:	beq.w	b2e0 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    b4b0:	ldr	r3, [r4, #16]
    b4b2:	str	r3, [r4, #32]
    b4b4:	ldr	r0, [r4, #8]
    b4b6:	b.n	b448 <FatFile::write(void const*, unsigned int)+0x174>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    b4b8:	ldr	r3, [r4, #28]
    b4ba:	cmp	r3, r2
    b4bc:	bcc.n	b4d2 <FatFile::write(void const*, unsigned int)+0x1fe>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    b4be:	ldr	r3, [pc, #40]	; (b4e8 <FatFile::write(void const*, unsigned int)+0x214>)
    b4c0:	ldr	r3, [r3, #0]
    b4c2:	cbz	r3, b4e2 <FatFile::write(void const*, unsigned int)+0x20e>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b4c4:	ldrb	r3, [r4, #2]
    b4c6:	orn	r3, r3, #127	; 0x7f
    b4ca:	strb	r3, [r4, #2]
    b4cc:	mov	r0, r8
    b4ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b4d2:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    b4d4:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b4d6:	orn	r3, r3, #127	; 0x7f
    b4da:	strb	r3, [r4, #2]
    b4dc:	mov	r0, r8
    b4de:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b4e2:	mov	r0, r8
    b4e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b4e8:	.word	0x20006af8

0000b4ec <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b4ec:	cmp	r1, #1
    b4ee:	bls.n	b554 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    b4f0:	ldr	r3, [r0, #28]
    b4f2:	cmp	r1, r3
    b4f4:	bhi.n	b554 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    b4f6:	push	{r4, r5, r6, lr}
    b4f8:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    b4fa:	cmp	r3, #32
    b4fc:	mov	r6, r2
    b4fe:	mov	r5, r0
    b500:	mov	r4, r1
    b502:	beq.n	b536 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    b504:	cmp	r3, #16
    b506:	bne.n	b530 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    b508:	ldr	r3, [r0, #24]
    b50a:	ubfx	r1, r1, #8, #8
    b50e:	add	r1, r3
    b510:	movs	r2, #2
    b512:	add.w	r0, r0, #564	; 0x234
    b516:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    b51a:	cbz	r0, b530 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b51c:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    b51e:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    b522:	ldr	r2, [r5, #28]
    b524:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    b526:	itte	ls
    b528:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    b52a:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    b52c:	movhi	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    b52e:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

 fail:
  return -1;
    b530:	mov.w	r0, #4294967295
    b534:	pop	{r4, r5, r6, pc}
    b536:	ldr	r1, [r0, #24]
    b538:	movs	r2, #2
    b53a:	add.w	r1, r1, r4, lsr #7
    b53e:	add.w	r0, r0, #564	; 0x234
    b542:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    b546:	cmp	r0, #0
    b548:	beq.n	b530 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b54a:	and.w	r1, r4, #127	; 0x7f
    b54e:	ldr.w	r3, [r0, r1, lsl #2]
    b552:	b.n	b522 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    b554:	mov.w	r0, #4294967295
}
    b558:	bx	lr
    b55a:	nop

0000b55c <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b55c:	cmp	r1, #1
    b55e:	bls.n	b59c <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    b560:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b562:	ldr	r3, [r0, #28]
    b564:	cmp	r1, r3
    b566:	bhi.n	b576 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    b568:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    b56a:	cmp	r3, #32
    b56c:	mov	r5, r2
    b56e:	mov	r4, r1
    b570:	beq.n	b5a0 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    b572:	cmp	r3, #16
    b574:	beq.n	b57a <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    b576:	movs	r0, #0
    b578:	pop	{r3, r4, r5, pc}
    b57a:	ldr	r3, [r0, #24]
    b57c:	ubfx	r1, r1, #8, #8
    b580:	add	r1, r3
    b582:	add.w	r0, r0, #564	; 0x234
    b586:	movs	r2, #3
    b588:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    b58c:	mov	r3, r0
    b58e:	cmp	r0, #0
    b590:	beq.n	b576 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    b592:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    b594:	movs	r0, #1
    b596:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

 fail:
  return false;
}
    b59a:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    b59c:	movs	r0, #0
}
    b59e:	bx	lr
    b5a0:	ldr	r1, [r0, #24]
    b5a2:	movs	r2, #3
    b5a4:	add.w	r0, r0, #564	; 0x234
    b5a8:	add.w	r1, r1, r4, lsr #7
    b5ac:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    b5b0:	mov	r3, r0
    b5b2:	cmp	r0, #0
    b5b4:	beq.n	b576 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    b5b6:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    b5ba:	movs	r0, #1
    b5bc:	str.w	r5, [r3, r1, lsl #2]
    b5c0:	pop	{r3, r4, r5, pc}
    b5c2:	nop

0000b5c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b5c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b5c8:	ldr	r4, [r0, #12]
    b5ca:	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b5cc:	sub	sp, #8
    b5ce:	mov	r5, r0
    b5d0:	mov	r7, r1
    b5d2:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b5d4:	itte	cc
    b5d6:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    b5d8:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    b5da:	movcs	r6, #1
    b5dc:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    b5de:	adds	r4, #1
    if (find > m_lastCluster) {
    b5e0:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b5e2:	add	r2, sp, #4
    b5e4:	mov	r0, r5
    b5e6:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b5e8:	bls.n	b5fe <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    b5ea:	cbnz	r6, b63c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    b5ec:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    b5ee:	adds	r4, #1
    if (find > m_lastCluster) {
    b5f0:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    b5f2:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b5f6:	add	r2, sp, #4
    b5f8:	mov	r0, r5
    b5fa:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b5fc:	bhi.n	b5ea <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    b5fe:	cmp	r7, r4
    b600:	beq.n	b63c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b602:	bl	b4ec <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b606:	cmp	r0, #0
    b608:	blt.n	b63c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    b60a:	beq.n	b5dc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    b60c:	ldr	r3, [sp, #4]
    b60e:	cmp	r3, #0
    b610:	bne.n	b5dc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    b612:	cbz	r6, b616 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    b614:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    b616:	mvn.w	r2, #4026531840	; 0xf0000000
    b61a:	mov	r1, r4
    b61c:	mov	r0, r5
    b61e:	bl	b55c <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    b622:	mov	r6, r0
    b624:	cbz	r0, b63c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    b626:	cbnz	r7, b62e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    b628:	str.w	r4, [r8]
  return true;
    b62c:	b.n	b63e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    b62e:	mov	r1, r7
    b630:	mov	r0, r5
    b632:	mov	r2, r4
    b634:	bl	b55c <FatPartition::fatPut(unsigned long, unsigned long)>
    b638:	cmp	r0, #0
    b63a:	bne.n	b628 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    b63c:	movs	r6, #0
}
    b63e:	mov	r0, r6
    b640:	add	sp, #8
    b642:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b646:	nop

0000b648 <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    b648:	push	{r4, r5, r6, lr}
    b64a:	mov	r5, r0
    b64c:	sub	sp, #8
    b64e:	mov	r4, r1
    b650:	b.n	b668 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b652:	bl	b55c <FatPartition::fatPut(unsigned long, unsigned long)>
    b656:	cbz	r0, b67e <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    b658:	ldr	r3, [r5, #12]
    b65a:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    b65c:	itt	cc
    b65e:	addcc.w	r4, r4, #4294967295
    b662:	strcc	r4, [r5, #12]
    }
    cluster = next;
    b664:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    b666:	cbz	r6, b680 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    b668:	add	r2, sp, #4
    b66a:	mov	r1, r4
    b66c:	mov	r0, r5
    b66e:	bl	b4ec <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b672:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b674:	mov	r1, r4
    b676:	mov.w	r2, #0
    b67a:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    b67c:	bge.n	b652 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

 fail:
  return false;
    b67e:	movs	r0, #0
}
    b680:	add	sp, #8
    b682:	pop	{r4, r5, r6, pc}

0000b684 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    b684:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b688:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    b68a:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    b68c:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    b68e:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    b692:	beq.n	b6a0 <FatPartition::freeClusterCount()+0x1c>
    b694:	cmp	r3, #32
    b696:	beq.n	b6a0 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

 fail:
  return -1;
    b698:	mov.w	r0, #4294967295
    b69c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    b6a0:	ldr	r5, [r0, #24]
    while (todo) {
    b6a2:	cmp.w	r8, #0
    b6a6:	beq.n	b726 <FatPartition::freeClusterCount()+0xa2>
    b6a8:	mov	r6, r0
    b6aa:	add.w	r7, r0, #564	; 0x234
    b6ae:	movs	r4, #0
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    b6b0:	mov	r1, r5
    b6b2:	movs	r2, #2
    b6b4:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
    b6b6:	adds	r5, #1
    b6b8:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
      if (!pc) {
    b6bc:	cmp	r0, #0
    b6be:	beq.n	b698 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b6c0:	ldrb	r3, [r6, #7]
    b6c2:	cmp	r3, #16
    b6c4:	beq.n	b6f4 <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    b6c6:	cmp.w	r8, #127	; 0x7f
    b6ca:	bhi.n	b71e <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    b6cc:	uxth.w	r1, r8
    b6d0:	mov	lr, r8
    b6d2:	subs	r1, #1
    b6d4:	uxth	r1, r1
    b6d6:	add.w	r1, r0, r1, lsl #2
    b6da:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    b6dc:	ldr.w	r2, [r3, #4]!
    b6e0:	cbnz	r2, b6e4 <FatPartition::freeClusterCount()+0x60>
            free++;
    b6e2:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    b6e4:	cmp	r3, r1
    b6e6:	bne.n	b6dc <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b6e8:	subs.w	r8, r8, lr
    b6ec:	bne.n	b6b0 <FatPartition::freeClusterCount()+0x2c>
    b6ee:	mov	r0, r4
    b6f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    b6f4:	cmp.w	r8, #255	; 0xff
    b6f8:	bls.n	b72c <FatPartition::freeClusterCount()+0xa8>
    b6fa:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b6fe:	mov	r3, lr
    b700:	subs	r1, r3, #1
    b702:	uxth	r1, r1
    b704:	add.w	r1, r0, r1, lsl #1
    b708:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    b70a:	ldrh.w	r2, [r3, #2]!
    b70e:	cbnz	r2, b712 <FatPartition::freeClusterCount()+0x8e>
            free++;
    b710:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    b712:	cmp	r1, r3
    b714:	bne.n	b70a <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b716:	subs.w	r8, r8, lr
    b71a:	bne.n	b6b0 <FatPartition::freeClusterCount()+0x2c>
    b71c:	b.n	b6ee <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    b71e:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b722:	mov	r1, lr
    b724:	b.n	b6d2 <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b726:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    b728:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    b72c:	uxth.w	r3, r8
    b730:	mov	lr, r8
    b732:	b.n	b700 <FatPartition::freeClusterCount()+0x7c>

0000b734 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

 fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    b734:	push	{r3, r4, r5, r6, r7, lr}
    b736:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    b738:	movs	r3, #0
  m_allocSearchStart = 1;
    b73a:	movs	r5, #1
    b73c:	mov.w	r0, #4294967295
    b740:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    b742:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    b744:	str	r1, [r4, #40]	; 0x28
    b746:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    b74a:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b74c:	strb.w	r3, [r4, #36]	; 0x24
    b750:	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    b754:	str	r0, [r4, #48]	; 0x30
    b756:	str.w	r0, [r4, #576]	; 0x240
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b75a:	mov	r5, r2
    b75c:	cbz	r2, b796 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    b75e:	cmp	r2, #4
    b760:	bls.n	b766 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b762:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    b764:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b766:	add.w	r6, r4, #36	; 0x24
    b76a:	mov	r2, r3
    b76c:	mov	r1, r3
    b76e:	mov	r0, r6
    b770:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    b774:	add.w	r5, r5, #268435456	; 0x10000000
    b778:	subs	r5, #1
    b77a:	lsls	r5, r5, #4
    b77c:	add.w	r3, r0, #446	; 0x1be
    b780:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    b782:	cmp	r0, #0
    b784:	beq.n	b762 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b786:	ldrb	r1, [r2, #4]
    b788:	cmp	r1, #0
    b78a:	beq.n	b762 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b78c:	ldrb	r3, [r3, r5]
    b78e:	lsls	r3, r3, #25
    b790:	bne.n	b762 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b792:	ldr	r5, [r2, #8]
    b794:	b.n	b79a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    b796:	add.w	r6, r4, #36	; 0x24
    b79a:	mov	r0, r6
    b79c:	movs	r2, #0
    b79e:	mov	r1, r5
    b7a0:	bl	8e74 <FsCache::get(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    b7a4:	cmp	r0, #0
    b7a6:	beq.n	b762 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b7a8:	ldrb	r3, [r0, #16]
    b7aa:	cmp	r3, #2
    b7ac:	bne.n	b762 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b7ae:	ldrh.w	r3, [r0, #11]
    b7b2:	cmp.w	r3, #512	; 0x200
    b7b6:	bne.n	b762 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    b7b8:	ldrb	r6, [r0, #13]
    b7ba:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b7bc:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b7be:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b7c0:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b7c2:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b7c4:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b7c6:	beq.n	b7e8 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    b7c8:	movs	r2, #1
    b7ca:	mov	r1, r2
    b7cc:	b.n	b7d0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    b7ce:	mov	r2, r3
    b7d0:	lsls	r1, r1, #1
    b7d2:	uxtb	r1, r1
    b7d4:	adds	r3, r2, #1
    b7d6:	cmp	r6, r1
    b7d8:	uxtb	r3, r3
    b7da:	beq.n	b7e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    b7dc:	cmp	r3, #9
    b7de:	bne.n	b7ce <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    b7e0:	strb	r2, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b7e2:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    b7e4:	pop	{r3, r4, r5, r6, r7, pc}
    b7e6:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    b7e8:	ldrh	r6, [r0, #22]
    b7ea:	str	r6, [r4, #16]
  if (m_sectorsPerFat == 0) {
    b7ec:	cbnz	r6, b7f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    b7ee:	ldr	r6, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    b7f0:	str	r6, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b7f2:	ldrh	r1, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b7f4:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    b7f8:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b7fa:	add	r1, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b7fc:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b7fe:	add.w	r7, r1, r6, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b802:	addw	r3, r3, #511	; 0x1ff
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b806:	str	r1, [r4, #24]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    b808:	ldrh.w	r1, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b80c:	str	r7, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b80e:	add.w	r3, r7, r3, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    b812:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    b814:	cbnz	r1, b818 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b816:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    b818:	subs	r5, r5, r3
    b81a:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    b81c:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b820:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b824:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b826:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b828:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b82a:	bls.n	b848 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    b82c:	movw	r3, #65524	; 0xfff4
    b830:	cmp	r2, r3
    b832:	ittet	hi
    b834:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    b836:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    b838:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    b83a:	movhi	r3, #32
    b83c:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    b83e:	str	r6, [r4, #44]	; 0x2c
    b840:	str.w	r6, [r4, #572]	; 0x23c
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    b844:	movs	r0, #1
    b846:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    b848:	movs	r3, #12
    b84a:	strb	r3, [r4, #7]
    b84c:	b.n	b762 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b84e:	nop

0000b850 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    b850:	cmp	r1, #4
    b852:	bls.n	b86e <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    b854:	cmp	r1, #10
    b856:	bls.n	b866 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    b858:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b85a:	itte	ls
    b85c:	addls.w	r1, r0, r1, lsl #1
    b860:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    b862:	movhi	r0, #0
}
    b864:	bx	lr
    b866:	add.w	r1, r0, r1, lsl #1
    b86a:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    b86c:	bx	lr
    b86e:	add.w	r1, r0, r1, lsl #1
    b872:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    b876:	bx	lr

0000b878 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    b878:	push	{r4}
    b87a:	subs	r2, r0, #1
    b87c:	add.w	r4, r0, #10
  uint8_t sum = 0;
    b880:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b882:	ldrb.w	r1, [r2, #1]!
    b886:	lsrs	r3, r0, #1
    b888:	orr.w	r0, r3, r0, lsl #7
    b88c:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b890:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b892:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b894:	bne.n	b882 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    b896:	ldr.w	r4, [sp], #4
    b89a:	bx	lr

0000b89c <FatFile::openCluster(FatFile*)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    b89c:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    b89e:	ldr	r3, [r1, #12]
    b8a0:	cbz	r3, b8c0 <FatFile::openCluster(FatFile*)+0x24>
    b8a2:	mov	r5, r0
    b8a4:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    b8a6:	movs	r2, #36	; 0x24
    b8a8:	movs	r1, #0
    b8aa:	bl	10dec <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    b8ae:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    b8b0:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    b8b2:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    b8b4:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    b8b6:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    b8b8:	ldr	r3, [r4, #12]
    b8ba:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    b8bc:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b8be:	pop	{r3, r4, r5, pc}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b8c0:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b8c2:	ldmia.w	sp!, {r3, r4, r5, lr}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b8c6:	b.w	ac00 <FatFile::openRoot(FatVolume*)>
    b8ca:	nop

0000b8cc <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    b8cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8d0:	sub	sp, #52	; 0x34
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b8d2:	ldrb	r3, [r0, #0]
    b8d4:	movs	r4, #0
    b8d6:	strb.w	r4, [sp, #12]
    b8da:	strb.w	r4, [sp, #13]
    b8de:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    b8e2:	mov	r8, r1
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b8e4:	cbz	r3, b8ec <FatFile::getName(char*, unsigned int)+0x20>
    b8e6:	cmp	r2, #12
    b8e8:	mov	r9, r2
    b8ea:	bhi.n	b8f8 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
    b8ec:	movs	r0, #0
    b8ee:	strb.w	r0, [r8]
  return 0;
}
    b8f2:	add	sp, #52	; 0x34
    b8f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    b8f8:	ldrb	r3, [r0, #3]
    b8fa:	mov	r7, r0
    b8fc:	cmp	r3, #0
    b8fe:	beq.n	b9a6 <FatFile::getName(char*, unsigned int)+0xda>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    b900:	add	r0, sp, #12
    b902:	mov	r1, r7
    b904:	bl	b89c <FatFile::openCluster(FatFile*)>
    b908:	cmp	r0, #0
    b90a:	beq.n	b8ec <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b90c:	ldrb	r3, [r7, #3]
    b90e:	cmp	r3, #0
    b910:	beq.n	b8ec <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b912:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b914:	movs	r6, #1
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b916:	add.w	r5, r9, #4294967295
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    b91a:	ldrh	r1, [r7, #4]
    b91c:	subs	r1, r1, r6
    b91e:	lsls	r1, r1, #5
    b920:	add	r0, sp, #12
    b922:	bl	b048 <FatFile::seekSet(unsigned long)>
    b926:	cmp	r0, #0
    b928:	beq.n	b8ec <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b92a:	movs	r1, #0
    b92c:	add	r0, sp, #12
    b92e:	bl	add8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    b932:	mov	fp, r0
    b934:	cmp	r0, #0
    b936:	beq.n	b8ec <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    b938:	ldrb	r3, [r0, #11]
    b93a:	cmp	r3, #15
    b93c:	bne.n	b8ec <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    b93e:	ldrb	r3, [r0, #0]
    b940:	and.w	r3, r3, #31
    b944:	cmp	r6, r3
    b946:	bne.n	b8ec <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b948:	subs	r3, r6, #1
    b94a:	add.w	r4, r3, r3, lsl #1
    b94e:	add.w	r4, r3, r4, lsl #2
    b952:	mov	r3, r4
    b954:	add.w	sl, r8, r4
    b958:	add.w	r2, r4, #13
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    b95c:	subs	r1, r3, r4
    b95e:	uxtb	r1, r1
    b960:	mov	r0, fp
    b962:	bl	b850 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= (n - 1)) {
    b966:	cbz	r0, b9b0 <FatFile::getName(char*, unsigned int)+0xe4>
    b968:	cmp	r5, r3
    b96a:	bls.n	b9b0 <FatFile::getName(char*, unsigned int)+0xe4>
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b96c:	cmp	r0, #126	; 0x7e
    b96e:	add.w	r3, r3, #1
    b972:	ite	ls
    b974:	uxtbls	r0, r0
    b976:	movhi	r0, #63	; 0x3f
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    b978:	cmp	r2, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b97a:	strb.w	r0, [sl], #1
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    b97e:	bne.n	b95c <FatFile::getName(char*, unsigned int)+0x90>
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  if (k >= n) {  // <<----------added
    k = n - 1;   // <<--------- added
    b980:	cmp	r9, r2
    b982:	it	ls
    b984:	movls	r2, r5
  }             // <<---------added
  name[k] = '\0';
    b986:	ldrb.w	r3, [sp, #4]
    b98a:	strb.w	r3, [r8, r2]
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    n = lfnGetName(ldir, name, size);
    if (n == 0) {
    b98e:	cmp	r2, #0
    b990:	beq.n	b8ec <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b992:	ldrb.w	r3, [fp]
    b996:	lsls	r3, r3, #25
    b998:	bmi.n	b9b4 <FatFile::getName(char*, unsigned int)+0xe8>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b99a:	adds	r6, #1
    b99c:	ldrb	r3, [r7, #3]
    b99e:	uxtb	r6, r6
    b9a0:	cmp	r3, r6
    b9a2:	bcs.n	b91a <FatFile::getName(char*, unsigned int)+0x4e>
    b9a4:	b.n	b8ec <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    b9a6:	bl	c174 <FatFile::getSFN(char*)>
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
  return 0;
}
    b9aa:	add	sp, #52	; 0x34
    b9ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b9b0:	mov	r2, r3
    b9b2:	b.n	b980 <FatFile::getName(char*, unsigned int)+0xb4>
    b9b4:	mov	r0, r2
    b9b6:	b.n	b8f2 <FatFile::getName(char*, unsigned int)+0x26>

0000b9b8 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    b9b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    b9bc:	ldrb	r3, [r0, #0]
    b9be:	cmp	r3, #32
    b9c0:	bne.n	b9ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    b9c2:	ldrb.w	r3, [r0, #1]!
    b9c6:	cmp	r3, #32
    b9c8:	beq.n	b9c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    b9ca:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    b9cc:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    b9ce:	cmp	r3, #0
    b9d0:	beq.w	bbe2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    b9d4:	cmp	r3, #47	; 0x2f
    b9d6:	beq.n	ba38 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b9d8:	cmp	r3, #92	; 0x5c
    b9da:	beq.n	ba22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    b9dc:	sub.w	r4, r3, #34	; 0x22
    b9e0:	uxtb	r4, r4
    b9e2:	cmp	r4, #29
    b9e4:	bls.n	ba28 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    b9e6:	ldr.w	lr, [pc, #536]	; bc00 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    b9ea:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    b9ec:	movs	r4, #0
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b9ee:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    b9f0:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b9f4:	mov	r7, r6
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b9f6:	beq.n	ba22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    b9f8:	cmp	r5, #94	; 0x5e
    b9fa:	bhi.n	ba22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b9fc:	ldrb.w	r3, [r6], #1
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ba00:	sub.w	r5, r3, #34	; 0x22
    ba04:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    ba06:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    ba08:	cmp	r3, #0
    ba0a:	beq.w	bbb4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    ba0e:	cmp	r3, #47	; 0x2f
    ba10:	beq.n	ba3a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ba12:	cmp	r3, #92	; 0x5c
    ba14:	lsr.w	r7, lr, r5
    ba18:	beq.n	ba22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    ba1a:	cmp	r5, #29
    ba1c:	bhi.n	b9ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    ba1e:	lsls	r7, r7, #31
    ba20:	bpl.n	b9ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    ba22:	movs	r0, #0
    ba24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ba28:	ldr	r5, [pc, #468]	; (bc00 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    ba2a:	lsr.w	r4, r5, r4
    ba2e:	lsls	r4, r4, #31
    ba30:	bpl.n	b9e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    ba32:	movs	r0, #0
    ba34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    ba38:	movs	r4, #0
    ba3a:	adds	r7, r0, r4
    ba3c:	mov	r6, r7
    ba3e:	mov	r5, r4
    ba40:	movs	r3, #47	; 0x2f
    ba42:	b.n	ba4a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    ba44:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    ba48:	adds	r5, #1
    ba4a:	cmp	r3, #32
    ba4c:	beq.n	ba44 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    ba4e:	cmp	r3, #47	; 0x2f
    ba50:	beq.n	ba44 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    ba52:	add	r5, r0
    ba54:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    ba56:	cbz	r4, ba6c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    ba58:	mov	r2, r7
    c = path[len - 1];
    ba5a:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    ba5e:	cmp	r3, #46	; 0x2e
    ba60:	beq.n	ba68 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    ba62:	cmp	r3, #32
    ba64:	bne.w	bbba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    ba68:	subs	r4, #1
    ba6a:	bne.n	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    ba6c:	mov.w	r5, #4294967295
    ba70:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    ba72:	str	r3, [r1, #4]
    ba74:	add.w	r6, r1, #23
    ba78:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    ba7c:	movs	r2, #32
    ba7e:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    ba82:	cmp	r3, r6
    ba84:	bne.n	ba7e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    ba86:	subs	r6, r0, #1
    ba88:	movs	r2, #0
    ba8a:	b.n	ba8e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    ba8c:	adds	r2, #1
    ba8e:	ldrb.w	r3, [r6, #1]!
    ba92:	cmp	r3, #46	; 0x2e
    ba94:	beq.n	ba8c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    ba96:	cmp	r3, #32
    ba98:	beq.n	ba8c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    ba9a:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    ba9e:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    baa0:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    baa4:	beq.n	bac0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    baa6:	ldrb	r7, [r0, r5]
    baa8:	cmp	r7, #46	; 0x2e
    baaa:	add.w	r6, r0, r5
    baae:	bne.n	baba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    bab0:	b.n	bac0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    bab2:	ldrb.w	r7, [r6, #-1]!
    bab6:	cmp	r7, #46	; 0x2e
    bab8:	beq.n	bac0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    baba:	adds.w	r5, r5, #4294967295
    babe:	bcs.n	bab2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    bac0:	cmp	r2, r4
    bac2:	mov.w	r9, #0
    bac6:	bge.w	bbec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    baca:	mov	r6, r9
    bacc:	mov	sl, r9
    bace:	movs	r7, #7
    bad0:	mov.w	r8, #8
    bad4:	b.n	bb22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    bad6:	cmp	r3, #46	; 0x2e
    bad8:	beq.n	bb6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    bada:	cmp	r3, #34	; 0x22
    badc:	beq.n	baf6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    bade:	cmp	r3, #124	; 0x7c
    bae0:	beq.n	baf6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    bae2:	sub.w	lr, r3, #42	; 0x2a
    bae6:	cmp.w	lr, #5
    baea:	bls.n	bb7e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    baec:	sub.w	lr, r3, #58	; 0x3a
    baf0:	cmp.w	lr, #5
    baf4:	bhi.n	bba8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    baf6:	cmp	r5, r2
    baf8:	beq.n	bb6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    bafa:	cmp	r7, r6
    bafc:	bcc.n	bb52 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    bafe:	mov.w	ip, #0
      c = '_';
    bb02:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    bb04:	add.w	lr, r6, #1
    bb08:	add.w	fp, r1, r6
    bb0c:	uxtb.w	r6, lr
      if (i < 7) {
    bb10:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    bb12:	strb.w	r3, [fp, #13]
      if (i < 7) {
    bb16:	bhi.n	bb1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    bb18:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bb1a:	adds	r2, #1
    bb1c:	cmp	r2, r4
    bb1e:	bge.n	bb30 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    bb20:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    bb22:	cmp	r3, #32
    bb24:	bne.n	bad6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bb26:	adds	r2, #1
    bb28:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    bb2a:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bb2e:	blt.n	bb20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    bb30:	ldrb	r3, [r1, #13]
    bb32:	cmp	r3, #32
    bb34:	beq.w	ba22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    bb38:	cmp.w	ip, #0
    bb3c:	beq.n	bbce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    bb3e:	tst.w	sl, r9
    bb42:	it	ne
    bb44:	movne.w	r9, #2
    bb48:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    bb4c:	movs	r0, #1
    bb4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    bb52:	cmp	r7, #10
    bb54:	beq.n	bbc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    bb56:	cmp	r5, r2
    bb58:	blt.n	bbc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    bb5a:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    bb5c:	movs	r7, #10
      i = 8;    // Place for extension.
    bb5e:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    bb60:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    bb64:	mov.w	ip, #0
    bb68:	b.n	bb1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    bb6a:	cmp	r5, r2
    bb6c:	bne.n	bb26 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    bb6e:	cmp	r7, #10
    bb70:	beq.n	bbc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    bb72:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    bb74:	movs	r7, #10
      i = 8;    // Place for extension.
    bb76:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    bb78:	mov.w	r8, #16
    bb7c:	b.n	bb1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    bb7e:	cmp	r3, #45	; 0x2d
    bb80:	bne.n	baf6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    bb82:	sub.w	lr, r3, #33	; 0x21
    bb86:	cmp.w	lr, #93	; 0x5d
    bb8a:	bhi.n	baf6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    bb8c:	cmp	r5, r2
    bb8e:	beq.n	bb6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    bb90:	cmp	r7, r6
    bb92:	bcc.n	bb52 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    bb94:	sub.w	lr, r3, #97	; 0x61
    bb98:	cmp.w	lr, #25
    bb9c:	bhi.n	bbf0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    bb9e:	subs	r3, #32
    bba0:	uxtb	r3, r3
        lc |= bit;
    bba2:	orr.w	r9, r8, r9
    bba6:	b.n	bb04 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    bba8:	sub.w	lr, r3, #91	; 0x5b
    bbac:	cmp.w	lr, #2
    bbb0:	bls.n	baf6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    bbb2:	b.n	bb82 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    bbb4:	str	r7, [r2, #0]
    bbb6:	adds	r7, r0, r4
    bbb8:	b.n	ba58 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    bbba:	cmp	r4, #255	; 0xff
    bbbc:	bgt.w	ba22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    bbc0:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    bbc2:	mov	r3, r4
    bbc4:	b.n	ba72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    bbc6:	ldrb	r3, [r1, #13]
    bbc8:	cmp	r3, #32
    bbca:	beq.w	ba22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    bbce:	ldrb	r3, [r1, #12]
    bbd0:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    bbd2:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    bbd4:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    bbd6:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    bbd8:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    bbda:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    bbdc:	strb	r2, [r3, #14]
    bbde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    bbe2:	str	r0, [r2, #0]
    bbe4:	mov	r4, r3
    bbe6:	mov.w	r5, #4294967295
    bbea:	b.n	ba72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bbec:	mov	sl, r9
    bbee:	b.n	bb30 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    bbf0:	sub.w	lr, r3, #65	; 0x41
    bbf4:	cmp.w	lr, #25
        uc |= bit;
    bbf8:	it	ls
    bbfa:	orrls.w	sl, r8, sl
    bbfe:	b.n	bb04 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    bc00:	.word	0x35000101

0000bc04 <FatFile::remove()>:

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    bc04:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    bc08:	ldrb	r2, [r0, #2]

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    bc0a:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    bc0c:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    bc0e:	lsls	r2, r2, #30
    bc10:	strb.w	r3, [sp, #4]
    bc14:	strb.w	r3, [sp, #5]
    bc18:	strb.w	r3, [sp, #6]
    bc1c:	bpl.n	bc64 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    bc1e:	ldr	r1, [r0, #32]
    bc20:	mov	r5, r0
    bc22:	cbnz	r1, bc6e <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    bc24:	movs	r1, #1
    bc26:	mov	r0, r5
    bc28:	bl	a848 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    bc2c:	cbz	r0, bc64 <FatFile::remove()+0x60>
    bc2e:	subs	r1, r0, #1
    bc30:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    bc34:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bc36:	lsrs	r2, r4, #1
    bc38:	ldrb.w	r6, [r1, #1]!
    bc3c:	orr.w	r3, r2, r4, lsl #7
    bc40:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bc44:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bc46:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bc48:	bne.n	bc36 <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    bc4a:	mov.w	r8, #229	; 0xe5
    bc4e:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    bc52:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    bc54:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bc56:	add.w	r0, r6, #36	; 0x24
    bc5a:	strb	r3, [r5, #0]
  m_flags = 0;
    bc5c:	strb	r3, [r5, #2]
    bc5e:	bl	8ed4 <FsCache::sync()>
    bc62:	cbnz	r0, bc7a <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    bc64:	movs	r6, #0
}
    bc66:	mov	r0, r6
    bc68:	add	sp, #40	; 0x28
    bc6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    bc6e:	ldr	r0, [r0, #8]
    bc70:	bl	b648 <FatPartition::freeChain(unsigned long)>
    bc74:	cmp	r0, #0
    bc76:	bne.n	bc24 <FatFile::remove()+0x20>
    bc78:	b.n	bc64 <FatFile::remove()+0x60>
    bc7a:	add.w	r0, r6, #564	; 0x234
    bc7e:	bl	8ed4 <FsCache::sync()>
    bc82:	cmp	r0, #0
    bc84:	beq.n	bc64 <FatFile::remove()+0x60>
    bc86:	ldr	r0, [r6, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    bc88:	ldr	r3, [r0, #0]
    bc8a:	ldr	r3, [r3, #24]
    bc8c:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bc8e:	mov	r6, r0
    bc90:	cmp	r0, #0
    bc92:	beq.n	bc64 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    bc94:	ldrb	r3, [r5, #3]
    bc96:	cmp	r3, #0
    bc98:	beq.n	bc66 <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    bc9a:	add	r0, sp, #4
    bc9c:	mov	r1, r5
    bc9e:	bl	b89c <FatFile::openCluster(FatFile*)>
    bca2:	cmp	r0, #0
    bca4:	beq.n	bc64 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bca6:	ldrb	r3, [r5, #3]
    bca8:	cmp	r3, #0
    bcaa:	beq.n	bc64 <FatFile::remove()+0x60>
    bcac:	movs	r7, #1
    bcae:	b.n	bcf0 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    bcb0:	add	r0, sp, #4
    bcb2:	bl	add8 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcb6:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    bcb8:	cmp	r0, #0
    bcba:	beq.n	bc64 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bcbc:	ldrb	r2, [r0, #11]
    bcbe:	cmp	r2, #15
    bcc0:	bne.n	bc64 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    bcc2:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bcc4:	and.w	r1, r2, #31
    bcc8:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcca:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bccc:	bne.n	bc64 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    bcce:	ldrb	r3, [r0, #13]
    bcd0:	cmp	r3, r4
    bcd2:	bne.n	bc64 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    bcd4:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    bcd8:	ldr	r1, [r5, #8]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    bcda:	ldrb.w	r3, [r1, #36]	; 0x24
    bcde:	orr.w	r3, r3, #1
    bce2:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    bce6:	lsls	r3, r2, #25
    bce8:	bmi.n	bd04 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcea:	ldrb	r3, [r5, #3]
    bcec:	cmp	r3, r7
    bcee:	bcc.n	bc64 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    bcf0:	ldrh	r1, [r5, #4]
    bcf2:	subs	r1, r1, r7
    bcf4:	lsls	r1, r1, #5
    bcf6:	add	r0, sp, #4
    bcf8:	bl	b048 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    bcfc:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    bcfe:	cmp	r0, #0
    bd00:	bne.n	bcb0 <FatFile::remove()+0xac>
    bd02:	b.n	bc64 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    bd04:	ldr	r4, [r5, #8]
    bd06:	add.w	r0, r4, #36	; 0x24
    bd0a:	bl	8ed4 <FsCache::sync()>
    bd0e:	cmp	r0, #0
    bd10:	beq.n	bc64 <FatFile::remove()+0x60>
    bd12:	add.w	r0, r4, #564	; 0x234
    bd16:	bl	8ed4 <FsCache::sync()>
    bd1a:	cmp	r0, #0
    bd1c:	beq.n	bc64 <FatFile::remove()+0x60>
    bd1e:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    bd20:	ldr	r3, [r0, #0]
    bd22:	ldr	r3, [r3, #24]
    bd24:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bd26:	cmp	r0, #0
    bd28:	beq.n	bc64 <FatFile::remove()+0x60>
    bd2a:	b.n	bc66 <FatFile::remove()+0x62>

0000bd2c <FatFile::lfnUniqueSfn(fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    bd2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    bd30:	ldrb	r7, [r1, #12]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    bd32:	mov	r6, r1
    bd34:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bd36:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    bd3a:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    bd3e:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    bd42:	ldr	r0, [r6, #4]
    bd44:	ldr	r1, [r6, #8]
    bd46:	add.w	r3, r8, r0
    bd4a:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd4c:	cbz	r0, bd60 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    bd4e:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    bd50:	ldrb.w	r2, [r1], #1
    bd54:	add.w	r3, r3, r3, lsl #5
    bd58:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd5a:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    bd5c:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd5e:	bne.n	bd50 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    bd60:	cmp	r7, #3
    bd62:	it	cs
    bd64:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd66:	adds	r2, r7, #4
    bd68:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    bd6a:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bd6e:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd70:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bd72:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd74:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bd76:	ite	ls
    bd78:	addls	r1, #48	; 0x30
    bd7a:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd7c:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    bd7e:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bd82:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd84:	bcc.n	bd6a <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    bd86:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    bd88:	movs	r1, #0
    bd8a:	strb.w	r9, [r3, #13]
    bd8e:	mov	r0, r4
    bd90:	bl	b048 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    bd94:	movs	r1, #1
    bd96:	mov	r0, r4
    bd98:	bl	add8 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bd9c:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    bd9e:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bda0:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    bda2:	cbz	r0, bdd0 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bda4:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bda8:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bdaa:	cmp.w	lr, #0
    bdae:	beq.n	bddc <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bdb0:	ldrb	r3, [r3, #11]
    bdb2:	lsls	r3, r3, #28
    bdb4:	bmi.n	bd94 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    bdb6:	bl	10cc0 <memcmp>
    bdba:	cmp	r0, #0
    bdbc:	bne.n	bd94 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    bdbe:	add.w	r8, r8, #1
    bdc2:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    bdc6:	cmp.w	r8, #100	; 0x64
    bdca:	bne.n	bd42 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
 fail:
  return false;

 done:
  return true;
}
    bdcc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    bdd0:	ldrb	r0, [r4, #1]
    bdd2:	clz	r0, r0
    bdd6:	lsrs	r0, r0, #5
    bdd8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

 fail:
  return false;

 done:
  return true;
    bddc:	movs	r0, #1
    bdde:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bde2:	nop

0000bde4 <FatFile::open(FatFile*, fname_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    bde4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    bde8:	ldrb	r4, [r1, #0]
    bdea:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    bdee:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    bdf0:	beq.n	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bdf2:	ldrb	r4, [r0, #0]
    bdf4:	cbz	r4, bdfe <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    bdf6:	movs	r0, #0
}
    bdf8:	add	sp, #52	; 0x34
    bdfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    bdfe:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    be00:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    be04:	lsls	r4, r4, #30
    be06:	bne.n	be8e <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    be08:	mov.w	r8, #1
    be0c:	mov	r6, r1
    be0e:	mov	fp, r2
    be10:	str	r0, [sp, #36]	; 0x24
    be12:	movs	r1, #0
    be14:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    be16:	mov	r7, r1
    be18:	str	r3, [sp, #28]
    be1a:	bl	b048 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    be1e:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    be22:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    be24:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    be26:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    be28:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    be2a:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    be2c:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    be2e:	movs	r1, #1
    be30:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    be32:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    be34:	bl	add8 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    be38:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    be3c:	mov	r3, r0
    be3e:	cmp	r0, #0
    be40:	beq.w	bf5c <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    be44:	ldrb	r2, [r0, #0]
    be46:	cmp	r2, #229	; 0xe5
    be48:	beq.n	bec0 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    be4a:	cmp	r2, #0
    be4c:	beq.n	bec0 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    be4e:	cmp	r4, r8
    be50:	it	cc
    be52:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    be54:	cmp	r2, #46	; 0x2e
    be56:	beq.n	beba <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    be58:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    be5a:	cmp	r1, #15
    be5c:	beq.n	bedc <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    be5e:	and.w	r1, r1, #8
    be62:	and.w	r2, r1, #255	; 0xff
    be66:	cbnz	r1, beba <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    be68:	cmp.w	r9, #0
    be6c:	bne.w	c130 <FatFile::open(FatFile*, fname_t*, int)+0x34c>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    be70:	mov	r0, r3
    be72:	movs	r2, #11
    be74:	ldr	r1, [sp, #16]
    be76:	bl	10cc0 <memcmp>
    be7a:	cmp	r0, #0
    be7c:	bne.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    be7e:	ldrb.w	r3, [fp]
    be82:	lsls	r0, r3, #31
    be84:	bpl.w	c158 <FatFile::open(FatFile*, fname_t*, int)+0x374>
          goto found;
        }
        fnameFound = true;
    be88:	movs	r3, #1
    be8a:	str	r3, [sp, #20]
    be8c:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    be8e:	ldr	r5, [pc, #732]	; (c16c <FatFile::open(FatFile*, fname_t*, int)+0x388>)
    be90:	add.w	r4, sl, #12
    be94:	umull	r4, r8, r5, r4
    be98:	mov.w	r8, r8, lsr #2
    be9c:	add.w	r8, r8, #1
    bea0:	uxtb.w	r8, r8
    bea4:	b.n	be0c <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    bea6:	ldr	r1, [sp, #12]
    bea8:	subs	r1, #1
    beaa:	uxtb	r1, r1
    beac:	cmp	r2, r1
    beae:	str	r1, [sp, #12]
    beb0:	bne.n	beba <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    beb2:	ldrb	r2, [r3, #13]
    beb4:	ldr	r1, [sp, #24]
    beb6:	cmp	r1, r2
    beb8:	beq.n	bef2 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    beba:	mov.w	r9, #0
    bebe:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    bec0:	cmp	r4, #0
    bec2:	it	eq
    bec4:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    bec6:	cmp	r4, r8
        freeFound++;
    bec8:	itt	cc
    beca:	addcc	r4, #1
    becc:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bece:	cmp	r2, #0
    bed0:	beq.n	bf64 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    bed2:	cmp	r2, #229	; 0xe5
    bed4:	bne.n	be54 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    bed6:	mov.w	r9, #0
    beda:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    bedc:	cmp.w	r9, #0
    bee0:	bne.n	bea6 <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    bee2:	lsls	r5, r2, #25
    bee4:	bpl.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    bee6:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    beea:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    beec:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    bef0:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    bef2:	ldr	r2, [sp, #12]
    bef4:	subs	r2, #1
    bef6:	add.w	r5, r2, r2, lsl #1
    befa:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    befe:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    bf00:	mov	r2, r5
      if (k >= len) {
    bf02:	bls.n	beba <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    bf04:	add.w	r1, r5, #13
    bf08:	str.w	r9, [sp, #32]
    bf0c:	mov	r9, r1
    bf0e:	b.n	bf38 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf10:	ldr.w	r0, [fp, #8]
    bf14:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    bf16:	cmp.w	ip, #25
    bf1a:	it	ls
    bf1c:	addls	r1, #32
    bf1e:	sub.w	r0, r2, #65	; 0x41
    bf22:	it	ls
    bf24:	uxtbls	r1, r1
    bf26:	cmp	r0, #25
    bf28:	itt	ls
    bf2a:	addls	r2, #32
    bf2c:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf2e:	cmp	r1, r2
    bf30:	bne.n	beba <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    bf32:	cmp	lr, r9
    bf34:	beq.n	bfbc <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    bf36:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    bf38:	subs	r1, r2, r5
    bf3a:	uxtb	r1, r1
    bf3c:	mov	r0, r3
    bf3e:	bl	b850 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf42:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    bf44:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    bf46:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf4a:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    bf4e:	beq.w	c122 <FatFile::open(FatFile*, fname_t*, int)+0x33e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf52:	cmp	r0, #255	; 0xff
    bf54:	bls.n	bf10 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    bf56:	mov.w	r9, #0
    bf5a:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    bf5c:	ldrb	r3, [r6, #1]
    bf5e:	cmp	r3, #0
    bf60:	bne.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    bf64:	ldr	r2, [sp, #28]
    bf66:	mov	r3, r2
    bf68:	lsls	r2, r3, #22
    bf6a:	bpl.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bf6e:	and.w	r3, r3, #3
    bf72:	subs	r3, #1
    bf74:	cmp	r3, #1
    bf76:	bhi.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    bf7a:	cmp	r4, #0
    bf7c:	it	eq
    bf7e:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    bf80:	cmp	r4, r8
    bf82:	bcc.n	bf8c <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    bf84:	b.n	bfc2 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    bf86:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    bf88:	cmp	r8, r4
    bf8a:	bls.n	bfc2 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    bf8c:	movs	r1, #0
    bf8e:	mov	r0, r6
    bf90:	bl	add8 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    bf94:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    bf96:	cmp	r0, #0
    bf98:	bne.n	bf86 <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    bf9a:	ldrb	r3, [r6, #1]
    bf9c:	cbz	r3, bfa8 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    bf9e:	b.n	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bfa0:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    bfa2:	ldrb	r3, [r3, #4]
    bfa4:	cmp	r3, #1
    bfa6:	bhi.n	bfc2 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    bfa8:	cmp	r8, r4
    bfaa:	bls.n	bfc2 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    bfac:	mov	r0, r6
    bfae:	bl	a7b0 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    bfb2:	adds	r4, #16
    bfb4:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    bfb6:	cmp	r0, #0
    bfb8:	bne.n	bfa0 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    bfba:	b.n	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bfbc:	ldr.w	r9, [sp, #32]
    bfc0:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    bfc2:	ldr	r3, [sp, #20]
    bfc4:	cbz	r3, bfd4 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    bfc6:	mov	r1, fp
    bfc8:	mov	r0, r6
    bfca:	bl	bd2c <FatFile::lfnUniqueSfn(fname_t*)>
    bfce:	cmp	r0, #0
    bfd0:	beq.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    bfd4:	lsls	r1, r7, #5
    bfd6:	mov	r0, r6
    bfd8:	bl	b048 <FatFile::seekSet(unsigned long)>
    bfdc:	cmp	r0, #0
    bfde:	beq.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    bfe2:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    bfe6:	ands.w	r9, r8, #255	; 0xff
    bfea:	beq.n	c0a0 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    bfec:	orr.w	r4, r9, #64	; 0x40
    bff0:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    bff2:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    bff4:	movs	r7, #0
    bff6:	movs	r1, #0
    bff8:	mov	r0, r6
    bffa:	bl	add8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    bffe:	cmp	r0, #0
    c000:	beq.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    c004:	ldr	r2, [r6, #8]
    c006:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c00a:	cmp	r9, r5
    c00c:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    c010:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c014:	ite	ne
    c016:	movne	r1, r5
    c018:	moveq	r1, r4
    c01a:	strb.w	r3, [r2, #36]	; 0x24
    c01e:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    c022:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    c026:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c028:	strb	r1, [r0, #0]
    c02a:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    c02e:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c030:	ldrb.w	r8, [lr, #1]!
    c034:	lsrs	r2, r3, #1
    c036:	orr.w	r3, r2, r3, lsl #7
    c03a:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c03e:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c040:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c042:	bne.n	c030 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c044:	and.w	r1, r1, #31
    c048:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    c04a:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c04c:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    c050:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    c054:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c056:	add.w	r2, r1, r2, lsl #2
    c05a:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    c05c:	movs	r3, #0
    c05e:	b.n	c080 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c060:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    c062:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c066:	bls.n	c092 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    c068:	cmp	r3, #10
    c06a:	ite	ls
    c06c:	strhls	r1, [r0, #0]
    c06e:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    c070:	adds	r3, #1
    c072:	uxtb	r3, r3
    c074:	cmp	r3, #13
    c076:	add.w	r2, r2, #1
    c07a:	add.w	r0, r0, #2
    c07e:	beq.n	c098 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    c080:	cmp	sl, r2
    c082:	bhi.n	c060 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    c084:	ite	ne
    c086:	movne.w	r1, #4294967295
    c08a:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c08c:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    c08e:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c090:	bhi.n	c068 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    c092:	strh.w	r1, [r0, #-3]
    c096:	b.n	c070 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    c098:	subs	r5, #1
    c09a:	ands.w	r5, r5, #255	; 0xff
    c09e:	bne.n	bff6 <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    c0a0:	movs	r1, #0
    c0a2:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    c0a4:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    c0a6:	bl	add8 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    c0aa:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    c0ae:	mov	r4, r0
    c0b0:	cmp	r0, #0
    c0b2:	beq.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    c0b6:	movs	r2, #32
    c0b8:	movs	r1, #0
    c0ba:	bl	10dec <memset>
  memcpy(dir->name, fname->sfn, 11);
    c0be:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    c0c0:	ldr	r2, [pc, #172]	; (c170 <FatFile::open(FatFile*, fname_t*, int)+0x38c>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    c0c2:	ldr.w	r1, [r3, #13]!
    c0c6:	ldr	r0, [r3, #4]
    c0c8:	str	r0, [r4, #4]
    c0ca:	str	r1, [r4, #0]
    c0cc:	ldrh	r1, [r3, #8]
    c0ce:	ldrb	r3, [r3, #10]
    c0d0:	strb	r3, [r4, #10]
    c0d2:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    c0d4:	ldrb.w	r3, [fp]

  // Set timestamps.
  if (FsDateTime::callback) {
    c0d8:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    c0da:	and.w	r3, r3, #24
    c0de:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    c0e0:	cmp	r7, #0
    c0e2:	beq.n	c160 <FatFile::open(FatFile*, fname_t*, int)+0x37c>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    c0e4:	add.w	r2, sp, #43	; 0x2b
    c0e8:	add.w	r1, sp, #46	; 0x2e
    c0ec:	add	r0, sp, #44	; 0x2c
    c0ee:	blx	r7
    c0f0:	ldrh.w	r1, [sp, #44]	; 0x2c
    c0f4:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    c0f8:	ldrb.w	r3, [sp, #43]	; 0x2b
    c0fc:	strh	r1, [r4, #16]
    c0fe:	strh	r2, [r4, #14]
    c100:	strb	r3, [r4, #13]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    c102:	ldr	r2, [r6, #8]
    c104:	ldrb.w	r3, [r2, #36]	; 0x24
    c108:	orr.w	r3, r3, #1
    c10c:	strb.w	r3, [r2, #36]	; 0x24

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    c110:	str.w	r9, [sp]
    c114:	ldr	r3, [sp, #28]
    c116:	ldr	r0, [sp, #36]	; 0x24
    c118:	mov	r2, r5
    c11a:	mov	r1, r6
    c11c:	bl	b0f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    c120:	b.n	bdf8 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    c122:	cmp	r0, #0
    c124:	ldr.w	r9, [sp, #32]
    c128:	it	ne
    c12a:	movne.w	r9, #0
    c12e:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    c130:	ldr	r1, [sp, #12]
    c132:	cmp	r1, #1
    c134:	bne.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    c138:	subs	r4, r3, #1
    c13a:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c13c:	ldrb.w	r0, [r4, #1]!
    c140:	lsrs	r1, r2, #1
    c142:	orr.w	r2, r1, r2, lsl #7
    c146:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c14a:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c14c:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c14e:	bne.n	c13c <FatFile::open(FatFile*, fname_t*, int)+0x358>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    c150:	ldr	r3, [sp, #24]
    c152:	cmp	r3, r2
    c154:	bne.w	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    c158:	ldr	r3, [sp, #28]
    c15a:	lsls	r1, r3, #20
    c15c:	bpl.n	c110 <FatFile::open(FatFile*, fname_t*, int)+0x32c>
    c15e:	b.n	bdf6 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    c160:	movw	r3, #21025	; 0x5221
    c164:	strh	r3, [r4, #16]
    c166:	strh	r3, [r4, #24]
    c168:	strh	r3, [r4, #18]
    c16a:	b.n	c102 <FatFile::open(FatFile*, fname_t*, int)+0x31e>
    c16c:	.word	0x4ec4ec4f
    c170:	.word	0x20006af8

0000c174 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name) {
    c174:	push	{r3, r4, r5, r6, r7, lr}
    c176:	ldrb	r3, [r0, #0]
    c178:	mov	r5, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t* dir;

  if (!isOpen()) {
    c17a:	cbz	r3, c18e <FatFile::getSFN(char*)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    c17c:	ands.w	r4, r3, #96	; 0x60
    c180:	beq.n	c194 <FatFile::getSFN(char*)+0x20>
    name[0] = '/';
    c182:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    c184:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    c186:	strb	r2, [r1, #0]
    name[1] = '\0';
    c188:	strb	r3, [r1, #1]
    return 1;
    c18a:	movs	r0, #1
    c18c:	pop	{r3, r4, r5, r6, r7, pc}
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    c18e:	movs	r0, #0
    c190:	strb	r0, [r5, #0]
  return 0;
}
    c192:	pop	{r3, r4, r5, r6, r7, pc}
    name[0] = '/';
    name[1] = '\0';
    return 1;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FsCache::CACHE_FOR_READ));
    c194:	mov	r1, r4
    c196:	bl	a848 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    c19a:	cmp	r0, #0
    c19c:	beq.n	c18e <FatFile::getSFN(char*)+0x1a>
    c19e:	mov	r1, r4
    c1a0:	mov	r3, r4
    c1a2:	movs	r7, #8
    c1a4:	subs	r4, r0, #1
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    c1a6:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    c1aa:	ldrb.w	r2, [r4, #1]!
    c1ae:	cmp	r2, #32
    c1b0:	beq.n	c1ce <FatFile::getSFN(char*)+0x5a>
      continue;
    }
    if (i == 8) {
    c1b2:	cmp	r1, #8
    c1b4:	beq.n	c1dc <FatFile::getSFN(char*)+0x68>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    c1b6:	sub.w	r6, r2, #65	; 0x41
    c1ba:	cmp	r6, #25
    c1bc:	bhi.n	c1c8 <FatFile::getSFN(char*)+0x54>
    c1be:	ldrb	r6, [r0, #12]
    c1c0:	tst	r7, r6
      c += 'a' - 'A';
    c1c2:	itt	ne
    c1c4:	addne	r2, #32
    c1c6:	uxtbne	r2, r2
    }
    name[j++] = c;
    c1c8:	strb	r2, [r5, r3]
    c1ca:	adds	r3, #1
    c1cc:	uxtb	r3, r3
    c1ce:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    c1d0:	cmp	r1, #11
    c1d2:	bne.n	c1aa <FatFile::getSFN(char*)+0x36>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = '\0';
    c1d4:	movs	r2, #0
    c1d6:	strb	r2, [r5, r3]
  return j;
    c1d8:	mov	r0, r3
    c1da:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    c1dc:	strb.w	lr, [r5, r3]
    c1e0:	adds	r3, #1
    c1e2:	uxtb	r3, r3
    c1e4:	ldrb	r2, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    c1e6:	movs	r7, #16
    c1e8:	b.n	c1b6 <FatFile::getSFN(char*)+0x42>
    c1ea:	nop

0000c1ec <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    c1ec:	push	{r3, r4, r5, r6, r7, lr}
    c1ee:	movs	r5, #0
    c1f0:	str	r5, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    c1f2:	ldr	r4, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    c1f4:	str	r5, [r0, #60]	; 0x3c
    c1f6:	mov	r6, r0
    c1f8:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    c1fa:	cbz	r4, c220 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    c1fc:	mov	r1, r0
    c1fe:	movs	r0, #36	; 0x24
    c200:	bl	c45c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    c204:	strb	r5, [r0, #0]
    c206:	strb	r5, [r0, #1]
    c208:	strb	r5, [r0, #2]
    c20a:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    c20c:	ldr	r5, [r7, #56]	; 0x38
    c20e:	mov	r4, r0
    c210:	ldmia	r5!, {r0, r1, r2, r3}
    c212:	stmia	r4!, {r0, r1, r2, r3}
    c214:	ldmia	r5!, {r0, r1, r2, r3}
    c216:	stmia	r4!, {r0, r1, r2, r3}
    c218:	ldr	r3, [r5, #0]
    c21a:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    c21c:	mov	r0, r6
    c21e:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    c220:	ldr	r3, [r1, #60]	; 0x3c
    c222:	cmp	r3, #0
    c224:	beq.n	c21c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    c226:	mov	r1, r0
    c228:	movs	r0, #56	; 0x38
    c22a:	bl	c45c <operator new(unsigned int, unsigned long*)>
    c22e:	strb.w	r4, [r0, #49]	; 0x31
    c232:	strb.w	r4, [r0, #50]	; 0x32
    c236:	strb.w	r4, [r0, #51]	; 0x33
    c23a:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    c23c:	ldr	r3, [r7, #60]	; 0x3c
    c23e:	mov	r2, r0
    c240:	add.w	r1, r3, #48	; 0x30
    c244:	ldr	r5, [r3, #0]
    c246:	ldr	r4, [r3, #4]
    c248:	ldr	r0, [r3, #8]
    c24a:	ldr	r7, [r3, #12]
    c24c:	str	r7, [r2, #12]
    c24e:	adds	r3, #16
    c250:	cmp	r3, r1
    c252:	str	r5, [r2, #0]
    c254:	str	r4, [r2, #4]
    c256:	str	r0, [r2, #8]
    c258:	add.w	r2, r2, #16
    c25c:	bne.n	c244 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    c25e:	ldr	r3, [r3, #0]
    c260:	str	r3, [r2, #0]
    c262:	b.n	c21c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000c264 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    c264:	push	{r4, lr}
    c266:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    c268:	ldr	r0, [r0, #56]	; 0x38
    c26a:	cbz	r0, c278 <FsBaseFile::close()+0x14>
    c26c:	bl	a8fc <FatFile::close()>
    c270:	cbz	r0, c278 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    c272:	movs	r3, #0
    c274:	str	r3, [r4, #56]	; 0x38
    return true;
    c276:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    c278:	ldr	r0, [r4, #60]	; 0x3c
    c27a:	cbz	r0, c288 <FsBaseFile::close()+0x24>
    c27c:	bl	8ee4 <ExFatFile::close()>
    c280:	cbz	r0, c288 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    c282:	movs	r3, #0
    c284:	str	r3, [r4, #60]	; 0x3c
    c286:	pop	{r4, pc}
    return true;
  }
  return false;
    c288:	movs	r0, #0
}
    c28a:	pop	{r4, pc}

0000c28c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    c28c:	cbz	r1, c302 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    c28e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c292:	mov	r4, r1
    c294:	mov	r5, r0
    c296:	mov	r8, r3
    c298:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    c29a:	bl	c264 <FsBaseFile::close()>
  if (vol->m_fVol) {
    c29e:	ldr.w	r6, [r4, #1152]	; 0x480
    c2a2:	cbz	r6, c2d0 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    c2a4:	mov	r1, r5
    c2a6:	movs	r0, #36	; 0x24
    c2a8:	bl	c45c <operator new(unsigned int, unsigned long*)>
    c2ac:	movs	r1, #0
    c2ae:	strb	r1, [r0, #0]
    c2b0:	strb	r1, [r0, #1]
    c2b2:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    c2b4:	ldr.w	r1, [r4, #1152]	; 0x480
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    c2b8:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    c2ba:	mov	r3, r8
    c2bc:	mov	r2, r7
    c2be:	bl	abf0 <FatFile::open(FatVolume*, char const*, int)>
    c2c2:	cbz	r0, c2ca <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    c2c4:	movs	r0, #1
    c2c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    c2ca:	str	r0, [r5, #56]	; 0x38
    c2cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    c2d0:	ldr.w	r3, [r4, #1156]	; 0x484
    c2d4:	cbz	r3, c306 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    c2d6:	mov	r1, r5
    c2d8:	movs	r0, #56	; 0x38
    c2da:	bl	c45c <operator new(unsigned int, unsigned long*)>
    c2de:	strb.w	r6, [r0, #49]	; 0x31
    c2e2:	strb.w	r6, [r0, #50]	; 0x32
    c2e6:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    c2ea:	ldr.w	r1, [r4, #1156]	; 0x484
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    c2ee:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    c2f0:	mov	r3, r8
    c2f2:	mov	r2, r7
    c2f4:	bl	9848 <ExFatFile::open(ExFatVolume*, char const*, int)>
    c2f8:	cmp	r0, #0
    c2fa:	bne.n	c2c4 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    c2fc:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    c2fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    c302:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    c304:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    c306:	movs	r0, #0
    c308:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c30c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    c30c:	push	{r3, r4, r5, r6, r7, lr}
    c30e:	mov	r5, r1
    c310:	mov	r7, r2
    c312:	mov	r4, r0
  close();
    c314:	bl	c264 <FsBaseFile::close()>
  if (dir->m_fFile) {
    c318:	ldr	r6, [r5, #56]	; 0x38
    c31a:	cbz	r6, c340 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    c31c:	mov	r1, r4
    c31e:	movs	r0, #36	; 0x24
    c320:	bl	c45c <operator new(unsigned int, unsigned long*)>
    c324:	movs	r2, #0
    c326:	strb	r2, [r0, #0]
    c328:	strb	r2, [r0, #1]
    c32a:	strb	r2, [r0, #2]
    c32c:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    c32e:	mov	r2, r7
    c330:	ldr	r1, [r5, #56]	; 0x38
    c332:	bl	b1d0 <FatFile::openNext(FatFile*, int)>
    c336:	cbz	r0, c33c <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    c338:	movs	r0, #1
    c33a:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    c33c:	str	r0, [r4, #56]	; 0x38
    c33e:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    c340:	ldr	r0, [r5, #60]	; 0x3c
    c342:	cbz	r0, c368 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    c344:	mov	r1, r4
    c346:	movs	r0, #56	; 0x38
    c348:	bl	c45c <operator new(unsigned int, unsigned long*)>
    c34c:	strb.w	r6, [r0, #49]	; 0x31
    c350:	strb.w	r6, [r0, #50]	; 0x32
    c354:	strb.w	r6, [r0, #51]	; 0x33
    c358:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    c35a:	mov	r2, r7
    c35c:	ldr	r1, [r5, #60]	; 0x3c
    c35e:	bl	9858 <ExFatFile::openNext(ExFatFile*, int)>
    c362:	cmp	r0, #0
    c364:	bne.n	c338 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    c366:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    c368:	pop	{r3, r4, r5, r6, r7, pc}
    c36a:	nop

0000c36c <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    c36c:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    c36e:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    c370:	mov	r4, r0
  m_blockDev = blockDev;
    c372:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    c376:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    c37a:	mov	r1, r0
    c37c:	mov.w	r0, #1152	; 0x480
    c380:	bl	c45c <operator new(unsigned int, unsigned long*)>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    c384:	strb.w	r6, [r0, #1092]	; 0x444
    c388:	strb.w	r6, [r0, #1145]	; 0x479
    c38c:	strb.w	r6, [r0, #1146]	; 0x47a
    c390:	strb.w	r6, [r0, #1147]	; 0x47b
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    c394:	movs	r2, #1
    c396:	ldr.w	r1, [r4, #1160]	; 0x488
    c39a:	str.w	r0, [r4, #1156]	; 0x484
    c39e:	mov	r5, r0
    c3a0:	bl	9c48 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    c3a4:	cbnz	r0, c3e2 <FsVolume::begin(BlockDeviceInterface*)+0x76>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    c3a6:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    c3a8:	mov	r1, r4
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    c3aa:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    c3ae:	mov.w	r0, #1128	; 0x468
    c3b2:	bl	c45c <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    c3b6:	strb	r6, [r0, #7]
    c3b8:	strb.w	r6, [r0, #1092]	; 0x444
    c3bc:	strb.w	r6, [r0, #1093]	; 0x445
    c3c0:	strb.w	r6, [r0, #1094]	; 0x446
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    c3c4:	movs	r2, #1
    c3c6:	ldr.w	r1, [r4, #1160]	; 0x488
    c3ca:	str.w	r0, [r4, #1152]	; 0x480
    c3ce:	mov	r5, r0
    c3d0:	bl	b734 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    c3d4:	cbnz	r0, c406 <FsVolume::begin(BlockDeviceInterface*)+0x9a>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    c3d6:	ldr	r3, [pc, #80]	; (c428 <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
    c3d8:	movs	r0, #0
    c3da:	str	r0, [r3, #0]
  m_fVol = nullptr;
    c3dc:	str.w	r0, [r4, #1152]	; 0x480
  return false;

 done:
  m_cwv = this;
  return true;
}
    c3e0:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    c3e2:	add.w	r6, r5, #1096	; 0x448
    c3e6:	mov	r0, r6
    c3e8:	bl	8ee4 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    c3ec:	mov	r1, r5
    c3ee:	mov	r0, r6
    c3f0:	bl	8fa8 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    c3f4:	cmp	r0, #0
    c3f6:	beq.n	c3a6 <FsVolume::begin(BlockDeviceInterface*)+0x3a>
      return false;
    }
    if (setCwv || !m_cwv) {
    c3f8:	ldr	r3, [pc, #48]	; (c42c <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    c3fa:	ldr	r2, [r3, #0]
    c3fc:	cbz	r2, c424 <FsVolume::begin(BlockDeviceInterface*)+0xb8>
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    c3fe:	ldr	r3, [pc, #40]	; (c428 <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
  return true;
    c400:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    c402:	str	r4, [r3, #0]
  return true;
    c404:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    c406:	addw	r6, r5, #1092	; 0x444
    c40a:	mov	r0, r6
    c40c:	bl	a8fc <FatFile::close()>
    return m_vwd.openRoot(this);
    c410:	mov	r1, r5
    c412:	mov	r0, r6
    c414:	bl	ac00 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    c418:	cmp	r0, #0
    c41a:	beq.n	c3d6 <FsVolume::begin(BlockDeviceInterface*)+0x6a>
      return false;
    }
    if (setCwv || !m_cwv) {
    c41c:	ldr	r3, [pc, #16]	; (c430 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
    c41e:	ldr	r2, [r3, #0]
    c420:	cmp	r2, #0
    c422:	bne.n	c3fe <FsVolume::begin(BlockDeviceInterface*)+0x92>
      m_cwv = this;
    c424:	str	r5, [r3, #0]
    c426:	b.n	c3fe <FsVolume::begin(BlockDeviceInterface*)+0x92>
    c428:	.word	0x20006b04
    c42c:	.word	0x20006afc
    c430:	.word	0x20006b00

0000c434 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    c434:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    c436:	movs	r5, #0
    c438:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c43c:	ldr	r6, [pc, #24]	; (c458 <FsVolume::open(char const*, int)+0x24>)
    c43e:	str	r7, [r0, #8]
    c440:	mov	r4, r0
    c442:	strb	r5, [r0, #4]
    c444:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    c446:	str	r5, [r0, #72]	; 0x48
    c448:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c44a:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    c44e:	bl	c28c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    c452:	mov	r0, r4
    c454:	pop	{r3, r4, r5, r6, r7, pc}
    c456:	nop
    c458:	.word	0x000148f8

0000c45c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    c45c:	mov	r0, r1
    c45e:	bx	lr

0000c460 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    c460:	ldrb	r0, [r0, #19]
    c462:	bx	lr

0000c464 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    c464:	ldrb	r0, [r0, #21]
    c466:	bx	lr

0000c468 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    c468:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    c46a:	ldr	r4, [r0, #0]
    c46c:	ldr	r4, [r4, #16]
    c46e:	movs	r3, #1
    c470:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    c472:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    c476:	bx	ip

0000c478 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    c478:	ldrb	r0, [r0, #22]
    c47a:	bx	lr

0000c47c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    c47c:	bx	lr
    c47e:	nop

0000c480 <SdSpiCard::~SdSpiCard()>:
    c480:	push	{r4, lr}
    c482:	movs	r1, #24
    c484:	mov	r4, r0
    c486:	bl	f924 <operator delete(void*, unsigned int)>
    c48a:	mov	r0, r4
    c48c:	pop	{r4, pc}
    c48e:	nop

0000c490 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    c490:	push	{r4, lr}
    c492:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    c494:	adds	r0, #4
    c496:	bl	d914 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c49a:	ldrb	r0, [r4, #18]
    c49c:	movs	r1, #0
    c49e:	bl	daec <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    c4a2:	movs	r3, #1
    c4a4:	strb	r3, [r4, #20]
    c4a6:	pop	{r4, pc}

0000c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    c4a8:	push	{r3, r4, r5, lr}
    c4aa:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c4ac:	movs	r1, #1
    c4ae:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c4b0:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c4b2:	bl	daec <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c4b6:	mov	r0, r5
    c4b8:	movs	r1, #255	; 0xff
    c4ba:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    c4be:	mov	r0, r5
    c4c0:	bl	d9f4 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    c4c4:	movs	r3, #0
    c4c6:	strb	r3, [r4, #20]
    c4c8:	pop	{r3, r4, r5, pc}
    c4ca:	nop

0000c4cc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c4cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4d0:	mov	r6, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c4d2:	ldrb	r1, [r0, #16]
    c4d4:	cmp	r1, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c4d6:	mov	r5, r0
    c4d8:	mov	r4, r2
    c4da:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c4dc:	beq.n	c522 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    if (!writeStart(sector)) {
    c4de:	ldr	r3, [r5, #0]
    c4e0:	mov	r1, r6
    c4e2:	ldr	r3, [r3, #72]	; 0x48
    c4e4:	mov	r0, r5
    c4e6:	blx	r3
    c4e8:	cbz	r0, c50e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    c4ea:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    c4ec:	str	r6, [r5, #12]
    m_curState = WRITE_STATE;
    c4ee:	strb	r3, [r5, #16]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c4f0:	movs	r6, #0
    c4f2:	cbnz	r7, c4fa <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    c4f4:	b.n	c52a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    c4f6:	cmp	r7, r6
    c4f8:	beq.n	c52a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    if (!writeData(src)) {
    c4fa:	ldr	r3, [r5, #0]
    c4fc:	mov	r1, r4
    c4fe:	ldr	r3, [r3, #68]	; 0x44
    c500:	mov	r0, r5
    c502:	blx	r3
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c504:	adds	r6, #1
    c506:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    c50a:	cmp	r0, #0
    c50c:	bne.n	c4f6 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c50e:	ldrb	r0, [r5, #20]
    c510:	cbnz	r0, c516 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    c512:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c516:	mov	r0, r5
    c518:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
    c51c:	movs	r0, #0
}
    c51e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c522:	ldr	r3, [r0, #12]
    c524:	cmp	r3, r6
    c526:	bne.n	c4de <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    c528:	b.n	c4f0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c52a:	ldr	r3, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    c52c:	ldrb	r2, [r5, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c52e:	add	r7, r3
    c530:	str	r7, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    c532:	cbnz	r2, c53a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6e>
    c534:	movs	r0, #1
    c536:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c53a:	ldr	r3, [r5, #0]
    c53c:	mov	r0, r5
    c53e:	ldr	r3, [r3, #24]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    c540:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    c544:	bx	r3
    c546:	nop

0000c548 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    c548:	push	{r3, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    c54a:	ldrb	r3, [r0, #16]
    c54c:	cmp	r3, #1
    c54e:	beq.n	c592 <SdSpiCard::isBusy()+0x4a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
  bool spiActive = m_spiActive;
    c550:	ldrb	r7, [r0, #20]
    c552:	mov	r5, r0
  if (!spiActive) {
    c554:	cbz	r7, c582 <SdSpiCard::isBusy()+0x3a>
    c556:	adds	r6, r5, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    c558:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c55a:	mov	r0, r6
    c55c:	bl	da3c <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    c560:	cmp	r0, #255	; 0xff
    c562:	add.w	r3, r4, #4294967295
    c566:	beq.n	c57a <SdSpiCard::isBusy()+0x32>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    c568:	ands.w	r4, r3, #255	; 0xff
    c56c:	bne.n	c55a <SdSpiCard::isBusy()+0x12>
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
    c56e:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    c570:	cbnz	r7, c576 <SdSpiCard::isBusy()+0x2e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c572:	ldrb	r3, [r5, #20]
    c574:	cbnz	r3, c588 <SdSpiCard::isBusy()+0x40>
    }
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    c576:	mov	r0, r4
}
    c578:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    c57a:	movs	r4, #0
      break;
    }
  }
  if (!spiActive) {
    c57c:	cmp	r7, #0
    c57e:	beq.n	c572 <SdSpiCard::isBusy()+0x2a>
    c580:	b.n	c576 <SdSpiCard::isBusy()+0x2e>
    c582:	bl	c490 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    c586:	b.n	c556 <SdSpiCard::isBusy()+0xe>
    c588:	mov	r0, r5
    c58a:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    spiStop();
  }
  return rtn;
    c58e:	mov	r0, r4
    c590:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    c592:	movs	r0, #0
    c594:	pop	{r3, r4, r5, r6, r7, pc}
    c596:	nop

0000c598 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    c598:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c59c:	ldr	r6, [pc, #116]	; (c614 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    c59e:	sub	sp, #12
    c5a0:	ldr	r3, [r6, #0]
    c5a2:	str	r3, [sp, #0]
	return ret;
    c5a4:	ldr	r5, [sp, #0]
    c5a6:	mov	r4, r0
    c5a8:	mov	r8, r1
    c5aa:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    c5ac:	uxth	r5, r5
    c5ae:	adds	r7, r0, #4
    c5b0:	b.n	c5c2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c5b2:	ldr	r3, [r6, #0]
    c5b4:	str	r3, [sp, #4]
	return ret;
    c5b6:	ldr	r3, [sp, #4]
    c5b8:	uxth	r3, r3
    c5ba:	subs	r3, r3, r5
    c5bc:	cmp.w	r3, #300	; 0x12c
    c5c0:	bgt.n	c5e8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    c5c2:	mov	r0, r7
    c5c4:	bl	da3c <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    c5c8:	cmp	r0, #255	; 0xff
    c5ca:	strb	r0, [r4, #21]
    c5cc:	beq.n	c5b2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    c5ce:	cmp	r0, #254	; 0xfe
    c5d0:	beq.n	c5ee <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c5d2:	movs	r3, #24
    c5d4:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c5d6:	ldrb	r0, [r4, #20]
    c5d8:	cbz	r0, c5e2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    c5da:	mov	r0, r4
    c5dc:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    c5e0:	movs	r0, #0
}
    c5e2:	add	sp, #12
    c5e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c5e8:	movs	r3, #29
    c5ea:	strb	r3, [r4, #19]
    c5ec:	b.n	c5d6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    c5ee:	mov	r2, r9
    c5f0:	mov	r1, r8
    c5f2:	mov	r0, r7
    c5f4:	bl	da58 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    c5f8:	strb	r0, [r4, #21]
    c5fa:	cbz	r0, c602 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c5fc:	movs	r3, #37	; 0x25
    c5fe:	strb	r3, [r4, #19]
    c600:	b.n	c5d6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c602:	mov	r0, r7
    c604:	bl	da3c <SdSpiArduinoDriver::receive()>
    c608:	mov	r0, r7
    c60a:	bl	da3c <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    c60e:	movs	r0, #1
    c610:	b.n	c5e2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    c612:	nop
    c614:	.word	0x2000701c

0000c618 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    c618:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c61a:	ldr	r5, [pc, #52]	; (c650 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    c61c:	sub	sp, #12
    c61e:	ldr	r3, [r5, #0]
    c620:	str	r3, [sp, #0]
	return ret;
    c622:	ldr	r4, [sp, #0]
    c624:	mov	r7, r1
    c626:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    c628:	uxth	r4, r4
    c62a:	b.n	c63a <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c62c:	ldr	r3, [r5, #0]
    c62e:	str	r3, [sp, #4]
	return ret;
    c630:	ldr	r3, [sp, #4]
    c632:	uxth	r3, r3
    c634:	subs	r3, r3, r4
    c636:	cmp	r3, r7
    c638:	bgt.n	c64a <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    c63a:	mov	r0, r6
    c63c:	bl	da3c <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    c640:	cmp	r0, #255	; 0xff
    c642:	bne.n	c62c <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    c644:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    c646:	add	sp, #12
    c648:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    c64a:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    c64c:	add	sp, #12
    c64e:	pop	{r4, r5, r6, r7, pc}
    c650:	.word	0x2000701c

0000c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    c654:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c658:	sub	sp, #8
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c65a:	ldrb	r3, [r0, #16]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    c65c:	str	r2, [sp, #4]
    c65e:	mov	r4, r0
    c660:	mov	r7, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c662:	cbnz	r3, c6c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
    return 0XFF;
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    c664:	ldrb	r3, [r4, #20]
    c666:	cmp	r3, #0
    c668:	beq.n	c6e2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    c66a:	cmp	r7, #0
    c66c:	bne.n	c6d6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x82>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c66e:	adds	r5, r4, #4
    c670:	mov	r0, r5
    c672:	orr.w	r1, r7, #64	; 0x40
    c676:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
    c67a:	add.w	r8, sp, #4
    c67e:	add	r6, sp, #8
    c680:	ldrb.w	r1, [r6, #-1]!
    c684:	mov	r0, r5
    c686:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    c68a:	cmp	r8, r6
    c68c:	bne.n	c680 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    c68e:	cmp	r7, #0
    c690:	ite	eq
    c692:	moveq	r1, #149	; 0x95
    c694:	movne	r1, #135	; 0x87
    c696:	mov	r0, r5
    c698:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c69c:	mov	r0, r5
    c69e:	bl	da3c <SdSpiArduinoDriver::receive()>
    c6a2:	movs	r6, #11
    c6a4:	mov	r0, r5
    c6a6:	bl	da3c <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c6aa:	lsls	r3, r0, #24
    c6ac:	strb	r0, [r4, #21]
    c6ae:	bmi.n	c6b6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    c6b0:	add	sp, #8
    c6b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6b6:	subs	r3, r6, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c6b8:	ands.w	r6, r3, #255	; 0xff
    c6bc:	bne.n	c6a4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    c6be:	add	sp, #8
    c6c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c6c4:	ldr	r3, [r0, #0]
    c6c6:	ldr	r3, [r3, #24]
    c6c8:	blx	r3
    c6ca:	cmp	r0, #0
    c6cc:	bne.n	c664 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x10>
    return 0XFF;
    c6ce:	movs	r0, #255	; 0xff

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
  }
  return m_status;
}
    c6d0:	add	sp, #8
    c6d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    c6d6:	mov.w	r1, #300	; 0x12c
    c6da:	mov	r0, r4
    c6dc:	bl	c618 <SdSpiCard::waitNotBusy(unsigned short)>
    c6e0:	b.n	c66e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    c6e2:	mov	r0, r4
    c6e4:	bl	c490 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    c6e8:	b.n	c66a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    c6ea:	nop

0000c6ec <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c6ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6f0:	sub	sp, #40	; 0x28
    c6f2:	add	r5, sp, #4
    c6f4:	stmia.w	r5, {r1, r2, r3}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c6f8:	ldr	r7, [pc, #492]	; (c8e8 <SdSpiCard::begin(SdSpiConfig)+0x1fc>)
    c6fa:	ldrb.w	r3, [sp, #4]
    c6fe:	ldr	r2, [r7, #0]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    c700:	strb	r3, [r0, #18]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c702:	mov	r6, r0
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    c704:	mov.w	sl, #0
    c708:	str	r2, [sp, #20]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c70a:	mov	r0, r3
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    c70c:	strb.w	sl, [r6, #20]
  m_errorCode = SD_CARD_ERROR_NONE;
    c710:	strb.w	sl, [r6, #19]
  m_type = 0;
    c714:	strb.w	sl, [r6, #22]
    c718:	ldrb.w	r4, [sp, #5]
	return ret;
    c71c:	ldr.w	r8, [sp, #20]
    c720:	ldr.w	r9, [sp, #8]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c724:	bl	dae4 <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c728:	ldrb	r0, [r6, #18]
    c72a:	movs	r1, #1
    c72c:	bl	daec <sdCsWrite(unsigned char, bool)>
    c730:	ldmia.w	r5, {r0, r1, r2}
    c734:	add	r3, sp, #28
    c736:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    c73a:	adds	r5, r6, #4
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    c73c:	ldr	r2, [pc, #428]	; (c8ec <SdSpiCard::begin(SdSpiConfig)+0x200>)
    c73e:	str	r2, [r6, #8]
    c740:	mov	r0, r5
    c742:	ldmia	r3, {r1, r2, r3}
    c744:	bl	d9a4 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c748:	and.w	r3, r4, #1
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    c74c:	ldrb	r2, [r6, #20]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
    c74e:	strb.w	sl, [r6, #16]
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c752:	eor.w	r3, r3, #1
    c756:	strb	r3, [r6, #17]
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    c758:	cmp	r2, #0
    c75a:	beq.w	c874 <SdSpiCard::begin(SdSpiConfig)+0x188>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c75e:	movs	r1, #1
    c760:	ldrb	r0, [r6, #18]
    c762:	bl	daec <sdCsWrite(unsigned char, bool)>
    c766:	movs	r4, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c768:	movs	r1, #255	; 0xff
    c76a:	mov	r0, r5
    c76c:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
    c770:	subs	r3, r4, #1
#endif  // ENABLE_DEDICATED_SPI
  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    c772:	ands.w	r4, r3, #255	; 0xff
    c776:	bne.n	c768 <SdSpiCard::begin(SdSpiConfig)+0x7c>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c778:	mov	r1, r4
    c77a:	ldrb	r0, [r6, #18]
    c77c:	bl	daec <sdCsWrite(unsigned char, bool)>
    c780:	mov.w	sl, #10
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    c784:	movs	r2, #0
    c786:	mov	r1, r2
    c788:	mov	r0, r6
    c78a:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c78e:	cmp	r0, #1
    c790:	mov	r4, r0
    c792:	beq.n	c7d2 <SdSpiCard::begin(SdSpiConfig)+0xe6>
    c794:	add.w	r3, sl, #4294967295
      break;
    }
    if (i == SD_CMD0_RETRY) {
    c798:	ands.w	sl, r3, #255	; 0xff
    c79c:	beq.n	c7b6 <SdSpiCard::begin(SdSpiConfig)+0xca>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c79e:	movs	r1, #253	; 0xfd
    c7a0:	mov	r0, r5
    c7a2:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
    c7a6:	mov.w	r4, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c7aa:	mov	r0, r5
    c7ac:	bl	da3c <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    c7b0:	subs	r4, #1
    c7b2:	bne.n	c7aa <SdSpiCard::begin(SdSpiConfig)+0xbe>
    c7b4:	b.n	c784 <SdSpiCard::begin(SdSpiConfig)+0x98>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c7b6:	movs	r3, #1
    c7b8:	strb	r3, [r6, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c7ba:	ldrb	r0, [r6, #20]
    c7bc:	cbnz	r0, c7c4 <SdSpiCard::begin(SdSpiConfig)+0xd8>
  return true;

 fail:
  spiStop();
  return false;
}
    c7be:	add	sp, #40	; 0x28
    c7c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7c4:	mov	r0, r6
    c7c6:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

 fail:
  spiStop();
  return false;
    c7ca:	movs	r0, #0
}
    c7cc:	add	sp, #40	; 0x28
    c7ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    c7d2:	mov.w	r2, #426	; 0x1aa
    c7d6:	movs	r1, #8
    c7d8:	mov	r0, r6
    c7da:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c7de:	lsls	r3, r0, #29
    c7e0:	bpl.n	c87c <SdSpiCard::begin(SdSpiConfig)+0x190>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c7e2:	strb	r4, [r6, #22]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c7e4:	ldr	r3, [r6, #0]
    c7e6:	ldr.w	sl, [pc, #276]	; c8fc <SdSpiCard::begin(SdSpiConfig)+0x210>
    c7ea:	ldr	r3, [r3, #64]	; 0x40
    c7ec:	cmp	r3, sl
    c7ee:	bne.n	c8a2 <SdSpiCard::begin(SdSpiConfig)+0x1b6>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c7f0:	ldrb	r0, [r6, #22]
    c7f2:	cmp	r0, #2
    c7f4:	ite	eq
    c7f6:	moveq.w	r4, #1073741824	; 0x40000000
    c7fa:	movne	r4, #0
    c7fc:	b.n	c80e <SdSpiCard::begin(SdSpiConfig)+0x122>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c7fe:	ldr	r3, [r7, #0]
    c800:	str	r3, [sp, #24]
	return ret;
    c802:	ldr	r3, [sp, #24]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    c804:	uxth	r3, r3
    c806:	subs	r3, r3, r2
    c808:	cmp.w	r3, #2000	; 0x7d0
    c80c:	bgt.n	c89c <SdSpiCard::begin(SdSpiConfig)+0x1b0>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c80e:	movs	r2, #0
    c810:	movs	r1, #55	; 0x37
    c812:	mov	r0, r6
    c814:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    c818:	mov	r2, r4
    c81a:	movs	r1, #41	; 0x29
    c81c:	mov	r0, r6
    c81e:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c822:	uxth.w	r2, r8
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c826:	cmp	r0, #0
    c828:	bne.n	c7fe <SdSpiCard::begin(SdSpiConfig)+0x112>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c82a:	ldr	r3, [r6, #0]
    c82c:	ldr	r3, [r3, #64]	; 0x40
    c82e:	cmp	r3, sl
    c830:	bne.n	c8a8 <SdSpiCard::begin(SdSpiConfig)+0x1bc>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c832:	ldrb	r0, [r6, #22]
    c834:	cmp	r0, #2
    c836:	beq.n	c8ae <SdSpiCard::begin(SdSpiConfig)+0x1c2>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c838:	ldrb	r3, [r6, #20]
    c83a:	cbz	r3, c842 <SdSpiCard::begin(SdSpiConfig)+0x156>
    c83c:	mov	r0, r6
    c83e:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    c842:	ldr	r1, [pc, #172]	; (c8f0 <SdSpiCard::begin(SdSpiConfig)+0x204>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c844:	ldr	r4, [pc, #172]	; (c8f4 <SdSpiCard::begin(SdSpiConfig)+0x208>)
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c846:	movs	r3, #0
    c848:	b.n	c850 <SdSpiCard::begin(SdSpiConfig)+0x164>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    c84a:	cmp	r0, #23
    c84c:	beq.n	c860 <SdSpiCard::begin(SdSpiConfig)+0x174>
    c84e:	mov	r3, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c850:	ldrh.w	r2, [r1, #2]!
    c854:	sdiv	r2, r4, r2
    c858:	cmp	r9, r2
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    c85a:	add.w	r0, r3, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c85e:	bcc.n	c84a <SdSpiCard::begin(SdSpiConfig)+0x15e>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    c860:	ldr	r2, [pc, #148]	; (c8f8 <SdSpiCard::begin(SdSpiConfig)+0x20c>)
    c862:	ldr.w	r3, [r2, r3, lsl #2]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    c866:	movs	r0, #1
    c868:	orr.w	r3, r3, #939524096	; 0x38000000
    c86c:	str	r3, [r6, #8]

 fail:
  spiStop();
  return false;
}
    c86e:	add	sp, #40	; 0x28
    c870:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c874:	mov	r0, r6
    c876:	bl	c490 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    c87a:	b.n	c75e <SdSpiCard::begin(SdSpiConfig)+0x72>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c87c:	movs	r3, #2
    c87e:	strb	r3, [r6, #22]
    c880:	movs	r4, #4
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c882:	mov	r0, r5
    c884:	bl	da3c <SdSpiArduinoDriver::receive()>
    c888:	subs	r4, #1
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c88a:	ands.w	r4, r4, #255	; 0xff
      m_status = spiReceive();
    c88e:	strb	r0, [r6, #21]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c890:	bne.n	c882 <SdSpiCard::begin(SdSpiConfig)+0x196>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    c892:	cmp	r0, #170	; 0xaa
    c894:	beq.n	c7e4 <SdSpiCard::begin(SdSpiConfig)+0xf8>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c896:	movs	r3, #6
    c898:	strb	r3, [r6, #19]
    c89a:	b.n	c7ba <SdSpiCard::begin(SdSpiConfig)+0xce>
    c89c:	movs	r3, #23
    c89e:	strb	r3, [r6, #19]
    c8a0:	b.n	c7ba <SdSpiCard::begin(SdSpiConfig)+0xce>
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c8a2:	mov	r0, r6
    c8a4:	blx	r3
    c8a6:	b.n	c7f2 <SdSpiCard::begin(SdSpiConfig)+0x106>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c8a8:	mov	r0, r6
    c8aa:	blx	r3
    c8ac:	b.n	c834 <SdSpiCard::begin(SdSpiConfig)+0x148>
    if (cardCommand(CMD58, 0)) {
    c8ae:	movs	r2, #0
    c8b0:	movs	r1, #58	; 0x3a
    c8b2:	mov	r0, r6
    c8b4:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c8b8:	cbz	r0, c8c0 <SdSpiCard::begin(SdSpiConfig)+0x1d4>
    c8ba:	movs	r3, #18
    c8bc:	strb	r3, [r6, #19]
    c8be:	b.n	c7ba <SdSpiCard::begin(SdSpiConfig)+0xce>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c8c0:	mov	r0, r5
    c8c2:	bl	da3c <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    c8c6:	and.w	r0, r0, #192	; 0xc0
    c8ca:	cmp	r0, #192	; 0xc0
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c8cc:	itt	eq
    c8ce:	moveq	r3, #3
    c8d0:	strbeq	r3, [r6, #22]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c8d2:	mov	r0, r5
    c8d4:	bl	da3c <SdSpiArduinoDriver::receive()>
    c8d8:	mov	r0, r5
    c8da:	bl	da3c <SdSpiArduinoDriver::receive()>
    c8de:	mov	r0, r5
    c8e0:	bl	da3c <SdSpiArduinoDriver::receive()>
    c8e4:	b.n	c838 <SdSpiCard::begin(SdSpiConfig)+0x14c>
    c8e6:	nop
    c8e8:	.word	0x2000701c
    c8ec:	.word	0x38015006
    c8f0:	.word	0x00014d52
    c8f4:	.word	0x03567e00
    c8f8:	.word	0x00014e18
    c8fc:	.word	0x0000c479

0000c900 <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c900:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c902:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c904:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c906:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c908:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c90a:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c90e:	cbnz	r0, c92c <SdSpiCard::readOCR(unsigned long*)+0x2c>
    c910:	adds	r7, r6, #4
    c912:	adds	r4, r5, #4
    c914:	mov	r0, r7
    c916:	bl	da3c <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    c91a:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    c91e:	cmp	r5, r4
    c920:	bne.n	c914 <SdSpiCard::readOCR(unsigned long*)+0x14>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c922:	ldrb	r4, [r6, #20]
    c924:	cbnz	r4, c942 <SdSpiCard::readOCR(unsigned long*)+0x42>
    c926:	movs	r4, #1
  return true;

 fail:
  spiStop();
  return false;
}
    c928:	mov	r0, r4
    c92a:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c92c:	ldrb	r4, [r6, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c92e:	movs	r3, #18
    c930:	strb	r3, [r6, #19]
    c932:	cmp	r4, #0
    c934:	beq.n	c928 <SdSpiCard::readOCR(unsigned long*)+0x28>
    c936:	mov	r0, r6
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    c938:	movs	r4, #0
    c93a:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    c93e:	mov	r0, r4
    c940:	pop	{r3, r4, r5, r6, r7, pc}
    c942:	mov	r0, r6
    c944:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    c948:	mov	r0, r4
    c94a:	pop	{r3, r4, r5, r6, r7, pc}

0000c94c <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    c94c:	push	{r3, r4, r5, lr}
    c94e:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    c950:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    c952:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    c954:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c958:	cbz	r0, c96c <SdSpiCard::readRegister(unsigned char, void*)+0x20>
    c95a:	movs	r3, #27
    c95c:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c95e:	ldrb	r0, [r4, #20]
    c960:	cbz	r0, c96a <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    c962:	mov	r0, r4
    c964:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    c968:	movs	r0, #0
}
    c96a:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    c96c:	mov	r1, r5
    c96e:	movs	r2, #16
    c970:	mov	r0, r4
    c972:	bl	c598 <SdSpiCard::readData(unsigned char*, unsigned int)>
    c976:	cmp	r0, #0
    c978:	beq.n	c95e <SdSpiCard::readRegister(unsigned char, void*)+0x12>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c97a:	ldrb	r5, [r4, #20]
    c97c:	cmp	r5, #0
    c97e:	beq.n	c96a <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    c980:	mov	r0, r4
    c982:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    c986:	mov	r0, r5
    c988:	pop	{r3, r4, r5, pc}
    c98a:	nop

0000c98c <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c98c:	mov	r2, r1
    c98e:	movs	r1, #9
    c990:	b.w	c94c <SdSpiCard::readRegister(unsigned char, void*)>

0000c994 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    c994:	mov	r2, r1
    c996:	movs	r1, #10
    c998:	b.w	c94c <SdSpiCard::readRegister(unsigned char, void*)>

0000c99c <SdSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    c99c:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c99e:	ldr	r3, [r0, #0]
    c9a0:	ldr	r2, [pc, #140]	; (ca30 <SdSpiCard::sectorCount()+0x94>)
    c9a2:	ldr	r3, [r3, #52]	; 0x34
    c9a4:	cmp	r3, r2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    c9a6:	sub	sp, #20
    c9a8:	bne.n	ca0a <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c9aa:	mov	r2, sp
    c9ac:	movs	r1, #9
    c9ae:	bl	c94c <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c9b2:	cbz	r0, c9c4 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    c9b4:	ldrb.w	r3, [sp]
    c9b8:	ands.w	r3, r3, #192	; 0xc0
    c9bc:	beq.n	c9c8 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    c9be:	cmp	r3, #64	; 0x40
    c9c0:	beq.n	ca10 <SdSpiCard::sectorCount()+0x74>
    c9c2:	movs	r0, #0
}
    c9c4:	add	sp, #20
    c9c6:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    c9c8:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    c9cc:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c9d0:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    c9d4:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    c9d8:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    c9dc:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c9e0:	and.w	r4, r4, #3
    c9e4:	lsls	r4, r4, #1
    c9e6:	lsls	r2, r2, #2
    c9e8:	and.w	r3, r3, #3
    c9ec:	orr.w	r0, r4, r0, lsr #7
    c9f0:	and.w	r1, r1, #15
    c9f4:	orr.w	r3, r2, r3, lsl #10
    c9f8:	add	r0, r1
    c9fa:	orr.w	r3, r3, r5, lsr #6
    c9fe:	adds	r3, #1
    ca00:	subs	r0, #7
    ca02:	lsl.w	r0, r3, r0
    ca06:	add	sp, #20
    ca08:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    ca0a:	mov	r1, sp
    ca0c:	blx	r3
    ca0e:	b.n	c9b2 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ca10:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ca14:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ca18:	ldrb.w	r0, [sp, #8]
    ca1c:	adds	r2, r3, #1
    ca1e:	and.w	r3, r1, #63	; 0x3f
    ca22:	add.w	r3, r2, r3, lsl #16
    ca26:	add.w	r0, r3, r0, lsl #8
    ca2a:	lsls	r0, r0, #10
}
    ca2c:	add	sp, #20
    ca2e:	pop	{r4, r5, pc}
    ca30:	.word	0x0000c98d

0000ca34 <SdSpiCard::readStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    ca34:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    ca36:	ldr	r3, [r0, #0]
    ca38:	ldr	r5, [pc, #68]	; (ca80 <SdSpiCard::readStart(unsigned long)+0x4c>)
    ca3a:	ldr	r3, [r3, #64]	; 0x40
    ca3c:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    ca3e:	sub	sp, #12
    ca40:	mov	r4, r0
    ca42:	mov	r2, r1
    ca44:	bne.n	ca76 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    ca46:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    ca48:	cmp	r0, #3
    sector <<= 9;
    ca4a:	it	ne
    ca4c:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    ca4e:	movs	r1, #18
    ca50:	mov	r0, r4
    ca52:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ca56:	cbz	r0, ca70 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ca58:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ca5a:	movs	r3, #12
    ca5c:	strb	r3, [r4, #19]
    ca5e:	cbnz	r0, ca64 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    ca60:	add	sp, #12
    ca62:	pop	{r4, r5, pc}
    ca64:	mov	r0, r4
    ca66:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    ca6a:	movs	r0, #0
    ca6c:	add	sp, #12
    ca6e:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    ca70:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    ca72:	add	sp, #12
    ca74:	pop	{r4, r5, pc}
    ca76:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    ca78:	blx	r3
    ca7a:	ldr	r2, [sp, #4]
    ca7c:	b.n	ca48 <SdSpiCard::readStart(unsigned long)+0x14>
    ca7e:	nop
    ca80:	.word	0x0000c479

0000ca84 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    ca84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca88:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    ca8a:	ldrb	r1, [r0, #16]
    ca8c:	cmp	r1, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    ca8e:	mov	r6, r0
    ca90:	mov	r4, r2
    ca92:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    ca94:	beq.n	cacc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    if (!readStart(sector)) {
    ca96:	mov	r1, r5
    ca98:	mov	r0, r6
    ca9a:	bl	ca34 <SdSpiCard::readStart(unsigned long)>
    ca9e:	cbz	r0, cac6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    caa0:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    caa2:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    caa4:	strb	r3, [r6, #16]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    caa6:	movs	r5, #0
    caa8:	cbnz	r7, cab0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    caaa:	b.n	cad4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    caac:	cmp	r7, r5
    caae:	beq.n	cad4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    if (!readData(dst, 512)) {
    cab0:	mov	r1, r4
    cab2:	mov.w	r2, #512	; 0x200
    cab6:	mov	r0, r6
    cab8:	bl	c598 <SdSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    cabc:	adds	r5, #1
    cabe:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    cac2:	cmp	r0, #0
    cac4:	bne.n	caac <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    cac6:	movs	r0, #0
    cac8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    cacc:	ldr	r3, [r0, #12]
    cace:	cmp	r3, r5
    cad0:	bne.n	ca96 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    cad2:	b.n	caa6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    cad4:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    cad6:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    cad8:	add	r7, r3
    cada:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    cadc:	cbnz	r2, cae4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x60>
    cade:	movs	r0, #1
    cae0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cae4:	ldr	r3, [r6, #0]
    cae6:	mov	r0, r6
    cae8:	ldr	r3, [r3, #24]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    caea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    caee:	bx	r3

0000caf0 <SdSpiCard::readStop()>:
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    caf0:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    caf2:	movs	r2, #0
    caf4:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    caf6:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    caf8:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cafc:	ldrb	r4, [r5, #20]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    cafe:	cbz	r0, cb0a <SdSpiCard::readStop()+0x1a>
    cb00:	movs	r3, #9
    cb02:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cb04:	cbnz	r4, cb1c <SdSpiCard::readStop()+0x2c>
  return true;

 fail:
  spiStop();
  return false;
}
    cb06:	mov	r0, r4
    cb08:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cb0a:	cbnz	r4, cb12 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    cb0c:	movs	r4, #1

 fail:
  spiStop();
  return false;
}
    cb0e:	mov	r0, r4
    cb10:	pop	{r3, r4, r5, pc}
    cb12:	mov	r0, r5
    cb14:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cb18:	mov	r0, r4
    cb1a:	pop	{r3, r4, r5, pc}
    cb1c:	mov	r0, r5
    cb1e:	movs	r4, #0
    cb20:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cb24:	mov	r0, r4
    cb26:	pop	{r3, r4, r5, pc}

0000cb28 <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    cb28:	ldrb	r2, [r0, #16]
  m_curState = IDLE_STATE;
    cb2a:	movs	r1, #0
  if (state == WRITE_STATE) {
    cb2c:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    cb2e:	strb	r1, [r0, #16]
  if (state == WRITE_STATE) {
    cb30:	beq.n	cb3e <SdSpiCard::syncDevice()+0x16>
    return writeStop();
  }
  if (state == READ_STATE) {
    cb32:	cmp	r2, #1
    cb34:	beq.n	cb3a <SdSpiCard::syncDevice()+0x12>
    return readStop();
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    cb36:	movs	r0, #1
    cb38:	bx	lr
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
  }
  if (state == READ_STATE) {
    return readStop();
    cb3a:	b.w	caf0 <SdSpiCard::readStop()>
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
    cb3e:	ldr	r3, [r0, #0]
    cb40:	ldr	r3, [r3, #76]	; 0x4c
    cb42:	bx	r3

0000cb44 <SdSpiCard::writeStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    cb44:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb46:	ldr	r3, [r0, #0]
    cb48:	ldr	r5, [pc, #68]	; (cb90 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    cb4a:	ldr	r3, [r3, #64]	; 0x40
    cb4c:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    cb4e:	sub	sp, #12
    cb50:	mov	r4, r0
    cb52:	mov	r2, r1
    cb54:	bne.n	cb86 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    cb56:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb58:	cmp	r0, #3
    sector <<= 9;
    cb5a:	it	ne
    cb5c:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    cb5e:	movs	r1, #25
    cb60:	mov	r0, r4
    cb62:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cb66:	cbz	r0, cb80 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cb68:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cb6a:	movs	r3, #14
    cb6c:	strb	r3, [r4, #19]
    cb6e:	cbnz	r0, cb74 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    cb70:	add	sp, #12
    cb72:	pop	{r4, r5, pc}
    cb74:	mov	r0, r4
    cb76:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cb7a:	movs	r0, #0
    cb7c:	add	sp, #12
    cb7e:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    cb80:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    cb82:	add	sp, #12
    cb84:	pop	{r4, r5, pc}
    cb86:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb88:	blx	r3
    cb8a:	ldr	r2, [sp, #4]
    cb8c:	b.n	cb58 <SdSpiCard::writeStart(unsigned long)+0x14>
    cb8e:	nop
    cb90:	.word	0x0000c479

0000cb94 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    cb94:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    cb96:	ldr	r3, [r0, #0]
    cb98:	ldr	r7, [pc, #172]	; (cc48 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    cb9a:	ldr	r3, [r3, #52]	; 0x34
    cb9c:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    cb9e:	sub	sp, #20
    cba0:	mov	r4, r0
    cba2:	mov	r5, r1
    cba4:	mov	r6, r2
    cba6:	bne.n	cc04 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    cba8:	mov	r2, sp
    cbaa:	movs	r1, #9
    cbac:	bl	c94c <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    cbb0:	cbz	r0, cbd8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    cbb2:	ldrb.w	r3, [sp, #10]
    cbb6:	lsls	r2, r3, #25
    cbb8:	bpl.n	cbe8 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    cbba:	ldrb	r3, [r4, #22]
    cbbc:	cmp	r3, #3
    firstSector <<= 9;
    cbbe:	it	ne
    cbc0:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    cbc2:	mov	r2, r5
    cbc4:	mov.w	r1, #32
    cbc8:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    cbca:	it	ne
    cbcc:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    cbce:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    cbd2:	cbz	r0, cc0a <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cbd4:	movs	r3, #38	; 0x26
    cbd6:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cbd8:	ldrb	r0, [r4, #20]
    cbda:	cbz	r0, cbe4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    cbdc:	mov	r0, r4
    cbde:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    cbe2:	movs	r0, #0
}
    cbe4:	add	sp, #20
    cbe6:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    cbe8:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    cbec:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    cbf0:	lsls	r3, r3, #1
    cbf2:	adds	r2, r6, #1
    cbf4:	orr.w	r3, r3, r1, lsr #7
    cbf8:	orrs	r2, r5
    cbfa:	tst	r3, r2
    cbfc:	beq.n	cbba <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    cbfe:	movs	r3, #39	; 0x27
    cc00:	strb	r3, [r4, #19]
    cc02:	b.n	cbd8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    cc04:	mov	r1, sp
    cc06:	blx	r3
    cc08:	b.n	cbb0 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    cc0a:	mov	r2, r6
    cc0c:	movs	r1, #33	; 0x21
    cc0e:	mov	r0, r4
    cc10:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cc14:	cmp	r0, #0
    cc16:	bne.n	cbd4 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    cc18:	mov	r2, r0
    cc1a:	movs	r1, #38	; 0x26
    cc1c:	mov	r0, r4
    cc1e:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cc22:	cmp	r0, #0
    cc24:	bne.n	cbd4 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    cc26:	movw	r1, #10000	; 0x2710
    cc2a:	mov	r0, r4
    cc2c:	bl	c618 <SdSpiCard::waitNotBusy(unsigned short)>
    cc30:	cbnz	r0, cc38 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    cc32:	movs	r3, #40	; 0x28
    cc34:	strb	r3, [r4, #19]
    cc36:	b.n	cbd8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc38:	ldrb	r5, [r4, #20]
    cc3a:	cmp	r5, #0
    cc3c:	beq.n	cbe4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    cc3e:	mov	r0, r4
    cc40:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    cc44:	mov	r0, r5
    cc46:	b.n	cbe4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    cc48:	.word	0x0000c98d

0000cc4c <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    cc4c:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cc4e:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    cc52:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cc54:	bl	c618 <SdSpiCard::waitNotBusy(unsigned short)>
    cc58:	mov	r6, r0
    cc5a:	cbnz	r0, cc74 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc5c:	ldrb	r4, [r5, #20]
    cc5e:	movs	r3, #30
    cc60:	strb	r3, [r5, #19]
    cc62:	cbnz	r4, cc68 <SdSpiCard::writeStop()+0x1c>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    cc64:	mov	r0, r4
    cc66:	pop	{r4, r5, r6, pc}
    cc68:	mov	r0, r5
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    cc6a:	mov	r4, r6
    cc6c:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    cc70:	mov	r0, r4
    cc72:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    cc74:	movs	r1, #253	; 0xfd
    cc76:	adds	r0, r5, #4
    cc78:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc7c:	ldrb	r4, [r5, #20]
    cc7e:	cbnz	r4, cc86 <SdSpiCard::writeStop()+0x3a>
    cc80:	mov	r4, r6

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    cc82:	mov	r0, r4
    cc84:	pop	{r4, r5, r6, pc}
    cc86:	mov	r0, r5
    cc88:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cc8c:	b.n	cc64 <SdSpiCard::writeStop()+0x18>
    cc8e:	nop

0000cc90 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    cc90:	push	{r4, r5, r6, lr}
    cc92:	adds	r4, r0, #4
    cc94:	mov	r6, r2
    cc96:	mov	r5, r0
    cc98:	mov	r0, r4
    cc9a:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    cc9e:	mov.w	r2, #512	; 0x200
    cca2:	mov	r1, r6
    cca4:	mov	r0, r4
    cca6:	bl	da90 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    ccaa:	mov	r0, r4
    ccac:	movs	r1, #255	; 0xff
    ccae:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
    ccb2:	mov	r0, r4
    ccb4:	movs	r1, #255	; 0xff
    ccb6:	bl	da78 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    ccba:	mov	r0, r4
    ccbc:	bl	da3c <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    ccc0:	and.w	r3, r0, #31
    ccc4:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    ccc6:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    ccc8:	beq.n	ccde <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ccca:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cccc:	movs	r3, #32
    ccce:	strb	r3, [r5, #19]
    ccd0:	cbnz	r0, ccd4 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    ccd2:	pop	{r4, r5, r6, pc}
    ccd4:	mov	r0, r5
    ccd6:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    ccda:	movs	r0, #0
    ccdc:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    ccde:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    cce0:	pop	{r4, r5, r6, pc}
    cce2:	nop

0000cce4 <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    cce4:	push	{r3, r4, r5, lr}
    cce6:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cce8:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    ccec:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    ccee:	bl	c618 <SdSpiCard::waitNotBusy(unsigned short)>
    ccf2:	cbnz	r0, cd06 <SdSpiCard::writeData(unsigned char const*)+0x22>
    ccf4:	movs	r3, #36	; 0x24
    ccf6:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ccf8:	ldrb	r0, [r4, #20]
    ccfa:	cbz	r0, cd04 <SdSpiCard::writeData(unsigned char const*)+0x20>
    ccfc:	mov	r0, r4
    ccfe:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    cd02:	movs	r0, #0
}
    cd04:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    cd06:	mov	r2, r5
    cd08:	movs	r1, #252	; 0xfc
    cd0a:	mov	r0, r4
    cd0c:	bl	cc90 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    cd10:	cmp	r0, #0
    cd12:	beq.n	ccf8 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

 fail:
  spiStop();
  return false;
}
    cd14:	pop	{r3, r4, r5, pc}
    cd16:	nop

0000cd18 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    cd18:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd1a:	ldr	r3, [r0, #0]
    cd1c:	ldr	r5, [pc, #88]	; (cd78 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x60>)
    cd1e:	ldr	r3, [r3, #64]	; 0x40
    cd20:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    cd22:	sub	sp, #8
    cd24:	mov	r4, r0
    cd26:	mov	r6, r2
    cd28:	bne.n	cd70 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x58>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    cd2a:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd2c:	cmp	r0, #3
    sector <<= 9;
    cd2e:	it	ne
    cd30:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    cd32:	mov	r2, r1
    cd34:	mov	r0, r4
    cd36:	movs	r1, #24
    cd38:	bl	c654 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cd3c:	cbz	r0, cd52 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cd3e:	movs	r3, #13
    cd40:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cd42:	ldrb	r0, [r4, #20]
    cd44:	cbz	r0, cd4e <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cd46:	mov	r0, r4
    cd48:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    cd4c:	movs	r0, #0
}
    cd4e:	add	sp, #8
    cd50:	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    cd52:	mov	r2, r6
    cd54:	movs	r1, #254	; 0xfe
    cd56:	mov	r0, r4
    cd58:	bl	cc90 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    cd5c:	cmp	r0, #0
    cd5e:	beq.n	cd42 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cd60:	ldrb	r5, [r4, #20]
    cd62:	cmp	r5, #0
    cd64:	beq.n	cd4e <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cd66:	mov	r0, r4
    cd68:	bl	c4a8 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cd6c:	mov	r0, r5
    cd6e:	b.n	cd4e <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cd70:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd72:	blx	r3
    cd74:	ldr	r1, [sp, #4]
    cd76:	b.n	cd2c <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x14>
    cd78:	.word	0x0000c479

0000cd7c <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    cd7c:	push	{r4}
    if (m_sharedSpi) {
    cd7e:	ldrb	r4, [r0, #17]
    cd80:	cbnz	r4, cd90 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    cd82:	ldr	r4, [r0, #0]
    cd84:	ldr	r4, [r4, #32]
    cd86:	movs	r3, #1
    cd88:	mov	ip, r4
    }
  }
    cd8a:	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    cd8e:	bx	ip
    }
  }
    cd90:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    cd94:	b.w	cd18 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>

0000cd98 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    cd98:	ldr	r3, [pc, #12]	; (cda8 <isBusyCommandComplete()+0x10>)
    cd9a:	ldr	r0, [pc, #16]	; (cdac <isBusyCommandComplete()+0x14>)
    cd9c:	ldr	r3, [r3, #0]
    cd9e:	ands	r0, r3
}
    cda0:	clz	r0, r0
    cda4:	lsrs	r0, r0, #5
    cda6:	bx	lr
    cda8:	.word	0x400b1030
    cdac:	.word	0x000f0001

0000cdb0 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    cdb0:	ldr	r3, [pc, #8]	; (cdbc <isBusyCommandInhibit()+0xc>)
    cdb2:	ldr	r0, [r3, #0]
}
    cdb4:	and.w	r0, r0, #1
    cdb8:	bx	lr
    cdba:	nop
    cdbc:	.word	0x400b1024

0000cdc0 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    cdc0:	ldr	r3, [pc, #12]	; (cdd0 <isBusyDat()+0x10>)
    cdc2:	ldr	r0, [r3, #0]
    cdc4:	eor.w	r0, r0, #16777216	; 0x1000000
}
    cdc8:	ubfx	r0, r0, #24, #1
    cdcc:	bx	lr
    cdce:	nop
    cdd0:	.word	0x400b1024

0000cdd4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    cdd4:	ldr	r3, [pc, #4]	; (cddc <isBusyDMA()+0x8>)
    cdd6:	ldrb	r0, [r3, #0]
}
    cdd8:	bx	lr
    cdda:	nop
    cddc:	.word	0x20006b48

0000cde0 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    cde0:	ldr	r3, [pc, #12]	; (cdf0 <isBusyFifoRead()+0x10>)
    cde2:	ldr	r0, [r3, #0]
    cde4:	eor.w	r0, r0, #2048	; 0x800
}
    cde8:	ubfx	r0, r0, #11, #1
    cdec:	bx	lr
    cdee:	nop
    cdf0:	.word	0x400b1024

0000cdf4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    cdf4:	ldr	r3, [pc, #12]	; (ce04 <isBusyFifoWrite()+0x10>)
    cdf6:	ldr	r0, [r3, #0]
    cdf8:	eor.w	r0, r0, #1024	; 0x400
}
    cdfc:	ubfx	r0, r0, #10, #1
    ce00:	bx	lr
    ce02:	nop
    ce04:	.word	0x400b1024

0000ce08 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ce08:	ldr	r3, [pc, #12]	; (ce18 <isBusyTransferComplete()+0x10>)
    ce0a:	ldr	r0, [pc, #16]	; (ce1c <isBusyTransferComplete()+0x14>)
    ce0c:	ldr	r3, [r3, #0]
    ce0e:	ands	r0, r3
}
    ce10:	clz	r0, r0
    ce14:	lsrs	r0, r0, #5
    ce16:	bx	lr
    ce18:	.word	0x400b1030
    ce1c:	.word	0x117f0002

0000ce20 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    ce20:	ldr	r3, [pc, #4]	; (ce28 <SdioCard::errorCode() const+0x8>)
}
    ce22:	ldrb	r0, [r3, #0]
    ce24:	bx	lr
    ce26:	nop
    ce28:	.word	0x1fff0b5c

0000ce2c <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    ce2c:	ldr	r3, [pc, #4]	; (ce34 <SdioCard::errorData() const+0x8>)
    ce2e:	ldr	r0, [r3, #0]
}
    ce30:	bx	lr
    ce32:	nop
    ce34:	.word	0x20006b30

0000ce38 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ce38:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    ce3a:	ldr	r4, [pc, #20]	; (ce50 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ce3c:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    ce3e:	ldmia	r4!, {r0, r1, r2, r3}
    ce40:	str	r0, [r5, #0]
    ce42:	str	r1, [r5, #4]
    ce44:	str	r2, [r5, #8]
    ce46:	str	r3, [r5, #12]
  return true;
}
    ce48:	movs	r0, #1
    ce4a:	pop	{r4, r5}
    ce4c:	bx	lr
    ce4e:	nop
    ce50:	.word	0x20006b0c

0000ce54 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    ce54:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    ce56:	ldr	r4, [pc, #20]	; (ce6c <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    ce58:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    ce5a:	ldmia	r4!, {r0, r1, r2, r3}
    ce5c:	str	r0, [r5, #0]
    ce5e:	str	r1, [r5, #4]
    ce60:	str	r2, [r5, #8]
    ce62:	str	r3, [r5, #12]
  return true;
}
    ce64:	movs	r0, #1
    ce66:	pop	{r4, r5}
    ce68:	bx	lr
    ce6a:	nop
    ce6c:	.word	0x20006b38

0000ce70 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    ce70:	ldr	r3, [pc, #8]	; (ce7c <SdioCard::readOCR(unsigned long*)+0xc>)
    ce72:	ldr	r3, [r3, #0]
    ce74:	str	r3, [r1, #0]
  return true;
}
    ce76:	movs	r0, #1
    ce78:	bx	lr
    ce7a:	nop
    ce7c:	.word	0x20006b24

0000ce80 <SdioCard::~SdioCard()>:
    ce80:	bx	lr
    ce82:	nop

0000ce84 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    ce84:	push	{r3, r4, r5, r6, r7, lr}
    ce86:	mov	r5, r0
  uint32_t m = micros();
    ce88:	bl	e6dc <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ce8c:	ldr	r7, [pc, #24]	; (cea8 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    ce8e:	mov	r6, r0
    ce90:	b.n	ce9c <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ce92:	bl	e6dc <micros>
    ce96:	subs	r0, r0, r6
    ce98:	cmp	r0, r7
    ce9a:	bhi.n	cea4 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    ce9c:	blx	r5
    ce9e:	mov	r4, r0
    cea0:	cmp	r0, #0
    cea2:	bne.n	ce92 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    cea4:	mov	r0, r4
    cea6:	pop	{r3, r4, r5, r6, r7, pc}
    cea8:	.word	0x000f4240

0000ceac <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    ceac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    ceb0:	ldr.w	r8, [pc, #64]	; cef4 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ceb4:	ldr	r7, [pc, #56]	; (cef0 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    ceb6:	str.w	r0, [r8]
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    ceba:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    cebc:	bl	e6dc <micros>
    cec0:	mov	r6, r0
    cec2:	b.n	ced2 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    cec4:	bl	e6dc <micros>
    cec8:	subs	r0, r0, r6
    ceca:	cmp	r0, r7
    cecc:	bhi.n	cee4 <yieldTimeout(bool (*)())+0x38>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    cece:	bl	f464 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    ced2:	blx	r5
    ced4:	mov	r4, r0
    ced6:	cmp	r0, #0
    ced8:	bne.n	cec4 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    ceda:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    cede:	mov	r0, r4
    cee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    cee4:	movs	r3, #0
    cee6:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    ceea:	mov	r0, r4
    ceec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cef0:	.word	0x000f4240
    cef4:	.word	0x20006b1c

0000cef8 <SdioCard::~SdioCard()>:
    cef8:	push	{r4, lr}
    cefa:	movs	r1, #12
    cefc:	mov	r4, r0
    cefe:	bl	f924 <operator delete(void*, unsigned int)>
    cf02:	mov	r0, r4
    cf04:	pop	{r4, pc}
    cf06:	nop

0000cf08 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    cf08:	ldr	r3, [pc, #20]	; (cf20 <SdioCard::type() const+0x18>)
    cf0a:	ldrb	r3, [r3, #0]
    cf0c:	cbz	r3, cf1c <SdioCard::type() const+0x14>
    cf0e:	ldr	r3, [pc, #20]	; (cf24 <SdioCard::type() const+0x1c>)
    cf10:	ldrb	r3, [r3, #0]
    cf12:	cmp	r3, #0
    cf14:	ite	ne
    cf16:	movne	r0, #3
    cf18:	moveq	r0, #2
    cf1a:	bx	lr
    cf1c:	movs	r0, #1
}
    cf1e:	bx	lr
    cf20:	.word	0x20006b08
    cf24:	.word	0x20006b20

0000cf28 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    cf28:	push	{r3, r4, r5, lr}
    cf2a:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    cf2c:	ldr	r0, [pc, #60]	; (cf6c <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    cf2e:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    cf30:	bl	ce84 <waitTimeout(bool (*)())>
    cf34:	cbz	r0, cf3a <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf36:	movs	r0, #0
    cf38:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    cf3a:	ldr	r2, [pc, #52]	; (cf70 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    cf3c:	ldr	r3, [pc, #52]	; (cf74 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    cf3e:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    cf40:	ldr	r0, [pc, #52]	; (cf78 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    cf42:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    cf44:	bl	ce84 <waitTimeout(bool (*)())>
    cf48:	cmp	r0, #0
    cf4a:	bne.n	cf36 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    cf4c:	ldr	r2, [pc, #44]	; (cf7c <cardCommand(unsigned long, unsigned long)+0x54>)
    cf4e:	ldr	r3, [pc, #48]	; (cf80 <cardCommand(unsigned long, unsigned long)+0x58>)
    cf50:	ldr	r1, [r2, #0]
    cf52:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    cf54:	ldr	r1, [r3, #0]
    cf56:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf58:	ldr	r2, [r3, #0]
    cf5a:	lsls	r2, r2, #31
    cf5c:	bpl.n	cf36 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    cf5e:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf60:	tst.w	r3, #983040	; 0xf0000
    cf64:	bne.n	cf36 <cardCommand(unsigned long, unsigned long)+0xe>
    cf66:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    cf68:	pop	{r3, r4, r5, pc}
    cf6a:	nop
    cf6c:	.word	0x0000cdb1
    cf70:	.word	0x400b1008
    cf74:	.word	0x400b100c
    cf78:	.word	0x0000cd99
    cf7c:	.word	0x400b1030
    cf80:	.word	0x20006b30

0000cf84 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    cf84:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    cf86:	ldr	r3, [pc, #28]	; (cfa4 <isBusyCMD13()+0x20>)
    cf88:	ldr	r0, [pc, #28]	; (cfa8 <isBusyCMD13()+0x24>)
    cf8a:	ldr	r1, [r3, #0]
    cf8c:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    cf90:	cbz	r0, cfa0 <isBusyCMD13()+0x1c>
    cf92:	ldr	r3, [pc, #24]	; (cfac <isBusyCMD13()+0x28>)
    cf94:	ldr	r0, [r3, #0]
    cf96:	eor.w	r0, r0, #256	; 0x100
    cf9a:	ubfx	r0, r0, #8, #1
    cf9e:	pop	{r3, pc}
    cfa0:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    cfa2:	pop	{r3, pc}
    cfa4:	.word	0x20006b28
    cfa8:	.word	0x0d1a0000
    cfac:	.word	0x400b1010

0000cfb0 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    cfb0:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    cfb2:	ldr	r3, [pc, #16]	; (cfc4 <SdioCard::status()+0x14>)
    cfb4:	ldr	r0, [pc, #16]	; (cfc8 <SdioCard::status()+0x18>)
    cfb6:	ldr	r1, [r3, #0]
    cfb8:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    cfbc:	cbz	r0, cfc2 <SdioCard::status()+0x12>
    cfbe:	ldr	r3, [pc, #12]	; (cfcc <SdioCard::status()+0x1c>)
    cfc0:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    cfc2:	pop	{r3, pc}
    cfc4:	.word	0x20006b28
    cfc8:	.word	0x0d1a0000
    cfcc:	.word	0x400b1010

0000cfd0 <waitDmaStatus() [clone .part.4]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    cfd0:	ldr	r3, [pc, #20]	; (cfe8 <waitDmaStatus() [clone .part.4]+0x18>)
    cfd2:	ldr	r0, [r3, #0]
    cfd4:	ands.w	r0, r0, #2
    cfd8:	beq.n	cfe6 <waitDmaStatus() [clone .part.4]+0x16>
    cfda:	ldr	r3, [r3, #0]
    cfdc:	ldr	r0, [pc, #12]	; (cfec <waitDmaStatus() [clone .part.4]+0x1c>)
    cfde:	ands	r0, r3
    cfe0:	clz	r0, r0
    cfe4:	lsrs	r0, r0, #5
}
    cfe6:	bx	lr
    cfe8:	.word	0x20006b30
    cfec:	.word	0x117f0000

0000cff0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    cff0:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    cff2:	lsls	r4, r2, #30
    cff4:	bne.n	cff8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    cff6:	cbnz	r3, d00a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cff8:	ldr	r1, [pc, #124]	; (d078 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    cffa:	ldr	r3, [pc, #128]	; (d07c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cffc:	movs	r0, #37	; 0x25
  m_errorLine = line;
    cffe:	movw	r2, #503	; 0x1f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d002:	strb	r0, [r1, #0]
  m_errorLine = line;
    d004:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    d006:	movs	r0, #0
    d008:	pop	{r3, r4, r5, r6, r7, pc}
    d00a:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    d00c:	ldr	r0, [pc, #112]	; (d080 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    d00e:	mov	r4, r3
    d010:	mov	r7, r1
    d012:	mov	r5, r2
    d014:	bl	ceac <yieldTimeout(bool (*)())>
    d018:	cbnz	r0, d062 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    d01a:	ldr	r1, [pc, #104]	; (d084 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    d01c:	ldr	r2, [pc, #104]	; (d088 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    d01e:	ldr.w	lr, [pc, #128]	; d0a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    d022:	mov.w	ip, #1
    d026:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d02a:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    d02c:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d02e:	ldr	r4, [pc, #92]	; (d08c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    d030:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d032:	ldr	r2, [pc, #92]	; (d090 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d034:	ldr	r1, [pc, #92]	; (d094 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    d036:	ldr	r0, [pc, #96]	; (d098 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d038:	orr.w	r3, r3, #512	; 0x200
    d03c:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d03e:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d040:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d042:	cbnz	r3, d072 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    d044:	lsls	r1, r7, #9
    d046:	mov	r0, r6
    d048:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    d04c:	cmp	r0, #0
    d04e:	beq.n	d006 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    d050:	ldr	r0, [pc, #72]	; (d09c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    d052:	bl	ceac <yieldTimeout(bool (*)())>
    d056:	cmp	r0, #0
    d058:	bne.n	d006 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    d05a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d05e:	b.w	cfd0 <waitDmaStatus() [clone .part.4]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d062:	ldr	r1, [pc, #20]	; (d078 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    d064:	ldr	r3, [pc, #20]	; (d07c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d066:	movs	r0, #10
  m_errorLine = line;
    d068:	mov.w	r2, #506	; 0x1fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d06c:	strb	r0, [r1, #0]
  m_errorLine = line;
    d06e:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d070:	b.n	d006 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d072:	mov	r1, r7
    d074:	b.n	d046 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    d076:	nop
    d078:	.word	0x1fff0b5c
    d07c:	.word	0x20006b4c
    d080:	.word	0x0000cf85
    d084:	.word	0x20006b30
    d088:	.word	0x400b1000
    d08c:	.word	0x400b1004
    d090:	.word	0x20006b20
    d094:	.word	0x400b1038
    d098:	.word	0x117f0002
    d09c:	.word	0x0000cdd5
    d0a0:	.word	0x20006b48

0000d0a4 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    d0a4:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    d0a6:	ldr	r1, [pc, #100]	; (d10c <SdioCard::sectorCount()+0x68>)
    d0a8:	ldrb	r3, [r1, #0]
    d0aa:	ands.w	r3, r3, #192	; 0xc0
    d0ae:	beq.n	d0d4 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    d0b0:	cmp	r3, #64	; 0x40
    d0b2:	beq.n	d0ba <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    d0b4:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    d0b6:	pop	{r4, r5, r6}
    d0b8:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    d0ba:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    d0bc:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    d0be:	ldrb	r0, [r1, #8]
    d0c0:	adds	r2, r3, #1
    d0c2:	and.w	r3, r4, #63	; 0x3f
    d0c6:	add.w	r3, r2, r3, lsl #16
    d0ca:	add.w	r0, r3, r0, lsl #8
    d0ce:	lsls	r0, r0, #10
    d0d0:	pop	{r4, r5, r6}
    d0d2:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    d0d4:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    d0d6:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    d0d8:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    d0da:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    d0dc:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    d0de:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    d0e0:	and.w	r1, r5, #3
    d0e4:	lsls	r1, r1, #1
    d0e6:	and.w	r3, r3, #3
    d0ea:	lsls	r2, r2, #2
    d0ec:	orr.w	r0, r1, r0, lsr #7
    d0f0:	orr.w	r3, r2, r3, lsl #10
    d0f4:	and.w	r1, r4, #15
    d0f8:	orr.w	r3, r3, r6, lsr #6
    d0fc:	add	r0, r1
    d0fe:	subs	r0, #7
    d100:	adds	r3, #1
    d102:	lsl.w	r0, r3, r0
    d106:	pop	{r4, r5, r6}
    d108:	bx	lr
    d10a:	nop
    d10c:	.word	0x20006b38

0000d110 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    d110:	push	{r4, r5, r6, lr}
    d112:	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d114:	ldrb	r1, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    d116:	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d118:	cbnz	r1, d176 <SdioCard::erase(unsigned long, unsigned long)+0x66>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    d11a:	ldr	r2, [pc, #192]	; (d1dc <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    d11c:	ldrb	r3, [r2, #10]
    d11e:	and.w	r0, r3, #64	; 0x40
    d122:	and.w	r4, r0, #255	; 0xff
    d126:	cbz	r0, d150 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    d128:	ldr	r3, [pc, #180]	; (d1e0 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    d12a:	ldrb	r3, [r3, #0]
    d12c:	cbnz	r3, d132 <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    d12e:	lsls	r5, r5, #9
    lastSector <<= 9;
    d130:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    d132:	mov	r1, r5
    d134:	ldr	r0, [pc, #172]	; (d1e4 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    d136:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    d13a:	mov	r4, r0
    d13c:	cbnz	r0, d186 <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d13e:	ldr	r1, [pc, #168]	; (d1e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d140:	ldr	r3, [pc, #168]	; (d1ec <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d142:	movs	r0, #15
  m_errorLine = line;
    d144:	mov.w	r2, #752	; 0x2f0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d148:	strb	r0, [r1, #0]
  m_errorLine = line;
    d14a:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d14c:	mov	r0, r4
    d14e:	pop	{r4, r5, r6, pc}
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    d150:	ldrb	r1, [r2, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    d152:	and.w	r3, r3, #63	; 0x3f
    d156:	lsls	r3, r3, #1
    d158:	adds	r2, r6, #1
    d15a:	orr.w	r3, r3, r1, lsr #7
    d15e:	orrs	r2, r5
    d160:	tst	r3, r2
    d162:	beq.n	d128 <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d164:	ldr	r1, [pc, #128]	; (d1e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d166:	ldr	r3, [pc, #132]	; (d1ec <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d168:	movs	r0, #39	; 0x27
  m_errorLine = line;
    d16a:	mov.w	r2, #744	; 0x2e8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d16e:	strb	r0, [r1, #0]
  m_errorLine = line;
    d170:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d172:	mov	r0, r4
    d174:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d176:	ldr	r3, [r0, #0]
    d178:	ldr	r3, [r3, #24]
    d17a:	blx	r3
    d17c:	mov	r4, r0
    d17e:	cmp	r0, #0
    d180:	bne.n	d11a <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d182:	mov	r0, r4
    d184:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    d186:	mov	r1, r6
    d188:	ldr	r0, [pc, #100]	; (d1f0 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    d18a:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    d18e:	mov	r4, r0
    d190:	cbnz	r0, d1a2 <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d192:	ldr	r1, [pc, #84]	; (d1e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d194:	ldr	r3, [pc, #84]	; (d1ec <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d196:	movs	r0, #16
  m_errorLine = line;
    d198:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d19c:	strb	r0, [r1, #0]
  m_errorLine = line;
    d19e:	str	r2, [r3, #0]
    d1a0:	b.n	d14c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    d1a2:	movs	r1, #0
    d1a4:	ldr	r0, [pc, #76]	; (d1f4 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    d1a6:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    d1aa:	mov	r4, r0
    d1ac:	cbnz	r0, d1be <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1ae:	ldr	r1, [pc, #56]	; (d1e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d1b0:	ldr	r3, [pc, #56]	; (d1ec <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1b2:	movs	r0, #17
  m_errorLine = line;
    d1b4:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1b8:	strb	r0, [r1, #0]
  m_errorLine = line;
    d1ba:	str	r2, [r3, #0]
    d1bc:	b.n	d14c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    d1be:	ldr	r0, [pc, #56]	; (d1f8 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    d1c0:	bl	ce84 <waitTimeout(bool (*)())>
    d1c4:	cmp	r0, #0
    d1c6:	beq.n	d14c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1c8:	ldr	r1, [pc, #28]	; (d1e8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d1ca:	ldr	r3, [pc, #32]	; (d1ec <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1cc:	movs	r0, #40	; 0x28
  m_errorLine = line;
    d1ce:	movw	r2, #761	; 0x2f9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1d2:	strb	r0, [r1, #0]
  m_errorLine = line;
    d1d4:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    d1d6:	movs	r4, #0
    d1d8:	b.n	d14c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    d1da:	nop
    d1dc:	.word	0x20006b38
    d1e0:	.word	0x20006b20
    d1e4:	.word	0x201a0000
    d1e8:	.word	0x1fff0b5c
    d1ec:	.word	0x20006b4c
    d1f0:	.word	0x211a0000
    d1f4:	.word	0x261b0000
    d1f8:	.word	0x0000cf85

0000d1fc <waitTransferComplete() [clone .part.8]>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    d1fc:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    d1fe:	ldr	r0, [pc, #56]	; (d238 <waitTransferComplete() [clone .part.8]+0x3c>)
    d200:	bl	ce84 <waitTimeout(bool (*)())>
  m_transferActive = false;
    d204:	ldr	r1, [pc, #52]	; (d23c <waitTransferComplete() [clone .part.8]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    d206:	ldr	r2, [pc, #56]	; (d240 <waitTransferComplete() [clone .part.8]+0x44>)
    d208:	ldr	r3, [pc, #56]	; (d244 <waitTransferComplete() [clone .part.8]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    d20a:	movs	r4, #0
    d20c:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    d20e:	ldr	r1, [r2, #0]
    d210:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    d212:	ldr	r1, [r3, #0]
    d214:	str	r1, [r2, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    d216:	cbnz	r0, d220 <waitTransferComplete() [clone .part.8]+0x24>
    d218:	ldr	r2, [r3, #0]
    d21a:	ldr	r3, [pc, #44]	; (d248 <waitTransferComplete() [clone .part.8]+0x4c>)
    d21c:	ands	r3, r2
    d21e:	cbz	r3, d232 <waitTransferComplete() [clone .part.8]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d220:	ldr	r1, [pc, #40]	; (d24c <waitTransferComplete() [clone .part.8]+0x50>)
  m_errorLine = line;
    d222:	ldr	r3, [pc, #44]	; (d250 <waitTransferComplete() [clone .part.8]+0x54>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d224:	movs	r0, #31
  m_errorLine = line;
    d226:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d22a:	strb	r0, [r1, #0]
  m_errorLine = line;
    d22c:	str	r2, [r3, #0]
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    d22e:	movs	r0, #0
  }
  return true;
}
    d230:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    d232:	movs	r0, #1
    d234:	pop	{r4, pc}
    d236:	nop
    d238:	.word	0x0000ce09
    d23c:	.word	0x20006b2c
    d240:	.word	0x400b1030
    d244:	.word	0x20006b30
    d248:	.word	0x117f0000
    d24c:	.word	0x1fff0b5c
    d250:	.word	0x20006b4c

0000d254 <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    d254:	push	{r4, r5, r6, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d256:	ldr	r4, [pc, #104]	; (d2c0 <SdioCard::readStop()+0x6c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d258:	ldr	r0, [pc, #104]	; (d2c4 <SdioCard::readStop()+0x70>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d25a:	ldr	r3, [r4, #0]
    d25c:	bic.w	r3, r3, #65536	; 0x10000
    d260:	str	r3, [r4, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d262:	movs	r1, #0
    d264:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    d268:	mov	r5, r0
    d26a:	cbnz	r0, d27e <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d26c:	ldr	r1, [pc, #88]	; (d2c8 <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    d26e:	ldr	r3, [pc, #92]	; (d2cc <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d270:	movs	r0, #9
  m_errorLine = line;
    d272:	movw	r2, #575	; 0x23f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d276:	strb	r0, [r1, #0]
  m_errorLine = line;
    d278:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d27a:	mov	r0, r5
    d27c:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    d27e:	ldr	r0, [pc, #80]	; (d2d0 <SdioCard::readStop()+0x7c>)
    d280:	bl	ceac <yieldTimeout(bool (*)())>
    d284:	cbnz	r0, d2aa <SdioCard::readStop()+0x56>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    d286:	ldr	r3, [pc, #76]	; (d2d4 <SdioCard::readStop()+0x80>)
    d288:	ldr	r3, [r3, #0]
    d28a:	lsls	r3, r3, #30
    d28c:	bpl.n	d27a <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    d28e:	ldr	r1, [pc, #72]	; (d2d8 <SdioCard::readStop()+0x84>)
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    d290:	ldr	r0, [pc, #72]	; (d2dc <SdioCard::readStop()+0x88>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    d292:	ldr	r6, [r1, #0]
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    d294:	ldr	r3, [r4, #0]
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    d296:	ldr	r2, [r0, #0]
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    d298:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    d29c:	orr.w	r2, r2, #67108864	; 0x4000000
    d2a0:	str	r2, [r0, #0]
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    d2a2:	str	r6, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2a4:	mov	r0, r5
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    SDHC_PROCTL = proctl;
    d2a6:	str	r3, [r4, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2a8:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2aa:	ldr	r1, [pc, #28]	; (d2c8 <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    d2ac:	ldr	r3, [pc, #28]	; (d2cc <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2ae:	movs	r0, #10
  m_errorLine = line;
    d2b0:	movw	r2, #579	; 0x243
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2b4:	strb	r0, [r1, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d2b6:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d2b8:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2ba:	mov	r0, r5
    d2bc:	pop	{r4, r5, r6, pc}
    d2be:	nop
    d2c0:	.word	0x400b1028
    d2c4:	.word	0x0cdb0000
    d2c8:	.word	0x1fff0b5c
    d2cc:	.word	0x20006b4c
    d2d0:	.word	0x0000cdc1
    d2d4:	.word	0x400b1024
    d2d8:	.word	0x400b1034
    d2dc:	.word	0x400b102c

0000d2e0 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    d2e0:	push	{r4, r5, r6, lr}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d2e2:	ldr	r6, [pc, #124]	; (d360 <SdioCard::writeData(unsigned char const*)+0x80>)
    d2e4:	ldrb	r3, [r6, #0]
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    d2e6:	mov	r5, r1
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d2e8:	cmp	r3, #0
    d2ea:	bne.n	d354 <SdioCard::writeData(unsigned char const*)+0x74>
  if (!waitTransferComplete()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    d2ec:	ldr	r3, [pc, #116]	; (d364 <SdioCard::writeData(unsigned char const*)+0x84>)
    d2ee:	ldr	r3, [r3, #0]
    d2f0:	lsls	r1, r3, #23
    d2f2:	bmi.n	d306 <SdioCard::writeData(unsigned char const*)+0x26>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d2f4:	ldr	r3, [pc, #112]	; (d368 <SdioCard::writeData(unsigned char const*)+0x88>)
    d2f6:	ldr	r2, [r3, #0]
    d2f8:	bic.w	r2, r2, #65536	; 0x10000
    d2fc:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    d2fe:	ldr	r2, [r3, #0]
    d300:	orr.w	r2, r2, #131072	; 0x20000
    d304:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d306:	ldr	r2, [pc, #96]	; (d368 <SdioCard::writeData(unsigned char const*)+0x88>)
  if (waitTimeout(isBusyFifoWrite)) {
    d308:	ldr	r0, [pc, #96]	; (d36c <SdioCard::writeData(unsigned char const*)+0x8c>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d30a:	ldr	r3, [r2, #0]
    d30c:	orr.w	r3, r3, #65536	; 0x10000
    d310:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    d312:	bl	ce84 <waitTimeout(bool (*)())>
    d316:	cbnz	r0, d342 <SdioCard::writeData(unsigned char const*)+0x62>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    d318:	ldr	r4, [pc, #72]	; (d364 <SdioCard::writeData(unsigned char const*)+0x84>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    d31a:	ldr	r0, [pc, #84]	; (d370 <SdioCard::writeData(unsigned char const*)+0x90>)
    d31c:	subs	r3, r5, #4
    d31e:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    d322:	ldr	r2, [r4, #0]
    d324:	lsls	r2, r2, #21
    d326:	bpl.n	d322 <SdioCard::writeData(unsigned char const*)+0x42>
    d328:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    d32c:	ldr.w	r2, [r3, #4]!
    d330:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    d332:	cmp	r1, r3
    d334:	bne.n	d32c <SdioCard::writeData(unsigned char const*)+0x4c>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    d336:	cmp	r5, r1
    d338:	mov	r3, r1
    d33a:	bne.n	d322 <SdioCard::writeData(unsigned char const*)+0x42>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    d33c:	movs	r0, #1
    d33e:	strb	r0, [r6, #0]
    d340:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d342:	ldr	r1, [pc, #48]	; (d374 <SdioCard::writeData(unsigned char const*)+0x94>)
  m_errorLine = line;
    d344:	ldr	r3, [pc, #48]	; (d378 <SdioCard::writeData(unsigned char const*)+0x98>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d346:	movs	r0, #33	; 0x21
  m_errorLine = line;
    d348:	mov.w	r2, #1012	; 0x3f4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d34c:	strb	r0, [r1, #0]
  m_errorLine = line;
    d34e:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    d350:	movs	r0, #0
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d352:	pop	{r4, r5, r6, pc}
    d354:	bl	d1fc <waitTransferComplete() [clone .part.8]>
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    d358:	cmp	r0, #0
    d35a:	bne.n	d2ec <SdioCard::writeData(unsigned char const*)+0xc>
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d35c:	pop	{r4, r5, r6, pc}
    d35e:	nop
    d360:	.word	0x20006b2c
    d364:	.word	0x400b1024
    d368:	.word	0x400b1028
    d36c:	.word	0x0000cdf5
    d370:	.word	0x400b1020
    d374:	.word	0x1fff0b5c
    d378:	.word	0x20006b4c

0000d37c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    d37c:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    d37e:	ldr	r0, [pc, #80]	; (d3d0 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    d380:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    d382:	bl	ceac <yieldTimeout(bool (*)())>
    d386:	cbnz	r0, d3bc <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d388:	ldr	r2, [pc, #72]	; (d3d4 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d38a:	ldr	r1, [pc, #76]	; (d3d8 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d38c:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    d38e:	ldr	r0, [pc, #76]	; (d3dc <SdioCard::writeStart(unsigned long)+0x60>)
    d390:	ldr	r5, [pc, #76]	; (d3e0 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d392:	bic.w	r3, r3, #65536	; 0x10000
    d396:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d398:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    d39a:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d39c:	cbnz	r3, d3b8 <SdioCard::writeStart(unsigned long)+0x3c>
    d39e:	lsls	r1, r4, #9
    d3a0:	ldr	r0, [pc, #64]	; (d3e4 <SdioCard::writeStart(unsigned long)+0x68>)
    d3a2:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    d3a6:	cbnz	r0, d3b6 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3a8:	ldr	r1, [pc, #60]	; (d3e8 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d3aa:	ldr	r3, [pc, #64]	; (d3ec <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3ac:	movs	r4, #14
  m_errorLine = line;
    d3ae:	mov.w	r2, #1128	; 0x468
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3b2:	strb	r4, [r1, #0]
  m_errorLine = line;
    d3b4:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    d3b6:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d3b8:	mov	r1, r4
    d3ba:	b.n	d3a0 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3bc:	ldr	r1, [pc, #40]	; (d3e8 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d3be:	ldr	r3, [pc, #44]	; (d3ec <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3c0:	movs	r0, #10
  m_errorLine = line;
    d3c2:	movw	r2, #1116	; 0x45c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3c6:	strb	r0, [r1, #0]
  m_errorLine = line;
    d3c8:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d3ca:	movs	r0, #0
    d3cc:	pop	{r3, r4, r5, pc}
    d3ce:	nop
    d3d0:	.word	0x0000cf85
    d3d4:	.word	0x400b1028
    d3d8:	.word	0x20006b20
    d3dc:	.word	0x400b1004
    d3e0:	.word	0xffff0200
    d3e4:	.word	0x193a0022
    d3e8:	.word	0x1fff0b5c
    d3ec:	.word	0x20006b4c

0000d3f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    d3f0:	push	{r3, r4, r5, r6, r7, lr}
    d3f2:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    d3f4:	ldrb	r0, [r0, #8]
    d3f6:	lsls	r0, r0, #31
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    d3f8:	mov	r4, r1
    d3fa:	mov	r5, r2
    d3fc:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    d3fe:	bmi.n	d428 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    d400:	cbz	r3, d424 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    d402:	add	r7, r1
    d404:	b.n	d40a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    d406:	cmp	r4, r7
    d408:	beq.n	d424 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    d40a:	ldr	r3, [r6, #0]
    d40c:	mov	r2, r5
    d40e:	mov	r1, r4
    d410:	ldr	r3, [r3, #28]
    d412:	mov	r0, r6
    d414:	blx	r3
    d416:	adds	r4, #1
    d418:	add.w	r5, r5, #512	; 0x200
    d41c:	cmp	r0, #0
    d41e:	bne.n	d406 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    d420:	movs	r0, #0
    d422:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    d424:	movs	r0, #1
    d426:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    d428:	lsls	r0, r2, #30
    d42a:	beq.n	d452 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    d42c:	cmp	r3, #0
    d42e:	beq.n	d424 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    d430:	add	r7, r1
    d432:	b.n	d438 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    d434:	cmp	r7, r4
    d436:	beq.n	d424 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    d438:	ldr	r3, [r6, #0]
    d43a:	mov	r2, r5
    d43c:	mov	r1, r4
    d43e:	ldr	r3, [r3, #28]
    d440:	mov	r0, r6
    d442:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    d444:	adds	r4, #1
    d446:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    d44a:	cmp	r0, #0
    d44c:	bne.n	d434 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    d44e:	movs	r0, #0
    d450:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    d452:	ldr	r0, [pc, #24]	; (d46c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    d454:	bl	cff0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d458:	cmp	r0, #0
    d45a:	bne.n	d424 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d45c:	ldr	r1, [pc, #16]	; (d470 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    d45e:	ldr	r3, [pc, #20]	; (d474 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d460:	movs	r4, #14
  m_errorLine = line;
    d462:	movw	r2, #1102	; 0x44e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d466:	strb	r4, [r1, #0]
  m_errorLine = line;
    d468:	str	r2, [r3, #0]
    d46a:	pop	{r3, r4, r5, r6, r7, pc}
    d46c:	.word	0x193a0027
    d470:	.word	0x1fff0b5c
    d474:	.word	0x20006b4c

0000d478 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    d478:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    d47a:	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    d47c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    d47e:	lsls	r2, r3, #31
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    d480:	sub.w	sp, sp, #512	; 0x200
    d484:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    d486:	bpl.n	d4bc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    d488:	lsls	r3, r5, #30
    d48a:	beq.n	d49a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    d48c:	mov	r1, r5
    d48e:	mov	r0, sp
    d490:	mov.w	r2, #512	; 0x200
    d494:	bl	db58 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    d498:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    d49a:	mov	r2, r5
    d49c:	mov	r1, r6
    d49e:	movs	r3, #1
    d4a0:	ldr	r0, [pc, #144]	; (d534 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    d4a2:	bl	cff0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d4a6:	cbnz	r0, d4b6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4a8:	ldr	r1, [pc, #140]	; (d538 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc0>)
  m_errorLine = line;
    d4aa:	ldr	r3, [pc, #144]	; (d53c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4ac:	movs	r4, #13
  m_errorLine = line;
    d4ae:	movw	r2, #1046	; 0x416
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4b2:	strb	r4, [r1, #0]
  m_errorLine = line;
    d4b4:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    d4b6:	add.w	sp, sp, #512	; 0x200
    d4ba:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d4bc:	ldr	r3, [pc, #128]	; (d540 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    d4be:	ldrb	r3, [r3, #0]
    d4c0:	mov	r4, r0
    d4c2:	cbnz	r3, d4e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x6e>
    if (!waitTransferComplete()) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    d4c4:	ldr	r3, [pc, #124]	; (d544 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
    d4c6:	ldr	r3, [r3, #0]
    d4c8:	lsrs	r3, r3, #16
    d4ca:	lsls	r3, r3, #16
    d4cc:	cbz	r3, d524 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    d4ce:	ldrb	r3, [r4, #9]
    d4d0:	cmp	r3, #2
    d4d2:	beq.n	d4f2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7a>
      if (!syncDevice()) {
    d4d4:	ldr	r3, [r4, #0]
    d4d6:	mov	r0, r4
    d4d8:	ldr	r3, [r3, #24]
    d4da:	blx	r3
    d4dc:	cbnz	r0, d4fa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    d4de:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    d4e0:	add.w	sp, sp, #512	; 0x200
    d4e4:	pop	{r4, r5, r6, pc}
    d4e6:	bl	d1fc <waitTransferComplete() [clone .part.8]>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    d4ea:	cmp	r0, #0
    d4ec:	bne.n	d4c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    d4ee:	movs	r0, #0
    d4f0:	b.n	d4e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x68>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    d4f2:	ldr	r3, [r4, #4]
    d4f4:	cmp	r6, r3
    d4f6:	bne.n	d4d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    d4f8:	b.n	d50e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x96>
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    d4fa:	ldr	r3, [r4, #0]
    d4fc:	mov	r1, r6
    d4fe:	ldr	r3, [r3, #72]	; 0x48
    d500:	mov	r0, r4
    d502:	blx	r3
    d504:	cmp	r0, #0
    d506:	beq.n	d4de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    d508:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    d50a:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    d50c:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    d50e:	ldr	r3, [r4, #0]
    d510:	mov	r1, r5
    d512:	ldr	r3, [r3, #68]	; 0x44
    d514:	mov	r0, r4
    d516:	blx	r3
    d518:	cmp	r0, #0
    d51a:	beq.n	d4de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
      return false;
    }
    m_curSector++;
    d51c:	ldr	r3, [r4, #4]
    d51e:	adds	r3, #1
    d520:	str	r3, [r4, #4]
    d522:	b.n	d4b6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    d524:	ldr	r3, [r4, #0]
    d526:	mov	r0, r4
    d528:	ldr	r3, [r3, #24]
    d52a:	blx	r3
    d52c:	cmp	r0, #0
    d52e:	bne.n	d4ce <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
    d530:	b.n	d4de <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
    d532:	nop
    d534:	.word	0x183a0001
    d538:	.word	0x1fff0b5c
    d53c:	.word	0x20006b4c
    d540:	.word	0x20006b2c
    d544:	.word	0x400b1004

0000d548 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    d548:	push	{r3, r4, r5, r6, r7, lr}
    d54a:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    d54c:	ldrb	r0, [r0, #8]
    d54e:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    d550:	mov	r4, r1
    d552:	mov	r5, r2
    d554:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    d556:	bmi.n	d580 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    d558:	cbz	r3, d57c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    d55a:	add	r7, r1
    d55c:	b.n	d562 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    d55e:	cmp	r4, r7
    d560:	beq.n	d57c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    d562:	ldr	r3, [r6, #0]
    d564:	mov	r2, r5
    d566:	mov	r1, r4
    d568:	ldr	r3, [r3, #12]
    d56a:	mov	r0, r6
    d56c:	blx	r3
    d56e:	adds	r4, #1
    d570:	add.w	r5, r5, #512	; 0x200
    d574:	cmp	r0, #0
    d576:	bne.n	d55e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    d578:	movs	r0, #0
    d57a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    d57c:	movs	r0, #1
    d57e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    d580:	lsls	r0, r2, #30
    d582:	beq.n	d5aa <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    d584:	cmp	r3, #0
    d586:	beq.n	d57c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    d588:	add	r7, r1
    d58a:	b.n	d590 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    d58c:	cmp	r7, r4
    d58e:	beq.n	d57c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    d590:	ldr	r3, [r6, #0]
    d592:	mov	r2, r5
    d594:	mov	r1, r4
    d596:	ldr	r3, [r3, #12]
    d598:	mov	r0, r6
    d59a:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    d59c:	adds	r4, #1
    d59e:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    d5a2:	cmp	r0, #0
    d5a4:	bne.n	d58c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    d5a6:	movs	r0, #0
    d5a8:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    d5aa:	ldr	r0, [pc, #24]	; (d5c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    d5ac:	bl	cff0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d5b0:	cmp	r0, #0
    d5b2:	bne.n	d57c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5b4:	ldr	r1, [pc, #16]	; (d5c8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    d5b6:	ldr	r3, [pc, #20]	; (d5cc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5b8:	movs	r4, #12
  m_errorLine = line;
    d5ba:	movw	r2, #909	; 0x38d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5be:	strb	r4, [r1, #0]
  m_errorLine = line;
    d5c0:	str	r2, [r3, #0]
    d5c2:	pop	{r3, r4, r5, r6, r7, pc}
    d5c4:	.word	0x123a0037
    d5c8:	.word	0x1fff0b5c
    d5cc:	.word	0x20006b4c

0000d5d0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    d5d0:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    d5d2:	ldr	r3, [pc, #160]	; (d674 <SdioCard::readData(unsigned char*)+0xa4>)
    d5d4:	ldr	r3, [r3, #0]
    d5d6:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    d5d8:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    d5da:	bmi.n	d5fa <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d5dc:	ldr	r3, [pc, #152]	; (d678 <SdioCard::readData(unsigned char*)+0xa8>)
    d5de:	ldr	r2, [r3, #0]
    d5e0:	bic.w	r2, r2, #65536	; 0x10000
    d5e4:	str	r2, [r3, #0]
    noInterrupts();
    d5e6:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    d5e8:	ldr	r2, [r3, #0]
    d5ea:	orr.w	r2, r2, #131072	; 0x20000
    d5ee:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d5f0:	ldr	r2, [r3, #0]
    d5f2:	orr.w	r2, r2, #65536	; 0x10000
    d5f6:	str	r2, [r3, #0]
    interrupts();
    d5f8:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    d5fa:	ldr	r0, [pc, #128]	; (d67c <SdioCard::readData(unsigned char*)+0xac>)
    d5fc:	bl	ce84 <waitTimeout(bool (*)())>
    d600:	cmp	r0, #0
    d602:	bne.n	d662 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    d604:	ldr	r4, [pc, #108]	; (d674 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    d606:	ldr	r0, [pc, #120]	; (d680 <SdioCard::readData(unsigned char*)+0xb0>)
    d608:	subs	r3, r5, #4
    d60a:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    d60e:	ldr	r2, [r4, #0]
    d610:	lsls	r1, r2, #20
    d612:	bpl.n	d60e <SdioCard::readData(unsigned char*)+0x3e>
    d614:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    d618:	ldr	r2, [r0, #0]
    d61a:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    d61e:	cmp	r1, r3
    d620:	bne.n	d618 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    d622:	cmp	r5, r1
    d624:	mov	r3, r1
    d626:	bne.n	d60e <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    d628:	ldr	r0, [pc, #88]	; (d684 <SdioCard::readData(unsigned char*)+0xb4>)
    d62a:	bl	ce84 <waitTimeout(bool (*)())>
    d62e:	cbnz	r0, d650 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    d630:	ldr	r2, [pc, #84]	; (d688 <SdioCard::readData(unsigned char*)+0xb8>)
    d632:	ldr	r3, [pc, #88]	; (d68c <SdioCard::readData(unsigned char*)+0xbc>)
    d634:	ldr	r1, [r2, #0]
    d636:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    d638:	ldr	r1, [r3, #0]
    d63a:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    d63c:	ldr	r2, [r3, #0]
    d63e:	lsls	r2, r2, #30
    d640:	bpl.n	d672 <SdioCard::readData(unsigned char*)+0xa2>
    d642:	ldr	r3, [r3, #0]
    d644:	ldr	r0, [pc, #72]	; (d690 <SdioCard::readData(unsigned char*)+0xc0>)
    d646:	ands	r0, r3
    d648:	clz	r0, r0
    d64c:	lsrs	r0, r0, #5
    d64e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d650:	ldr	r1, [pc, #64]	; (d694 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    d652:	ldr	r3, [pc, #68]	; (d698 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d654:	movs	r0, #29
  m_errorLine = line;
    d656:	movw	r2, #843	; 0x34b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d65a:	strb	r0, [r1, #0]
  m_errorLine = line;
    d65c:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    d65e:	movs	r0, #0
    d660:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d662:	ldr	r1, [pc, #48]	; (d694 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    d664:	ldr	r3, [pc, #48]	; (d698 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d666:	movs	r0, #26
  m_errorLine = line;
    d668:	mov.w	r2, #832	; 0x340
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d66c:	strb	r0, [r1, #0]
  m_errorLine = line;
    d66e:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    d670:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    d672:	pop	{r3, r4, r5, pc}
    d674:	.word	0x400b1024
    d678:	.word	0x400b1028
    d67c:	.word	0x0000cde1
    d680:	.word	0x400b1020
    d684:	.word	0x0000ce09
    d688:	.word	0x400b1030
    d68c:	.word	0x20006b30
    d690:	.word	0x117f0000
    d694:	.word	0x1fff0b5c
    d698:	.word	0x20006b4c

0000d69c <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    d69c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    d69e:	ldr	r0, [pc, #80]	; (d6f0 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    d6a0:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    d6a2:	bl	ceac <yieldTimeout(bool (*)())>
    d6a6:	cbnz	r0, d6dc <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d6a8:	ldr	r2, [pc, #72]	; (d6f4 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6aa:	ldr	r1, [pc, #76]	; (d6f8 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d6ac:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    d6ae:	ldr	r0, [pc, #76]	; (d6fc <SdioCard::readStart(unsigned long)+0x60>)
    d6b0:	ldr	r5, [pc, #76]	; (d700 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d6b2:	orr.w	r3, r3, #65536	; 0x10000
    d6b6:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6b8:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    d6ba:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6bc:	cbnz	r3, d6d8 <SdioCard::readStart(unsigned long)+0x3c>
    d6be:	lsls	r1, r4, #9
    d6c0:	ldr	r0, [pc, #64]	; (d704 <SdioCard::readStart(unsigned long)+0x68>)
    d6c2:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    d6c6:	cbnz	r0, d6d6 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6c8:	ldr	r1, [pc, #60]	; (d708 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d6ca:	ldr	r3, [pc, #64]	; (d70c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6cc:	movs	r4, #12
  m_errorLine = line;
    d6ce:	movw	r2, #937	; 0x3a9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6d2:	strb	r4, [r1, #0]
  m_errorLine = line;
    d6d4:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    d6d6:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6d8:	mov	r1, r4
    d6da:	b.n	d6c0 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6dc:	ldr	r1, [pc, #40]	; (d708 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d6de:	ldr	r3, [pc, #44]	; (d70c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6e0:	movs	r0, #10
  m_errorLine = line;
    d6e2:	movw	r2, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6e6:	strb	r0, [r1, #0]
  m_errorLine = line;
    d6e8:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d6ea:	movs	r0, #0
    d6ec:	pop	{r3, r4, r5, pc}
    d6ee:	nop
    d6f0:	.word	0x0000cf85
    d6f4:	.word	0x400b1028
    d6f8:	.word	0x20006b20
    d6fc:	.word	0x400b1004
    d700:	.word	0xffff0200
    d704:	.word	0x123a0032
    d708:	.word	0x1fff0b5c
    d70c:	.word	0x20006b4c

0000d710 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    d710:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    d712:	ldrb	r3, [r0, #8]
    d714:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    d716:	sub.w	sp, sp, #512	; 0x200
    d71a:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    d71c:	bpl.n	d744 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    d71e:	lsls	r3, r2, #30
    d720:	beq.n	d768 <SdioCard::readSector(unsigned long, unsigned char*)+0x58>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    d722:	mov	r2, sp
    d724:	movs	r3, #1
    d726:	ldr	r0, [pc, #196]	; (d7ec <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    d728:	bl	cff0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d72c:	cbz	r0, d774 <SdioCard::readSector(unsigned long, unsigned char*)+0x64>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    d72e:	mov	r1, sp
    d730:	mov	r0, r5
    d732:	mov.w	r2, #512	; 0x200
    d736:	bl	db58 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    d73a:	movs	r5, #1
}
    d73c:	mov	r0, r5
    d73e:	add.w	sp, sp, #512	; 0x200
    d742:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d744:	ldr	r3, [pc, #168]	; (d7f0 <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    d746:	ldrb	r3, [r3, #0]
    d748:	mov	r4, r0
    d74a:	mov	r6, r1
    d74c:	cbnz	r3, d7a0 <SdioCard::readSector(unsigned long, unsigned char*)+0x90>
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    d74e:	ldrb	r3, [r4, #9]
    d750:	cmp	r3, #1
    d752:	beq.n	d78c <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    d754:	ldr	r3, [r4, #0]
    d756:	mov	r0, r4
    d758:	ldr	r3, [r3, #24]
    d75a:	blx	r3
    d75c:	cbnz	r0, d7ac <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    d75e:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d760:	mov	r0, r5
    d762:	add.w	sp, sp, #512	; 0x200
    d766:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    d768:	movs	r3, #1
    d76a:	ldr	r0, [pc, #128]	; (d7ec <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    d76c:	bl	cff0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d770:	cmp	r0, #0
    d772:	bne.n	d73a <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d774:	ldr	r1, [pc, #124]	; (d7f4 <SdioCard::readSector(unsigned long, unsigned char*)+0xe4>)
  m_errorLine = line;
    d776:	ldr	r3, [pc, #128]	; (d7f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xe8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d778:	movs	r0, #11
  m_errorLine = line;
    d77a:	movw	r2, #862	; 0x35e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d77e:	strb	r0, [r1, #0]
  m_errorLine = line;
    d780:	str	r2, [r3, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    d782:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d784:	mov	r0, r5
    d786:	add.w	sp, sp, #512	; 0x200
    d78a:	pop	{r4, r5, r6, pc}
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    d78c:	ldr	r3, [r4, #4]
    d78e:	cmp	r6, r3
    d790:	beq.n	d7be <SdioCard::readSector(unsigned long, unsigned char*)+0xae>
      if (!syncDevice()) {
    d792:	ldr	r3, [r4, #0]
    d794:	mov	r0, r4
    d796:	ldr	r3, [r3, #24]
    d798:	blx	r3
    d79a:	cmp	r0, #0
    d79c:	beq.n	d75e <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    d79e:	b.n	d7ac <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
    d7a0:	bl	d1fc <waitTransferComplete() [clone .part.8]>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    d7a4:	cmp	r0, #0
    d7a6:	bne.n	d74e <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
      return false;
    d7a8:	movs	r5, #0
    d7aa:	b.n	d760 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    d7ac:	mov	r1, r6
    d7ae:	mov	r0, r4
    d7b0:	bl	d69c <SdioCard::readStart(unsigned long)>
    d7b4:	cmp	r0, #0
    d7b6:	beq.n	d75e <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    d7b8:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    d7ba:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    d7bc:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    d7be:	mov	r1, r5
    d7c0:	mov	r0, r4
    d7c2:	bl	d5d0 <SdioCard::readData(unsigned char*)>
    d7c6:	mov	r5, r0
    d7c8:	cmp	r0, #0
    d7ca:	beq.n	d75e <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    d7cc:	ldr	r3, [pc, #44]	; (d7fc <SdioCard::readSector(unsigned long, unsigned char*)+0xec>)
    d7ce:	ldr	r3, [r3, #0]
    d7d0:	lsrs	r3, r3, #16
    d7d2:	lsls	r3, r3, #16
    d7d4:	cbz	r3, d7de <SdioCard::readSector(unsigned long, unsigned char*)+0xce>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    d7d6:	ldr	r3, [r4, #4]
    d7d8:	adds	r3, #1
    d7da:	str	r3, [r4, #4]
    d7dc:	b.n	d784 <SdioCard::readSector(unsigned long, unsigned char*)+0x74>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    d7de:	ldr	r3, [r4, #0]
    d7e0:	mov	r0, r4
    d7e2:	ldr	r3, [r3, #24]
    d7e4:	blx	r3
    d7e6:	cmp	r0, #0
    d7e8:	bne.n	d7d6 <SdioCard::readSector(unsigned long, unsigned char*)+0xc6>
    d7ea:	b.n	d75e <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    d7ec:	.word	0x113a0011
    d7f0:	.word	0x20006b2c
    d7f4:	.word	0x1fff0b5c
    d7f8:	.word	0x20006b4c
    d7fc:	.word	0x400b1004

0000d800 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    d800:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d802:	ldr	r2, [pc, #80]	; (d854 <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    d804:	movs	r5, #0
    d806:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d808:	ldr	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d80a:	ldr	r0, [pc, #76]	; (d858 <SdioCard::stopTransmission(bool)+0x58>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d80c:	bic.w	r3, r3, #65536	; 0x10000
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    d810:	mov	r6, r1
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d812:	str	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d814:	mov	r1, r5
    d816:	bl	cf28 <cardCommand(unsigned long, unsigned long)>
    d81a:	mov	r4, r0
    d81c:	cbz	r0, d842 <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    d81e:	cbnz	r6, d824 <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d820:	mov	r0, r4
    d822:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    d824:	ldr	r0, [pc, #52]	; (d85c <SdioCard::stopTransmission(bool)+0x5c>)
    d826:	bl	ceac <yieldTimeout(bool (*)())>
    d82a:	cmp	r0, #0
    d82c:	beq.n	d820 <SdioCard::stopTransmission(bool)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d82e:	ldr	r1, [pc, #48]	; (d860 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    d830:	ldr	r3, [pc, #48]	; (d864 <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d832:	movs	r0, #10
  m_errorLine = line;
    d834:	movw	r2, #963	; 0x3c3
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    d838:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d83a:	strb	r0, [r1, #0]
  m_errorLine = line;
    d83c:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d83e:	mov	r0, r4
    d840:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d842:	ldr	r1, [pc, #28]	; (d860 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    d844:	ldr	r3, [pc, #28]	; (d864 <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d846:	movs	r0, #9
  m_errorLine = line;
    d848:	movw	r2, #959	; 0x3bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d84c:	strb	r0, [r1, #0]
  m_errorLine = line;
    d84e:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d850:	mov	r0, r4
    d852:	pop	{r4, r5, r6, pc}
    d854:	.word	0x400b1028
    d858:	.word	0x0cdb0000
    d85c:	.word	0x0000cdc1
    d860:	.word	0x1fff0b5c
    d864:	.word	0x20006b4c

0000d868 <SdioCard::isBusy()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
    d868:	push	{r4, r5, r6, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    d86a:	ldrb	r3, [r0, #8]
    d86c:	ands.w	r3, r3, #1
    d870:	beq.n	d87e <SdioCard::isBusy()+0x16>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d872:	ldr	r3, [pc, #88]	; (d8cc <SdioCard::isBusy()+0x64>)
    d874:	ldr	r3, [r3, #0]
    d876:	cbz	r3, d8b0 <SdioCard::isBusy()+0x48>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d878:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d87c:	bx	r3
  } else {
    if (m_transferActive) {
    d87e:	ldr	r2, [pc, #80]	; (d8d0 <SdioCard::isBusy()+0x68>)
    d880:	ldrb	r4, [r2, #0]
    d882:	cbnz	r4, d894 <SdioCard::isBusy()+0x2c>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    d884:	ldr	r3, [pc, #76]	; (d8d4 <SdioCard::isBusy()+0x6c>)
    d886:	ldr	r4, [r3, #0]
    d888:	eor.w	r4, r4, #16777216	; 0x1000000
    d88c:	ubfx	r4, r4, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d890:	mov	r0, r4
    d892:	pop	{r4, r5, r6, pc}
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    d894:	ldr	r5, [pc, #64]	; (d8d8 <SdioCard::isBusy()+0x70>)
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    d896:	ldr	r1, [pc, #68]	; (d8dc <SdioCard::isBusy()+0x74>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    d898:	ldr	r5, [r5, #0]
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    d89a:	ands	r1, r5
    d89c:	cmp	r1, #0
    d89e:	beq.n	d890 <SdioCard::isBusy()+0x28>
        return true;
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
    d8a0:	ldr	r1, [pc, #60]	; (d8e0 <SdioCard::isBusy()+0x78>)
    d8a2:	ldr	r5, [r1, #0]
    d8a4:	lsrs	r5, r5, #16
    d8a6:	lsls	r5, r5, #16
    d8a8:	cbz	r5, d8c0 <SdioCard::isBusy()+0x58>
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d8aa:	mov	r4, r3
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d8ac:	mov	r0, r4
    d8ae:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d8b0:	ldr	r3, [pc, #48]	; (d8e4 <SdioCard::isBusy()+0x7c>)
    d8b2:	ldrb	r4, [r3, #0]
    d8b4:	cmp	r4, #0
    d8b6:	beq.n	d890 <SdioCard::isBusy()+0x28>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d8b8:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d8bc:	b.w	cf84 <isBusyCMD13()>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
      stopTransmission(false);
    d8c0:	mov	r1, r5
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
    d8c2:	strb	r5, [r2, #0]
      stopTransmission(false);
    d8c4:	bl	d800 <SdioCard::stopTransmission(bool)>
    d8c8:	b.n	d890 <SdioCard::isBusy()+0x28>
    d8ca:	nop
    d8cc:	.word	0x20006b1c
    d8d0:	.word	0x20006b2c
    d8d4:	.word	0x400b1024
    d8d8:	.word	0x400b1030
    d8dc:	.word	0x117f0002
    d8e0:	.word	0x400b1004
    d8e4:	.word	0x20006b34

0000d8e8 <SdioCard::syncDevice()>:
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d8e8:	ldr	r3, [pc, #36]	; (d910 <SdioCard::syncDevice()+0x28>)
    d8ea:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    d8ec:	push	{r4, lr}
    d8ee:	mov	r4, r0
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d8f0:	cbnz	r3, d906 <SdioCard::syncDevice()+0x1e>
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    d8f2:	ldrb	r3, [r4, #9]
    d8f4:	cbnz	r3, d8fa <SdioCard::syncDevice()+0x12>
    if (!writeStop()) {
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
    d8f6:	movs	r0, #1
    d8f8:	pop	{r4, pc}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    d8fa:	mov	r0, r4
    d8fc:	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    d8fe:	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    d902:	b.w	d800 <SdioCard::stopTransmission(bool)>
    d906:	bl	d1fc <waitTransferComplete() [clone .part.8]>
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    d90a:	cmp	r0, #0
    d90c:	bne.n	d8f2 <SdioCard::syncDevice()+0xa>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    d90e:	pop	{r4, pc}
    d910:	.word	0x20006b2c

0000d914 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    d914:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    d916:	ldr	r3, [r0, #0]
    d918:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    d91a:	ldrb	r1, [r3, #11]
    d91c:	cbz	r1, d95e <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    d91e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    d920:	ldrb	r1, [r3, #11]
    d922:	lsls	r0, r1, #31
    d924:	bpl.n	d934 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    d926:	ldr	r0, [pc, #100]	; (d98c <SdSpiArduinoDriver::activate()+0x78>)
    d928:	ldr	r1, [r3, #12]
    d92a:	ldr	r4, [r0, #0]
    d92c:	ands	r1, r4
    d92e:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    d930:	str	r1, [r0, #0]
    d932:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    d934:	lsls	r4, r1, #30
    d936:	bpl.n	d946 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    d938:	ldr	r0, [pc, #84]	; (d990 <SdSpiArduinoDriver::activate()+0x7c>)
    d93a:	ldr	r1, [r3, #16]
    d93c:	ldr	r4, [r0, #0]
    d93e:	ands	r1, r4
    d940:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    d942:	str	r1, [r0, #0]
    d944:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    d946:	lsls	r0, r1, #29
    d948:	bpl.n	d958 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    d94a:	ldr	r0, [pc, #72]	; (d994 <SdSpiArduinoDriver::activate()+0x80>)
    d94c:	ldr	r1, [r3, #20]
    d94e:	ldr	r4, [r0, #0]
    d950:	ands	r1, r4
    d952:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    d954:	str	r1, [r0, #0]
    d956:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    d958:	lsls	r1, r1, #28
    d95a:	bmi.n	d97c <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    d95c:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    d95e:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    d960:	ldr	r1, [r3, #12]
    d962:	cmp	r1, r2
    d964:	beq.n	d976 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    d966:	ldr	r0, [pc, #48]	; (d998 <SdSpiArduinoDriver::activate()+0x84>)
    d968:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    d96a:	ldr	r1, [pc, #48]	; (d99c <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    d96c:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    d96e:	orr.w	r0, r2, #1073741824	; 0x40000000
    d972:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    d974:	str	r1, [r3, #0]
}
    d976:	ldr.w	r4, [sp], #4
    d97a:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    d97c:	ldr	r0, [pc, #32]	; (d9a0 <SdSpiArduinoDriver::activate()+0x8c>)
    d97e:	ldr	r1, [r3, #24]
    d980:	ldr	r4, [r0, #0]
    d982:	ands	r1, r4
    d984:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    d986:	str	r1, [r0, #0]
    d988:	b.n	d95c <SdSpiArduinoDriver::activate()+0x48>
    d98a:	nop
    d98c:	.word	0xe000e180
    d990:	.word	0xe000e184
    d994:	.word	0xe000e188
    d998:	.word	0x003f4001
    d99c:	.word	0x803f0000
    d9a0:	.word	0xe000e18c

0000d9a4 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    d9a4:	push	{r4, lr}
    d9a6:	sub	sp, #16
    d9a8:	add	r4, sp, #16
    d9aa:	stmdb	r4, {r1, r2, r3}
    d9ae:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    d9b0:	cbz	r3, d9c0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1c>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    d9b2:	str	r3, [r0, #0]
    d9b4:	mov	r0, r3
  }
  m_spi->begin();
}
    d9b6:	add	sp, #16
    d9b8:	ldmia.w	sp!, {r4, lr}
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    d9bc:	b.w	7bc4 <SPIClass::begin()>
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    d9c0:	ldrb.w	r3, [sp, #4]
    d9c4:	cmp	r3, #62	; 0x3e
    d9c6:	beq.n	d9cc <SdSpiArduinoDriver::begin(SdSpiConfig)+0x28>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    d9c8:	ldr	r3, [pc, #32]	; (d9ec <SdSpiArduinoDriver::begin(SdSpiConfig)+0x48>)
    d9ca:	b.n	d9b2 <SdSpiArduinoDriver::begin(SdSpiConfig)+0xe>
    d9cc:	mov	r4, r0
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    m_spi = &SDCARD_SPI;
    d9ce:	ldr	r0, [pc, #32]	; (d9f0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x4c>)
    d9d0:	str	r0, [r4, #0]
    m_spi->setMISO(SDCARD_MISO_PIN);
    d9d2:	movs	r1, #59	; 0x3b
    d9d4:	bl	7ce4 <SPIClass::setMISO(unsigned char)>
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    d9d8:	movs	r1, #61	; 0x3d
    d9da:	ldr	r0, [r4, #0]
    d9dc:	bl	7c40 <SPIClass::setMOSI(unsigned char)>
    m_spi->setSCK(SDCARD_SCK_PIN);
    d9e0:	ldr	r0, [r4, #0]
    d9e2:	movs	r1, #60	; 0x3c
    d9e4:	bl	7d84 <SPIClass::setSCK(unsigned char)>
    d9e8:	ldr	r0, [r4, #0]
    d9ea:	b.n	d9b6 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x12>
    d9ec:	.word	0x1fff0994
    d9f0:	.word	0x1fff09d4

0000d9f4 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    d9f4:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    d9f6:	ldrb	r3, [r2, #11]
    d9f8:	cbz	r3, da28 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    d9fa:	lsls	r1, r3, #31
    d9fc:	bpl.n	da06 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    d9fe:	ldr	r3, [pc, #44]	; (da2c <SdSpiArduinoDriver::deactivate()+0x38>)
    da00:	ldr	r1, [r2, #28]
    da02:	str	r1, [r3, #0]
    da04:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    da06:	lsls	r0, r3, #30
    da08:	bpl.n	da12 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    da0a:	ldr	r3, [pc, #36]	; (da30 <SdSpiArduinoDriver::deactivate()+0x3c>)
    da0c:	ldr	r1, [r2, #32]
    da0e:	str	r1, [r3, #0]
    da10:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    da12:	lsls	r1, r3, #29
    da14:	bpl.n	da1e <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    da16:	ldr	r3, [pc, #28]	; (da34 <SdSpiArduinoDriver::deactivate()+0x40>)
    da18:	ldr	r1, [r2, #36]	; 0x24
    da1a:	str	r1, [r3, #0]
    da1c:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    da1e:	lsls	r3, r3, #28
    da20:	bpl.n	da28 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    da22:	ldr	r3, [pc, #20]	; (da38 <SdSpiArduinoDriver::deactivate()+0x44>)
    da24:	ldr	r2, [r2, #40]	; 0x28
    da26:	str	r2, [r3, #0]
    da28:	bx	lr
    da2a:	nop
    da2c:	.word	0xe000e100
    da30:	.word	0xe000e104
    da34:	.word	0xe000e108
    da38:	.word	0xe000e10c

0000da3c <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    da3c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    da3e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    da40:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    da44:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    da46:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    da48:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    da4a:	ldr	r3, [r2, #44]	; 0x2c
    da4c:	cmp	r3, #0
    da4e:	bge.n	da4a <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    da50:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    da52:	uxtb	r0, r0
    da54:	bx	lr
    da56:	nop

0000da58 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    da58:	push	{r4, r5, r6, lr}
    da5a:	mov	r5, r0
    da5c:	mov	r4, r1
    da5e:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    da60:	mov	r0, r1
    da62:	movs	r1, #255	; 0xff
    da64:	bl	10dec <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    da68:	ldr	r0, [r5, #0]
    da6a:	mov	r3, r6
    da6c:	mov	r2, r4
    da6e:	mov	r1, r4
    da70:	bl	7e34 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    da74:	movs	r0, #0
    da76:	pop	{r4, r5, r6, pc}

0000da78 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    da78:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    da7a:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    da7c:	mov.w	r3, #2147483648	; 0x80000000
    da80:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    da82:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    da84:	ldr	r3, [r2, #44]	; 0x2c
    da86:	cmp	r3, #0
    da88:	bge.n	da84 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    da8a:	ldr	r3, [r2, #56]	; 0x38
    da8c:	bx	lr
    da8e:	nop

0000da90 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    da90:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    da92:	subs	r5, r2, #1
    da94:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    da98:	sub.w	sp, sp, #516	; 0x204
    da9c:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    da9e:	bcc.n	dac6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    daa0:	cbz	r2, dac0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    daa2:	ldr	r2, [r0, #0]
    daa4:	ldr	r2, [r2, #0]
    daa6:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    daa8:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    daac:	ldrb.w	r3, [r1], #1
    dab0:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    dab2:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    dab4:	ldr	r3, [r2, #44]	; 0x2c
    dab6:	cmp	r3, #0
    dab8:	bge.n	dab4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    daba:	cmp	r1, r0
		return port().POPR;
    dabc:	ldr	r3, [r2, #56]	; 0x38
    dabe:	bne.n	daac <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    dac0:	add.w	sp, sp, #516	; 0x204
    dac4:	pop	{r4, r5, pc}
    dac6:	mov	r5, r0
    dac8:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    daca:	mov	r0, sp
    dacc:	bl	db58 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    dad0:	mov	r3, r4
    dad2:	mov	r2, sp
    dad4:	mov	r1, sp
    dad6:	ldr	r0, [r5, #0]
    dad8:	bl	7e34 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    dadc:	add.w	sp, sp, #516	; 0x204
    dae0:	pop	{r4, r5, pc}
    dae2:	nop

0000dae4 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    dae4:	movs	r1, #1
    dae6:	b.w	e6d0 <pinMode>
    daea:	nop

0000daec <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    daec:	b.w	e6c4 <digitalWrite>

0000daf0 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    daf0:	bx	lr
    daf2:	nop

0000daf4 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    daf4:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    daf6:	ldr	r3, [pc, #68]	; (db3c <_GLOBAL__sub_I_SD+0x48>)
    daf8:	ldr	r5, [pc, #68]	; (db40 <_GLOBAL__sub_I_SD+0x4c>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    dafa:	ldr	r4, [pc, #72]	; (db44 <_GLOBAL__sub_I_SD+0x50>)
    dafc:	str	r5, [r3, #0]
    dafe:	str.w	r4, [r3, #1184]	; 0x4a0
    db02:	movs	r5, #41	; 0x29
    db04:	movs	r4, #0
    db06:	ldr	r0, [pc, #64]	; (db48 <_GLOBAL__sub_I_SD+0x54>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    db08:	ldr	r7, [pc, #64]	; (db4c <_GLOBAL__sub_I_SD+0x58>)
    db0a:	strb.w	r5, [r3, #1203]	; 0x4b3
    db0e:	movs	r6, #1
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    db10:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    db14:	strb.w	r4, [r3, #1181]	; 0x49d
    db18:	strb.w	r4, [r3, #1206]	; 0x4b6
    db1c:	str.w	r0, [r3, #1172]	; 0x494
    db20:	str.w	r7, [r3, #1192]	; 0x4a8
    db24:	strb.w	r6, [r3, #1201]	; 0x4b1
    db28:	str.w	r4, [r3, #1156]	; 0x484
    db2c:	str.w	r4, [r3, #1160]	; 0x488
    db30:	ldr	r2, [pc, #28]	; (db50 <_GLOBAL__sub_I_SD+0x5c>)
    db32:	ldr	r1, [pc, #32]	; (db54 <_GLOBAL__sub_I_SD+0x60>)
    db34:	mov	r0, r3
    db36:	pop	{r4, r5, r6, r7}
    db38:	b.w	f928 <__aeabi_atexit>
    db3c:	.word	0x20006b50
    db40:	.word	0x000149dc
    db44:	.word	0x00014f30
    db48:	.word	0x00014f88
    db4c:	.word	0x38002003
    db50:	.word	0x1fff0970
    db54:	.word	0x0000daf1

0000db58 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    db58:	push	{r0}
#endif
	orr	r3, r1, r0
    db5a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    db5e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    db62:	bne.n	dc44 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    db64:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    db66:	bcc.n	dbec <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    db68:	ldr.w	r3, [r1], #4
    db6c:	str.w	r3, [r0], #4
    db70:	ldr.w	r3, [r1], #4
    db74:	str.w	r3, [r0], #4
    db78:	ldr.w	r3, [r1], #4
    db7c:	str.w	r3, [r0], #4
    db80:	ldr.w	r3, [r1], #4
    db84:	str.w	r3, [r0], #4
    db88:	ldr.w	r3, [r1], #4
    db8c:	str.w	r3, [r0], #4
    db90:	ldr.w	r3, [r1], #4
    db94:	str.w	r3, [r0], #4
    db98:	ldr.w	r3, [r1], #4
    db9c:	str.w	r3, [r0], #4
    dba0:	ldr.w	r3, [r1], #4
    dba4:	str.w	r3, [r0], #4
    dba8:	ldr.w	r3, [r1], #4
    dbac:	str.w	r3, [r0], #4
    dbb0:	ldr.w	r3, [r1], #4
    dbb4:	str.w	r3, [r0], #4
    dbb8:	ldr.w	r3, [r1], #4
    dbbc:	str.w	r3, [r0], #4
    dbc0:	ldr.w	r3, [r1], #4
    dbc4:	str.w	r3, [r0], #4
    dbc8:	ldr.w	r3, [r1], #4
    dbcc:	str.w	r3, [r0], #4
    dbd0:	ldr.w	r3, [r1], #4
    dbd4:	str.w	r3, [r0], #4
    dbd8:	ldr.w	r3, [r1], #4
    dbdc:	str.w	r3, [r0], #4
    dbe0:	ldr.w	r3, [r1], #4
    dbe4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    dbe8:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    dbea:	bcs.n	db68 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    dbec:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    dbee:	bcc.n	dc14 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    dbf0:	ldr.w	r3, [r1], #4
    dbf4:	str.w	r3, [r0], #4
    dbf8:	ldr.w	r3, [r1], #4
    dbfc:	str.w	r3, [r0], #4
    dc00:	ldr.w	r3, [r1], #4
    dc04:	str.w	r3, [r0], #4
    dc08:	ldr.w	r3, [r1], #4
    dc0c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    dc10:	subs	r2, #16
	bhs	.Lmid_block_loop
    dc12:	bcs.n	dbf0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    dc14:	adds	r2, #12
	blo	.Lcopy_less_than_4
    dc16:	bcc.n	dc24 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    dc18:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    dc1c:	str.w	r3, [r0], #4
	subs	r2, #4
    dc20:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    dc22:	bcs.n	dc18 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    dc24:	adds	r2, #4
	beq	.Ldone
    dc26:	beq.n	dc3e <memcpy+0xe6>

	lsls	r2, r2, #31
    dc28:	lsls	r2, r2, #31
	itt ne
    dc2a:	itt	ne
	ldrbne  r3, [r1], #1
    dc2c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    dc30:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    dc34:	bcc.n	dc3e <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    dc36:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    dc38:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    dc3a:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    dc3c:	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    dc3e:	pop	{r0}
#endif
	bx	lr
    dc40:	bx	lr
    dc42:	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    dc44:	cmp	r2, #12
	blo	.Lbyte_copy
    dc46:	bcc.n	dcde <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    dc48:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    dc4c:	beq.n	dc72 <memcpy+0x11a>

	rsb	r3, #4
    dc4e:	rsb	r3, r3, #4
	subs	r2, r3
    dc52:	subs	r2, r2, r3

	lsls    r3, r3, #31
    dc54:	lsls	r3, r3, #31
	itt ne
    dc56:	itt	ne
	ldrbne  r3, [r1], #1
    dc58:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    dc5c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    dc60:	bcc.n	dc72 <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    dc62:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    dc66:	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    dc6a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    dc6e:	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    dc72:	ands.w	r3, r1, #3
	beq	.Lbig_block
    dc76:	beq.w	db64 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    dc7a:	push	{r4, r5}
	subs	r2, #4
    dc7c:	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    dc7e:	subs	r1, r1, r3
	rsb	ip, r3, #4
    dc80:	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    dc84:	ldr.w	r4, [r1], #4

	cmp	r3, #2
    dc88:	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    dc8a:	beq.n	dcc0 <memcpy+0x168>
	cmp	r3, #3
    dc8c:	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    dc8e:	beq.n	dca8 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    dc90:	lsrs	r4, r4, #8
    dc92:	ldr.w	r3, [r1], #4
    dc96:	lsls	r5, r3, #24
    dc98:	orr.w	r4, r4, r5
    dc9c:	str.w	r4, [r0], #4
    dca0:	mov	r4, r3
    dca2:	subs	r2, #4
    dca4:	bcs.n	dc90 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    dca6:	b.n	dcd6 <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    dca8:	lsrs	r4, r4, #24
    dcaa:	ldr.w	r3, [r1], #4
    dcae:	lsls	r5, r3, #8
    dcb0:	orr.w	r4, r4, r5
    dcb4:	str.w	r4, [r0], #4
    dcb8:	mov	r4, r3
    dcba:	subs	r2, #4
    dcbc:	bcs.n	dca8 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    dcbe:	b.n	dcd6 <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    dcc0:	lsrs	r4, r4, #16
    dcc2:	ldr.w	r3, [r1], #4
    dcc6:	lsls	r5, r3, #16
    dcc8:	orr.w	r4, r4, r5
    dccc:	str.w	r4, [r0], #4
    dcd0:	mov	r4, r3
    dcd2:	subs	r2, #4
    dcd4:	bcs.n	dcc0 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    dcd6:	adds	r2, #4
	subs	r1, ip
    dcd8:	subs.w	r1, r1, ip
	pop	{r4, r5}
    dcdc:	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    dcde:	subs	r2, #4
	blo	.Lcopy_less_than_4
    dce0:	bcc.n	dc24 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    dce2:	subs	r2, #1
	ldrb    r3, [r1], #1
    dce4:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    dce8:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    dcec:	bcs.n	dce2 <memcpy+0x18a>

	ldrb	r3, [r1]
    dcee:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    dcf0:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    dcf2:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    dcf4:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    dcf6:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    dcf8:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    dcfa:	pop	{r0}
#endif
	bx	lr
    dcfc:	bx	lr
    dcfe:	nop

0000dd00 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    dd00:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    dd02:	ldr	r5, [pc, #60]	; (dd40 <usb_serial_getchar+0x40>)
    dd04:	ldr	r0, [r5, #0]
    dd06:	cbz	r0, dd28 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    dd08:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    dd0a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    dd0c:	adds	r1, r0, r3
    dd0e:	adds	r3, #1
	if (i >= rx_packet->len) {
    dd10:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    dd12:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    dd14:	bcs.n	dd1c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    dd16:	strh	r3, [r0, #2]
	}
	return c;
    dd18:	mov	r0, r4
}
    dd1a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    dd1c:	bl	e970 <usb_free>
		rx_packet = NULL;
    dd20:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    dd22:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    dd24:	str	r3, [r5, #0]
    dd26:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    dd28:	ldr	r3, [pc, #24]	; (dd44 <usb_serial_getchar+0x44>)
    dd2a:	ldrb	r3, [r3, #0]
    dd2c:	cbz	r3, dd3a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    dd2e:	movs	r0, #2
    dd30:	bl	e9bc <usb_rx>
    dd34:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    dd36:	cmp	r0, #0
    dd38:	bne.n	dd08 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    dd3a:	mov.w	r0, #4294967295
    dd3e:	pop	{r3, r4, r5, pc}
    dd40:	.word	0x20007014
    dd44:	.word	0x20007120

0000dd48 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    dd48:	push	{r4, lr}
	if (!rx_packet) {
    dd4a:	ldr	r4, [pc, #36]	; (dd70 <usb_serial_peekchar+0x28>)
    dd4c:	ldr	r0, [r4, #0]
    dd4e:	cbz	r0, dd58 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    dd50:	ldrh	r3, [r0, #2]
    dd52:	add	r0, r3
    dd54:	ldrb	r0, [r0, #8]
}
    dd56:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    dd58:	ldr	r3, [pc, #24]	; (dd74 <usb_serial_peekchar+0x2c>)
    dd5a:	ldrb	r3, [r3, #0]
    dd5c:	cbz	r3, dd6a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    dd5e:	movs	r0, #2
    dd60:	bl	e9bc <usb_rx>
    dd64:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    dd66:	cmp	r0, #0
    dd68:	bne.n	dd50 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    dd6a:	mov.w	r0, #4294967295
    dd6e:	pop	{r4, pc}
    dd70:	.word	0x20007014
    dd74:	.word	0x20007120

0000dd78 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    dd78:	ldr	r3, [pc, #16]	; (dd8c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    dd7a:	ldr	r2, [pc, #20]	; (dd90 <usb_serial_available+0x18>)
    dd7c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    dd7e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    dd80:	cbz	r3, dd8a <usb_serial_available+0x12>
    dd82:	ldrh	r2, [r3, #0]
    dd84:	ldrh	r3, [r3, #2]
    dd86:	subs	r3, r2, r3
    dd88:	add	r0, r3
	return count;
}
    dd8a:	bx	lr
    dd8c:	.word	0x20007014
    dd90:	.word	0x200071a8

0000dd94 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    dd94:	ldr	r3, [pc, #44]	; (ddc4 <usb_serial_flush_input+0x30>)
    dd96:	ldrb	r3, [r3, #0]
    dd98:	cbz	r3, ddc2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    dd9a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    dd9c:	ldr	r4, [pc, #40]	; (ddc8 <usb_serial_flush_input+0x34>)
    dd9e:	ldr	r0, [r4, #0]
    dda0:	cbz	r0, ddb6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    dda2:	bl	e970 <usb_free>
		rx_packet = NULL;
    dda6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    dda8:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    ddaa:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    ddac:	bl	e9bc <usb_rx>
		if (!rx) break;
    ddb0:	cbz	r0, ddc0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    ddb2:	bl	e970 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    ddb6:	movs	r0, #2
    ddb8:	bl	e9bc <usb_rx>
		if (!rx) break;
    ddbc:	cmp	r0, #0
    ddbe:	bne.n	ddb2 <usb_serial_flush_input+0x1e>
    ddc0:	pop	{r4, pc}
    ddc2:	bx	lr
    ddc4:	.word	0x20007120
    ddc8:	.word	0x20007014

0000ddcc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    ddcc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    ddd0:	ldr.w	r9, [pc, #248]	; decc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    ddd4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    ddd6:	movs	r2, #1
    ddd8:	strb.w	r2, [r9]
	while (size > 0) {
    dddc:	str	r1, [sp, #4]
    ddde:	cbz	r1, de3c <usb_serial_write+0x70>
    dde0:	ldr.w	r8, [pc, #236]	; ded0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    dde4:	ldr	r7, [pc, #212]	; (debc <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    dde6:	ldr	r6, [sp, #4]
    dde8:	mov	fp, r0
		if (!tx_packet) {
    ddea:	ldr.w	r0, [r8]
    ddee:	cbz	r0, de5e <usb_serial_write+0x92>
    ddf0:	ldr	r5, [pc, #204]	; (dec0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    ddf2:	ldrh	r4, [r0, #2]
    ddf4:	rsb	r1, r4, #64	; 0x40
    ddf8:	cmp	r1, r6
    ddfa:	it	cs
    ddfc:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    ddfe:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    de02:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    de04:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    de08:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    de0a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    de0c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    de10:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    de14:	cbz	r1, de2c <usb_serial_write+0x60>
    de16:	subs	r4, #1
    de18:	add	r2, r4
    de1a:	add	r1, fp
    de1c:	ldrb.w	r4, [fp], #1
    de20:	strb.w	r4, [r2, #1]!
    de24:	cmp	fp, r1
    de26:	bne.n	de1c <usb_serial_write+0x50>
    de28:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    de2c:	cmp.w	lr, #63	; 0x3f
    de30:	bhi.n	de4a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    de32:	ldr	r2, [pc, #144]	; (dec4 <usb_serial_write+0xf8>)
    de34:	movs	r1, #5
    de36:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    de38:	cmp	r6, #0
    de3a:	bne.n	ddea <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    de3c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    de3e:	movs	r3, #0
    de40:	strb.w	r3, [r9]
	return ret;
}
    de44:	add	sp, #12
    de46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    de4a:	movs	r2, #64	; 0x40
    de4c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    de4e:	mov	r1, r0
    de50:	movs	r0, #3
    de52:	bl	eaa8 <usb_tx>
			tx_packet = NULL;
    de56:	movs	r2, #0
    de58:	str.w	r2, [r8]
    de5c:	b.n	de32 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    de5e:	ldrb	r2, [r7, #0]
    de60:	cbz	r2, deac <usb_serial_write+0xe0>
    de62:	ldr	r4, [pc, #100]	; (dec8 <usb_serial_write+0xfc>)
    de64:	ldr	r5, [pc, #88]	; (dec0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    de66:	mov.w	sl, #1
    de6a:	b.n	de7c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    de6c:	subs	r4, #1
    de6e:	beq.n	de9e <usb_serial_write+0xd2>
    de70:	ldrb	r2, [r5, #0]
    de72:	cbnz	r2, de9e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    de74:	bl	f464 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    de78:	ldrb	r2, [r7, #0]
    de7a:	cbz	r2, deac <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    de7c:	movs	r0, #3
    de7e:	bl	e9f8 <usb_tx_packet_count>
    de82:	cmp	r0, #7
    de84:	bhi.n	de6c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    de86:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    de8a:	bl	e930 <usb_malloc>
    de8e:	str.w	r0, [r8]
					if (tx_packet) break;
    de92:	cmp	r0, #0
    de94:	bne.n	ddf2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    de96:	ldr	r3, [pc, #52]	; (decc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    de98:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    de9a:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    de9c:	bne.n	de70 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    de9e:	movs	r3, #1
					return -1;
    dea0:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    dea4:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    dea6:	add	sp, #12
    dea8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    deac:	movs	r3, #0
					return -1;
    deae:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    deb2:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    deb6:	add	sp, #12
    deb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    debc:	.word	0x20007120
    dec0:	.word	0x20007010
    dec4:	.word	0x20007008
    dec8:	.word	0x00012cc9
    decc:	.word	0x20007009
    ded0:	.word	0x2000700c

0000ded4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ded4:	push	{lr}
    ded6:	sub	sp, #12
    ded8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    deda:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    dedc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    dee0:	mov	r0, r3
    dee2:	bl	ddcc <usb_serial_write>
}
    dee6:	add	sp, #12
    dee8:	ldr.w	pc, [sp], #4

0000deec <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    deec:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    deee:	ldr	r5, [pc, #56]	; (df28 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    def0:	ldr	r4, [pc, #56]	; (df2c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    def2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    def4:	movs	r3, #1
    def6:	strb	r3, [r4, #0]
	if (!tx_packet) {
    def8:	cbz	r0, df06 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    defa:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    defc:	movs	r3, #0
    defe:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    df00:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    df04:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    df06:	ldr	r3, [pc, #40]	; (df30 <usb_serial_write_buffer_free+0x44>)
    df08:	ldrb	r3, [r3, #0]
    df0a:	cbnz	r3, df12 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    df0c:	movs	r0, #0
    df0e:	strb	r0, [r4, #0]
			return 0;
    df10:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    df12:	movs	r0, #3
    df14:	bl	e9f8 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    df18:	cmp	r0, #7
    df1a:	bhi.n	df0c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    df1c:	bl	e930 <usb_malloc>
    df20:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    df22:	cmp	r0, #0
    df24:	bne.n	defa <usb_serial_write_buffer_free+0xe>
    df26:	b.n	df0c <usb_serial_write_buffer_free+0x20>
    df28:	.word	0x2000700c
    df2c:	.word	0x20007009
    df30:	.word	0x20007120

0000df34 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    df34:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    df36:	ldr	r3, [pc, #68]	; (df7c <usb_serial_flush_output+0x48>)
    df38:	ldrb	r3, [r3, #0]
    df3a:	cbz	r3, df60 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    df3c:	ldr	r6, [pc, #64]	; (df80 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    df3e:	ldr	r5, [pc, #68]	; (df84 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    df40:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    df42:	movs	r7, #1
    df44:	strb	r7, [r5, #0]
	if (tx_packet) {
    df46:	cbz	r4, df62 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    df48:	ldr	r2, [pc, #60]	; (df88 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    df4a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    df4c:	movs	r7, #0
    df4e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    df50:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    df52:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    df54:	movs	r0, #3
    df56:	bl	eaa8 <usb_tx>
		tx_packet = NULL;
    df5a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    df5c:	movs	r3, #0
    df5e:	strb	r3, [r5, #0]
    df60:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    df62:	bl	e930 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    df66:	ldr	r3, [pc, #32]	; (df88 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    df68:	cbz	r0, df76 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    df6a:	mov	r1, r0
    df6c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    df6e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    df70:	bl	eaa8 <usb_tx>
    df74:	b.n	df5c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    df76:	strb	r7, [r3, #0]
    df78:	b.n	df5c <usb_serial_flush_output+0x28>
    df7a:	nop
    df7c:	.word	0x20007120
    df80:	.word	0x2000700c
    df84:	.word	0x20007009
    df88:	.word	0x20007008

0000df8c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    df8c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    df8e:	ldr	r3, [pc, #56]	; (dfc8 <usb_serial_flush_callback+0x3c>)
    df90:	ldrb	r3, [r3, #0]
    df92:	cbnz	r3, dfb2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    df94:	ldr	r4, [pc, #52]	; (dfcc <usb_serial_flush_callback+0x40>)
    df96:	ldr	r1, [r4, #0]
    df98:	cbz	r1, dfb4 <usb_serial_flush_callback+0x28>
    df9a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    df9e:	ldrh	r3, [r1, #2]
    dfa0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    dfa2:	movs	r0, #3
    dfa4:	bl	eaa8 <usb_tx>
		tx_packet = NULL;
    dfa8:	str	r5, [r4, #0]
    dfaa:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    dfac:	ldr	r3, [pc, #32]	; (dfd0 <usb_serial_flush_callback+0x44>)
    dfae:	movs	r2, #1
    dfb0:	strb	r2, [r3, #0]
    dfb2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    dfb4:	bl	e930 <usb_malloc>
		if (tx) {
    dfb8:	cmp	r0, #0
    dfba:	beq.n	dfac <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    dfbc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    dfbe:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    dfc2:	movs	r0, #3
    dfc4:	b.w	eaa8 <usb_tx>
    dfc8:	.word	0x20007009
    dfcc:	.word	0x2000700c
    dfd0:	.word	0x20007008

0000dfd4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    dfd4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    dfd6:	ldr	r0, [pc, #164]	; (e07c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    dfd8:	ldr	r2, [pc, #164]	; (e080 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    dfda:	ldr	r3, [pc, #168]	; (e084 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    dfdc:	ldr	r5, [pc, #168]	; (e088 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    dfde:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    dfe0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    dfe2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    dfe4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    dfe6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    dfe8:	ldr	r4, [pc, #160]	; (e08c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    dfea:	cmp	r3, #8
    dfec:	beq.n	e050 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    dfee:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    dff0:	ldr	r0, [pc, #156]	; (e090 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    dff2:	ldr	r1, [pc, #160]	; (e094 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    dff4:	beq.n	e066 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    dff6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    dff8:	ite	eq
    dffa:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    dffc:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    dffe:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e000:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e002:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e004:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e006:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e008:	ldr	r3, [pc, #140]	; (e098 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e00a:	ldr	r1, [pc, #144]	; (e09c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e00c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e00e:	ldr	r2, [pc, #144]	; (e0a0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e010:	cbz	r3, e042 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e012:	movs	r3, #1
    e014:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e016:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    e018:	ldr	r3, [pc, #136]	; (e0a4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    e01a:	ldr	r1, [pc, #140]	; (e0a8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    e01c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    e01e:	ldr	r2, [pc, #140]	; (e0ac <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    e020:	cmp	r3, #1
    e022:	bls.n	e072 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    e024:	cmp	r3, #4
    e026:	bls.n	e048 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    e028:	cmp	r3, #8
    e02a:	bls.n	e06a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    e02c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    e02e:	ite	ls
    e030:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    e032:	movhi	r3, #135	; 0x87
    e034:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    e036:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    e038:	ldr	r3, [pc, #116]	; (e0b0 <analog_init+0xdc>)
    e03a:	movs	r2, #1
    e03c:	strb	r2, [r3, #0]
}
    e03e:	pop	{r4, r5}
    e040:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    e042:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    e044:	str	r3, [r2, #0]
    e046:	b.n	e018 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    e048:	movs	r3, #132	; 0x84
    e04a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    e04c:	str	r3, [r2, #0]
    e04e:	b.n	e038 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e050:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e054:	ldr	r1, [pc, #60]	; (e094 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e056:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e058:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e05a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e05c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e05e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e060:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e062:	str	r3, [r1, #0]
    e064:	b.n	e008 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e066:	movs	r2, #57	; 0x39
    e068:	b.n	e05a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    e06a:	movs	r3, #133	; 0x85
    e06c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    e06e:	str	r3, [r2, #0]
    e070:	b.n	e038 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    e072:	movs	r3, #128	; 0x80
    e074:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    e076:	str	r3, [r2, #0]
    e078:	b.n	e038 <analog_init+0x64>
    e07a:	nop
    e07c:	.word	0x40074000
    e080:	.word	0x40074001
    e084:	.word	0x1fff0b5d
    e088:	.word	0x4003b008
    e08c:	.word	0x4003b00c
    e090:	.word	0x400bb008
    e094:	.word	0x400bb00c
    e098:	.word	0x2000701a
    e09c:	.word	0x4003b020
    e0a0:	.word	0x400bb020
    e0a4:	.word	0x1fff0b5e
    e0a8:	.word	0x4003b024
    e0ac:	.word	0x400bb024
    e0b0:	.word	0x20007019

0000e0b4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    e0b4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    e0b6:	ldr	r4, [pc, #64]	; (e0f8 <fault_isr+0x44>)
    e0b8:	b.n	e0cc <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    e0ba:	ldr	r3, [r4, #0]
    e0bc:	lsls	r1, r3, #21
    e0be:	bmi.n	e0dc <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    e0c0:	ldr	r3, [r4, #0]
    e0c2:	lsls	r2, r3, #20
    e0c4:	bmi.n	e0e6 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    e0c6:	ldr	r3, [r4, #0]
    e0c8:	lsls	r3, r3, #19
    e0ca:	bmi.n	e0f0 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    e0cc:	ldr	r3, [r4, #0]
    e0ce:	lsls	r0, r3, #13
    e0d0:	bpl.n	e0ba <fault_isr+0x6>
    e0d2:	bl	eb2c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    e0d6:	ldr	r3, [r4, #0]
    e0d8:	lsls	r1, r3, #21
    e0da:	bpl.n	e0c0 <fault_isr+0xc>
    e0dc:	bl	e0fc <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    e0e0:	ldr	r3, [r4, #0]
    e0e2:	lsls	r2, r3, #20
    e0e4:	bpl.n	e0c6 <fault_isr+0x12>
    e0e6:	bl	e0fc <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    e0ea:	ldr	r3, [r4, #0]
    e0ec:	lsls	r3, r3, #19
    e0ee:	bpl.n	e0cc <fault_isr+0x18>
    e0f0:	bl	e0fc <unused_isr>
    e0f4:	b.n	e0cc <fault_isr+0x18>
    e0f6:	nop
    e0f8:	.word	0x40048034

0000e0fc <unused_isr>:
	}
}

void unused_isr(void)
{
    e0fc:	push	{r3, lr}
	fault_isr();
    e0fe:	bl	e0b4 <fault_isr>
    e102:	nop

0000e104 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    e104:	ldr	r3, [pc, #4]	; (e10c <startup_early_hook+0x8>)
    e106:	movs	r2, #16
    e108:	strh	r2, [r3, #0]
    e10a:	bx	lr
    e10c:	.word	0x40052000

0000e110 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    e110:	bx	lr
    e112:	nop

0000e114 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    e114:	ldr	r1, [pc, #36]	; (e13c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    e116:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    e118:	ldr	r3, [r1, #0]
	if (incr != 0) {
    e11a:	cbz	r0, e12a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    e11c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    e11e:	add	r0, r3
    e120:	sub.w	r2, r2, #8192	; 0x2000
    e124:	cmp	r0, r2
    e126:	bcs.n	e12e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    e128:	str	r0, [r1, #0]
	}
	return prev;
    e12a:	mov	r0, r3
}
    e12c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    e12e:	bl	105fc <__errno>
    e132:	movs	r3, #12
    e134:	str	r3, [r0, #0]
			return (void *)-1;
    e136:	mov.w	r0, #4294967295
    e13a:	pop	{r3, pc}
    e13c:	.word	0x1fff0b60

0000e140 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    e140:	b.n	e140 <__cxa_pure_virtual>
    e142:	nop

0000e144 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    e144:	ldr	r2, [pc, #32]	; (e168 <kinetis_hsrun_disable+0x24>)
    e146:	ldrb	r3, [r2, #0]
    e148:	cmp	r3, #128	; 0x80
    e14a:	beq.n	e150 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    e14c:	movs	r0, #0
}
    e14e:	bx	lr
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 180000000 && F_BUS == 90000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 168000000 && F_BUS == 56000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 5); // ok
    e150:	ldr	r1, [pc, #24]	; (e16c <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    e152:	ldr	r3, [pc, #28]	; (e170 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 180000000 && F_BUS == 90000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 168000000 && F_BUS == 56000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 5); // ok
    e154:	ldr	r0, [pc, #28]	; (e174 <kinetis_hsrun_disable+0x30>)
    e156:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    e158:	movs	r1, #0
    e15a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    e15c:	ldrb	r3, [r2, #0]
    e15e:	cmp	r3, #128	; 0x80
    e160:	beq.n	e15c <kinetis_hsrun_disable+0x18>
		return 1;
    e162:	movs	r0, #1
    e164:	bx	lr
    e166:	nop
    e168:	.word	0x4007e003
    e16c:	.word	0x40048044
    e170:	.word	0x4007e001
    e174:	.word	0x22250000

0000e178 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    e178:	ldr	r2, [pc, #36]	; (e1a0 <kinetis_hsrun_enable+0x28>)
    e17a:	ldrb	r3, [r2, #0]
    e17c:	cmp	r3, #1
    e17e:	beq.n	e184 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    e180:	movs	r0, #0
}
    e182:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    e184:	add.w	r3, r3, #1073741824	; 0x40000000
    e188:	add.w	r3, r3, #516096	; 0x7e000
    e18c:	movs	r1, #96	; 0x60
    e18e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    e190:	ldrb	r3, [r2, #0]
    e192:	cmp	r3, #128	; 0x80
    e194:	bne.n	e190 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 90000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 168000000 && F_BUS == 56000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 5);
    e196:	ldr	r3, [pc, #12]	; (e1a4 <kinetis_hsrun_enable+0x2c>)
    e198:	ldr	r2, [pc, #12]	; (e1a8 <kinetis_hsrun_enable+0x30>)
    e19a:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    e19c:	movs	r0, #1
    e19e:	bx	lr
    e1a0:	.word	0x4007e003
    e1a4:	.word	0x40048044
    e1a8:	.word	0x02050000

0000e1ac <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    e1ac:	push	{r4, lr}
    e1ae:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    e1b0:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    e1b2:	bl	e144 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    e1b6:	ldr	r2, [pc, #96]	; (e218 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e1b8:	ldr	r3, [pc, #96]	; (e21c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    e1ba:	ldr	r1, [pc, #100]	; (e220 <usb_init_serialnumber+0x74>)
    e1bc:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e1be:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    e1c0:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e1c2:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    e1c4:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    e1c6:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    e1c8:	ldrb	r3, [r2, #0]
    e1ca:	lsls	r3, r3, #24
    e1cc:	bpl.n	e1c8 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    e1ce:	ldr	r3, [pc, #84]	; (e224 <usb_init_serialnumber+0x78>)
    e1d0:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    e1d2:	bl	e178 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    e1d6:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e1d8:	ldr	r3, [pc, #76]	; (e228 <usb_init_serialnumber+0x7c>)
    e1da:	cmp	r4, r3
    e1dc:	itt	ls
    e1de:	addls.w	r4, r4, r4, lsl #2
    e1e2:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    e1e4:	mov	r0, r4
    e1e6:	ldr	r4, [pc, #68]	; (e22c <usb_init_serialnumber+0x80>)
    e1e8:	add	r1, sp, #4
    e1ea:	movs	r2, #10
    e1ec:	bl	e230 <ultoa>
    e1f0:	add	r1, sp, #4
    e1f2:	mov	r0, r4
	for (i=0; i<10; i++) {
    e1f4:	movs	r3, #0
		char c = buf[i];
    e1f6:	ldrb.w	r2, [r1], #1
    e1fa:	adds	r3, #1
		if (!c) break;
    e1fc:	cbz	r2, e20e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    e1fe:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    e200:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    e204:	bne.n	e1f6 <usb_init_serialnumber+0x4a>
    e206:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e208:	strb	r3, [r4, #0]
}
    e20a:	add	sp, #16
    e20c:	pop	{r4, pc}
    e20e:	lsls	r3, r3, #1
    e210:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e212:	strb	r3, [r4, #0]
}
    e214:	add	sp, #16
    e216:	pop	{r4, pc}
    e218:	.word	0x40020004
    e21c:	.word	0x40020000
    e220:	.word	0x41070000
    e224:	.word	0x4002000c
    e228:	.word	0x0098967f
    e22c:	.word	0x1fff0c38

0000e230 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    e230:	push	{r4, r5, r6, r7}
    e232:	subs	r5, r1, #1
    e234:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    e236:	movs	r4, #0
    e238:	b.n	e23c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    e23a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    e23c:	udiv	r3, r0, r2
    e240:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e244:	cmp	r0, #9
    e246:	add.w	r7, r0, #48	; 0x30
    e24a:	itet	hi
    e24c:	addhi	r0, #55	; 0x37
    e24e:	uxtbls	r0, r7
    e250:	uxtbhi	r0, r0
    e252:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    e256:	mov	r0, r3
    e258:	cmp	r3, #0
    e25a:	bne.n	e23a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    e25c:	adds	r2, r1, r4
    e25e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    e260:	cbz	r4, e276 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    e262:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    e264:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    e268:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e26a:	adds	r3, #1
    e26c:	subs	r0, r4, r3
    e26e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    e270:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e274:	blt.n	e262 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    e276:	mov	r0, r1
    e278:	pop	{r4, r5, r6, r7}
    e27a:	bx	lr

0000e27c <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e280:	vpush	{d8}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e284:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    e288:	eor.w	r3, r0, r0, asr #31
	if (isnanf(val)) {
    e28c:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e290:	sub	sp, #16
    e292:	vmov.f32	s16, s0
    e296:	mov	r5, r0
    e298:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    e29a:	sub.w	r3, r3, r0, asr #31
	if (isnanf(val)) {
    e29e:	bvs.w	e4fc <dtostrf+0x280>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    e2a2:	vldr	s15, [pc, #800]	; e5c4 <dtostrf+0x348>
    e2a6:	vabs.f32	s14, s0
    e2aa:	vcmp.f32	s14, s15
    e2ae:	vmrs	APSR_nzcv, fpscr
    e2b2:	ble.n	e33a <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
    e2b4:	vcmpe.f32	s0, #0.0
    e2b8:	vmrs	APSR_nzcv, fpscr
    e2bc:	ite	mi
    e2be:	movmi	r0, #4
    e2c0:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e2c2:	cmp	r0, r3
    e2c4:	blt.n	e30a <dtostrf+0x8e>
		if (width<0) {
    e2c6:	cmp	r5, #0
    e2c8:	blt.w	e5b2 <dtostrf+0x336>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e2cc:	movs	r0, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e2ce:	vcmpe.f32	s16, #0.0
    e2d2:	vmrs	APSR_nzcv, fpscr
    e2d6:	it	mi
    e2d8:	movmi	r3, r4
    e2da:	bmi.n	e332 <dtostrf+0xb6>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e2dc:	movs	r1, #73	; 0x49
    e2de:	movs	r2, #78	; 0x4e
    e2e0:	movs	r3, #70	; 0x46
    e2e2:	strb	r1, [r4, #0]
    e2e4:	strb	r2, [r4, #1]
    e2e6:	strb	r3, [r4, #2]
    e2e8:	adds	r4, #3
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e2ea:	cmp	r0, #0
    e2ec:	beq.w	e5ba <dtostrf+0x33e>
    e2f0:	add	r0, r4
			*buf++ = ' ';
    e2f2:	movs	r3, #32
    e2f4:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e2f8:	cmp	r0, r4
    e2fa:	bne.n	e2f4 <dtostrf+0x78>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    e2fc:	movs	r3, #0
    e2fe:	strb	r3, [r0, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e300:	add	sp, #16
    e302:	vpop	{d8}
    e306:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e30a:	cmp	r5, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e30c:	sub.w	r0, r3, r0
		if (width<0) {
    e310:	bge.n	e2ce <dtostrf+0x52>
			while (awidth) {
    e312:	cmp	r0, #0
    e314:	beq.w	e5b2 <dtostrf+0x336>
    e318:	adds	r3, r2, r0
				*buf++ = ' ';
    e31a:	movs	r2, #32
    e31c:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    e320:	cmp	r4, r3
    e322:	bne.n	e31c <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e324:	vcmpe.f32	s16, #0.0
    e328:	vmrs	APSR_nzcv, fpscr
    e32c:	bpl.w	e568 <dtostrf+0x2ec>
    e330:	movs	r0, #0
    e332:	movs	r2, #45	; 0x2d
    e334:	strb	r2, [r3, #0]
    e336:	adds	r4, r3, #1
    e338:	b.n	e2dc <dtostrf+0x60>
    e33a:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    e33c:	add	r2, sp, #8
    e33e:	add	r1, sp, #4
    e340:	mov	r0, r7
    e342:	bl	105d8 <fcvtf>
    e346:	mov	sl, r7
    e348:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    e34a:	ldr.w	r9, [sp, #4]
    e34e:	cmp	r7, #0
    e350:	beq.n	e406 <dtostrf+0x18a>
    e352:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    e356:	cmp	r3, r7
    e358:	bgt.w	e488 <dtostrf+0x20c>
    e35c:	mov	r0, r8
    e35e:	bl	11440 <strlen>
    e362:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    e364:	cmp	r9, r6
    e366:	it	lt
    e368:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    e36a:	cmp.w	r9, #0
    e36e:	bne.w	e4a6 <dtostrf+0x22a>
    e372:	adds	r6, #1
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    e374:	ldr.w	lr, [sp, #8]
    e378:	cmp.w	lr, #0
    e37c:	beq.n	e42a <dtostrf+0x1ae>
    e37e:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    e380:	subs	r0, r5, r6
	if (pad > 0) {
    e382:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    e384:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    e388:	bgt.n	e436 <dtostrf+0x1ba>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    e38a:	mov	r3, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    e38c:	movs	r2, #45	; 0x2d
    e38e:	strb	r2, [r3, #0]
    e390:	adds	r3, #1
	if (decpt == 0 && precision > 0) {
    e392:	cmp.w	r9, #0
    e396:	bne.n	e464 <dtostrf+0x1e8>
    e398:	cbz	r7, e3a8 <dtostrf+0x12c>
		*p++ = '0';
    e39a:	mov	r2, r3
    e39c:	movs	r0, #48	; 0x30
    e39e:	strb.w	r0, [r2], #2
		*p++ = '.';
    e3a2:	movs	r0, #46	; 0x2e
    e3a4:	strb	r0, [r3, #1]
    e3a6:	mov	r3, r2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e3a8:	cmp	r3, r1
    e3aa:	bcs.n	e3ee <dtostrf+0x172>
		*p++ = *s++;
    e3ac:	adds	r7, r3, #1
    e3ae:	ldrb.w	r2, [r8]
    e3b2:	strb	r2, [r3, #0]
		if (p == e) break;
    e3b4:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    e3b6:	add.w	r8, r8, #1
		if (p == e) break;
    e3ba:	beq.n	e3f0 <dtostrf+0x174>
    e3bc:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    e3be:	mov.w	lr, #46	; 0x2e
    e3c2:	b.n	e3dc <dtostrf+0x160>
    e3c4:	strb.w	lr, [r3, #1]
    e3c8:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e3ca:	cmp	r3, r1
		*p++ = *s++;
    e3cc:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e3d0:	bcs.n	e3ee <dtostrf+0x172>
		*p++ = *s++;
    e3d2:	ldrb.w	r0, [r8], #1
    e3d6:	strb	r0, [r3, #0]
		if (p == e) break;
    e3d8:	cmp	r7, r1
    e3da:	beq.n	e3f0 <dtostrf+0x174>
		if (--decpt == 0) *p++ = '.';
    e3dc:	subs	r2, #1
    e3de:	str	r2, [sp, #4]
    e3e0:	cmp	r2, #0
    e3e2:	beq.n	e3c4 <dtostrf+0x148>
    e3e4:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e3e6:	cmp	r3, r1
		*p++ = *s++;
    e3e8:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e3ec:	bcc.n	e3d2 <dtostrf+0x156>
    e3ee:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    e3f0:	cmp	r5, #0
    e3f2:	blt.w	e53c <dtostrf+0x2c0>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    e3f6:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    e3f8:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    e3fa:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e3fc:	add	sp, #16
    e3fe:	vpop	{d8}
    e402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    e406:	cmp.w	r9, #0
    e40a:	bne.n	e352 <dtostrf+0xd6>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    e40c:	ldrb.w	r8, [r0]
    e410:	ldr	r1, [pc, #436]	; (e5c8 <dtostrf+0x34c>)
    e412:	ldr	r2, [pc, #440]	; (e5cc <dtostrf+0x350>)
		decpt++;
    e414:	movs	r3, #1
    e416:	str	r3, [sp, #4]
    e418:	mov	r9, r3
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    e41a:	cmp.w	r8, #52	; 0x34
    e41e:	ite	hi
    e420:	movhi	r8, r1
    e422:	movls	r8, r2
		decpt++;
    e424:	mov.w	r3, #4294967295
    e428:	b.n	e356 <dtostrf+0xda>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    e42a:	subs	r0, r5, r6
	if (pad > 0) {
    e42c:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    e42e:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    e432:	ble.w	e5be <dtostrf+0x342>
		e += pad;
    e436:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    e438:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    e43a:	subs	r0, #1
    e43c:	mov.w	ip, #32
    e440:	strb.w	ip, [r2], #1
    e444:	rsb	r3, r2, #1
    e448:	add	r3, r0
    e44a:	add	r3, r4
    e44c:	cmp	r3, #0
    e44e:	bgt.n	e440 <dtostrf+0x1c4>
    e450:	bic.w	r3, r0, r0, asr #31
    e454:	adds	r3, #1
    e456:	add	r3, r4
	}
	if (sign) *p++ = '-';
    e458:	cmp.w	lr, #0
    e45c:	bne.n	e38c <dtostrf+0x110>
	if (decpt == 0 && precision > 0) {
    e45e:	cmp.w	r9, #0
    e462:	beq.n	e398 <dtostrf+0x11c>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    e464:	bge.n	e3a8 <dtostrf+0x12c>
    e466:	cmp	r7, #0
    e468:	beq.n	e3a8 <dtostrf+0x12c>
		*p++ = '0';
    e46a:	mov	r2, r3
    e46c:	movs	r0, #48	; 0x30
    e46e:	strb.w	r0, [r2], #2
		*p++ = '.';
    e472:	movs	r7, #46	; 0x2e
    e474:	strb	r7, [r3, #1]
    e476:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    e47a:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    e47e:	cmp	r3, r2
    e480:	bne.n	e47a <dtostrf+0x1fe>
    e482:	movs	r2, #0
    e484:	str	r2, [sp, #4]
    e486:	b.n	e3a8 <dtostrf+0x12c>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    e488:	rsb	r9, r7, #0
    e48c:	movs	r6, #1
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    e48e:	cmp	r9, r6
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    e490:	mov	r0, r6
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    e492:	it	lt
    e494:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    e496:	cmp.w	r9, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    e49a:	ldr.w	r8, [pc, #304]	; e5cc <dtostrf+0x350>
		decpt = -precision;
    e49e:	str.w	r9, [sp, #4]

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    e4a2:	beq.w	e372 <dtostrf+0xf6>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    e4a6:	bge.w	e374 <dtostrf+0xf8>
    e4aa:	cmp	r7, #0
    e4ac:	beq.w	e374 <dtostrf+0xf8>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    e4b0:	add.w	r3, r9, r7
    e4b4:	cmp	r0, r3
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    e4b6:	add.w	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    e4ba:	bls.w	e374 <dtostrf+0xf8>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e4be:	cmp	r7, #0
    e4c0:	ble.n	e4d0 <dtostrf+0x254>
				val *= 10.0;
    e4c2:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e4c6:	subs.w	sl, sl, #1
				val *= 10.0;
    e4ca:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e4ce:	bne.n	e4c6 <dtostrf+0x24a>
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e4d0:	add	r2, sp, #8
    e4d2:	mov	r0, sl
    e4d4:	vmov.f32	s0, s16
    e4d8:	add	r1, sp, #12
    e4da:	bl	105d8 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e4de:	ldr.w	r9, [sp, #4]
    e4e2:	ldr	r2, [sp, #12]
    e4e4:	adds	r3, r7, #1
    e4e6:	rsb	r2, r9, r2
    e4ea:	cmp	r2, r3
    e4ec:	it	eq
    e4ee:	addeq.w	r9, r9, #1
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e4f2:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e4f4:	it	eq
    e4f6:	streq.w	r9, [sp, #4]
    e4fa:	b.n	e374 <dtostrf+0xf8>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    e4fc:	vcmpe.f32	s0, #0.0
    e500:	vmrs	APSR_nzcv, fpscr
    e504:	ite	mi
    e506:	movmi	r0, #4
    e508:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e50a:	cmp	r0, r3
    e50c:	bge.n	e578 <dtostrf+0x2fc>
		if (width<0) {
    e50e:	cmp	r5, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e510:	sub.w	r3, r3, r0
		if (width<0) {
    e514:	blt.n	e58a <dtostrf+0x30e>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e516:	vmov	r2, s16
    e51a:	cmp	r2, #0
    e51c:	blt.n	e580 <dtostrf+0x304>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e51e:	movs	r2, #78	; 0x4e
    e520:	movs	r1, #65	; 0x41
    e522:	strb	r2, [r4, #0]
    e524:	strb	r2, [r4, #2]
    e526:	strb	r1, [r4, #1]
    e528:	adds	r4, #3
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    e52a:	cmp	r3, #0
    e52c:	beq.n	e5ba <dtostrf+0x33e>
    e52e:	adds	r0, r4, r3
			*buf++ = ' ';
    e530:	movs	r3, #32
    e532:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    e536:	cmp	r4, r0
    e538:	bne.n	e532 <dtostrf+0x2b6>
    e53a:	b.n	e2fc <dtostrf+0x80>
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    e53c:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    e53e:	negs	r3, r0
    e540:	cmp	r3, #0
    e542:	mvn.w	r0, r0
    e546:	ble.w	e3f6 <dtostrf+0x17a>
    e54a:	mov	r2, r1
    e54c:	movs	r5, #32
    e54e:	strb.w	r5, [r2], #1
    e552:	rsb	r3, r2, #1
    e556:	add	r3, r0
    e558:	add	r3, r1
    e55a:	cmp	r3, #0
    e55c:	bgt.n	e54e <dtostrf+0x2d2>
    e55e:	bic.w	r3, r0, r0, asr #31
    e562:	adds	r3, #1
    e564:	add	r1, r3
    e566:	b.n	e3f6 <dtostrf+0x17a>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e568:	movs	r0, #73	; 0x49
    e56a:	movs	r1, #78	; 0x4e
    e56c:	movs	r2, #70	; 0x46
    e56e:	strb	r0, [r3, #0]
    e570:	strb	r1, [r3, #1]
    e572:	strb	r2, [r3, #2]
    e574:	adds	r0, r3, #3
    e576:	b.n	e2fc <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e578:	cmp	r5, #0
    e57a:	blt.n	e5ae <dtostrf+0x332>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e57c:	movs	r3, #0
    e57e:	b.n	e516 <dtostrf+0x29a>
    e580:	mov	r0, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e582:	movs	r2, #45	; 0x2d
    e584:	strb	r2, [r0, #0]
    e586:	adds	r4, r0, #1
    e588:	b.n	e51e <dtostrf+0x2a2>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    e58a:	cbz	r3, e5ae <dtostrf+0x332>
    e58c:	adds	r0, r2, r3
				*buf++ = ' ';
    e58e:	movs	r3, #32
    e590:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    e594:	cmp	r4, r0
    e596:	bne.n	e590 <dtostrf+0x314>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e598:	vmov	r3, s16
    e59c:	cmp	r3, #0
    e59e:	blt.n	e5b6 <dtostrf+0x33a>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e5a0:	movs	r3, #78	; 0x4e
    e5a2:	movs	r2, #65	; 0x41
    e5a4:	strb	r3, [r0, #0]
    e5a6:	strb	r3, [r0, #2]
    e5a8:	strb	r2, [r0, #1]
    e5aa:	adds	r0, #3
    e5ac:	b.n	e2fc <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e5ae:	mov	r0, r4
    e5b0:	b.n	e598 <dtostrf+0x31c>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e5b2:	mov	r3, r4
    e5b4:	b.n	e324 <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e5b6:	movs	r3, #0
    e5b8:	b.n	e582 <dtostrf+0x306>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e5ba:	mov	r0, r4
    e5bc:	b.n	e2fc <dtostrf+0x80>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    e5be:	mov	r3, r4
    e5c0:	b.n	e392 <dtostrf+0x116>
    e5c2:	nop
    e5c4:	.word	0x7f7fffff
    e5c8:	.word	0x00015044
    e5cc:	.word	0x00015040

0000e5d0 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    e5d0:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    e5d2:	ldr	r3, [pc, #68]	; (e618 <digitalWrite.part.1+0x48>)
    e5d4:	ldr.w	r2, [r3, r0, lsl #3]
    e5d8:	ldrb.w	r4, [r2, #640]	; 0x280
    e5dc:	cbz	r4, e5ec <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    e5de:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    e5e0:	cbz	r1, e602 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    e5e2:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e5e6:	ldr.w	r4, [sp], #4
    e5ea:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    e5ec:	add.w	r3, r3, r0, lsl #3
    e5f0:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    e5f2:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    e5f4:	cbnz	r1, e60c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    e5f6:	bic.w	r2, r2, #2
    e5fa:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e5fc:	ldr.w	r4, [sp], #4
    e600:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    e602:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e606:	ldr.w	r4, [sp], #4
    e60a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    e60c:	orr.w	r2, r2, #3
    e610:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e612:	ldr.w	r4, [sp], #4
    e616:	bx	lr
    e618:	.word	0x00015048

0000e61c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    e61c:	ldr	r2, [pc, #112]	; (e690 <pinMode.part.2+0x74>)
    e61e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e622:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    e624:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e626:	beq.n	e64c <pinMode.part.2+0x30>
    e628:	cmp	r1, #4
    e62a:	beq.n	e664 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    e62c:	ldr.w	r0, [r2, r0, lsl #3]
    e630:	movs	r2, #0
    e632:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    e636:	cbz	r1, e644 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    e638:	cmp	r1, #2
    e63a:	beq.n	e67e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    e63c:	cmp	r1, #3
    e63e:	beq.n	e686 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    e640:	str	r2, [r3, #0]
    e642:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    e644:	mov.w	r2, #256	; 0x100
    e648:	str	r2, [r3, #0]
    e64a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    e64c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    e650:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    e654:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    e658:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    e65a:	ldr	r2, [r3, #0]
    e65c:	bic.w	r2, r2, #32
    e660:	str	r2, [r3, #0]
    e662:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    e664:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    e668:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    e66c:	movs	r0, #1
    e66e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    e672:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    e674:	ldr	r2, [r3, #0]
    e676:	orr.w	r2, r2, #32
    e67a:	str	r2, [r3, #0]
    e67c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    e67e:	movw	r2, #259	; 0x103
    e682:	str	r2, [r3, #0]
    e684:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    e686:	mov.w	r2, #258	; 0x102
    e68a:	str	r2, [r3, #0]
    e68c:	bx	lr
    e68e:	nop
    e690:	.word	0x00015048

0000e694 <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    e694:	ldr	r3, [pc, #4]	; (e69c <rtc_get+0x8>)
    e696:	ldr	r0, [r3, #0]
}
    e698:	bx	lr
    e69a:	nop
    e69c:	.word	0x4003d000

0000e6a0 <rtc_set>:

void rtc_set(unsigned long t)
{
    e6a0:	push	{r4, r5}
	RTC_SR = 0;
    e6a2:	ldr	r3, [pc, #20]	; (e6b8 <rtc_set+0x18>)
	RTC_TPR = 0;
    e6a4:	ldr	r5, [pc, #20]	; (e6bc <rtc_set+0x1c>)
	RTC_TSR = t;
    e6a6:	ldr	r4, [pc, #24]	; (e6c0 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    e6a8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    e6aa:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    e6ac:	str	r2, [r3, #0]
	RTC_TPR = 0;
    e6ae:	str	r2, [r5, #0]
	RTC_TSR = t;
    e6b0:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    e6b2:	str	r1, [r3, #0]
}
    e6b4:	pop	{r4, r5}
    e6b6:	bx	lr
    e6b8:	.word	0x4003d014
    e6bc:	.word	0x4003d004
    e6c0:	.word	0x4003d000

0000e6c4 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    e6c4:	cmp	r0, #63	; 0x3f
    e6c6:	bhi.n	e6cc <digitalWrite+0x8>
    e6c8:	b.w	e5d0 <digitalWrite.part.1>
    e6cc:	bx	lr
    e6ce:	nop

0000e6d0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    e6d0:	cmp	r0, #63	; 0x3f
    e6d2:	bhi.n	e6d8 <pinMode+0x8>
    e6d4:	b.w	e61c <pinMode.part.2>
    e6d8:	bx	lr
    e6da:	nop

0000e6dc <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    e6dc:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    e6de:	ldr	r1, [pc, #52]	; (e714 <micros+0x38>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e6e0:	ldr	r3, [pc, #52]	; (e718 <micros+0x3c>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e6e2:	ldr	r2, [pc, #56]	; (e71c <micros+0x40>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e6e4:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    e6e6:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e6e8:	ldr	r2, [r2, #0]
	__enable_irq();
    e6ea:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    e6ec:	lsls	r2, r2, #5
    e6ee:	bpl.n	e6f6 <micros+0x1a>
    e6f0:	cmp	r3, #50	; 0x32
    e6f2:	it	hi
    e6f4:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    e6f6:	rsb	r3, r3, #167936	; 0x29000
    e6fa:	ldr	r1, [pc, #36]	; (e720 <micros+0x44>)
    e6fc:	adds	r3, #63	; 0x3f
    e6fe:	mov.w	r2, #1000	; 0x3e8
    e702:	lsrs	r3, r3, #3
    e704:	umull	r1, r3, r1, r3
    e708:	mul.w	r0, r2, r0
}
    e70c:	add.w	r0, r0, r3, lsr #1
    e710:	bx	lr
    e712:	nop
    e714:	.word	0x2000701c
    e718:	.word	0xe000e018
    e71c:	.word	0xe000ed04
    e720:	.word	0x18618619

0000e724 <delay>:

void delay(uint32_t ms)
{
    e724:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e728:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    e72a:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    e72c:	ldr	r7, [pc, #132]	; (e7b4 <delay+0x90>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e72e:	ldr	r3, [pc, #136]	; (e7b8 <delay+0x94>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e730:	ldr	r2, [pc, #136]	; (e7bc <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e732:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    e734:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e736:	ldr	r2, [r2, #0]
	__enable_irq();
    e738:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    e73a:	lsls	r2, r2, #5
    e73c:	bpl.n	e744 <delay+0x20>
    e73e:	cmp	r3, #50	; 0x32
    e740:	it	hi
    e742:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    e744:	cbz	r5, e7b0 <delay+0x8c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    e746:	rsb	r3, r3, #167936	; 0x29000
    e74a:	adds	r3, #63	; 0x3f
    e74c:	ldr	r6, [pc, #112]	; (e7c0 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e74e:	ldr.w	r9, [pc, #104]	; e7b8 <delay+0x94>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e752:	ldr.w	r8, [pc, #104]	; e7bc <delay+0x98>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    e756:	lsrs	r3, r3, #3
    e758:	mov.w	r2, #1000	; 0x3e8
    e75c:	umull	r1, r3, r6, r3
    e760:	mul.w	r4, r2, r4
    e764:	add.w	r4, r4, r3, lsr #1

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    e768:	cpsid	i
	current = SYST_CVR;
    e76a:	ldr.w	r1, [r9]
	count = systick_millis_count;
    e76e:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e770:	ldr.w	lr, [r8]
	__enable_irq();
    e774:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    e776:	rsb	r3, r1, #167936	; 0x29000
    e77a:	adds	r3, #63	; 0x3f
    e77c:	lsrs	r3, r3, #3
    e77e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    e782:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    e786:	rsb	r3, r4, r3, lsr #1
    e78a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    e78e:	beq.n	e796 <delay+0x72>
    e790:	cmp	r1, #50	; 0x32
    e792:	it	hi
    e794:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    e796:	mla	r3, r0, r2, r3
    e79a:	cmp.w	r3, #1000	; 0x3e8
    e79e:	bcc.n	e7aa <delay+0x86>
				ms--;
				if (ms == 0) return;
    e7a0:	subs	r5, #1
    e7a2:	beq.n	e7b0 <delay+0x8c>
				start += 1000;
    e7a4:	add.w	r4, r4, #1000	; 0x3e8
    e7a8:	b.n	e768 <delay+0x44>
			}
			yield();
    e7aa:	bl	f464 <yield>
		}
    e7ae:	b.n	e768 <delay+0x44>
    e7b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e7b4:	.word	0x2000701c
    e7b8:	.word	0xe000e018
    e7bc:	.word	0xe000ed04
    e7c0:	.word	0x18618619

0000e7c4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    e7c4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    e7c6:	ldr	r3, [pc, #312]	; (e900 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    e7c8:	ldr	r0, [pc, #312]	; (e904 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    e7ca:	ldr.w	ip, [pc, #348]	; e928 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    e7ce:	ldr	r4, [pc, #312]	; (e908 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    e7d0:	ldr	r1, [pc, #312]	; (e90c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    e7d2:	ldr.w	lr, [pc, #344]	; e92c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    e7d6:	ldr	r6, [pc, #312]	; (e910 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    e7d8:	ldr	r5, [pc, #312]	; (e914 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    e7da:	ldr	r7, [pc, #316]	; (e918 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    e7dc:	mov.w	r2, #134217728	; 0x8000000
    e7e0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    e7e2:	mov.w	r2, #268435456	; 0x10000000
    e7e6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    e7e8:	mov.w	r2, #536870912	; 0x20000000
    e7ec:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    e7ee:	mov.w	r2, #1073741824	; 0x40000000
    e7f2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    e7f4:	mov.w	r2, #2147483648	; 0x80000000
    e7f8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    e7fa:	movs	r2, #0
    e7fc:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    e7fe:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    e800:	movw	r0, #57343	; 0xdfff
    e804:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    e808:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    e80c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    e80e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    e812:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    e814:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    e816:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    e818:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    e81c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    e81e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    e822:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    e824:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    e828:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    e82a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    e82e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    e832:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    e836:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    e83a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    e83e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    e840:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    e844:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    e846:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    e848:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    e84a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    e84e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    e850:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    e852:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e854:	ldr	r4, [pc, #196]	; (e91c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    e856:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    e858:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e85a:	movs	r1, #9
    e85c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    e85e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    e862:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    e866:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    e868:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    e86a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    e86c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    e86e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    e870:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e872:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    e876:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    e87a:	add.w	r7, r7, #520192	; 0x7f000
    e87e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    e880:	addw	r4, r4, #2044	; 0x7fc
    e884:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    e886:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    e888:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    e88a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e88c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    e890:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    e892:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    e896:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    e89a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    e89c:	sub.w	r4, r4, #460800	; 0x70800
    e8a0:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    e8a4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    e8a6:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e8a8:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    e8ac:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    e8ae:	ldr	r0, [pc, #112]	; (e920 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    e8b0:	orr.w	r1, r1, #512	; 0x200
    e8b4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    e8b6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    e8b8:	ldr	r4, [pc, #104]	; (e924 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    e8ba:	add.w	lr, lr, #65280	; 0xff00
    e8be:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    e8c2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    e8c6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    e8ca:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    e8ce:	orr.w	r1, r1, #33554432	; 0x2000000
    e8d2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    e8d4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    e8d8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    e8dc:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    e8de:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    e8e0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    e8e2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    e8e4:	str	r2, [r4, #0]
#endif
	analog_init();
    e8e6:	bl	dfd4 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    e8ea:	movs	r0, #25
    e8ec:	bl	e724 <delay>
	usb_init();
    e8f0:	bl	f3a0 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    e8f4:	movw	r0, #275	; 0x113
}
    e8f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    e8fc:	b.w	e724 <delay>
    e900:	.word	0xe000e104
    e904:	.word	0x40038004
    e908:	.word	0x40038014
    e90c:	.word	0x4003801c
    e910:	.word	0x40038024
    e914:	.word	0x4003802c
    e918:	.word	0x40038034
    e91c:	.word	0x40038000
    e920:	.word	0x40048004
    e924:	.word	0x400c9000
    e928:	.word	0x40038008
    e92c:	.word	0x4003800c

0000e930 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    e930:	cpsid	i
	avail = usb_buffer_available;
    e932:	ldr	r0, [pc, #52]	; (e968 <usb_malloc+0x38>)
    e934:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    e936:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    e93a:	cmp	r3, #19
    e93c:	bgt.n	e960 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    e93e:	mov.w	r1, #2147483648	; 0x80000000
    e942:	lsrs	r1, r3
    e944:	bic.w	r2, r2, r1
    e948:	str	r2, [r0, #0]
	__enable_irq();
    e94a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    e94c:	ldr	r0, [pc, #28]	; (e96c <usb_malloc+0x3c>)
    e94e:	add.w	r3, r3, r3, lsl #3
    e952:	lsls	r3, r3, #3
    e954:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    e956:	movs	r1, #0
    e958:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    e95a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    e95c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    e95e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    e960:	cpsie	i
		return NULL;
    e962:	movs	r0, #0
    e964:	bx	lr
    e966:	nop
    e968:	.word	0x1fff0c50
    e96c:	.word	0x1fff03d0

0000e970 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    e970:	ldr	r3, [pc, #52]	; (e9a8 <usb_free+0x38>)
    e972:	ldr	r2, [pc, #56]	; (e9ac <usb_free+0x3c>)
    e974:	subs	r3, r0, r3
    e976:	umull	r2, r3, r2, r3
    e97a:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    e97c:	cmp	r3, #19
    e97e:	bhi.n	e99a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    e980:	ldr	r2, [pc, #44]	; (e9b0 <usb_free+0x40>)
    e982:	ldrb	r2, [r2, #0]
    e984:	cbnz	r2, e99c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    e986:	cpsid	i
	usb_buffer_available |= mask;
    e988:	ldr	r0, [pc, #40]	; (e9b4 <usb_free+0x44>)
    e98a:	mov.w	r1, #2147483648	; 0x80000000
    e98e:	ldr	r2, [r0, #0]
    e990:	lsr.w	r3, r1, r3
    e994:	orrs	r2, r3
    e996:	str	r2, [r0, #0]
	__enable_irq();
    e998:	cpsie	i
    e99a:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    e99c:	ldr	r2, [pc, #24]	; (e9b8 <usb_free+0x48>)
    e99e:	ldrb	r2, [r2, #0]
    e9a0:	cmp	r2, #0
    e9a2:	beq.n	e986 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    e9a4:	b.w	ea24 <usb_rx_memory>
    e9a8:	.word	0x1fff03d0
    e9ac:	.word	0x38e38e39
    e9b0:	.word	0x20007115
    e9b4:	.word	0x1fff0c50
    e9b8:	.word	0x20007120

0000e9bc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    e9bc:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    e9be:	cmp	r3, #5
    e9c0:	bhi.n	e9ec <usb_rx+0x30>
	__disable_irq();
    e9c2:	cpsid	i
	ret = rx_first[endpoint];
    e9c4:	ldr	r1, [pc, #40]	; (e9f0 <usb_rx+0x34>)
    e9c6:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    e9ca:	cbz	r0, e9e8 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    e9cc:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    e9ce:	ldr	r4, [pc, #36]	; (e9f4 <usb_rx+0x38>)
    e9d0:	ldrh	r5, [r0, #0]
    e9d2:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    e9d6:	ldr	r6, [r0, #4]
    e9d8:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    e9dc:	subs	r2, r2, r5
    e9de:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    e9e2:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    e9e4:	pop	{r4, r5, r6}
    e9e6:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    e9e8:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    e9ea:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    e9ec:	movs	r0, #0
    e9ee:	bx	lr
    e9f0:	.word	0x20007080
    e9f4:	.word	0x200071a8

0000e9f8 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    e9f8:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    e9fa:	cmp	r0, #5
    e9fc:	bhi.n	ea16 <usb_tx_packet_count+0x1e>
	__disable_irq();
    e9fe:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    ea00:	ldr	r3, [pc, #28]	; (ea20 <usb_tx_packet_count+0x28>)
    ea02:	ldr.w	r3, [r3, r0, lsl #2]
    ea06:	cbz	r3, ea1a <usb_tx_packet_count+0x22>
    ea08:	movs	r0, #0
    ea0a:	ldr	r3, [r3, #4]
    ea0c:	adds	r0, #1
    ea0e:	cmp	r3, #0
    ea10:	bne.n	ea0a <usb_tx_packet_count+0x12>
	__enable_irq();
    ea12:	cpsie	i
	return count;
    ea14:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    ea16:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    ea18:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    ea1a:	mov	r0, r3
    ea1c:	b.n	ea12 <usb_tx_packet_count+0x1a>
    ea1e:	nop
    ea20:	.word	0x200070dc

0000ea24 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    ea24:	push	{r4, r5, r6, r7}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    ea26:	cpsid	i
void usb_rx_memory(usb_packet_t *packet)
{
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
    ea28:	ldr	r1, [pc, #104]	; (ea94 <usb_rx_memory+0x70>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    ea2a:	ldr	r6, [pc, #108]	; (ea98 <usb_rx_memory+0x74>)
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    ea2c:	movs	r3, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ea2e:	ldrb.w	r4, [r1], #1
			if (table[index(i, RX, EVEN)].desc == 0) {
    ea32:	ldr	r7, [pc, #100]	; (ea98 <usb_rx_memory+0x74>)
    ea34:	lsls	r2, r3, #2
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ea36:	lsls	r4, r4, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ea38:	orr.w	r5, r2, #1
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ea3c:	bpl.n	ea4a <usb_rx_memory+0x26>
			if (table[index(i, RX, EVEN)].desc == 0) {
    ea3e:	ldr.w	r4, [r6, r2, lsl #3]
    ea42:	cbz	r4, ea5e <usb_rx_memory+0x3a>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ea44:	ldr.w	r2, [r6, r5, lsl #3]
    ea48:	cbz	r2, ea7a <usb_rx_memory+0x56>
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    ea4a:	adds	r3, #1
    ea4c:	cmp	r3, #7
    ea4e:	bne.n	ea2e <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    ea50:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    ea52:	ldr	r3, [pc, #72]	; (ea9c <usb_rx_memory+0x78>)
    ea54:	movs	r2, #0
    ea56:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    ea58:	pop	{r4, r5, r6, r7}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    ea5a:	b.w	e970 <usb_free>
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    ea5e:	ldr	r4, [pc, #60]	; (ea9c <usb_rx_memory+0x78>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ea60:	ldr	r5, [pc, #60]	; (eaa0 <usb_rx_memory+0x7c>)
				usb_rx_memory_needed--;
    ea62:	ldrb	r1, [r4, #0]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    ea64:	add.w	r3, r7, r3, lsl #5
    ea68:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    ea6a:	subs	r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    ea6c:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    ea6e:	strb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ea70:	str.w	r5, [r7, r2, lsl #3]
				usb_rx_memory_needed--;
				__enable_irq();
    ea74:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    ea76:	pop	{r4, r5, r6, r7}
    ea78:	bx	lr
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    ea7a:	ldr	r2, [pc, #32]	; (ea9c <usb_rx_memory+0x78>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ea7c:	ldr	r1, [pc, #36]	; (eaa4 <usb_rx_memory+0x80>)
				usb_rx_memory_needed--;
    ea7e:	ldrb	r3, [r2, #0]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    ea80:	add.w	r4, r7, r5, lsl #3
    ea84:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    ea86:	subs	r3, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    ea88:	str	r0, [r4, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    ea8a:	strb	r3, [r2, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ea8c:	str.w	r1, [r7, r5, lsl #3]
				usb_rx_memory_needed--;
				__enable_irq();
    ea90:	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    ea92:	b.n	ea76 <usb_rx_memory+0x52>
    ea94:	.word	0x00014fd8
    ea98:	.word	0x1fff0000
    ea9c:	.word	0x20007115
    eaa0:	.word	0x00400088
    eaa4:	.word	0x004000c8

0000eaa8 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    eaa8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    eaaa:	cmp	r3, #5
    eaac:	bhi.n	eaea <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    eaae:	ldr	r2, [pc, #108]	; (eb1c <usb_tx+0x74>)
    eab0:	lsls	r0, r0, #5
    eab2:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    eab6:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    eab8:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    eaba:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    eabc:	ldr	r4, [pc, #96]	; (eb20 <usb_tx+0x78>)
    eabe:	ldrb	r2, [r4, r3]
    eac0:	cmp	r2, #3
    eac2:	bhi.n	eafc <usb_tx+0x54>
    eac4:	tbb	[pc, r2]
    eac8:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    eacc:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    eace:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    ead0:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    ead2:	tst.w	r0, #8
    ead6:	ite	ne
    ead8:	movne	r3, #200	; 0xc8
    eada:	moveq	r3, #136	; 0x88
    eadc:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    eae0:	adds	r1, #8
    eae2:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    eae4:	str	r3, [r0, #0]
	__enable_irq();
    eae6:	cpsie	i
}
    eae8:	pop	{r4, r5}
    eaea:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    eaec:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    eaee:	movs	r2, #2
		break;
    eaf0:	b.n	eace <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    eaf2:	movs	r2, #5
    eaf4:	b.n	eace <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    eaf6:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    eaf8:	movs	r2, #4
		break;
    eafa:	b.n	eace <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    eafc:	ldr	r2, [pc, #36]	; (eb24 <usb_tx+0x7c>)
    eafe:	ldr.w	r0, [r2, r3, lsl #2]
    eb02:	cbz	r0, eb14 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    eb04:	ldr	r2, [pc, #32]	; (eb28 <usb_tx+0x80>)
    eb06:	ldr.w	r0, [r2, r3, lsl #2]
    eb0a:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    eb0c:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    eb10:	cpsie	i
		return;
    eb12:	b.n	eae8 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    eb14:	str.w	r1, [r2, r3, lsl #2]
    eb18:	ldr	r2, [pc, #12]	; (eb28 <usb_tx+0x80>)
    eb1a:	b.n	eb0c <usb_tx+0x64>
    eb1c:	.word	0x1fff0000
    eb20:	.word	0x20007124
    eb24:	.word	0x200070dc
    eb28:	.word	0x200070f4

0000eb2c <usb_isr>:
}



void usb_isr(void)
{
    eb2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    eb30:	ldr.w	fp, [pc, #788]	; ee48 <usb_isr+0x31c>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    eb34:	ldr.w	sl, [pc, #788]	; ee4c <usb_isr+0x320>
}



void usb_isr(void)
{
    eb38:	sub	sp, #28
    eb3a:	b.n	ebc6 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    eb3c:	ldr	r7, [pc, #700]	; (edfc <usb_isr+0x2d0>)
    eb3e:	mov.w	r8, r3, lsr #2
    eb42:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    eb46:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    eb48:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    eb4c:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    eb50:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    eb52:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    eb56:	and.w	r4, r3, #255	; 0xff
    eb5a:	cmp	r3, #0
    eb5c:	bne.w	ee50 <usb_isr+0x324>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    eb60:	ldr.w	r3, [r7, r8, lsl #3]
    eb64:	lsrs	r3, r3, #16
    eb66:	uxth	r1, r3
    eb68:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    eb6c:	cmp	r3, #0
    eb6e:	beq.w	ede8 <usb_isr+0x2bc>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    eb72:	ldr	r3, [pc, #652]	; (ee00 <usb_isr+0x2d4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    eb74:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    eb78:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    eb7c:	ldr.w	r2, [r3, r6, lsl #2]
    eb80:	cmp	r2, #0
    eb82:	beq.w	eeec <usb_isr+0x3c0>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    eb86:	ldr	r5, [pc, #636]	; (ee04 <usb_isr+0x2d8>)
    eb88:	ldr.w	r3, [r5, r6, lsl #2]
    eb8c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    eb8e:	ldr	r4, [pc, #632]	; (ee08 <usb_isr+0x2dc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    eb90:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    eb94:	ldrh.w	r3, [r4, r6, lsl #1]
    eb98:	add	r1, r3
    eb9a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    eb9e:	bl	e930 <usb_malloc>
					if (packet) {
    eba2:	cmp	r0, #0
    eba4:	beq.w	eede <usb_isr+0x3b2>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    eba8:	ldr	r2, [pc, #608]	; (ee0c <usb_isr+0x2e0>)
    ebaa:	ldr	r3, [pc, #612]	; (ee10 <usb_isr+0x2e4>)
    ebac:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    ebb0:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    ebb4:	it	ne
    ebb6:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    ebb8:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    ebbc:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    ebc0:	movs	r3, #8
    ebc2:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    ebc6:	ldrb.w	r4, [fp]
    ebca:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    ebcc:	lsls	r0, r4, #29
    ebce:	bpl.n	ec08 <usb_isr+0xdc>
		if (usb_configuration) {
    ebd0:	ldr	r3, [pc, #576]	; (ee14 <usb_isr+0x2e8>)
    ebd2:	ldrb	r3, [r3, #0]
    ebd4:	cbz	r3, ec02 <usb_isr+0xd6>
			t = usb_reboot_timer;
    ebd6:	ldr	r1, [pc, #576]	; (ee18 <usb_isr+0x2ec>)
    ebd8:	ldrb	r2, [r1, #0]
			if (t) {
    ebda:	and.w	r3, r2, #255	; 0xff
    ebde:	cbz	r2, ebec <usb_isr+0xc0>
				usb_reboot_timer = --t;
    ebe0:	subs	r3, #1
    ebe2:	uxtb	r3, r3
    ebe4:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    ebe6:	cmp	r3, #0
    ebe8:	beq.w	f368 <usb_isr+0x83c>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    ebec:	ldr	r1, [pc, #556]	; (ee1c <usb_isr+0x2f0>)
    ebee:	ldrb	r2, [r1, #0]
			if (t) {
    ebf0:	and.w	r3, r2, #255	; 0xff
    ebf4:	cbz	r2, ec02 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    ebf6:	subs	r3, #1
    ebf8:	uxtb	r3, r3
    ebfa:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    ebfc:	cmp	r3, #0
    ebfe:	beq.w	eed8 <usb_isr+0x3ac>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    ec02:	movs	r3, #4
    ec04:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    ec08:	and.w	r3, r4, #8
    ec0c:	and.w	r2, r3, #255	; 0xff
    ec10:	cmp	r3, #0
    ec12:	beq.w	eeaa <usb_isr+0x37e>
		uint8_t endpoint;
		stat = USB0_STAT;
    ec16:	ldrb.w	r3, [sl]
    ec1a:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    ec1c:	lsrs	r6, r3, #4
    ec1e:	bne.n	eb3c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    ec20:	lsrs	r0, r3, #2
    ec22:	ldr	r7, [pc, #472]	; (edfc <usb_isr+0x2d0>)
	pid = BDT_PID(b->desc);
    ec24:	ldr.w	r2, [r7, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    ec28:	add.w	r1, r7, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    ec2c:	ubfx	r2, r2, #2, #4
    ec30:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    ec32:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    ec34:	cmp	r2, #12
    ec36:	bhi.w	edca <usb_isr+0x29e>
    ec3a:	tbh	[pc, r2, lsl #1]
    ec3e:	.short	0x00ca
    ec40:	.word	0x00c600ca
    ec44:	.word	0x00c600c6
    ec48:	.word	0x00c600c6
    ec4c:	.word	0x008b00c6
    ec50:	.word	0x00c600c6
    ec54:	.word	0x000d00c6
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    ec58:	ldr	r2, [r1, #0]
    ec5a:	ldr	r5, [pc, #452]	; (ee20 <usb_isr+0x2f4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    ec5c:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    ec5e:	ldr	r3, [pc, #452]	; (ee24 <usb_isr+0x2f8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    ec60:	ldr	r6, [pc, #452]	; (ee28 <usb_isr+0x2fc>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    ec62:	ldr	r4, [pc, #424]	; (ee0c <usb_isr+0x2e0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    ec64:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ec66:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    ec68:	str.w	r4, [r7, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    ec6c:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    ec6e:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    ec70:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ec72:	cmp.w	r1, #2176	; 0x880
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    ec76:	str	r2, [r7, #16]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    ec78:	str	r3, [sp, #4]
    ec7a:	str	r2, [r3, #0]
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    ec7c:	str	r2, [r7, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    ec7e:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ec80:	beq.w	f2e0 <usb_isr+0x7b4>
    ec84:	bls.w	eef4 <usb_isr+0x3c8>
    ec88:	movw	r4, #8993	; 0x2321
    ec8c:	cmp	r1, r4
    ec8e:	beq.w	f2ea <usb_isr+0x7be>
    ec92:	bhi.w	f020 <usb_isr+0x4f4>
    ec96:	movw	r4, #8225	; 0x2021
    ec9a:	cmp	r1, r4
    ec9c:	beq.w	f036 <usb_isr+0x50a>
    eca0:	movw	r4, #8737	; 0x2221
    eca4:	cmp	r1, r4
    eca6:	beq.w	f188 <usb_isr+0x65c>
    ecaa:	cmp.w	r1, #2304	; 0x900
    ecae:	bne.w	f030 <usb_isr+0x504>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    ecb2:	ldr	r2, [pc, #352]	; (ee14 <usb_isr+0x2e8>)
    ecb4:	ldrb	r1, [r5, #2]
    ecb6:	strb	r1, [r2, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    ecb8:	ldr	r5, [pc, #320]	; (edfc <usb_isr+0x2d0>)
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ecba:	movs	r4, #4
    ecbc:	b.n	ecc4 <usb_isr+0x198>
    ecbe:	adds	r4, #1
    ecc0:	cmp	r4, #28
    ecc2:	beq.n	ecde <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    ecc4:	ldr.w	r3, [r7, r4, lsl #3]
    ecc8:	lsls	r1, r3, #24
    ecca:	bpl.n	ecbe <usb_isr+0x192>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    eccc:	add.w	r3, r5, r4, lsl #3
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ecd0:	adds	r4, #1
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    ecd2:	ldr	r0, [r3, #4]
    ecd4:	subs	r0, #8
    ecd6:	bl	e970 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ecda:	cmp	r4, #28
    ecdc:	bne.n	ecc4 <usb_isr+0x198>
    ecde:	ldr	r3, [pc, #288]	; (ee00 <usb_isr+0x2d4>)
    ece0:	ldr	r2, [pc, #328]	; (ee2c <usb_isr+0x300>)
    ece2:	ldr	r1, [pc, #332]	; (ee30 <usb_isr+0x304>)
    ece4:	ldr	r5, [pc, #284]	; (ee04 <usb_isr+0x2d8>)
    ece6:	ldr	r4, [pc, #288]	; (ee08 <usb_isr+0x2dc>)
    ece8:	ldr	r0, [pc, #328]	; (ee34 <usb_isr+0x308>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    ecea:	str	r5, [sp, #12]
    ecec:	str	r4, [sp, #16]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ecee:	mov.w	r9, #0
    ecf2:	str	r0, [sp, #8]
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    ecf4:	mov	r8, r1
    ecf6:	str	r6, [sp, #20]
    ecf8:	mov	r5, r2
    ecfa:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    ecfc:	ldr	r0, [r4, #0]
			while (p) {
    ecfe:	cbz	r0, ed0c <usb_isr+0x1e0>
				n = p->next;
    ed00:	ldr	r6, [r0, #4]
				usb_free(p);
    ed02:	bl	e970 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    ed06:	mov	r0, r6
    ed08:	cmp	r6, #0
    ed0a:	bne.n	ed00 <usb_isr+0x1d4>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    ed0c:	movs	r3, #0
    ed0e:	str	r3, [r4, #0]
			rx_last[i] = NULL;
    ed10:	ldr	r3, [sp, #12]
			p = tx_first[i];
    ed12:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    ed14:	mov	r2, r3
    ed16:	movs	r3, #0
    ed18:	str.w	r3, [r2, r9, lsl #2]
			p = tx_first[i];
			while (p) {
    ed1c:	cbz	r0, ed2a <usb_isr+0x1fe>
				n = p->next;
    ed1e:	ldr	r6, [r0, #4]
				usb_free(p);
    ed20:	bl	e970 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    ed24:	mov	r0, r6
    ed26:	cmp	r6, #0
    ed28:	bne.n	ed1e <usb_isr+0x1f2>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    ed2a:	ldr	r3, [sp, #8]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    ed2c:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    ed2e:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    ed30:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    ed32:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    ed36:	ldr	r2, [sp, #16]
    ed38:	mov.w	r1, #0
			switch (tx_state[i]) {
    ed3c:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    ed3e:	strh.w	r1, [r2, r9, lsl #1]
			switch (tx_state[i]) {
    ed42:	cmp	r3, #3
    ed44:	bhi.w	f23c <usb_isr+0x710>
    ed48:	tbh	[pc, r3, lsl #1]
    ed4c:	.word	0x027402c0
    ed50:	.word	0x027402c0
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    ed54:	ldr	r3, [pc, #204]	; (ee24 <usb_isr+0x2f8>)
    ed56:	str	r3, [sp, #4]
    ed58:	ldr	r2, [r3, #0]
		if (data) {
    ed5a:	cbz	r2, edb6 <usb_isr+0x28a>
			size = ep0_tx_len;
    ed5c:	ldr	r3, [pc, #216]	; (ee38 <usb_isr+0x30c>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ed5e:	ldr	r1, [pc, #220]	; (ee3c <usb_isr+0x310>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ed60:	ldr	r6, [pc, #196]	; (ee28 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    ed62:	ldrh	r0, [r3, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ed64:	ldrb	r4, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ed66:	ldrb.w	lr, [r6]
    ed6a:	cmp	r0, #64	; 0x40
    ed6c:	mov	r5, r0
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ed6e:	eor.w	ip, r4, #1
    ed72:	it	cs
    ed74:	movcs	r5, #64	; 0x40
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ed76:	orr.w	r4, r4, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ed7a:	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ed7e:	strb.w	ip, [r1]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    ed82:	sub.w	r0, r0, r5
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ed86:	add.w	ip, r7, r4, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ed8a:	ite	eq
    ed8c:	moveq	r1, #136	; 0x88
    ed8e:	movne	r1, #200	; 0xc8
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    ed90:	uxth	r0, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    ed92:	eor.w	lr, lr, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ed96:	orr.w	r1, r1, r5, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ed9a:	str.w	r2, [ip, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    ed9e:	strh	r0, [r3, #0]
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    eda0:	strb.w	lr, [r6]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    eda4:	add	r2, r5
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    eda6:	str.w	r1, [r7, r4, lsl #3]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    edaa:	cbnz	r0, edb2 <usb_isr+0x286>
    edac:	cmp	r5, #64	; 0x40
    edae:	it	ne
    edb0:	movne	r2, #0
    edb2:	ldr	r3, [sp, #4]
    edb4:	str	r2, [r3, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    edb6:	ldr	r3, [pc, #104]	; (ee20 <usb_isr+0x2f4>)
    edb8:	ldrh	r2, [r3, #0]
    edba:	cmp.w	r2, #1280	; 0x500
    edbe:	bne.n	edca <usb_isr+0x29e>
			setup.bRequest = 0;
    edc0:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    edc2:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    edc4:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    edc6:	ldr	r3, [pc, #120]	; (ee40 <usb_isr+0x314>)
    edc8:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    edca:	ldr	r2, [pc, #120]	; (ee44 <usb_isr+0x318>)
    edcc:	movs	r3, #1
    edce:	strb	r3, [r2, #0]
    edd0:	b.n	ebc0 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    edd2:	ldr	r2, [pc, #76]	; (ee20 <usb_isr+0x2f4>)
    edd4:	ldrh	r5, [r2, #0]
    edd6:	movw	r4, #8225	; 0x2021
    edda:	cmp	r5, r4
    eddc:	beq.w	efd4 <usb_isr+0x4a8>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    ede0:	ldr	r2, [pc, #40]	; (ee0c <usb_isr+0x2e0>)
    ede2:	str.w	r2, [r7, r0, lsl #3]
    ede6:	b.n	edca <usb_isr+0x29e>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    ede8:	ldr	r2, [pc, #32]	; (ee0c <usb_isr+0x2e0>)
    edea:	ldr	r3, [pc, #36]	; (ee10 <usb_isr+0x2e4>)
    edec:	tst.w	r9, #8
    edf0:	it	ne
    edf2:	movne	r3, r2
    edf4:	str.w	r3, [r7, r8, lsl #3]
    edf8:	b.n	ebc0 <usb_isr+0x94>
    edfa:	nop
    edfc:	.word	0x1fff0000
    ee00:	.word	0x20007080
    ee04:	.word	0x20007024
    ee08:	.word	0x200071a8
    ee0c:	.word	0x004000c8
    ee10:	.word	0x00400088
    ee14:	.word	0x20007120
    ee18:	.word	0x20007099
    ee1c:	.word	0x20007008
    ee20:	.word	0x2000710c
    ee24:	.word	0x20007020
    ee28:	.word	0x20007098
    ee2c:	.word	0x200070dc
    ee30:	.word	0x200070f4
    ee34:	.word	0x20007124
    ee38:	.word	0x2000703c
    ee3c:	.word	0x20007114
    ee40:	.word	0x40072098
    ee44:	.word	0x40072094
    ee48:	.word	0x40072080
    ee4c:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    ee50:	bl	e970 <usb_free>
				packet = tx_first[endpoint];
    ee54:	ldr	r2, [pc, #724]	; (f12c <usb_isr+0x600>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    ee56:	ldr	r1, [pc, #728]	; (f130 <usb_isr+0x604>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    ee58:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    ee5c:	cmp	r3, #0
    ee5e:	beq.w	efb6 <usb_isr+0x48a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    ee62:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    ee64:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    ee66:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    ee6a:	add.w	r2, r3, #8
    ee6e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    ee72:	cmp	r4, #3
    ee74:	bhi.n	ee82 <usb_isr+0x356>
    ee76:	tbb	[pc, r4]
    ee7a:	.short	0x0f12
    ee7c:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    ee7e:	movs	r2, #4
    ee80:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    ee82:	ldrh	r2, [r3, #0]
    ee84:	tst.w	r9, #8
    ee88:	ite	eq
    ee8a:	moveq	r3, #136	; 0x88
    ee8c:	movne	r3, #200	; 0xc8
    ee8e:	orr.w	r3, r3, r2, lsl #16
    ee92:	str.w	r3, [r7, r8, lsl #3]
    ee96:	b.n	ebc0 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    ee98:	movs	r2, #2
    ee9a:	strb	r2, [r1, r6]
						break;
    ee9c:	b.n	ee82 <usb_isr+0x356>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    ee9e:	movs	r2, #3
    eea0:	strb	r2, [r1, r6]
						break;
    eea2:	b.n	ee82 <usb_isr+0x356>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    eea4:	movs	r2, #5
    eea6:	strb	r2, [r1, r6]
						break;
    eea8:	b.n	ee82 <usb_isr+0x356>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    eeaa:	lsls	r0, r4, #31
    eeac:	bmi.w	f03e <usb_isr+0x512>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    eeb0:	lsls	r1, r4, #24
    eeb2:	bmi.w	f0da <usb_isr+0x5ae>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    eeb6:	lsls	r2, r4, #30
    eeb8:	bpl.n	eec8 <usb_isr+0x39c>
		uint8_t err = USB0_ERRSTAT;
    eeba:	ldr	r2, [pc, #632]	; (f134 <usb_isr+0x608>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    eebc:	ldr	r1, [pc, #632]	; (f138 <usb_isr+0x60c>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    eebe:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    eec0:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    eec2:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    eec4:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    eec6:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    eec8:	lsls	r3, r4, #27
    eeca:	bpl.n	eed2 <usb_isr+0x3a6>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    eecc:	ldr	r3, [pc, #616]	; (f138 <usb_isr+0x60c>)
    eece:	movs	r2, #16
    eed0:	strb	r2, [r3, #0]
	}

}
    eed2:	add	sp, #28
    eed4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    eed8:	bl	df8c <usb_serial_flush_callback>
    eedc:	b.n	ec02 <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    eede:	ldr	r2, [pc, #604]	; (f13c <usb_isr+0x610>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    eee0:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    eee4:	ldrb	r3, [r2, #0]
    eee6:	adds	r3, #1
    eee8:	strb	r3, [r2, #0]
    eeea:	b.n	ebc0 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    eeec:	str.w	r0, [r3, r6, lsl #2]
    eef0:	ldr	r5, [pc, #588]	; (f140 <usb_isr+0x614>)
    eef2:	b.n	eb8e <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    eef4:	movw	r4, #770	; 0x302
    eef8:	cmp	r1, r4
    eefa:	beq.w	f2f2 <usb_isr+0x7c6>
    eefe:	bhi.w	f098 <usb_isr+0x56c>
    ef02:	cmp	r1, #130	; 0x82
    ef04:	beq.w	f210 <usb_isr+0x6e4>
    ef08:	cmp.w	r1, #258	; 0x102
    ef0c:	beq.w	f108 <usb_isr+0x5dc>
    ef10:	cmp	r1, #128	; 0x80
    ef12:	bne.w	f030 <usb_isr+0x504>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    ef16:	ldr	r4, [pc, #556]	; (f144 <usb_isr+0x618>)
		reply_buffer[1] = 0;
		datalen = 2;
    ef18:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    ef1a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    ef1c:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    ef1e:	ldrh	r2, [r5, #6]
    ef20:	cmp	r2, r0
    ef22:	bcs.w	f348 <usb_isr+0x81c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ef26:	ldr	r1, [pc, #544]	; (f148 <usb_isr+0x61c>)
    ef28:	ldrb	r5, [r1, #0]
    ef2a:	orr.w	ip, r5, #2
    ef2e:	add.w	r0, r7, ip, lsl #3
    ef32:	cmp	r2, #64	; 0x40
    ef34:	mov	lr, r2
    ef36:	mov.w	r3, #1
    ef3a:	it	cs
    ef3c:	movcs.w	lr, #64	; 0x40
    ef40:	str	r4, [r0, #4]
    ef42:	add.w	r9, r4, lr
    ef46:	rsb	r0, lr, r2
    ef4a:	mov.w	r8, lr, lsl #16
    ef4e:	str	r3, [sp, #8]
    ef50:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ef52:	movs	r4, #200	; 0xc8
    ef54:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ef58:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ef5c:	str.w	r3, [r7, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    ef60:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    ef62:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ef64:	ldr.w	ip, [pc, #508]	; f164 <usb_isr+0x638>
	ep0_tx_data_toggle ^= 1;
    ef68:	ldr	r3, [pc, #480]	; (f14c <usb_isr+0x620>)
	ep0_tx_bdt_bank ^= 1;
    ef6a:	ldr.w	r8, [pc, #476]	; f148 <usb_isr+0x61c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    ef6e:	cmp	r0, #0
    ef70:	bne.w	f1ca <usb_isr+0x69e>
    ef74:	cmp.w	lr, #64	; 0x40
    ef78:	bne.n	f036 <usb_isr+0x50a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ef7a:	orr.w	r4, r4, #2
    ef7e:	add.w	r3, r7, r4, lsl #3
    ef82:	ldr.w	lr, [pc, #480]	; f164 <usb_isr+0x638>
    ef86:	str.w	r9, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ef8a:	cmp	r2, #0
    ef8c:	bne.w	f1f6 <usb_isr+0x6ca>
    ef90:	lsls	r2, r0, #16
    ef92:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    ef96:	ldrb.w	r3, [sp, #8]
    ef9a:	strb	r3, [r6, #0]
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    ef9c:	cmp	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ef9e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    efa0:	add.w	r3, r9, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    efa4:	str.w	r2, [lr, r4, lsl #3]
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    efa8:	bne.n	f036 <usb_isr+0x50a>
    efaa:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    efac:	ldr	r2, [pc, #416]	; (f150 <usb_isr+0x624>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    efae:	ldr	r1, [sp, #4]
	ep0_tx_len = datalen;
    efb0:	strh	r0, [r2, #0]
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    efb2:	str	r3, [r1, #0]
    efb4:	b.n	f036 <usb_isr+0x50a>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    efb6:	ldrb	r3, [r1, r6]
    efb8:	cmp	r3, #3
    efba:	bhi.w	f202 <usb_isr+0x6d6>
    efbe:	add	r2, pc, #4	; (adr r2, efc4 <usb_isr+0x498>)
    efc0:	ldr.w	pc, [r2, r3, lsl #2]
    efc4:	.word	0x0000ebc1
    efc8:	.word	0x0000ebc1
    efcc:	.word	0x0000f093
    efd0:	.word	0x0000f08d
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    efd4:	ldrh	r2, [r2, #4]
    efd6:	cbnz	r2, eff0 <usb_isr+0x4c4>
    efd8:	ldr	r2, [pc, #376]	; (f154 <usb_isr+0x628>)
    efda:	adds	r5, r1, #7
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    efdc:	ldrb.w	r3, [r1], #1
    efe0:	strb.w	r3, [r2, #1]!
#endif
			}
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
    efe4:	cmp	r5, r1
    efe6:	bne.n	efdc <usb_isr+0x4b0>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    efe8:	ldr	r2, [pc, #364]	; (f158 <usb_isr+0x62c>)
    efea:	ldr	r2, [r2, #0]
    efec:	cmp	r2, #134	; 0x86
    efee:	beq.n	f0ee <usb_isr+0x5c2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    eff0:	ldr	r1, [pc, #340]	; (f148 <usb_isr+0x61c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    eff2:	ldr	r6, [pc, #344]	; (f14c <usb_isr+0x620>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    eff4:	ldrb	r4, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    eff6:	ldrb	r2, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    eff8:	orr.w	r5, r4, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    effc:	eor.w	r4, r4, #1
    f000:	strb	r4, [r1, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f002:	add.w	r1, r7, r5, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f006:	cmp	r2, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f008:	mov.w	r4, #0
    f00c:	str	r4, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    f00e:	eor.w	r2, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f012:	ite	eq
    f014:	moveq	r1, #136	; 0x88
    f016:	movne	r1, #200	; 0xc8
    f018:	str.w	r1, [r7, r5, lsl #3]
	ep0_tx_data_toggle ^= 1;
    f01c:	strb	r2, [r6, #0]
    f01e:	b.n	ede0 <usb_isr+0x2b4>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f020:	movw	r4, #26273	; 0x66a1
    f024:	cmp	r1, r4
    f026:	beq.n	f030 <usb_isr+0x504>
    f028:	movw	r4, #26529	; 0x67a1
    f02c:	cmp	r1, r4
    f02e:	beq.n	f0f6 <usb_isr+0x5ca>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f030:	ldr	r3, [pc, #296]	; (f15c <usb_isr+0x630>)
    f032:	movs	r2, #15
    f034:	strb	r2, [r3, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    f036:	ldr	r2, [pc, #296]	; (f160 <usb_isr+0x634>)
    f038:	movs	r3, #1
    f03a:	strb	r3, [r2, #0]
    f03c:	b.n	edca <usb_isr+0x29e>

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    f03e:	ldr	r1, [pc, #288]	; (f160 <usb_isr+0x634>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    f040:	ldr	r3, [pc, #288]	; (f164 <usb_isr+0x638>)
    f042:	ldr	r0, [pc, #292]	; (f168 <usb_isr+0x63c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    f044:	ldr	r6, [pc, #256]	; (f148 <usb_isr+0x61c>)
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f046:	ldr.w	ip, [pc, #276]	; f15c <usb_isr+0x630>

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    f04a:	ldr	r5, [pc, #232]	; (f134 <usb_isr+0x608>)
		USB0_ISTAT = 0xFF;
    f04c:	ldr.w	lr, [pc, #232]	; f138 <usb_isr+0x60c>

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    f050:	ldr	r7, [pc, #280]	; (f16c <usb_isr+0x640>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    f052:	movs	r4, #2
    f054:	strb	r4, [r1, #0]
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    f056:	ldr	r4, [pc, #280]	; (f170 <usb_isr+0x644>)
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    f058:	str	r0, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    f05a:	str	r4, [r3, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    f05c:	str	r0, [r3, #8]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    f05e:	ldr	r0, [pc, #276]	; (f174 <usb_isr+0x648>)
    f060:	str	r0, [r3, #12]
		table[index(0, TX, EVEN)].desc = 0;
    f062:	str	r2, [r3, #16]
		table[index(0, TX, ODD)].desc = 0;
    f064:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f066:	movs	r3, #13
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    f068:	strb	r2, [r6, #0]
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    f06a:	ldr	r4, [pc, #268]	; (f178 <usb_isr+0x64c>)
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f06c:	strb.w	r3, [ip]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    f070:	ldr	r6, [pc, #264]	; (f17c <usb_isr+0x650>)

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    f072:	movs	r3, #255	; 0xff
    f074:	strb	r3, [r5, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    f076:	movs	r0, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    f078:	movs	r5, #159	; 0x9f
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    f07a:	strb.w	r3, [lr]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    f07e:	strb	r2, [r7, #0]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    f080:	strb	r3, [r6, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    f082:	strb	r5, [r4, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    f084:	strb	r0, [r1, #0]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    f086:	add	sp, #28
    f088:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    f08c:	movs	r3, #1
    f08e:	strb	r3, [r1, r6]
						break;
    f090:	b.n	ebc0 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    f092:	movs	r3, #0
    f094:	strb	r3, [r1, r6]
						break;
    f096:	b.n	ebc0 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f098:	cmp.w	r1, #1280	; 0x500
    f09c:	beq.w	f2ea <usb_isr+0x7be>
    f0a0:	bcc.n	f030 <usb_isr+0x504>
    f0a2:	sub.w	r1, r1, #1664	; 0x680
    f0a6:	cmp	r1, #1
    f0a8:	bhi.n	f030 <usb_isr+0x504>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    f0aa:	ldr	r2, [pc, #212]	; (f180 <usb_isr+0x654>)
    f0ac:	ldr	r4, [r2, #4]
    f0ae:	cmp	r4, #0
    f0b0:	beq.n	f030 <usb_isr+0x504>
    f0b2:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f0b4:	ldrh.w	lr, [r5, #4]
    f0b8:	b.n	f0c2 <usb_isr+0x596>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    f0ba:	adds	r2, #12
			if (list->addr == NULL) break;
    f0bc:	ldr	r4, [r2, #4]
    f0be:	cmp	r4, #0
    f0c0:	beq.n	f030 <usb_isr+0x504>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f0c2:	ldrh	r3, [r2, #0]
    f0c4:	cmp	r3, r0
    f0c6:	bne.n	f0ba <usb_isr+0x58e>
    f0c8:	ldrh	r3, [r2, #2]
    f0ca:	cmp	r3, lr
    f0cc:	bne.n	f0ba <usb_isr+0x58e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    f0ce:	lsrs	r0, r0, #8
    f0d0:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    f0d2:	ite	eq
    f0d4:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    f0d6:	ldrhne	r0, [r2, #8]
    f0d8:	b.n	ef1e <usb_isr+0x3f2>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f0da:	ldr	r1, [pc, #128]	; (f15c <usb_isr+0x630>)
		USB0_ISTAT = USB_ISTAT_STALL;
    f0dc:	ldr	r3, [pc, #88]	; (f138 <usb_isr+0x60c>)
    f0de:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f0e0:	movs	r0, #13
    f0e2:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    f0e4:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    f0e6:	lsls	r2, r4, #30
    f0e8:	bpl.w	eec8 <usb_isr+0x39c>
    f0ec:	b.n	eeba <usb_isr+0x38e>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    f0ee:	ldr	r2, [pc, #148]	; (f184 <usb_isr+0x658>)
    f0f0:	movs	r1, #15
    f0f2:	strb	r1, [r2, #0]
    f0f4:	b.n	eff0 <usb_isr+0x4c4>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    f0f6:	ldr	r4, [pc, #76]	; (f144 <usb_isr+0x618>)
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
    f0f8:	movs	r1, #32
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
		reply_buffer[1] = 0;
    f0fa:	strb	r2, [r4, #1]
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    f0fc:	movs	r2, #4
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
    f0fe:	strb	r0, [r4, #2]
		reply_buffer[3] = 0x20;
    f100:	strb	r1, [r4, #3]
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    f102:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    f104:	mov	r0, r2
    f106:	b.n	ef1e <usb_isr+0x3f2>
    f108:	ldrh	r1, [r5, #4]
    f10a:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    f10e:	cmp	r1, #6
    f110:	bhi.n	f030 <usb_isr+0x504>
    f112:	ldrh	r2, [r5, #2]
    f114:	cmp	r2, #0
    f116:	bne.n	f030 <usb_isr+0x504>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    f118:	ldr	r4, [pc, #64]	; (f15c <usb_isr+0x630>)
    f11a:	str	r0, [sp, #8]
    f11c:	lsls	r1, r1, #2
    f11e:	add	r4, r1
    f120:	ldrb	r1, [r4, #0]
    f122:	bic.w	r1, r1, #2
    f126:	strb	r1, [r4, #0]
    f128:	b.n	f1a2 <usb_isr+0x676>
    f12a:	nop
    f12c:	.word	0x200070dc
    f130:	.word	0x20007124
    f134:	.word	0x40072088
    f138:	.word	0x40072080
    f13c:	.word	0x20007115
    f140:	.word	0x20007024
    f144:	.word	0x20007118
    f148:	.word	0x20007114
    f14c:	.word	0x20007098
    f150:	.word	0x2000703c
    f154:	.word	0x2000719b
    f158:	.word	0x2000719c
    f15c:	.word	0x400720c0
    f160:	.word	0x40072094
    f164:	.word	0x1fff0000
    f168:	.word	0x00400088
    f16c:	.word	0x40072098
    f170:	.word	0x20007040
    f174:	.word	0x2000709c
    f178:	.word	0x40072084
    f17c:	.word	0x4007208c
    f180:	.word	0x00014fe0
    f184:	.word	0x20007099
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    f188:	ldrh	r1, [r5, #4]
    f18a:	cmp	r1, #0
    f18c:	bne.w	f318 <usb_isr+0x7ec>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f190:	ldr	r3, [pc, #472]	; (f36c <usb_isr+0x840>)
    f192:	ldr	r2, [pc, #476]	; (f370 <usb_isr+0x844>)
			usb_cdc_line_rtsdtr = setup.wValue;
    f194:	ldr	r4, [pc, #476]	; (f374 <usb_isr+0x848>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f196:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f198:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f19a:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f19c:	str	r0, [sp, #8]
    f19e:	mov	r2, r1
    f1a0:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    f1a2:	movs	r0, #0
    f1a4:	mov	r9, r0
    f1a6:	mov	r8, r0
    f1a8:	mov	lr, r0
    f1aa:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f1ac:	ldr	r1, [pc, #456]	; (f378 <usb_isr+0x84c>)
    f1ae:	ldrb	r5, [r1, #0]
    f1b0:	orr.w	ip, r5, #2
    f1b4:	add.w	r3, r7, ip, lsl #3
    f1b8:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f1ba:	ldr	r3, [sp, #8]
    f1bc:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f1be:	ldr	r3, [sp, #12]
    f1c0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f1c2:	ite	eq
    f1c4:	moveq	r4, #136	; 0x88
    f1c6:	movne	r4, #200	; 0xc8
    f1c8:	b.n	ef54 <usb_isr+0x428>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    f1ca:	cmp	r0, #64	; 0x40
    f1cc:	bls.w	ef7a <usb_isr+0x44e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f1d0:	orr.w	r4, r4, #2
    f1d4:	add.w	r1, ip, r4, lsl #3
    f1d8:	str.w	r9, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f1dc:	cbz	r2, f1fe <usb_isr+0x6d2>
    f1de:	ldr	r2, [pc, #412]	; (f37c <usb_isr+0x850>)
	ep0_tx_data_toggle ^= 1;
    f1e0:	ldrb.w	r1, [sp, #8]
    f1e4:	strb	r1, [r3, #0]
	ep0_tx_bdt_bank ^= 1;
    f1e6:	strb.w	r5, [r8]
    f1ea:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f1ec:	add.w	r3, r9, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f1f0:	str.w	r2, [ip, r4, lsl #3]
    f1f4:	b.n	efac <usb_isr+0x480>
    f1f6:	lsls	r2, r0, #16
    f1f8:	orr.w	r2, r2, #200	; 0xc8
    f1fc:	b.n	ef96 <usb_isr+0x46a>
    f1fe:	ldr	r2, [pc, #384]	; (f380 <usb_isr+0x854>)
    f200:	b.n	f1e0 <usb_isr+0x6b4>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    f202:	tst.w	r9, #8
    f206:	ite	eq
    f208:	moveq	r3, #2
    f20a:	movne	r3, #3
    f20c:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    f20e:	b.n	ebc0 <usb_isr+0x94>
    f210:	ldrh	r1, [r5, #4]
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f212:	ldr	r3, [pc, #368]	; (f384 <usb_isr+0x858>)
    f214:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    f218:	cmp	r1, #6
    f21a:	bhi.w	f032 <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    f21e:	ldr	r4, [pc, #360]	; (f388 <usb_isr+0x85c>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    f220:	lsls	r1, r1, #2
    f222:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    f224:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    f226:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    f228:	ldrb	r2, [r3, #0]
    f22a:	lsls	r3, r2, #30
    f22c:	bpl.n	f31c <usb_isr+0x7f0>
    f22e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    f230:	movs	r0, #2
    f232:	b.n	ef1e <usb_isr+0x3f2>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    f234:	ldr	r3, [sp, #8]
    f236:	mov.w	r2, #1
    f23a:	strb	r2, [r3, #0]
    f23c:	ldr	r3, [sp, #8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    f23e:	add.w	r9, r9, #1
    f242:	adds	r3, #1
    f244:	cmp.w	r9, #6
    f248:	add.w	r4, r4, #4
    f24c:	add.w	r5, r5, #4
    f250:	str	r3, [sp, #8]
    f252:	bne.w	ecfc <usb_isr+0x1d0>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    f256:	ldr	r3, [pc, #308]	; (f38c <usb_isr+0x860>)
    f258:	ldr	r6, [sp, #20]
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
    f25a:	ldr	r5, [pc, #308]	; (f390 <usb_isr+0x864>)
		cfg = usb_endpoint_config_table;
    f25c:	ldr.w	r8, [pc, #316]	; f39c <usb_isr+0x870>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    f260:	movs	r0, #0
    f262:	strb	r0, [r3, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    f264:	mov.w	r9, #1
    f268:	b.n	f28a <usb_isr+0x75e>
    f26a:	mov.w	r4, r9, lsl #2
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    f26e:	orr.w	r2, r4, #2
			table[index(i, TX, ODD)].desc = 0;
    f272:	orr.w	r4, r4, #3
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    f276:	movs	r3, #0
    f278:	str.w	r3, [r7, r2, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    f27c:	str.w	r3, [r7, r4, lsl #3]
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    f280:	ldr	r3, [pc, #272]	; (f394 <usb_isr+0x868>)
    f282:	cmp	r5, r3
    f284:	add.w	r9, r9, #1
    f288:	beq.n	f2d6 <usb_isr+0x7aa>
			epconf = *cfg++;
    f28a:	ldrb.w	r3, [r8], #1
			*reg = epconf;
    f28e:	strb.w	r3, [r5], #4
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    f292:	lsls	r2, r3, #28
    f294:	bpl.n	f26a <usb_isr+0x73e>
				usb_packet_t *p;
				p = usb_malloc();
    f296:	bl	e930 <usb_malloc>
				if (p) {
    f29a:	cmp	r0, #0
    f29c:	beq.n	f334 <usb_isr+0x808>
					table[index(i, RX, EVEN)].addr = p->buf;
    f29e:	add.w	r3, r7, r9, lsl #5
    f2a2:	mov.w	r4, r9, lsl #2
    f2a6:	adds	r0, #8
    f2a8:	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    f2aa:	ldr	r3, [pc, #212]	; (f380 <usb_isr+0x854>)
    f2ac:	str.w	r3, [r7, r4, lsl #3]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    f2b0:	bl	e930 <usb_malloc>
				if (p) {
    f2b4:	cmp	r0, #0
    f2b6:	beq.n	f320 <usb_isr+0x7f4>
					table[index(i, RX, ODD)].addr = p->buf;
    f2b8:	orr.w	r3, r4, #1
    f2bc:	add.w	r2, r7, r3, lsl #3
    f2c0:	adds	r0, #8
    f2c2:	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    f2c4:	ldr	r2, [pc, #180]	; (f37c <usb_isr+0x850>)
    f2c6:	str.w	r2, [r7, r3, lsl #3]
    f2ca:	b.n	f26e <usb_isr+0x742>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    f2cc:	ldr	r3, [sp, #8]
    f2ce:	mov.w	r2, #0
    f2d2:	strb	r2, [r3, #0]
    f2d4:	b.n	f23c <usb_isr+0x710>
    f2d6:	ldrb	r3, [r6, #0]
    f2d8:	str	r3, [sp, #8]
    f2da:	eor.w	r2, r3, #1
    f2de:	b.n	f1a2 <usb_isr+0x676>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    f2e0:	ldr	r2, [pc, #180]	; (f398 <usb_isr+0x86c>)
    f2e2:	ldr	r4, [pc, #164]	; (f388 <usb_isr+0x85c>)
    f2e4:	ldrb	r2, [r2, #0]
    f2e6:	strb	r2, [r4, #0]
    f2e8:	b.n	ef1e <usb_isr+0x3f2>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f2ea:	movs	r3, #1
    f2ec:	movs	r2, #0
    f2ee:	str	r3, [sp, #8]
    f2f0:	b.n	f1a2 <usb_isr+0x676>
    f2f2:	ldrh	r1, [r5, #4]
    f2f4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    f2f8:	cmp	r1, #6
    f2fa:	bhi.w	f030 <usb_isr+0x504>
    f2fe:	ldrh	r2, [r5, #2]
    f300:	cmp	r2, #0
    f302:	bne.w	f030 <usb_isr+0x504>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    f306:	ldr	r4, [pc, #124]	; (f384 <usb_isr+0x858>)
    f308:	str	r0, [sp, #8]
    f30a:	lsls	r1, r1, #2
    f30c:	add	r4, r1
    f30e:	ldrb	r1, [r4, #0]
    f310:	orr.w	r1, r1, #2
    f314:	strb	r1, [r4, #0]
    f316:	b.n	f1a2 <usb_isr+0x676>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    f318:	str	r0, [sp, #8]
    f31a:	b.n	f1a2 <usb_isr+0x676>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    f31c:	movs	r0, #2
    f31e:	b.n	ef1e <usb_isr+0x3f2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    f320:	ldr	r3, [pc, #104]	; (f38c <usb_isr+0x860>)
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    f322:	orr.w	r2, r4, #1
					usb_rx_memory_needed++;
    f326:	ldrb	r3, [r3, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    f328:	str.w	r0, [r7, r2, lsl #3]
					usb_rx_memory_needed++;
    f32c:	ldr	r2, [pc, #92]	; (f38c <usb_isr+0x860>)
    f32e:	adds	r3, #1
    f330:	strb	r3, [r2, #0]
    f332:	b.n	f26e <usb_isr+0x742>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    f334:	ldr	r3, [pc, #84]	; (f38c <usb_isr+0x860>)
    f336:	ldr	r2, [pc, #84]	; (f38c <usb_isr+0x860>)
    f338:	ldrb	r3, [r3, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    f33a:	mov.w	r4, r9, lsl #2
					usb_rx_memory_needed++;
    f33e:	adds	r3, #1
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    f340:	str.w	r0, [r7, r4, lsl #3]
					usb_rx_memory_needed++;
    f344:	strb	r3, [r2, #0]
    f346:	b.n	f2b0 <usb_isr+0x784>
    f348:	cmp	r0, #64	; 0x40
    f34a:	mov	lr, r0
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    f34c:	mov.w	r3, #1
    f350:	it	cs
    f352:	movcs.w	lr, #64	; 0x40
    f356:	rsb	r0, lr, r0
    f35a:	mov.w	r8, lr, lsl #16
    f35e:	add.w	r9, r4, lr
    f362:	movs	r2, #0
    f364:	str	r3, [sp, #8]
    f366:	b.n	f1ac <usb_isr+0x680>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    f368:	bkpt	0x0000
    f36a:	nop
    f36c:	.word	0x2000701c
    f370:	.word	0x200071a4
    f374:	.word	0x20007018
    f378:	.word	0x20007114
    f37c:	.word	0x004000c8
    f380:	.word	0x00400088
    f384:	.word	0x400720c0
    f388:	.word	0x20007118
    f38c:	.word	0x20007115
    f390:	.word	0x400720c4
    f394:	.word	0x400720dc
    f398:	.word	0x20007120
    f39c:	.word	0x00014fd8

0000f3a0 <usb_init>:
}



void usb_init(void)
{
    f3a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    f3a4:	bl	e1ac <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    f3a8:	movs	r3, #0
    f3aa:	ldr	r1, [pc, #140]	; (f438 <usb_init+0x98>)
		table[i].desc = 0;
    f3ac:	mov	r2, r3
		table[i].addr = 0;
    f3ae:	add.w	r0, r1, r3, lsl #3
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    f3b2:	str.w	r2, [r1, r3, lsl #3]
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    f3b6:	adds	r3, #1
    f3b8:	cmp	r3, #28
		table[i].desc = 0;
		table[i].addr = 0;
    f3ba:	str	r2, [r0, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    f3bc:	mov.w	r4, #0
    f3c0:	ldr	r0, [pc, #116]	; (f438 <usb_init+0x98>)
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    f3c2:	bne.n	f3ae <usb_init+0xe>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    f3c4:	ldr	r1, [pc, #116]	; (f43c <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    f3c6:	ldr	r2, [pc, #120]	; (f440 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    f3c8:	ldr	r3, [r1, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    f3ca:	ldr.w	r8, [pc, #140]	; f458 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    f3ce:	ldr	r7, [pc, #116]	; (f444 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    f3d0:	ldr	r5, [pc, #116]	; (f448 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    f3d2:	ldr	r6, [pc, #120]	; (f44c <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    f3d4:	ldr.w	ip, [pc, #132]	; f45c <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    f3d8:	ldr.w	lr, [pc, #132]	; f460 <usb_init+0xc0>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    f3dc:	orr.w	r3, r3, #262144	; 0x40000
    f3e0:	str	r3, [r1, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    f3e2:	ldr	r3, [r2, #0]
    f3e4:	orr.w	r3, r3, #50331648	; 0x3000000
    f3e8:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    f3ea:	ubfx	r3, r0, #8, #8
    f3ee:	strb.w	r3, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    f3f2:	add.w	r1, r1, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    f3f6:	ubfx	r3, r0, #16, #8
    f3fa:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    f3fc:	lsrs	r0, r0, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    f3fe:	movs	r3, #255	; 0xff

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    f400:	adds	r1, #204	; 0xcc
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    f402:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    f406:	strb	r0, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    f408:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    f40c:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    f410:	ldr	r5, [pc, #60]	; (f450 <usb_init+0xb0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    f412:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    f416:	ldr	r0, [pc, #60]	; (f454 <usb_init+0xb4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    f418:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    f41a:	movs	r3, #1
    f41c:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    f420:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    f422:	strb	r4, [r1, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    f424:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    f428:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    f42a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    f42e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    f430:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    f432:	strb	r1, [r2, #0]
    f434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f438:	.word	0x1fff0000
    f43c:	.word	0x40048034
    f440:	.word	0x4000d800
    f444:	.word	0x400720b0
    f448:	.word	0x400720b4
    f44c:	.word	0x40072010
    f450:	.word	0xe000e435
    f454:	.word	0xe000e104
    f458:	.word	0x4007209c
    f45c:	.word	0x40072080
    f460:	.word	0x40072088

0000f464 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    f464:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    f468:	ldr	r6, [pc, #196]	; (f530 <yield+0xcc>)
    f46a:	ldrb	r3, [r6, #0]
    f46c:	cbz	r3, f494 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    f46e:	ldr	r7, [pc, #196]	; (f534 <yield+0xd0>)
    f470:	ldrb	r2, [r7, #0]
    f472:	cbnz	r2, f494 <yield+0x30>
	running = 1;
    f474:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    f476:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    f478:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    f47a:	bmi.n	f4ea <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    f47c:	lsls	r2, r3, #30
    f47e:	bmi.n	f4b4 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    f480:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f482:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    f484:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f486:	bpl.n	f494 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    f488:	ldr	r3, [pc, #172]	; (f538 <yield+0xd4>)
    f48a:	ldr	r2, [r3, #0]
    f48c:	cbz	r2, f494 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f48e:	mrs	r2, IPSR
		if (ipsr != 0) return;
    f492:	cbz	r2, f498 <yield+0x34>
    f494:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f498:	mrs	r1, PRIMASK
		__disable_irq();
    f49c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    f49e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    f4a0:	cbz	r0, f4aa <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    f4a2:	ldr	r4, [pc, #152]	; (f53c <yield+0xd8>)
    f4a4:	ldrb	r2, [r4, #0]
    f4a6:	cmp	r2, #0
    f4a8:	beq.n	f508 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f4aa:	cmp	r1, #0
    f4ac:	bne.n	f494 <yield+0x30>
    f4ae:	cpsie	i
    f4b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f4b4:	ldr.w	r8, [pc, #144]	; f548 <yield+0xe4>
    f4b8:	ldrb.w	r2, [r8]
    f4bc:	cmp	r2, #0
    f4be:	beq.n	f480 <yield+0x1c>
    f4c0:	ldr.w	r9, [pc, #136]	; f54c <yield+0xe8>
    f4c4:	movs	r4, #0
    f4c6:	b.n	f4d4 <yield+0x70>
    f4c8:	adds	r4, #1
    f4ca:	ldrb.w	r3, [r8]
    f4ce:	uxtb	r4, r4
    f4d0:	cmp	r3, r4
    f4d2:	bls.n	f4fa <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    f4d4:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    f4d8:	ldr	r3, [r5, #0]
    f4da:	mov	r0, r5
    f4dc:	ldr	r3, [r3, #16]
    f4de:	blx	r3
    f4e0:	cmp	r0, #0
    f4e2:	beq.n	f4c8 <yield+0x64>
    f4e4:	ldr	r3, [r5, #16]
    f4e6:	blx	r3
    f4e8:	b.n	f4c8 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    f4ea:	bl	dd78 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    f4ee:	cbnz	r0, f524 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    f4f0:	ldr	r3, [pc, #76]	; (f540 <yield+0xdc>)
    f4f2:	ldrb	r3, [r3, #0]
    f4f4:	cbnz	r3, f4fe <yield+0x9a>
    f4f6:	ldrb	r3, [r6, #0]
    f4f8:	b.n	f47c <yield+0x18>
    f4fa:	ldrb	r3, [r6, #0]
    f4fc:	b.n	f480 <yield+0x1c>
    f4fe:	ldrb	r3, [r6, #0]
    f500:	and.w	r3, r3, #254	; 0xfe
    f504:	strb	r3, [r6, #0]
    f506:	b.n	f47c <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    f508:	ldr	r5, [r0, #20]
    f50a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    f50c:	movs	r3, #1
    f50e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    f510:	cbz	r5, f52a <yield+0xc6>
			firstYield->_prev = nullptr;
    f512:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f514:	cbnz	r1, f518 <yield+0xb4>
    f516:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    f518:	movs	r5, #0
    f51a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    f51c:	ldr	r3, [r0, #8]
    f51e:	blx	r3
		runningFromYield = false;
    f520:	strb	r5, [r4, #0]
    f522:	b.n	f494 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    f524:	bl	f91c <serialEvent()>
    f528:	b.n	f4f0 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    f52a:	ldr	r3, [pc, #24]	; (f544 <yield+0xe0>)
    f52c:	str	r5, [r3, #0]
    f52e:	b.n	f514 <yield+0xb0>
    f530:	.word	0x1fff0c54
    f534:	.word	0x2000712a
    f538:	.word	0x2000713c
    f53c:	.word	0x20007140
    f540:	.word	0x1fff0c68
    f544:	.word	0x20007138
    f548:	.word	0x20007164
    f54c:	.word	0x2000714c

0000f550 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    f550:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    f552:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    f554:	cbnz	r1, f57e <DMAChannel::begin(bool)+0x2e>
    f556:	ldr	r2, [r0, #0]
    f558:	cbz	r2, f57e <DMAChannel::begin(bool)+0x2e>
    f55a:	ldrb	r3, [r0, #4]
    f55c:	cmp	r3, #15
    f55e:	bhi.n	f57e <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    f560:	ldr	r4, [pc, #160]	; (f604 <DMAChannel::begin(bool)+0xb4>)
    f562:	ldrh	r1, [r4, #0]
    f564:	asr.w	r5, r1, r3
    f568:	lsls	r5, r5, #31
    f56a:	bpl.n	f582 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    f56c:	add.w	r3, r3, #33554432	; 0x2000000
    f570:	add.w	r3, r3, #1152	; 0x480
    f574:	cmp.w	r2, r3, lsl #5
    f578:	bne.n	f582 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    f57a:	cpsie	i
		return;
    f57c:	pop	{r4, r5, r6, r7, pc}
    f57e:	ldr	r4, [pc, #132]	; (f604 <DMAChannel::begin(bool)+0xb4>)
    f580:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    f582:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    f584:	asr.w	r2, r1, r3
    f588:	ands.w	r2, r2, #1
    f58c:	beq.n	f59e <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    f58e:	adds	r3, #1
    f590:	cmp	r3, #16
    f592:	bne.n	f584 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    f594:	cpsie	i
			TCD = (TCD_t *)0;
    f596:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    f598:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    f59a:	str	r2, [r0, #0]
    f59c:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    f59e:	movs	r5, #1
    f5a0:	lsls	r5, r3
    f5a2:	orrs	r1, r5
    f5a4:	strh	r1, [r4, #0]
			__enable_irq();
    f5a6:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    f5a8:	ldr	r6, [pc, #92]	; (f608 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    f5aa:	ldr	r5, [pc, #96]	; (f60c <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    f5ac:	ldr	r7, [pc, #96]	; (f610 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    f5ae:	ldr.w	lr, [pc, #104]	; f618 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    f5b2:	uxtb	r1, r3
    f5b4:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    f5b6:	ldr	r4, [r6, #0]
    f5b8:	orr.w	r4, r4, #2
    f5bc:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    f5be:	ldr	r4, [r5, #0]
    f5c0:	orr.w	r4, r4, #2
    f5c4:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    f5c6:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    f5ca:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    f5ce:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    f5d2:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    f5d6:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    f5d8:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    f5dc:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    f5de:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    f5e0:	ldr	r4, [pc, #48]	; (f614 <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    f5e2:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    f5e6:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    f5e8:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    f5ea:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    f5ec:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    f5ee:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    f5f0:	str	r2, [r3, #0]
	*p++ = 0;
    f5f2:	str	r2, [r3, #4]
	*p++ = 0;
    f5f4:	str	r2, [r3, #8]
	*p++ = 0;
    f5f6:	str	r2, [r3, #12]
	*p++ = 0;
    f5f8:	str	r2, [r3, #16]
	*p++ = 0;
    f5fa:	str	r2, [r3, #20]
	*p++ = 0;
    f5fc:	str	r2, [r3, #24]
	*p++ = 0;
    f5fe:	str	r2, [r3, #28]
    f600:	pop	{r4, r5, r6, r7, pc}
    f602:	nop
    f604:	.word	0x2000712c
    f608:	.word	0x40048040
    f60c:	.word	0x4004803c
    f610:	.word	0x40008000
    f614:	.word	0x4000801f
    f618:	.word	0x4000801a

0000f61c <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    f61c:	ldrb	r3, [r0, #4]
    f61e:	cmp	r3, #15
    f620:	bhi.n	f648 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    f622:	ldr	r2, [pc, #40]	; (f64c <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    f624:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    f626:	strb	r3, [r2, #0]
	__disable_irq();
    f628:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    f62a:	ldr	r1, [pc, #36]	; (f650 <DMAChannel::release()+0x34>)
    f62c:	ldrb	r4, [r0, #4]
    f62e:	ldrh	r2, [r1, #0]
    f630:	movs	r3, #1
    f632:	lsls	r3, r4
    f634:	bic.w	r3, r2, r3
    f638:	strh	r3, [r1, #0]
	__enable_irq();
    f63a:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    f63c:	movs	r2, #16
	TCD = (TCD_t *)0;
    f63e:	movs	r3, #0
}
    f640:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    f644:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    f646:	str	r3, [r0, #0]
}
    f648:	bx	lr
    f64a:	nop
    f64c:	.word	0x4000801a
    f650:	.word	0x2000712c

0000f654 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    f654:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f656:	mrs	r2, PRIMASK
		__disable_irq();
    f65a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    f65c:	ldrb	r3, [r0, #29]
    f65e:	cbnz	r3, f66e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    f660:	ldrb	r1, [r0, #28]
    f662:	cmp	r1, #1
    f664:	beq.n	f678 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    f666:	cmp	r1, #3
    f668:	beq.n	f68c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    f66a:	movs	r3, #1
    f66c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f66e:	cbnz	r2, f672 <EventResponder::triggerEventNotImmediate()+0x1e>
    f670:	cpsie	i
	}
	enableInterrupts(irq);
}
    f672:	ldr.w	r4, [sp], #4
    f676:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    f678:	ldr	r4, [pc, #68]	; (f6c0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    f67a:	ldr	r1, [r4, #0]
    f67c:	cbz	r1, f6a8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    f67e:	ldr	r1, [pc, #68]	; (f6c4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    f680:	str	r3, [r0, #20]
				_prev = lastYield;
    f682:	ldr	r3, [r1, #0]
    f684:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    f686:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    f688:	str	r0, [r3, #20]
    f68a:	b.n	f66a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    f68c:	ldr	r4, [pc, #56]	; (f6c8 <EventResponder::triggerEventNotImmediate()+0x74>)
    f68e:	ldr	r1, [r4, #0]
    f690:	cbz	r1, f6b4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    f692:	ldr	r1, [pc, #56]	; (f6cc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    f694:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    f696:	ldr	r3, [r1, #0]
    f698:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    f69a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    f69c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    f69e:	ldr	r3, [pc, #48]	; (f6d0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    f6a0:	mov.w	r1, #268435456	; 0x10000000
    f6a4:	str	r1, [r3, #0]
    f6a6:	b.n	f66a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    f6a8:	ldr	r3, [pc, #24]	; (f6c4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    f6aa:	str	r1, [r0, #20]
				_prev = nullptr;
    f6ac:	str	r1, [r0, #24]
				firstYield = this;
    f6ae:	str	r0, [r4, #0]
				lastYield = this;
    f6b0:	str	r0, [r3, #0]
    f6b2:	b.n	f66a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    f6b4:	ldr	r3, [pc, #20]	; (f6cc <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    f6b6:	str	r1, [r0, #20]
				_prev = nullptr;
    f6b8:	str	r1, [r0, #24]
				firstInterrupt = this;
    f6ba:	str	r0, [r4, #0]
				lastInterrupt = this;
    f6bc:	str	r0, [r3, #0]
    f6be:	b.n	f69e <EventResponder::triggerEventNotImmediate()+0x4a>
    f6c0:	.word	0x2000713c
    f6c4:	.word	0x20007138
    f6c8:	.word	0x20007130
    f6cc:	.word	0x20007134
    f6d0:	.word	0xe000ed04

0000f6d4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    f6d4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f6d6:	mrs	r2, PRIMASK
		__disable_irq();
    f6da:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    f6dc:	ldr	r4, [pc, #48]	; (f710 <EventResponder::runFromInterrupt()+0x3c>)
    f6de:	ldr	r0, [r4, #0]
		if (first) {
    f6e0:	cbz	r0, f704 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    f6e2:	ldr	r6, [pc, #48]	; (f714 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    f6e4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    f6e6:	ldr	r3, [r0, #20]
    f6e8:	str	r3, [r4, #0]
			if (firstInterrupt) {
    f6ea:	cbz	r3, f70a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    f6ec:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f6ee:	cbnz	r2, f6f2 <EventResponder::runFromInterrupt()+0x1e>
    f6f0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    f6f2:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    f6f4:	ldr	r3, [r0, #8]
    f6f6:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f6f8:	mrs	r2, PRIMASK
		__disable_irq();
    f6fc:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    f6fe:	ldr	r0, [r4, #0]
		if (first) {
    f700:	cmp	r0, #0
    f702:	bne.n	f6e6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f704:	cbnz	r2, f708 <EventResponder::runFromInterrupt()+0x34>
    f706:	cpsie	i
    f708:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    f70a:	str	r3, [r6, #0]
    f70c:	b.n	f6ee <EventResponder::runFromInterrupt()+0x1a>
    f70e:	nop
    f710:	.word	0x20007130
    f714:	.word	0x20007134

0000f718 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    f718:	b.w	f6d4 <EventResponder::runFromInterrupt()>

0000f71c <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    f71c:	ldr	r2, [pc, #8]	; (f728 <systick_isr+0xc>)
    f71e:	ldr	r3, [r2, #0]
    f720:	adds	r3, #1
    f722:	str	r3, [r2, #0]
    f724:	bx	lr
    f726:	nop
    f728:	.word	0x2000701c

0000f72c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    f72c:	b.w	dd94 <usb_serial_flush_input>

0000f730 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    f730:	b.w	dd48 <usb_serial_peekchar>

0000f734 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    f734:	b.w	dd00 <usb_serial_getchar>

0000f738 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    f738:	b.w	dd78 <usb_serial_available>

0000f73c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    f73c:	b.w	df34 <usb_serial_flush_output>

0000f740 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    f740:	b.w	deec <usb_serial_write_buffer_free>

0000f744 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    f744:	mov	r0, r1
    f746:	mov	r1, r2
    f748:	b.w	ddcc <usb_serial_write>

0000f74c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    f74c:	mov	r0, r1
    f74e:	b.w	ded4 <usb_serial_putchar>
    f752:	nop

0000f754 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    f754:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    f756:	mov	r6, r1
    f758:	cbz	r1, f778 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    f75a:	cbz	r2, f77c <Print::write(unsigned char const*, unsigned int)+0x28>
    f75c:	mov	r7, r0
    f75e:	mov	r4, r2
    f760:	movs	r5, #0
    f762:	ldr	r3, [r7, #0]
    f764:	ldrb.w	r1, [r6], #1
    f768:	ldr	r3, [r3, #0]
    f76a:	mov	r0, r7
    f76c:	blx	r3
    f76e:	subs	r4, #1
    f770:	add	r5, r0
    f772:	bne.n	f762 <Print::write(unsigned char const*, unsigned int)+0xe>
    f774:	mov	r0, r5
    f776:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    f778:	mov	r0, r1
    f77a:	pop	{r3, r4, r5, r6, r7, pc}
    f77c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    f77e:	pop	{r3, r4, r5, r6, r7, pc}

0000f780 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    f780:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    f782:	ldr	r2, [pc, #24]	; (f79c <Print::println()+0x1c>)
	return write(buf, 2);
    f784:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    f786:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    f788:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    f78a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    f78c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    f78e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    f792:	movs	r2, #2
    f794:	blx	r3
}
    f796:	add	sp, #12
    f798:	ldr.w	pc, [sp], #4
    f79c:	.word	0x00015270

0000f7a0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    f7a0:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    f7a2:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    f7a4:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    f7a6:	ldr	r3, [r3, #4]
    f7a8:	blx	r3
	return len;
}
    f7aa:	mov	r0, r4
    f7ac:	pop	{r4, pc}
    f7ae:	nop

0000f7b0 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    f7b0:	push	{r1, r2, r3}
    f7b2:	push	{lr}
    f7b4:	sub	sp, #8
    f7b6:	add	r2, sp, #12
    f7b8:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    f7bc:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    f7be:	bl	12cf0 <vdprintf>
#endif
}
    f7c2:	add	sp, #8
    f7c4:	ldr.w	lr, [sp], #4
    f7c8:	add	sp, #12
    f7ca:	bx	lr

0000f7cc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    f7cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f7d0:	sub	sp, #72	; 0x48
    f7d2:	ldrb.w	r6, [sp, #104]	; 0x68
    f7d6:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    f7da:	cmp	r6, #1
    f7dc:	bls.n	f87e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb2>
    f7de:	mov	r4, r2
    f7e0:	mov	r5, r3
	if (n == 0) {
    f7e2:	orrs.w	r3, r4, r5
    f7e6:	mov	r9, r0
    f7e8:	beq.n	f872 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
    f7ea:	uxtb	r6, r6
    f7ec:	movs	r7, #0
    f7ee:	mov.w	r8, #65	; 0x41
    f7f2:	b.n	f7f8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    f7f4:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    f7f8:	mov	r0, r4
    f7fa:	mov	r1, r5
    f7fc:	mov	r2, r6
    f7fe:	mov	r3, r7
    f800:	bl	10254 <__aeabi_uldivmod>
    f804:	mov	r1, r3
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f806:	cmp	r1, #0
    f808:	it	eq
    f80a:	cmpeq	r2, #10
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    f80c:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    f80e:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f810:	add	r4, sp, #72	; 0x48
    f812:	add.w	lr, r3, #48	; 0x30
    f816:	add	r4, r8
    f818:	itte	cs
    f81a:	addcs	r3, #55	; 0x37
    f81c:	uxtbcs.w	lr, r3
    f820:	uxtbcc.w	lr, lr
			n /= base;
    f824:	mov	r3, r7
    f826:	mov	r1, r5
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f828:	strb.w	lr, [r4, #-68]
			n /= base;
    f82c:	mov	r2, r6
    f82e:	bl	10254 <__aeabi_uldivmod>
    f832:	mov	r4, r0
    f834:	mov	r5, r1
			if (n == 0) break;
    f836:	orrs.w	r3, r4, r5
			i--;
    f83a:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    f83e:	bne.n	f7f4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
    f840:	cmp.w	sl, #0
    f844:	beq.n	f858 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
    f846:	add.w	r8, r8, #4294967295
    f84a:	uxtb.w	r8, r8
		buf[i] = '-';
    f84e:	add	r3, sp, #72	; 0x48
    f850:	add	r3, r8
    f852:	movs	r2, #45	; 0x2d
    f854:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    f858:	ldr.w	r3, [r9]
    f85c:	add	r2, sp, #4
    f85e:	add.w	r1, r2, r8
    f862:	ldr	r3, [r3, #4]
    f864:	mov	r0, r9
    f866:	rsb	r2, r8, #66	; 0x42
    f86a:	blx	r3
}
    f86c:	add	sp, #72	; 0x48
    f86e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    f872:	movs	r3, #48	; 0x30
    f874:	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    f878:	mov.w	r8, #65	; 0x41
    f87c:	b.n	f840 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x74>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    f87e:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    f880:	add	sp, #72	; 0x48
    f882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f886:	nop

0000f888 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    f888:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    f88a:	bl	1ce8 <setup>
	while (1) {
		loop();
    f88e:	bl	1ab4 <loop>
		yield();
    f892:	bl	f464 <yield>
    f896:	b.n	f88e <main+0x6>

0000f898 <software_isr>:
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    f898:	ldr	r1, [pc, #104]	; (f904 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    f89a:	ldr	r2, [pc, #108]	; (f908 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    f89c:	ldr	r0, [pc, #108]	; (f90c <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    f89e:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    f8a0:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    f8a2:	ldr	r5, [pc, #108]	; (f910 <software_isr+0x78>)
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    f8a4:	ldr	r4, [r0, #0]
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    f8a6:	orr.w	r3, r3, #16777216	; 0x1000000
    f8aa:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    f8ac:	ldr	r3, [r2, #0]
    f8ae:	orr.w	r3, r3, #1
    f8b2:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    f8b4:	ldr	r6, [r5, #0]
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    f8b6:	cbnz	r4, f8be <software_isr+0x26>
    f8b8:	b.n	f8e6 <software_isr+0x4e>
    f8ba:	ldr	r4, [r4, #20]
    f8bc:	cbz	r4, f8e6 <software_isr+0x4e>
		if (p->active) {
    f8be:	ldrb	r3, [r4, #8]
    f8c0:	cmp	r3, #0
    f8c2:	beq.n	f8ba <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    f8c4:	ldr	r3, [r4, #0]
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    f8c6:	ldr	r7, [r5, #0]
			p->update();
    f8c8:	ldr	r3, [r3, #0]
    f8ca:	mov	r0, r4
    f8cc:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    f8ce:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    f8d0:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    f8d2:	subs	r3, r3, r7
    f8d4:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    f8d6:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    f8d8:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    f8da:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    f8dc:	it	hi
    f8de:	strhhi	r2, [r4, #6]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    f8e0:	ldr	r4, [r4, #20]
    f8e2:	cmp	r4, #0
    f8e4:	bne.n	f8be <software_isr+0x26>
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    f8e6:	ldr	r3, [pc, #40]	; (f910 <software_isr+0x78>)
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    f8e8:	ldr	r2, [pc, #40]	; (f914 <software_isr+0x7c>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    f8ea:	ldr	r3, [r3, #0]
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    f8ec:	ldrh	r0, [r2, #0]
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    f8ee:	ldr	r4, [pc, #40]	; (f918 <software_isr+0x80>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    f8f0:	subs	r3, r3, r6
    f8f2:	lsrs	r3, r3, #4
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    f8f4:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    f8f6:	cmp	r3, r0
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    f8f8:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    f8fa:	bls.n	f900 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    f8fc:	strh	r1, [r2, #0]
    f8fe:	pop	{r3, r4, r5, r6, r7, pc}
    f900:	pop	{r3, r4, r5, r6, r7, pc}
    f902:	nop
    f904:	.word	0xe000edfc
    f908:	.word	0xe0001000
    f90c:	.word	0x20007144
    f910:	.word	0xe0001004
    f914:	.word	0x20007148
    f918:	.word	0x2000714a

0000f91c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    f91c:	bx	lr
    f91e:	nop

0000f920 <operator new(unsigned int)>:
    f920:	b.w	10658 <malloc>

0000f924 <operator delete(void*, unsigned int)>:
    f924:	b.w	10668 <free>

0000f928 <__aeabi_atexit>:
    f928:	mov	r3, r1
    f92a:	mov	r1, r0
    f92c:	mov	r0, r3
    f92e:	b.w	105cc <__cxa_atexit>
    f932:	nop

0000f934 <__aeabi_drsub>:
    f934:	eor.w	r1, r1, #2147483648	; 0x80000000
    f938:	b.n	f940 <__adddf3>
    f93a:	nop

0000f93c <__aeabi_dsub>:
    f93c:	eor.w	r3, r3, #2147483648	; 0x80000000

0000f940 <__adddf3>:
    f940:	push	{r4, r5, lr}
    f942:	mov.w	r4, r1, lsl #1
    f946:	mov.w	r5, r3, lsl #1
    f94a:	teq	r4, r5
    f94e:	it	eq
    f950:	teqeq	r0, r2
    f954:	itttt	ne
    f956:	orrsne.w	ip, r4, r0
    f95a:	orrsne.w	ip, r5, r2
    f95e:	mvnsne.w	ip, r4, asr #21
    f962:	mvnsne.w	ip, r5, asr #21
    f966:	beq.w	fb2e <__adddf3+0x1ee>
    f96a:	mov.w	r4, r4, lsr #21
    f96e:	rsbs	r5, r4, r5, lsr #21
    f972:	it	lt
    f974:	neglt	r5, r5
    f976:	ble.n	f992 <__adddf3+0x52>
    f978:	add	r4, r5
    f97a:	eor.w	r2, r0, r2
    f97e:	eor.w	r3, r1, r3
    f982:	eor.w	r0, r2, r0
    f986:	eor.w	r1, r3, r1
    f98a:	eor.w	r2, r0, r2
    f98e:	eor.w	r3, r1, r3
    f992:	cmp	r5, #54	; 0x36
    f994:	it	hi
    f996:	pophi	{r4, r5, pc}
    f998:	tst.w	r1, #2147483648	; 0x80000000
    f99c:	mov.w	r1, r1, lsl #12
    f9a0:	mov.w	ip, #1048576	; 0x100000
    f9a4:	orr.w	r1, ip, r1, lsr #12
    f9a8:	beq.n	f9b0 <__adddf3+0x70>
    f9aa:	negs	r0, r0
    f9ac:	sbc.w	r1, r1, r1, lsl #1
    f9b0:	tst.w	r3, #2147483648	; 0x80000000
    f9b4:	mov.w	r3, r3, lsl #12
    f9b8:	orr.w	r3, ip, r3, lsr #12
    f9bc:	beq.n	f9c4 <__adddf3+0x84>
    f9be:	negs	r2, r2
    f9c0:	sbc.w	r3, r3, r3, lsl #1
    f9c4:	teq	r4, r5
    f9c8:	beq.w	fb1a <__adddf3+0x1da>
    f9cc:	sub.w	r4, r4, #1
    f9d0:	rsbs	lr, r5, #32
    f9d4:	blt.n	f9f2 <__adddf3+0xb2>
    f9d6:	lsl.w	ip, r2, lr
    f9da:	lsr.w	r2, r2, r5
    f9de:	adds	r0, r0, r2
    f9e0:	adc.w	r1, r1, #0
    f9e4:	lsl.w	r2, r3, lr
    f9e8:	adds	r0, r0, r2
    f9ea:	asr.w	r3, r3, r5
    f9ee:	adcs	r1, r3
    f9f0:	b.n	fa10 <__adddf3+0xd0>
    f9f2:	sub.w	r5, r5, #32
    f9f6:	add.w	lr, lr, #32
    f9fa:	cmp	r2, #1
    f9fc:	lsl.w	ip, r3, lr
    fa00:	it	cs
    fa02:	orrcs.w	ip, ip, #2
    fa06:	asr.w	r3, r3, r5
    fa0a:	adds	r0, r0, r3
    fa0c:	adcs.w	r1, r1, r3, asr #31
    fa10:	and.w	r5, r1, #2147483648	; 0x80000000
    fa14:	bpl.n	fa26 <__adddf3+0xe6>
    fa16:	mov.w	lr, #0
    fa1a:	rsbs	ip, ip, #0
    fa1e:	sbcs.w	r0, lr, r0
    fa22:	sbc.w	r1, lr, r1
    fa26:	cmp.w	r1, #1048576	; 0x100000
    fa2a:	bcc.n	fa64 <__adddf3+0x124>
    fa2c:	cmp.w	r1, #2097152	; 0x200000
    fa30:	bcc.n	fa4c <__adddf3+0x10c>
    fa32:	lsrs	r1, r1, #1
    fa34:	movs.w	r0, r0, rrx
    fa38:	mov.w	ip, ip, rrx
    fa3c:	add.w	r4, r4, #1
    fa40:	mov.w	r2, r4, lsl #21
    fa44:	cmn.w	r2, #4194304	; 0x400000
    fa48:	bcs.w	fb80 <__adddf3+0x240>
    fa4c:	cmp.w	ip, #2147483648	; 0x80000000
    fa50:	it	eq
    fa52:	movseq.w	ip, r0, lsr #1
    fa56:	adcs.w	r0, r0, #0
    fa5a:	adc.w	r1, r1, r4, lsl #20
    fa5e:	orr.w	r1, r1, r5
    fa62:	pop	{r4, r5, pc}
    fa64:	movs.w	ip, ip, lsl #1
    fa68:	adcs	r0, r0
    fa6a:	adc.w	r1, r1, r1
    fa6e:	tst.w	r1, #1048576	; 0x100000
    fa72:	sub.w	r4, r4, #1
    fa76:	bne.n	fa4c <__adddf3+0x10c>
    fa78:	teq	r1, #0
    fa7c:	itt	eq
    fa7e:	moveq	r1, r0
    fa80:	moveq	r0, #0
    fa82:	clz	r3, r1
    fa86:	it	eq
    fa88:	addeq	r3, #32
    fa8a:	sub.w	r3, r3, #11
    fa8e:	subs.w	r2, r3, #32
    fa92:	bge.n	faae <__adddf3+0x16e>
    fa94:	adds	r2, #12
    fa96:	ble.n	faaa <__adddf3+0x16a>
    fa98:	add.w	ip, r2, #20
    fa9c:	rsb	r2, r2, #12
    faa0:	lsl.w	r0, r1, ip
    faa4:	lsr.w	r1, r1, r2
    faa8:	b.n	fac4 <__adddf3+0x184>
    faaa:	add.w	r2, r2, #20
    faae:	it	le
    fab0:	rsble	ip, r2, #32
    fab4:	lsl.w	r1, r1, r2
    fab8:	lsr.w	ip, r0, ip
    fabc:	itt	le
    fabe:	orrle.w	r1, r1, ip
    fac2:	lslle	r0, r2
    fac4:	subs	r4, r4, r3
    fac6:	ittt	ge
    fac8:	addge.w	r1, r1, r4, lsl #20
    facc:	orrge	r1, r5
    face:	popge	{r4, r5, pc}
    fad0:	mvn.w	r4, r4
    fad4:	subs	r4, #31
    fad6:	bge.n	fb12 <__adddf3+0x1d2>
    fad8:	adds	r4, #12
    fada:	bgt.n	fafa <__adddf3+0x1ba>
    fadc:	add.w	r4, r4, #20
    fae0:	rsb	r2, r4, #32
    fae4:	lsr.w	r0, r0, r4
    fae8:	lsl.w	r3, r1, r2
    faec:	orr.w	r0, r0, r3
    faf0:	lsr.w	r3, r1, r4
    faf4:	orr.w	r1, r5, r3
    faf8:	pop	{r4, r5, pc}
    fafa:	rsb	r4, r4, #12
    fafe:	rsb	r2, r4, #32
    fb02:	lsr.w	r0, r0, r2
    fb06:	lsl.w	r3, r1, r4
    fb0a:	orr.w	r0, r0, r3
    fb0e:	mov	r1, r5
    fb10:	pop	{r4, r5, pc}
    fb12:	lsr.w	r0, r1, r4
    fb16:	mov	r1, r5
    fb18:	pop	{r4, r5, pc}
    fb1a:	teq	r4, #0
    fb1e:	eor.w	r3, r3, #1048576	; 0x100000
    fb22:	itte	eq
    fb24:	eoreq.w	r1, r1, #1048576	; 0x100000
    fb28:	addeq	r4, #1
    fb2a:	subne	r5, #1
    fb2c:	b.n	f9cc <__adddf3+0x8c>
    fb2e:	mvns.w	ip, r4, asr #21
    fb32:	it	ne
    fb34:	mvnsne.w	ip, r5, asr #21
    fb38:	beq.n	fb8e <__adddf3+0x24e>
    fb3a:	teq	r4, r5
    fb3e:	it	eq
    fb40:	teqeq	r0, r2
    fb44:	beq.n	fb52 <__adddf3+0x212>
    fb46:	orrs.w	ip, r4, r0
    fb4a:	itt	eq
    fb4c:	moveq	r1, r3
    fb4e:	moveq	r0, r2
    fb50:	pop	{r4, r5, pc}
    fb52:	teq	r1, r3
    fb56:	ittt	ne
    fb58:	movne	r1, #0
    fb5a:	movne	r0, #0
    fb5c:	popne	{r4, r5, pc}
    fb5e:	movs.w	ip, r4, lsr #21
    fb62:	bne.n	fb70 <__adddf3+0x230>
    fb64:	lsls	r0, r0, #1
    fb66:	adcs	r1, r1
    fb68:	it	cs
    fb6a:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    fb6e:	pop	{r4, r5, pc}
    fb70:	adds.w	r4, r4, #4194304	; 0x400000
    fb74:	itt	cc
    fb76:	addcc.w	r1, r1, #1048576	; 0x100000
    fb7a:	popcc	{r4, r5, pc}
    fb7c:	and.w	r5, r1, #2147483648	; 0x80000000
    fb80:	orr.w	r1, r5, #2130706432	; 0x7f000000
    fb84:	orr.w	r1, r1, #15728640	; 0xf00000
    fb88:	mov.w	r0, #0
    fb8c:	pop	{r4, r5, pc}
    fb8e:	mvns.w	ip, r4, asr #21
    fb92:	itte	ne
    fb94:	movne	r1, r3
    fb96:	movne	r0, r2
    fb98:	mvnseq.w	ip, r5, asr #21
    fb9c:	itt	ne
    fb9e:	movne	r3, r1
    fba0:	movne	r2, r0
    fba2:	orrs.w	r4, r0, r1, lsl #12
    fba6:	itte	eq
    fba8:	orrseq.w	r5, r2, r3, lsl #12
    fbac:	teqeq	r1, r3
    fbb0:	orrne.w	r1, r1, #524288	; 0x80000
    fbb4:	pop	{r4, r5, pc}
    fbb6:	nop

0000fbb8 <__aeabi_ui2d>:
    fbb8:	teq	r0, #0
    fbbc:	itt	eq
    fbbe:	moveq	r1, #0
    fbc0:	bxeq	lr
    fbc2:	push	{r4, r5, lr}
    fbc4:	mov.w	r4, #1024	; 0x400
    fbc8:	add.w	r4, r4, #50	; 0x32
    fbcc:	mov.w	r5, #0
    fbd0:	mov.w	r1, #0
    fbd4:	b.n	fa78 <__adddf3+0x138>
    fbd6:	nop

0000fbd8 <__aeabi_i2d>:
    fbd8:	teq	r0, #0
    fbdc:	itt	eq
    fbde:	moveq	r1, #0
    fbe0:	bxeq	lr
    fbe2:	push	{r4, r5, lr}
    fbe4:	mov.w	r4, #1024	; 0x400
    fbe8:	add.w	r4, r4, #50	; 0x32
    fbec:	ands.w	r5, r0, #2147483648	; 0x80000000
    fbf0:	it	mi
    fbf2:	negmi	r0, r0
    fbf4:	mov.w	r1, #0
    fbf8:	b.n	fa78 <__adddf3+0x138>
    fbfa:	nop

0000fbfc <__aeabi_f2d>:
    fbfc:	lsls	r2, r0, #1
    fbfe:	mov.w	r1, r2, asr #3
    fc02:	mov.w	r1, r1, rrx
    fc06:	mov.w	r0, r2, lsl #28
    fc0a:	itttt	ne
    fc0c:	andsne.w	r3, r2, #4278190080	; 0xff000000
    fc10:	teqne	r3, #4278190080	; 0xff000000
    fc14:	eorne.w	r1, r1, #939524096	; 0x38000000
    fc18:	bxne	lr
    fc1a:	teq	r2, #0
    fc1e:	ite	ne
    fc20:	teqne	r3, #4278190080	; 0xff000000
    fc24:	bxeq	lr
    fc26:	push	{r4, r5, lr}
    fc28:	mov.w	r4, #896	; 0x380
    fc2c:	and.w	r5, r1, #2147483648	; 0x80000000
    fc30:	bic.w	r1, r1, #2147483648	; 0x80000000
    fc34:	b.n	fa78 <__adddf3+0x138>
    fc36:	nop

0000fc38 <__aeabi_ul2d>:
    fc38:	orrs.w	r2, r0, r1
    fc3c:	it	eq
    fc3e:	bxeq	lr
    fc40:	push	{r4, r5, lr}
    fc42:	mov.w	r5, #0
    fc46:	b.n	fc5e <__aeabi_l2d+0x16>

0000fc48 <__aeabi_l2d>:
    fc48:	orrs.w	r2, r0, r1
    fc4c:	it	eq
    fc4e:	bxeq	lr
    fc50:	push	{r4, r5, lr}
    fc52:	ands.w	r5, r1, #2147483648	; 0x80000000
    fc56:	bpl.n	fc5e <__aeabi_l2d+0x16>
    fc58:	negs	r0, r0
    fc5a:	sbc.w	r1, r1, r1, lsl #1
    fc5e:	mov.w	r4, #1024	; 0x400
    fc62:	add.w	r4, r4, #50	; 0x32
    fc66:	movs.w	ip, r1, lsr #22
    fc6a:	beq.w	fa26 <__adddf3+0xe6>
    fc6e:	mov.w	r2, #3
    fc72:	movs.w	ip, ip, lsr #3
    fc76:	it	ne
    fc78:	addne	r2, #3
    fc7a:	movs.w	ip, ip, lsr #3
    fc7e:	it	ne
    fc80:	addne	r2, #3
    fc82:	add.w	r2, r2, ip, lsr #3
    fc86:	rsb	r3, r2, #32
    fc8a:	lsl.w	ip, r0, r3
    fc8e:	lsr.w	r0, r0, r2
    fc92:	lsl.w	lr, r1, r3
    fc96:	orr.w	r0, r0, lr
    fc9a:	lsr.w	r1, r1, r2
    fc9e:	add	r4, r2
    fca0:	b.n	fa26 <__adddf3+0xe6>
    fca2:	nop

0000fca4 <__aeabi_dmul>:
    fca4:	push	{r4, r5, r6, lr}
    fca6:	mov.w	ip, #255	; 0xff
    fcaa:	orr.w	ip, ip, #1792	; 0x700
    fcae:	ands.w	r4, ip, r1, lsr #20
    fcb2:	ittte	ne
    fcb4:	andsne.w	r5, ip, r3, lsr #20
    fcb8:	teqne	r4, ip
    fcbc:	teqne	r5, ip
    fcc0:	bleq	fe80 <__aeabi_dmul+0x1dc>
    fcc4:	add	r4, r5
    fcc6:	eor.w	r6, r1, r3
    fcca:	bic.w	r1, r1, ip, lsl #21
    fcce:	bic.w	r3, r3, ip, lsl #21
    fcd2:	orrs.w	r5, r0, r1, lsl #12
    fcd6:	it	ne
    fcd8:	orrsne.w	r5, r2, r3, lsl #12
    fcdc:	orr.w	r1, r1, #1048576	; 0x100000
    fce0:	orr.w	r3, r3, #1048576	; 0x100000
    fce4:	beq.n	fd58 <__aeabi_dmul+0xb4>
    fce6:	umull	ip, lr, r0, r2
    fcea:	mov.w	r5, #0
    fcee:	umlal	lr, r5, r1, r2
    fcf2:	and.w	r2, r6, #2147483648	; 0x80000000
    fcf6:	umlal	lr, r5, r0, r3
    fcfa:	mov.w	r6, #0
    fcfe:	umlal	r5, r6, r1, r3
    fd02:	teq	ip, #0
    fd06:	it	ne
    fd08:	orrne.w	lr, lr, #1
    fd0c:	sub.w	r4, r4, #255	; 0xff
    fd10:	cmp.w	r6, #512	; 0x200
    fd14:	sbc.w	r4, r4, #768	; 0x300
    fd18:	bcs.n	fd24 <__aeabi_dmul+0x80>
    fd1a:	movs.w	lr, lr, lsl #1
    fd1e:	adcs	r5, r5
    fd20:	adc.w	r6, r6, r6
    fd24:	orr.w	r1, r2, r6, lsl #11
    fd28:	orr.w	r1, r1, r5, lsr #21
    fd2c:	mov.w	r0, r5, lsl #11
    fd30:	orr.w	r0, r0, lr, lsr #21
    fd34:	mov.w	lr, lr, lsl #11
    fd38:	subs.w	ip, r4, #253	; 0xfd
    fd3c:	it	hi
    fd3e:	cmphi.w	ip, #1792	; 0x700
    fd42:	bhi.n	fd82 <__aeabi_dmul+0xde>
    fd44:	cmp.w	lr, #2147483648	; 0x80000000
    fd48:	it	eq
    fd4a:	movseq.w	lr, r0, lsr #1
    fd4e:	adcs.w	r0, r0, #0
    fd52:	adc.w	r1, r1, r4, lsl #20
    fd56:	pop	{r4, r5, r6, pc}
    fd58:	and.w	r6, r6, #2147483648	; 0x80000000
    fd5c:	orr.w	r1, r6, r1
    fd60:	orr.w	r0, r0, r2
    fd64:	eor.w	r1, r1, r3
    fd68:	subs.w	r4, r4, ip, lsr #1
    fd6c:	ittt	gt
    fd6e:	rsbsgt	r5, r4, ip
    fd72:	orrgt.w	r1, r1, r4, lsl #20
    fd76:	popgt	{r4, r5, r6, pc}
    fd78:	orr.w	r1, r1, #1048576	; 0x100000
    fd7c:	mov.w	lr, #0
    fd80:	subs	r4, #1
    fd82:	bgt.w	fedc <__aeabi_dmul+0x238>
    fd86:	cmn.w	r4, #54	; 0x36
    fd8a:	ittt	le
    fd8c:	movle	r0, #0
    fd8e:	andle.w	r1, r1, #2147483648	; 0x80000000
    fd92:	pople	{r4, r5, r6, pc}
    fd94:	rsb	r4, r4, #0
    fd98:	subs	r4, #32
    fd9a:	bge.n	fe08 <__aeabi_dmul+0x164>
    fd9c:	adds	r4, #12
    fd9e:	bgt.n	fdd8 <__aeabi_dmul+0x134>
    fda0:	add.w	r4, r4, #20
    fda4:	rsb	r5, r4, #32
    fda8:	lsl.w	r3, r0, r5
    fdac:	lsr.w	r0, r0, r4
    fdb0:	lsl.w	r2, r1, r5
    fdb4:	orr.w	r0, r0, r2
    fdb8:	and.w	r2, r1, #2147483648	; 0x80000000
    fdbc:	bic.w	r1, r1, #2147483648	; 0x80000000
    fdc0:	adds.w	r0, r0, r3, lsr #31
    fdc4:	lsr.w	r6, r1, r4
    fdc8:	adc.w	r1, r2, r6
    fdcc:	orrs.w	lr, lr, r3, lsl #1
    fdd0:	it	eq
    fdd2:	biceq.w	r0, r0, r3, lsr #31
    fdd6:	pop	{r4, r5, r6, pc}
    fdd8:	rsb	r4, r4, #12
    fddc:	rsb	r5, r4, #32
    fde0:	lsl.w	r3, r0, r4
    fde4:	lsr.w	r0, r0, r5
    fde8:	lsl.w	r2, r1, r4
    fdec:	orr.w	r0, r0, r2
    fdf0:	and.w	r1, r1, #2147483648	; 0x80000000
    fdf4:	adds.w	r0, r0, r3, lsr #31
    fdf8:	adc.w	r1, r1, #0
    fdfc:	orrs.w	lr, lr, r3, lsl #1
    fe00:	it	eq
    fe02:	biceq.w	r0, r0, r3, lsr #31
    fe06:	pop	{r4, r5, r6, pc}
    fe08:	rsb	r5, r4, #32
    fe0c:	lsl.w	r2, r0, r5
    fe10:	orr.w	lr, lr, r2
    fe14:	lsr.w	r3, r0, r4
    fe18:	lsl.w	r2, r1, r5
    fe1c:	orr.w	r3, r3, r2
    fe20:	lsr.w	r0, r1, r4
    fe24:	and.w	r1, r1, #2147483648	; 0x80000000
    fe28:	lsr.w	r2, r1, r4
    fe2c:	bic.w	r0, r0, r2
    fe30:	add.w	r0, r0, r3, lsr #31
    fe34:	orrs.w	lr, lr, r3, lsl #1
    fe38:	it	eq
    fe3a:	biceq.w	r0, r0, r3, lsr #31
    fe3e:	pop	{r4, r5, r6, pc}
    fe40:	teq	r4, #0
    fe44:	bne.n	fe66 <__aeabi_dmul+0x1c2>
    fe46:	and.w	r6, r1, #2147483648	; 0x80000000
    fe4a:	lsls	r0, r0, #1
    fe4c:	adc.w	r1, r1, r1
    fe50:	tst.w	r1, #1048576	; 0x100000
    fe54:	it	eq
    fe56:	subeq	r4, #1
    fe58:	beq.n	fe4a <__aeabi_dmul+0x1a6>
    fe5a:	orr.w	r1, r1, r6
    fe5e:	teq	r5, #0
    fe62:	it	ne
    fe64:	bxne	lr
    fe66:	and.w	r6, r3, #2147483648	; 0x80000000
    fe6a:	lsls	r2, r2, #1
    fe6c:	adc.w	r3, r3, r3
    fe70:	tst.w	r3, #1048576	; 0x100000
    fe74:	it	eq
    fe76:	subeq	r5, #1
    fe78:	beq.n	fe6a <__aeabi_dmul+0x1c6>
    fe7a:	orr.w	r3, r3, r6
    fe7e:	bx	lr
    fe80:	teq	r4, ip
    fe84:	and.w	r5, ip, r3, lsr #20
    fe88:	it	ne
    fe8a:	teqne	r5, ip
    fe8e:	beq.n	feaa <__aeabi_dmul+0x206>
    fe90:	orrs.w	r6, r0, r1, lsl #1
    fe94:	it	ne
    fe96:	orrsne.w	r6, r2, r3, lsl #1
    fe9a:	bne.n	fe40 <__aeabi_dmul+0x19c>
    fe9c:	eor.w	r1, r1, r3
    fea0:	and.w	r1, r1, #2147483648	; 0x80000000
    fea4:	mov.w	r0, #0
    fea8:	pop	{r4, r5, r6, pc}
    feaa:	orrs.w	r6, r0, r1, lsl #1
    feae:	itte	eq
    feb0:	moveq	r0, r2
    feb2:	moveq	r1, r3
    feb4:	orrsne.w	r6, r2, r3, lsl #1
    feb8:	beq.n	feee <__aeabi_dmul+0x24a>
    feba:	teq	r4, ip
    febe:	bne.n	fec6 <__aeabi_dmul+0x222>
    fec0:	orrs.w	r6, r0, r1, lsl #12
    fec4:	bne.n	feee <__aeabi_dmul+0x24a>
    fec6:	teq	r5, ip
    feca:	bne.n	fed8 <__aeabi_dmul+0x234>
    fecc:	orrs.w	r6, r2, r3, lsl #12
    fed0:	itt	ne
    fed2:	movne	r0, r2
    fed4:	movne	r1, r3
    fed6:	bne.n	feee <__aeabi_dmul+0x24a>
    fed8:	eor.w	r1, r1, r3
    fedc:	and.w	r1, r1, #2147483648	; 0x80000000
    fee0:	orr.w	r1, r1, #2130706432	; 0x7f000000
    fee4:	orr.w	r1, r1, #15728640	; 0xf00000
    fee8:	mov.w	r0, #0
    feec:	pop	{r4, r5, r6, pc}
    feee:	orr.w	r1, r1, #2130706432	; 0x7f000000
    fef2:	orr.w	r1, r1, #16252928	; 0xf80000
    fef6:	pop	{r4, r5, r6, pc}

0000fef8 <__aeabi_ddiv>:
    fef8:	push	{r4, r5, r6, lr}
    fefa:	mov.w	ip, #255	; 0xff
    fefe:	orr.w	ip, ip, #1792	; 0x700
    ff02:	ands.w	r4, ip, r1, lsr #20
    ff06:	ittte	ne
    ff08:	andsne.w	r5, ip, r3, lsr #20
    ff0c:	teqne	r4, ip
    ff10:	teqne	r5, ip
    ff14:	bleq	10066 <__aeabi_ddiv+0x16e>
    ff18:	sub.w	r4, r4, r5
    ff1c:	eor.w	lr, r1, r3
    ff20:	orrs.w	r5, r2, r3, lsl #12
    ff24:	mov.w	r1, r1, lsl #12
    ff28:	beq.w	1003c <__aeabi_ddiv+0x144>
    ff2c:	mov.w	r3, r3, lsl #12
    ff30:	mov.w	r5, #268435456	; 0x10000000
    ff34:	orr.w	r3, r5, r3, lsr #4
    ff38:	orr.w	r3, r3, r2, lsr #24
    ff3c:	mov.w	r2, r2, lsl #8
    ff40:	orr.w	r5, r5, r1, lsr #4
    ff44:	orr.w	r5, r5, r0, lsr #24
    ff48:	mov.w	r6, r0, lsl #8
    ff4c:	and.w	r1, lr, #2147483648	; 0x80000000
    ff50:	cmp	r5, r3
    ff52:	it	eq
    ff54:	cmpeq	r6, r2
    ff56:	adc.w	r4, r4, #253	; 0xfd
    ff5a:	add.w	r4, r4, #768	; 0x300
    ff5e:	bcs.n	ff66 <__aeabi_ddiv+0x6e>
    ff60:	lsrs	r3, r3, #1
    ff62:	mov.w	r2, r2, rrx
    ff66:	subs	r6, r6, r2
    ff68:	sbc.w	r5, r5, r3
    ff6c:	lsrs	r3, r3, #1
    ff6e:	mov.w	r2, r2, rrx
    ff72:	mov.w	r0, #1048576	; 0x100000
    ff76:	mov.w	ip, #524288	; 0x80000
    ff7a:	subs.w	lr, r6, r2
    ff7e:	sbcs.w	lr, r5, r3
    ff82:	ittt	cs
    ff84:	subcs	r6, r6, r2
    ff86:	movcs	r5, lr
    ff88:	orrcs.w	r0, r0, ip
    ff8c:	lsrs	r3, r3, #1
    ff8e:	mov.w	r2, r2, rrx
    ff92:	subs.w	lr, r6, r2
    ff96:	sbcs.w	lr, r5, r3
    ff9a:	ittt	cs
    ff9c:	subcs	r6, r6, r2
    ff9e:	movcs	r5, lr
    ffa0:	orrcs.w	r0, r0, ip, lsr #1
    ffa4:	lsrs	r3, r3, #1
    ffa6:	mov.w	r2, r2, rrx
    ffaa:	subs.w	lr, r6, r2
    ffae:	sbcs.w	lr, r5, r3
    ffb2:	ittt	cs
    ffb4:	subcs	r6, r6, r2
    ffb6:	movcs	r5, lr
    ffb8:	orrcs.w	r0, r0, ip, lsr #2
    ffbc:	lsrs	r3, r3, #1
    ffbe:	mov.w	r2, r2, rrx
    ffc2:	subs.w	lr, r6, r2
    ffc6:	sbcs.w	lr, r5, r3
    ffca:	ittt	cs
    ffcc:	subcs	r6, r6, r2
    ffce:	movcs	r5, lr
    ffd0:	orrcs.w	r0, r0, ip, lsr #3
    ffd4:	orrs.w	lr, r5, r6
    ffd8:	beq.n	1000c <__aeabi_ddiv+0x114>
    ffda:	mov.w	r5, r5, lsl #4
    ffde:	orr.w	r5, r5, r6, lsr #28
    ffe2:	mov.w	r6, r6, lsl #4
    ffe6:	mov.w	r3, r3, lsl #3
    ffea:	orr.w	r3, r3, r2, lsr #29
    ffee:	mov.w	r2, r2, lsl #3
    fff2:	movs.w	ip, ip, lsr #4
    fff6:	bne.n	ff7a <__aeabi_ddiv+0x82>
    fff8:	tst.w	r1, #1048576	; 0x100000
    fffc:	bne.n	10016 <__aeabi_ddiv+0x11e>
    fffe:	orr.w	r1, r1, r0
   10002:	mov.w	r0, #0
   10006:	mov.w	ip, #2147483648	; 0x80000000
   1000a:	b.n	ff7a <__aeabi_ddiv+0x82>
   1000c:	tst.w	r1, #1048576	; 0x100000
   10010:	itt	eq
   10012:	orreq	r1, r0
   10014:	moveq	r0, #0
   10016:	subs.w	ip, r4, #253	; 0xfd
   1001a:	it	hi
   1001c:	cmphi.w	ip, #1792	; 0x700
   10020:	bhi.w	fd82 <__aeabi_dmul+0xde>
   10024:	subs.w	ip, r5, r3
   10028:	itt	eq
   1002a:	subseq.w	ip, r6, r2
   1002e:	movseq.w	ip, r0, lsr #1
   10032:	adcs.w	r0, r0, #0
   10036:	adc.w	r1, r1, r4, lsl #20
   1003a:	pop	{r4, r5, r6, pc}
   1003c:	and.w	lr, lr, #2147483648	; 0x80000000
   10040:	orr.w	r1, lr, r1, lsr #12
   10044:	adds.w	r4, r4, ip, lsr #1
   10048:	ittt	gt
   1004a:	rsbsgt	r5, r4, ip
   1004e:	orrgt.w	r1, r1, r4, lsl #20
   10052:	popgt	{r4, r5, r6, pc}
   10054:	orr.w	r1, r1, #1048576	; 0x100000
   10058:	mov.w	lr, #0
   1005c:	subs	r4, #1
   1005e:	b.n	fd82 <__aeabi_dmul+0xde>
   10060:	orr.w	lr, r5, r6
   10064:	b.n	fd82 <__aeabi_dmul+0xde>
   10066:	and.w	r5, ip, r3, lsr #20
   1006a:	teq	r4, ip
   1006e:	it	eq
   10070:	teqeq	r5, ip
   10074:	beq.w	feee <__aeabi_dmul+0x24a>
   10078:	teq	r4, ip
   1007c:	bne.n	10094 <__aeabi_ddiv+0x19c>
   1007e:	orrs.w	r4, r0, r1, lsl #12
   10082:	bne.w	feee <__aeabi_dmul+0x24a>
   10086:	teq	r5, ip
   1008a:	bne.w	fed8 <__aeabi_dmul+0x234>
   1008e:	mov	r0, r2
   10090:	mov	r1, r3
   10092:	b.n	feee <__aeabi_dmul+0x24a>
   10094:	teq	r5, ip
   10098:	bne.n	100a8 <__aeabi_ddiv+0x1b0>
   1009a:	orrs.w	r5, r2, r3, lsl #12
   1009e:	beq.w	fe9c <__aeabi_dmul+0x1f8>
   100a2:	mov	r0, r2
   100a4:	mov	r1, r3
   100a6:	b.n	feee <__aeabi_dmul+0x24a>
   100a8:	orrs.w	r6, r0, r1, lsl #1
   100ac:	it	ne
   100ae:	orrsne.w	r6, r2, r3, lsl #1
   100b2:	bne.w	fe40 <__aeabi_dmul+0x19c>
   100b6:	orrs.w	r4, r0, r1, lsl #1
   100ba:	bne.w	fed8 <__aeabi_dmul+0x234>
   100be:	orrs.w	r5, r2, r3, lsl #1
   100c2:	bne.w	fe9c <__aeabi_dmul+0x1f8>
   100c6:	b.n	feee <__aeabi_dmul+0x24a>

000100c8 <__gedf2>:
   100c8:	mov.w	ip, #4294967295
   100cc:	b.n	100dc <__cmpdf2+0x4>
   100ce:	nop

000100d0 <__ledf2>:
   100d0:	mov.w	ip, #1
   100d4:	b.n	100dc <__cmpdf2+0x4>
   100d6:	nop

000100d8 <__cmpdf2>:
   100d8:	mov.w	ip, #1
   100dc:	str.w	ip, [sp, #-4]!
   100e0:	mov.w	ip, r1, lsl #1
   100e4:	mvns.w	ip, ip, asr #21
   100e8:	mov.w	ip, r3, lsl #1
   100ec:	it	ne
   100ee:	mvnsne.w	ip, ip, asr #21
   100f2:	beq.n	1012c <__cmpdf2+0x54>
   100f4:	add	sp, #4
   100f6:	orrs.w	ip, r0, r1, lsl #1
   100fa:	ite	eq
   100fc:	orrseq.w	ip, r2, r3, lsl #1
   10100:	teqne	r1, r3
   10104:	ittt	eq
   10106:	teqeq	r0, r2
   1010a:	moveq	r0, #0
   1010c:	bxeq	lr
   1010e:	cmn.w	r0, #0
   10112:	teq	r1, r3
   10116:	it	pl
   10118:	cmppl	r1, r3
   1011a:	it	eq
   1011c:	cmpeq	r0, r2
   1011e:	ite	cs
   10120:	asrcs	r0, r3, #31
   10122:	mvncc.w	r0, r3, asr #31
   10126:	orr.w	r0, r0, #1
   1012a:	bx	lr
   1012c:	mov.w	ip, r1, lsl #1
   10130:	mvns.w	ip, ip, asr #21
   10134:	bne.n	1013c <__cmpdf2+0x64>
   10136:	orrs.w	ip, r0, r1, lsl #12
   1013a:	bne.n	1014c <__cmpdf2+0x74>
   1013c:	mov.w	ip, r3, lsl #1
   10140:	mvns.w	ip, ip, asr #21
   10144:	bne.n	100f4 <__cmpdf2+0x1c>
   10146:	orrs.w	ip, r2, r3, lsl #12
   1014a:	beq.n	100f4 <__cmpdf2+0x1c>
   1014c:	ldr.w	r0, [sp], #4
   10150:	bx	lr
   10152:	nop

00010154 <__aeabi_cdrcmple>:
   10154:	mov	ip, r0
   10156:	mov	r0, r2
   10158:	mov	r2, ip
   1015a:	mov	ip, r1
   1015c:	mov	r1, r3
   1015e:	mov	r3, ip
   10160:	b.n	10164 <__aeabi_cdcmpeq>
   10162:	nop

00010164 <__aeabi_cdcmpeq>:
   10164:	push	{r0, lr}
   10166:	bl	100d8 <__cmpdf2>
   1016a:	cmp	r0, #0
   1016c:	it	mi
   1016e:	cmnmi.w	r0, #0
   10172:	pop	{r0, pc}

00010174 <__aeabi_dcmpeq>:
   10174:	str.w	lr, [sp, #-8]!
   10178:	bl	10164 <__aeabi_cdcmpeq>
   1017c:	ite	eq
   1017e:	moveq	r0, #1
   10180:	movne	r0, #0
   10182:	ldr.w	pc, [sp], #8
   10186:	nop

00010188 <__aeabi_dcmplt>:
   10188:	str.w	lr, [sp, #-8]!
   1018c:	bl	10164 <__aeabi_cdcmpeq>
   10190:	ite	cc
   10192:	movcc	r0, #1
   10194:	movcs	r0, #0
   10196:	ldr.w	pc, [sp], #8
   1019a:	nop

0001019c <__aeabi_dcmple>:
   1019c:	str.w	lr, [sp, #-8]!
   101a0:	bl	10164 <__aeabi_cdcmpeq>
   101a4:	ite	ls
   101a6:	movls	r0, #1
   101a8:	movhi	r0, #0
   101aa:	ldr.w	pc, [sp], #8
   101ae:	nop

000101b0 <__aeabi_dcmpge>:
   101b0:	str.w	lr, [sp, #-8]!
   101b4:	bl	10154 <__aeabi_cdrcmple>
   101b8:	ite	ls
   101ba:	movls	r0, #1
   101bc:	movhi	r0, #0
   101be:	ldr.w	pc, [sp], #8
   101c2:	nop

000101c4 <__aeabi_dcmpgt>:
   101c4:	str.w	lr, [sp, #-8]!
   101c8:	bl	10154 <__aeabi_cdrcmple>
   101cc:	ite	cc
   101ce:	movcc	r0, #1
   101d0:	movcs	r0, #0
   101d2:	ldr.w	pc, [sp], #8
   101d6:	nop

000101d8 <__aeabi_dcmpun>:
   101d8:	mov.w	ip, r1, lsl #1
   101dc:	mvns.w	ip, ip, asr #21
   101e0:	bne.n	101e8 <__aeabi_dcmpun+0x10>
   101e2:	orrs.w	ip, r0, r1, lsl #12
   101e6:	bne.n	101fe <__aeabi_dcmpun+0x26>
   101e8:	mov.w	ip, r3, lsl #1
   101ec:	mvns.w	ip, ip, asr #21
   101f0:	bne.n	101f8 <__aeabi_dcmpun+0x20>
   101f2:	orrs.w	ip, r2, r3, lsl #12
   101f6:	bne.n	101fe <__aeabi_dcmpun+0x26>
   101f8:	mov.w	r0, #0
   101fc:	bx	lr
   101fe:	mov.w	r0, #1
   10202:	bx	lr

00010204 <__aeabi_d2iz>:
   10204:	mov.w	r2, r1, lsl #1
   10208:	adds.w	r2, r2, #2097152	; 0x200000
   1020c:	bcs.n	1023a <__aeabi_d2iz+0x36>
   1020e:	bpl.n	10234 <__aeabi_d2iz+0x30>
   10210:	mvn.w	r3, #992	; 0x3e0
   10214:	subs.w	r2, r3, r2, asr #21
   10218:	bls.n	10240 <__aeabi_d2iz+0x3c>
   1021a:	mov.w	r3, r1, lsl #11
   1021e:	orr.w	r3, r3, #2147483648	; 0x80000000
   10222:	orr.w	r3, r3, r0, lsr #21
   10226:	tst.w	r1, #2147483648	; 0x80000000
   1022a:	lsr.w	r0, r3, r2
   1022e:	it	ne
   10230:	negne	r0, r0
   10232:	bx	lr
   10234:	mov.w	r0, #0
   10238:	bx	lr
   1023a:	orrs.w	r0, r0, r1, lsl #12
   1023e:	bne.n	1024c <__aeabi_d2iz+0x48>
   10240:	ands.w	r0, r1, #2147483648	; 0x80000000
   10244:	it	eq
   10246:	mvneq.w	r0, #2147483648	; 0x80000000
   1024a:	bx	lr
   1024c:	mov.w	r0, #0
   10250:	bx	lr
   10252:	nop

00010254 <__aeabi_uldivmod>:
   10254:	cbnz	r3, 1026c <__aeabi_uldivmod+0x18>
   10256:	cbnz	r2, 1026c <__aeabi_uldivmod+0x18>
   10258:	cmp	r1, #0
   1025a:	it	eq
   1025c:	cmpeq	r0, #0
   1025e:	itt	ne
   10260:	movne.w	r1, #4294967295
   10264:	movne.w	r0, #4294967295
   10268:	b.w	10568 <__aeabi_idiv0>
   1026c:	sub.w	ip, sp, #8
   10270:	strd	ip, lr, [sp, #-16]!
   10274:	bl	10284 <__udivmoddi4>
   10278:	ldr.w	lr, [sp, #4]
   1027c:	ldrd	r2, r3, [sp, #8]
   10280:	add	sp, #16
   10282:	bx	lr

00010284 <__udivmoddi4>:
   10284:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10288:	mov	ip, r1
   1028a:	mov	r6, r1
   1028c:	mov	r4, r0
   1028e:	ldr	r5, [sp, #32]
   10290:	cmp	r3, #0
   10292:	bne.n	10336 <__udivmoddi4+0xb2>
   10294:	cmp	r2, r1
   10296:	mov	r7, r2
   10298:	bls.n	10374 <__udivmoddi4+0xf0>
   1029a:	clz	lr, r2
   1029e:	cmp.w	lr, #0
   102a2:	beq.n	102bc <__udivmoddi4+0x38>
   102a4:	rsb	r4, lr, #32
   102a8:	lsr.w	r4, r0, r4
   102ac:	lsl.w	r6, r1, lr
   102b0:	orr.w	ip, r4, r6
   102b4:	lsl.w	r7, r2, lr
   102b8:	lsl.w	r4, r0, lr
   102bc:	mov.w	r9, r7, lsr #16
   102c0:	lsrs	r2, r4, #16
   102c2:	udiv	r0, ip, r9
   102c6:	uxth.w	r8, r7
   102ca:	mls	r6, r9, r0, ip
   102ce:	orr.w	r6, r2, r6, lsl #16
   102d2:	mul.w	r3, r0, r8
   102d6:	cmp	r3, r6
   102d8:	bls.n	102ee <__udivmoddi4+0x6a>
   102da:	adds	r6, r6, r7
   102dc:	add.w	r2, r0, #4294967295
   102e0:	bcs.w	10528 <__udivmoddi4+0x2a4>
   102e4:	cmp	r3, r6
   102e6:	bls.w	10528 <__udivmoddi4+0x2a4>
   102ea:	subs	r0, #2
   102ec:	add	r6, r7
   102ee:	subs	r6, r6, r3
   102f0:	uxth	r2, r4
   102f2:	udiv	r3, r6, r9
   102f6:	mls	r6, r9, r3, r6
   102fa:	orr.w	r4, r2, r6, lsl #16
   102fe:	mul.w	r8, r3, r8
   10302:	cmp	r8, r4
   10304:	bls.n	1031a <__udivmoddi4+0x96>
   10306:	adds	r4, r4, r7
   10308:	add.w	r2, r3, #4294967295
   1030c:	bcs.w	10524 <__udivmoddi4+0x2a0>
   10310:	cmp	r8, r4
   10312:	bls.w	10524 <__udivmoddi4+0x2a0>
   10316:	subs	r3, #2
   10318:	add	r4, r7
   1031a:	rsb	r4, r8, r4
   1031e:	orr.w	r0, r3, r0, lsl #16
   10322:	movs	r1, #0
   10324:	cmp	r5, #0
   10326:	beq.n	103ee <__udivmoddi4+0x16a>
   10328:	lsr.w	r4, r4, lr
   1032c:	movs	r3, #0
   1032e:	str	r4, [r5, #0]
   10330:	str	r3, [r5, #4]
   10332:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10336:	cmp	r3, r1
   10338:	bls.n	1034a <__udivmoddi4+0xc6>
   1033a:	cmp	r5, #0
   1033c:	beq.n	103ea <__udivmoddi4+0x166>
   1033e:	movs	r1, #0
   10340:	stmia.w	r5, {r0, r6}
   10344:	mov	r0, r1
   10346:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1034a:	clz	r1, r3
   1034e:	cmp	r1, #0
   10350:	bne.w	10474 <__udivmoddi4+0x1f0>
   10354:	cmp	r3, r6
   10356:	bcc.n	1035e <__udivmoddi4+0xda>
   10358:	cmp	r2, r0
   1035a:	bhi.w	1054e <__udivmoddi4+0x2ca>
   1035e:	subs	r4, r0, r2
   10360:	sbc.w	r6, r6, r3
   10364:	movs	r0, #1
   10366:	mov	ip, r6
   10368:	cmp	r5, #0
   1036a:	beq.n	103ee <__udivmoddi4+0x16a>
   1036c:	stmia.w	r5, {r4, ip}
   10370:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10374:	cbnz	r2, 1037c <__udivmoddi4+0xf8>
   10376:	movs	r7, #1
   10378:	udiv	r7, r7, r2
   1037c:	clz	lr, r7
   10380:	cmp.w	lr, #0
   10384:	bne.n	103f2 <__udivmoddi4+0x16e>
   10386:	subs	r3, r6, r7
   10388:	mov.w	r8, r7, lsr #16
   1038c:	uxth.w	ip, r7
   10390:	movs	r1, #1
   10392:	udiv	r0, r3, r8
   10396:	lsrs	r2, r4, #16
   10398:	mls	r6, r8, r0, r3
   1039c:	orr.w	r6, r2, r6, lsl #16
   103a0:	mul.w	r3, ip, r0
   103a4:	cmp	r3, r6
   103a6:	bls.n	103b8 <__udivmoddi4+0x134>
   103a8:	adds	r6, r6, r7
   103aa:	add.w	r2, r0, #4294967295
   103ae:	bcs.n	103b6 <__udivmoddi4+0x132>
   103b0:	cmp	r3, r6
   103b2:	bhi.w	10552 <__udivmoddi4+0x2ce>
   103b6:	mov	r0, r2
   103b8:	subs	r6, r6, r3
   103ba:	uxth	r2, r4
   103bc:	udiv	r3, r6, r8
   103c0:	mls	r6, r8, r3, r6
   103c4:	orr.w	r4, r2, r6, lsl #16
   103c8:	mul.w	ip, ip, r3
   103cc:	cmp	ip, r4
   103ce:	bls.n	103e0 <__udivmoddi4+0x15c>
   103d0:	adds	r4, r4, r7
   103d2:	add.w	r2, r3, #4294967295
   103d6:	bcs.n	103de <__udivmoddi4+0x15a>
   103d8:	cmp	ip, r4
   103da:	bhi.w	10548 <__udivmoddi4+0x2c4>
   103de:	mov	r3, r2
   103e0:	rsb	r4, ip, r4
   103e4:	orr.w	r0, r3, r0, lsl #16
   103e8:	b.n	10324 <__udivmoddi4+0xa0>
   103ea:	mov	r1, r5
   103ec:	mov	r0, r5
   103ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   103f2:	rsb	r1, lr, #32
   103f6:	lsl.w	r3, r6, lr
   103fa:	lsl.w	r7, r7, lr
   103fe:	lsr.w	r9, r0, r1
   10402:	mov.w	r8, r7, lsr #16
   10406:	lsrs	r6, r1
   10408:	orr.w	r9, r9, r3
   1040c:	udiv	sl, r6, r8
   10410:	mov.w	r4, r9, lsr #16
   10414:	mls	r6, r8, sl, r6
   10418:	uxth.w	ip, r7
   1041c:	orr.w	r3, r4, r6, lsl #16
   10420:	mul.w	r2, sl, ip
   10424:	cmp	r2, r3
   10426:	lsl.w	r4, r0, lr
   1042a:	bls.n	10442 <__udivmoddi4+0x1be>
   1042c:	adds	r3, r3, r7
   1042e:	add.w	r1, sl, #4294967295
   10432:	bcs.w	10544 <__udivmoddi4+0x2c0>
   10436:	cmp	r2, r3
   10438:	bls.w	10544 <__udivmoddi4+0x2c0>
   1043c:	sub.w	sl, sl, #2
   10440:	add	r3, r7
   10442:	subs	r3, r3, r2
   10444:	uxth.w	r9, r9
   10448:	udiv	r1, r3, r8
   1044c:	mls	r3, r8, r1, r3
   10450:	orr.w	r3, r9, r3, lsl #16
   10454:	mul.w	r6, r1, ip
   10458:	cmp	r6, r3
   1045a:	bls.n	1046c <__udivmoddi4+0x1e8>
   1045c:	adds	r3, r3, r7
   1045e:	add.w	r2, r1, #4294967295
   10462:	bcs.n	1053c <__udivmoddi4+0x2b8>
   10464:	cmp	r6, r3
   10466:	bls.n	1053c <__udivmoddi4+0x2b8>
   10468:	subs	r1, #2
   1046a:	add	r3, r7
   1046c:	subs	r3, r3, r6
   1046e:	orr.w	r1, r1, sl, lsl #16
   10472:	b.n	10392 <__udivmoddi4+0x10e>
   10474:	rsb	lr, r1, #32
   10478:	lsr.w	r4, r2, lr
   1047c:	lsls	r3, r1
   1047e:	orrs	r3, r4
   10480:	lsr.w	r7, r0, lr
   10484:	lsl.w	r4, r6, r1
   10488:	mov.w	ip, r3, lsr #16
   1048c:	lsr.w	r6, r6, lr
   10490:	orrs	r4, r7
   10492:	udiv	r9, r6, ip
   10496:	lsrs	r7, r4, #16
   10498:	mls	r6, ip, r9, r6
   1049c:	uxth.w	r8, r3
   104a0:	orr.w	r6, r7, r6, lsl #16
   104a4:	mul.w	r7, r9, r8
   104a8:	cmp	r7, r6
   104aa:	lsl.w	r2, r2, r1
   104ae:	lsl.w	sl, r0, r1
   104b2:	bls.n	104c6 <__udivmoddi4+0x242>
   104b4:	adds	r6, r6, r3
   104b6:	add.w	r0, r9, #4294967295
   104ba:	bcs.n	10540 <__udivmoddi4+0x2bc>
   104bc:	cmp	r7, r6
   104be:	bls.n	10540 <__udivmoddi4+0x2bc>
   104c0:	sub.w	r9, r9, #2
   104c4:	add	r6, r3
   104c6:	subs	r6, r6, r7
   104c8:	uxth	r0, r4
   104ca:	udiv	r4, r6, ip
   104ce:	mls	r6, ip, r4, r6
   104d2:	orr.w	r7, r0, r6, lsl #16
   104d6:	mul.w	r8, r4, r8
   104da:	cmp	r8, r7
   104dc:	bls.n	104ee <__udivmoddi4+0x26a>
   104de:	adds	r7, r7, r3
   104e0:	add.w	r0, r4, #4294967295
   104e4:	bcs.n	10538 <__udivmoddi4+0x2b4>
   104e6:	cmp	r8, r7
   104e8:	bls.n	10538 <__udivmoddi4+0x2b4>
   104ea:	subs	r4, #2
   104ec:	add	r7, r3
   104ee:	orr.w	r0, r4, r9, lsl #16
   104f2:	rsb	r7, r8, r7
   104f6:	umull	r8, r9, r0, r2
   104fa:	cmp	r7, r9
   104fc:	mov	r4, r8
   104fe:	mov	r6, r9
   10500:	bcc.n	1052c <__udivmoddi4+0x2a8>
   10502:	beq.n	10558 <__udivmoddi4+0x2d4>
   10504:	cbz	r5, 10560 <__udivmoddi4+0x2dc>
   10506:	subs.w	r3, sl, r4
   1050a:	sbc.w	r7, r7, r6
   1050e:	lsl.w	lr, r7, lr
   10512:	lsrs	r3, r1
   10514:	lsrs	r7, r1
   10516:	orr.w	r3, lr, r3
   1051a:	stmia.w	r5, {r3, r7}
   1051e:	movs	r1, #0
   10520:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10524:	mov	r3, r2
   10526:	b.n	1031a <__udivmoddi4+0x96>
   10528:	mov	r0, r2
   1052a:	b.n	102ee <__udivmoddi4+0x6a>
   1052c:	subs.w	r4, r8, r2
   10530:	sbc.w	r6, r9, r3
   10534:	subs	r0, #1
   10536:	b.n	10504 <__udivmoddi4+0x280>
   10538:	mov	r4, r0
   1053a:	b.n	104ee <__udivmoddi4+0x26a>
   1053c:	mov	r1, r2
   1053e:	b.n	1046c <__udivmoddi4+0x1e8>
   10540:	mov	r9, r0
   10542:	b.n	104c6 <__udivmoddi4+0x242>
   10544:	mov	sl, r1
   10546:	b.n	10442 <__udivmoddi4+0x1be>
   10548:	subs	r3, #2
   1054a:	add	r4, r7
   1054c:	b.n	103e0 <__udivmoddi4+0x15c>
   1054e:	mov	r0, r1
   10550:	b.n	10368 <__udivmoddi4+0xe4>
   10552:	subs	r0, #2
   10554:	add	r6, r7
   10556:	b.n	103b8 <__udivmoddi4+0x134>
   10558:	cmp	sl, r8
   1055a:	bcc.n	1052c <__udivmoddi4+0x2a8>
   1055c:	mov	r6, r7
   1055e:	b.n	10504 <__udivmoddi4+0x280>
   10560:	mov	r1, r5
   10562:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10566:	nop

00010568 <__aeabi_idiv0>:
   10568:	bx	lr
   1056a:	nop

0001056c <_calloc_r>:
   1056c:	push	{r4, lr}
   1056e:	mul.w	r1, r2, r1
   10572:	bl	10678 <_malloc_r>
   10576:	mov	r4, r0
   10578:	cbz	r0, 105b2 <_calloc_r+0x46>
   1057a:	ldr.w	r2, [r0, #-4]
   1057e:	bic.w	r2, r2, #3
   10582:	subs	r2, #4
   10584:	cmp	r2, #36	; 0x24
   10586:	bhi.n	105ba <_calloc_r+0x4e>
   10588:	cmp	r2, #19
   1058a:	bls.n	105b6 <_calloc_r+0x4a>
   1058c:	movs	r3, #0
   1058e:	cmp	r2, #27
   10590:	str	r3, [r0, #0]
   10592:	str	r3, [r0, #4]
   10594:	bls.n	105c4 <_calloc_r+0x58>
   10596:	cmp	r2, #36	; 0x24
   10598:	str	r3, [r0, #8]
   1059a:	str	r3, [r0, #12]
   1059c:	iteee	ne
   1059e:	addne.w	r2, r0, #16
   105a2:	streq	r3, [r0, #16]
   105a4:	streq	r3, [r0, #20]
   105a6:	addeq.w	r2, r0, #24
   105aa:	movs	r3, #0
   105ac:	str	r3, [r2, #0]
   105ae:	str	r3, [r2, #4]
   105b0:	str	r3, [r2, #8]
   105b2:	mov	r0, r4
   105b4:	pop	{r4, pc}
   105b6:	mov	r2, r0
   105b8:	b.n	105aa <_calloc_r+0x3e>
   105ba:	movs	r1, #0
   105bc:	bl	10dec <memset>
   105c0:	mov	r0, r4
   105c2:	pop	{r4, pc}
   105c4:	add.w	r2, r0, #8
   105c8:	b.n	105aa <_calloc_r+0x3e>
   105ca:	nop

000105cc <__cxa_atexit>:
   105cc:	mov	r3, r2
   105ce:	mov	r2, r1
   105d0:	mov	r1, r0
   105d2:	movs	r0, #2
   105d4:	b.w	12d50 <__register_exitproc>

000105d8 <fcvtf>:
   105d8:	push	{r4, r5, r6, lr}
   105da:	mov	r4, r0
   105dc:	vmov	r0, s0
   105e0:	mov	r5, r1
   105e2:	mov	r6, r2
   105e4:	bl	fbfc <__aeabi_f2d>
   105e8:	mov	r2, r6
   105ea:	vmov	d0, r0, r1
   105ee:	movs	r3, #0
   105f0:	mov	r1, r5
   105f2:	mov	r0, r4
   105f4:	ldmia.w	sp!, {r4, r5, r6, lr}
   105f8:	b.w	13d74 <fcvtbuf>

000105fc <__errno>:
   105fc:	ldr	r3, [pc, #4]	; (10604 <__errno+0x8>)
   105fe:	ldr	r0, [r3, #0]
   10600:	bx	lr
   10602:	nop
   10604:	.word	0x1fff1098

00010608 <__libc_init_array>:
   10608:	push	{r4, r5, r6, lr}
   1060a:	ldr	r6, [pc, #60]	; (10648 <__libc_init_array+0x40>)
   1060c:	ldr	r5, [pc, #60]	; (1064c <__libc_init_array+0x44>)
   1060e:	subs	r6, r6, r5
   10610:	asrs	r6, r6, #2
   10612:	it	ne
   10614:	movne	r4, #0
   10616:	beq.n	10624 <__libc_init_array+0x1c>
   10618:	adds	r4, #1
   1061a:	ldr.w	r3, [r5], #4
   1061e:	blx	r3
   10620:	cmp	r6, r4
   10622:	bne.n	10618 <__libc_init_array+0x10>
   10624:	ldr	r6, [pc, #40]	; (10650 <__libc_init_array+0x48>)
   10626:	ldr	r5, [pc, #44]	; (10654 <__libc_init_array+0x4c>)
   10628:	subs	r6, r6, r5
   1062a:	bl	154fc <_init>
   1062e:	asrs	r6, r6, #2
   10630:	it	ne
   10632:	movne	r4, #0
   10634:	beq.n	10644 <__libc_init_array+0x3c>
   10636:	adds	r4, #1
   10638:	ldr.w	r3, [r5], #4
   1063c:	blx	r3
   1063e:	cmp	r6, r4
   10640:	bne.n	10636 <__libc_init_array+0x2e>
   10642:	pop	{r4, r5, r6, pc}
   10644:	pop	{r4, r5, r6, pc}
   10646:	nop
   10648:	.word	0x00015508
   1064c:	.word	0x00015508
   10650:	.word	0x0001555c
   10654:	.word	0x00015508

00010658 <malloc>:
   10658:	ldr	r3, [pc, #8]	; (10664 <malloc+0xc>)
   1065a:	mov	r1, r0
   1065c:	ldr	r0, [r3, #0]
   1065e:	b.w	10678 <_malloc_r>
   10662:	nop
   10664:	.word	0x1fff1098

00010668 <free>:
   10668:	ldr	r3, [pc, #8]	; (10674 <free+0xc>)
   1066a:	mov	r1, r0
   1066c:	ldr	r0, [r3, #0]
   1066e:	b.w	13f38 <_free_r>
   10672:	nop
   10674:	.word	0x1fff1098

00010678 <_malloc_r>:
   10678:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1067c:	add.w	r5, r1, #11
   10680:	cmp	r5, #22
   10682:	sub	sp, #12
   10684:	mov	r6, r0
   10686:	bls.w	107c8 <_malloc_r+0x150>
   1068a:	bics.w	r5, r5, #7
   1068e:	bmi.w	10810 <_malloc_r+0x198>
   10692:	cmp	r1, r5
   10694:	bhi.w	10810 <_malloc_r+0x198>
   10698:	bl	10e88 <__malloc_lock>
   1069c:	cmp.w	r5, #504	; 0x1f8
   106a0:	bcc.w	10bdc <_malloc_r+0x564>
   106a4:	lsrs	r3, r5, #9
   106a6:	beq.w	1081e <_malloc_r+0x1a6>
   106aa:	cmp	r3, #4
   106ac:	bhi.w	109b6 <_malloc_r+0x33e>
   106b0:	lsrs	r0, r5, #6
   106b2:	add.w	lr, r0, #57	; 0x39
   106b6:	mov.w	r3, lr, lsl #1
   106ba:	adds	r0, #56	; 0x38
   106bc:	ldr	r7, [pc, #784]	; (109d0 <_malloc_r+0x358>)
   106be:	add.w	r3, r7, r3, lsl #2
   106c2:	sub.w	r1, r3, #8
   106c6:	ldr	r4, [r3, #4]
   106c8:	cmp	r1, r4
   106ca:	bne.n	106dc <_malloc_r+0x64>
   106cc:	b.n	10828 <_malloc_r+0x1b0>
   106ce:	cmp	r2, #0
   106d0:	bge.w	1082c <_malloc_r+0x1b4>
   106d4:	ldr	r4, [r4, #12]
   106d6:	cmp	r1, r4
   106d8:	beq.w	10828 <_malloc_r+0x1b0>
   106dc:	ldr	r3, [r4, #4]
   106de:	bic.w	r3, r3, #3
   106e2:	subs	r2, r3, r5
   106e4:	cmp	r2, #15
   106e6:	ble.n	106ce <_malloc_r+0x56>
   106e8:	ldr	r1, [pc, #740]	; (109d0 <_malloc_r+0x358>)
   106ea:	ldr	r4, [r7, #16]
   106ec:	add.w	lr, r1, #8
   106f0:	cmp	r4, lr
   106f2:	beq.w	10a5c <_malloc_r+0x3e4>
   106f6:	ldr	r3, [r4, #4]
   106f8:	bic.w	r3, r3, #3
   106fc:	subs	r2, r3, r5
   106fe:	cmp	r2, #15
   10700:	bgt.w	10a36 <_malloc_r+0x3be>
   10704:	cmp	r2, #0
   10706:	str.w	lr, [r1, #20]
   1070a:	str.w	lr, [r1, #16]
   1070e:	bge.w	1084e <_malloc_r+0x1d6>
   10712:	cmp.w	r3, #512	; 0x200
   10716:	bcs.w	109e8 <_malloc_r+0x370>
   1071a:	lsrs	r3, r3, #3
   1071c:	add.w	ip, r3, #1
   10720:	movs	r2, #1
   10722:	asrs	r3, r3, #2
   10724:	lsl.w	r3, r2, r3
   10728:	ldr	r2, [r1, #4]
   1072a:	ldr.w	r8, [r1, ip, lsl #3]
   1072e:	str.w	r8, [r4, #8]
   10732:	add.w	r9, r1, ip, lsl #3
   10736:	orrs	r2, r3
   10738:	sub.w	r3, r9, #8
   1073c:	str	r3, [r4, #12]
   1073e:	str	r2, [r1, #4]
   10740:	str.w	r4, [r1, ip, lsl #3]
   10744:	str.w	r4, [r8, #12]
   10748:	asrs	r3, r0, #2
   1074a:	movs	r4, #1
   1074c:	lsls	r4, r3
   1074e:	cmp	r4, r2
   10750:	bhi.w	10868 <_malloc_r+0x1f0>
   10754:	tst	r4, r2
   10756:	bne.n	10766 <_malloc_r+0xee>
   10758:	bic.w	r0, r0, #3
   1075c:	lsls	r4, r4, #1
   1075e:	tst	r4, r2
   10760:	add.w	r0, r0, #4
   10764:	beq.n	1075c <_malloc_r+0xe4>
   10766:	add.w	r9, r7, r0, lsl #3
   1076a:	mov	ip, r9
   1076c:	mov	r8, r0
   1076e:	ldr.w	r1, [ip, #12]
   10772:	cmp	ip, r1
   10774:	bne.n	10786 <_malloc_r+0x10e>
   10776:	b.n	10a60 <_malloc_r+0x3e8>
   10778:	cmp	r2, #0
   1077a:	bge.w	10a80 <_malloc_r+0x408>
   1077e:	ldr	r1, [r1, #12]
   10780:	cmp	ip, r1
   10782:	beq.w	10a60 <_malloc_r+0x3e8>
   10786:	ldr	r3, [r1, #4]
   10788:	bic.w	r3, r3, #3
   1078c:	subs	r2, r3, r5
   1078e:	cmp	r2, #15
   10790:	ble.n	10778 <_malloc_r+0x100>
   10792:	mov	r4, r1
   10794:	ldr.w	ip, [r1, #12]
   10798:	ldr.w	r8, [r4, #8]!
   1079c:	adds	r3, r1, r5
   1079e:	orr.w	r5, r5, #1
   107a2:	str	r5, [r1, #4]
   107a4:	orr.w	r1, r2, #1
   107a8:	str.w	ip, [r8, #12]
   107ac:	mov	r0, r6
   107ae:	str.w	r8, [ip, #8]
   107b2:	str	r3, [r7, #20]
   107b4:	str	r3, [r7, #16]
   107b6:	str.w	lr, [r3, #12]
   107ba:	str.w	lr, [r3, #8]
   107be:	str	r1, [r3, #4]
   107c0:	str	r2, [r3, r2]
   107c2:	bl	10e8c <__malloc_unlock>
   107c6:	b.n	10808 <_malloc_r+0x190>
   107c8:	cmp	r1, #16
   107ca:	bhi.n	10810 <_malloc_r+0x198>
   107cc:	bl	10e88 <__malloc_lock>
   107d0:	movs	r5, #16
   107d2:	movs	r3, #6
   107d4:	movs	r0, #2
   107d6:	ldr	r7, [pc, #504]	; (109d0 <_malloc_r+0x358>)
   107d8:	add.w	r3, r7, r3, lsl #2
   107dc:	sub.w	r2, r3, #8
   107e0:	ldr	r4, [r3, #4]
   107e2:	cmp	r4, r2
   107e4:	beq.w	10a72 <_malloc_r+0x3fa>
   107e8:	ldr	r3, [r4, #4]
   107ea:	ldr	r1, [r4, #12]
   107ec:	ldr	r5, [r4, #8]
   107ee:	bic.w	r3, r3, #3
   107f2:	add	r3, r4
   107f4:	mov	r0, r6
   107f6:	ldr	r2, [r3, #4]
   107f8:	str	r1, [r5, #12]
   107fa:	orr.w	r2, r2, #1
   107fe:	str	r5, [r1, #8]
   10800:	str	r2, [r3, #4]
   10802:	bl	10e8c <__malloc_unlock>
   10806:	adds	r4, #8
   10808:	mov	r0, r4
   1080a:	add	sp, #12
   1080c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10810:	movs	r4, #0
   10812:	movs	r3, #12
   10814:	mov	r0, r4
   10816:	str	r3, [r6, #0]
   10818:	add	sp, #12
   1081a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1081e:	movs	r3, #128	; 0x80
   10820:	mov.w	lr, #64	; 0x40
   10824:	movs	r0, #63	; 0x3f
   10826:	b.n	106bc <_malloc_r+0x44>
   10828:	mov	r0, lr
   1082a:	b.n	106e8 <_malloc_r+0x70>
   1082c:	add	r3, r4
   1082e:	ldr	r1, [r4, #12]
   10830:	ldr	r2, [r3, #4]
   10832:	ldr	r5, [r4, #8]
   10834:	orr.w	r2, r2, #1
   10838:	str	r1, [r5, #12]
   1083a:	mov	r0, r6
   1083c:	str	r5, [r1, #8]
   1083e:	str	r2, [r3, #4]
   10840:	bl	10e8c <__malloc_unlock>
   10844:	adds	r4, #8
   10846:	mov	r0, r4
   10848:	add	sp, #12
   1084a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1084e:	add	r3, r4
   10850:	mov	r0, r6
   10852:	ldr	r2, [r3, #4]
   10854:	orr.w	r2, r2, #1
   10858:	str	r2, [r3, #4]
   1085a:	bl	10e8c <__malloc_unlock>
   1085e:	adds	r4, #8
   10860:	mov	r0, r4
   10862:	add	sp, #12
   10864:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10868:	ldr	r4, [r7, #8]
   1086a:	ldr	r3, [r4, #4]
   1086c:	bic.w	r8, r3, #3
   10870:	cmp	r8, r5
   10872:	bcc.n	1087e <_malloc_r+0x206>
   10874:	rsb	r3, r5, r8
   10878:	cmp	r3, #15
   1087a:	bgt.w	10996 <_malloc_r+0x31e>
   1087e:	ldr	r3, [pc, #340]	; (109d4 <_malloc_r+0x35c>)
   10880:	ldr.w	r9, [pc, #352]	; 109e4 <_malloc_r+0x36c>
   10884:	ldr	r2, [r3, #0]
   10886:	ldr.w	r3, [r9]
   1088a:	adds	r3, #1
   1088c:	add	r2, r5
   1088e:	add.w	sl, r4, r8
   10892:	beq.w	10b56 <_malloc_r+0x4de>
   10896:	add.w	r2, r2, #4096	; 0x1000
   1089a:	adds	r2, #15
   1089c:	bic.w	r2, r2, #4080	; 0xff0
   108a0:	bic.w	r2, r2, #15
   108a4:	mov	r1, r2
   108a6:	mov	r0, r6
   108a8:	str	r2, [sp, #4]
   108aa:	bl	11270 <_sbrk_r>
   108ae:	cmp.w	r0, #4294967295
   108b2:	mov	fp, r0
   108b4:	ldr	r2, [sp, #4]
   108b6:	beq.w	10b6a <_malloc_r+0x4f2>
   108ba:	cmp	sl, r0
   108bc:	bhi.w	10ab8 <_malloc_r+0x440>
   108c0:	ldr	r3, [pc, #276]	; (109d8 <_malloc_r+0x360>)
   108c2:	ldr	r1, [r3, #0]
   108c4:	cmp	sl, fp
   108c6:	add	r1, r2
   108c8:	str	r1, [r3, #0]
   108ca:	beq.w	10b74 <_malloc_r+0x4fc>
   108ce:	ldr.w	r0, [r9]
   108d2:	ldr.w	lr, [pc, #272]	; 109e4 <_malloc_r+0x36c>
   108d6:	adds	r0, #1
   108d8:	ittet	ne
   108da:	rsbne	sl, sl, fp
   108de:	addne	r1, sl
   108e0:	streq.w	fp, [lr]
   108e4:	strne	r1, [r3, #0]
   108e6:	ands.w	r1, fp, #7
   108ea:	beq.w	10b1c <_malloc_r+0x4a4>
   108ee:	rsb	r0, r1, #8
   108f2:	rsb	r1, r1, #4096	; 0x1000
   108f6:	add	fp, r0
   108f8:	adds	r1, #8
   108fa:	add	r2, fp
   108fc:	ubfx	r2, r2, #0, #12
   10900:	rsb	r9, r2, r1
   10904:	mov	r1, r9
   10906:	mov	r0, r6
   10908:	str	r3, [sp, #4]
   1090a:	bl	11270 <_sbrk_r>
   1090e:	adds	r3, r0, #1
   10910:	ldr	r3, [sp, #4]
   10912:	beq.w	10b94 <_malloc_r+0x51c>
   10916:	rsb	r2, fp, r0
   1091a:	add	r2, r9
   1091c:	orr.w	r2, r2, #1
   10920:	ldr	r1, [r3, #0]
   10922:	str.w	fp, [r7, #8]
   10926:	add	r1, r9
   10928:	cmp	r4, r7
   1092a:	str.w	r2, [fp, #4]
   1092e:	str	r1, [r3, #0]
   10930:	ldr.w	r9, [pc, #164]	; 109d8 <_malloc_r+0x360>
   10934:	beq.n	10964 <_malloc_r+0x2ec>
   10936:	cmp.w	r8, #15
   1093a:	bls.w	10b38 <_malloc_r+0x4c0>
   1093e:	ldr	r2, [r4, #4]
   10940:	sub.w	r3, r8, #12
   10944:	bic.w	r3, r3, #7
   10948:	adds	r0, r4, r3
   1094a:	and.w	r2, r2, #1
   1094e:	mov.w	lr, #5
   10952:	orrs	r2, r3
   10954:	cmp	r3, #15
   10956:	str	r2, [r4, #4]
   10958:	str.w	lr, [r0, #4]
   1095c:	str.w	lr, [r0, #8]
   10960:	bhi.w	10b9c <_malloc_r+0x524>
   10964:	ldr	r3, [pc, #116]	; (109dc <_malloc_r+0x364>)
   10966:	ldr	r4, [r7, #8]
   10968:	ldr	r2, [r3, #0]
   1096a:	cmp	r1, r2
   1096c:	it	hi
   1096e:	strhi	r1, [r3, #0]
   10970:	ldr	r3, [pc, #108]	; (109e0 <_malloc_r+0x368>)
   10972:	ldr	r2, [r3, #0]
   10974:	cmp	r1, r2
   10976:	ldr	r2, [r4, #4]
   10978:	it	hi
   1097a:	strhi	r1, [r3, #0]
   1097c:	bic.w	r2, r2, #3
   10980:	cmp	r5, r2
   10982:	sub.w	r3, r2, r5
   10986:	bhi.n	1098c <_malloc_r+0x314>
   10988:	cmp	r3, #15
   1098a:	bgt.n	10996 <_malloc_r+0x31e>
   1098c:	mov	r0, r6
   1098e:	bl	10e8c <__malloc_unlock>
   10992:	movs	r4, #0
   10994:	b.n	10808 <_malloc_r+0x190>
   10996:	adds	r2, r4, r5
   10998:	orr.w	r3, r3, #1
   1099c:	orr.w	r5, r5, #1
   109a0:	str	r5, [r4, #4]
   109a2:	mov	r0, r6
   109a4:	str	r2, [r7, #8]
   109a6:	str	r3, [r2, #4]
   109a8:	bl	10e8c <__malloc_unlock>
   109ac:	adds	r4, #8
   109ae:	mov	r0, r4
   109b0:	add	sp, #12
   109b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109b6:	cmp	r3, #20
   109b8:	bls.n	10a9e <_malloc_r+0x426>
   109ba:	cmp	r3, #84	; 0x54
   109bc:	bhi.w	10b08 <_malloc_r+0x490>
   109c0:	lsrs	r0, r5, #12
   109c2:	add.w	lr, r0, #111	; 0x6f
   109c6:	mov.w	r3, lr, lsl #1
   109ca:	adds	r0, #110	; 0x6e
   109cc:	b.n	106bc <_malloc_r+0x44>
   109ce:	nop
   109d0:	.word	0x1fff1208
   109d4:	.word	0x20007170
   109d8:	.word	0x20007174
   109dc:	.word	0x2000716c
   109e0:	.word	0x20007168
   109e4:	.word	0x1fff1614
   109e8:	lsrs	r2, r3, #9
   109ea:	cmp	r2, #4
   109ec:	bls.n	10aac <_malloc_r+0x434>
   109ee:	cmp	r2, #20
   109f0:	bhi.w	10b5a <_malloc_r+0x4e2>
   109f4:	add.w	r1, r2, #92	; 0x5c
   109f8:	lsls	r1, r1, #1
   109fa:	adds	r2, #91	; 0x5b
   109fc:	add.w	ip, r7, r1, lsl #2
   10a00:	ldr.w	r1, [r7, r1, lsl #2]
   10a04:	ldr.w	r8, [pc, #476]	; 10be4 <_malloc_r+0x56c>
   10a08:	sub.w	ip, ip, #8
   10a0c:	cmp	ip, r1
   10a0e:	beq.w	10b22 <_malloc_r+0x4aa>
   10a12:	ldr	r2, [r1, #4]
   10a14:	bic.w	r2, r2, #3
   10a18:	cmp	r3, r2
   10a1a:	bcs.n	10a22 <_malloc_r+0x3aa>
   10a1c:	ldr	r1, [r1, #8]
   10a1e:	cmp	ip, r1
   10a20:	bne.n	10a12 <_malloc_r+0x39a>
   10a22:	ldr.w	ip, [r1, #12]
   10a26:	ldr	r2, [r7, #4]
   10a28:	str.w	ip, [r4, #12]
   10a2c:	str	r1, [r4, #8]
   10a2e:	str.w	r4, [ip, #8]
   10a32:	str	r4, [r1, #12]
   10a34:	b.n	10748 <_malloc_r+0xd0>
   10a36:	adds	r3, r4, r5
   10a38:	orr.w	r7, r2, #1
   10a3c:	orr.w	r5, r5, #1
   10a40:	str	r5, [r4, #4]
   10a42:	mov	r0, r6
   10a44:	str	r3, [r1, #20]
   10a46:	str	r3, [r1, #16]
   10a48:	str.w	lr, [r3, #12]
   10a4c:	str.w	lr, [r3, #8]
   10a50:	str	r7, [r3, #4]
   10a52:	str	r2, [r3, r2]
   10a54:	adds	r4, #8
   10a56:	bl	10e8c <__malloc_unlock>
   10a5a:	b.n	10808 <_malloc_r+0x190>
   10a5c:	ldr	r2, [r1, #4]
   10a5e:	b.n	10748 <_malloc_r+0xd0>
   10a60:	add.w	r8, r8, #1
   10a64:	tst.w	r8, #3
   10a68:	add.w	ip, ip, #8
   10a6c:	bne.w	1076e <_malloc_r+0xf6>
   10a70:	b.n	10ad4 <_malloc_r+0x45c>
   10a72:	ldr	r4, [r3, #12]
   10a74:	cmp	r3, r4
   10a76:	it	eq
   10a78:	addeq	r0, #2
   10a7a:	beq.w	106e8 <_malloc_r+0x70>
   10a7e:	b.n	107e8 <_malloc_r+0x170>
   10a80:	add	r3, r1
   10a82:	mov	r4, r1
   10a84:	ldr	r2, [r3, #4]
   10a86:	ldr	r1, [r1, #12]
   10a88:	ldr.w	r5, [r4, #8]!
   10a8c:	orr.w	r2, r2, #1
   10a90:	str	r2, [r3, #4]
   10a92:	mov	r0, r6
   10a94:	str	r1, [r5, #12]
   10a96:	str	r5, [r1, #8]
   10a98:	bl	10e8c <__malloc_unlock>
   10a9c:	b.n	10808 <_malloc_r+0x190>
   10a9e:	add.w	lr, r3, #92	; 0x5c
   10aa2:	add.w	r0, r3, #91	; 0x5b
   10aa6:	mov.w	r3, lr, lsl #1
   10aaa:	b.n	106bc <_malloc_r+0x44>
   10aac:	lsrs	r2, r3, #6
   10aae:	add.w	r1, r2, #57	; 0x39
   10ab2:	lsls	r1, r1, #1
   10ab4:	adds	r2, #56	; 0x38
   10ab6:	b.n	109fc <_malloc_r+0x384>
   10ab8:	cmp	r4, r7
   10aba:	ldr	r3, [pc, #296]	; (10be4 <_malloc_r+0x56c>)
   10abc:	beq.w	108c0 <_malloc_r+0x248>
   10ac0:	ldr	r4, [r3, #8]
   10ac2:	ldr	r2, [r4, #4]
   10ac4:	bic.w	r2, r2, #3
   10ac8:	b.n	10980 <_malloc_r+0x308>
   10aca:	ldr.w	r3, [r9], #-8
   10ace:	cmp	r9, r3
   10ad0:	bne.w	10bd8 <_malloc_r+0x560>
   10ad4:	tst.w	r0, #3
   10ad8:	add.w	r0, r0, #4294967295
   10adc:	bne.n	10aca <_malloc_r+0x452>
   10ade:	ldr	r3, [r7, #4]
   10ae0:	bic.w	r3, r3, r4
   10ae4:	str	r3, [r7, #4]
   10ae6:	lsls	r4, r4, #1
   10ae8:	cmp	r4, r3
   10aea:	bhi.w	10868 <_malloc_r+0x1f0>
   10aee:	cmp	r4, #0
   10af0:	beq.w	10868 <_malloc_r+0x1f0>
   10af4:	tst	r4, r3
   10af6:	mov	r0, r8
   10af8:	bne.w	10766 <_malloc_r+0xee>
   10afc:	lsls	r4, r4, #1
   10afe:	tst	r4, r3
   10b00:	add.w	r0, r0, #4
   10b04:	beq.n	10afc <_malloc_r+0x484>
   10b06:	b.n	10766 <_malloc_r+0xee>
   10b08:	cmp.w	r3, #340	; 0x154
   10b0c:	bhi.n	10b40 <_malloc_r+0x4c8>
   10b0e:	lsrs	r0, r5, #15
   10b10:	add.w	lr, r0, #120	; 0x78
   10b14:	mov.w	r3, lr, lsl #1
   10b18:	adds	r0, #119	; 0x77
   10b1a:	b.n	106bc <_malloc_r+0x44>
   10b1c:	mov.w	r1, #4096	; 0x1000
   10b20:	b.n	108fa <_malloc_r+0x282>
   10b22:	movs	r1, #1
   10b24:	ldr.w	r3, [r8, #4]
   10b28:	asrs	r2, r2, #2
   10b2a:	lsl.w	r2, r1, r2
   10b2e:	orrs	r2, r3
   10b30:	str.w	r2, [r8, #4]
   10b34:	mov	r1, ip
   10b36:	b.n	10a28 <_malloc_r+0x3b0>
   10b38:	movs	r3, #1
   10b3a:	str.w	r3, [fp, #4]
   10b3e:	b.n	1098c <_malloc_r+0x314>
   10b40:	movw	r2, #1364	; 0x554
   10b44:	cmp	r3, r2
   10b46:	bhi.n	10b8a <_malloc_r+0x512>
   10b48:	lsrs	r0, r5, #18
   10b4a:	add.w	lr, r0, #125	; 0x7d
   10b4e:	mov.w	r3, lr, lsl #1
   10b52:	adds	r0, #124	; 0x7c
   10b54:	b.n	106bc <_malloc_r+0x44>
   10b56:	adds	r2, #16
   10b58:	b.n	108a4 <_malloc_r+0x22c>
   10b5a:	cmp	r2, #84	; 0x54
   10b5c:	bhi.n	10bac <_malloc_r+0x534>
   10b5e:	lsrs	r2, r3, #12
   10b60:	add.w	r1, r2, #111	; 0x6f
   10b64:	lsls	r1, r1, #1
   10b66:	adds	r2, #110	; 0x6e
   10b68:	b.n	109fc <_malloc_r+0x384>
   10b6a:	ldr	r4, [r7, #8]
   10b6c:	ldr	r2, [r4, #4]
   10b6e:	bic.w	r2, r2, #3
   10b72:	b.n	10980 <_malloc_r+0x308>
   10b74:	ubfx	r0, sl, #0, #12
   10b78:	cmp	r0, #0
   10b7a:	bne.w	108ce <_malloc_r+0x256>
   10b7e:	add	r2, r8
   10b80:	ldr	r3, [r7, #8]
   10b82:	orr.w	r2, r2, #1
   10b86:	str	r2, [r3, #4]
   10b88:	b.n	10964 <_malloc_r+0x2ec>
   10b8a:	movs	r3, #254	; 0xfe
   10b8c:	mov.w	lr, #127	; 0x7f
   10b90:	movs	r0, #126	; 0x7e
   10b92:	b.n	106bc <_malloc_r+0x44>
   10b94:	movs	r2, #1
   10b96:	mov.w	r9, #0
   10b9a:	b.n	10920 <_malloc_r+0x2a8>
   10b9c:	add.w	r1, r4, #8
   10ba0:	mov	r0, r6
   10ba2:	bl	13f38 <_free_r>
   10ba6:	ldr.w	r1, [r9]
   10baa:	b.n	10964 <_malloc_r+0x2ec>
   10bac:	cmp.w	r2, #340	; 0x154
   10bb0:	bhi.n	10bbe <_malloc_r+0x546>
   10bb2:	lsrs	r2, r3, #15
   10bb4:	add.w	r1, r2, #120	; 0x78
   10bb8:	lsls	r1, r1, #1
   10bba:	adds	r2, #119	; 0x77
   10bbc:	b.n	109fc <_malloc_r+0x384>
   10bbe:	movw	r1, #1364	; 0x554
   10bc2:	cmp	r2, r1
   10bc4:	bhi.n	10bd2 <_malloc_r+0x55a>
   10bc6:	lsrs	r2, r3, #18
   10bc8:	add.w	r1, r2, #125	; 0x7d
   10bcc:	lsls	r1, r1, #1
   10bce:	adds	r2, #124	; 0x7c
   10bd0:	b.n	109fc <_malloc_r+0x384>
   10bd2:	movs	r1, #254	; 0xfe
   10bd4:	movs	r2, #126	; 0x7e
   10bd6:	b.n	109fc <_malloc_r+0x384>
   10bd8:	ldr	r3, [r7, #4]
   10bda:	b.n	10ae6 <_malloc_r+0x46e>
   10bdc:	lsrs	r0, r5, #3
   10bde:	adds	r3, r0, #1
   10be0:	lsls	r3, r3, #1
   10be2:	b.n	107d6 <_malloc_r+0x15e>
   10be4:	.word	0x1fff1208

00010be8 <__ascii_mbtowc>:
   10be8:	sub	sp, #8
   10bea:	cbz	r1, 10c00 <__ascii_mbtowc+0x18>
   10bec:	cbz	r2, 10c06 <__ascii_mbtowc+0x1e>
   10bee:	cbz	r3, 10c0c <__ascii_mbtowc+0x24>
   10bf0:	ldrb	r3, [r2, #0]
   10bf2:	str	r3, [r1, #0]
   10bf4:	ldrb	r2, [r2, #0]
   10bf6:	adds	r0, r2, #0
   10bf8:	it	ne
   10bfa:	movne	r0, #1
   10bfc:	add	sp, #8
   10bfe:	bx	lr
   10c00:	add	r1, sp, #4
   10c02:	cmp	r2, #0
   10c04:	bne.n	10bee <__ascii_mbtowc+0x6>
   10c06:	mov	r0, r2
   10c08:	add	sp, #8
   10c0a:	bx	lr
   10c0c:	mvn.w	r0, #1
   10c10:	b.n	10bfc <__ascii_mbtowc+0x14>
   10c12:	nop
   10c14:			; <UNDEFINED> instruction: 0xffffffff
   10c18:			; <UNDEFINED> instruction: 0xffffffff
   10c1c:			; <UNDEFINED> instruction: 0xffffffff

00010c20 <memchr>:
   10c20:	and.w	r1, r1, #255	; 0xff
   10c24:	cmp	r2, #16
   10c26:	blt.n	10c80 <memchr+0x60>
   10c28:	tst.w	r0, #7
   10c2c:	beq.n	10c40 <memchr+0x20>
   10c2e:	ldrb.w	r3, [r0], #1
   10c32:	subs	r2, #1
   10c34:	cmp	r3, r1
   10c36:	beq.n	10c94 <memchr+0x74>
   10c38:	tst.w	r0, #7
   10c3c:	cbz	r2, 10c90 <memchr+0x70>
   10c3e:	bne.n	10c2e <memchr+0xe>
   10c40:	push	{r4, r5, r6, r7}
   10c42:	orr.w	r1, r1, r1, lsl #8
   10c46:	orr.w	r1, r1, r1, lsl #16
   10c4a:	bic.w	r4, r2, #7
   10c4e:	mvns.w	r7, #0
   10c52:	movs	r3, #0
   10c54:	ldrd	r5, r6, [r0], #8
   10c58:	subs	r4, #8
   10c5a:	eor.w	r5, r5, r1
   10c5e:	eor.w	r6, r6, r1
   10c62:	uadd8	r5, r5, r7
   10c66:	sel	r5, r3, r7
   10c6a:	uadd8	r6, r6, r7
   10c6e:	sel	r6, r5, r7
   10c72:	cbnz	r6, 10c98 <memchr+0x78>
   10c74:	bne.n	10c54 <memchr+0x34>
   10c76:	pop	{r4, r5, r6, r7}
   10c78:	and.w	r1, r1, #255	; 0xff
   10c7c:	and.w	r2, r2, #7
   10c80:	cbz	r2, 10c90 <memchr+0x70>
   10c82:	ldrb.w	r3, [r0], #1
   10c86:	subs	r2, #1
   10c88:	eor.w	r3, r3, r1
   10c8c:	cbz	r3, 10c94 <memchr+0x74>
   10c8e:	bne.n	10c82 <memchr+0x62>
   10c90:	movs	r0, #0
   10c92:	bx	lr
   10c94:	subs	r0, #1
   10c96:	bx	lr
   10c98:	cmp	r5, #0
   10c9a:	itte	eq
   10c9c:	moveq	r5, r6
   10c9e:	subeq	r0, #3
   10ca0:	subne	r0, #7
   10ca2:	tst.w	r5, #1
   10ca6:	bne.n	10cb8 <memchr+0x98>
   10ca8:	adds	r0, #1
   10caa:	tst.w	r5, #256	; 0x100
   10cae:	ittt	eq
   10cb0:	addeq	r0, #1
   10cb2:	tsteq.w	r5, #98304	; 0x18000
   10cb6:	addeq	r0, #1
   10cb8:	pop	{r4, r5, r6, r7}
   10cba:	subs	r0, #1
   10cbc:	bx	lr
   10cbe:	nop

00010cc0 <memcmp>:
   10cc0:	cmp	r2, #3
   10cc2:	push	{r4, r5, r6}
   10cc4:	bls.n	10d14 <memcmp+0x54>
   10cc6:	orr.w	r3, r0, r1
   10cca:	lsls	r3, r3, #30
   10ccc:	beq.n	10cf2 <memcmp+0x32>
   10cce:	ldrb	r4, [r0, #0]
   10cd0:	ldrb	r5, [r1, #0]
   10cd2:	cmp	r4, r5
   10cd4:	bne.n	10d1c <memcmp+0x5c>
   10cd6:	add	r2, r0
   10cd8:	adds	r3, r0, #1
   10cda:	b.n	10ce8 <memcmp+0x28>
   10cdc:	ldrb.w	r4, [r3], #1
   10ce0:	ldrb.w	r5, [r1, #1]!
   10ce4:	cmp	r4, r5
   10ce6:	bne.n	10d1c <memcmp+0x5c>
   10ce8:	cmp	r3, r2
   10cea:	bne.n	10cdc <memcmp+0x1c>
   10cec:	movs	r0, #0
   10cee:	pop	{r4, r5, r6}
   10cf0:	bx	lr
   10cf2:	mov	r4, r1
   10cf4:	mov	r3, r0
   10cf6:	ldr	r6, [r3, #0]
   10cf8:	ldr	r5, [r4, #0]
   10cfa:	cmp	r6, r5
   10cfc:	mov	r0, r3
   10cfe:	mov	r1, r4
   10d00:	add.w	r3, r3, #4
   10d04:	add.w	r4, r4, #4
   10d08:	bne.n	10cce <memcmp+0xe>
   10d0a:	subs	r2, #4
   10d0c:	cmp	r2, #3
   10d0e:	mov	r0, r3
   10d10:	mov	r1, r4
   10d12:	bhi.n	10cf6 <memcmp+0x36>
   10d14:	cmp	r2, #0
   10d16:	bne.n	10cce <memcmp+0xe>
   10d18:	mov	r0, r2
   10d1a:	b.n	10cee <memcmp+0x2e>
   10d1c:	subs	r0, r4, r5
   10d1e:	pop	{r4, r5, r6}
   10d20:	bx	lr
   10d22:	nop

00010d24 <memmove>:
   10d24:	cmp	r0, r1
   10d26:	push	{r4, r5, r6, r7, lr}
   10d28:	bls.n	10d46 <memmove+0x22>
   10d2a:	adds	r3, r1, r2
   10d2c:	cmp	r0, r3
   10d2e:	bcs.n	10d46 <memmove+0x22>
   10d30:	adds	r1, r0, r2
   10d32:	cmp	r2, #0
   10d34:	beq.n	10dda <memmove+0xb6>
   10d36:	subs	r2, r3, r2
   10d38:	ldrb.w	r4, [r3, #-1]!
   10d3c:	strb.w	r4, [r1, #-1]!
   10d40:	cmp	r3, r2
   10d42:	bne.n	10d38 <memmove+0x14>
   10d44:	pop	{r4, r5, r6, r7, pc}
   10d46:	cmp	r2, #15
   10d48:	bls.n	10ddc <memmove+0xb8>
   10d4a:	orr.w	r3, r1, r0
   10d4e:	lsls	r3, r3, #30
   10d50:	bne.n	10de0 <memmove+0xbc>
   10d52:	add.w	r4, r0, #16
   10d56:	add.w	r3, r1, #16
   10d5a:	mov	r5, r2
   10d5c:	ldr.w	r6, [r3, #-16]
   10d60:	str.w	r6, [r4, #-16]
   10d64:	ldr.w	r6, [r3, #-12]
   10d68:	str.w	r6, [r4, #-12]
   10d6c:	ldr.w	r6, [r3, #-8]
   10d70:	str.w	r6, [r4, #-8]
   10d74:	subs	r5, #16
   10d76:	ldr.w	r6, [r3, #-4]
   10d7a:	str.w	r6, [r4, #-4]
   10d7e:	cmp	r5, #15
   10d80:	add.w	r3, r3, #16
   10d84:	add.w	r4, r4, #16
   10d88:	bhi.n	10d5c <memmove+0x38>
   10d8a:	sub.w	r3, r2, #16
   10d8e:	bic.w	r3, r3, #15
   10d92:	and.w	lr, r2, #15
   10d96:	adds	r3, #16
   10d98:	cmp.w	lr, #3
   10d9c:	add	r1, r3
   10d9e:	add	r3, r0
   10da0:	bls.n	10de6 <memmove+0xc2>
   10da2:	subs	r6, r3, #4
   10da4:	mov	r5, r1
   10da6:	mov	r4, lr
   10da8:	subs	r4, #4
   10daa:	ldr.w	r7, [r5], #4
   10dae:	str.w	r7, [r6, #4]!
   10db2:	cmp	r4, #3
   10db4:	bhi.n	10da8 <memmove+0x84>
   10db6:	sub.w	r4, lr, #4
   10dba:	bic.w	r4, r4, #3
   10dbe:	adds	r4, #4
   10dc0:	add	r3, r4
   10dc2:	add	r1, r4
   10dc4:	and.w	r2, r2, #3
   10dc8:	cbz	r2, 10de4 <memmove+0xc0>
   10dca:	subs	r3, #1
   10dcc:	add	r2, r1
   10dce:	ldrb.w	r4, [r1], #1
   10dd2:	strb.w	r4, [r3, #1]!
   10dd6:	cmp	r2, r1
   10dd8:	bne.n	10dce <memmove+0xaa>
   10dda:	pop	{r4, r5, r6, r7, pc}
   10ddc:	mov	r3, r0
   10dde:	b.n	10dc8 <memmove+0xa4>
   10de0:	mov	r3, r0
   10de2:	b.n	10dca <memmove+0xa6>
   10de4:	pop	{r4, r5, r6, r7, pc}
   10de6:	mov	r2, lr
   10de8:	b.n	10dc8 <memmove+0xa4>
   10dea:	nop

00010dec <memset>:
   10dec:	push	{r4, r5, r6}
   10dee:	lsls	r4, r0, #30
   10df0:	beq.n	10e80 <memset+0x94>
   10df2:	subs	r4, r2, #1
   10df4:	cmp	r2, #0
   10df6:	beq.n	10e7c <memset+0x90>
   10df8:	uxtb	r5, r1
   10dfa:	mov	r3, r0
   10dfc:	b.n	10e04 <memset+0x18>
   10dfe:	subs	r2, r4, #1
   10e00:	cbz	r4, 10e7c <memset+0x90>
   10e02:	mov	r4, r2
   10e04:	strb.w	r5, [r3], #1
   10e08:	lsls	r2, r3, #30
   10e0a:	bne.n	10dfe <memset+0x12>
   10e0c:	cmp	r4, #3
   10e0e:	bls.n	10e6e <memset+0x82>
   10e10:	uxtb	r5, r1
   10e12:	orr.w	r5, r5, r5, lsl #8
   10e16:	cmp	r4, #15
   10e18:	orr.w	r5, r5, r5, lsl #16
   10e1c:	bls.n	10e52 <memset+0x66>
   10e1e:	add.w	r2, r3, #16
   10e22:	mov	r6, r4
   10e24:	subs	r6, #16
   10e26:	cmp	r6, #15
   10e28:	str.w	r5, [r2, #-16]
   10e2c:	str.w	r5, [r2, #-12]
   10e30:	str.w	r5, [r2, #-8]
   10e34:	str.w	r5, [r2, #-4]
   10e38:	add.w	r2, r2, #16
   10e3c:	bhi.n	10e24 <memset+0x38>
   10e3e:	sub.w	r2, r4, #16
   10e42:	bic.w	r2, r2, #15
   10e46:	and.w	r4, r4, #15
   10e4a:	adds	r2, #16
   10e4c:	cmp	r4, #3
   10e4e:	add	r3, r2
   10e50:	bls.n	10e6e <memset+0x82>
   10e52:	mov	r6, r3
   10e54:	mov	r2, r4
   10e56:	subs	r2, #4
   10e58:	cmp	r2, #3
   10e5a:	str.w	r5, [r6], #4
   10e5e:	bhi.n	10e56 <memset+0x6a>
   10e60:	subs	r2, r4, #4
   10e62:	bic.w	r2, r2, #3
   10e66:	adds	r2, #4
   10e68:	add	r3, r2
   10e6a:	and.w	r4, r4, #3
   10e6e:	cbz	r4, 10e7c <memset+0x90>
   10e70:	uxtb	r1, r1
   10e72:	add	r4, r3
   10e74:	strb.w	r1, [r3], #1
   10e78:	cmp	r3, r4
   10e7a:	bne.n	10e74 <memset+0x88>
   10e7c:	pop	{r4, r5, r6}
   10e7e:	bx	lr
   10e80:	mov	r4, r2
   10e82:	mov	r3, r0
   10e84:	b.n	10e0c <memset+0x20>
   10e86:	nop

00010e88 <__malloc_lock>:
   10e88:	bx	lr
   10e8a:	nop

00010e8c <__malloc_unlock>:
   10e8c:	bx	lr
   10e8e:	nop

00010e90 <_realloc_r>:
   10e90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e94:	mov	r7, r2
   10e96:	sub	sp, #12
   10e98:	cmp	r1, #0
   10e9a:	beq.w	11020 <_realloc_r+0x190>
   10e9e:	mov	r6, r1
   10ea0:	mov	r9, r0
   10ea2:	add.w	r5, r7, #11
   10ea6:	bl	10e88 <__malloc_lock>
   10eaa:	ldr.w	lr, [r6, #-4]
   10eae:	cmp	r5, #22
   10eb0:	bic.w	r4, lr, #3
   10eb4:	sub.w	r8, r6, #8
   10eb8:	bhi.n	10f3c <_realloc_r+0xac>
   10eba:	movs	r2, #16
   10ebc:	mov	r5, r2
   10ebe:	cmp	r7, r5
   10ec0:	bhi.n	10f46 <_realloc_r+0xb6>
   10ec2:	cmp	r4, r2
   10ec4:	bge.n	10fb2 <_realloc_r+0x122>
   10ec6:	ldr	r3, [pc, #804]	; (111ec <_realloc_r+0x35c>)
   10ec8:	ldr	r1, [r3, #8]
   10eca:	add.w	r0, r8, r4
   10ece:	cmp	r0, r1
   10ed0:	ldr	r1, [r0, #4]
   10ed2:	beq.w	11088 <_realloc_r+0x1f8>
   10ed6:	bic.w	r3, r1, #1
   10eda:	add	r3, r0
   10edc:	ldr	r3, [r3, #4]
   10ede:	lsls	r3, r3, #31
   10ee0:	bpl.n	10fde <_realloc_r+0x14e>
   10ee2:	tst.w	lr, #1
   10ee6:	beq.n	10f54 <_realloc_r+0xc4>
   10ee8:	mov	r1, r7
   10eea:	mov	r0, r9
   10eec:	bl	10678 <_malloc_r>
   10ef0:	mov	r7, r0
   10ef2:	cbz	r0, 10f2e <_realloc_r+0x9e>
   10ef4:	ldr.w	r3, [r6, #-4]
   10ef8:	bic.w	r3, r3, #1
   10efc:	add	r3, r8
   10efe:	sub.w	r2, r0, #8
   10f02:	cmp	r2, r3
   10f04:	beq.w	11190 <_realloc_r+0x300>
   10f08:	subs	r2, r4, #4
   10f0a:	cmp	r2, #36	; 0x24
   10f0c:	bhi.w	11172 <_realloc_r+0x2e2>
   10f10:	cmp	r2, #19
   10f12:	bhi.w	1111e <_realloc_r+0x28e>
   10f16:	mov	r3, r0
   10f18:	mov	r2, r6
   10f1a:	ldr	r1, [r2, #0]
   10f1c:	str	r1, [r3, #0]
   10f1e:	ldr	r1, [r2, #4]
   10f20:	str	r1, [r3, #4]
   10f22:	ldr	r2, [r2, #8]
   10f24:	str	r2, [r3, #8]
   10f26:	mov	r1, r6
   10f28:	mov	r0, r9
   10f2a:	bl	13f38 <_free_r>
   10f2e:	mov	r0, r9
   10f30:	bl	10e8c <__malloc_unlock>
   10f34:	mov	r0, r7
   10f36:	add	sp, #12
   10f38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f3c:	bic.w	r5, r5, #7
   10f40:	cmp	r5, #0
   10f42:	mov	r2, r5
   10f44:	bge.n	10ebe <_realloc_r+0x2e>
   10f46:	movs	r3, #12
   10f48:	movs	r0, #0
   10f4a:	str.w	r3, [r9]
   10f4e:	add	sp, #12
   10f50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f54:	ldr.w	r3, [r6, #-8]
   10f58:	rsb	sl, r3, r8
   10f5c:	ldr.w	r3, [sl, #4]
   10f60:	bic.w	ip, r3, #3
   10f64:	add.w	r3, r4, ip
   10f68:	cmp	r3, r2
   10f6a:	blt.n	10ee8 <_realloc_r+0x58>
   10f6c:	mov	r7, sl
   10f6e:	ldr.w	r1, [sl, #12]
   10f72:	ldr.w	r0, [r7, #8]!
   10f76:	subs	r2, r4, #4
   10f78:	cmp	r2, #36	; 0x24
   10f7a:	str	r1, [r0, #12]
   10f7c:	str	r0, [r1, #8]
   10f7e:	bhi.w	111b0 <_realloc_r+0x320>
   10f82:	cmp	r2, #19
   10f84:	bls.w	111ac <_realloc_r+0x31c>
   10f88:	ldr	r1, [r6, #0]
   10f8a:	str.w	r1, [sl, #8]
   10f8e:	ldr	r1, [r6, #4]
   10f90:	str.w	r1, [sl, #12]
   10f94:	cmp	r2, #27
   10f96:	bhi.w	111f0 <_realloc_r+0x360>
   10f9a:	adds	r6, #8
   10f9c:	add.w	r2, sl, #16
   10fa0:	ldr	r1, [r6, #0]
   10fa2:	str	r1, [r2, #0]
   10fa4:	ldr	r1, [r6, #4]
   10fa6:	str	r1, [r2, #4]
   10fa8:	ldr	r1, [r6, #8]
   10faa:	str	r1, [r2, #8]
   10fac:	mov	r6, r7
   10fae:	mov	r4, r3
   10fb0:	mov	r8, sl
   10fb2:	subs	r3, r4, r5
   10fb4:	cmp	r3, #15
   10fb6:	bhi.n	10ff4 <_realloc_r+0x164>
   10fb8:	ldr.w	r3, [r8, #4]
   10fbc:	and.w	r3, r3, #1
   10fc0:	orrs	r3, r4
   10fc2:	add	r4, r8
   10fc4:	str.w	r3, [r8, #4]
   10fc8:	ldr	r3, [r4, #4]
   10fca:	orr.w	r3, r3, #1
   10fce:	str	r3, [r4, #4]
   10fd0:	mov	r0, r9
   10fd2:	bl	10e8c <__malloc_unlock>
   10fd6:	mov	r0, r6
   10fd8:	add	sp, #12
   10fda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fde:	bic.w	r1, r1, #3
   10fe2:	add	r1, r4
   10fe4:	cmp	r1, r2
   10fe6:	blt.n	1102c <_realloc_r+0x19c>
   10fe8:	ldr	r3, [r0, #12]
   10fea:	ldr	r2, [r0, #8]
   10fec:	mov	r4, r1
   10fee:	str	r3, [r2, #12]
   10ff0:	str	r2, [r3, #8]
   10ff2:	b.n	10fb2 <_realloc_r+0x122>
   10ff4:	ldr.w	r2, [r8, #4]
   10ff8:	add.w	r1, r8, r5
   10ffc:	and.w	r2, r2, #1
   11000:	orrs	r5, r2
   11002:	orr.w	r2, r3, #1
   11006:	add	r3, r1
   11008:	str.w	r5, [r8, #4]
   1100c:	str	r2, [r1, #4]
   1100e:	ldr	r2, [r3, #4]
   11010:	orr.w	r2, r2, #1
   11014:	adds	r1, #8
   11016:	str	r2, [r3, #4]
   11018:	mov	r0, r9
   1101a:	bl	13f38 <_free_r>
   1101e:	b.n	10fd0 <_realloc_r+0x140>
   11020:	mov	r1, r2
   11022:	add	sp, #12
   11024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11028:	b.w	10678 <_malloc_r>
   1102c:	tst.w	lr, #1
   11030:	bne.w	10ee8 <_realloc_r+0x58>
   11034:	ldr.w	r3, [r6, #-8]
   11038:	rsb	sl, r3, r8
   1103c:	ldr.w	r3, [sl, #4]
   11040:	bic.w	ip, r3, #3
   11044:	add.w	lr, r1, ip
   11048:	cmp	lr, r2
   1104a:	blt.n	10f64 <_realloc_r+0xd4>
   1104c:	ldr	r3, [r0, #12]
   1104e:	ldr	r2, [r0, #8]
   11050:	mov	r7, sl
   11052:	str	r3, [r2, #12]
   11054:	str	r2, [r3, #8]
   11056:	ldr.w	r1, [r7, #8]!
   1105a:	ldr.w	r3, [sl, #12]
   1105e:	str	r3, [r1, #12]
   11060:	subs	r2, r4, #4
   11062:	cmp	r2, #36	; 0x24
   11064:	str	r1, [r3, #8]
   11066:	bhi.w	1119c <_realloc_r+0x30c>
   1106a:	cmp	r2, #19
   1106c:	bls.n	11134 <_realloc_r+0x2a4>
   1106e:	ldr	r3, [r6, #0]
   11070:	str.w	r3, [sl, #8]
   11074:	ldr	r3, [r6, #4]
   11076:	str.w	r3, [sl, #12]
   1107a:	cmp	r2, #27
   1107c:	bhi.w	111c0 <_realloc_r+0x330>
   11080:	adds	r6, #8
   11082:	add.w	r3, sl, #16
   11086:	b.n	11136 <_realloc_r+0x2a6>
   11088:	bic.w	fp, r1, #3
   1108c:	add	fp, r4
   1108e:	add.w	r0, r5, #16
   11092:	cmp	fp, r0
   11094:	bge.n	1114a <_realloc_r+0x2ba>
   11096:	tst.w	lr, #1
   1109a:	bne.w	10ee8 <_realloc_r+0x58>
   1109e:	ldr.w	r1, [r6, #-8]
   110a2:	rsb	sl, r1, r8
   110a6:	ldr.w	r1, [sl, #4]
   110aa:	bic.w	ip, r1, #3
   110ae:	add	fp, ip
   110b0:	cmp	r0, fp
   110b2:	bgt.w	10f64 <_realloc_r+0xd4>
   110b6:	mov	r7, sl
   110b8:	ldr.w	r1, [sl, #12]
   110bc:	ldr.w	r0, [r7, #8]!
   110c0:	subs	r2, r4, #4
   110c2:	cmp	r2, #36	; 0x24
   110c4:	str	r1, [r0, #12]
   110c6:	str	r0, [r1, #8]
   110c8:	bhi.w	11234 <_realloc_r+0x3a4>
   110cc:	cmp	r2, #19
   110ce:	bls.w	1121c <_realloc_r+0x38c>
   110d2:	ldr	r1, [r6, #0]
   110d4:	str.w	r1, [sl, #8]
   110d8:	ldr	r1, [r6, #4]
   110da:	str.w	r1, [sl, #12]
   110de:	cmp	r2, #27
   110e0:	bhi.w	11242 <_realloc_r+0x3b2>
   110e4:	adds	r6, #8
   110e6:	add.w	r2, sl, #16
   110ea:	ldr	r1, [r6, #0]
   110ec:	str	r1, [r2, #0]
   110ee:	ldr	r1, [r6, #4]
   110f0:	str	r1, [r2, #4]
   110f2:	ldr	r1, [r6, #8]
   110f4:	str	r1, [r2, #8]
   110f6:	add.w	r1, sl, r5
   110fa:	rsb	r2, r5, fp
   110fe:	orr.w	r2, r2, #1
   11102:	str	r1, [r3, #8]
   11104:	str	r2, [r1, #4]
   11106:	ldr.w	r3, [sl, #4]
   1110a:	and.w	r3, r3, #1
   1110e:	orrs	r5, r3
   11110:	mov	r0, r9
   11112:	str.w	r5, [sl, #4]
   11116:	bl	10e8c <__malloc_unlock>
   1111a:	mov	r0, r7
   1111c:	b.n	10fd8 <_realloc_r+0x148>
   1111e:	ldr	r3, [r6, #0]
   11120:	str	r3, [r0, #0]
   11122:	ldr	r3, [r6, #4]
   11124:	str	r3, [r0, #4]
   11126:	cmp	r2, #27
   11128:	bhi.n	1117a <_realloc_r+0x2ea>
   1112a:	add.w	r3, r0, #8
   1112e:	add.w	r2, r6, #8
   11132:	b.n	10f1a <_realloc_r+0x8a>
   11134:	mov	r3, r7
   11136:	ldr	r2, [r6, #0]
   11138:	str	r2, [r3, #0]
   1113a:	ldr	r2, [r6, #4]
   1113c:	str	r2, [r3, #4]
   1113e:	ldr	r2, [r6, #8]
   11140:	str	r2, [r3, #8]
   11142:	mov	r6, r7
   11144:	mov	r4, lr
   11146:	mov	r8, sl
   11148:	b.n	10fb2 <_realloc_r+0x122>
   1114a:	add.w	r1, r8, r5
   1114e:	rsb	fp, r5, fp
   11152:	orr.w	r2, fp, #1
   11156:	str	r1, [r3, #8]
   11158:	str	r2, [r1, #4]
   1115a:	ldr.w	r3, [r6, #-4]
   1115e:	and.w	r3, r3, #1
   11162:	orrs	r5, r3
   11164:	mov	r0, r9
   11166:	str.w	r5, [r6, #-4]
   1116a:	bl	10e8c <__malloc_unlock>
   1116e:	mov	r0, r6
   11170:	b.n	10fd8 <_realloc_r+0x148>
   11172:	mov	r1, r6
   11174:	bl	10d24 <memmove>
   11178:	b.n	10f26 <_realloc_r+0x96>
   1117a:	ldr	r3, [r6, #8]
   1117c:	str	r3, [r0, #8]
   1117e:	ldr	r3, [r6, #12]
   11180:	str	r3, [r0, #12]
   11182:	cmp	r2, #36	; 0x24
   11184:	beq.n	111d8 <_realloc_r+0x348>
   11186:	add.w	r3, r0, #16
   1118a:	add.w	r2, r6, #16
   1118e:	b.n	10f1a <_realloc_r+0x8a>
   11190:	ldr.w	r3, [r0, #-4]
   11194:	bic.w	r3, r3, #3
   11198:	add	r4, r3
   1119a:	b.n	10fb2 <_realloc_r+0x122>
   1119c:	mov	r1, r6
   1119e:	mov	r0, r7
   111a0:	mov	r4, lr
   111a2:	mov	r8, sl
   111a4:	bl	10d24 <memmove>
   111a8:	mov	r6, r7
   111aa:	b.n	10fb2 <_realloc_r+0x122>
   111ac:	mov	r2, r7
   111ae:	b.n	10fa0 <_realloc_r+0x110>
   111b0:	mov	r1, r6
   111b2:	mov	r0, r7
   111b4:	mov	r4, r3
   111b6:	mov	r8, sl
   111b8:	bl	10d24 <memmove>
   111bc:	mov	r6, r7
   111be:	b.n	10fb2 <_realloc_r+0x122>
   111c0:	ldr	r3, [r6, #8]
   111c2:	str.w	r3, [sl, #16]
   111c6:	ldr	r3, [r6, #12]
   111c8:	str.w	r3, [sl, #20]
   111cc:	cmp	r2, #36	; 0x24
   111ce:	beq.n	11208 <_realloc_r+0x378>
   111d0:	adds	r6, #16
   111d2:	add.w	r3, sl, #24
   111d6:	b.n	11136 <_realloc_r+0x2a6>
   111d8:	ldr	r3, [r6, #16]
   111da:	str	r3, [r0, #16]
   111dc:	ldr	r3, [r6, #20]
   111de:	str	r3, [r0, #20]
   111e0:	add.w	r2, r6, #24
   111e4:	add.w	r3, r0, #24
   111e8:	b.n	10f1a <_realloc_r+0x8a>
   111ea:	nop
   111ec:	.word	0x1fff1208
   111f0:	ldr	r1, [r6, #8]
   111f2:	str.w	r1, [sl, #16]
   111f6:	ldr	r1, [r6, #12]
   111f8:	str.w	r1, [sl, #20]
   111fc:	cmp	r2, #36	; 0x24
   111fe:	beq.n	11220 <_realloc_r+0x390>
   11200:	adds	r6, #16
   11202:	add.w	r2, sl, #24
   11206:	b.n	10fa0 <_realloc_r+0x110>
   11208:	ldr	r3, [r6, #16]
   1120a:	str.w	r3, [sl, #24]
   1120e:	ldr	r3, [r6, #20]
   11210:	str.w	r3, [sl, #28]
   11214:	adds	r6, #24
   11216:	add.w	r3, sl, #32
   1121a:	b.n	11136 <_realloc_r+0x2a6>
   1121c:	mov	r2, r7
   1121e:	b.n	110ea <_realloc_r+0x25a>
   11220:	ldr	r2, [r6, #16]
   11222:	str.w	r2, [sl, #24]
   11226:	ldr	r2, [r6, #20]
   11228:	str.w	r2, [sl, #28]
   1122c:	adds	r6, #24
   1122e:	add.w	r2, sl, #32
   11232:	b.n	10fa0 <_realloc_r+0x110>
   11234:	mov	r1, r6
   11236:	mov	r0, r7
   11238:	str	r3, [sp, #4]
   1123a:	bl	10d24 <memmove>
   1123e:	ldr	r3, [sp, #4]
   11240:	b.n	110f6 <_realloc_r+0x266>
   11242:	ldr	r1, [r6, #8]
   11244:	str.w	r1, [sl, #16]
   11248:	ldr	r1, [r6, #12]
   1124a:	str.w	r1, [sl, #20]
   1124e:	cmp	r2, #36	; 0x24
   11250:	beq.n	1125a <_realloc_r+0x3ca>
   11252:	adds	r6, #16
   11254:	add.w	r2, sl, #24
   11258:	b.n	110ea <_realloc_r+0x25a>
   1125a:	ldr	r2, [r6, #16]
   1125c:	str.w	r2, [sl, #24]
   11260:	ldr	r2, [r6, #20]
   11262:	str.w	r2, [sl, #28]
   11266:	adds	r6, #24
   11268:	add.w	r2, sl, #32
   1126c:	b.n	110ea <_realloc_r+0x25a>
   1126e:	nop

00011270 <_sbrk_r>:
   11270:	push	{r3, r4, r5, lr}
   11272:	ldr	r4, [pc, #28]	; (11290 <_sbrk_r+0x20>)
   11274:	movs	r3, #0
   11276:	mov	r5, r0
   11278:	mov	r0, r1
   1127a:	str	r3, [r4, #0]
   1127c:	bl	e114 <_sbrk>
   11280:	adds	r3, r0, #1
   11282:	beq.n	11286 <_sbrk_r+0x16>
   11284:	pop	{r3, r4, r5, pc}
   11286:	ldr	r3, [r4, #0]
   11288:	cmp	r3, #0
   1128a:	beq.n	11284 <_sbrk_r+0x14>
   1128c:	str	r3, [r5, #0]
   1128e:	pop	{r3, r4, r5, pc}
   11290:	.word	0x200071b4

00011294 <sprintf>:
   11294:	push	{r1, r2, r3}
   11296:	push	{r4, r5, r6, r7, lr}
   11298:	sub	sp, #112	; 0x70
   1129a:	add	r3, sp, #132	; 0x84
   1129c:	ldr	r1, [pc, #60]	; (112dc <sprintf+0x48>)
   1129e:	ldr.w	r2, [r3], #4
   112a2:	str	r3, [sp, #4]
   112a4:	mov	r5, r0
   112a6:	mvn.w	r4, #2147483648	; 0x80000000
   112aa:	ldr	r0, [r1, #0]
   112ac:	str	r5, [sp, #8]
   112ae:	mov.w	r7, #520	; 0x208
   112b2:	movw	r6, #65535	; 0xffff
   112b6:	add	r1, sp, #8
   112b8:	str	r5, [sp, #24]
   112ba:	strh.w	r7, [sp, #20]
   112be:	str	r4, [sp, #16]
   112c0:	str	r4, [sp, #28]
   112c2:	strh.w	r6, [sp, #22]
   112c6:	bl	115c0 <_svfprintf_r>
   112ca:	ldr	r3, [sp, #8]
   112cc:	movs	r2, #0
   112ce:	strb	r2, [r3, #0]
   112d0:	add	sp, #112	; 0x70
   112d2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   112d6:	add	sp, #12
   112d8:	bx	lr
   112da:	nop
   112dc:	.word	0x1fff1098

000112e0 <strcpy>:
   112e0:	eor.w	r2, r0, r1
   112e4:	mov	ip, r0
   112e6:	tst.w	r2, #3
   112ea:	bne.n	1138c <strcpy+0xac>
   112ec:	tst.w	r1, #3
   112f0:	bne.n	11358 <strcpy+0x78>
   112f2:	str.w	r4, [sp, #-4]!
   112f6:	tst.w	r1, #4
   112fa:	ldr.w	r3, [r1], #4
   112fe:	beq.n	11318 <strcpy+0x38>
   11300:	sub.w	r2, r3, #16843009	; 0x1010101
   11304:	bics	r2, r3
   11306:	tst.w	r2, #2155905152	; 0x80808080
   1130a:	itt	eq
   1130c:	streq.w	r3, [ip], #4
   11310:	ldreq.w	r3, [r1], #4
   11314:	bne.n	11344 <strcpy+0x64>
   11316:	nop
   11318:	ldr.w	r4, [r1], #4
   1131c:	sub.w	r2, r3, #16843009	; 0x1010101
   11320:	bics	r2, r3
   11322:	tst.w	r2, #2155905152	; 0x80808080
   11326:	sub.w	r2, r4, #16843009	; 0x1010101
   1132a:	bne.n	11344 <strcpy+0x64>
   1132c:	str.w	r3, [ip], #4
   11330:	bics	r2, r4
   11332:	tst.w	r2, #2155905152	; 0x80808080
   11336:	itt	eq
   11338:	ldreq.w	r3, [r1], #4
   1133c:	streq.w	r4, [ip], #4
   11340:	beq.n	11318 <strcpy+0x38>
   11342:	mov	r3, r4
   11344:	strb.w	r3, [ip], #1
   11348:	tst.w	r3, #255	; 0xff
   1134c:	mov.w	r3, r3, ror #8
   11350:	bne.n	11344 <strcpy+0x64>
   11352:	ldr.w	r4, [sp], #4
   11356:	bx	lr
   11358:	tst.w	r1, #1
   1135c:	beq.n	1136c <strcpy+0x8c>
   1135e:	ldrb.w	r2, [r1], #1
   11362:	strb.w	r2, [ip], #1
   11366:	cmp	r2, #0
   11368:	it	eq
   1136a:	bxeq	lr
   1136c:	tst.w	r1, #2
   11370:	beq.n	112f2 <strcpy+0x12>
   11372:	ldrh.w	r2, [r1], #2
   11376:	tst.w	r2, #255	; 0xff
   1137a:	itet	ne
   1137c:	strhne.w	r2, [ip], #2
   11380:	strbeq.w	r2, [ip]
   11384:	tstne.w	r2, #65280	; 0xff00
   11388:	bne.n	112f2 <strcpy+0x12>
   1138a:	bx	lr
   1138c:	ldrb.w	r2, [r1], #1
   11390:	strb.w	r2, [ip], #1
   11394:	cmp	r2, #0
   11396:	bne.n	1138c <strcpy+0xac>
   11398:	bx	lr
   1139a:	nop

0001139c <strlcat>:
   1139c:	push	{r4, r5, r6, lr}
   1139e:	cbz	r2, 113de <strlcat+0x42>
   113a0:	ldrb	r6, [r0, #0]
   113a2:	cbz	r6, 113ea <strlcat+0x4e>
   113a4:	adds	r3, r0, #1
   113a6:	adds	r6, r0, r2
   113a8:	b.n	113b0 <strlcat+0x14>
   113aa:	ldrb	r5, [r3, #0]
   113ac:	adds	r3, #1
   113ae:	cbz	r5, 113b6 <strlcat+0x1a>
   113b0:	cmp	r6, r3
   113b2:	mov	r4, r3
   113b4:	bne.n	113aa <strlcat+0xe>
   113b6:	subs	r6, r4, r0
   113b8:	subs	r2, r2, r6
   113ba:	beq.n	113e0 <strlcat+0x44>
   113bc:	ldrb	r3, [r1, #0]
   113be:	mov	r5, r1
   113c0:	cbz	r3, 113d6 <strlcat+0x3a>
   113c2:	cmp	r2, #1
   113c4:	beq.n	113cc <strlcat+0x30>
   113c6:	strb	r3, [r4, #0]
   113c8:	subs	r2, #1
   113ca:	adds	r4, #1
   113cc:	ldrb.w	r3, [r5, #1]!
   113d0:	cmp	r3, #0
   113d2:	bne.n	113c2 <strlcat+0x26>
   113d4:	subs	r3, r5, r1
   113d6:	movs	r2, #0
   113d8:	strb	r2, [r4, #0]
   113da:	adds	r0, r6, r3
   113dc:	pop	{r4, r5, r6, pc}
   113de:	mov	r6, r2
   113e0:	mov	r0, r1
   113e2:	bl	11440 <strlen>
   113e6:	add	r0, r6
   113e8:	pop	{r4, r5, r6, pc}
   113ea:	mov	r4, r0
   113ec:	b.n	113bc <strlcat+0x20>
   113ee:	nop

000113f0 <strlcpy>:
   113f0:	push	{r4}
   113f2:	mov	r3, r1
   113f4:	cbz	r2, 1140a <strlcpy+0x1a>
   113f6:	b.n	11402 <strlcpy+0x12>
   113f8:	ldrb.w	r4, [r3], #1
   113fc:	strb.w	r4, [r0], #1
   11400:	cbz	r4, 11412 <strlcpy+0x22>
   11402:	subs	r2, #1
   11404:	bne.n	113f8 <strlcpy+0x8>
   11406:	movs	r2, #0
   11408:	strb	r2, [r0, #0]
   1140a:	ldrb.w	r2, [r3], #1
   1140e:	cmp	r2, #0
   11410:	bne.n	1140a <strlcpy+0x1a>
   11412:	subs	r0, r3, r1
   11414:	subs	r0, #1
   11416:	ldr.w	r4, [sp], #4
   1141a:	bx	lr
   1141c:			; <UNDEFINED> instruction: 0xffffffff
   11420:			; <UNDEFINED> instruction: 0xffffffff
   11424:			; <UNDEFINED> instruction: 0xffffffff
   11428:			; <UNDEFINED> instruction: 0xffffffff
   1142c:			; <UNDEFINED> instruction: 0xffffffff
   11430:			; <UNDEFINED> instruction: 0xffffffff
   11434:			; <UNDEFINED> instruction: 0xffffffff
   11438:			; <UNDEFINED> instruction: 0xffffffff
   1143c:			; <UNDEFINED> instruction: 0xffffffff

00011440 <strlen>:
   11440:	pld	[r0]
   11444:	strd	r4, r5, [sp, #-8]!
   11448:	bic.w	r1, r0, #7
   1144c:	mvn.w	ip, #0
   11450:	ands.w	r4, r0, #7
   11454:	pld	[r1, #32]
   11458:	bne.w	114ee <strlen+0xae>
   1145c:	mov.w	r4, #0
   11460:	mvn.w	r0, #7
   11464:	ldrd	r2, r3, [r1]
   11468:	pld	[r1, #64]	; 0x40
   1146c:	add.w	r0, r0, #8
   11470:	uadd8	r2, r2, ip
   11474:	sel	r2, r4, ip
   11478:	uadd8	r3, r3, ip
   1147c:	sel	r3, r2, ip
   11480:	cbnz	r3, 114d6 <strlen+0x96>
   11482:	ldrd	r2, r3, [r1, #8]
   11486:	uadd8	r2, r2, ip
   1148a:	add.w	r0, r0, #8
   1148e:	sel	r2, r4, ip
   11492:	uadd8	r3, r3, ip
   11496:	sel	r3, r2, ip
   1149a:	cbnz	r3, 114d6 <strlen+0x96>
   1149c:	ldrd	r2, r3, [r1, #16]
   114a0:	uadd8	r2, r2, ip
   114a4:	add.w	r0, r0, #8
   114a8:	sel	r2, r4, ip
   114ac:	uadd8	r3, r3, ip
   114b0:	sel	r3, r2, ip
   114b4:	cbnz	r3, 114d6 <strlen+0x96>
   114b6:	ldrd	r2, r3, [r1, #24]
   114ba:	add.w	r1, r1, #32
   114be:	uadd8	r2, r2, ip
   114c2:	add.w	r0, r0, #8
   114c6:	sel	r2, r4, ip
   114ca:	uadd8	r3, r3, ip
   114ce:	sel	r3, r2, ip
   114d2:	cmp	r3, #0
   114d4:	beq.n	11464 <strlen+0x24>
   114d6:	cmp	r2, #0
   114d8:	itt	eq
   114da:	addeq	r0, #4
   114dc:	moveq	r2, r3
   114de:	rev	r2, r2
   114e0:	clz	r2, r2
   114e4:	ldrd	r4, r5, [sp], #8
   114e8:	add.w	r0, r0, r2, lsr #3
   114ec:	bx	lr
   114ee:	ldrd	r2, r3, [r1]
   114f2:	and.w	r5, r4, #3
   114f6:	rsb	r0, r4, #0
   114fa:	mov.w	r5, r5, lsl #3
   114fe:	tst.w	r4, #4
   11502:	pld	[r1, #64]	; 0x40
   11506:	lsl.w	r5, ip, r5
   1150a:	orn	r2, r2, r5
   1150e:	itt	ne
   11510:	ornne	r3, r3, r5
   11514:	movne	r2, ip
   11516:	mov.w	r4, #0
   1151a:	b.n	11470 <strlen+0x30>

0001151c <strncmp>:
   1151c:	cmp	r2, #0
   1151e:	beq.n	115a4 <strncmp+0x88>
   11520:	orr.w	r3, r0, r1
   11524:	ands.w	r3, r3, #3
   11528:	push	{r4, r5, r6, r7}
   1152a:	bne.n	11578 <strncmp+0x5c>
   1152c:	cmp	r2, #3
   1152e:	bls.n	11578 <strncmp+0x5c>
   11530:	ldr	r4, [r0, #0]
   11532:	ldr	r5, [r1, #0]
   11534:	cmp	r4, r5
   11536:	bne.n	11578 <strncmp+0x5c>
   11538:	subs	r2, #4
   1153a:	beq.n	115a8 <strncmp+0x8c>
   1153c:	sub.w	r5, r4, #16843009	; 0x1010101
   11540:	bic.w	r4, r5, r4
   11544:	tst.w	r4, #2155905152	; 0x80808080
   11548:	bne.n	115ae <strncmp+0x92>
   1154a:	adds	r7, r0, #4
   1154c:	adds	r5, r1, #4
   1154e:	b.n	1156c <strncmp+0x50>
   11550:	ldr.w	r3, [r7], #4
   11554:	ldr	r6, [r1, #0]
   11556:	sub.w	r4, r3, #16843009	; 0x1010101
   1155a:	cmp	r3, r6
   1155c:	bic.w	r4, r4, r3
   11560:	bne.n	11578 <strncmp+0x5c>
   11562:	subs	r2, #4
   11564:	beq.n	115a8 <strncmp+0x8c>
   11566:	tst.w	r4, #2155905152	; 0x80808080
   1156a:	bne.n	115b4 <strncmp+0x98>
   1156c:	cmp	r2, #3
   1156e:	mov	r1, r5
   11570:	mov	r0, r7
   11572:	add.w	r5, r5, #4
   11576:	bhi.n	11550 <strncmp+0x34>
   11578:	ldrb	r3, [r0, #0]
   1157a:	ldrb	r4, [r1, #0]
   1157c:	cmp	r4, r3
   1157e:	add.w	r2, r2, #4294967295
   11582:	bne.n	1159e <strncmp+0x82>
   11584:	cbz	r2, 115a8 <strncmp+0x8c>
   11586:	cbnz	r4, 1158e <strncmp+0x72>
   11588:	b.n	115b8 <strncmp+0x9c>
   1158a:	cbz	r2, 115a8 <strncmp+0x8c>
   1158c:	cbz	r3, 115ae <strncmp+0x92>
   1158e:	ldrb.w	r3, [r0, #1]!
   11592:	ldrb.w	r4, [r1, #1]!
   11596:	cmp	r3, r4
   11598:	add.w	r2, r2, #4294967295
   1159c:	beq.n	1158a <strncmp+0x6e>
   1159e:	subs	r0, r3, r4
   115a0:	pop	{r4, r5, r6, r7}
   115a2:	bx	lr
   115a4:	mov	r0, r2
   115a6:	bx	lr
   115a8:	mov	r0, r2
   115aa:	pop	{r4, r5, r6, r7}
   115ac:	bx	lr
   115ae:	mov	r0, r3
   115b0:	pop	{r4, r5, r6, r7}
   115b2:	bx	lr
   115b4:	movs	r0, #0
   115b6:	b.n	115a0 <strncmp+0x84>
   115b8:	mov	r0, r4
   115ba:	b.n	115a0 <strncmp+0x84>
   115bc:			; <UNDEFINED> instruction: 0xffffffff

000115c0 <_svfprintf_r>:
   115c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c4:	sub	sp, #260	; 0x104
   115c6:	mov	r4, r1
   115c8:	str	r1, [sp, #20]
   115ca:	mov	r5, r2
   115cc:	str	r3, [sp, #40]	; 0x28
   115ce:	str	r0, [sp, #24]
   115d0:	bl	14108 <_localeconv_r>
   115d4:	ldr	r3, [r0, #0]
   115d6:	str	r3, [sp, #76]	; 0x4c
   115d8:	mov	r0, r3
   115da:	bl	11440 <strlen>
   115de:	ldrh	r3, [r4, #12]
   115e0:	str	r0, [sp, #72]	; 0x48
   115e2:	lsls	r6, r3, #24
   115e4:	bpl.n	115ee <_svfprintf_r+0x2e>
   115e6:	ldr	r3, [r4, #16]
   115e8:	cmp	r3, #0
   115ea:	beq.w	12850 <_svfprintf_r+0x1290>
   115ee:	vldr	d7, [pc, #664]	; 11888 <_svfprintf_r+0x2c8>
   115f2:	movs	r3, #0
   115f4:	vstr	d7, [sp, #64]	; 0x40
   115f8:	str	r3, [sp, #56]	; 0x38
   115fa:	str	r3, [sp, #148]	; 0x94
   115fc:	str	r3, [sp, #144]	; 0x90
   115fe:	str	r3, [sp, #84]	; 0x54
   11600:	str	r3, [sp, #28]
   11602:	ldr.w	sl, [pc, #656]	; 11894 <_svfprintf_r+0x2d4>
   11606:	add	r3, sp, #192	; 0xc0
   11608:	str	r3, [sp, #140]	; 0x8c
   1160a:	mov	r9, r3
   1160c:	mov	r8, r5
   1160e:	ldrb.w	r3, [r8]
   11612:	mov	r4, r8
   11614:	cbz	r3, 11652 <_svfprintf_r+0x92>
   11616:	cmp	r3, #37	; 0x25
   11618:	bne.n	11620 <_svfprintf_r+0x60>
   1161a:	b.n	11652 <_svfprintf_r+0x92>
   1161c:	cmp	r3, #37	; 0x25
   1161e:	beq.n	11628 <_svfprintf_r+0x68>
   11620:	ldrb.w	r3, [r4, #1]!
   11624:	cmp	r3, #0
   11626:	bne.n	1161c <_svfprintf_r+0x5c>
   11628:	rsb	r5, r8, r4
   1162c:	cbz	r5, 11652 <_svfprintf_r+0x92>
   1162e:	ldr	r3, [sp, #144]	; 0x90
   11630:	ldr	r2, [sp, #148]	; 0x94
   11632:	str.w	r8, [r9]
   11636:	adds	r3, #1
   11638:	add	r2, r5
   1163a:	cmp	r3, #7
   1163c:	str.w	r5, [r9, #4]
   11640:	str	r2, [sp, #148]	; 0x94
   11642:	str	r3, [sp, #144]	; 0x90
   11644:	bgt.w	11794 <_svfprintf_r+0x1d4>
   11648:	add.w	r9, r9, #8
   1164c:	ldr	r3, [sp, #28]
   1164e:	add	r3, r5
   11650:	str	r3, [sp, #28]
   11652:	ldrb	r3, [r4, #0]
   11654:	cmp	r3, #0
   11656:	beq.w	117a6 <_svfprintf_r+0x1e6>
   1165a:	movs	r3, #0
   1165c:	mov	r2, r3
   1165e:	strb.w	r3, [sp, #111]	; 0x6f
   11662:	mov	r1, r3
   11664:	str	r3, [sp, #32]
   11666:	str	r3, [sp, #12]
   11668:	mov.w	fp, #4294967295
   1166c:	ldrb	r3, [r4, #1]
   1166e:	add.w	r8, r4, #1
   11672:	mov	r5, fp
   11674:	add.w	r8, r8, #1
   11678:	sub.w	r0, r3, #32
   1167c:	cmp	r0, #88	; 0x58
   1167e:	bhi.w	11eea <_svfprintf_r+0x92a>
   11682:	tbh	[pc, r0, lsl #1]
   11686:	.short	0x03a0
   11688:	.word	0x04320432
   1168c:	.word	0x043203a8
   11690:	.word	0x04320432
   11694:	.word	0x04320432
   11698:	.word	0x03af0432
   1169c:	.word	0x043203bd
   116a0:	.word	0x00e2005d
   116a4:	.word	0x01090432
   116a8:	.word	0x01100110
   116ac:	.word	0x01100110
   116b0:	.word	0x01100110
   116b4:	.word	0x01100110
   116b8:	.word	0x04320110
   116bc:	.word	0x04320432
   116c0:	.word	0x04320432
   116c4:	.word	0x04320432
   116c8:	.word	0x04320432
   116cc:	.word	0x01200432
   116d0:	.word	0x04320286
   116d4:	.word	0x04320286
   116d8:	.word	0x04320432
   116dc:	.word	0x02d40432
   116e0:	.word	0x04320432
   116e4:	.word	0x043202e5
   116e8:	.word	0x04320432
   116ec:	.word	0x04320432
   116f0:	.word	0x0432030f
   116f4:	.word	0x033d0432
   116f8:	.word	0x04320432
   116fc:	.word	0x04320432
   11700:	.word	0x04320432
   11704:	.word	0x04320432
   11708:	.word	0x04320432
   1170c:	.word	0x0391037e
   11710:	.word	0x02860286
   11714:	.word	0x03990286
   11718:	.word	0x04320391
   1171c:	.word	0x04070432
   11720:	.word	0x04120432
   11724:	.word	0x006400a3
   11728:	.word	0x043203c2
   1172c:	.word	0x043203c9
   11730:	.word	0x043203ea
   11734:	.word	0x03f20432
   11738:	ldr	r0, [sp, #32]
   1173a:	str	r3, [sp, #40]	; 0x28
   1173c:	negs	r0, r0
   1173e:	str	r0, [sp, #32]
   11740:	ldr	r3, [sp, #12]
   11742:	orr.w	r3, r3, #4
   11746:	str	r3, [sp, #12]
   11748:	ldrb.w	r3, [r8]
   1174c:	b.n	11674 <_svfprintf_r+0xb4>
   1174e:	ldr	r0, [sp, #40]	; 0x28
   11750:	mov	fp, r5
   11752:	movs	r1, #0
   11754:	ldr	r4, [r0, #0]
   11756:	strb.w	r1, [sp, #111]	; 0x6f
   1175a:	adds	r7, r0, #4
   1175c:	ldr	r0, [sp, #12]
   1175e:	movs	r3, #48	; 0x30
   11760:	movs	r2, #120	; 0x78
   11762:	cmp	fp, r1
   11764:	strb.w	r3, [sp, #112]	; 0x70
   11768:	mov.w	r5, #0
   1176c:	strb.w	r2, [sp, #113]	; 0x71
   11770:	orr.w	r3, r0, #2
   11774:	blt.w	11f24 <_svfprintf_r+0x964>
   11778:	bic.w	r3, r0, #128	; 0x80
   1177c:	orr.w	r3, r3, #2
   11780:	str	r3, [sp, #12]
   11782:	orrs.w	r3, r4, r5
   11786:	str	r7, [sp, #40]	; 0x28
   11788:	beq.w	11ed0 <_svfprintf_r+0x910>
   1178c:	mov	r7, r1
   1178e:	str	r2, [sp, #52]	; 0x34
   11790:	ldr	r0, [pc, #252]	; (11890 <_svfprintf_r+0x2d0>)
   11792:	b.n	11d62 <_svfprintf_r+0x7a2>
   11794:	add	r2, sp, #140	; 0x8c
   11796:	ldr	r1, [sp, #20]
   11798:	ldr	r0, [sp, #24]
   1179a:	bl	14748 <__ssprint_r>
   1179e:	cbnz	r0, 117b4 <_svfprintf_r+0x1f4>
   117a0:	add.w	r9, sp, #192	; 0xc0
   117a4:	b.n	1164c <_svfprintf_r+0x8c>
   117a6:	ldr	r3, [sp, #148]	; 0x94
   117a8:	cbz	r3, 117b4 <_svfprintf_r+0x1f4>
   117aa:	ldr	r0, [sp, #24]
   117ac:	ldr	r1, [sp, #20]
   117ae:	add	r2, sp, #140	; 0x8c
   117b0:	bl	14748 <__ssprint_r>
   117b4:	ldr	r3, [sp, #20]
   117b6:	ldrh	r3, [r3, #12]
   117b8:	tst.w	r3, #64	; 0x40
   117bc:	ldr	r3, [sp, #28]
   117be:	it	ne
   117c0:	movne.w	r3, #4294967295
   117c4:	mov	r0, r3
   117c6:	add	sp, #260	; 0x104
   117c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117cc:	str	r3, [sp, #52]	; 0x34
   117ce:	mov	fp, r5
   117d0:	cmp	r2, #0
   117d2:	bne.w	12c3c <_svfprintf_r+0x167c>
   117d6:	ldr	r2, [sp, #12]
   117d8:	ands.w	r3, r2, #32
   117dc:	beq.w	11c6c <_svfprintf_r+0x6ac>
   117e0:	ldr	r7, [sp, #40]	; 0x28
   117e2:	adds	r7, #7
   117e4:	bic.w	r3, r7, #7
   117e8:	movs	r7, #0
   117ea:	add.w	r1, r3, #8
   117ee:	cmp	fp, r7
   117f0:	str	r1, [sp, #40]	; 0x28
   117f2:	ldrd	r4, r5, [r3]
   117f6:	strb.w	r7, [sp, #111]	; 0x6f
   117fa:	blt.w	126c2 <_svfprintf_r+0x1102>
   117fe:	bic.w	r3, r2, #128	; 0x80
   11802:	str	r3, [sp, #12]
   11804:	orrs.w	r3, r4, r5
   11808:	beq.w	11f14 <_svfprintf_r+0x954>
   1180c:	add	r6, sp, #192	; 0xc0
   1180e:	lsrs	r2, r4, #3
   11810:	orr.w	r2, r2, r5, lsl #29
   11814:	lsrs	r1, r5, #3
   11816:	and.w	r3, r4, #7
   1181a:	mov	r5, r1
   1181c:	mov	r4, r2
   1181e:	adds	r3, #48	; 0x30
   11820:	orrs.w	r2, r4, r5
   11824:	strb.w	r3, [r6, #-1]!
   11828:	bne.n	1180e <_svfprintf_r+0x24e>
   1182a:	ldr	r2, [sp, #12]
   1182c:	lsls	r1, r2, #31
   1182e:	bpl.w	11950 <_svfprintf_r+0x390>
   11832:	cmp	r3, #48	; 0x30
   11834:	beq.w	11950 <_svfprintf_r+0x390>
   11838:	movs	r2, #48	; 0x30
   1183a:	subs	r3, r6, #1
   1183c:	strb.w	r2, [r6, #-1]
   11840:	add	r2, sp, #192	; 0xc0
   11842:	subs	r2, r2, r3
   11844:	str	r2, [sp, #36]	; 0x24
   11846:	mov	r6, r3
   11848:	b.n	11956 <_svfprintf_r+0x396>
   1184a:	ldrb.w	r3, [r8]
   1184e:	cmp	r3, #42	; 0x2a
   11850:	add.w	r4, r8, #1
   11854:	beq.w	12c20 <_svfprintf_r+0x1660>
   11858:	sub.w	r0, r3, #48	; 0x30
   1185c:	cmp	r0, #9
   1185e:	it	ls
   11860:	movls	r5, #0
   11862:	bhi.w	12b72 <_svfprintf_r+0x15b2>
   11866:	ldrb.w	r3, [r4], #1
   1186a:	add.w	r5, r5, r5, lsl #2
   1186e:	add.w	r5, r0, r5, lsl #1
   11872:	sub.w	r0, r3, #48	; 0x30
   11876:	cmp	r0, #9
   11878:	bls.n	11866 <_svfprintf_r+0x2a6>
   1187a:	orr.w	r5, r5, r5, asr #31
   1187e:	mov	r8, r4
   11880:	b.n	11678 <_svfprintf_r+0xb8>
   11882:	nop
   11884:	nop.w
	...
   11890:	.word	0x000152bc
   11894:	.word	0x00015288
   11898:	ldr	r3, [sp, #12]
   1189a:	orr.w	r3, r3, #128	; 0x80
   1189e:	str	r3, [sp, #12]
   118a0:	ldrb.w	r3, [r8]
   118a4:	b.n	11674 <_svfprintf_r+0xb4>
   118a6:	sub.w	r0, r3, #48	; 0x30
   118aa:	movs	r3, #0
   118ac:	mov	r4, r3
   118ae:	ldrb.w	r3, [r8], #1
   118b2:	add.w	r4, r4, r4, lsl #2
   118b6:	add.w	r4, r0, r4, lsl #1
   118ba:	sub.w	r0, r3, #48	; 0x30
   118be:	cmp	r0, #9
   118c0:	bls.n	118ae <_svfprintf_r+0x2ee>
   118c2:	str	r4, [sp, #32]
   118c4:	b.n	11678 <_svfprintf_r+0xb8>
   118c6:	str	r3, [sp, #52]	; 0x34
   118c8:	mov	fp, r5
   118ca:	cmp	r2, #0
   118cc:	bne.w	12c58 <_svfprintf_r+0x1698>
   118d0:	ldr	r3, [sp, #12]
   118d2:	orr.w	r3, r3, #16
   118d6:	str	r3, [sp, #12]
   118d8:	ldr	r3, [sp, #12]
   118da:	lsls	r4, r3, #26
   118dc:	bpl.w	1234e <_svfprintf_r+0xd8e>
   118e0:	ldr	r7, [sp, #40]	; 0x28
   118e2:	adds	r7, #7
   118e4:	bic.w	r7, r7, #7
   118e8:	ldrd	r2, r3, [r7]
   118ec:	add.w	r1, r7, #8
   118f0:	str	r1, [sp, #40]	; 0x28
   118f2:	mov	r4, r2
   118f4:	mov	r5, r3
   118f6:	cmp	r2, #0
   118f8:	sbcs.w	r3, r3, #0
   118fc:	blt.w	123c4 <_svfprintf_r+0xe04>
   11900:	cmp.w	fp, #0
   11904:	ldrb.w	r7, [sp, #111]	; 0x6f
   11908:	blt.w	1238a <_svfprintf_r+0xdca>
   1190c:	ldr	r3, [sp, #12]
   1190e:	bic.w	r3, r3, #128	; 0x80
   11912:	str	r3, [sp, #12]
   11914:	orrs.w	r3, r4, r5
   11918:	beq.w	11cec <_svfprintf_r+0x72c>
   1191c:	cmp	r5, #0
   1191e:	it	eq
   11920:	cmpeq	r4, #10
   11922:	bcc.w	11cf6 <_svfprintf_r+0x736>
   11926:	add	r6, sp, #192	; 0xc0
   11928:	mov	r0, r4
   1192a:	mov	r1, r5
   1192c:	movs	r2, #10
   1192e:	movs	r3, #0
   11930:	bl	10254 <__aeabi_uldivmod>
   11934:	adds	r2, #48	; 0x30
   11936:	strb.w	r2, [r6, #-1]!
   1193a:	mov	r0, r4
   1193c:	mov	r1, r5
   1193e:	movs	r3, #0
   11940:	movs	r2, #10
   11942:	bl	10254 <__aeabi_uldivmod>
   11946:	mov	r4, r0
   11948:	mov	r5, r1
   1194a:	orrs.w	r3, r4, r5
   1194e:	bne.n	11928 <_svfprintf_r+0x368>
   11950:	add	r3, sp, #192	; 0xc0
   11952:	subs	r3, r3, r6
   11954:	str	r3, [sp, #36]	; 0x24
   11956:	ldr	r3, [sp, #36]	; 0x24
   11958:	cmp	r3, fp
   1195a:	it	lt
   1195c:	movlt	r3, fp
   1195e:	str	r3, [sp, #16]
   11960:	movs	r3, #0
   11962:	str	r3, [sp, #60]	; 0x3c
   11964:	cbz	r7, 1196c <_svfprintf_r+0x3ac>
   11966:	ldr	r3, [sp, #16]
   11968:	adds	r3, #1
   1196a:	str	r3, [sp, #16]
   1196c:	ldr	r3, [sp, #12]
   1196e:	ands.w	r3, r3, #2
   11972:	str	r3, [sp, #44]	; 0x2c
   11974:	beq.n	1197c <_svfprintf_r+0x3bc>
   11976:	ldr	r3, [sp, #16]
   11978:	adds	r3, #2
   1197a:	str	r3, [sp, #16]
   1197c:	ldr	r3, [sp, #12]
   1197e:	ands.w	r3, r3, #132	; 0x84
   11982:	str	r3, [sp, #48]	; 0x30
   11984:	bne.w	11f3e <_svfprintf_r+0x97e>
   11988:	ldr	r3, [sp, #32]
   1198a:	ldr	r2, [sp, #16]
   1198c:	subs	r5, r3, r2
   1198e:	cmp	r5, #0
   11990:	ble.w	11f3e <_svfprintf_r+0x97e>
   11994:	cmp	r5, #16
   11996:	ldr	r1, [sp, #148]	; 0x94
   11998:	ldr	r2, [sp, #144]	; 0x90
   1199a:	ldr	r7, [pc, #672]	; (11c3c <_svfprintf_r+0x67c>)
   1199c:	ble.n	119ee <_svfprintf_r+0x42e>
   1199e:	str	r6, [sp, #80]	; 0x50
   119a0:	mov	r0, r9
   119a2:	movs	r4, #16
   119a4:	mov	r9, r7
   119a6:	ldr	r6, [sp, #20]
   119a8:	mov	r7, r5
   119aa:	ldr	r5, [sp, #24]
   119ac:	b.n	119b8 <_svfprintf_r+0x3f8>
   119ae:	subs	r7, #16
   119b0:	cmp	r7, #16
   119b2:	add.w	r0, r0, #8
   119b6:	ble.n	119e6 <_svfprintf_r+0x426>
   119b8:	adds	r2, #1
   119ba:	ldr	r3, [pc, #640]	; (11c3c <_svfprintf_r+0x67c>)
   119bc:	str	r2, [sp, #144]	; 0x90
   119be:	adds	r1, #16
   119c0:	cmp	r2, #7
   119c2:	str	r1, [sp, #148]	; 0x94
   119c4:	stmia.w	r0, {r3, r4}
   119c8:	ble.n	119ae <_svfprintf_r+0x3ee>
   119ca:	add	r2, sp, #140	; 0x8c
   119cc:	mov	r1, r6
   119ce:	mov	r0, r5
   119d0:	bl	14748 <__ssprint_r>
   119d4:	cmp	r0, #0
   119d6:	bne.w	117b4 <_svfprintf_r+0x1f4>
   119da:	subs	r7, #16
   119dc:	cmp	r7, #16
   119de:	ldr	r1, [sp, #148]	; 0x94
   119e0:	ldr	r2, [sp, #144]	; 0x90
   119e2:	add	r0, sp, #192	; 0xc0
   119e4:	bgt.n	119b8 <_svfprintf_r+0x3f8>
   119e6:	ldr	r6, [sp, #80]	; 0x50
   119e8:	mov	r5, r7
   119ea:	mov	r7, r9
   119ec:	mov	r9, r0
   119ee:	adds	r2, #1
   119f0:	adds	r4, r5, r1
   119f2:	cmp	r2, #7
   119f4:	str	r4, [sp, #148]	; 0x94
   119f6:	str	r2, [sp, #144]	; 0x90
   119f8:	str.w	r7, [r9]
   119fc:	str.w	r5, [r9, #4]
   11a00:	bgt.w	1225e <_svfprintf_r+0xc9e>
   11a04:	ldrb.w	r7, [sp, #111]	; 0x6f
   11a08:	add.w	r9, r9, #8
   11a0c:	cbz	r7, 11a2c <_svfprintf_r+0x46c>
   11a0e:	ldr	r3, [sp, #144]	; 0x90
   11a10:	adds	r3, #1
   11a12:	adds	r4, #1
   11a14:	add.w	r1, sp, #111	; 0x6f
   11a18:	movs	r2, #1
   11a1a:	cmp	r3, #7
   11a1c:	str	r4, [sp, #148]	; 0x94
   11a1e:	str	r3, [sp, #144]	; 0x90
   11a20:	stmia.w	r9, {r1, r2}
   11a24:	bgt.w	12172 <_svfprintf_r+0xbb2>
   11a28:	add.w	r9, r9, #8
   11a2c:	ldr	r3, [sp, #44]	; 0x2c
   11a2e:	cbz	r3, 11a4c <_svfprintf_r+0x48c>
   11a30:	ldr	r3, [sp, #144]	; 0x90
   11a32:	adds	r3, #1
   11a34:	adds	r4, #2
   11a36:	add	r1, sp, #112	; 0x70
   11a38:	movs	r2, #2
   11a3a:	cmp	r3, #7
   11a3c:	str	r4, [sp, #148]	; 0x94
   11a3e:	str	r3, [sp, #144]	; 0x90
   11a40:	stmia.w	r9, {r1, r2}
   11a44:	bgt.w	1218a <_svfprintf_r+0xbca>
   11a48:	add.w	r9, r9, #8
   11a4c:	ldr	r3, [sp, #48]	; 0x30
   11a4e:	cmp	r3, #128	; 0x80
   11a50:	beq.w	12016 <_svfprintf_r+0xa56>
   11a54:	ldr	r3, [sp, #36]	; 0x24
   11a56:	rsb	r7, r3, fp
   11a5a:	cmp	r7, #0
   11a5c:	ble.n	11ac6 <_svfprintf_r+0x506>
   11a5e:	ldr	r2, [pc, #480]	; (11c40 <_svfprintf_r+0x680>)
   11a60:	ldr	r3, [sp, #144]	; 0x90
   11a62:	str	r2, [sp, #44]	; 0x2c
   11a64:	cmp	r7, #16
   11a66:	ble.n	11aae <_svfprintf_r+0x4ee>
   11a68:	mov	r2, r4
   11a6a:	mov.w	fp, #16
   11a6e:	ldr	r5, [sp, #24]
   11a70:	ldr	r4, [sp, #20]
   11a72:	b.n	11a7e <_svfprintf_r+0x4be>
   11a74:	subs	r7, #16
   11a76:	cmp	r7, #16
   11a78:	add.w	r9, r9, #8
   11a7c:	ble.n	11aac <_svfprintf_r+0x4ec>
   11a7e:	adds	r3, #1
   11a80:	adds	r2, #16
   11a82:	cmp	r3, #7
   11a84:	str	r2, [sp, #148]	; 0x94
   11a86:	str	r3, [sp, #144]	; 0x90
   11a88:	stmia.w	r9, {sl, fp}
   11a8c:	ble.n	11a74 <_svfprintf_r+0x4b4>
   11a8e:	add	r2, sp, #140	; 0x8c
   11a90:	mov	r1, r4
   11a92:	mov	r0, r5
   11a94:	bl	14748 <__ssprint_r>
   11a98:	cmp	r0, #0
   11a9a:	bne.w	117b4 <_svfprintf_r+0x1f4>
   11a9e:	subs	r7, #16
   11aa0:	cmp	r7, #16
   11aa2:	ldr	r2, [sp, #148]	; 0x94
   11aa4:	ldr	r3, [sp, #144]	; 0x90
   11aa6:	add.w	r9, sp, #192	; 0xc0
   11aaa:	bgt.n	11a7e <_svfprintf_r+0x4be>
   11aac:	mov	r4, r2
   11aae:	adds	r3, #1
   11ab0:	ldr	r2, [sp, #44]	; 0x2c
   11ab2:	str	r3, [sp, #144]	; 0x90
   11ab4:	add	r4, r7
   11ab6:	cmp	r3, #7
   11ab8:	str	r4, [sp, #148]	; 0x94
   11aba:	stmia.w	r9, {r2, r7}
   11abe:	bgt.w	1215a <_svfprintf_r+0xb9a>
   11ac2:	add.w	r9, r9, #8
   11ac6:	ldr	r3, [sp, #12]
   11ac8:	lsls	r2, r3, #23
   11aca:	bmi.w	11f42 <_svfprintf_r+0x982>
   11ace:	ldr	r3, [sp, #144]	; 0x90
   11ad0:	ldr	r1, [sp, #36]	; 0x24
   11ad2:	str.w	r6, [r9]
   11ad6:	adds	r3, #1
   11ad8:	add	r4, r1
   11ada:	cmp	r3, #7
   11adc:	str	r4, [sp, #148]	; 0x94
   11ade:	str.w	r1, [r9, #4]
   11ae2:	str	r3, [sp, #144]	; 0x90
   11ae4:	bgt.w	1212e <_svfprintf_r+0xb6e>
   11ae8:	add.w	r9, r9, #8
   11aec:	ldr	r3, [sp, #12]
   11aee:	lsls	r1, r3, #29
   11af0:	bpl.n	11b72 <_svfprintf_r+0x5b2>
   11af2:	ldr	r3, [sp, #32]
   11af4:	ldr	r2, [sp, #16]
   11af6:	subs	r5, r3, r2
   11af8:	cmp	r5, #0
   11afa:	ble.n	11b72 <_svfprintf_r+0x5b2>
   11afc:	cmp	r5, #16
   11afe:	ldr	r3, [sp, #144]	; 0x90
   11b00:	ldr	r7, [pc, #312]	; (11c3c <_svfprintf_r+0x67c>)
   11b02:	ble.n	11b4c <_svfprintf_r+0x58c>
   11b04:	mov	r2, r4
   11b06:	movs	r6, #16
   11b08:	ldr.w	fp, [sp, #24]
   11b0c:	ldr	r4, [sp, #20]
   11b0e:	b.n	11b1a <_svfprintf_r+0x55a>
   11b10:	subs	r5, #16
   11b12:	cmp	r5, #16
   11b14:	add.w	r9, r9, #8
   11b18:	ble.n	11b4a <_svfprintf_r+0x58a>
   11b1a:	adds	r3, #1
   11b1c:	ldr	r1, [pc, #284]	; (11c3c <_svfprintf_r+0x67c>)
   11b1e:	str	r3, [sp, #144]	; 0x90
   11b20:	adds	r2, #16
   11b22:	cmp	r3, #7
   11b24:	str	r2, [sp, #148]	; 0x94
   11b26:	stmia.w	r9, {r1, r6}
   11b2a:	ble.n	11b10 <_svfprintf_r+0x550>
   11b2c:	add	r2, sp, #140	; 0x8c
   11b2e:	mov	r1, r4
   11b30:	mov	r0, fp
   11b32:	bl	14748 <__ssprint_r>
   11b36:	cmp	r0, #0
   11b38:	bne.w	117b4 <_svfprintf_r+0x1f4>
   11b3c:	subs	r5, #16
   11b3e:	cmp	r5, #16
   11b40:	ldr	r2, [sp, #148]	; 0x94
   11b42:	ldr	r3, [sp, #144]	; 0x90
   11b44:	add.w	r9, sp, #192	; 0xc0
   11b48:	bgt.n	11b1a <_svfprintf_r+0x55a>
   11b4a:	mov	r4, r2
   11b4c:	adds	r3, #1
   11b4e:	add	r4, r5
   11b50:	cmp	r3, #7
   11b52:	str	r4, [sp, #148]	; 0x94
   11b54:	str	r3, [sp, #144]	; 0x90
   11b56:	str.w	r7, [r9]
   11b5a:	str.w	r5, [r9, #4]
   11b5e:	ble.n	11b72 <_svfprintf_r+0x5b2>
   11b60:	add	r2, sp, #140	; 0x8c
   11b62:	ldr	r1, [sp, #20]
   11b64:	ldr	r0, [sp, #24]
   11b66:	bl	14748 <__ssprint_r>
   11b6a:	cmp	r0, #0
   11b6c:	bne.w	117b4 <_svfprintf_r+0x1f4>
   11b70:	ldr	r4, [sp, #148]	; 0x94
   11b72:	ldr	r3, [sp, #28]
   11b74:	ldr	r2, [sp, #32]
   11b76:	ldr	r1, [sp, #16]
   11b78:	cmp	r2, r1
   11b7a:	ite	ge
   11b7c:	addge	r3, r3, r2
   11b7e:	addlt	r3, r3, r1
   11b80:	str	r3, [sp, #28]
   11b82:	cmp	r4, #0
   11b84:	bne.w	12146 <_svfprintf_r+0xb86>
   11b88:	movs	r3, #0
   11b8a:	str	r3, [sp, #144]	; 0x90
   11b8c:	add.w	r9, sp, #192	; 0xc0
   11b90:	b.n	1160e <_svfprintf_r+0x4e>
   11b92:	str	r3, [sp, #52]	; 0x34
   11b94:	mov	fp, r5
   11b96:	cmp	r2, #0
   11b98:	bne.w	12c60 <_svfprintf_r+0x16a0>
   11b9c:	ldr	r3, [sp, #12]
   11b9e:	ldr	r7, [sp, #40]	; 0x28
   11ba0:	lsls	r2, r3, #28
   11ba2:	add.w	r7, r7, #7
   11ba6:	bpl.w	12692 <_svfprintf_r+0x10d2>
   11baa:	bic.w	r3, r7, #7
   11bae:	vldr	d7, [r3]
   11bb2:	vstr	d7, [sp, #64]	; 0x40
   11bb6:	add.w	r2, r3, #8
   11bba:	str	r2, [sp, #40]	; 0x28
   11bbc:	ldrd	r1, r2, [sp, #64]	; 0x40
   11bc0:	bic.w	r3, r2, #2147483648	; 0x80000000
   11bc4:	str	r1, [sp, #88]	; 0x58
   11bc6:	str	r3, [sp, #92]	; 0x5c
   11bc8:	ldrd	r4, r5, [sp, #88]	; 0x58
   11bcc:	mov.w	r2, #4294967295
   11bd0:	mov	r0, r4
   11bd2:	mov	r1, r5
   11bd4:	ldr	r3, [pc, #108]	; (11c44 <_svfprintf_r+0x684>)
   11bd6:	bl	101d8 <__aeabi_dcmpun>
   11bda:	cmp	r0, #0
   11bdc:	bne.w	12594 <_svfprintf_r+0xfd4>
   11be0:	mov.w	r2, #4294967295
   11be4:	ldr	r3, [pc, #92]	; (11c44 <_svfprintf_r+0x684>)
   11be6:	mov	r0, r4
   11be8:	mov	r1, r5
   11bea:	bl	1019c <__aeabi_dcmple>
   11bee:	cmp	r0, #0
   11bf0:	bne.w	12594 <_svfprintf_r+0xfd4>
   11bf4:	movs	r2, #0
   11bf6:	movs	r3, #0
   11bf8:	ldrd	r0, r1, [sp, #64]	; 0x40
   11bfc:	bl	10188 <__aeabi_dcmplt>
   11c00:	cmp	r0, #0
   11c02:	bne.w	12aaa <_svfprintf_r+0x14ea>
   11c06:	ldrb.w	r7, [sp, #111]	; 0x6f
   11c0a:	ldr	r6, [pc, #60]	; (11c48 <_svfprintf_r+0x688>)
   11c0c:	ldr	r3, [pc, #60]	; (11c4c <_svfprintf_r+0x68c>)
   11c0e:	ldr	r1, [sp, #12]
   11c10:	bic.w	r1, r1, #128	; 0x80
   11c14:	str	r1, [sp, #12]
   11c16:	ldr	r1, [sp, #52]	; 0x34
   11c18:	movs	r2, #3
   11c1a:	mov.w	fp, #0
   11c1e:	str	r2, [sp, #16]
   11c20:	cmp	r1, #71	; 0x47
   11c22:	it	le
   11c24:	movle	r6, r3
   11c26:	str	r2, [sp, #36]	; 0x24
   11c28:	str.w	fp, [sp, #60]	; 0x3c
   11c2c:	b.n	11964 <_svfprintf_r+0x3a4>
   11c2e:	ldr	r3, [sp, #12]
   11c30:	orr.w	r3, r3, #8
   11c34:	str	r3, [sp, #12]
   11c36:	ldrb.w	r3, [r8]
   11c3a:	b.n	11674 <_svfprintf_r+0xb4>
   11c3c:	.word	0x000152d8
   11c40:	.word	0x00015288
   11c44:	.word	0x7fefffff
   11c48:	.word	0x0001529c
   11c4c:	.word	0x00015298
   11c50:	str	r3, [sp, #52]	; 0x34
   11c52:	mov	fp, r5
   11c54:	cmp	r2, #0
   11c56:	bne.w	12c78 <_svfprintf_r+0x16b8>
   11c5a:	ldr	r3, [sp, #12]
   11c5c:	orr.w	r3, r3, #16
   11c60:	str	r3, [sp, #12]
   11c62:	ldr	r2, [sp, #12]
   11c64:	ands.w	r3, r2, #32
   11c68:	bne.w	117e0 <_svfprintf_r+0x220>
   11c6c:	ldr	r1, [sp, #12]
   11c6e:	ands.w	r2, r1, #16
   11c72:	beq.w	1252c <_svfprintf_r+0xf6c>
   11c76:	ldr	r0, [sp, #40]	; 0x28
   11c78:	strb.w	r3, [sp, #111]	; 0x6f
   11c7c:	cmp.w	fp, #0
   11c80:	ldr	r4, [r0, #0]
   11c82:	add.w	r7, r0, #4
   11c86:	mov.w	r5, #0
   11c8a:	blt.w	126c0 <_svfprintf_r+0x1100>
   11c8e:	mov	r2, r1
   11c90:	bic.w	r2, r2, #128	; 0x80
   11c94:	str	r2, [sp, #12]
   11c96:	orrs.w	r2, r4, r5
   11c9a:	str	r7, [sp, #40]	; 0x28
   11c9c:	beq.w	11f14 <_svfprintf_r+0x954>
   11ca0:	mov	r7, r3
   11ca2:	b.n	1180c <_svfprintf_r+0x24c>
   11ca4:	str	r3, [sp, #52]	; 0x34
   11ca6:	mov	fp, r5
   11ca8:	cmp	r2, #0
   11caa:	bne.w	12c70 <_svfprintf_r+0x16b0>
   11cae:	ldr	r3, [sp, #12]
   11cb0:	orr.w	r3, r3, #16
   11cb4:	str	r3, [sp, #12]
   11cb6:	ldr	r2, [sp, #12]
   11cb8:	ands.w	r3, r2, #32
   11cbc:	beq.w	12318 <_svfprintf_r+0xd58>
   11cc0:	ldr	r7, [sp, #40]	; 0x28
   11cc2:	adds	r7, #7
   11cc4:	bic.w	r3, r7, #7
   11cc8:	movs	r7, #0
   11cca:	add.w	r1, r3, #8
   11cce:	cmp	fp, r7
   11cd0:	str	r1, [sp, #40]	; 0x28
   11cd2:	ldrd	r4, r5, [r3]
   11cd6:	strb.w	r7, [sp, #111]	; 0x6f
   11cda:	blt.w	1238a <_svfprintf_r+0xdca>
   11cde:	bic.w	r3, r2, #128	; 0x80
   11ce2:	str	r3, [sp, #12]
   11ce4:	orrs.w	r3, r4, r5
   11ce8:	bne.w	1191c <_svfprintf_r+0x35c>
   11cec:	cmp.w	fp, #0
   11cf0:	beq.w	11ede <_svfprintf_r+0x91e>
   11cf4:	movs	r4, #0
   11cf6:	add	r6, sp, #256	; 0x100
   11cf8:	adds	r4, #48	; 0x30
   11cfa:	strb.w	r4, [r6, #-65]!
   11cfe:	b.n	11950 <_svfprintf_r+0x390>
   11d00:	str	r3, [sp, #52]	; 0x34
   11d02:	mov	fp, r5
   11d04:	cmp	r2, #0
   11d06:	bne.w	12c68 <_svfprintf_r+0x16a8>
   11d0a:	ldr	r3, [sp, #12]
   11d0c:	ldr	r0, [pc, #700]	; (11fcc <_svfprintf_r+0xa0c>)
   11d0e:	lsls	r5, r3, #26
   11d10:	bpl.w	11e7e <_svfprintf_r+0x8be>
   11d14:	ldr	r7, [sp, #40]	; 0x28
   11d16:	adds	r7, #7
   11d18:	bic.w	r3, r7, #7
   11d1c:	ldrd	r4, r5, [r3]
   11d20:	add.w	r2, r3, #8
   11d24:	str	r2, [sp, #40]	; 0x28
   11d26:	ldr	r2, [sp, #12]
   11d28:	ands.w	r7, r2, #1
   11d2c:	beq.w	121a2 <_svfprintf_r+0xbe2>
   11d30:	orrs.w	r3, r4, r5
   11d34:	beq.w	1273c <_svfprintf_r+0x117c>
   11d38:	ldrb.w	r2, [sp, #52]	; 0x34
   11d3c:	strb.w	r2, [sp, #113]	; 0x71
   11d40:	movs	r7, #0
   11d42:	ldr	r2, [sp, #12]
   11d44:	strb.w	r7, [sp, #111]	; 0x6f
   11d48:	movs	r3, #48	; 0x30
   11d4a:	cmp	fp, r7
   11d4c:	strb.w	r3, [sp, #112]	; 0x70
   11d50:	orr.w	r3, r2, #2
   11d54:	blt.w	12ab4 <_svfprintf_r+0x14f4>
   11d58:	bic.w	r3, r2, #128	; 0x80
   11d5c:	orr.w	r3, r3, #2
   11d60:	str	r3, [sp, #12]
   11d62:	add	r6, sp, #192	; 0xc0
   11d64:	lsrs	r3, r4, #4
   11d66:	and.w	r1, r4, #15
   11d6a:	orr.w	r3, r3, r5, lsl #28
   11d6e:	lsrs	r2, r5, #4
   11d70:	mov	r4, r3
   11d72:	mov	r5, r2
   11d74:	ldrb	r3, [r0, r1]
   11d76:	strb.w	r3, [r6, #-1]!
   11d7a:	orrs.w	r3, r4, r5
   11d7e:	bne.n	11d64 <_svfprintf_r+0x7a4>
   11d80:	b.n	11950 <_svfprintf_r+0x390>
   11d82:	ldr	r1, [sp, #40]	; 0x28
   11d84:	str	r3, [sp, #52]	; 0x34
   11d86:	ldr	r2, [r1, #0]
   11d88:	strb.w	r2, [sp, #152]	; 0x98
   11d8c:	movs	r3, #0
   11d8e:	mov	r2, r1
   11d90:	mov	r7, r3
   11d92:	strb.w	r3, [sp, #111]	; 0x6f
   11d96:	adds	r2, #4
   11d98:	movs	r3, #1
   11d9a:	str	r3, [sp, #16]
   11d9c:	mov	fp, r7
   11d9e:	str	r7, [sp, #60]	; 0x3c
   11da0:	str	r2, [sp, #40]	; 0x28
   11da2:	str	r3, [sp, #36]	; 0x24
   11da4:	add	r6, sp, #152	; 0x98
   11da6:	b.n	1196c <_svfprintf_r+0x3ac>
   11da8:	str	r3, [sp, #52]	; 0x34
   11daa:	mov	fp, r5
   11dac:	cmp	r2, #0
   11dae:	beq.w	118d8 <_svfprintf_r+0x318>
   11db2:	strb.w	r1, [sp, #111]	; 0x6f
   11db6:	b.n	118d8 <_svfprintf_r+0x318>
   11db8:	ldr	r3, [sp, #12]
   11dba:	orr.w	r3, r3, #64	; 0x40
   11dbe:	str	r3, [sp, #12]
   11dc0:	ldrb.w	r3, [r8]
   11dc4:	b.n	11674 <_svfprintf_r+0xb4>
   11dc6:	ldrb.w	r3, [r8]
   11dca:	cmp	r1, #0
   11dcc:	bne.w	11674 <_svfprintf_r+0xb4>
   11dd0:	movs	r2, #1
   11dd2:	movs	r1, #32
   11dd4:	b.n	11674 <_svfprintf_r+0xb4>
   11dd6:	ldr	r3, [sp, #12]
   11dd8:	orr.w	r3, r3, #1
   11ddc:	str	r3, [sp, #12]
   11dde:	ldrb.w	r3, [r8]
   11de2:	b.n	11674 <_svfprintf_r+0xb4>
   11de4:	ldr	r4, [sp, #40]	; 0x28
   11de6:	ldr	r3, [r4, #0]
   11de8:	str	r3, [sp, #32]
   11dea:	mov	r0, r3
   11dec:	cmp	r0, #0
   11dee:	mov	r3, r4
   11df0:	add.w	r3, r3, #4
   11df4:	blt.w	11738 <_svfprintf_r+0x178>
   11df8:	str	r3, [sp, #40]	; 0x28
   11dfa:	ldrb.w	r3, [r8]
   11dfe:	b.n	11674 <_svfprintf_r+0xb4>
   11e00:	ldrb.w	r3, [r8]
   11e04:	movs	r2, #1
   11e06:	movs	r1, #43	; 0x2b
   11e08:	b.n	11674 <_svfprintf_r+0xb4>
   11e0a:	ldr	r3, [sp, #12]
   11e0c:	orr.w	r3, r3, #32
   11e10:	str	r3, [sp, #12]
   11e12:	ldrb.w	r3, [r8]
   11e16:	b.n	11674 <_svfprintf_r+0xb4>
   11e18:	ldr	r2, [sp, #40]	; 0x28
   11e1a:	str	r3, [sp, #52]	; 0x34
   11e1c:	ldr	r6, [r2, #0]
   11e1e:	movs	r4, #0
   11e20:	strb.w	r4, [sp, #111]	; 0x6f
   11e24:	adds	r7, r2, #4
   11e26:	cmp	r6, #0
   11e28:	beq.w	12a64 <_svfprintf_r+0x14a4>
   11e2c:	cmp	r5, #0
   11e2e:	blt.w	128f4 <_svfprintf_r+0x1334>
   11e32:	mov	r2, r5
   11e34:	mov	r1, r4
   11e36:	mov	r0, r6
   11e38:	bl	10c20 <memchr>
   11e3c:	cmp	r0, #0
   11e3e:	beq.w	12b08 <_svfprintf_r+0x1548>
   11e42:	subs	r3, r0, r6
   11e44:	str	r3, [sp, #36]	; 0x24
   11e46:	mov	fp, r4
   11e48:	bic.w	r3, r3, r3, asr #31
   11e4c:	str	r7, [sp, #40]	; 0x28
   11e4e:	str	r3, [sp, #16]
   11e50:	str.w	fp, [sp, #60]	; 0x3c
   11e54:	ldrb.w	r7, [sp, #111]	; 0x6f
   11e58:	b.n	11964 <_svfprintf_r+0x3a4>
   11e5a:	str	r3, [sp, #52]	; 0x34
   11e5c:	mov	fp, r5
   11e5e:	cmp	r2, #0
   11e60:	beq.w	11cb6 <_svfprintf_r+0x6f6>
   11e64:	strb.w	r1, [sp, #111]	; 0x6f
   11e68:	b.n	11cb6 <_svfprintf_r+0x6f6>
   11e6a:	str	r3, [sp, #52]	; 0x34
   11e6c:	mov	fp, r5
   11e6e:	cmp	r2, #0
   11e70:	bne.w	12c90 <_svfprintf_r+0x16d0>
   11e74:	ldr	r3, [sp, #12]
   11e76:	ldr	r0, [pc, #344]	; (11fd0 <_svfprintf_r+0xa10>)
   11e78:	lsls	r5, r3, #26
   11e7a:	bmi.w	11d14 <_svfprintf_r+0x754>
   11e7e:	ldr	r3, [sp, #12]
   11e80:	lsls	r4, r3, #27
   11e82:	bpl.w	12702 <_svfprintf_r+0x1142>
   11e86:	ldr	r2, [sp, #40]	; 0x28
   11e88:	mov	r3, r2
   11e8a:	adds	r3, #4
   11e8c:	ldr	r4, [r2, #0]
   11e8e:	str	r3, [sp, #40]	; 0x28
   11e90:	movs	r5, #0
   11e92:	b.n	11d26 <_svfprintf_r+0x766>
   11e94:	ldrb.w	r3, [r8]
   11e98:	cmp	r3, #108	; 0x6c
   11e9a:	beq.w	12822 <_svfprintf_r+0x1262>
   11e9e:	ldr	r0, [sp, #12]
   11ea0:	orr.w	r0, r0, #16
   11ea4:	str	r0, [sp, #12]
   11ea6:	b.w	11674 <_svfprintf_r+0xb4>
   11eaa:	cmp	r2, #0
   11eac:	bne.w	12c88 <_svfprintf_r+0x16c8>
   11eb0:	ldr	r3, [sp, #12]
   11eb2:	lsls	r3, r3, #26
   11eb4:	bpl.w	12566 <_svfprintf_r+0xfa6>
   11eb8:	ldr	r2, [sp, #40]	; 0x28
   11eba:	ldr	r1, [sp, #28]
   11ebc:	ldr	r3, [r2, #0]
   11ebe:	asrs	r5, r1, #31
   11ec0:	mov	r0, r1
   11ec2:	adds	r2, #4
   11ec4:	mov	r1, r5
   11ec6:	str	r2, [sp, #40]	; 0x28
   11ec8:	strd	r0, r1, [r3]
   11ecc:	b.w	1160e <_svfprintf_r+0x4e>
   11ed0:	ldr	r0, [pc, #252]	; (11fd0 <_svfprintf_r+0xa10>)
   11ed2:	str	r2, [sp, #52]	; 0x34
   11ed4:	cmp.w	fp, #0
   11ed8:	bne.w	121c4 <_svfprintf_r+0xc04>
   11edc:	mov	r7, fp
   11ede:	mov.w	fp, #0
   11ee2:	str.w	fp, [sp, #36]	; 0x24
   11ee6:	add	r6, sp, #192	; 0xc0
   11ee8:	b.n	11956 <_svfprintf_r+0x396>
   11eea:	str	r3, [sp, #52]	; 0x34
   11eec:	cmp	r2, #0
   11eee:	bne.w	12c80 <_svfprintf_r+0x16c0>
   11ef2:	ldr	r2, [sp, #52]	; 0x34
   11ef4:	cmp	r2, #0
   11ef6:	beq.w	117a6 <_svfprintf_r+0x1e6>
   11efa:	movs	r3, #0
   11efc:	movs	r1, #1
   11efe:	mov	r7, r3
   11f00:	str	r1, [sp, #16]
   11f02:	strb.w	r2, [sp, #152]	; 0x98
   11f06:	strb.w	r3, [sp, #111]	; 0x6f
   11f0a:	mov	fp, r3
   11f0c:	str	r3, [sp, #60]	; 0x3c
   11f0e:	str	r1, [sp, #36]	; 0x24
   11f10:	add	r6, sp, #152	; 0x98
   11f12:	b.n	1196c <_svfprintf_r+0x3ac>
   11f14:	cmp.w	fp, #0
   11f18:	beq.w	12b38 <_svfprintf_r+0x1578>
   11f1c:	movs	r7, #0
   11f1e:	movs	r4, #0
   11f20:	movs	r5, #0
   11f22:	b.n	1180c <_svfprintf_r+0x24c>
   11f24:	ldr	r0, [pc, #168]	; (11fd0 <_svfprintf_r+0xa10>)
   11f26:	str	r3, [sp, #12]
   11f28:	str	r2, [sp, #52]	; 0x34
   11f2a:	orrs.w	r3, r4, r5
   11f2e:	str	r7, [sp, #40]	; 0x28
   11f30:	mov.w	r7, #0
   11f34:	bne.w	11d62 <_svfprintf_r+0x7a2>
   11f38:	movs	r4, #0
   11f3a:	movs	r5, #0
   11f3c:	b.n	11d62 <_svfprintf_r+0x7a2>
   11f3e:	ldr	r4, [sp, #148]	; 0x94
   11f40:	b.n	11a0c <_svfprintf_r+0x44c>
   11f42:	ldr	r3, [sp, #52]	; 0x34
   11f44:	cmp	r3, #101	; 0x65
   11f46:	ble.w	1209e <_svfprintf_r+0xade>
   11f4a:	movs	r2, #0
   11f4c:	movs	r3, #0
   11f4e:	ldrd	r0, r1, [sp, #64]	; 0x40
   11f52:	bl	10174 <__aeabi_dcmpeq>
   11f56:	cmp	r0, #0
   11f58:	beq.w	121c8 <_svfprintf_r+0xc08>
   11f5c:	ldr	r3, [sp, #144]	; 0x90
   11f5e:	ldr	r2, [pc, #116]	; (11fd4 <_svfprintf_r+0xa14>)
   11f60:	str.w	r2, [r9]
   11f64:	adds	r3, #1
   11f66:	adds	r4, #1
   11f68:	movs	r2, #1
   11f6a:	cmp	r3, #7
   11f6c:	str	r4, [sp, #148]	; 0x94
   11f6e:	str	r3, [sp, #144]	; 0x90
   11f70:	str.w	r2, [r9, #4]
   11f74:	bgt.w	12754 <_svfprintf_r+0x1194>
   11f78:	add.w	r9, r9, #8
   11f7c:	ldr	r3, [sp, #116]	; 0x74
   11f7e:	ldr	r2, [sp, #56]	; 0x38
   11f80:	cmp	r3, r2
   11f82:	blt.n	11f8c <_svfprintf_r+0x9cc>
   11f84:	ldr	r3, [sp, #12]
   11f86:	lsls	r3, r3, #31
   11f88:	bpl.w	11aec <_svfprintf_r+0x52c>
   11f8c:	ldr	r3, [sp, #144]	; 0x90
   11f8e:	ldr	r1, [sp, #72]	; 0x48
   11f90:	ldr	r2, [sp, #76]	; 0x4c
   11f92:	str.w	r2, [r9]
   11f96:	adds	r3, #1
   11f98:	add	r4, r1
   11f9a:	cmp	r3, #7
   11f9c:	str	r4, [sp, #148]	; 0x94
   11f9e:	str.w	r1, [r9, #4]
   11fa2:	str	r3, [sp, #144]	; 0x90
   11fa4:	bgt.w	12836 <_svfprintf_r+0x1276>
   11fa8:	add.w	r9, r9, #8
   11fac:	ldr	r3, [sp, #56]	; 0x38
   11fae:	subs	r5, r3, #1
   11fb0:	cmp	r5, #0
   11fb2:	ble.w	11aec <_svfprintf_r+0x52c>
   11fb6:	ldr	r2, [pc, #32]	; (11fd8 <_svfprintf_r+0xa18>)
   11fb8:	ldr	r3, [sp, #144]	; 0x90
   11fba:	str	r2, [sp, #44]	; 0x2c
   11fbc:	cmp	r5, #16
   11fbe:	ble.w	12394 <_svfprintf_r+0xdd4>
   11fc2:	movs	r6, #16
   11fc4:	ldr	r7, [sp, #24]
   11fc6:	ldr.w	fp, [sp, #20]
   11fca:	b.n	11fe8 <_svfprintf_r+0xa28>
   11fcc:	.word	0x000152a8
   11fd0:	.word	0x000152bc
   11fd4:	.word	0x00015040
   11fd8:	.word	0x00015288
   11fdc:	add.w	r9, r9, #8
   11fe0:	subs	r5, #16
   11fe2:	cmp	r5, #16
   11fe4:	ble.w	12394 <_svfprintf_r+0xdd4>
   11fe8:	adds	r3, #1
   11fea:	adds	r4, #16
   11fec:	cmp	r3, #7
   11fee:	str	r4, [sp, #148]	; 0x94
   11ff0:	str	r3, [sp, #144]	; 0x90
   11ff2:	str.w	sl, [r9]
   11ff6:	str.w	r6, [r9, #4]
   11ffa:	ble.n	11fdc <_svfprintf_r+0xa1c>
   11ffc:	add	r2, sp, #140	; 0x8c
   11ffe:	mov	r1, fp
   12000:	mov	r0, r7
   12002:	bl	14748 <__ssprint_r>
   12006:	cmp	r0, #0
   12008:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1200c:	ldr	r4, [sp, #148]	; 0x94
   1200e:	ldr	r3, [sp, #144]	; 0x90
   12010:	add.w	r9, sp, #192	; 0xc0
   12014:	b.n	11fe0 <_svfprintf_r+0xa20>
   12016:	ldr	r3, [sp, #32]
   12018:	ldr	r2, [sp, #16]
   1201a:	subs	r7, r3, r2
   1201c:	cmp	r7, #0
   1201e:	ble.w	11a54 <_svfprintf_r+0x494>
   12022:	ldr	r2, [pc, #752]	; (12314 <_svfprintf_r+0xd54>)
   12024:	ldr	r3, [sp, #144]	; 0x90
   12026:	str	r2, [sp, #44]	; 0x2c
   12028:	cmp	r7, #16
   1202a:	ble.n	12084 <_svfprintf_r+0xac4>
   1202c:	mov	r2, r9
   1202e:	mov	r1, r4
   12030:	mov	r9, r7
   12032:	movs	r5, #16
   12034:	mov	r7, r6
   12036:	ldr	r4, [sp, #24]
   12038:	ldr	r6, [sp, #20]
   1203a:	b.n	1204a <_svfprintf_r+0xa8a>
   1203c:	sub.w	r9, r9, #16
   12040:	cmp.w	r9, #16
   12044:	add.w	r2, r2, #8
   12048:	ble.n	1207c <_svfprintf_r+0xabc>
   1204a:	adds	r3, #1
   1204c:	adds	r1, #16
   1204e:	cmp	r3, #7
   12050:	str	r1, [sp, #148]	; 0x94
   12052:	str	r3, [sp, #144]	; 0x90
   12054:	str.w	sl, [r2]
   12058:	str	r5, [r2, #4]
   1205a:	ble.n	1203c <_svfprintf_r+0xa7c>
   1205c:	add	r2, sp, #140	; 0x8c
   1205e:	mov	r1, r6
   12060:	mov	r0, r4
   12062:	bl	14748 <__ssprint_r>
   12066:	cmp	r0, #0
   12068:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1206c:	sub.w	r9, r9, #16
   12070:	cmp.w	r9, #16
   12074:	ldr	r1, [sp, #148]	; 0x94
   12076:	ldr	r3, [sp, #144]	; 0x90
   12078:	add	r2, sp, #192	; 0xc0
   1207a:	bgt.n	1204a <_svfprintf_r+0xa8a>
   1207c:	mov	r6, r7
   1207e:	mov	r4, r1
   12080:	mov	r7, r9
   12082:	mov	r9, r2
   12084:	adds	r3, #1
   12086:	ldr	r2, [sp, #44]	; 0x2c
   12088:	str	r3, [sp, #144]	; 0x90
   1208a:	add	r4, r7
   1208c:	cmp	r3, #7
   1208e:	str	r4, [sp, #148]	; 0x94
   12090:	stmia.w	r9, {r2, r7}
   12094:	bgt.w	12512 <_svfprintf_r+0xf52>
   12098:	add.w	r9, r9, #8
   1209c:	b.n	11a54 <_svfprintf_r+0x494>
   1209e:	ldr	r3, [sp, #56]	; 0x38
   120a0:	ldr	r5, [sp, #144]	; 0x90
   120a2:	cmp	r3, #1
   120a4:	ble.w	124bc <_svfprintf_r+0xefc>
   120a8:	adds	r5, #1
   120aa:	adds	r4, #1
   120ac:	movs	r3, #1
   120ae:	cmp	r5, #7
   120b0:	str	r4, [sp, #148]	; 0x94
   120b2:	str	r5, [sp, #144]	; 0x90
   120b4:	str.w	r6, [r9]
   120b8:	str.w	r3, [r9, #4]
   120bc:	bgt.w	124de <_svfprintf_r+0xf1e>
   120c0:	add.w	r9, r9, #8
   120c4:	ldr	r2, [sp, #72]	; 0x48
   120c6:	ldr	r3, [sp, #76]	; 0x4c
   120c8:	str.w	r3, [r9]
   120cc:	adds	r5, #1
   120ce:	add	r4, r2
   120d0:	cmp	r5, #7
   120d2:	str	r4, [sp, #148]	; 0x94
   120d4:	str	r5, [sp, #144]	; 0x90
   120d6:	str.w	r2, [r9, #4]
   120da:	bgt.w	124f8 <_svfprintf_r+0xf38>
   120de:	add.w	r9, r9, #8
   120e2:	movs	r3, #0
   120e4:	movs	r2, #0
   120e6:	ldrd	r0, r1, [sp, #64]	; 0x40
   120ea:	bl	10174 <__aeabi_dcmpeq>
   120ee:	ldr	r3, [sp, #56]	; 0x38
   120f0:	cmp	r0, #0
   120f2:	bne.w	1227c <_svfprintf_r+0xcbc>
   120f6:	subs	r3, #1
   120f8:	adds	r5, #1
   120fa:	adds	r6, #1
   120fc:	add	r4, r3
   120fe:	cmp	r5, #7
   12100:	str	r5, [sp, #144]	; 0x90
   12102:	str	r4, [sp, #148]	; 0x94
   12104:	str.w	r6, [r9]
   12108:	str.w	r3, [r9, #4]
   1210c:	bgt.w	122fa <_svfprintf_r+0xd3a>
   12110:	add.w	r9, r9, #8
   12114:	ldr	r2, [sp, #84]	; 0x54
   12116:	str.w	r2, [r9, #4]
   1211a:	adds	r5, #1
   1211c:	add	r4, r2
   1211e:	add	r3, sp, #124	; 0x7c
   12120:	cmp	r5, #7
   12122:	str	r4, [sp, #148]	; 0x94
   12124:	str	r5, [sp, #144]	; 0x90
   12126:	str.w	r3, [r9]
   1212a:	ble.w	11ae8 <_svfprintf_r+0x528>
   1212e:	add	r2, sp, #140	; 0x8c
   12130:	ldr	r1, [sp, #20]
   12132:	ldr	r0, [sp, #24]
   12134:	bl	14748 <__ssprint_r>
   12138:	cmp	r0, #0
   1213a:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1213e:	ldr	r4, [sp, #148]	; 0x94
   12140:	add.w	r9, sp, #192	; 0xc0
   12144:	b.n	11aec <_svfprintf_r+0x52c>
   12146:	add	r2, sp, #140	; 0x8c
   12148:	ldr	r1, [sp, #20]
   1214a:	ldr	r0, [sp, #24]
   1214c:	bl	14748 <__ssprint_r>
   12150:	cmp	r0, #0
   12152:	beq.w	11b88 <_svfprintf_r+0x5c8>
   12156:	b.w	117b4 <_svfprintf_r+0x1f4>
   1215a:	add	r2, sp, #140	; 0x8c
   1215c:	ldr	r1, [sp, #20]
   1215e:	ldr	r0, [sp, #24]
   12160:	bl	14748 <__ssprint_r>
   12164:	cmp	r0, #0
   12166:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1216a:	ldr	r4, [sp, #148]	; 0x94
   1216c:	add.w	r9, sp, #192	; 0xc0
   12170:	b.n	11ac6 <_svfprintf_r+0x506>
   12172:	add	r2, sp, #140	; 0x8c
   12174:	ldr	r1, [sp, #20]
   12176:	ldr	r0, [sp, #24]
   12178:	bl	14748 <__ssprint_r>
   1217c:	cmp	r0, #0
   1217e:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12182:	ldr	r4, [sp, #148]	; 0x94
   12184:	add.w	r9, sp, #192	; 0xc0
   12188:	b.n	11a2c <_svfprintf_r+0x46c>
   1218a:	add	r2, sp, #140	; 0x8c
   1218c:	ldr	r1, [sp, #20]
   1218e:	ldr	r0, [sp, #24]
   12190:	bl	14748 <__ssprint_r>
   12194:	cmp	r0, #0
   12196:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1219a:	ldr	r4, [sp, #148]	; 0x94
   1219c:	add.w	r9, sp, #192	; 0xc0
   121a0:	b.n	11a4c <_svfprintf_r+0x48c>
   121a2:	cmp.w	fp, #0
   121a6:	strb.w	r7, [sp, #111]	; 0x6f
   121aa:	blt.w	1276c <_svfprintf_r+0x11ac>
   121ae:	bic.w	r3, r2, #128	; 0x80
   121b2:	str	r3, [sp, #12]
   121b4:	orrs.w	r3, r4, r5
   121b8:	bne.w	11d62 <_svfprintf_r+0x7a2>
   121bc:	cmp.w	fp, #0
   121c0:	beq.w	11edc <_svfprintf_r+0x91c>
   121c4:	movs	r7, #0
   121c6:	b.n	11f38 <_svfprintf_r+0x978>
   121c8:	ldr	r5, [sp, #116]	; 0x74
   121ca:	cmp	r5, #0
   121cc:	ble.w	12772 <_svfprintf_r+0x11b2>
   121d0:	ldr	r3, [sp, #60]	; 0x3c
   121d2:	ldr	r2, [sp, #56]	; 0x38
   121d4:	cmp	r3, r2
   121d6:	it	ge
   121d8:	movge	r3, r2
   121da:	cmp	r3, #0
   121dc:	mov	r5, r3
   121de:	ble.n	121fc <_svfprintf_r+0xc3c>
   121e0:	ldr	r3, [sp, #144]	; 0x90
   121e2:	str.w	r6, [r9]
   121e6:	adds	r3, #1
   121e8:	add	r4, r5
   121ea:	cmp	r3, #7
   121ec:	str	r4, [sp, #148]	; 0x94
   121ee:	str.w	r5, [r9, #4]
   121f2:	str	r3, [sp, #144]	; 0x90
   121f4:	bgt.w	1294a <_svfprintf_r+0x138a>
   121f8:	add.w	r9, r9, #8
   121fc:	ldr	r3, [sp, #60]	; 0x3c
   121fe:	cmp	r5, #0
   12200:	it	ge
   12202:	subge	r3, r3, r5
   12204:	cmp	r3, #0
   12206:	mov	r5, r3
   12208:	ble.w	123fc <_svfprintf_r+0xe3c>
   1220c:	ldr	r2, [pc, #260]	; (12314 <_svfprintf_r+0xd54>)
   1220e:	ldr	r3, [sp, #144]	; 0x90
   12210:	str	r2, [sp, #44]	; 0x2c
   12212:	cmp	r5, #16
   12214:	ble.w	1271e <_svfprintf_r+0x115e>
   12218:	mov	r2, r4
   1221a:	movs	r7, #16
   1221c:	ldr.w	fp, [sp, #24]
   12220:	ldr	r4, [sp, #20]
   12222:	b.n	12230 <_svfprintf_r+0xc70>
   12224:	add.w	r9, r9, #8
   12228:	subs	r5, #16
   1222a:	cmp	r5, #16
   1222c:	ble.w	1271c <_svfprintf_r+0x115c>
   12230:	adds	r3, #1
   12232:	adds	r2, #16
   12234:	cmp	r3, #7
   12236:	str	r2, [sp, #148]	; 0x94
   12238:	str	r3, [sp, #144]	; 0x90
   1223a:	str.w	sl, [r9]
   1223e:	str.w	r7, [r9, #4]
   12242:	ble.n	12224 <_svfprintf_r+0xc64>
   12244:	add	r2, sp, #140	; 0x8c
   12246:	mov	r1, r4
   12248:	mov	r0, fp
   1224a:	bl	14748 <__ssprint_r>
   1224e:	cmp	r0, #0
   12250:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12254:	ldr	r2, [sp, #148]	; 0x94
   12256:	ldr	r3, [sp, #144]	; 0x90
   12258:	add.w	r9, sp, #192	; 0xc0
   1225c:	b.n	12228 <_svfprintf_r+0xc68>
   1225e:	add	r2, sp, #140	; 0x8c
   12260:	ldr	r1, [sp, #20]
   12262:	ldr	r0, [sp, #24]
   12264:	bl	14748 <__ssprint_r>
   12268:	cmp	r0, #0
   1226a:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1226e:	ldrb.w	r7, [sp, #111]	; 0x6f
   12272:	ldr	r4, [sp, #148]	; 0x94
   12274:	add.w	r9, sp, #192	; 0xc0
   12278:	b.w	11a0c <_svfprintf_r+0x44c>
   1227c:	subs	r6, r3, #1
   1227e:	cmp	r6, #0
   12280:	ble.w	12114 <_svfprintf_r+0xb54>
   12284:	ldr	r3, [pc, #140]	; (12314 <_svfprintf_r+0xd54>)
   12286:	str	r3, [sp, #44]	; 0x2c
   12288:	cmp	r6, #16
   1228a:	ble.n	122e6 <_svfprintf_r+0xd26>
   1228c:	str.w	r8, [sp, #36]	; 0x24
   12290:	movs	r7, #16
   12292:	mov	r8, r6
   12294:	ldr.w	fp, [sp, #24]
   12298:	ldr	r6, [sp, #20]
   1229a:	b.n	122aa <_svfprintf_r+0xcea>
   1229c:	sub.w	r8, r8, #16
   122a0:	cmp.w	r8, #16
   122a4:	add.w	r9, r9, #8
   122a8:	ble.n	122e0 <_svfprintf_r+0xd20>
   122aa:	adds	r5, #1
   122ac:	adds	r4, #16
   122ae:	cmp	r5, #7
   122b0:	str	r4, [sp, #148]	; 0x94
   122b2:	str	r5, [sp, #144]	; 0x90
   122b4:	str.w	sl, [r9]
   122b8:	str.w	r7, [r9, #4]
   122bc:	ble.n	1229c <_svfprintf_r+0xcdc>
   122be:	add	r2, sp, #140	; 0x8c
   122c0:	mov	r1, r6
   122c2:	mov	r0, fp
   122c4:	bl	14748 <__ssprint_r>
   122c8:	cmp	r0, #0
   122ca:	bne.w	117b4 <_svfprintf_r+0x1f4>
   122ce:	sub.w	r8, r8, #16
   122d2:	cmp.w	r8, #16
   122d6:	ldr	r4, [sp, #148]	; 0x94
   122d8:	ldr	r5, [sp, #144]	; 0x90
   122da:	add.w	r9, sp, #192	; 0xc0
   122de:	bgt.n	122aa <_svfprintf_r+0xcea>
   122e0:	mov	r6, r8
   122e2:	ldr.w	r8, [sp, #36]	; 0x24
   122e6:	ldr	r3, [sp, #44]	; 0x2c
   122e8:	adds	r5, #1
   122ea:	add	r4, r6
   122ec:	cmp	r5, #7
   122ee:	str	r4, [sp, #148]	; 0x94
   122f0:	str	r5, [sp, #144]	; 0x90
   122f2:	stmia.w	r9, {r3, r6}
   122f6:	ble.w	12110 <_svfprintf_r+0xb50>
   122fa:	add	r2, sp, #140	; 0x8c
   122fc:	ldr	r1, [sp, #20]
   122fe:	ldr	r0, [sp, #24]
   12300:	bl	14748 <__ssprint_r>
   12304:	cmp	r0, #0
   12306:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1230a:	ldr	r4, [sp, #148]	; 0x94
   1230c:	ldr	r5, [sp, #144]	; 0x90
   1230e:	add.w	r9, sp, #192	; 0xc0
   12312:	b.n	12114 <_svfprintf_r+0xb54>
   12314:	.word	0x00015288
   12318:	ldr	r1, [sp, #12]
   1231a:	ands.w	r2, r1, #16
   1231e:	beq.w	126c8 <_svfprintf_r+0x1108>
   12322:	ldr	r0, [sp, #40]	; 0x28
   12324:	strb.w	r3, [sp, #111]	; 0x6f
   12328:	cmp.w	fp, #0
   1232c:	ldr	r4, [r0, #0]
   1232e:	add.w	r7, r0, #4
   12332:	mov.w	r5, #0
   12336:	blt.n	12386 <_svfprintf_r+0xdc6>
   12338:	mov	r2, r1
   1233a:	bic.w	r2, r2, #128	; 0x80
   1233e:	str	r2, [sp, #12]
   12340:	orrs.w	r2, r4, r5
   12344:	str	r7, [sp, #40]	; 0x28
   12346:	mov	r7, r3
   12348:	bne.w	1191c <_svfprintf_r+0x35c>
   1234c:	b.n	11cec <_svfprintf_r+0x72c>
   1234e:	ldr	r3, [sp, #12]
   12350:	lsls	r0, r3, #27
   12352:	bmi.n	123aa <_svfprintf_r+0xdea>
   12354:	ldr	r3, [sp, #12]
   12356:	lsls	r1, r3, #25
   12358:	bpl.n	123aa <_svfprintf_r+0xdea>
   1235a:	ldr	r1, [sp, #40]	; 0x28
   1235c:	ldrsh.w	r4, [r1]
   12360:	adds	r1, #4
   12362:	asrs	r5, r4, #31
   12364:	mov	r2, r4
   12366:	mov	r3, r5
   12368:	str	r1, [sp, #40]	; 0x28
   1236a:	b.w	118f6 <_svfprintf_r+0x336>
   1236e:	ldr	r1, [sp, #40]	; 0x28
   12370:	strb.w	r3, [sp, #111]	; 0x6f
   12374:	cmp.w	fp, #0
   12378:	ldr	r4, [r1, #0]
   1237a:	add.w	r7, r1, #4
   1237e:	mov.w	r5, #0
   12382:	bge.w	1281e <_svfprintf_r+0x125e>
   12386:	str	r7, [sp, #40]	; 0x28
   12388:	mov	r7, r3
   1238a:	orrs.w	r3, r4, r5
   1238e:	bne.w	1191c <_svfprintf_r+0x35c>
   12392:	b.n	11cf6 <_svfprintf_r+0x736>
   12394:	adds	r3, #1
   12396:	ldr	r2, [sp, #44]	; 0x2c
   12398:	str	r3, [sp, #144]	; 0x90
   1239a:	add	r4, r5
   1239c:	cmp	r3, #7
   1239e:	str	r4, [sp, #148]	; 0x94
   123a0:	stmia.w	r9, {r2, r5}
   123a4:	ble.w	11ae8 <_svfprintf_r+0x528>
   123a8:	b.n	1212e <_svfprintf_r+0xb6e>
   123aa:	ldr	r2, [sp, #40]	; 0x28
   123ac:	ldr	r4, [r2, #0]
   123ae:	mov	r3, r2
   123b0:	adds	r3, #4
   123b2:	asrs	r5, r4, #31
   123b4:	mov	r2, r4
   123b6:	str	r3, [sp, #40]	; 0x28
   123b8:	cmp	r2, #0
   123ba:	mov	r3, r5
   123bc:	sbcs.w	r3, r3, #0
   123c0:	bge.w	11900 <_svfprintf_r+0x340>
   123c4:	negs	r4, r4
   123c6:	mov.w	r7, #45	; 0x2d
   123ca:	sbc.w	r5, r5, r5, lsl #1
   123ce:	cmp.w	fp, #0
   123d2:	strb.w	r7, [sp, #111]	; 0x6f
   123d6:	blt.w	1191c <_svfprintf_r+0x35c>
   123da:	ldr	r3, [sp, #12]
   123dc:	bic.w	r3, r3, #128	; 0x80
   123e0:	str	r3, [sp, #12]
   123e2:	b.w	1191c <_svfprintf_r+0x35c>
   123e6:	add	r2, sp, #140	; 0x8c
   123e8:	ldr	r1, [sp, #20]
   123ea:	ldr	r0, [sp, #24]
   123ec:	bl	14748 <__ssprint_r>
   123f0:	cmp	r0, #0
   123f2:	bne.w	117b4 <_svfprintf_r+0x1f4>
   123f6:	ldr	r4, [sp, #148]	; 0x94
   123f8:	add.w	r9, sp, #192	; 0xc0
   123fc:	ldr	r2, [sp, #60]	; 0x3c
   123fe:	ldr	r3, [sp, #116]	; 0x74
   12400:	add	r2, r6
   12402:	mov	r7, r2
   12404:	ldr	r2, [sp, #56]	; 0x38
   12406:	cmp	r3, r2
   12408:	blt.n	1249a <_svfprintf_r+0xeda>
   1240a:	ldr	r2, [sp, #12]
   1240c:	lsls	r5, r2, #31
   1240e:	bmi.n	1249a <_svfprintf_r+0xeda>
   12410:	ldr	r1, [sp, #56]	; 0x38
   12412:	add	r6, r1
   12414:	subs	r5, r6, r7
   12416:	subs	r3, r1, r3
   12418:	cmp	r5, r3
   1241a:	it	ge
   1241c:	movge	r5, r3
   1241e:	cmp	r5, #0
   12420:	mov	r6, r5
   12422:	ble.n	12440 <_svfprintf_r+0xe80>
   12424:	ldr	r2, [sp, #144]	; 0x90
   12426:	str.w	r7, [r9]
   1242a:	adds	r2, #1
   1242c:	add	r4, r5
   1242e:	cmp	r2, #7
   12430:	str	r4, [sp, #148]	; 0x94
   12432:	str.w	r5, [r9, #4]
   12436:	str	r2, [sp, #144]	; 0x90
   12438:	bgt.w	12a38 <_svfprintf_r+0x1478>
   1243c:	add.w	r9, r9, #8
   12440:	cmp	r6, #0
   12442:	ite	ge
   12444:	subge	r5, r3, r6
   12446:	movlt	r5, r3
   12448:	cmp	r5, #0
   1244a:	ble.w	11aec <_svfprintf_r+0x52c>
   1244e:	ldr	r2, [pc, #744]	; (12738 <_svfprintf_r+0x1178>)
   12450:	ldr	r3, [sp, #144]	; 0x90
   12452:	str	r2, [sp, #44]	; 0x2c
   12454:	cmp	r5, #16
   12456:	ble.n	12394 <_svfprintf_r+0xdd4>
   12458:	movs	r6, #16
   1245a:	ldr	r7, [sp, #24]
   1245c:	ldr.w	fp, [sp, #20]
   12460:	b.n	1246c <_svfprintf_r+0xeac>
   12462:	add.w	r9, r9, #8
   12466:	subs	r5, #16
   12468:	cmp	r5, #16
   1246a:	ble.n	12394 <_svfprintf_r+0xdd4>
   1246c:	adds	r3, #1
   1246e:	adds	r4, #16
   12470:	cmp	r3, #7
   12472:	str	r4, [sp, #148]	; 0x94
   12474:	str	r3, [sp, #144]	; 0x90
   12476:	str.w	sl, [r9]
   1247a:	str.w	r6, [r9, #4]
   1247e:	ble.n	12462 <_svfprintf_r+0xea2>
   12480:	add	r2, sp, #140	; 0x8c
   12482:	mov	r1, fp
   12484:	mov	r0, r7
   12486:	bl	14748 <__ssprint_r>
   1248a:	cmp	r0, #0
   1248c:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12490:	ldr	r4, [sp, #148]	; 0x94
   12492:	ldr	r3, [sp, #144]	; 0x90
   12494:	add.w	r9, sp, #192	; 0xc0
   12498:	b.n	12466 <_svfprintf_r+0xea6>
   1249a:	ldr	r2, [sp, #144]	; 0x90
   1249c:	ldr	r0, [sp, #72]	; 0x48
   1249e:	ldr	r1, [sp, #76]	; 0x4c
   124a0:	str.w	r1, [r9]
   124a4:	adds	r2, #1
   124a6:	add	r4, r0
   124a8:	cmp	r2, #7
   124aa:	str	r4, [sp, #148]	; 0x94
   124ac:	str.w	r0, [r9, #4]
   124b0:	str	r2, [sp, #144]	; 0x90
   124b2:	bgt.w	12a1e <_svfprintf_r+0x145e>
   124b6:	add.w	r9, r9, #8
   124ba:	b.n	12410 <_svfprintf_r+0xe50>
   124bc:	ldr	r3, [sp, #12]
   124be:	lsls	r0, r3, #31
   124c0:	bmi.w	120a8 <_svfprintf_r+0xae8>
   124c4:	adds	r5, #1
   124c6:	adds	r4, #1
   124c8:	movs	r3, #1
   124ca:	cmp	r5, #7
   124cc:	str	r4, [sp, #148]	; 0x94
   124ce:	str	r5, [sp, #144]	; 0x90
   124d0:	str.w	r6, [r9]
   124d4:	str.w	r3, [r9, #4]
   124d8:	ble.w	12110 <_svfprintf_r+0xb50>
   124dc:	b.n	122fa <_svfprintf_r+0xd3a>
   124de:	add	r2, sp, #140	; 0x8c
   124e0:	ldr	r1, [sp, #20]
   124e2:	ldr	r0, [sp, #24]
   124e4:	bl	14748 <__ssprint_r>
   124e8:	cmp	r0, #0
   124ea:	bne.w	117b4 <_svfprintf_r+0x1f4>
   124ee:	ldr	r4, [sp, #148]	; 0x94
   124f0:	ldr	r5, [sp, #144]	; 0x90
   124f2:	add.w	r9, sp, #192	; 0xc0
   124f6:	b.n	120c4 <_svfprintf_r+0xb04>
   124f8:	add	r2, sp, #140	; 0x8c
   124fa:	ldr	r1, [sp, #20]
   124fc:	ldr	r0, [sp, #24]
   124fe:	bl	14748 <__ssprint_r>
   12502:	cmp	r0, #0
   12504:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12508:	ldr	r4, [sp, #148]	; 0x94
   1250a:	ldr	r5, [sp, #144]	; 0x90
   1250c:	add.w	r9, sp, #192	; 0xc0
   12510:	b.n	120e2 <_svfprintf_r+0xb22>
   12512:	add	r2, sp, #140	; 0x8c
   12514:	ldr	r1, [sp, #20]
   12516:	ldr	r0, [sp, #24]
   12518:	bl	14748 <__ssprint_r>
   1251c:	cmp	r0, #0
   1251e:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12522:	ldr	r4, [sp, #148]	; 0x94
   12524:	add.w	r9, sp, #192	; 0xc0
   12528:	b.w	11a54 <_svfprintf_r+0x494>
   1252c:	ldr	r1, [sp, #12]
   1252e:	ands.w	r3, r1, #64	; 0x40
   12532:	beq.w	126a8 <_svfprintf_r+0x10e8>
   12536:	ldr	r0, [sp, #40]	; 0x28
   12538:	strb.w	r2, [sp, #111]	; 0x6f
   1253c:	mov	r3, r0
   1253e:	cmp.w	fp, #0
   12542:	add.w	r3, r3, #4
   12546:	ldrh	r4, [r0, #0]
   12548:	mov.w	r5, #0
   1254c:	blt.w	128d0 <_svfprintf_r+0x1310>
   12550:	bic.w	r1, r1, #128	; 0x80
   12554:	str	r1, [sp, #12]
   12556:	orrs.w	r1, r4, r5
   1255a:	str	r3, [sp, #40]	; 0x28
   1255c:	beq.w	11f14 <_svfprintf_r+0x954>
   12560:	mov	r7, r2
   12562:	b.w	1180c <_svfprintf_r+0x24c>
   12566:	ldr	r3, [sp, #12]
   12568:	lsls	r7, r3, #27
   1256a:	bmi.n	12584 <_svfprintf_r+0xfc4>
   1256c:	ldr	r3, [sp, #12]
   1256e:	lsls	r6, r3, #25
   12570:	bpl.n	12584 <_svfprintf_r+0xfc4>
   12572:	ldr	r2, [sp, #40]	; 0x28
   12574:	ldr	r3, [r2, #0]
   12576:	adds	r2, #4
   12578:	str	r2, [sp, #40]	; 0x28
   1257a:	ldrh.w	r2, [sp, #28]
   1257e:	strh	r2, [r3, #0]
   12580:	b.w	1160e <_svfprintf_r+0x4e>
   12584:	ldr	r2, [sp, #40]	; 0x28
   12586:	ldr	r3, [r2, #0]
   12588:	adds	r2, #4
   1258a:	str	r2, [sp, #40]	; 0x28
   1258c:	ldr	r2, [sp, #28]
   1258e:	str	r2, [r3, #0]
   12590:	b.w	1160e <_svfprintf_r+0x4e>
   12594:	ldrd	r0, r1, [sp, #64]	; 0x40
   12598:	mov	r2, r0
   1259a:	mov	r3, r1
   1259c:	bl	101d8 <__aeabi_dcmpun>
   125a0:	cmp	r0, #0
   125a2:	bne.w	12ba0 <_svfprintf_r+0x15e0>
   125a6:	ldr	r3, [sp, #52]	; 0x34
   125a8:	cmp.w	fp, #4294967295
   125ac:	bic.w	r7, r3, #32
   125b0:	beq.w	12a82 <_svfprintf_r+0x14c2>
   125b4:	cmp	r7, #71	; 0x47
   125b6:	beq.w	128be <_svfprintf_r+0x12fe>
   125ba:	ldr	r3, [sp, #68]	; 0x44
   125bc:	ldr	r2, [sp, #12]
   125be:	cmp	r3, #0
   125c0:	orr.w	r2, r2, #256	; 0x100
   125c4:	str	r2, [sp, #44]	; 0x2c
   125c6:	blt.w	12aba <_svfprintf_r+0x14fa>
   125ca:	vldr	d7, [sp, #64]	; 0x40
   125ce:	vstr	d7, [sp, #96]	; 0x60
   125d2:	movs	r3, #0
   125d4:	str	r3, [sp, #16]
   125d6:	ldr	r3, [sp, #52]	; 0x34
   125d8:	cmp	r3, #102	; 0x66
   125da:	beq.w	12a88 <_svfprintf_r+0x14c8>
   125de:	cmp	r3, #70	; 0x46
   125e0:	beq.w	1286e <_svfprintf_r+0x12ae>
   125e4:	cmp	r7, #69	; 0x45
   125e6:	ite	eq
   125e8:	addeq.w	r5, fp, #1
   125ec:	movne	r5, fp
   125ee:	add	r2, sp, #132	; 0x84
   125f0:	add	r3, sp, #120	; 0x78
   125f2:	str	r2, [sp, #4]
   125f4:	str	r3, [sp, #0]
   125f6:	mov	r2, r5
   125f8:	add	r3, sp, #116	; 0x74
   125fa:	movs	r1, #2
   125fc:	vldr	d0, [sp, #96]	; 0x60
   12600:	ldr	r0, [sp, #24]
   12602:	bl	12f40 <_dtoa_r>
   12606:	ldr	r3, [sp, #52]	; 0x34
   12608:	cmp	r3, #103	; 0x67
   1260a:	mov	r6, r0
   1260c:	bne.w	12ae6 <_svfprintf_r+0x1526>
   12610:	ldr	r3, [sp, #12]
   12612:	lsls	r2, r3, #31
   12614:	bpl.w	12b8a <_svfprintf_r+0x15ca>
   12618:	adds	r4, r6, r5
   1261a:	movs	r2, #0
   1261c:	movs	r3, #0
   1261e:	ldrd	r0, r1, [sp, #96]	; 0x60
   12622:	bl	10174 <__aeabi_dcmpeq>
   12626:	cmp	r0, #0
   12628:	bne.w	12946 <_svfprintf_r+0x1386>
   1262c:	ldr	r3, [sp, #132]	; 0x84
   1262e:	cmp	r4, r3
   12630:	bls.n	12640 <_svfprintf_r+0x1080>
   12632:	movs	r1, #48	; 0x30
   12634:	adds	r2, r3, #1
   12636:	str	r2, [sp, #132]	; 0x84
   12638:	strb	r1, [r3, #0]
   1263a:	ldr	r3, [sp, #132]	; 0x84
   1263c:	cmp	r4, r3
   1263e:	bhi.n	12634 <_svfprintf_r+0x1074>
   12640:	subs	r3, r3, r6
   12642:	cmp	r7, #71	; 0x47
   12644:	str	r3, [sp, #56]	; 0x38
   12646:	beq.w	12938 <_svfprintf_r+0x1378>
   1264a:	ldr	r3, [sp, #52]	; 0x34
   1264c:	cmp	r3, #101	; 0x65
   1264e:	ble.w	12b04 <_svfprintf_r+0x1544>
   12652:	ldr	r3, [sp, #52]	; 0x34
   12654:	cmp	r3, #102	; 0x66
   12656:	ldr	r3, [sp, #116]	; 0x74
   12658:	str	r3, [sp, #60]	; 0x3c
   1265a:	beq.w	12b1e <_svfprintf_r+0x155e>
   1265e:	ldr	r2, [sp, #60]	; 0x3c
   12660:	ldr	r1, [sp, #56]	; 0x38
   12662:	cmp	r2, r1
   12664:	blt.w	12acc <_svfprintf_r+0x150c>
   12668:	ldr	r3, [sp, #12]
   1266a:	lsls	r1, r3, #31
   1266c:	bmi.w	12b8e <_svfprintf_r+0x15ce>
   12670:	bic.w	r3, r2, r2, asr #31
   12674:	str	r2, [sp, #36]	; 0x24
   12676:	movs	r2, #103	; 0x67
   12678:	str	r2, [sp, #52]	; 0x34
   1267a:	ldr	r2, [sp, #16]
   1267c:	cmp	r2, #0
   1267e:	bne.w	128e0 <_svfprintf_r+0x1320>
   12682:	str	r3, [sp, #16]
   12684:	ldr	r3, [sp, #44]	; 0x2c
   12686:	str	r3, [sp, #12]
   12688:	mov	fp, r2
   1268a:	ldrb.w	r7, [sp, #111]	; 0x6f
   1268e:	b.w	11964 <_svfprintf_r+0x3a4>
   12692:	bic.w	r7, r7, #7
   12696:	vldr	d7, [r7]
   1269a:	add.w	r3, r7, #8
   1269e:	vstr	d7, [sp, #64]	; 0x40
   126a2:	str	r3, [sp, #40]	; 0x28
   126a4:	b.w	11bbc <_svfprintf_r+0x5fc>
   126a8:	ldr	r1, [sp, #40]	; 0x28
   126aa:	strb.w	r3, [sp, #111]	; 0x6f
   126ae:	cmp.w	fp, #0
   126b2:	ldr	r4, [r1, #0]
   126b4:	add.w	r7, r1, #4
   126b8:	mov.w	r5, #0
   126bc:	bge.w	12818 <_svfprintf_r+0x1258>
   126c0:	str	r7, [sp, #40]	; 0x28
   126c2:	movs	r7, #0
   126c4:	b.w	1180c <_svfprintf_r+0x24c>
   126c8:	ldr	r1, [sp, #12]
   126ca:	ands.w	r3, r1, #64	; 0x40
   126ce:	beq.w	1236e <_svfprintf_r+0xdae>
   126d2:	ldr	r0, [sp, #40]	; 0x28
   126d4:	strb.w	r2, [sp, #111]	; 0x6f
   126d8:	mov	r3, r0
   126da:	cmp.w	fp, #0
   126de:	add.w	r3, r3, #4
   126e2:	ldrh	r4, [r0, #0]
   126e4:	mov.w	r5, #0
   126e8:	blt.w	128ca <_svfprintf_r+0x130a>
   126ec:	bic.w	r1, r1, #128	; 0x80
   126f0:	str	r1, [sp, #12]
   126f2:	orrs.w	r1, r4, r5
   126f6:	str	r3, [sp, #40]	; 0x28
   126f8:	mov	r7, r2
   126fa:	bne.w	1191c <_svfprintf_r+0x35c>
   126fe:	b.w	11cec <_svfprintf_r+0x72c>
   12702:	ldr	r3, [sp, #12]
   12704:	ldr	r2, [sp, #40]	; 0x28
   12706:	tst.w	r3, #64	; 0x40
   1270a:	mov	r3, r2
   1270c:	beq.w	128d4 <_svfprintf_r+0x1314>
   12710:	adds	r3, #4
   12712:	ldrh	r4, [r2, #0]
   12714:	str	r3, [sp, #40]	; 0x28
   12716:	movs	r5, #0
   12718:	b.w	11d26 <_svfprintf_r+0x766>
   1271c:	mov	r4, r2
   1271e:	adds	r3, #1
   12720:	ldr	r2, [sp, #44]	; 0x2c
   12722:	str	r3, [sp, #144]	; 0x90
   12724:	add	r4, r5
   12726:	cmp	r3, #7
   12728:	str	r4, [sp, #148]	; 0x94
   1272a:	stmia.w	r9, {r2, r5}
   1272e:	bgt.w	123e6 <_svfprintf_r+0xe26>
   12732:	add.w	r9, r9, #8
   12736:	b.n	123fc <_svfprintf_r+0xe3c>
   12738:	.word	0x00015288
   1273c:	movs	r7, #0
   1273e:	cmp	fp, r7
   12740:	strb.w	r7, [sp, #111]	; 0x6f
   12744:	blt.w	11f38 <_svfprintf_r+0x978>
   12748:	ldr	r3, [sp, #12]
   1274a:	bic.w	r3, r3, #128	; 0x80
   1274e:	str	r3, [sp, #12]
   12750:	b.w	11ed4 <_svfprintf_r+0x914>
   12754:	add	r2, sp, #140	; 0x8c
   12756:	ldr	r1, [sp, #20]
   12758:	ldr	r0, [sp, #24]
   1275a:	bl	14748 <__ssprint_r>
   1275e:	cmp	r0, #0
   12760:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12764:	ldr	r4, [sp, #148]	; 0x94
   12766:	add.w	r9, sp, #192	; 0xc0
   1276a:	b.n	11f7c <_svfprintf_r+0x9bc>
   1276c:	ldr	r7, [sp, #40]	; 0x28
   1276e:	b.w	11f2a <_svfprintf_r+0x96a>
   12772:	ldr	r3, [sp, #144]	; 0x90
   12774:	ldr	r2, [pc, #736]	; (12a58 <_svfprintf_r+0x1498>)
   12776:	str.w	r2, [r9]
   1277a:	adds	r3, #1
   1277c:	adds	r4, #1
   1277e:	movs	r2, #1
   12780:	cmp	r3, #7
   12782:	str	r4, [sp, #148]	; 0x94
   12784:	str	r3, [sp, #144]	; 0x90
   12786:	str.w	r2, [r9, #4]
   1278a:	bgt.w	128a4 <_svfprintf_r+0x12e4>
   1278e:	add.w	r9, r9, #8
   12792:	cbnz	r5, 127a0 <_svfprintf_r+0x11e0>
   12794:	ldr	r3, [sp, #56]	; 0x38
   12796:	cbnz	r3, 127a0 <_svfprintf_r+0x11e0>
   12798:	ldr	r3, [sp, #12]
   1279a:	lsls	r7, r3, #31
   1279c:	bpl.w	11aec <_svfprintf_r+0x52c>
   127a0:	ldr	r3, [sp, #144]	; 0x90
   127a2:	ldr	r1, [sp, #72]	; 0x48
   127a4:	ldr	r2, [sp, #76]	; 0x4c
   127a6:	str.w	r2, [r9]
   127aa:	adds	r3, #1
   127ac:	add	r4, r1
   127ae:	cmp	r3, #7
   127b0:	str	r4, [sp, #148]	; 0x94
   127b2:	str.w	r1, [r9, #4]
   127b6:	str	r3, [sp, #144]	; 0x90
   127b8:	bgt.w	12b56 <_svfprintf_r+0x1596>
   127bc:	add.w	r9, r9, #8
   127c0:	negs	r5, r5
   127c2:	cmp	r5, #0
   127c4:	ble.w	1291c <_svfprintf_r+0x135c>
   127c8:	ldr	r2, [pc, #656]	; (12a5c <_svfprintf_r+0x149c>)
   127ca:	str	r2, [sp, #44]	; 0x2c
   127cc:	cmp	r5, #16
   127ce:	ble.w	12964 <_svfprintf_r+0x13a4>
   127d2:	mov	r2, r4
   127d4:	movs	r7, #16
   127d6:	ldr.w	fp, [sp, #24]
   127da:	ldr	r4, [sp, #20]
   127dc:	b.n	127ea <_svfprintf_r+0x122a>
   127de:	add.w	r9, r9, #8
   127e2:	subs	r5, #16
   127e4:	cmp	r5, #16
   127e6:	ble.w	12962 <_svfprintf_r+0x13a2>
   127ea:	adds	r3, #1
   127ec:	adds	r2, #16
   127ee:	cmp	r3, #7
   127f0:	str	r2, [sp, #148]	; 0x94
   127f2:	str	r3, [sp, #144]	; 0x90
   127f4:	str.w	sl, [r9]
   127f8:	str.w	r7, [r9, #4]
   127fc:	ble.n	127de <_svfprintf_r+0x121e>
   127fe:	add	r2, sp, #140	; 0x8c
   12800:	mov	r1, r4
   12802:	mov	r0, fp
   12804:	bl	14748 <__ssprint_r>
   12808:	cmp	r0, #0
   1280a:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1280e:	ldr	r2, [sp, #148]	; 0x94
   12810:	ldr	r3, [sp, #144]	; 0x90
   12812:	add.w	r9, sp, #192	; 0xc0
   12816:	b.n	127e2 <_svfprintf_r+0x1222>
   12818:	ldr	r2, [sp, #12]
   1281a:	b.w	11c90 <_svfprintf_r+0x6d0>
   1281e:	ldr	r2, [sp, #12]
   12820:	b.n	1233a <_svfprintf_r+0xd7a>
   12822:	ldr	r3, [sp, #12]
   12824:	orr.w	r3, r3, #32
   12828:	str	r3, [sp, #12]
   1282a:	add.w	r8, r8, #1
   1282e:	ldrb.w	r3, [r8]
   12832:	b.w	11674 <_svfprintf_r+0xb4>
   12836:	add	r2, sp, #140	; 0x8c
   12838:	ldr	r1, [sp, #20]
   1283a:	ldr	r0, [sp, #24]
   1283c:	bl	14748 <__ssprint_r>
   12840:	cmp	r0, #0
   12842:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12846:	ldr	r4, [sp, #148]	; 0x94
   12848:	add.w	r9, sp, #192	; 0xc0
   1284c:	b.w	11fac <_svfprintf_r+0x9ec>
   12850:	movs	r1, #64	; 0x40
   12852:	ldr	r0, [sp, #24]
   12854:	bl	10678 <_malloc_r>
   12858:	ldr	r2, [sp, #20]
   1285a:	str	r0, [r2, #0]
   1285c:	str	r0, [r2, #16]
   1285e:	cmp	r0, #0
   12860:	beq.w	12c4a <_svfprintf_r+0x168a>
   12864:	ldr	r2, [sp, #20]
   12866:	movs	r3, #64	; 0x40
   12868:	str	r3, [r2, #20]
   1286a:	b.w	115ee <_svfprintf_r+0x2e>
   1286e:	add	r2, sp, #132	; 0x84
   12870:	add	r3, sp, #120	; 0x78
   12872:	str	r2, [sp, #4]
   12874:	str	r3, [sp, #0]
   12876:	mov	r2, fp
   12878:	add	r3, sp, #116	; 0x74
   1287a:	movs	r1, #3
   1287c:	vldr	d0, [sp, #96]	; 0x60
   12880:	ldr	r0, [sp, #24]
   12882:	bl	12f40 <_dtoa_r>
   12886:	mov	r5, fp
   12888:	mov	r6, r0
   1288a:	ldr	r3, [sp, #52]	; 0x34
   1288c:	cmp	r3, #70	; 0x46
   1288e:	add.w	r4, r6, r5
   12892:	bne.w	1261a <_svfprintf_r+0x105a>
   12896:	ldrb	r3, [r6, #0]
   12898:	cmp	r3, #48	; 0x30
   1289a:	beq.w	12bac <_svfprintf_r+0x15ec>
   1289e:	ldr	r5, [sp, #116]	; 0x74
   128a0:	add	r4, r5
   128a2:	b.n	1261a <_svfprintf_r+0x105a>
   128a4:	add	r2, sp, #140	; 0x8c
   128a6:	ldr	r1, [sp, #20]
   128a8:	ldr	r0, [sp, #24]
   128aa:	bl	14748 <__ssprint_r>
   128ae:	cmp	r0, #0
   128b0:	bne.w	117b4 <_svfprintf_r+0x1f4>
   128b4:	ldr	r5, [sp, #116]	; 0x74
   128b6:	ldr	r4, [sp, #148]	; 0x94
   128b8:	add.w	r9, sp, #192	; 0xc0
   128bc:	b.n	12792 <_svfprintf_r+0x11d2>
   128be:	cmp.w	fp, #0
   128c2:	it	eq
   128c4:	moveq.w	fp, #1
   128c8:	b.n	125ba <_svfprintf_r+0xffa>
   128ca:	str	r3, [sp, #40]	; 0x28
   128cc:	mov	r7, r2
   128ce:	b.n	1238a <_svfprintf_r+0xdca>
   128d0:	str	r3, [sp, #40]	; 0x28
   128d2:	b.n	126c2 <_svfprintf_r+0x1102>
   128d4:	adds	r3, #4
   128d6:	ldr	r4, [r2, #0]
   128d8:	str	r3, [sp, #40]	; 0x28
   128da:	movs	r5, #0
   128dc:	b.w	11d26 <_svfprintf_r+0x766>
   128e0:	movs	r7, #45	; 0x2d
   128e2:	str	r3, [sp, #16]
   128e4:	ldr	r3, [sp, #44]	; 0x2c
   128e6:	str	r3, [sp, #12]
   128e8:	strb.w	r7, [sp, #111]	; 0x6f
   128ec:	mov.w	fp, #0
   128f0:	b.w	11966 <_svfprintf_r+0x3a6>
   128f4:	mov	r0, r6
   128f6:	bl	11440 <strlen>
   128fa:	mov	fp, r4
   128fc:	mov	r3, r0
   128fe:	str	r0, [sp, #36]	; 0x24
   12900:	b.w	11e48 <_svfprintf_r+0x888>
   12904:	add	r2, sp, #140	; 0x8c
   12906:	ldr	r1, [sp, #20]
   12908:	ldr	r0, [sp, #24]
   1290a:	bl	14748 <__ssprint_r>
   1290e:	cmp	r0, #0
   12910:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12914:	ldr	r4, [sp, #148]	; 0x94
   12916:	ldr	r3, [sp, #144]	; 0x90
   12918:	add.w	r9, sp, #192	; 0xc0
   1291c:	ldr	r1, [sp, #56]	; 0x38
   1291e:	str.w	r6, [r9]
   12922:	adds	r3, #1
   12924:	add	r4, r1
   12926:	cmp	r3, #7
   12928:	str	r4, [sp, #148]	; 0x94
   1292a:	str	r3, [sp, #144]	; 0x90
   1292c:	str.w	r1, [r9, #4]
   12930:	ble.w	11ae8 <_svfprintf_r+0x528>
   12934:	b.w	1212e <_svfprintf_r+0xb6e>
   12938:	ldr	r3, [sp, #116]	; 0x74
   1293a:	adds	r5, r3, #3
   1293c:	blt.n	1297c <_svfprintf_r+0x13bc>
   1293e:	cmp	fp, r3
   12940:	blt.n	1297c <_svfprintf_r+0x13bc>
   12942:	str	r3, [sp, #60]	; 0x3c
   12944:	b.n	1265e <_svfprintf_r+0x109e>
   12946:	mov	r3, r4
   12948:	b.n	12640 <_svfprintf_r+0x1080>
   1294a:	add	r2, sp, #140	; 0x8c
   1294c:	ldr	r1, [sp, #20]
   1294e:	ldr	r0, [sp, #24]
   12950:	bl	14748 <__ssprint_r>
   12954:	cmp	r0, #0
   12956:	bne.w	117b4 <_svfprintf_r+0x1f4>
   1295a:	ldr	r4, [sp, #148]	; 0x94
   1295c:	add.w	r9, sp, #192	; 0xc0
   12960:	b.n	121fc <_svfprintf_r+0xc3c>
   12962:	mov	r4, r2
   12964:	adds	r3, #1
   12966:	ldr	r2, [sp, #44]	; 0x2c
   12968:	str	r3, [sp, #144]	; 0x90
   1296a:	add	r4, r5
   1296c:	cmp	r3, #7
   1296e:	str	r4, [sp, #148]	; 0x94
   12970:	stmia.w	r9, {r2, r5}
   12974:	bgt.n	12904 <_svfprintf_r+0x1344>
   12976:	add.w	r9, r9, #8
   1297a:	b.n	1291c <_svfprintf_r+0x135c>
   1297c:	ldr	r2, [sp, #52]	; 0x34
   1297e:	subs	r2, #2
   12980:	str	r2, [sp, #52]	; 0x34
   12982:	subs	r3, #1
   12984:	cmp	r3, #0
   12986:	ldrb.w	r2, [sp, #52]	; 0x34
   1298a:	str	r3, [sp, #116]	; 0x74
   1298c:	it	lt
   1298e:	neglt	r3, r3
   12990:	strb.w	r2, [sp, #124]	; 0x7c
   12994:	ite	lt
   12996:	movlt	r2, #45	; 0x2d
   12998:	movge	r2, #43	; 0x2b
   1299a:	cmp	r3, #9
   1299c:	strb.w	r2, [sp, #125]	; 0x7d
   129a0:	ble.w	12b7a <_svfprintf_r+0x15ba>
   129a4:	add.w	r0, sp, #139	; 0x8b
   129a8:	mov	r4, r0
   129aa:	ldr	r2, [pc, #180]	; (12a60 <_svfprintf_r+0x14a0>)
   129ac:	smull	r2, r1, r2, r3
   129b0:	asrs	r2, r3, #31
   129b2:	rsb	r2, r2, r1, asr #2
   129b6:	add.w	r1, r2, r2, lsl #2
   129ba:	sub.w	r3, r3, r1, lsl #1
   129be:	add.w	r1, r3, #48	; 0x30
   129c2:	cmp	r2, #9
   129c4:	mov	r3, r2
   129c6:	strb.w	r1, [r4, #-1]!
   129ca:	bgt.n	129aa <_svfprintf_r+0x13ea>
   129cc:	mov	r1, r4
   129ce:	adds	r3, #48	; 0x30
   129d0:	uxtb	r2, r3
   129d2:	strb.w	r2, [r1, #-1]!
   129d6:	cmp	r0, r1
   129d8:	bls.w	12c44 <_svfprintf_r+0x1684>
   129dc:	add.w	r1, sp, #126	; 0x7e
   129e0:	mov	r3, r4
   129e2:	b.n	129e8 <_svfprintf_r+0x1428>
   129e4:	ldrb.w	r2, [r3], #1
   129e8:	strb.w	r2, [r1], #1
   129ec:	cmp	r0, r3
   129ee:	bne.n	129e4 <_svfprintf_r+0x1424>
   129f0:	adds	r3, r0, #1
   129f2:	subs	r3, r3, r4
   129f4:	add.w	r2, sp, #126	; 0x7e
   129f8:	add	r3, r2
   129fa:	add	r2, sp, #124	; 0x7c
   129fc:	subs	r3, r3, r2
   129fe:	ldr	r2, [sp, #56]	; 0x38
   12a00:	str	r3, [sp, #84]	; 0x54
   12a02:	cmp	r2, #1
   12a04:	add	r3, r2
   12a06:	str	r3, [sp, #36]	; 0x24
   12a08:	ble.w	12bda <_svfprintf_r+0x161a>
   12a0c:	ldr	r3, [sp, #36]	; 0x24
   12a0e:	ldr	r2, [sp, #72]	; 0x48
   12a10:	add	r3, r2
   12a12:	movs	r2, #0
   12a14:	str	r3, [sp, #36]	; 0x24
   12a16:	str	r2, [sp, #60]	; 0x3c
   12a18:	bic.w	r3, r3, r3, asr #31
   12a1c:	b.n	1267a <_svfprintf_r+0x10ba>
   12a1e:	add	r2, sp, #140	; 0x8c
   12a20:	ldr	r1, [sp, #20]
   12a22:	ldr	r0, [sp, #24]
   12a24:	bl	14748 <__ssprint_r>
   12a28:	cmp	r0, #0
   12a2a:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12a2e:	ldr	r3, [sp, #116]	; 0x74
   12a30:	ldr	r4, [sp, #148]	; 0x94
   12a32:	add.w	r9, sp, #192	; 0xc0
   12a36:	b.n	12410 <_svfprintf_r+0xe50>
   12a38:	add	r2, sp, #140	; 0x8c
   12a3a:	ldr	r1, [sp, #20]
   12a3c:	ldr	r0, [sp, #24]
   12a3e:	bl	14748 <__ssprint_r>
   12a42:	cmp	r0, #0
   12a44:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12a48:	ldr	r3, [sp, #116]	; 0x74
   12a4a:	ldr	r2, [sp, #56]	; 0x38
   12a4c:	ldr	r4, [sp, #148]	; 0x94
   12a4e:	subs	r3, r2, r3
   12a50:	add.w	r9, sp, #192	; 0xc0
   12a54:	b.n	12440 <_svfprintf_r+0xe80>
   12a56:	nop
   12a58:	.word	0x00015040
   12a5c:	.word	0x00015288
   12a60:	.word	0x66666667
   12a64:	cmp	r5, #6
   12a66:	mov	r3, r5
   12a68:	it	cs
   12a6a:	movcs	r3, #6
   12a6c:	str	r3, [sp, #36]	; 0x24
   12a6e:	bic.w	r3, r3, r3, asr #31
   12a72:	mov	fp, r6
   12a74:	str	r7, [sp, #40]	; 0x28
   12a76:	str	r6, [sp, #60]	; 0x3c
   12a78:	mov	r7, r6
   12a7a:	str	r3, [sp, #16]
   12a7c:	ldr	r6, [pc, #536]	; (12c98 <_svfprintf_r+0x16d8>)
   12a7e:	b.w	11964 <_svfprintf_r+0x3a4>
   12a82:	mov.w	fp, #6
   12a86:	b.n	125ba <_svfprintf_r+0xffa>
   12a88:	add	r2, sp, #132	; 0x84
   12a8a:	add	r3, sp, #120	; 0x78
   12a8c:	str	r2, [sp, #4]
   12a8e:	str	r3, [sp, #0]
   12a90:	mov	r2, fp
   12a92:	add	r3, sp, #116	; 0x74
   12a94:	movs	r1, #3
   12a96:	vldr	d0, [sp, #96]	; 0x60
   12a9a:	ldr	r0, [sp, #24]
   12a9c:	bl	12f40 <_dtoa_r>
   12aa0:	mov	r5, fp
   12aa2:	mov	r6, r0
   12aa4:	add.w	r4, r0, fp
   12aa8:	b.n	12896 <_svfprintf_r+0x12d6>
   12aaa:	movs	r7, #45	; 0x2d
   12aac:	strb.w	r7, [sp, #111]	; 0x6f
   12ab0:	b.w	11c0a <_svfprintf_r+0x64a>
   12ab4:	str	r3, [sp, #12]
   12ab6:	b.w	11d62 <_svfprintf_r+0x7a2>
   12aba:	ldrd	r1, r2, [sp, #64]	; 0x40
   12abe:	add.w	r3, r2, #2147483648	; 0x80000000
   12ac2:	str	r3, [sp, #100]	; 0x64
   12ac4:	movs	r3, #45	; 0x2d
   12ac6:	str	r1, [sp, #96]	; 0x60
   12ac8:	str	r3, [sp, #16]
   12aca:	b.n	125d6 <_svfprintf_r+0x1016>
   12acc:	ldr	r2, [sp, #72]	; 0x48
   12ace:	ldr	r3, [sp, #56]	; 0x38
   12ad0:	add	r3, r2
   12ad2:	ldr	r2, [sp, #60]	; 0x3c
   12ad4:	str	r3, [sp, #36]	; 0x24
   12ad6:	cmp	r2, #0
   12ad8:	ble.w	12bee <_svfprintf_r+0x162e>
   12adc:	movs	r2, #103	; 0x67
   12ade:	bic.w	r3, r3, r3, asr #31
   12ae2:	str	r2, [sp, #52]	; 0x34
   12ae4:	b.n	1267a <_svfprintf_r+0x10ba>
   12ae6:	ldr	r3, [sp, #52]	; 0x34
   12ae8:	cmp	r3, #71	; 0x47
   12aea:	bne.w	12618 <_svfprintf_r+0x1058>
   12aee:	ldr	r3, [sp, #12]
   12af0:	lsls	r3, r3, #31
   12af2:	bmi.w	1288a <_svfprintf_r+0x12ca>
   12af6:	ldr	r3, [sp, #132]	; 0x84
   12af8:	cmp	r7, #71	; 0x47
   12afa:	sub.w	r3, r3, r6
   12afe:	str	r3, [sp, #56]	; 0x38
   12b00:	beq.w	12938 <_svfprintf_r+0x1378>
   12b04:	ldr	r3, [sp, #116]	; 0x74
   12b06:	b.n	12982 <_svfprintf_r+0x13c2>
   12b08:	bic.w	r3, r5, r5, asr #31
   12b0c:	str	r7, [sp, #40]	; 0x28
   12b0e:	str	r3, [sp, #16]
   12b10:	str	r5, [sp, #36]	; 0x24
   12b12:	mov	fp, r0
   12b14:	str	r0, [sp, #60]	; 0x3c
   12b16:	ldrb.w	r7, [sp, #111]	; 0x6f
   12b1a:	b.w	11964 <_svfprintf_r+0x3a4>
   12b1e:	cmp	r3, #0
   12b20:	ble.n	12bfe <_svfprintf_r+0x163e>
   12b22:	cmp.w	fp, #0
   12b26:	bne.n	12bc8 <_svfprintf_r+0x1608>
   12b28:	ldr	r2, [sp, #12]
   12b2a:	lsls	r4, r2, #31
   12b2c:	bmi.n	12bc8 <_svfprintf_r+0x1608>
   12b2e:	mov	r2, r3
   12b30:	str	r2, [sp, #36]	; 0x24
   12b32:	bic.w	r3, r3, r3, asr #31
   12b36:	b.n	1267a <_svfprintf_r+0x10ba>
   12b38:	ldr	r3, [sp, #12]
   12b3a:	lsls	r3, r3, #31
   12b3c:	mov	r7, fp
   12b3e:	bpl.n	12b4c <_svfprintf_r+0x158c>
   12b40:	add	r6, sp, #256	; 0x100
   12b42:	movs	r3, #48	; 0x30
   12b44:	strb.w	r3, [r6, #-65]!
   12b48:	b.w	11950 <_svfprintf_r+0x390>
   12b4c:	str.w	fp, [sp, #36]	; 0x24
   12b50:	add	r6, sp, #192	; 0xc0
   12b52:	b.w	11956 <_svfprintf_r+0x396>
   12b56:	add	r2, sp, #140	; 0x8c
   12b58:	ldr	r1, [sp, #20]
   12b5a:	ldr	r0, [sp, #24]
   12b5c:	bl	14748 <__ssprint_r>
   12b60:	cmp	r0, #0
   12b62:	bne.w	117b4 <_svfprintf_r+0x1f4>
   12b66:	ldr	r5, [sp, #116]	; 0x74
   12b68:	ldr	r4, [sp, #148]	; 0x94
   12b6a:	ldr	r3, [sp, #144]	; 0x90
   12b6c:	add.w	r9, sp, #192	; 0xc0
   12b70:	b.n	127c0 <_svfprintf_r+0x1200>
   12b72:	mov	r8, r4
   12b74:	movs	r5, #0
   12b76:	b.w	11678 <_svfprintf_r+0xb8>
   12b7a:	adds	r3, #48	; 0x30
   12b7c:	movs	r2, #48	; 0x30
   12b7e:	strb.w	r3, [sp, #127]	; 0x7f
   12b82:	strb.w	r2, [sp, #126]	; 0x7e
   12b86:	add	r3, sp, #128	; 0x80
   12b88:	b.n	129fa <_svfprintf_r+0x143a>
   12b8a:	ldr	r3, [sp, #132]	; 0x84
   12b8c:	b.n	12640 <_svfprintf_r+0x1080>
   12b8e:	ldr	r2, [sp, #72]	; 0x48
   12b90:	ldr	r3, [sp, #60]	; 0x3c
   12b92:	add	r3, r2
   12b94:	movs	r2, #103	; 0x67
   12b96:	str	r3, [sp, #36]	; 0x24
   12b98:	str	r2, [sp, #52]	; 0x34
   12b9a:	bic.w	r3, r3, r3, asr #31
   12b9e:	b.n	1267a <_svfprintf_r+0x10ba>
   12ba0:	ldr	r6, [pc, #248]	; (12c9c <_svfprintf_r+0x16dc>)
   12ba2:	ldr	r3, [pc, #252]	; (12ca0 <_svfprintf_r+0x16e0>)
   12ba4:	ldrb.w	r7, [sp, #111]	; 0x6f
   12ba8:	b.w	11c0e <_svfprintf_r+0x64e>
   12bac:	movs	r2, #0
   12bae:	movs	r3, #0
   12bb0:	ldrd	r0, r1, [sp, #96]	; 0x60
   12bb4:	bl	10174 <__aeabi_dcmpeq>
   12bb8:	cmp	r0, #0
   12bba:	bne.w	1289e <_svfprintf_r+0x12de>
   12bbe:	rsb	r5, r5, #1
   12bc2:	str	r5, [sp, #116]	; 0x74
   12bc4:	add	r4, r5
   12bc6:	b.n	1261a <_svfprintf_r+0x105a>
   12bc8:	ldr	r3, [sp, #60]	; 0x3c
   12bca:	ldr	r2, [sp, #72]	; 0x48
   12bcc:	adds	r5, r3, r2
   12bce:	add.w	r3, r5, fp
   12bd2:	str	r3, [sp, #36]	; 0x24
   12bd4:	bic.w	r3, r3, r3, asr #31
   12bd8:	b.n	1267a <_svfprintf_r+0x10ba>
   12bda:	ldr	r3, [sp, #12]
   12bdc:	ands.w	r3, r3, #1
   12be0:	bne.w	12a0c <_svfprintf_r+0x144c>
   12be4:	str	r3, [sp, #60]	; 0x3c
   12be6:	ldr	r3, [sp, #36]	; 0x24
   12be8:	bic.w	r3, r3, r3, asr #31
   12bec:	b.n	1267a <_svfprintf_r+0x10ba>
   12bee:	ldr	r3, [sp, #60]	; 0x3c
   12bf0:	ldr	r2, [sp, #36]	; 0x24
   12bf2:	rsb	r3, r3, #1
   12bf6:	add	r2, r3
   12bf8:	mov	r3, r2
   12bfa:	str	r2, [sp, #36]	; 0x24
   12bfc:	b.n	12adc <_svfprintf_r+0x151c>
   12bfe:	cmp.w	fp, #0
   12c02:	bne.n	12c0a <_svfprintf_r+0x164a>
   12c04:	ldr	r3, [sp, #12]
   12c06:	lsls	r0, r3, #31
   12c08:	bpl.n	12c1a <_svfprintf_r+0x165a>
   12c0a:	ldr	r3, [sp, #72]	; 0x48
   12c0c:	adds	r5, r3, #1
   12c0e:	add.w	r3, r5, fp
   12c12:	str	r3, [sp, #36]	; 0x24
   12c14:	bic.w	r3, r3, r3, asr #31
   12c18:	b.n	1267a <_svfprintf_r+0x10ba>
   12c1a:	movs	r3, #1
   12c1c:	str	r3, [sp, #36]	; 0x24
   12c1e:	b.n	1267a <_svfprintf_r+0x10ba>
   12c20:	ldr	r0, [sp, #40]	; 0x28
   12c22:	ldrb.w	r3, [r8, #1]
   12c26:	ldr	r5, [r0, #0]
   12c28:	adds	r0, #4
   12c2a:	cmp	r5, #0
   12c2c:	str	r0, [sp, #40]	; 0x28
   12c2e:	mov	r8, r4
   12c30:	bge.w	11674 <_svfprintf_r+0xb4>
   12c34:	mov.w	r5, #4294967295
   12c38:	b.w	11674 <_svfprintf_r+0xb4>
   12c3c:	strb.w	r1, [sp, #111]	; 0x6f
   12c40:	b.w	117d6 <_svfprintf_r+0x216>
   12c44:	add.w	r3, sp, #126	; 0x7e
   12c48:	b.n	129fa <_svfprintf_r+0x143a>
   12c4a:	ldr	r2, [sp, #24]
   12c4c:	movs	r3, #12
   12c4e:	str	r3, [r2, #0]
   12c50:	mov.w	r0, #4294967295
   12c54:	b.w	117c6 <_svfprintf_r+0x206>
   12c58:	strb.w	r1, [sp, #111]	; 0x6f
   12c5c:	b.w	118d0 <_svfprintf_r+0x310>
   12c60:	strb.w	r1, [sp, #111]	; 0x6f
   12c64:	b.w	11b9c <_svfprintf_r+0x5dc>
   12c68:	strb.w	r1, [sp, #111]	; 0x6f
   12c6c:	b.w	11d0a <_svfprintf_r+0x74a>
   12c70:	strb.w	r1, [sp, #111]	; 0x6f
   12c74:	b.w	11cae <_svfprintf_r+0x6ee>
   12c78:	strb.w	r1, [sp, #111]	; 0x6f
   12c7c:	b.w	11c5a <_svfprintf_r+0x69a>
   12c80:	strb.w	r1, [sp, #111]	; 0x6f
   12c84:	b.w	11ef2 <_svfprintf_r+0x932>
   12c88:	strb.w	r1, [sp, #111]	; 0x6f
   12c8c:	b.w	11eb0 <_svfprintf_r+0x8f0>
   12c90:	strb.w	r1, [sp, #111]	; 0x6f
   12c94:	b.w	11e74 <_svfprintf_r+0x8b4>
   12c98:	.word	0x000152d0
   12c9c:	.word	0x000152a4
   12ca0:	.word	0x000152a0

00012ca4 <_vdprintf_r>:
   12ca4:	push	{r4, r5, r6, r7, lr}
   12ca6:	sub.w	sp, sp, #532	; 0x214
   12caa:	add	r5, sp, #16
   12cac:	str	r3, [sp, #0]
   12cae:	mov	r7, r1
   12cb0:	mov	r3, r2
   12cb2:	mov.w	r4, #512	; 0x200
   12cb6:	add	r2, sp, #12
   12cb8:	mov	r1, r5
   12cba:	str	r4, [sp, #12]
   12cbc:	mov	r6, r0
   12cbe:	bl	14848 <_vasnprintf_r>
   12cc2:	cbz	r0, 12ce8 <_vdprintf_r+0x44>
   12cc4:	mov	r4, r0
   12cc6:	mov	r2, r0
   12cc8:	mov	r1, r7
   12cca:	ldr	r3, [sp, #12]
   12ccc:	mov	r0, r6
   12cce:	bl	12d24 <_write_r>
   12cd2:	cmp	r4, r5
   12cd4:	str	r0, [sp, #12]
   12cd6:	beq.n	12ce2 <_vdprintf_r+0x3e>
   12cd8:	mov	r0, r6
   12cda:	mov	r1, r4
   12cdc:	bl	13f38 <_free_r>
   12ce0:	ldr	r0, [sp, #12]
   12ce2:	add.w	sp, sp, #532	; 0x214
   12ce6:	pop	{r4, r5, r6, r7, pc}
   12ce8:	mov.w	r0, #4294967295
   12cec:	b.n	12ce2 <_vdprintf_r+0x3e>
   12cee:	nop

00012cf0 <vdprintf>:
   12cf0:	push	{r4}
   12cf2:	ldr	r4, [pc, #16]	; (12d04 <vdprintf+0x14>)
   12cf4:	mov	r3, r2
   12cf6:	mov	r2, r1
   12cf8:	mov	r1, r0
   12cfa:	ldr	r0, [r4, #0]
   12cfc:	ldr.w	r4, [sp], #4
   12d00:	b.w	12ca4 <_vdprintf_r>
   12d04:	.word	0x1fff1098

00012d08 <__ascii_wctomb>:
   12d08:	cbz	r1, 12d14 <__ascii_wctomb+0xc>
   12d0a:	cmp	r2, #255	; 0xff
   12d0c:	bhi.n	12d18 <__ascii_wctomb+0x10>
   12d0e:	strb	r2, [r1, #0]
   12d10:	movs	r0, #1
   12d12:	bx	lr
   12d14:	mov	r0, r1
   12d16:	bx	lr
   12d18:	movs	r3, #138	; 0x8a
   12d1a:	str	r3, [r0, #0]
   12d1c:	mov.w	r0, #4294967295
   12d20:	bx	lr
   12d22:	nop

00012d24 <_write_r>:
   12d24:	push	{r4, r5, r6, lr}
   12d26:	mov	r5, r1
   12d28:	ldr	r4, [pc, #32]	; (12d4c <_write_r+0x28>)
   12d2a:	mov	r1, r2
   12d2c:	mov	r6, r0
   12d2e:	mov	r2, r3
   12d30:	mov	r0, r5
   12d32:	movs	r3, #0
   12d34:	str	r3, [r4, #0]
   12d36:	bl	f7a0 <_write>
   12d3a:	adds	r3, r0, #1
   12d3c:	beq.n	12d40 <_write_r+0x1c>
   12d3e:	pop	{r4, r5, r6, pc}
   12d40:	ldr	r3, [r4, #0]
   12d42:	cmp	r3, #0
   12d44:	beq.n	12d3e <_write_r+0x1a>
   12d46:	str	r3, [r6, #0]
   12d48:	pop	{r4, r5, r6, pc}
   12d4a:	nop
   12d4c:	.word	0x200071b4

00012d50 <__register_exitproc>:
   12d50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d54:	ldr	r4, [pc, #148]	; (12dec <__register_exitproc+0x9c>)
   12d56:	ldr	r5, [r4, #0]
   12d58:	ldr.w	r4, [r5, #328]	; 0x148
   12d5c:	mov	r6, r0
   12d5e:	mov	r8, r1
   12d60:	mov	sl, r2
   12d62:	mov	r9, r3
   12d64:	cbz	r4, 12dd8 <__register_exitproc+0x88>
   12d66:	ldr	r0, [r4, #4]
   12d68:	cmp	r0, #31
   12d6a:	bgt.n	12d9c <__register_exitproc+0x4c>
   12d6c:	adds	r3, r0, #1
   12d6e:	cbz	r6, 12d8e <__register_exitproc+0x3e>
   12d70:	add.w	r5, r4, r0, lsl #2
   12d74:	movs	r2, #1
   12d76:	str.w	sl, [r5, #136]	; 0x88
   12d7a:	ldr.w	r1, [r4, #392]	; 0x188
   12d7e:	lsls	r2, r0
   12d80:	orrs	r1, r2
   12d82:	cmp	r6, #2
   12d84:	str.w	r1, [r4, #392]	; 0x188
   12d88:	str.w	r9, [r5, #264]	; 0x108
   12d8c:	beq.n	12dcc <__register_exitproc+0x7c>
   12d8e:	adds	r0, #2
   12d90:	str	r3, [r4, #4]
   12d92:	str.w	r8, [r4, r0, lsl #2]
   12d96:	movs	r0, #0
   12d98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12d9c:	ldr	r3, [pc, #80]	; (12df0 <__register_exitproc+0xa0>)
   12d9e:	cbz	r3, 12de2 <__register_exitproc+0x92>
   12da0:	mov.w	r0, #400	; 0x190
   12da4:	bl	10658 <malloc>
   12da8:	mov	r4, r0
   12daa:	cbz	r0, 12de2 <__register_exitproc+0x92>
   12dac:	ldr.w	r3, [r5, #328]	; 0x148
   12db0:	movs	r7, #0
   12db2:	stmia.w	r0, {r3, r7}
   12db6:	str.w	r4, [r5, #328]	; 0x148
   12dba:	mov	r0, r7
   12dbc:	movs	r3, #1
   12dbe:	str.w	r7, [r4, #392]	; 0x188
   12dc2:	str.w	r7, [r4, #396]	; 0x18c
   12dc6:	cmp	r6, #0
   12dc8:	beq.n	12d8e <__register_exitproc+0x3e>
   12dca:	b.n	12d70 <__register_exitproc+0x20>
   12dcc:	ldr.w	r1, [r4, #396]	; 0x18c
   12dd0:	orrs	r2, r1
   12dd2:	str.w	r2, [r4, #396]	; 0x18c
   12dd6:	b.n	12d8e <__register_exitproc+0x3e>
   12dd8:	add.w	r4, r5, #332	; 0x14c
   12ddc:	str.w	r4, [r5, #328]	; 0x148
   12de0:	b.n	12d66 <__register_exitproc+0x16>
   12de2:	mov.w	r0, #4294967295
   12de6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12dea:	nop
   12dec:	.word	0x00015274
   12df0:	.word	0x00010659

00012df4 <register_fini>:
   12df4:	ldr	r3, [pc, #8]	; (12e00 <register_fini+0xc>)
   12df6:	cbz	r3, 12dfe <register_fini+0xa>
   12df8:	ldr	r0, [pc, #8]	; (12e04 <register_fini+0x10>)
   12dfa:	b.w	12e08 <atexit>
   12dfe:	bx	lr
   12e00:	.word	0x00000000
   12e04:	.word	0x00013e75

00012e08 <atexit>:
   12e08:	movs	r3, #0
   12e0a:	mov	r1, r0
   12e0c:	mov	r2, r3
   12e0e:	mov	r0, r3
   12e10:	b.w	12d50 <__register_exitproc>

00012e14 <quorem>:
   12e14:	ldr	r2, [r0, #16]
   12e16:	ldr	r3, [r1, #16]
   12e18:	cmp	r3, r2
   12e1a:	bgt.w	12f38 <quorem+0x124>
   12e1e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e22:	add.w	r8, r3, #4294967295
   12e26:	add.w	r7, r1, #20
   12e2a:	add.w	fp, r0, #20
   12e2e:	ldr.w	r2, [r7, r8, lsl #2]
   12e32:	ldr.w	r3, [fp, r8, lsl #2]
   12e36:	mov.w	r4, r8, lsl #2
   12e3a:	sub	sp, #12
   12e3c:	adds	r2, #1
   12e3e:	udiv	r9, r3, r2
   12e42:	add.w	r3, fp, r4
   12e46:	str	r4, [sp, #0]
   12e48:	add.w	sl, r7, r4
   12e4c:	str	r3, [sp, #4]
   12e4e:	cmp.w	r9, #0
   12e52:	beq.n	12ec8 <quorem+0xb4>
   12e54:	movs	r5, #0
   12e56:	mov	ip, r7
   12e58:	mov	lr, fp
   12e5a:	mov	r3, r5
   12e5c:	ldr.w	r6, [ip], #4
   12e60:	ldr.w	r2, [lr]
   12e64:	uxth	r4, r6
   12e66:	mla	r5, r9, r4, r5
   12e6a:	lsrs	r6, r6, #16
   12e6c:	lsrs	r4, r5, #16
   12e6e:	mla	r4, r9, r6, r4
   12e72:	uxth	r5, r5
   12e74:	subs	r3, r3, r5
   12e76:	uxth	r6, r4
   12e78:	uxtah	r3, r3, r2
   12e7c:	rsb	r6, r6, r2, lsr #16
   12e80:	add.w	r6, r6, r3, asr #16
   12e84:	uxth	r3, r3
   12e86:	orr.w	r3, r3, r6, lsl #16
   12e8a:	cmp	sl, ip
   12e8c:	str.w	r3, [lr], #4
   12e90:	mov.w	r5, r4, lsr #16
   12e94:	mov.w	r3, r6, asr #16
   12e98:	bcs.n	12e5c <quorem+0x48>
   12e9a:	ldr	r3, [sp, #0]
   12e9c:	ldr.w	r3, [fp, r3]
   12ea0:	cbnz	r3, 12ec8 <quorem+0xb4>
   12ea2:	ldr	r4, [sp, #4]
   12ea4:	subs	r3, r4, #4
   12ea6:	cmp	fp, r3
   12ea8:	bcs.n	12ec4 <quorem+0xb0>
   12eaa:	ldr.w	r3, [r4, #-4]
   12eae:	cbnz	r3, 12ec4 <quorem+0xb0>
   12eb0:	sub.w	r3, r4, #8
   12eb4:	b.n	12ebc <quorem+0xa8>
   12eb6:	ldr	r2, [r3, #0]
   12eb8:	subs	r3, #4
   12eba:	cbnz	r2, 12ec4 <quorem+0xb0>
   12ebc:	cmp	fp, r3
   12ebe:	add.w	r8, r8, #4294967295
   12ec2:	bcc.n	12eb6 <quorem+0xa2>
   12ec4:	str.w	r8, [r0, #16]
   12ec8:	mov	r4, r0
   12eca:	bl	14534 <__mcmp>
   12ece:	cmp	r0, #0
   12ed0:	blt.n	12f30 <quorem+0x11c>
   12ed2:	add.w	r9, r9, #1
   12ed6:	mov	r5, fp
   12ed8:	movs	r3, #0
   12eda:	ldr.w	r1, [r7], #4
   12ede:	ldr	r0, [r5, #0]
   12ee0:	uxth	r2, r1
   12ee2:	subs	r2, r3, r2
   12ee4:	lsrs	r1, r1, #16
   12ee6:	uxtah	r2, r2, r0
   12eea:	rsb	r3, r1, r0, lsr #16
   12eee:	add.w	r3, r3, r2, asr #16
   12ef2:	uxth	r1, r2
   12ef4:	orr.w	r1, r1, r3, lsl #16
   12ef8:	cmp	sl, r7
   12efa:	str.w	r1, [r5], #4
   12efe:	mov.w	r3, r3, asr #16
   12f02:	bcs.n	12eda <quorem+0xc6>
   12f04:	ldr.w	r2, [fp, r8, lsl #2]
   12f08:	add.w	r3, fp, r8, lsl #2
   12f0c:	cbnz	r2, 12f30 <quorem+0x11c>
   12f0e:	subs	r2, r3, #4
   12f10:	cmp	fp, r2
   12f12:	bcs.n	12f2c <quorem+0x118>
   12f14:	ldr.w	r2, [r3, #-4]
   12f18:	cbnz	r2, 12f2c <quorem+0x118>
   12f1a:	subs	r3, #8
   12f1c:	b.n	12f24 <quorem+0x110>
   12f1e:	ldr	r2, [r3, #0]
   12f20:	subs	r3, #4
   12f22:	cbnz	r2, 12f2c <quorem+0x118>
   12f24:	cmp	fp, r3
   12f26:	add.w	r8, r8, #4294967295
   12f2a:	bcc.n	12f1e <quorem+0x10a>
   12f2c:	str.w	r8, [r4, #16]
   12f30:	mov	r0, r9
   12f32:	add	sp, #12
   12f34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f38:	movs	r0, #0
   12f3a:	bx	lr
   12f3c:			; <UNDEFINED> instruction: 0xffffffff

00012f40 <_dtoa_r>:
   12f40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f44:	vmov	r6, r7, d0
   12f48:	sub	sp, #108	; 0x6c
   12f4a:	ldr	r4, [r0, #64]	; 0x40
   12f4c:	ldr	r5, [sp, #144]	; 0x90
   12f4e:	str	r1, [sp, #0]
   12f50:	mov	r9, r0
   12f52:	str	r2, [sp, #20]
   12f54:	str	r3, [sp, #12]
   12f56:	vmov	sl, s0
   12f5a:	mov	fp, r7
   12f5c:	cbz	r4, 12f74 <_dtoa_r+0x34>
   12f5e:	ldr	r2, [r0, #68]	; 0x44
   12f60:	str	r2, [r4, #4]
   12f62:	movs	r3, #1
   12f64:	lsls	r3, r2
   12f66:	str	r3, [r4, #8]
   12f68:	mov	r1, r4
   12f6a:	bl	14170 <_Bfree>
   12f6e:	movs	r3, #0
   12f70:	str.w	r3, [r9, #64]	; 0x40
   12f74:	cmp.w	fp, #0
   12f78:	mov	r4, fp
   12f7a:	blt.n	12fe6 <_dtoa_r+0xa6>
   12f7c:	movs	r3, #0
   12f7e:	str	r3, [r5, #0]
   12f80:	ldr	r3, [pc, #644]	; (13208 <_dtoa_r+0x2c8>)
   12f82:	mov	r2, r3
   12f84:	ands	r3, r4
   12f86:	cmp	r3, r2
   12f88:	beq.n	12fb8 <_dtoa_r+0x78>
   12f8a:	movs	r2, #0
   12f8c:	movs	r3, #0
   12f8e:	mov	r0, sl
   12f90:	mov	r1, fp
   12f92:	bl	10174 <__aeabi_dcmpeq>
   12f96:	mov	r6, sl
   12f98:	mov	r7, fp
   12f9a:	mov	r8, r0
   12f9c:	cbz	r0, 12ff2 <_dtoa_r+0xb2>
   12f9e:	ldr	r2, [sp, #12]
   12fa0:	movs	r3, #1
   12fa2:	str	r3, [r2, #0]
   12fa4:	ldr	r3, [sp, #148]	; 0x94
   12fa6:	cmp	r3, #0
   12fa8:	beq.w	13128 <_dtoa_r+0x1e8>
   12fac:	ldr	r0, [pc, #604]	; (1320c <_dtoa_r+0x2cc>)
   12fae:	str	r0, [r3, #0]
   12fb0:	subs	r0, #1
   12fb2:	add	sp, #108	; 0x6c
   12fb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fb8:	ldr	r2, [sp, #12]
   12fba:	movw	r3, #9999	; 0x270f
   12fbe:	str	r3, [r2, #0]
   12fc0:	cmp.w	sl, #0
   12fc4:	beq.w	130fc <_dtoa_r+0x1bc>
   12fc8:	ldr	r0, [pc, #580]	; (13210 <_dtoa_r+0x2d0>)
   12fca:	ldr	r3, [sp, #148]	; 0x94
   12fcc:	cmp	r3, #0
   12fce:	beq.n	12fb2 <_dtoa_r+0x72>
   12fd0:	ldrb	r3, [r0, #3]
   12fd2:	cmp	r3, #0
   12fd4:	beq.w	1312c <_dtoa_r+0x1ec>
   12fd8:	add.w	r3, r0, #8
   12fdc:	ldr	r2, [sp, #148]	; 0x94
   12fde:	str	r3, [r2, #0]
   12fe0:	add	sp, #108	; 0x6c
   12fe2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fe6:	movs	r3, #1
   12fe8:	bic.w	r4, fp, #2147483648	; 0x80000000
   12fec:	str	r3, [r5, #0]
   12fee:	mov	fp, r4
   12ff0:	b.n	12f80 <_dtoa_r+0x40>
   12ff2:	add	r2, sp, #96	; 0x60
   12ff4:	add	r1, sp, #100	; 0x64
   12ff6:	vmov	d0, r6, r7
   12ffa:	mov	r0, r9
   12ffc:	bl	1468c <__d2b>
   13000:	lsrs	r5, r4, #20
   13002:	str	r0, [sp, #40]	; 0x28
   13004:	bne.w	1310e <_dtoa_r+0x1ce>
   13008:	ldr	r5, [sp, #96]	; 0x60
   1300a:	ldr	r6, [sp, #100]	; 0x64
   1300c:	add	r6, r5
   1300e:	addw	r3, r6, #1074	; 0x432
   13012:	cmp	r3, #32
   13014:	ble.w	13528 <_dtoa_r+0x5e8>
   13018:	rsb	r3, r3, #64	; 0x40
   1301c:	addw	r0, r6, #1042	; 0x412
   13020:	lsls	r4, r3
   13022:	lsr.w	r0, sl, r0
   13026:	orrs	r0, r4
   13028:	bl	fbb8 <__aeabi_ui2d>
   1302c:	movs	r3, #1
   1302e:	subs	r4, r6, #1
   13030:	sub.w	r1, r1, #32505856	; 0x1f00000
   13034:	str	r3, [sp, #60]	; 0x3c
   13036:	movs	r2, #0
   13038:	ldr	r3, [pc, #472]	; (13214 <_dtoa_r+0x2d4>)
   1303a:	bl	f93c <__aeabi_dsub>
   1303e:	add	r3, pc, #432	; (adr r3, 131f0 <_dtoa_r+0x2b0>)
   13040:	ldrd	r2, r3, [r3]
   13044:	bl	fca4 <__aeabi_dmul>
   13048:	add	r3, pc, #428	; (adr r3, 131f8 <_dtoa_r+0x2b8>)
   1304a:	ldrd	r2, r3, [r3]
   1304e:	bl	f940 <__adddf3>
   13052:	mov	r6, r0
   13054:	mov	r0, r4
   13056:	mov	r7, r1
   13058:	bl	fbd8 <__aeabi_i2d>
   1305c:	add	r3, pc, #416	; (adr r3, 13200 <_dtoa_r+0x2c0>)
   1305e:	ldrd	r2, r3, [r3]
   13062:	bl	fca4 <__aeabi_dmul>
   13066:	mov	r2, r0
   13068:	mov	r3, r1
   1306a:	mov	r0, r6
   1306c:	mov	r1, r7
   1306e:	bl	f940 <__adddf3>
   13072:	mov	r6, r0
   13074:	mov	r7, r1
   13076:	bl	10204 <__aeabi_d2iz>
   1307a:	movs	r2, #0
   1307c:	str	r0, [sp, #16]
   1307e:	movs	r3, #0
   13080:	mov	r0, r6
   13082:	mov	r1, r7
   13084:	bl	10188 <__aeabi_dcmplt>
   13088:	cmp	r0, #0
   1308a:	bne.w	134de <_dtoa_r+0x59e>
   1308e:	ldr	r6, [sp, #16]
   13090:	cmp	r6, #22
   13092:	bhi.w	134d8 <_dtoa_r+0x598>
   13096:	ldr	r3, [pc, #384]	; (13218 <_dtoa_r+0x2d8>)
   13098:	add.w	r3, r3, r6, lsl #3
   1309c:	ldrd	r0, r1, [r3]
   130a0:	mov	r2, sl
   130a2:	mov	r3, fp
   130a4:	bl	101c4 <__aeabi_dcmpgt>
   130a8:	cmp	r0, #0
   130aa:	beq.w	13532 <_dtoa_r+0x5f2>
   130ae:	subs	r3, r6, #1
   130b0:	str	r3, [sp, #16]
   130b2:	movs	r3, #0
   130b4:	str	r3, [sp, #52]	; 0x34
   130b6:	subs	r5, r5, r4
   130b8:	subs.w	r8, r5, #1
   130bc:	bmi.w	13514 <_dtoa_r+0x5d4>
   130c0:	movs	r3, #0
   130c2:	str	r3, [sp, #28]
   130c4:	ldr	r3, [sp, #16]
   130c6:	cmp	r3, #0
   130c8:	blt.w	13502 <_dtoa_r+0x5c2>
   130cc:	add	r8, r3
   130ce:	str	r3, [sp, #48]	; 0x30
   130d0:	movs	r3, #0
   130d2:	str	r3, [sp, #24]
   130d4:	ldr	r3, [sp, #0]
   130d6:	cmp	r3, #9
   130d8:	bhi.n	13130 <_dtoa_r+0x1f0>
   130da:	cmp	r3, #5
   130dc:	ble.w	13d68 <_dtoa_r+0xe28>
   130e0:	subs	r3, #4
   130e2:	str	r3, [sp, #0]
   130e4:	movs	r6, #0
   130e6:	ldr	r3, [sp, #0]
   130e8:	subs	r3, #2
   130ea:	cmp	r3, #3
   130ec:	bhi.w	13d36 <_dtoa_r+0xdf6>
   130f0:	tbh	[pc, r3, lsl #1]
   130f4:	.word	0x0224032b
   130f8:	.word	0x04500336
   130fc:	ldr	r3, [pc, #272]	; (13210 <_dtoa_r+0x2d0>)
   130fe:	ldr	r2, [pc, #284]	; (1321c <_dtoa_r+0x2dc>)
   13100:	ubfx	r0, r4, #0, #20
   13104:	cmp	r0, #0
   13106:	ite	ne
   13108:	movne	r0, r3
   1310a:	moveq	r0, r2
   1310c:	b.n	12fca <_dtoa_r+0x8a>
   1310e:	ubfx	r3, fp, #0, #20
   13112:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   13116:	subw	r4, r5, #1023	; 0x3ff
   1311a:	mov	r0, sl
   1311c:	str.w	r8, [sp, #60]	; 0x3c
   13120:	orr.w	r1, r1, #3145728	; 0x300000
   13124:	ldr	r5, [sp, #96]	; 0x60
   13126:	b.n	13036 <_dtoa_r+0xf6>
   13128:	ldr	r0, [pc, #244]	; (13220 <_dtoa_r+0x2e0>)
   1312a:	b.n	12fb2 <_dtoa_r+0x72>
   1312c:	adds	r3, r0, #3
   1312e:	b.n	12fdc <_dtoa_r+0x9c>
   13130:	movs	r1, #0
   13132:	str.w	r1, [r9, #68]	; 0x44
   13136:	mov	r0, r9
   13138:	mov	r4, r1
   1313a:	str	r1, [sp, #0]
   1313c:	bl	14124 <_Balloc>
   13140:	mov.w	r3, #4294967295
   13144:	str	r3, [sp, #32]
   13146:	str	r3, [sp, #56]	; 0x38
   13148:	movs	r3, #1
   1314a:	str	r0, [sp, #36]	; 0x24
   1314c:	str.w	r0, [r9, #64]	; 0x40
   13150:	str	r4, [sp, #20]
   13152:	str	r3, [sp, #44]	; 0x2c
   13154:	ldr	r3, [sp, #100]	; 0x64
   13156:	cmp	r3, #0
   13158:	blt.w	132fc <_dtoa_r+0x3bc>
   1315c:	ldr	r2, [sp, #16]
   1315e:	cmp	r2, #14
   13160:	bgt.w	132fc <_dtoa_r+0x3bc>
   13164:	ldr	r3, [pc, #176]	; (13218 <_dtoa_r+0x2d8>)
   13166:	add.w	r3, r3, r2, lsl #3
   1316a:	vldr	d7, [r3]
   1316e:	ldr	r3, [sp, #20]
   13170:	cmp	r3, #0
   13172:	vstr	d7, [sp]
   13176:	blt.w	13776 <_dtoa_r+0x836>
   1317a:	mov	r6, sl
   1317c:	mov	r7, fp
   1317e:	ldrd	sl, fp, [sp]
   13182:	mov	r0, r6
   13184:	mov	r2, sl
   13186:	mov	r3, fp
   13188:	mov	r1, r7
   1318a:	bl	fef8 <__aeabi_ddiv>
   1318e:	bl	10204 <__aeabi_d2iz>
   13192:	mov	r4, r0
   13194:	bl	fbd8 <__aeabi_i2d>
   13198:	mov	r2, sl
   1319a:	mov	r3, fp
   1319c:	bl	fca4 <__aeabi_dmul>
   131a0:	mov	r3, r1
   131a2:	mov	r2, r0
   131a4:	mov	r1, r7
   131a6:	mov	r0, r6
   131a8:	bl	f93c <__aeabi_dsub>
   131ac:	ldr	r5, [sp, #36]	; 0x24
   131ae:	add.w	r3, r4, #48	; 0x30
   131b2:	strb	r3, [r5, #0]
   131b4:	ldr	r3, [sp, #32]
   131b6:	cmp	r3, #1
   131b8:	mov	r6, r0
   131ba:	mov	r7, r1
   131bc:	add.w	r5, r5, #1
   131c0:	beq.n	13286 <_dtoa_r+0x346>
   131c2:	movs	r2, #0
   131c4:	ldr	r3, [pc, #92]	; (13224 <_dtoa_r+0x2e4>)
   131c6:	bl	fca4 <__aeabi_dmul>
   131ca:	movs	r2, #0
   131cc:	movs	r3, #0
   131ce:	mov	r6, r0
   131d0:	mov	r7, r1
   131d2:	bl	10174 <__aeabi_dcmpeq>
   131d6:	cmp	r0, #0
   131d8:	bne.n	132d6 <_dtoa_r+0x396>
   131da:	str.w	r9, [sp, #20]
   131de:	ldr.w	sl, [sp, #32]
   131e2:	ldr.w	fp, [sp, #36]	; 0x24
   131e6:	ldrd	r8, r9, [sp]
   131ea:	b.n	1323e <_dtoa_r+0x2fe>
   131ec:	nop.w
   131f0:	.word	0x636f4361
   131f4:	.word	0x3fd287a7
   131f8:	.word	0x8b60c8b3
   131fc:	.word	0x3fc68a28
   13200:	.word	0x509f79fb
   13204:	.word	0x3fd34413
   13208:	.word	0x7ff00000
   1320c:	.word	0x00015041
   13210:	.word	0x000153f8
   13214:	.word	0x3ff80000
   13218:	.word	0x00015400
   1321c:	.word	0x000153ec
   13220:	.word	0x00015040
   13224:	.word	0x40240000
   13228:	bl	fca4 <__aeabi_dmul>
   1322c:	movs	r2, #0
   1322e:	movs	r3, #0
   13230:	mov	r6, r0
   13232:	mov	r7, r1
   13234:	bl	10174 <__aeabi_dcmpeq>
   13238:	cmp	r0, #0
   1323a:	bne.w	1399a <_dtoa_r+0xa5a>
   1323e:	mov	r2, r8
   13240:	mov	r3, r9
   13242:	mov	r0, r6
   13244:	mov	r1, r7
   13246:	bl	fef8 <__aeabi_ddiv>
   1324a:	bl	10204 <__aeabi_d2iz>
   1324e:	mov	r4, r0
   13250:	bl	fbd8 <__aeabi_i2d>
   13254:	mov	r2, r8
   13256:	mov	r3, r9
   13258:	bl	fca4 <__aeabi_dmul>
   1325c:	mov	r2, r0
   1325e:	mov	r3, r1
   13260:	mov	r0, r6
   13262:	mov	r1, r7
   13264:	bl	f93c <__aeabi_dsub>
   13268:	add.w	lr, r4, #48	; 0x30
   1326c:	strb.w	lr, [r5], #1
   13270:	rsb	lr, fp, r5
   13274:	cmp	lr, sl
   13276:	mov	r6, r0
   13278:	mov	r7, r1
   1327a:	mov.w	r2, #0
   1327e:	ldr	r3, [pc, #696]	; (13538 <_dtoa_r+0x5f8>)
   13280:	bne.n	13228 <_dtoa_r+0x2e8>
   13282:	ldr.w	r9, [sp, #20]
   13286:	mov	r2, r6
   13288:	mov	r3, r7
   1328a:	mov	r0, r6
   1328c:	mov	r1, r7
   1328e:	bl	f940 <__adddf3>
   13292:	mov	r6, r0
   13294:	mov	r7, r1
   13296:	mov	r2, r0
   13298:	mov	r3, r1
   1329a:	ldrd	r0, r1, [sp]
   1329e:	bl	10188 <__aeabi_dcmplt>
   132a2:	cbnz	r0, 132b6 <_dtoa_r+0x376>
   132a4:	mov	r2, r6
   132a6:	mov	r3, r7
   132a8:	ldrd	r0, r1, [sp]
   132ac:	bl	10174 <__aeabi_dcmpeq>
   132b0:	cbz	r0, 132d6 <_dtoa_r+0x396>
   132b2:	lsls	r3, r4, #31
   132b4:	bpl.n	132d6 <_dtoa_r+0x396>
   132b6:	ldrb.w	r4, [r5, #-1]
   132ba:	ldr	r2, [sp, #36]	; 0x24
   132bc:	subs	r3, r5, #1
   132be:	b.n	132ca <_dtoa_r+0x38a>
   132c0:	cmp	r2, r3
   132c2:	beq.w	13abe <_dtoa_r+0xb7e>
   132c6:	ldrb.w	r4, [r3, #-1]!
   132ca:	cmp	r4, #57	; 0x39
   132cc:	add.w	r5, r3, #1
   132d0:	beq.n	132c0 <_dtoa_r+0x380>
   132d2:	adds	r4, #1
   132d4:	strb	r4, [r3, #0]
   132d6:	ldr	r1, [sp, #40]	; 0x28
   132d8:	mov	r0, r9
   132da:	bl	14170 <_Bfree>
   132de:	movs	r2, #0
   132e0:	ldr	r3, [sp, #16]
   132e2:	strb	r2, [r5, #0]
   132e4:	ldr	r2, [sp, #12]
   132e6:	adds	r3, #1
   132e8:	str	r3, [r2, #0]
   132ea:	ldr	r3, [sp, #148]	; 0x94
   132ec:	cmp	r3, #0
   132ee:	beq.w	13a28 <_dtoa_r+0xae8>
   132f2:	ldr	r0, [sp, #36]	; 0x24
   132f4:	str	r5, [r3, #0]
   132f6:	add	sp, #108	; 0x6c
   132f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132fc:	ldr	r2, [sp, #44]	; 0x2c
   132fe:	cmp	r2, #0
   13300:	beq.w	13520 <_dtoa_r+0x5e0>
   13304:	ldr	r2, [sp, #0]
   13306:	cmp	r2, #1
   13308:	ble.w	137ba <_dtoa_r+0x87a>
   1330c:	ldr	r3, [sp, #32]
   1330e:	ldr	r2, [sp, #24]
   13310:	subs	r7, r3, #1
   13312:	cmp	r2, r7
   13314:	blt.w	13a2e <_dtoa_r+0xaee>
   13318:	subs	r7, r2, r7
   1331a:	ldr	r3, [sp, #32]
   1331c:	cmp	r3, #0
   1331e:	blt.w	13c22 <_dtoa_r+0xce2>
   13322:	ldr	r5, [sp, #28]
   13324:	ldr	r3, [sp, #32]
   13326:	ldr	r2, [sp, #28]
   13328:	movs	r1, #1
   1332a:	add	r2, r3
   1332c:	mov	r0, r9
   1332e:	str	r2, [sp, #28]
   13330:	add	r8, r3
   13332:	bl	142a0 <__i2b>
   13336:	mov	r6, r0
   13338:	cbz	r5, 13354 <_dtoa_r+0x414>
   1333a:	cmp.w	r8, #0
   1333e:	ble.n	13354 <_dtoa_r+0x414>
   13340:	cmp	r5, r8
   13342:	ldr	r2, [sp, #28]
   13344:	mov	r3, r5
   13346:	it	ge
   13348:	movge	r3, r8
   1334a:	subs	r2, r2, r3
   1334c:	str	r2, [sp, #28]
   1334e:	subs	r5, r5, r3
   13350:	rsb	r8, r3, r8
   13354:	ldr	r3, [sp, #24]
   13356:	cmp	r3, #0
   13358:	ble.w	13946 <_dtoa_r+0xa06>
   1335c:	ldr	r2, [sp, #44]	; 0x2c
   1335e:	cmp	r2, #0
   13360:	beq.w	13768 <_dtoa_r+0x828>
   13364:	cmp	r7, #0
   13366:	beq.w	13768 <_dtoa_r+0x828>
   1336a:	mov	r1, r6
   1336c:	mov	r2, r7
   1336e:	mov	r0, r9
   13370:	bl	143e4 <__pow5mult>
   13374:	ldr	r2, [sp, #40]	; 0x28
   13376:	mov	r1, r0
   13378:	mov	r6, r0
   1337a:	mov	r0, r9
   1337c:	bl	142b4 <__multiply>
   13380:	ldr	r1, [sp, #40]	; 0x28
   13382:	mov	r4, r0
   13384:	mov	r0, r9
   13386:	bl	14170 <_Bfree>
   1338a:	ldr	r3, [sp, #24]
   1338c:	subs	r3, r3, r7
   1338e:	str	r3, [sp, #24]
   13390:	bne.w	13766 <_dtoa_r+0x826>
   13394:	movs	r1, #1
   13396:	mov	r0, r9
   13398:	bl	142a0 <__i2b>
   1339c:	ldr	r3, [sp, #48]	; 0x30
   1339e:	str	r0, [sp, #24]
   133a0:	cmp	r3, #0
   133a2:	beq.w	137d0 <_dtoa_r+0x890>
   133a6:	mov	r1, r0
   133a8:	mov	r2, r3
   133aa:	mov	r0, r9
   133ac:	bl	143e4 <__pow5mult>
   133b0:	ldr	r3, [sp, #0]
   133b2:	str	r0, [sp, #24]
   133b4:	cmp	r3, #1
   133b6:	ble.w	139a0 <_dtoa_r+0xa60>
   133ba:	movs	r7, #0
   133bc:	ldr	r2, [sp, #24]
   133be:	ldr	r3, [r2, #16]
   133c0:	add.w	r3, r2, r3, lsl #2
   133c4:	ldr	r0, [r3, #16]
   133c6:	bl	14204 <__hi0bits>
   133ca:	rsb	r0, r0, #32
   133ce:	add	r0, r8
   133d0:	ands.w	r0, r0, #31
   133d4:	beq.w	137cc <_dtoa_r+0x88c>
   133d8:	rsb	r3, r0, #32
   133dc:	cmp	r3, #4
   133de:	ble.w	13d5c <_dtoa_r+0xe1c>
   133e2:	rsb	r0, r0, #28
   133e6:	ldr	r3, [sp, #28]
   133e8:	add	r3, r0
   133ea:	str	r3, [sp, #28]
   133ec:	add	r5, r0
   133ee:	add	r8, r0
   133f0:	ldr	r3, [sp, #28]
   133f2:	cmp	r3, #0
   133f4:	ble.n	13402 <_dtoa_r+0x4c2>
   133f6:	mov	r1, r4
   133f8:	mov	r2, r3
   133fa:	mov	r0, r9
   133fc:	bl	14484 <__lshift>
   13400:	mov	r4, r0
   13402:	cmp.w	r8, #0
   13406:	ble.n	13414 <_dtoa_r+0x4d4>
   13408:	mov	r2, r8
   1340a:	ldr	r1, [sp, #24]
   1340c:	mov	r0, r9
   1340e:	bl	14484 <__lshift>
   13412:	str	r0, [sp, #24]
   13414:	ldr	r3, [sp, #52]	; 0x34
   13416:	cmp	r3, #0
   13418:	bne.w	13910 <_dtoa_r+0x9d0>
   1341c:	ldr	r3, [sp, #32]
   1341e:	cmp	r3, #0
   13420:	ble.w	1394a <_dtoa_r+0xa0a>
   13424:	ldr	r3, [sp, #44]	; 0x2c
   13426:	cmp	r3, #0
   13428:	bne.w	13814 <_dtoa_r+0x8d4>
   1342c:	ldr.w	fp, [sp, #36]	; 0x24
   13430:	ldr	r7, [sp, #32]
   13432:	ldr.w	r8, [sp, #24]
   13436:	mov	r5, fp
   13438:	b.n	13440 <_dtoa_r+0x500>
   1343a:	bl	14184 <__multadd>
   1343e:	mov	r4, r0
   13440:	mov	r1, r8
   13442:	mov	r0, r4
   13444:	bl	12e14 <quorem>
   13448:	add.w	sl, r0, #48	; 0x30
   1344c:	strb.w	sl, [r5], #1
   13450:	rsb	r3, fp, r5
   13454:	cmp	r3, r7
   13456:	mov.w	r2, #10
   1345a:	mov.w	r3, #0
   1345e:	mov	r1, r4
   13460:	mov	r0, r9
   13462:	blt.n	1343a <_dtoa_r+0x4fa>
   13464:	ldr	r3, [sp, #36]	; 0x24
   13466:	ldr	r2, [sp, #32]
   13468:	cmp	r2, #1
   1346a:	ite	ge
   1346c:	addge	r3, r3, r2
   1346e:	addlt	r3, #1
   13470:	mov	r5, r3
   13472:	mov.w	fp, #0
   13476:	mov	r1, r4
   13478:	movs	r2, #1
   1347a:	mov	r0, r9
   1347c:	bl	14484 <__lshift>
   13480:	ldr	r1, [sp, #24]
   13482:	str	r0, [sp, #40]	; 0x28
   13484:	bl	14534 <__mcmp>
   13488:	cmp	r0, #0
   1348a:	ble.w	13a98 <_dtoa_r+0xb58>
   1348e:	ldrb.w	r2, [r5, #-1]
   13492:	ldr	r1, [sp, #36]	; 0x24
   13494:	subs	r3, r5, #1
   13496:	b.n	134a2 <_dtoa_r+0x562>
   13498:	cmp	r3, r1
   1349a:	beq.w	13986 <_dtoa_r+0xa46>
   1349e:	ldrb.w	r2, [r3, #-1]!
   134a2:	cmp	r2, #57	; 0x39
   134a4:	add.w	r5, r3, #1
   134a8:	beq.n	13498 <_dtoa_r+0x558>
   134aa:	adds	r2, #1
   134ac:	strb	r2, [r3, #0]
   134ae:	ldr	r1, [sp, #24]
   134b0:	mov	r0, r9
   134b2:	bl	14170 <_Bfree>
   134b6:	cmp	r6, #0
   134b8:	beq.w	132d6 <_dtoa_r+0x396>
   134bc:	cmp.w	fp, #0
   134c0:	beq.n	134ce <_dtoa_r+0x58e>
   134c2:	cmp	fp, r6
   134c4:	beq.n	134ce <_dtoa_r+0x58e>
   134c6:	mov	r1, fp
   134c8:	mov	r0, r9
   134ca:	bl	14170 <_Bfree>
   134ce:	mov	r1, r6
   134d0:	mov	r0, r9
   134d2:	bl	14170 <_Bfree>
   134d6:	b.n	132d6 <_dtoa_r+0x396>
   134d8:	movs	r3, #1
   134da:	str	r3, [sp, #52]	; 0x34
   134dc:	b.n	130b6 <_dtoa_r+0x176>
   134de:	ldr.w	r8, [sp, #16]
   134e2:	mov	r0, r8
   134e4:	bl	fbd8 <__aeabi_i2d>
   134e8:	mov	r2, r0
   134ea:	mov	r3, r1
   134ec:	mov	r0, r6
   134ee:	mov	r1, r7
   134f0:	bl	10174 <__aeabi_dcmpeq>
   134f4:	cmp	r0, #0
   134f6:	bne.w	1308e <_dtoa_r+0x14e>
   134fa:	add.w	r3, r8, #4294967295
   134fe:	str	r3, [sp, #16]
   13500:	b.n	1308e <_dtoa_r+0x14e>
   13502:	ldr	r2, [sp, #28]
   13504:	ldr	r3, [sp, #16]
   13506:	subs	r2, r2, r3
   13508:	negs	r3, r3
   1350a:	str	r3, [sp, #24]
   1350c:	movs	r3, #0
   1350e:	str	r2, [sp, #28]
   13510:	str	r3, [sp, #48]	; 0x30
   13512:	b.n	130d4 <_dtoa_r+0x194>
   13514:	rsb	r3, r8, #0
   13518:	str	r3, [sp, #28]
   1351a:	mov.w	r8, #0
   1351e:	b.n	130c4 <_dtoa_r+0x184>
   13520:	ldr	r7, [sp, #24]
   13522:	ldr	r5, [sp, #28]
   13524:	ldr	r6, [sp, #44]	; 0x2c
   13526:	b.n	13338 <_dtoa_r+0x3f8>
   13528:	rsb	r4, r3, #32
   1352c:	lsl.w	r0, sl, r4
   13530:	b.n	13028 <_dtoa_r+0xe8>
   13532:	str	r0, [sp, #52]	; 0x34
   13534:	b.n	130b6 <_dtoa_r+0x176>
   13536:	nop
   13538:	.word	0x40240000
   1353c:	movs	r3, #0
   1353e:	str	r3, [sp, #44]	; 0x2c
   13540:	ldr	r3, [sp, #16]
   13542:	ldr	r2, [sp, #20]
   13544:	add	r3, r2
   13546:	str	r3, [sp, #56]	; 0x38
   13548:	adds	r3, #1
   1354a:	cmp	r3, #0
   1354c:	str	r3, [sp, #32]
   1354e:	ble.w	13a4c <_dtoa_r+0xb0c>
   13552:	ldr	r4, [sp, #32]
   13554:	mov	r5, r4
   13556:	movs	r1, #0
   13558:	cmp	r5, #23
   1355a:	str.w	r1, [r9, #68]	; 0x44
   1355e:	bls.n	13578 <_dtoa_r+0x638>
   13560:	movs	r2, #1
   13562:	movs	r3, #4
   13564:	lsls	r3, r3, #1
   13566:	add.w	r0, r3, #20
   1356a:	cmp	r0, r5
   1356c:	mov	r1, r2
   1356e:	add.w	r2, r2, #1
   13572:	bls.n	13564 <_dtoa_r+0x624>
   13574:	str.w	r1, [r9, #68]	; 0x44
   13578:	mov	r0, r9
   1357a:	bl	14124 <_Balloc>
   1357e:	cmp	r4, #14
   13580:	str	r0, [sp, #36]	; 0x24
   13582:	str.w	r0, [r9, #64]	; 0x40
   13586:	bhi.w	13154 <_dtoa_r+0x214>
   1358a:	cmp	r6, #0
   1358c:	beq.w	13154 <_dtoa_r+0x214>
   13590:	ldr	r1, [sp, #16]
   13592:	cmp	r1, #0
   13594:	strd	sl, fp, [sp, #64]	; 0x40
   13598:	ble.w	13ad0 <_dtoa_r+0xb90>
   1359c:	ldr	r3, [pc, #576]	; (137e0 <_dtoa_r+0x8a0>)
   1359e:	and.w	r2, r1, #15
   135a2:	asrs	r6, r1, #4
   135a4:	add.w	r3, r3, r2, lsl #3
   135a8:	lsls	r0, r6, #27
   135aa:	ldrd	r4, r5, [r3]
   135ae:	bpl.w	13a3e <_dtoa_r+0xafe>
   135b2:	ldr	r3, [pc, #560]	; (137e4 <_dtoa_r+0x8a4>)
   135b4:	mov	r0, sl
   135b6:	mov	r1, fp
   135b8:	ldrd	r2, r3, [r3, #32]
   135bc:	bl	fef8 <__aeabi_ddiv>
   135c0:	strd	r0, r1, [sp, #72]	; 0x48
   135c4:	and.w	r6, r6, #15
   135c8:	mov.w	sl, #3
   135cc:	cbz	r6, 135f0 <_dtoa_r+0x6b0>
   135ce:	ldr	r7, [pc, #532]	; (137e4 <_dtoa_r+0x8a4>)
   135d0:	lsls	r1, r6, #31
   135d2:	bpl.n	135e8 <_dtoa_r+0x6a8>
   135d4:	mov	r0, r4
   135d6:	mov	r1, r5
   135d8:	ldrd	r2, r3, [r7]
   135dc:	bl	fca4 <__aeabi_dmul>
   135e0:	add.w	sl, sl, #1
   135e4:	mov	r4, r0
   135e6:	mov	r5, r1
   135e8:	asrs	r6, r6, #1
   135ea:	add.w	r7, r7, #8
   135ee:	bne.n	135d0 <_dtoa_r+0x690>
   135f0:	mov	r2, r4
   135f2:	mov	r3, r5
   135f4:	ldrd	r0, r1, [sp, #72]	; 0x48
   135f8:	bl	fef8 <__aeabi_ddiv>
   135fc:	mov	r6, r0
   135fe:	mov	r7, r1
   13600:	ldr	r3, [sp, #52]	; 0x34
   13602:	cbz	r3, 13616 <_dtoa_r+0x6d6>
   13604:	movs	r2, #0
   13606:	ldr	r3, [pc, #480]	; (137e8 <_dtoa_r+0x8a8>)
   13608:	mov	r0, r6
   1360a:	mov	r1, r7
   1360c:	bl	10188 <__aeabi_dcmplt>
   13610:	cmp	r0, #0
   13612:	bne.w	13c4a <_dtoa_r+0xd0a>
   13616:	mov	r0, sl
   13618:	bl	fbd8 <__aeabi_i2d>
   1361c:	mov	r2, r6
   1361e:	mov	r3, r7
   13620:	bl	fca4 <__aeabi_dmul>
   13624:	ldr	r3, [pc, #452]	; (137ec <_dtoa_r+0x8ac>)
   13626:	movs	r2, #0
   13628:	bl	f940 <__adddf3>
   1362c:	ldr	r3, [sp, #32]
   1362e:	mov	r4, r0
   13630:	sub.w	r5, r1, #54525952	; 0x3400000
   13634:	cmp	r3, #0
   13636:	beq.w	139f0 <_dtoa_r+0xab0>
   1363a:	ldr	r3, [sp, #16]
   1363c:	str	r3, [sp, #88]	; 0x58
   1363e:	ldr	r3, [sp, #32]
   13640:	str	r3, [sp, #72]	; 0x48
   13642:	ldr	r3, [sp, #44]	; 0x2c
   13644:	cmp	r3, #0
   13646:	beq.w	13b72 <_dtoa_r+0xc32>
   1364a:	ldr	r2, [sp, #72]	; 0x48
   1364c:	ldr	r3, [pc, #400]	; (137e0 <_dtoa_r+0x8a0>)
   1364e:	ldr	r1, [pc, #416]	; (137f0 <_dtoa_r+0x8b0>)
   13650:	add.w	r3, r3, r2, lsl #3
   13654:	ldrd	r2, r3, [r3, #-8]
   13658:	movs	r0, #0
   1365a:	bl	fef8 <__aeabi_ddiv>
   1365e:	mov	r2, r4
   13660:	mov	r3, r5
   13662:	bl	f93c <__aeabi_dsub>
   13666:	mov	sl, r0
   13668:	mov	fp, r1
   1366a:	mov	r0, r6
   1366c:	mov	r1, r7
   1366e:	bl	10204 <__aeabi_d2iz>
   13672:	mov	r4, r0
   13674:	bl	fbd8 <__aeabi_i2d>
   13678:	mov	r2, r0
   1367a:	mov	r3, r1
   1367c:	mov	r0, r6
   1367e:	mov	r1, r7
   13680:	bl	f93c <__aeabi_dsub>
   13684:	adds	r4, #48	; 0x30
   13686:	ldr	r5, [sp, #36]	; 0x24
   13688:	uxtb	r4, r4
   1368a:	mov	r6, r0
   1368c:	mov	r7, r1
   1368e:	strb	r4, [r5, #0]
   13690:	mov	r2, r0
   13692:	mov	r3, r1
   13694:	mov	r0, sl
   13696:	mov	r1, fp
   13698:	adds	r5, #1
   1369a:	bl	101c4 <__aeabi_dcmpgt>
   1369e:	cmp	r0, #0
   136a0:	bne.n	13744 <_dtoa_r+0x804>
   136a2:	mov	r2, r6
   136a4:	mov	r3, r7
   136a6:	movs	r0, #0
   136a8:	ldr	r1, [pc, #316]	; (137e8 <_dtoa_r+0x8a8>)
   136aa:	bl	f93c <__aeabi_dsub>
   136ae:	mov	r2, r0
   136b0:	mov	r3, r1
   136b2:	mov	r0, sl
   136b4:	mov	r1, fp
   136b6:	bl	101c4 <__aeabi_dcmpgt>
   136ba:	cmp	r0, #0
   136bc:	bne.w	13cd0 <_dtoa_r+0xd90>
   136c0:	ldr	r2, [sp, #72]	; 0x48
   136c2:	cmp	r2, #1
   136c4:	ble.w	13ab6 <_dtoa_r+0xb76>
   136c8:	ldr	r3, [sp, #72]	; 0x48
   136ca:	ldr	r2, [sp, #36]	; 0x24
   136cc:	str.w	r8, [sp, #72]	; 0x48
   136d0:	add	r3, r2
   136d2:	mov	r8, r3
   136d4:	b.n	136f2 <_dtoa_r+0x7b2>
   136d6:	movs	r0, #0
   136d8:	ldr	r1, [pc, #268]	; (137e8 <_dtoa_r+0x8a8>)
   136da:	bl	f93c <__aeabi_dsub>
   136de:	mov	r2, sl
   136e0:	mov	r3, fp
   136e2:	bl	10188 <__aeabi_dcmplt>
   136e6:	cmp	r0, #0
   136e8:	bne.w	13cd0 <_dtoa_r+0xd90>
   136ec:	cmp	r5, r8
   136ee:	beq.w	13ab2 <_dtoa_r+0xb72>
   136f2:	mov	r0, sl
   136f4:	mov	r1, fp
   136f6:	movs	r2, #0
   136f8:	ldr	r3, [pc, #248]	; (137f4 <_dtoa_r+0x8b4>)
   136fa:	bl	fca4 <__aeabi_dmul>
   136fe:	movs	r2, #0
   13700:	ldr	r3, [pc, #240]	; (137f4 <_dtoa_r+0x8b4>)
   13702:	mov	sl, r0
   13704:	mov	fp, r1
   13706:	mov	r0, r6
   13708:	mov	r1, r7
   1370a:	bl	fca4 <__aeabi_dmul>
   1370e:	mov	r7, r1
   13710:	mov	r6, r0
   13712:	bl	10204 <__aeabi_d2iz>
   13716:	mov	r4, r0
   13718:	bl	fbd8 <__aeabi_i2d>
   1371c:	mov	r2, r0
   1371e:	mov	r3, r1
   13720:	mov	r0, r6
   13722:	mov	r1, r7
   13724:	bl	f93c <__aeabi_dsub>
   13728:	adds	r4, #48	; 0x30
   1372a:	uxtb	r4, r4
   1372c:	mov	r2, sl
   1372e:	mov	r3, fp
   13730:	strb.w	r4, [r5], #1
   13734:	mov	r6, r0
   13736:	mov	r7, r1
   13738:	bl	10188 <__aeabi_dcmplt>
   1373c:	mov	r2, r6
   1373e:	mov	r3, r7
   13740:	cmp	r0, #0
   13742:	beq.n	136d6 <_dtoa_r+0x796>
   13744:	ldr	r3, [sp, #88]	; 0x58
   13746:	str	r3, [sp, #16]
   13748:	b.n	132d6 <_dtoa_r+0x396>
   1374a:	movs	r3, #0
   1374c:	str	r3, [sp, #44]	; 0x2c
   1374e:	ldr	r3, [sp, #20]
   13750:	cmp	r3, #0
   13752:	ble.w	13a56 <_dtoa_r+0xb16>
   13756:	mov	r5, r3
   13758:	mov	r4, r3
   1375a:	str	r3, [sp, #56]	; 0x38
   1375c:	str	r3, [sp, #32]
   1375e:	b.n	13556 <_dtoa_r+0x616>
   13760:	movs	r3, #1
   13762:	str	r3, [sp, #44]	; 0x2c
   13764:	b.n	1374e <_dtoa_r+0x80e>
   13766:	str	r4, [sp, #40]	; 0x28
   13768:	ldr	r2, [sp, #24]
   1376a:	ldr	r1, [sp, #40]	; 0x28
   1376c:	mov	r0, r9
   1376e:	bl	143e4 <__pow5mult>
   13772:	mov	r4, r0
   13774:	b.n	13394 <_dtoa_r+0x454>
   13776:	ldr	r3, [sp, #32]
   13778:	cmp	r3, #0
   1377a:	bgt.w	1317a <_dtoa_r+0x23a>
   1377e:	bne.w	13a20 <_dtoa_r+0xae0>
   13782:	movs	r2, #0
   13784:	ldr	r3, [pc, #112]	; (137f8 <_dtoa_r+0x8b8>)
   13786:	ldrd	r0, r1, [sp]
   1378a:	bl	fca4 <__aeabi_dmul>
   1378e:	mov	r3, fp
   13790:	mov	r2, sl
   13792:	bl	101b0 <__aeabi_dcmpge>
   13796:	ldr	r3, [sp, #32]
   13798:	str	r3, [sp, #24]
   1379a:	mov	r6, r3
   1379c:	cmp	r0, #0
   1379e:	beq.w	13976 <_dtoa_r+0xa36>
   137a2:	ldr	r3, [sp, #20]
   137a4:	ldr	r5, [sp, #36]	; 0x24
   137a6:	mvns	r3, r3
   137a8:	str	r3, [sp, #16]
   137aa:	ldr	r1, [sp, #24]
   137ac:	mov	r0, r9
   137ae:	bl	14170 <_Bfree>
   137b2:	cmp	r6, #0
   137b4:	beq.w	132d6 <_dtoa_r+0x396>
   137b8:	b.n	134ce <_dtoa_r+0x58e>
   137ba:	ldr	r2, [sp, #60]	; 0x3c
   137bc:	cmp	r2, #0
   137be:	beq.w	13c32 <_dtoa_r+0xcf2>
   137c2:	addw	r3, r3, #1075	; 0x433
   137c6:	ldr	r7, [sp, #24]
   137c8:	ldr	r5, [sp, #28]
   137ca:	b.n	13326 <_dtoa_r+0x3e6>
   137cc:	movs	r0, #28
   137ce:	b.n	133e6 <_dtoa_r+0x4a6>
   137d0:	ldr	r3, [sp, #0]
   137d2:	cmp	r3, #1
   137d4:	ble.w	13cd8 <_dtoa_r+0xd98>
   137d8:	ldr	r7, [sp, #48]	; 0x30
   137da:	movs	r0, #1
   137dc:	b.n	133ce <_dtoa_r+0x48e>
   137de:	nop
   137e0:	.word	0x00015400
   137e4:	.word	0x000154c8
   137e8:	.word	0x3ff00000
   137ec:	.word	0x401c0000
   137f0:	.word	0x3fe00000
   137f4:	.word	0x40240000
   137f8:	.word	0x40140000
   137fc:	mov	r1, r6
   137fe:	movs	r3, #0
   13800:	movs	r2, #10
   13802:	mov	r0, r9
   13804:	bl	14184 <__multadd>
   13808:	ldr	r3, [sp, #56]	; 0x38
   1380a:	cmp	r3, #0
   1380c:	mov	r6, r0
   1380e:	ble.w	13d2c <_dtoa_r+0xdec>
   13812:	str	r3, [sp, #32]
   13814:	cmp	r5, #0
   13816:	ble.n	13824 <_dtoa_r+0x8e4>
   13818:	mov	r1, r6
   1381a:	mov	r2, r5
   1381c:	mov	r0, r9
   1381e:	bl	14484 <__lshift>
   13822:	mov	r6, r0
   13824:	cmp	r7, #0
   13826:	bne.w	13b22 <_dtoa_r+0xbe2>
   1382a:	mov	r8, r6
   1382c:	ldr	r3, [sp, #32]
   1382e:	ldr	r2, [sp, #36]	; 0x24
   13830:	subs	r3, #1
   13832:	adds	r3, r2, r3
   13834:	str	r3, [sp, #32]
   13836:	and.w	r3, sl, #1
   1383a:	str	r3, [sp, #40]	; 0x28
   1383c:	mov	r7, r2
   1383e:	ldr.w	fp, [sp, #24]
   13842:	mov	r0, r4
   13844:	mov	r1, fp
   13846:	bl	12e14 <quorem>
   1384a:	mov	r1, r6
   1384c:	mov	r5, r0
   1384e:	mov	r0, r4
   13850:	bl	14534 <__mcmp>
   13854:	mov	r2, r8
   13856:	mov	r1, fp
   13858:	mov	sl, r0
   1385a:	mov	r0, r9
   1385c:	bl	14578 <__mdiff>
   13860:	ldr	r2, [r0, #12]
   13862:	mov	fp, r0
   13864:	add.w	r3, r5, #48	; 0x30
   13868:	cmp	r2, #0
   1386a:	bne.n	13900 <_dtoa_r+0x9c0>
   1386c:	mov	r1, r0
   1386e:	mov	r0, r4
   13870:	str	r3, [sp, #28]
   13872:	bl	14534 <__mcmp>
   13876:	mov	r1, fp
   13878:	str	r0, [sp, #20]
   1387a:	mov	r0, r9
   1387c:	bl	14170 <_Bfree>
   13880:	ldr	r2, [sp, #20]
   13882:	ldr	r3, [sp, #28]
   13884:	cbnz	r2, 13892 <_dtoa_r+0x952>
   13886:	ldr	r1, [sp, #0]
   13888:	cbnz	r1, 13892 <_dtoa_r+0x952>
   1388a:	ldr	r1, [sp, #40]	; 0x28
   1388c:	cmp	r1, #0
   1388e:	beq.w	13cfc <_dtoa_r+0xdbc>
   13892:	cmp.w	sl, #0
   13896:	blt.w	13a60 <_dtoa_r+0xb20>
   1389a:	bne.n	138a8 <_dtoa_r+0x968>
   1389c:	ldr	r1, [sp, #0]
   1389e:	cbnz	r1, 138a8 <_dtoa_r+0x968>
   138a0:	ldr	r1, [sp, #40]	; 0x28
   138a2:	cmp	r1, #0
   138a4:	beq.w	13a60 <_dtoa_r+0xb20>
   138a8:	cmp	r2, #0
   138aa:	bgt.w	13b4a <_dtoa_r+0xc0a>
   138ae:	ldr	r2, [sp, #32]
   138b0:	strb	r3, [r7, #0]
   138b2:	add.w	sl, r7, #1
   138b6:	cmp	r7, r2
   138b8:	mov	r5, sl
   138ba:	beq.w	13b62 <_dtoa_r+0xc22>
   138be:	mov	r1, r4
   138c0:	movs	r3, #0
   138c2:	movs	r2, #10
   138c4:	mov	r0, r9
   138c6:	bl	14184 <__multadd>
   138ca:	cmp	r6, r8
   138cc:	mov	r4, r0
   138ce:	mov	r1, r6
   138d0:	mov.w	r3, #0
   138d4:	mov.w	r2, #10
   138d8:	mov	r0, r9
   138da:	beq.n	138f4 <_dtoa_r+0x9b4>
   138dc:	bl	14184 <__multadd>
   138e0:	mov	r1, r8
   138e2:	mov	r6, r0
   138e4:	movs	r3, #0
   138e6:	movs	r2, #10
   138e8:	mov	r0, r9
   138ea:	bl	14184 <__multadd>
   138ee:	mov	r7, sl
   138f0:	mov	r8, r0
   138f2:	b.n	1383e <_dtoa_r+0x8fe>
   138f4:	bl	14184 <__multadd>
   138f8:	mov	r7, sl
   138fa:	mov	r6, r0
   138fc:	mov	r8, r0
   138fe:	b.n	1383e <_dtoa_r+0x8fe>
   13900:	mov	r1, r0
   13902:	mov	r0, r9
   13904:	str	r3, [sp, #20]
   13906:	bl	14170 <_Bfree>
   1390a:	movs	r2, #1
   1390c:	ldr	r3, [sp, #20]
   1390e:	b.n	13892 <_dtoa_r+0x952>
   13910:	ldr	r1, [sp, #24]
   13912:	mov	r0, r4
   13914:	bl	14534 <__mcmp>
   13918:	cmp	r0, #0
   1391a:	bge.w	1341c <_dtoa_r+0x4dc>
   1391e:	mov	r1, r4
   13920:	ldr	r4, [sp, #16]
   13922:	movs	r3, #0
   13924:	subs	r4, #1
   13926:	movs	r2, #10
   13928:	mov	r0, r9
   1392a:	str	r4, [sp, #16]
   1392c:	bl	14184 <__multadd>
   13930:	ldr	r3, [sp, #44]	; 0x2c
   13932:	mov	r4, r0
   13934:	cmp	r3, #0
   13936:	bne.w	137fc <_dtoa_r+0x8bc>
   1393a:	ldr	r3, [sp, #56]	; 0x38
   1393c:	cmp	r3, #0
   1393e:	ble.w	13d1c <_dtoa_r+0xddc>
   13942:	str	r3, [sp, #32]
   13944:	b.n	1342c <_dtoa_r+0x4ec>
   13946:	ldr	r4, [sp, #40]	; 0x28
   13948:	b.n	13394 <_dtoa_r+0x454>
   1394a:	ldr	r3, [sp, #0]
   1394c:	cmp	r3, #2
   1394e:	ble.w	13424 <_dtoa_r+0x4e4>
   13952:	ldr	r3, [sp, #32]
   13954:	cmp	r3, #0
   13956:	bne.w	13c94 <_dtoa_r+0xd54>
   1395a:	ldr	r1, [sp, #24]
   1395c:	movs	r2, #5
   1395e:	mov	r0, r9
   13960:	bl	14184 <__multadd>
   13964:	mov	r1, r0
   13966:	str	r0, [sp, #24]
   13968:	mov	r0, r4
   1396a:	bl	14534 <__mcmp>
   1396e:	cmp	r0, #0
   13970:	str	r4, [sp, #40]	; 0x28
   13972:	ble.w	137a2 <_dtoa_r+0x862>
   13976:	ldr	r2, [sp, #16]
   13978:	ldr	r1, [sp, #36]	; 0x24
   1397a:	movs	r3, #49	; 0x31
   1397c:	adds	r2, #1
   1397e:	str	r2, [sp, #16]
   13980:	strb	r3, [r1, #0]
   13982:	adds	r5, r1, #1
   13984:	b.n	137aa <_dtoa_r+0x86a>
   13986:	ldr	r2, [sp, #16]
   13988:	adds	r2, #1
   1398a:	str	r2, [sp, #16]
   1398c:	ldr	r2, [sp, #36]	; 0x24
   1398e:	movs	r3, #49	; 0x31
   13990:	strb	r3, [r2, #0]
   13992:	b.n	134ae <_dtoa_r+0x56e>
   13994:	movs	r3, #1
   13996:	str	r3, [sp, #44]	; 0x2c
   13998:	b.n	13540 <_dtoa_r+0x600>
   1399a:	ldr.w	r9, [sp, #20]
   1399e:	b.n	132d6 <_dtoa_r+0x396>
   139a0:	cmp.w	sl, #0
   139a4:	bne.w	133ba <_dtoa_r+0x47a>
   139a8:	ubfx	r3, fp, #0, #20
   139ac:	cmp	r3, #0
   139ae:	bne.w	13c2e <_dtoa_r+0xcee>
   139b2:	bic.w	r7, fp, #2147483648	; 0x80000000
   139b6:	lsrs	r7, r7, #20
   139b8:	lsls	r7, r7, #20
   139ba:	cbz	r7, 139c8 <_dtoa_r+0xa88>
   139bc:	ldr	r3, [sp, #28]
   139be:	adds	r3, #1
   139c0:	str	r3, [sp, #28]
   139c2:	add.w	r8, r8, #1
   139c6:	movs	r7, #1
   139c8:	ldr	r3, [sp, #48]	; 0x30
   139ca:	movs	r0, #1
   139cc:	cmp	r3, #0
   139ce:	beq.w	133ce <_dtoa_r+0x48e>
   139d2:	b.n	133bc <_dtoa_r+0x47c>
   139d4:	mov	r0, sl
   139d6:	bl	fbd8 <__aeabi_i2d>
   139da:	mov	r2, r6
   139dc:	mov	r3, r7
   139de:	bl	fca4 <__aeabi_dmul>
   139e2:	movs	r2, #0
   139e4:	ldr	r3, [pc, #764]	; (13ce4 <_dtoa_r+0xda4>)
   139e6:	bl	f940 <__adddf3>
   139ea:	mov	r4, r0
   139ec:	sub.w	r5, r1, #54525952	; 0x3400000
   139f0:	mov	r0, r6
   139f2:	mov	r1, r7
   139f4:	movs	r2, #0
   139f6:	ldr	r3, [pc, #752]	; (13ce8 <_dtoa_r+0xda8>)
   139f8:	bl	f93c <__aeabi_dsub>
   139fc:	mov	r2, r4
   139fe:	mov	r3, r5
   13a00:	mov	r6, r0
   13a02:	mov	r7, r1
   13a04:	bl	101c4 <__aeabi_dcmpgt>
   13a08:	cmp	r0, #0
   13a0a:	bne.w	13b6a <_dtoa_r+0xc2a>
   13a0e:	mov	r2, r4
   13a10:	add.w	r3, r5, #2147483648	; 0x80000000
   13a14:	mov	r0, r6
   13a16:	mov	r1, r7
   13a18:	bl	10188 <__aeabi_dcmplt>
   13a1c:	cmp	r0, #0
   13a1e:	beq.n	13ab6 <_dtoa_r+0xb76>
   13a20:	movs	r3, #0
   13a22:	str	r3, [sp, #24]
   13a24:	mov	r6, r3
   13a26:	b.n	137a2 <_dtoa_r+0x862>
   13a28:	ldr	r0, [sp, #36]	; 0x24
   13a2a:	b.w	12fb2 <_dtoa_r+0x72>
   13a2e:	ldr	r3, [sp, #24]
   13a30:	ldr	r2, [sp, #48]	; 0x30
   13a32:	str	r7, [sp, #24]
   13a34:	subs	r3, r7, r3
   13a36:	add	r2, r3
   13a38:	str	r2, [sp, #48]	; 0x30
   13a3a:	movs	r7, #0
   13a3c:	b.n	1331a <_dtoa_r+0x3da>
   13a3e:	vldr	d7, [sp, #64]	; 0x40
   13a42:	mov.w	sl, #2
   13a46:	vstr	d7, [sp, #72]	; 0x48
   13a4a:	b.n	135cc <_dtoa_r+0x68c>
   13a4c:	mov	r4, r3
   13a4e:	movs	r1, #0
   13a50:	str.w	r1, [r9, #68]	; 0x44
   13a54:	b.n	13578 <_dtoa_r+0x638>
   13a56:	movs	r4, #1
   13a58:	str	r4, [sp, #56]	; 0x38
   13a5a:	str	r4, [sp, #32]
   13a5c:	str	r4, [sp, #20]
   13a5e:	b.n	13a4e <_dtoa_r+0xb0e>
   13a60:	cmp	r2, #0
   13a62:	mov	sl, r3
   13a64:	ble.n	13a8a <_dtoa_r+0xb4a>
   13a66:	mov	r1, r4
   13a68:	movs	r2, #1
   13a6a:	mov	r0, r9
   13a6c:	bl	14484 <__lshift>
   13a70:	ldr	r1, [sp, #24]
   13a72:	mov	r4, r0
   13a74:	bl	14534 <__mcmp>
   13a78:	cmp	r0, #0
   13a7a:	ble.w	13d0e <_dtoa_r+0xdce>
   13a7e:	cmp.w	sl, #57	; 0x39
   13a82:	beq.w	13c98 <_dtoa_r+0xd58>
   13a86:	add.w	sl, r5, #49	; 0x31
   13a8a:	mov	fp, r6
   13a8c:	strb.w	sl, [r7]
   13a90:	adds	r5, r7, #1
   13a92:	mov	r6, r8
   13a94:	str	r4, [sp, #40]	; 0x28
   13a96:	b.n	134ae <_dtoa_r+0x56e>
   13a98:	bne.n	13aa4 <_dtoa_r+0xb64>
   13a9a:	tst.w	sl, #1
   13a9e:	beq.n	13aa4 <_dtoa_r+0xb64>
   13aa0:	b.n	1348e <_dtoa_r+0x54e>
   13aa2:	mov	r5, r2
   13aa4:	ldrb.w	r3, [r5, #-1]
   13aa8:	cmp	r3, #48	; 0x30
   13aaa:	add.w	r2, r5, #4294967295
   13aae:	beq.n	13aa2 <_dtoa_r+0xb62>
   13ab0:	b.n	134ae <_dtoa_r+0x56e>
   13ab2:	ldr.w	r8, [sp, #72]	; 0x48
   13ab6:	ldrd	sl, fp, [sp, #64]	; 0x40
   13aba:	b.w	13154 <_dtoa_r+0x214>
   13abe:	ldr	r1, [sp, #36]	; 0x24
   13ac0:	movs	r2, #48	; 0x30
   13ac2:	strb	r2, [r1, #0]
   13ac4:	ldr	r2, [sp, #16]
   13ac6:	ldrb.w	r4, [r5, #-1]
   13aca:	adds	r2, #1
   13acc:	str	r2, [sp, #16]
   13ace:	b.n	132d2 <_dtoa_r+0x392>
   13ad0:	ldr	r3, [sp, #16]
   13ad2:	negs	r4, r3
   13ad4:	cmp	r4, #0
   13ad6:	beq.w	13c40 <_dtoa_r+0xd00>
   13ada:	ldr	r3, [pc, #528]	; (13cec <_dtoa_r+0xdac>)
   13adc:	and.w	r2, r4, #15
   13ae0:	add.w	r3, r3, r2, lsl #3
   13ae4:	ldrd	r2, r3, [r3]
   13ae8:	ldrd	r0, r1, [sp, #64]	; 0x40
   13aec:	bl	fca4 <__aeabi_dmul>
   13af0:	asrs	r4, r4, #4
   13af2:	mov	r6, r0
   13af4:	mov	r7, r1
   13af6:	beq.w	13d26 <_dtoa_r+0xde6>
   13afa:	ldr	r5, [pc, #500]	; (13cf0 <_dtoa_r+0xdb0>)
   13afc:	mov.w	sl, #2
   13b00:	lsls	r2, r4, #31
   13b02:	bpl.n	13b18 <_dtoa_r+0xbd8>
   13b04:	mov	r0, r6
   13b06:	mov	r1, r7
   13b08:	ldrd	r2, r3, [r5]
   13b0c:	bl	fca4 <__aeabi_dmul>
   13b10:	add.w	sl, sl, #1
   13b14:	mov	r6, r0
   13b16:	mov	r7, r1
   13b18:	asrs	r4, r4, #1
   13b1a:	add.w	r5, r5, #8
   13b1e:	bne.n	13b00 <_dtoa_r+0xbc0>
   13b20:	b.n	13600 <_dtoa_r+0x6c0>
   13b22:	ldr	r1, [r6, #4]
   13b24:	mov	r0, r9
   13b26:	bl	14124 <_Balloc>
   13b2a:	ldr	r3, [r6, #16]
   13b2c:	adds	r2, r3, #2
   13b2e:	mov	r5, r0
   13b30:	lsls	r2, r2, #2
   13b32:	add.w	r1, r6, #12
   13b36:	adds	r0, #12
   13b38:	bl	db58 <memcpy>
   13b3c:	mov	r1, r5
   13b3e:	movs	r2, #1
   13b40:	mov	r0, r9
   13b42:	bl	14484 <__lshift>
   13b46:	mov	r8, r0
   13b48:	b.n	1382c <_dtoa_r+0x8ec>
   13b4a:	cmp	r3, #57	; 0x39
   13b4c:	beq.w	13c98 <_dtoa_r+0xd58>
   13b50:	add.w	sl, r3, #1
   13b54:	mov	fp, r6
   13b56:	strb.w	sl, [r7]
   13b5a:	adds	r5, r7, #1
   13b5c:	mov	r6, r8
   13b5e:	str	r4, [sp, #40]	; 0x28
   13b60:	b.n	134ae <_dtoa_r+0x56e>
   13b62:	mov	fp, r6
   13b64:	mov	sl, r3
   13b66:	mov	r6, r8
   13b68:	b.n	13476 <_dtoa_r+0x536>
   13b6a:	movs	r3, #0
   13b6c:	str	r3, [sp, #24]
   13b6e:	mov	r6, r3
   13b70:	b.n	13976 <_dtoa_r+0xa36>
   13b72:	ldr	r3, [sp, #72]	; 0x48
   13b74:	ldr	r1, [pc, #372]	; (13cec <_dtoa_r+0xdac>)
   13b76:	subs	r2, r3, #1
   13b78:	add.w	r1, r1, r2, lsl #3
   13b7c:	mov	r3, r5
   13b7e:	str	r2, [sp, #92]	; 0x5c
   13b80:	ldrd	r0, r1, [r1]
   13b84:	mov	r2, r4
   13b86:	bl	fca4 <__aeabi_dmul>
   13b8a:	strd	r0, r1, [sp, #80]	; 0x50
   13b8e:	mov	r1, r7
   13b90:	mov	r0, r6
   13b92:	bl	10204 <__aeabi_d2iz>
   13b96:	mov	r4, r0
   13b98:	bl	fbd8 <__aeabi_i2d>
   13b9c:	mov	r3, r1
   13b9e:	mov	r2, r0
   13ba0:	mov	r1, r7
   13ba2:	mov	r0, r6
   13ba4:	bl	f93c <__aeabi_dsub>
   13ba8:	ldr	r3, [sp, #72]	; 0x48
   13baa:	mov	r7, r1
   13bac:	ldr	r1, [sp, #36]	; 0x24
   13bae:	adds	r4, #48	; 0x30
   13bb0:	cmp	r3, #1
   13bb2:	mov	r6, r0
   13bb4:	strb	r4, [r1, #0]
   13bb6:	add.w	r5, r1, #1
   13bba:	beq.n	13bfe <_dtoa_r+0xcbe>
   13bbc:	ldr	r3, [sp, #72]	; 0x48
   13bbe:	ldr	r2, [sp, #36]	; 0x24
   13bc0:	add	r3, r2
   13bc2:	mov	sl, r3
   13bc4:	mov	fp, r5
   13bc6:	movs	r2, #0
   13bc8:	ldr	r3, [pc, #296]	; (13cf4 <_dtoa_r+0xdb4>)
   13bca:	mov	r0, r6
   13bcc:	mov	r1, r7
   13bce:	bl	fca4 <__aeabi_dmul>
   13bd2:	mov	r7, r1
   13bd4:	mov	r6, r0
   13bd6:	bl	10204 <__aeabi_d2iz>
   13bda:	mov	r4, r0
   13bdc:	bl	fbd8 <__aeabi_i2d>
   13be0:	adds	r4, #48	; 0x30
   13be2:	mov	r2, r0
   13be4:	mov	r3, r1
   13be6:	mov	r0, r6
   13be8:	mov	r1, r7
   13bea:	bl	f93c <__aeabi_dsub>
   13bee:	strb.w	r4, [fp], #1
   13bf2:	cmp	sl, fp
   13bf4:	mov	r6, r0
   13bf6:	mov	r7, r1
   13bf8:	bne.n	13bc6 <_dtoa_r+0xc86>
   13bfa:	ldr	r3, [sp, #92]	; 0x5c
   13bfc:	add	r5, r3
   13bfe:	movs	r2, #0
   13c00:	ldr	r3, [pc, #244]	; (13cf8 <_dtoa_r+0xdb8>)
   13c02:	ldrd	r0, r1, [sp, #80]	; 0x50
   13c06:	bl	f940 <__adddf3>
   13c0a:	mov	r2, r6
   13c0c:	mov	r3, r7
   13c0e:	bl	10188 <__aeabi_dcmplt>
   13c12:	cmp	r0, #0
   13c14:	beq.n	13ca8 <_dtoa_r+0xd68>
   13c16:	ldr	r3, [sp, #88]	; 0x58
   13c18:	str	r3, [sp, #16]
   13c1a:	ldrb.w	r4, [r5, #-1]
   13c1e:	b.w	132ba <_dtoa_r+0x37a>
   13c22:	ldr	r3, [sp, #28]
   13c24:	ldr	r2, [sp, #32]
   13c26:	subs	r5, r3, r2
   13c28:	movs	r3, #0
   13c2a:	b.w	13326 <_dtoa_r+0x3e6>
   13c2e:	movs	r7, #0
   13c30:	b.n	139c8 <_dtoa_r+0xa88>
   13c32:	ldr	r3, [sp, #96]	; 0x60
   13c34:	ldr	r7, [sp, #24]
   13c36:	ldr	r5, [sp, #28]
   13c38:	rsb	r3, r3, #54	; 0x36
   13c3c:	b.w	13326 <_dtoa_r+0x3e6>
   13c40:	ldrd	r6, r7, [sp, #64]	; 0x40
   13c44:	mov.w	sl, #2
   13c48:	b.n	13600 <_dtoa_r+0x6c0>
   13c4a:	ldr	r3, [sp, #32]
   13c4c:	cmp	r3, #0
   13c4e:	beq.w	139d4 <_dtoa_r+0xa94>
   13c52:	ldr	r3, [sp, #56]	; 0x38
   13c54:	cmp	r3, #0
   13c56:	ble.w	13ab6 <_dtoa_r+0xb76>
   13c5a:	movs	r2, #0
   13c5c:	ldr	r3, [pc, #148]	; (13cf4 <_dtoa_r+0xdb4>)
   13c5e:	mov	r0, r6
   13c60:	mov	r1, r7
   13c62:	bl	fca4 <__aeabi_dmul>
   13c66:	mov	r6, r0
   13c68:	mov	r7, r1
   13c6a:	add.w	r0, sl, #1
   13c6e:	bl	fbd8 <__aeabi_i2d>
   13c72:	mov	r2, r6
   13c74:	mov	r3, r7
   13c76:	bl	fca4 <__aeabi_dmul>
   13c7a:	movs	r2, #0
   13c7c:	ldr	r3, [pc, #100]	; (13ce4 <_dtoa_r+0xda4>)
   13c7e:	bl	f940 <__adddf3>
   13c82:	ldr	r2, [sp, #16]
   13c84:	ldr	r3, [sp, #56]	; 0x38
   13c86:	str	r3, [sp, #72]	; 0x48
   13c88:	subs	r2, #1
   13c8a:	mov	r4, r0
   13c8c:	sub.w	r5, r1, #54525952	; 0x3400000
   13c90:	str	r2, [sp, #88]	; 0x58
   13c92:	b.n	13642 <_dtoa_r+0x702>
   13c94:	str	r4, [sp, #40]	; 0x28
   13c96:	b.n	137a2 <_dtoa_r+0x862>
   13c98:	movs	r2, #57	; 0x39
   13c9a:	mov	fp, r6
   13c9c:	str	r4, [sp, #40]	; 0x28
   13c9e:	mov	r6, r8
   13ca0:	strb	r2, [r7, #0]
   13ca2:	adds	r5, r7, #1
   13ca4:	b.w	13492 <_dtoa_r+0x552>
   13ca8:	ldrd	r2, r3, [sp, #80]	; 0x50
   13cac:	movs	r0, #0
   13cae:	ldr	r1, [pc, #72]	; (13cf8 <_dtoa_r+0xdb8>)
   13cb0:	bl	f93c <__aeabi_dsub>
   13cb4:	mov	r2, r6
   13cb6:	mov	r3, r7
   13cb8:	bl	101c4 <__aeabi_dcmpgt>
   13cbc:	cbnz	r0, 13cc2 <_dtoa_r+0xd82>
   13cbe:	b.n	13ab6 <_dtoa_r+0xb76>
   13cc0:	mov	r5, r2
   13cc2:	ldrb.w	r3, [r5, #-1]
   13cc6:	cmp	r3, #48	; 0x30
   13cc8:	add.w	r2, r5, #4294967295
   13ccc:	beq.n	13cc0 <_dtoa_r+0xd80>
   13cce:	b.n	13744 <_dtoa_r+0x804>
   13cd0:	ldr	r3, [sp, #88]	; 0x58
   13cd2:	str	r3, [sp, #16]
   13cd4:	b.w	132ba <_dtoa_r+0x37a>
   13cd8:	cmp.w	sl, #0
   13cdc:	bne.w	137d8 <_dtoa_r+0x898>
   13ce0:	b.n	139a8 <_dtoa_r+0xa68>
   13ce2:	nop
   13ce4:	.word	0x401c0000
   13ce8:	.word	0x40140000
   13cec:	.word	0x00015400
   13cf0:	.word	0x000154c8
   13cf4:	.word	0x40240000
   13cf8:	.word	0x3fe00000
   13cfc:	cmp	r3, #57	; 0x39
   13cfe:	mov	fp, sl
   13d00:	mov	sl, r3
   13d02:	beq.n	13c98 <_dtoa_r+0xd58>
   13d04:	cmp.w	fp, #0
   13d08:	bgt.w	13a86 <_dtoa_r+0xb46>
   13d0c:	b.n	13a8a <_dtoa_r+0xb4a>
   13d0e:	bne.w	13a8a <_dtoa_r+0xb4a>
   13d12:	tst.w	sl, #1
   13d16:	beq.w	13a8a <_dtoa_r+0xb4a>
   13d1a:	b.n	13a7e <_dtoa_r+0xb3e>
   13d1c:	ldr	r3, [sp, #0]
   13d1e:	cmp	r3, #2
   13d20:	bgt.n	13d6e <_dtoa_r+0xe2e>
   13d22:	ldr	r3, [sp, #56]	; 0x38
   13d24:	b.n	13942 <_dtoa_r+0xa02>
   13d26:	mov.w	sl, #2
   13d2a:	b.n	13600 <_dtoa_r+0x6c0>
   13d2c:	ldr	r3, [sp, #0]
   13d2e:	cmp	r3, #2
   13d30:	bgt.n	13d6e <_dtoa_r+0xe2e>
   13d32:	ldr	r3, [sp, #56]	; 0x38
   13d34:	b.n	13812 <_dtoa_r+0x8d2>
   13d36:	movs	r4, #0
   13d38:	str.w	r4, [r9, #68]	; 0x44
   13d3c:	mov	r1, r4
   13d3e:	mov	r0, r9
   13d40:	bl	14124 <_Balloc>
   13d44:	mov.w	r3, #4294967295
   13d48:	str	r3, [sp, #32]
   13d4a:	str	r3, [sp, #56]	; 0x38
   13d4c:	movs	r3, #1
   13d4e:	str	r0, [sp, #36]	; 0x24
   13d50:	str	r4, [sp, #20]
   13d52:	str.w	r0, [r9, #64]	; 0x40
   13d56:	str	r3, [sp, #44]	; 0x2c
   13d58:	b.w	13154 <_dtoa_r+0x214>
   13d5c:	beq.w	133f0 <_dtoa_r+0x4b0>
   13d60:	rsb	r0, r0, #60	; 0x3c
   13d64:	b.w	133e6 <_dtoa_r+0x4a6>
   13d68:	movs	r6, #1
   13d6a:	b.w	130e6 <_dtoa_r+0x1a6>
   13d6e:	ldr	r3, [sp, #56]	; 0x38
   13d70:	str	r3, [sp, #32]
   13d72:	b.n	13952 <_dtoa_r+0xa12>

00013d74 <fcvtbuf>:
   13d74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d78:	vpush	{d8}
   13d7c:	vmov.f32	s16, s0
   13d80:	vmov.f32	s17, s1
   13d84:	ldr	r5, [pc, #224]	; (13e68 <fcvtbuf+0xf4>)
   13d86:	sub	sp, #20
   13d88:	ldr	r7, [r5, #0]
   13d8a:	mov	r4, r0
   13d8c:	mov	r6, r1
   13d8e:	mov	r8, r2
   13d90:	mov	r5, r3
   13d92:	cmp	r3, #0
   13d94:	beq.n	13e32 <fcvtbuf+0xbe>
   13d96:	movs	r2, #0
   13d98:	ldr	r3, [pc, #208]	; (13e6c <fcvtbuf+0xf8>)
   13d9a:	vmov	r0, r1, d8
   13d9e:	bl	10188 <__aeabi_dcmplt>
   13da2:	cbnz	r0, 13e04 <fcvtbuf+0x90>
   13da4:	vmov.f32	s0, s16
   13da8:	vmov.f32	s1, s17
   13dac:	add	r3, sp, #12
   13dae:	str	r3, [sp, #4]
   13db0:	str.w	r8, [sp]
   13db4:	mov	r0, r7
   13db6:	mov	r3, r6
   13db8:	mov	r2, r4
   13dba:	movs	r1, #3
   13dbc:	bl	12f40 <_dtoa_r>
   13dc0:	ldr	r3, [sp, #12]
   13dc2:	ldr	r1, [r6, #0]
   13dc4:	cmp	r0, r3
   13dc6:	rsb	r1, r1, #0
   13dca:	bcs.n	13e40 <fcvtbuf+0xcc>
   13dcc:	subs	r1, r1, r5
   13dce:	mov	r3, r5
   13dd0:	ldrb.w	r2, [r0], #1
   13dd4:	strb.w	r2, [r3], #1
   13dd8:	ldr	r2, [sp, #12]
   13dda:	cmp	r2, r0
   13ddc:	add.w	r6, r3, r1
   13de0:	bhi.n	13dd0 <fcvtbuf+0x5c>
   13de2:	cmp	r4, r6
   13de4:	ble.n	13e46 <fcvtbuf+0xd2>
   13de6:	subs	r2, r4, r6
   13de8:	add	r2, r3
   13dea:	movs	r1, #48	; 0x30
   13dec:	strb.w	r1, [r3], #1
   13df0:	cmp	r2, r3
   13df2:	bne.n	13dec <fcvtbuf+0x78>
   13df4:	movs	r3, #0
   13df6:	strb	r3, [r2, #0]
   13df8:	mov	r0, r5
   13dfa:	add	sp, #20
   13dfc:	vpop	{d8}
   13e00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13e04:	movs	r2, #0
   13e06:	ldr	r3, [pc, #104]	; (13e70 <fcvtbuf+0xfc>)
   13e08:	vmov	r0, r1, d8
   13e0c:	bl	101c4 <__aeabi_dcmpgt>
   13e10:	cmp	r0, #0
   13e12:	beq.n	13da4 <fcvtbuf+0x30>
   13e14:	vmov.f32	s0, s16
   13e18:	vmov.f32	s1, s17
   13e1c:	add	r3, sp, #12
   13e1e:	str	r3, [sp, #4]
   13e20:	str.w	r8, [sp]
   13e24:	mov	r0, r7
   13e26:	mov	r3, r6
   13e28:	mov	r2, r4
   13e2a:	movs	r1, #2
   13e2c:	bl	12f40 <_dtoa_r>
   13e30:	b.n	13dc0 <fcvtbuf+0x4c>
   13e32:	ldr	r2, [r7, #80]	; 0x50
   13e34:	add.w	r3, r0, #35	; 0x23
   13e38:	cmp	r2, r3
   13e3a:	ble.n	13e4a <fcvtbuf+0xd6>
   13e3c:	ldr	r5, [r7, #84]	; 0x54
   13e3e:	b.n	13d96 <fcvtbuf+0x22>
   13e40:	mov	r6, r1
   13e42:	mov	r3, r5
   13e44:	b.n	13de2 <fcvtbuf+0x6e>
   13e46:	mov	r2, r3
   13e48:	b.n	13df4 <fcvtbuf+0x80>
   13e4a:	add.w	r9, r0, #36	; 0x24
   13e4e:	mov	r2, r9
   13e50:	ldr	r1, [r7, #84]	; 0x54
   13e52:	mov	r0, r7
   13e54:	bl	10e90 <_realloc_r>
   13e58:	mov	r5, r0
   13e5a:	cmp	r0, #0
   13e5c:	beq.n	13df8 <fcvtbuf+0x84>
   13e5e:	str.w	r9, [r7, #80]	; 0x50
   13e62:	str	r0, [r7, #84]	; 0x54
   13e64:	b.n	13d96 <fcvtbuf+0x22>
   13e66:	nop
   13e68:	.word	0x1fff1098
   13e6c:	.word	0x3ff00000
   13e70:	.word	0xbff00000

00013e74 <__libc_fini_array>:
   13e74:	push	{r3, r4, r5, lr}
   13e76:	ldr	r5, [pc, #28]	; (13e94 <__libc_fini_array+0x20>)
   13e78:	ldr	r4, [pc, #28]	; (13e98 <__libc_fini_array+0x24>)
   13e7a:	subs	r4, r5, r4
   13e7c:	asrs	r4, r4, #2
   13e7e:	beq.n	13e8c <__libc_fini_array+0x18>
   13e80:	subs	r4, #1
   13e82:	ldr.w	r3, [r5, #-4]!
   13e86:	blx	r3
   13e88:	cmp	r4, #0
   13e8a:	bne.n	13e80 <__libc_fini_array+0xc>
   13e8c:	ldmia.w	sp!, {r3, r4, r5, lr}
   13e90:	b.w	1555c <__init_array_end>
	...

00013e9c <_malloc_trim_r>:
   13e9c:	push	{r3, r4, r5, r6, r7, lr}
   13e9e:	ldr	r7, [pc, #140]	; (13f2c <_malloc_trim_r+0x90>)
   13ea0:	mov	r4, r1
   13ea2:	mov	r6, r0
   13ea4:	bl	10e88 <__malloc_lock>
   13ea8:	ldr	r3, [r7, #8]
   13eaa:	ldr	r5, [r3, #4]
   13eac:	bic.w	r5, r5, #3
   13eb0:	subs	r1, r5, r4
   13eb2:	addw	r1, r1, #4079	; 0xfef
   13eb6:	bic.w	r1, r1, #4080	; 0xff0
   13eba:	bic.w	r1, r1, #15
   13ebe:	sub.w	r4, r1, #4096	; 0x1000
   13ec2:	cmp.w	r4, #4096	; 0x1000
   13ec6:	blt.n	13ed8 <_malloc_trim_r+0x3c>
   13ec8:	movs	r1, #0
   13eca:	mov	r0, r6
   13ecc:	bl	11270 <_sbrk_r>
   13ed0:	ldr	r3, [r7, #8]
   13ed2:	add	r3, r5
   13ed4:	cmp	r0, r3
   13ed6:	beq.n	13ee2 <_malloc_trim_r+0x46>
   13ed8:	mov	r0, r6
   13eda:	bl	10e8c <__malloc_unlock>
   13ede:	movs	r0, #0
   13ee0:	pop	{r3, r4, r5, r6, r7, pc}
   13ee2:	negs	r1, r4
   13ee4:	mov	r0, r6
   13ee6:	bl	11270 <_sbrk_r>
   13eea:	adds	r0, #1
   13eec:	beq.n	13f0a <_malloc_trim_r+0x6e>
   13eee:	ldr	r3, [pc, #64]	; (13f30 <_malloc_trim_r+0x94>)
   13ef0:	ldr	r2, [r7, #8]
   13ef2:	ldr	r1, [r3, #0]
   13ef4:	subs	r5, r5, r4
   13ef6:	orr.w	r5, r5, #1
   13efa:	mov	r0, r6
   13efc:	subs	r1, r1, r4
   13efe:	str	r5, [r2, #4]
   13f00:	str	r1, [r3, #0]
   13f02:	bl	10e8c <__malloc_unlock>
   13f06:	movs	r0, #1
   13f08:	pop	{r3, r4, r5, r6, r7, pc}
   13f0a:	movs	r1, #0
   13f0c:	mov	r0, r6
   13f0e:	bl	11270 <_sbrk_r>
   13f12:	ldr	r2, [r7, #8]
   13f14:	subs	r3, r0, r2
   13f16:	cmp	r3, #15
   13f18:	ble.n	13ed8 <_malloc_trim_r+0x3c>
   13f1a:	ldr	r4, [pc, #24]	; (13f34 <_malloc_trim_r+0x98>)
   13f1c:	ldr	r1, [pc, #16]	; (13f30 <_malloc_trim_r+0x94>)
   13f1e:	ldr	r4, [r4, #0]
   13f20:	orr.w	r3, r3, #1
   13f24:	subs	r0, r0, r4
   13f26:	str	r3, [r2, #4]
   13f28:	str	r0, [r1, #0]
   13f2a:	b.n	13ed8 <_malloc_trim_r+0x3c>
   13f2c:	.word	0x1fff1208
   13f30:	.word	0x20007174
   13f34:	.word	0x1fff1614

00013f38 <_free_r>:
   13f38:	cmp	r1, #0
   13f3a:	beq.n	13fc8 <_free_r+0x90>
   13f3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f40:	mov	r5, r1
   13f42:	mov	r8, r0
   13f44:	bl	10e88 <__malloc_lock>
   13f48:	ldr.w	r7, [r5, #-4]
   13f4c:	ldr	r1, [pc, #424]	; (140f8 <_free_r+0x1c0>)
   13f4e:	bic.w	r3, r7, #1
   13f52:	sub.w	r4, r5, #8
   13f56:	adds	r2, r4, r3
   13f58:	ldr	r6, [r1, #8]
   13f5a:	ldr	r0, [r2, #4]
   13f5c:	cmp	r2, r6
   13f5e:	bic.w	r0, r0, #3
   13f62:	beq.n	1402a <_free_r+0xf2>
   13f64:	lsls	r6, r7, #31
   13f66:	str	r0, [r2, #4]
   13f68:	bmi.n	13f82 <_free_r+0x4a>
   13f6a:	ldr.w	r7, [r5, #-8]
   13f6e:	subs	r4, r4, r7
   13f70:	add.w	lr, r1, #8
   13f74:	ldr	r5, [r4, #8]
   13f76:	cmp	r5, lr
   13f78:	add	r3, r7
   13f7a:	beq.n	1405c <_free_r+0x124>
   13f7c:	ldr	r7, [r4, #12]
   13f7e:	str	r7, [r5, #12]
   13f80:	str	r5, [r7, #8]
   13f82:	adds	r5, r2, r0
   13f84:	ldr	r5, [r5, #4]
   13f86:	lsls	r5, r5, #31
   13f88:	bpl.n	14010 <_free_r+0xd8>
   13f8a:	orr.w	r2, r3, #1
   13f8e:	str	r2, [r4, #4]
   13f90:	str	r3, [r4, r3]
   13f92:	cmp.w	r3, #512	; 0x200
   13f96:	bcs.n	13fca <_free_r+0x92>
   13f98:	lsrs	r3, r3, #3
   13f9a:	adds	r2, r3, #1
   13f9c:	ldr	r5, [r1, #4]
   13f9e:	ldr.w	r7, [r1, r2, lsl #3]
   13fa2:	str	r7, [r4, #8]
   13fa4:	movs	r0, #1
   13fa6:	asrs	r3, r3, #2
   13fa8:	lsl.w	r3, r0, r3
   13fac:	add.w	r0, r1, r2, lsl #3
   13fb0:	orrs	r5, r3
   13fb2:	subs	r0, #8
   13fb4:	str	r0, [r4, #12]
   13fb6:	str	r5, [r1, #4]
   13fb8:	str.w	r4, [r1, r2, lsl #3]
   13fbc:	str	r4, [r7, #12]
   13fbe:	mov	r0, r8
   13fc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13fc4:	b.w	10e8c <__malloc_unlock>
   13fc8:	bx	lr
   13fca:	lsrs	r2, r3, #9
   13fcc:	cmp	r2, #4
   13fce:	bhi.n	14078 <_free_r+0x140>
   13fd0:	lsrs	r2, r3, #6
   13fd2:	add.w	r7, r2, #57	; 0x39
   13fd6:	lsls	r7, r7, #1
   13fd8:	add.w	r5, r2, #56	; 0x38
   13fdc:	add.w	r0, r1, r7, lsl #2
   13fe0:	ldr.w	r2, [r1, r7, lsl #2]
   13fe4:	ldr	r1, [pc, #272]	; (140f8 <_free_r+0x1c0>)
   13fe6:	subs	r0, #8
   13fe8:	cmp	r0, r2
   13fea:	beq.n	14088 <_free_r+0x150>
   13fec:	ldr	r1, [r2, #4]
   13fee:	bic.w	r1, r1, #3
   13ff2:	cmp	r3, r1
   13ff4:	bcs.n	13ffc <_free_r+0xc4>
   13ff6:	ldr	r2, [r2, #8]
   13ff8:	cmp	r0, r2
   13ffa:	bne.n	13fec <_free_r+0xb4>
   13ffc:	ldr	r0, [r2, #12]
   13ffe:	str	r0, [r4, #12]
   14000:	str	r2, [r4, #8]
   14002:	str	r4, [r0, #8]
   14004:	str	r4, [r2, #12]
   14006:	mov	r0, r8
   14008:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1400c:	b.w	10e8c <__malloc_unlock>
   14010:	ldr	r5, [r2, #8]
   14012:	ldr	r7, [pc, #232]	; (140fc <_free_r+0x1c4>)
   14014:	cmp	r5, r7
   14016:	add	r3, r0
   14018:	beq.n	1409a <_free_r+0x162>
   1401a:	ldr	r0, [r2, #12]
   1401c:	str	r0, [r5, #12]
   1401e:	orr.w	r2, r3, #1
   14022:	str	r5, [r0, #8]
   14024:	str	r2, [r4, #4]
   14026:	str	r3, [r4, r3]
   14028:	b.n	13f92 <_free_r+0x5a>
   1402a:	lsls	r7, r7, #31
   1402c:	add	r3, r0
   1402e:	bmi.n	14040 <_free_r+0x108>
   14030:	ldr.w	r2, [r5, #-8]
   14034:	subs	r4, r4, r2
   14036:	add	r3, r2
   14038:	ldr	r0, [r4, #8]
   1403a:	ldr	r2, [r4, #12]
   1403c:	str	r2, [r0, #12]
   1403e:	str	r0, [r2, #8]
   14040:	ldr	r2, [pc, #188]	; (14100 <_free_r+0x1c8>)
   14042:	ldr	r2, [r2, #0]
   14044:	orr.w	r0, r3, #1
   14048:	cmp	r3, r2
   1404a:	str	r0, [r4, #4]
   1404c:	str	r4, [r1, #8]
   1404e:	bcc.n	13fbe <_free_r+0x86>
   14050:	ldr	r3, [pc, #176]	; (14104 <_free_r+0x1cc>)
   14052:	mov	r0, r8
   14054:	ldr	r1, [r3, #0]
   14056:	bl	13e9c <_malloc_trim_r>
   1405a:	b.n	13fbe <_free_r+0x86>
   1405c:	adds	r1, r2, r0
   1405e:	ldr	r1, [r1, #4]
   14060:	lsls	r1, r1, #31
   14062:	bmi.n	140ee <_free_r+0x1b6>
   14064:	ldr	r1, [r2, #8]
   14066:	ldr	r2, [r2, #12]
   14068:	str	r2, [r1, #12]
   1406a:	add	r3, r0
   1406c:	orr.w	r0, r3, #1
   14070:	str	r1, [r2, #8]
   14072:	str	r0, [r4, #4]
   14074:	str	r3, [r4, r3]
   14076:	b.n	13fbe <_free_r+0x86>
   14078:	cmp	r2, #20
   1407a:	bhi.n	140ac <_free_r+0x174>
   1407c:	add.w	r7, r2, #92	; 0x5c
   14080:	lsls	r7, r7, #1
   14082:	add.w	r5, r2, #91	; 0x5b
   14086:	b.n	13fdc <_free_r+0xa4>
   14088:	asrs	r2, r5, #2
   1408a:	ldr	r3, [r1, #4]
   1408c:	movs	r5, #1
   1408e:	lsl.w	r2, r5, r2
   14092:	orrs	r3, r2
   14094:	str	r3, [r1, #4]
   14096:	mov	r2, r0
   14098:	b.n	13ffe <_free_r+0xc6>
   1409a:	orr.w	r2, r3, #1
   1409e:	str	r4, [r1, #20]
   140a0:	str	r4, [r1, #16]
   140a2:	str	r5, [r4, #12]
   140a4:	str	r5, [r4, #8]
   140a6:	str	r2, [r4, #4]
   140a8:	str	r3, [r4, r3]
   140aa:	b.n	13fbe <_free_r+0x86>
   140ac:	cmp	r2, #84	; 0x54
   140ae:	bhi.n	140be <_free_r+0x186>
   140b0:	lsrs	r2, r3, #12
   140b2:	add.w	r7, r2, #111	; 0x6f
   140b6:	lsls	r7, r7, #1
   140b8:	add.w	r5, r2, #110	; 0x6e
   140bc:	b.n	13fdc <_free_r+0xa4>
   140be:	cmp.w	r2, #340	; 0x154
   140c2:	bhi.n	140d2 <_free_r+0x19a>
   140c4:	lsrs	r2, r3, #15
   140c6:	add.w	r7, r2, #120	; 0x78
   140ca:	lsls	r7, r7, #1
   140cc:	add.w	r5, r2, #119	; 0x77
   140d0:	b.n	13fdc <_free_r+0xa4>
   140d2:	movw	r0, #1364	; 0x554
   140d6:	cmp	r2, r0
   140d8:	bhi.n	140e8 <_free_r+0x1b0>
   140da:	lsrs	r2, r3, #18
   140dc:	add.w	r7, r2, #125	; 0x7d
   140e0:	lsls	r7, r7, #1
   140e2:	add.w	r5, r2, #124	; 0x7c
   140e6:	b.n	13fdc <_free_r+0xa4>
   140e8:	movs	r7, #254	; 0xfe
   140ea:	movs	r5, #126	; 0x7e
   140ec:	b.n	13fdc <_free_r+0xa4>
   140ee:	orr.w	r2, r3, #1
   140f2:	str	r2, [r4, #4]
   140f4:	str	r3, [r4, r3]
   140f6:	b.n	13fbe <_free_r+0x86>
   140f8:	.word	0x1fff1208
   140fc:	.word	0x1fff1210
   14100:	.word	0x1fff1610
   14104:	.word	0x20007170

00014108 <_localeconv_r>:
   14108:	ldr	r2, [pc, #16]	; (1411c <_localeconv_r+0x14>)
   1410a:	ldr	r3, [pc, #20]	; (14120 <_localeconv_r+0x18>)
   1410c:	ldr	r2, [r2, #0]
   1410e:	ldr	r0, [r2, #52]	; 0x34
   14110:	cmp	r0, #0
   14112:	it	eq
   14114:	moveq	r0, r3
   14116:	adds	r0, #240	; 0xf0
   14118:	bx	lr
   1411a:	nop
   1411c:	.word	0x1fff1098
   14120:	.word	0x1fff109c

00014124 <_Balloc>:
   14124:	ldr	r3, [r0, #76]	; 0x4c
   14126:	push	{r4, r5, r6, lr}
   14128:	mov	r5, r0
   1412a:	mov	r4, r1
   1412c:	cbz	r3, 14142 <_Balloc+0x1e>
   1412e:	ldr.w	r0, [r3, r4, lsl #2]
   14132:	cbz	r0, 14156 <_Balloc+0x32>
   14134:	ldr	r2, [r0, #0]
   14136:	str.w	r2, [r3, r4, lsl #2]
   1413a:	movs	r3, #0
   1413c:	str	r3, [r0, #16]
   1413e:	str	r3, [r0, #12]
   14140:	pop	{r4, r5, r6, pc}
   14142:	movs	r2, #33	; 0x21
   14144:	movs	r1, #4
   14146:	bl	1056c <_calloc_r>
   1414a:	str	r0, [r5, #76]	; 0x4c
   1414c:	mov	r3, r0
   1414e:	cmp	r0, #0
   14150:	bne.n	1412e <_Balloc+0xa>
   14152:	movs	r0, #0
   14154:	pop	{r4, r5, r6, pc}
   14156:	movs	r1, #1
   14158:	lsl.w	r6, r1, r4
   1415c:	adds	r2, r6, #5
   1415e:	mov	r0, r5
   14160:	lsls	r2, r2, #2
   14162:	bl	1056c <_calloc_r>
   14166:	cmp	r0, #0
   14168:	beq.n	14152 <_Balloc+0x2e>
   1416a:	str	r4, [r0, #4]
   1416c:	str	r6, [r0, #8]
   1416e:	b.n	1413a <_Balloc+0x16>

00014170 <_Bfree>:
   14170:	cbz	r1, 14180 <_Bfree+0x10>
   14172:	ldr	r3, [r0, #76]	; 0x4c
   14174:	ldr	r2, [r1, #4]
   14176:	ldr.w	r0, [r3, r2, lsl #2]
   1417a:	str	r0, [r1, #0]
   1417c:	str.w	r1, [r3, r2, lsl #2]
   14180:	bx	lr
   14182:	nop

00014184 <__multadd>:
   14184:	push	{r4, r5, r6, r7, lr}
   14186:	ldr	r4, [r1, #16]
   14188:	sub	sp, #12
   1418a:	mov	r5, r1
   1418c:	mov	r6, r0
   1418e:	add.w	lr, r1, #20
   14192:	movs	r7, #0
   14194:	ldr.w	r0, [lr]
   14198:	uxth	r1, r0
   1419a:	mla	r1, r2, r1, r3
   1419e:	lsrs	r3, r1, #16
   141a0:	lsrs	r0, r0, #16
   141a2:	mla	r3, r2, r0, r3
   141a6:	uxth	r1, r1
   141a8:	adds	r7, #1
   141aa:	add.w	r1, r1, r3, lsl #16
   141ae:	cmp	r4, r7
   141b0:	str.w	r1, [lr], #4
   141b4:	mov.w	r3, r3, lsr #16
   141b8:	bgt.n	14194 <__multadd+0x10>
   141ba:	cbz	r3, 141cc <__multadd+0x48>
   141bc:	ldr	r2, [r5, #8]
   141be:	cmp	r4, r2
   141c0:	bge.n	141d2 <__multadd+0x4e>
   141c2:	add.w	r2, r5, r4, lsl #2
   141c6:	adds	r4, #1
   141c8:	str	r3, [r2, #20]
   141ca:	str	r4, [r5, #16]
   141cc:	mov	r0, r5
   141ce:	add	sp, #12
   141d0:	pop	{r4, r5, r6, r7, pc}
   141d2:	ldr	r1, [r5, #4]
   141d4:	str	r3, [sp, #4]
   141d6:	adds	r1, #1
   141d8:	mov	r0, r6
   141da:	bl	14124 <_Balloc>
   141de:	ldr	r2, [r5, #16]
   141e0:	adds	r2, #2
   141e2:	add.w	r1, r5, #12
   141e6:	mov	r7, r0
   141e8:	lsls	r2, r2, #2
   141ea:	adds	r0, #12
   141ec:	bl	db58 <memcpy>
   141f0:	ldr	r2, [r6, #76]	; 0x4c
   141f2:	ldr	r1, [r5, #4]
   141f4:	ldr	r3, [sp, #4]
   141f6:	ldr.w	r0, [r2, r1, lsl #2]
   141fa:	str	r0, [r5, #0]
   141fc:	str.w	r5, [r2, r1, lsl #2]
   14200:	mov	r5, r7
   14202:	b.n	141c2 <__multadd+0x3e>

00014204 <__hi0bits>:
   14204:	lsrs	r3, r0, #16
   14206:	lsls	r3, r3, #16
   14208:	cbnz	r3, 14238 <__hi0bits+0x34>
   1420a:	lsls	r0, r0, #16
   1420c:	movs	r3, #16
   1420e:	tst.w	r0, #4278190080	; 0xff000000
   14212:	itt	eq
   14214:	lsleq	r0, r0, #8
   14216:	addeq	r3, #8
   14218:	tst.w	r0, #4026531840	; 0xf0000000
   1421c:	itt	eq
   1421e:	lsleq	r0, r0, #4
   14220:	addeq	r3, #4
   14222:	tst.w	r0, #3221225472	; 0xc0000000
   14226:	itt	eq
   14228:	lsleq	r0, r0, #2
   1422a:	addeq	r3, #2
   1422c:	cmp	r0, #0
   1422e:	blt.n	14240 <__hi0bits+0x3c>
   14230:	lsls	r2, r0, #1
   14232:	bmi.n	1423c <__hi0bits+0x38>
   14234:	movs	r0, #32
   14236:	bx	lr
   14238:	movs	r3, #0
   1423a:	b.n	1420e <__hi0bits+0xa>
   1423c:	adds	r0, r3, #1
   1423e:	bx	lr
   14240:	mov	r0, r3
   14242:	bx	lr

00014244 <__lo0bits>:
   14244:	ldr	r3, [r0, #0]
   14246:	ands.w	r2, r3, #7
   1424a:	beq.n	1425c <__lo0bits+0x18>
   1424c:	lsls	r1, r3, #31
   1424e:	bmi.n	14292 <__lo0bits+0x4e>
   14250:	lsls	r2, r3, #30
   14252:	bmi.n	14296 <__lo0bits+0x52>
   14254:	lsrs	r3, r3, #2
   14256:	str	r3, [r0, #0]
   14258:	movs	r0, #2
   1425a:	bx	lr
   1425c:	uxth	r1, r3
   1425e:	cbnz	r1, 14264 <__lo0bits+0x20>
   14260:	lsrs	r3, r3, #16
   14262:	movs	r2, #16
   14264:	tst.w	r3, #255	; 0xff
   14268:	itt	eq
   1426a:	lsreq	r3, r3, #8
   1426c:	addeq	r2, #8
   1426e:	lsls	r1, r3, #28
   14270:	itt	eq
   14272:	lsreq	r3, r3, #4
   14274:	addeq	r2, #4
   14276:	lsls	r1, r3, #30
   14278:	itt	eq
   1427a:	lsreq	r3, r3, #2
   1427c:	addeq	r2, #2
   1427e:	lsls	r1, r3, #31
   14280:	bmi.n	1428c <__lo0bits+0x48>
   14282:	lsrs	r3, r3, #1
   14284:	bne.n	1428a <__lo0bits+0x46>
   14286:	movs	r0, #32
   14288:	bx	lr
   1428a:	adds	r2, #1
   1428c:	str	r3, [r0, #0]
   1428e:	mov	r0, r2
   14290:	bx	lr
   14292:	movs	r0, #0
   14294:	bx	lr
   14296:	lsrs	r3, r3, #1
   14298:	str	r3, [r0, #0]
   1429a:	movs	r0, #1
   1429c:	bx	lr
   1429e:	nop

000142a0 <__i2b>:
   142a0:	push	{r4, lr}
   142a2:	mov	r4, r1
   142a4:	movs	r1, #1
   142a6:	bl	14124 <_Balloc>
   142aa:	movs	r2, #1
   142ac:	str	r4, [r0, #20]
   142ae:	str	r2, [r0, #16]
   142b0:	pop	{r4, pc}
   142b2:	nop

000142b4 <__multiply>:
   142b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142b8:	ldr	r5, [r1, #16]
   142ba:	ldr	r7, [r2, #16]
   142bc:	cmp	r5, r7
   142be:	sub	sp, #12
   142c0:	mov	r4, r1
   142c2:	mov	r6, r2
   142c4:	bge.n	142d0 <__multiply+0x1c>
   142c6:	mov	r2, r5
   142c8:	mov	r4, r6
   142ca:	mov	r5, r7
   142cc:	mov	r6, r1
   142ce:	mov	r7, r2
   142d0:	ldr	r3, [r4, #8]
   142d2:	ldr	r1, [r4, #4]
   142d4:	add.w	r8, r5, r7
   142d8:	cmp	r8, r3
   142da:	it	gt
   142dc:	addgt	r1, #1
   142de:	bl	14124 <_Balloc>
   142e2:	add.w	ip, r0, #20
   142e6:	add.w	r9, ip, r8, lsl #2
   142ea:	cmp	ip, r9
   142ec:	str	r0, [sp, #0]
   142ee:	bcs.n	142fc <__multiply+0x48>
   142f0:	mov	r3, ip
   142f2:	movs	r1, #0
   142f4:	str.w	r1, [r3], #4
   142f8:	cmp	r9, r3
   142fa:	bhi.n	142f4 <__multiply+0x40>
   142fc:	add.w	r2, r6, #20
   14300:	add.w	sl, r2, r7, lsl #2
   14304:	add.w	r3, r4, #20
   14308:	cmp	r2, sl
   1430a:	add.w	lr, r3, r5, lsl #2
   1430e:	bcs.n	143ba <__multiply+0x106>
   14310:	str.w	r9, [sp, #4]
   14314:	mov	r9, r3
   14316:	ldr.w	r3, [r2], #4
   1431a:	uxth.w	fp, r3
   1431e:	cmp.w	fp, #0
   14322:	beq.n	14366 <__multiply+0xb2>
   14324:	movs	r0, #0
   14326:	mov	r7, r9
   14328:	mov	r6, ip
   1432a:	mov	r5, r0
   1432c:	b.n	14330 <__multiply+0x7c>
   1432e:	mov	r6, r3
   14330:	ldr.w	r4, [r7], #4
   14334:	ldr	r0, [r6, #0]
   14336:	uxth	r1, r4
   14338:	uxth	r3, r0
   1433a:	mla	r1, fp, r1, r3
   1433e:	lsrs	r4, r4, #16
   14340:	lsrs	r0, r0, #16
   14342:	adds	r3, r1, r5
   14344:	mla	r0, fp, r4, r0
   14348:	add.w	r0, r0, r3, lsr #16
   1434c:	uxth	r1, r3
   1434e:	mov	r3, r6
   14350:	orr.w	r1, r1, r0, lsl #16
   14354:	cmp	lr, r7
   14356:	mov.w	r5, r0, lsr #16
   1435a:	str.w	r1, [r3], #4
   1435e:	bhi.n	1432e <__multiply+0x7a>
   14360:	str	r5, [r6, #4]
   14362:	ldr.w	r3, [r2, #-4]
   14366:	movs.w	fp, r3, lsr #16
   1436a:	beq.n	143ae <__multiply+0xfa>
   1436c:	ldr.w	r3, [ip]
   14370:	mov	r7, ip
   14372:	mov	r0, r3
   14374:	mov	r5, r9
   14376:	movs	r1, #0
   14378:	b.n	1437c <__multiply+0xc8>
   1437a:	mov	r7, r6
   1437c:	ldrh	r4, [r5, #0]
   1437e:	lsrs	r0, r0, #16
   14380:	mla	r0, fp, r4, r0
   14384:	add	r1, r0
   14386:	uxth	r4, r3
   14388:	mov	r6, r7
   1438a:	orr.w	r3, r4, r1, lsl #16
   1438e:	str.w	r3, [r6], #4
   14392:	ldr	r0, [r7, #4]
   14394:	ldr.w	r4, [r5], #4
   14398:	uxth	r3, r0
   1439a:	lsrs	r4, r4, #16
   1439c:	mla	r4, fp, r4, r3
   143a0:	add.w	r3, r4, r1, lsr #16
   143a4:	cmp	lr, r5
   143a6:	mov.w	r1, r3, lsr #16
   143aa:	bhi.n	1437a <__multiply+0xc6>
   143ac:	str	r3, [r7, #4]
   143ae:	cmp	sl, r2
   143b0:	add.w	ip, ip, #4
   143b4:	bhi.n	14316 <__multiply+0x62>
   143b6:	ldr.w	r9, [sp, #4]
   143ba:	cmp.w	r8, #0
   143be:	ble.n	143d8 <__multiply+0x124>
   143c0:	ldr.w	r3, [r9, #-4]
   143c4:	sub.w	r9, r9, #4
   143c8:	cbz	r3, 143d2 <__multiply+0x11e>
   143ca:	b.n	143d8 <__multiply+0x124>
   143cc:	ldr.w	r3, [r9, #-4]!
   143d0:	cbnz	r3, 143d8 <__multiply+0x124>
   143d2:	subs.w	r8, r8, #1
   143d6:	bne.n	143cc <__multiply+0x118>
   143d8:	ldr	r0, [sp, #0]
   143da:	str.w	r8, [r0, #16]
   143de:	add	sp, #12
   143e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000143e4 <__pow5mult>:
   143e4:	ands.w	r3, r2, #3
   143e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143ec:	mov	r4, r2
   143ee:	mov	r7, r0
   143f0:	bne.n	14450 <__pow5mult+0x6c>
   143f2:	mov	r6, r1
   143f4:	asrs	r4, r4, #2
   143f6:	beq.n	14432 <__pow5mult+0x4e>
   143f8:	ldr	r5, [r7, #72]	; 0x48
   143fa:	cbz	r5, 14462 <__pow5mult+0x7e>
   143fc:	lsls	r3, r4, #31
   143fe:	mov.w	r8, #0
   14402:	bmi.n	14412 <__pow5mult+0x2e>
   14404:	asrs	r4, r4, #1
   14406:	beq.n	14432 <__pow5mult+0x4e>
   14408:	ldr	r0, [r5, #0]
   1440a:	cbz	r0, 14438 <__pow5mult+0x54>
   1440c:	mov	r5, r0
   1440e:	lsls	r3, r4, #31
   14410:	bpl.n	14404 <__pow5mult+0x20>
   14412:	mov	r2, r5
   14414:	mov	r1, r6
   14416:	mov	r0, r7
   14418:	bl	142b4 <__multiply>
   1441c:	cbz	r6, 1444c <__pow5mult+0x68>
   1441e:	ldr	r2, [r6, #4]
   14420:	ldr	r3, [r7, #76]	; 0x4c
   14422:	asrs	r4, r4, #1
   14424:	ldr.w	r1, [r3, r2, lsl #2]
   14428:	str	r1, [r6, #0]
   1442a:	str.w	r6, [r3, r2, lsl #2]
   1442e:	mov	r6, r0
   14430:	bne.n	14408 <__pow5mult+0x24>
   14432:	mov	r0, r6
   14434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14438:	mov	r2, r5
   1443a:	mov	r1, r5
   1443c:	mov	r0, r7
   1443e:	bl	142b4 <__multiply>
   14442:	str	r0, [r5, #0]
   14444:	str.w	r8, [r0]
   14448:	mov	r5, r0
   1444a:	b.n	1440e <__pow5mult+0x2a>
   1444c:	mov	r6, r0
   1444e:	b.n	14404 <__pow5mult+0x20>
   14450:	subs	r2, r3, #1
   14452:	ldr	r5, [pc, #44]	; (14480 <__pow5mult+0x9c>)
   14454:	movs	r3, #0
   14456:	ldr.w	r2, [r5, r2, lsl #2]
   1445a:	bl	14184 <__multadd>
   1445e:	mov	r6, r0
   14460:	b.n	143f4 <__pow5mult+0x10>
   14462:	movs	r1, #1
   14464:	mov	r0, r7
   14466:	bl	14124 <_Balloc>
   1446a:	movw	r1, #625	; 0x271
   1446e:	movs	r2, #1
   14470:	movs	r3, #0
   14472:	str	r1, [r0, #20]
   14474:	str	r2, [r0, #16]
   14476:	mov	r5, r0
   14478:	str	r0, [r7, #72]	; 0x48
   1447a:	str	r3, [r0, #0]
   1447c:	b.n	143fc <__pow5mult+0x18>
   1447e:	nop
   14480:	.word	0x000154f0

00014484 <__lshift>:
   14484:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14488:	mov	r9, r2
   1448a:	ldr	r2, [r1, #16]
   1448c:	ldr	r3, [r1, #8]
   1448e:	mov.w	r4, r9, asr #5
   14492:	add.w	r8, r4, r2
   14496:	add.w	r5, r8, #1
   1449a:	cmp	r5, r3
   1449c:	mov	r6, r1
   1449e:	mov	sl, r0
   144a0:	ldr	r1, [r1, #4]
   144a2:	ble.n	144ae <__lshift+0x2a>
   144a4:	lsls	r3, r3, #1
   144a6:	cmp	r5, r3
   144a8:	add.w	r1, r1, #1
   144ac:	bgt.n	144a4 <__lshift+0x20>
   144ae:	mov	r0, sl
   144b0:	bl	14124 <_Balloc>
   144b4:	cmp	r4, #0
   144b6:	add.w	r2, r0, #20
   144ba:	ble.n	1452e <__lshift+0xaa>
   144bc:	add.w	r3, r2, r4, lsl #2
   144c0:	movs	r1, #0
   144c2:	str.w	r1, [r2], #4
   144c6:	cmp	r3, r2
   144c8:	bne.n	144c2 <__lshift+0x3e>
   144ca:	ldr	r4, [r6, #16]
   144cc:	add.w	r1, r6, #20
   144d0:	ands.w	r9, r9, #31
   144d4:	add.w	lr, r1, r4, lsl #2
   144d8:	beq.n	1451e <__lshift+0x9a>
   144da:	rsb	r2, r9, #32
   144de:	movs	r4, #0
   144e0:	ldr	r7, [r1, #0]
   144e2:	lsl.w	ip, r7, r9
   144e6:	orr.w	r4, ip, r4
   144ea:	mov	ip, r3
   144ec:	str.w	r4, [r3], #4
   144f0:	ldr.w	r4, [r1], #4
   144f4:	cmp	lr, r1
   144f6:	lsr.w	r4, r4, r2
   144fa:	bhi.n	144e0 <__lshift+0x5c>
   144fc:	str.w	r4, [ip, #4]
   14500:	cbz	r4, 14506 <__lshift+0x82>
   14502:	add.w	r5, r8, #2
   14506:	ldr.w	r3, [sl, #76]	; 0x4c
   1450a:	ldr	r2, [r6, #4]
   1450c:	subs	r5, #1
   1450e:	ldr.w	r1, [r3, r2, lsl #2]
   14512:	str	r5, [r0, #16]
   14514:	str	r1, [r6, #0]
   14516:	str.w	r6, [r3, r2, lsl #2]
   1451a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1451e:	subs	r3, #4
   14520:	ldr.w	r2, [r1], #4
   14524:	str.w	r2, [r3, #4]!
   14528:	cmp	lr, r1
   1452a:	bhi.n	14520 <__lshift+0x9c>
   1452c:	b.n	14506 <__lshift+0x82>
   1452e:	mov	r3, r2
   14530:	b.n	144ca <__lshift+0x46>
   14532:	nop

00014534 <__mcmp>:
   14534:	ldr	r2, [r0, #16]
   14536:	ldr	r3, [r1, #16]
   14538:	subs	r2, r2, r3
   1453a:	bne.n	14564 <__mcmp+0x30>
   1453c:	lsls	r3, r3, #2
   1453e:	adds	r0, #20
   14540:	adds	r1, #20
   14542:	add	r1, r3
   14544:	push	{r4}
   14546:	add	r3, r0
   14548:	b.n	1454e <__mcmp+0x1a>
   1454a:	cmp	r0, r3
   1454c:	bcs.n	14568 <__mcmp+0x34>
   1454e:	ldr.w	r4, [r3, #-4]!
   14552:	ldr.w	r2, [r1, #-4]!
   14556:	cmp	r4, r2
   14558:	beq.n	1454a <__mcmp+0x16>
   1455a:	bcc.n	14570 <__mcmp+0x3c>
   1455c:	movs	r0, #1
   1455e:	ldr.w	r4, [sp], #4
   14562:	bx	lr
   14564:	mov	r0, r2
   14566:	bx	lr
   14568:	movs	r0, #0
   1456a:	ldr.w	r4, [sp], #4
   1456e:	bx	lr
   14570:	mov.w	r0, #4294967295
   14574:	b.n	1455e <__mcmp+0x2a>
   14576:	nop

00014578 <__mdiff>:
   14578:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1457c:	ldr	r3, [r1, #16]
   1457e:	mov	r7, r1
   14580:	ldr	r1, [r2, #16]
   14582:	subs	r3, r3, r1
   14584:	cmp	r3, #0
   14586:	mov	r8, r2
   14588:	bne.n	145ba <__mdiff+0x42>
   1458a:	lsls	r1, r1, #2
   1458c:	add.w	r2, r7, #20
   14590:	add.w	r5, r8, #20
   14594:	adds	r3, r2, r1
   14596:	add	r1, r5
   14598:	b.n	1459e <__mdiff+0x26>
   1459a:	cmp	r2, r3
   1459c:	bcs.n	1465c <__mdiff+0xe4>
   1459e:	ldr.w	r6, [r3, #-4]!
   145a2:	ldr.w	r4, [r1, #-4]!
   145a6:	cmp	r6, r4
   145a8:	beq.n	1459a <__mdiff+0x22>
   145aa:	bcs.n	1466e <__mdiff+0xf6>
   145ac:	mov	r3, r7
   145ae:	mov	r4, r2
   145b0:	mov	r7, r8
   145b2:	mov.w	r9, #1
   145b6:	mov	r8, r3
   145b8:	b.n	145c8 <__mdiff+0x50>
   145ba:	blt.n	14678 <__mdiff+0x100>
   145bc:	add.w	r5, r7, #20
   145c0:	add.w	r4, r2, #20
   145c4:	mov.w	r9, #0
   145c8:	ldr	r1, [r7, #4]
   145ca:	bl	14124 <_Balloc>
   145ce:	ldr.w	r3, [r8, #16]
   145d2:	ldr	r6, [r7, #16]
   145d4:	str.w	r9, [r0, #12]
   145d8:	add.w	ip, r4, r3, lsl #2
   145dc:	mov	lr, r4
   145de:	add.w	r7, r5, r6, lsl #2
   145e2:	add.w	r4, r0, #20
   145e6:	movs	r3, #0
   145e8:	ldr.w	r1, [lr], #4
   145ec:	ldr.w	r8, [r5], #4
   145f0:	uxth	r2, r1
   145f2:	uxtah	r3, r3, r8
   145f6:	lsrs	r1, r1, #16
   145f8:	subs	r2, r3, r2
   145fa:	rsb	r3, r1, r8, lsr #16
   145fe:	add.w	r3, r3, r2, asr #16
   14602:	uxth	r2, r2
   14604:	orr.w	r2, r2, r3, lsl #16
   14608:	cmp	ip, lr
   1460a:	str.w	r2, [r4], #4
   1460e:	mov.w	r3, r3, asr #16
   14612:	bhi.n	145e8 <__mdiff+0x70>
   14614:	cmp	r7, r5
   14616:	bls.n	14648 <__mdiff+0xd0>
   14618:	mov	ip, r4
   1461a:	mov	r1, r5
   1461c:	ldr.w	lr, [r1], #4
   14620:	uxtah	r2, r3, lr
   14624:	asrs	r3, r2, #16
   14626:	add.w	r3, r3, lr, lsr #16
   1462a:	uxth	r2, r2
   1462c:	orr.w	r2, r2, r3, lsl #16
   14630:	cmp	r7, r1
   14632:	str.w	r2, [ip], #4
   14636:	mov.w	r3, r3, asr #16
   1463a:	bhi.n	1461c <__mdiff+0xa4>
   1463c:	mvns	r5, r5
   1463e:	add	r5, r7
   14640:	bic.w	r5, r5, #3
   14644:	adds	r5, #4
   14646:	add	r4, r5
   14648:	subs	r4, #4
   1464a:	cbnz	r2, 14656 <__mdiff+0xde>
   1464c:	ldr.w	r3, [r4, #-4]!
   14650:	subs	r6, #1
   14652:	cmp	r3, #0
   14654:	beq.n	1464c <__mdiff+0xd4>
   14656:	str	r6, [r0, #16]
   14658:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1465c:	movs	r1, #0
   1465e:	bl	14124 <_Balloc>
   14662:	movs	r2, #1
   14664:	movs	r3, #0
   14666:	str	r2, [r0, #16]
   14668:	str	r3, [r0, #20]
   1466a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1466e:	mov	r4, r5
   14670:	mov.w	r9, #0
   14674:	mov	r5, r2
   14676:	b.n	145c8 <__mdiff+0x50>
   14678:	mov	r3, r7
   1467a:	add.w	r4, r7, #20
   1467e:	add.w	r5, r8, #20
   14682:	mov	r7, r8
   14684:	mov.w	r9, #1
   14688:	mov	r8, r3
   1468a:	b.n	145c8 <__mdiff+0x50>

0001468c <__d2b>:
   1468c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14690:	vmov	r6, r7, d0
   14694:	sub	sp, #12
   14696:	mov	r8, r1
   14698:	movs	r1, #1
   1469a:	mov	r4, r7
   1469c:	ubfx	r5, r7, #20, #11
   146a0:	mov	r7, r2
   146a2:	bl	14124 <_Balloc>
   146a6:	ubfx	r4, r4, #0, #20
   146aa:	mov	r9, r0
   146ac:	cbz	r5, 146b2 <__d2b+0x26>
   146ae:	orr.w	r4, r4, #1048576	; 0x100000
   146b2:	str	r4, [sp, #4]
   146b4:	cbz	r6, 146fe <__d2b+0x72>
   146b6:	add	r0, sp, #8
   146b8:	str.w	r6, [r0, #-8]!
   146bc:	bl	14244 <__lo0bits>
   146c0:	cmp	r0, #0
   146c2:	bne.n	1472e <__d2b+0xa2>
   146c4:	ldmia.w	sp, {r2, r3}
   146c8:	str.w	r2, [r9, #20]
   146cc:	cmp	r3, #0
   146ce:	ite	eq
   146d0:	moveq	r1, #1
   146d2:	movne	r1, #2
   146d4:	str.w	r3, [r9, #24]
   146d8:	str.w	r1, [r9, #16]
   146dc:	cbnz	r5, 14716 <__d2b+0x8a>
   146de:	add.w	r3, r9, r1, lsl #2
   146e2:	subw	r0, r0, #1074	; 0x432
   146e6:	str.w	r0, [r8]
   146ea:	ldr	r0, [r3, #16]
   146ec:	bl	14204 <__hi0bits>
   146f0:	rsb	r0, r0, r1, lsl #5
   146f4:	str	r0, [r7, #0]
   146f6:	mov	r0, r9
   146f8:	add	sp, #12
   146fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   146fe:	add	r0, sp, #4
   14700:	bl	14244 <__lo0bits>
   14704:	ldr	r3, [sp, #4]
   14706:	str.w	r3, [r9, #20]
   1470a:	movs	r1, #1
   1470c:	adds	r0, #32
   1470e:	str.w	r1, [r9, #16]
   14712:	cmp	r5, #0
   14714:	beq.n	146de <__d2b+0x52>
   14716:	subw	r5, r5, #1075	; 0x433
   1471a:	add	r5, r0
   1471c:	rsb	r0, r0, #53	; 0x35
   14720:	str.w	r5, [r8]
   14724:	str	r0, [r7, #0]
   14726:	mov	r0, r9
   14728:	add	sp, #12
   1472a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1472e:	ldmia.w	sp, {r2, r3}
   14732:	rsb	r1, r0, #32
   14736:	lsl.w	r1, r3, r1
   1473a:	orrs	r2, r1
   1473c:	lsrs	r3, r0
   1473e:	str	r3, [sp, #4]
   14740:	str.w	r2, [r9, #20]
   14744:	b.n	146cc <__d2b+0x40>
   14746:	nop

00014748 <__ssprint_r>:
   14748:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1474c:	ldr	r3, [r2, #8]
   1474e:	sub	sp, #12
   14750:	mov	r8, r2
   14752:	cmp	r3, #0
   14754:	beq.n	1483c <__ssprint_r+0xf4>
   14756:	mov	fp, r0
   14758:	mov.w	r9, #0
   1475c:	ldr	r6, [r2, #0]
   1475e:	ldr	r0, [r1, #0]
   14760:	ldr	r3, [r1, #8]
   14762:	mov	r5, r1
   14764:	mov	r4, r9
   14766:	cmp	r4, #0
   14768:	beq.n	147f6 <__ssprint_r+0xae>
   1476a:	cmp	r4, r3
   1476c:	mov	r7, r3
   1476e:	mov	sl, r3
   14770:	bcc.n	14800 <__ssprint_r+0xb8>
   14772:	ldrh	r3, [r5, #12]
   14774:	tst.w	r3, #1152	; 0x480
   14778:	beq.n	147d6 <__ssprint_r+0x8e>
   1477a:	ldr	r7, [r5, #20]
   1477c:	ldr	r1, [r5, #16]
   1477e:	add.w	r7, r7, r7, lsl #1
   14782:	rsb	sl, r1, r0
   14786:	add.w	r7, r7, r7, lsr #31
   1478a:	adds	r0, r4, #1
   1478c:	asrs	r7, r7, #1
   1478e:	add	r0, sl
   14790:	cmp	r0, r7
   14792:	mov	r2, r7
   14794:	itt	hi
   14796:	movhi	r7, r0
   14798:	movhi	r2, r7
   1479a:	lsls	r3, r3, #21
   1479c:	bpl.n	14806 <__ssprint_r+0xbe>
   1479e:	mov	r1, r2
   147a0:	mov	r0, fp
   147a2:	bl	10678 <_malloc_r>
   147a6:	cmp	r0, #0
   147a8:	beq.n	1481a <__ssprint_r+0xd2>
   147aa:	mov	r2, sl
   147ac:	ldr	r1, [r5, #16]
   147ae:	str	r0, [sp, #4]
   147b0:	bl	db58 <memcpy>
   147b4:	ldrh	r2, [r5, #12]
   147b6:	ldr	r3, [sp, #4]
   147b8:	bic.w	r2, r2, #1152	; 0x480
   147bc:	orr.w	r2, r2, #128	; 0x80
   147c0:	strh	r2, [r5, #12]
   147c2:	rsb	r2, sl, r7
   147c6:	add.w	r0, r3, sl
   147ca:	str	r7, [r5, #20]
   147cc:	str	r3, [r5, #16]
   147ce:	str	r0, [r5, #0]
   147d0:	str	r2, [r5, #8]
   147d2:	mov	r7, r4
   147d4:	mov	sl, r4
   147d6:	mov	r2, sl
   147d8:	mov	r1, r9
   147da:	bl	10d24 <memmove>
   147de:	ldr.w	r2, [r8, #8]
   147e2:	ldr	r3, [r5, #8]
   147e4:	ldr	r0, [r5, #0]
   147e6:	subs	r3, r3, r7
   147e8:	add	r0, sl
   147ea:	subs	r4, r2, r4
   147ec:	str	r3, [r5, #8]
   147ee:	str	r0, [r5, #0]
   147f0:	str.w	r4, [r8, #8]
   147f4:	cbz	r4, 1483c <__ssprint_r+0xf4>
   147f6:	ldr.w	r9, [r6]
   147fa:	ldr	r4, [r6, #4]
   147fc:	adds	r6, #8
   147fe:	b.n	14766 <__ssprint_r+0x1e>
   14800:	mov	r7, r4
   14802:	mov	sl, r4
   14804:	b.n	147d6 <__ssprint_r+0x8e>
   14806:	mov	r0, fp
   14808:	bl	10e90 <_realloc_r>
   1480c:	mov	r3, r0
   1480e:	cmp	r0, #0
   14810:	bne.n	147c2 <__ssprint_r+0x7a>
   14812:	ldr	r1, [r5, #16]
   14814:	mov	r0, fp
   14816:	bl	13f38 <_free_r>
   1481a:	movs	r3, #12
   1481c:	str.w	r3, [fp]
   14820:	ldrh	r3, [r5, #12]
   14822:	movs	r2, #0
   14824:	orr.w	r3, r3, #64	; 0x40
   14828:	mov.w	r0, #4294967295
   1482c:	strh	r3, [r5, #12]
   1482e:	str.w	r2, [r8, #8]
   14832:	str.w	r2, [r8, #4]
   14836:	add	sp, #12
   14838:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1483c:	movs	r0, #0
   1483e:	str.w	r0, [r8, #4]
   14842:	add	sp, #12
   14844:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014848 <_vasnprintf_r>:
   14848:	push	{r4, r5, r6, lr}
   1484a:	mov	r5, r2
   1484c:	sub	sp, #104	; 0x68
   1484e:	ldr	r4, [r2, #0]
   14850:	cbz	r1, 14856 <_vasnprintf_r+0xe>
   14852:	cmp	r4, #0
   14854:	bne.n	1488c <_vasnprintf_r+0x44>
   14856:	movs	r4, #0
   14858:	mov.w	r2, #648	; 0x288
   1485c:	strh.w	r2, [sp, #12]
   14860:	str	r4, [sp, #0]
   14862:	str	r4, [sp, #16]
   14864:	mov	r2, r3
   14866:	movw	r6, #65535	; 0xffff
   1486a:	ldr	r3, [sp, #120]	; 0x78
   1486c:	str	r4, [sp, #8]
   1486e:	mov	r1, sp
   14870:	str	r4, [sp, #20]
   14872:	strh.w	r6, [sp, #14]
   14876:	bl	115c0 <_svfprintf_r>
   1487a:	cmp	r0, #0
   1487c:	blt.n	148a2 <_vasnprintf_r+0x5a>
   1487e:	ldr	r3, [sp, #0]
   14880:	str	r0, [r5, #0]
   14882:	movs	r2, #0
   14884:	strb	r2, [r3, #0]
   14886:	ldr	r0, [sp, #16]
   14888:	add	sp, #104	; 0x68
   1488a:	pop	{r4, r5, r6, pc}
   1488c:	mov.w	r2, #1544	; 0x608
   14890:	str	r1, [sp, #0]
   14892:	str	r1, [sp, #16]
   14894:	strh.w	r2, [sp, #12]
   14898:	bge.n	14864 <_vasnprintf_r+0x1c>
   1489a:	movs	r3, #139	; 0x8b
   1489c:	str	r3, [r0, #0]
   1489e:	movs	r0, #0
   148a0:	b.n	14888 <_vasnprintf_r+0x40>
   148a2:	movs	r0, #0
   148a4:	b.n	14888 <_vasnprintf_r+0x40>
   148a6:	nop

000148a8 <vtable for Stream>:
	...
   148b0:	A...U...m...q...
   148c0:	A...A...A...

000148cc <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   148d4:	Q.......m.......
   148e4:	............

000148f0 <vtable for FsFile>:
	...
   148f8:	Q.......m.......
   14908:	............

00014914 <vtable for File>:
	...
   1491c:	....U...m.......
   1492c:	....}...........
   1493c:	1.......}.......
   1494c:	................
   1495c:	............-...
   1496c:	9...q...

00014974 <vtable for SDFile>:
	...
   1497c:	....U...m...=...
   1498c:	....}...I.......
   1499c:	........1.......
   149ac:	....!...........
   149bc:	........].......
   149cc:	1.......

000149d4 <vtable for SDClass>:
	...
   149dc:	....=.......1...
   149ec:	............a...
   149fc:	  File    this=%
   14a0c:	x, f=%x.....   S
   14a1c:	DFile this=%x, r
   14a2c:	efcount=%u..%s: 
   14a3c:	%6d %4d; %4d %4d
   14a4c:	; %4d...SD Stora
   14a5c:	ge %d %d %s fail
   14a6c:	ed or missing...
   14a7c:	SD Storage %d %d
   14a8c:	 %s .....Start..
   14a9c:	.Stop...Reset...
   14aac:	Now: %04d-%02d-%
   14abc:	02d_%02d:%02d:%0
   14acc:	2d......WMXZ....
   14adc:	/%d/%02d_%02d_%0
   14aec:	2d.raw..%d %d %d
   14afc:	 %d %d %d %d....
   14b0c:	loop....MTP logg
   14b1c:	er..Setup done..
   14b2c:	 Enter 's' to st
   14b3c:	art, 'q' to stop
   14b4c:	 acquisition and
   14b5c:	 'r' to restart 
   14b6c:	MTP.sd1.

00014b74 <vtable for MTPStorage_SD>:
	...
   14b7c:	9...U...Y...i...
   14b8c:	u...a...e....;..
   14b9c:	.(...)..Y)...1..
   14bac:	.0......q)...C..
   14bbc:	}.......q+...Y..
   14bcc:	.L...M../mtpinde
   14bdc:	x.dat...cannot o
   14bec:	pen Index file..
   14bfc:	/...%s/%s...%d: 
   14c0c:	%d %d %d %d %d %
   14c1c:	s...%d: %d %d %d
   14c2c:	 %d %d..

00014c34 <supported_op>:
   14c34:	................
   14c44:	................
   14c54:	........

00014c5c <propertyList>:
   14c5c:	............A.D.
   14c6c:	Teensy..microsof
   14c7c:	t.com: 1.0;.PJRC
   14c8c:	.... / MTP 1.0..
   14c9c:	%x %d %d %d: ...
   14cac:	 %x.Event: .

00014cb8 <supported_events>:
   14cb8:	.@.@.@.@

00014cc0 <SPIClass::spi1_hardware>:
   14cc0:	<..@. ..........
   14cd0:	....]y....=;....
   14ce0:	..............=;
   14cf0:	................
   14d00:	 .<.............
   14d10:	..:>?...........
   14d20:	................
	...
   14d48:	............

00014d54 <SPISettings::ctar_div_table>:
   14d54:	................
   14d64:	...... .(.8.@.`.
   14d74:	................

00014d84 <SPIClass::spi0_hardware>:
   14d84:	<..@............
   14d94:	.....z....'.....
   14da4:	................
   14db4:	................
   14dc4:	................
   14dd4:	..........-.....
   14de4:	................
   14df4:	................
   14e04:	................
   14e14:	.. .

00014e18 <SPISettings::ctar_clock_table>:
   14e18:	................
   14e28:	................
   14e38:	. ....... ...0..
   14e48:	. ... ...@...@..
   14e58:	.P...P...`...`..
   14e68:	.p...`...p..

00014e74 <monthDays>:
   14e74:	............

00014e80 <vtable for AudioControlSGTL5000>:
	...
   14e88:	M...............
   14e98:	Y...

00014e9c <TwoWire::i2c0_hardware>:
   14e9c:	4..@@.....".0...
   14eac:	....!./.........

00014ebc <TwoWire::i2c1_hardware>:
   14ebc:	4..@....&:......
   14ecc:	..%;............

00014edc <TwoWire::i2c2_hardware>:
   14edc:	(..@@...........
   14eec:	............J...

00014efc <vtable for TwoWire>:
	...
   14f04:	........m.......
   14f14:	u...........EXFA
   14f24:	T...

00014f28 <vtable for SdSpiCard>:
	...
   14f30:	}.......I...i...
   14f40:	........)...}...
   14f50:	........a...e...
   14f60:	............u...
   14f70:	y.......E...M...

00014f80 <vtable for SdioCard>:
	...
   14f88:	........i.......
   14f98:	I...........y...
   14fa8:	........!...-...
   14fb8:	9...U...q.......
   14fc8:	........}...U...

00014fd8 <usb_endpoint_config_table>:
   14fd8:	........

00014fe0 <usb_descriptor_list>:
   14fe0:	....d...........
   14ff0:	....i...........
   15000:	........4.......
   15010:	....x...........
   15020:	............8...
	...
   15040:	0...1...

00015048 <digital_pin_to_info_PGM>:
   15048:	@..C@..@D..CD..@
   15058:	...C...@0..C0..@
   15068:	4..C4..@...C...@
   15078:	...C...@...C...@
   15088:	...C...@...C...@
   15098:	...C...@...C...@
   150a8:	...C...@...C...@
   150b8:	...C...@...C...@
   150c8:	...C...@...C...@
   150d8:	...C...@...C...@
   150e8:	...C...@...C...@
   150f8:	...C...@...C...@
   15108:	h .Ch..@...C...@
   15118:	8..C8..@<..C<..@
   15128:	@..C@..@H..CH..@
   15138:	L..CL..@(..C(..@
   15148:	,..C,..@` .C`..@
   15158:	d .Cd..@ ..C ..@
   15168:	$..C$..@(..C(..@
   15178:	,..C,..@D..CD..@
   15188:	p..Cp..@t..Ct..@
   15198:	h..Ch..@P..CP..@
   151a8:	X..CX..@\..C\..@
   151b8:	T..CT..@ ..C ..@
   151c8:	$..C$..@...C...@
   151d8:	...C...@8..C8..@
   151e8:	4..C4..@0..C0..@
   151f8:	<..C<..@,..C,..@
   15208:	( .C(..@, .C,..@
   15218:	. .C...@. .C...@
   15228:	. .C...@. .C...@
   15238:	. .C...@. .C...@

00015248 <vtable for usb_serial_class>:
	...
   15250:	M...E...A...=...
   15260:	9...5...1...-...
   15270:	....

00015274 <_global_impure_ptr>:
   15274:	p...C...POSIX...
   15284:	....

00015288 <zeroes.7258>:
   15288:	0000000000000000
   15298:	INF.inf.NAN.nan.
   152a8:	0123456789ABCDEF
   152b8:	....0123456789ab
   152c8:	cdef....(null)..

000152d8 <blanks.7257>:
   152d8:	                

000152e8 <_ctype_>:
   152e8:	.         ((((( 
   152f8:	                
   15308:	 ...............
   15318:	................
   15328:	..AAAAAA........
   15338:	................
   15348:	..BBBBBB........
   15358:	................
   15368:	 ...............
	...
   153e8:	....Infinity....
   153f8:	NaN.....

00015400 <__mprec_tens>:
   15400:	.......?......$@
   15410:	......Y@.....@.@
   15420:	.......@.....j.@
   15430:	.......A......cA
   15440:	.......A....e..A
   15450:	... _..B....vH7B
   15460:	......mB..@..0.B
   15470:	.......B..4&.k.C
   15480:	...7y.AC....W4vC
   15490:	..Ngm..C.=.`.X.C
   154a0:	@..x...DP.....KD
   154b0:	..M....D.J...-.D
   154c0:	...yCx.D

000154c8 <__mprec_bigtens>:
   154c8:	...7y.AC.n.....F
   154d8:	..?..O8M2.0.Hw.Z
   154e8:	<.s..O.u

000154f0 <p05.6087>:
   154f0:	........}...

000154fc <_init>:
   154fc:	push	{r3, r4, r5, r6, r7, lr}
   154fe:	nop
   15500:	pop	{r3, r4, r5, r6, r7}
   15502:	pop	{r3}
   15504:	mov	lr, r3
   15506:	bx	lr

00015508 <__init_array_start>:
   15508:	.word	0x00012df5

0001550c <__frame_dummy_init_array_entry>:
   1550c:	5...]...........
   1551c:	............=...
   1552c:	U...............
   1553c:	................
   1554c:	-...E...].......

Disassembly of section .fini:

0001555c <_fini>:
   1555c:	push	{r3, r4, r5, r6, r7, lr}
   1555e:	nop
