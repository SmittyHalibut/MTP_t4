
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000179a0 l    d  .fini	00000000 .fini
000179a4 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff14c0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000100a0 l     F .text	0000000c startup_default_early_hook
000100ac l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff14c0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff14c4 l       .bss	00000000 object.8610
00017994 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000005d4 l     F .text	00000002 __tcf_0
000015d8 l     F .text	00000124 _GLOBAL__sub_I__Z17usb_mtp_configurev
00000000 l    df *ABS*	00000000 Storage.cpp
00001958 l     F .text	000000a0 File::invalidate() [clone .isra.1]
00001eec l     F .text	00000084 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]
00003374 l     F .text	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]
000033ac l     F .text	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]
00003bd8 l     F .text	000000b2 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]
00004788 l     F .text	00000a4c mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]
00000000 l    df *ABS*	00000000 MTP.cpp
00005428 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00005534 l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00006738 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
00016d1c l     O .text	00000028 supported_op
00016d44 l     O .text	00000010 propertyList
00016da4 l     O .text	00000008 supported_events
00000000 l    df *ABS*	00000000 SPI.cpp
00007028 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
000078b0 l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff1f70 l     O .bss	00000004 cacheTime
1fff1f74 l     O .bss	00000007 tm
1fff1f7c l     O .bss	00000004 sysTime
1fff1f80 l     O .bss	00000001 Status
1fff1f88 l     O .bss	00000004 prevMillis
1fff0a00 l     O .data	00000004 syncInterval
00016f60 l     O .text	0000000c monthDays
1fff1f8c l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 SD.cpp
00007a30 l     F .text	00000064 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 FsCache.cpp
00007a94 l     F .text	0000009c FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 FmtNumber.cpp
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatFormatter.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatFilePrint.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
0000ab28 l     F .text	000000ec FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatFilePrint.cpp
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000ccb8 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000e048 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]
0000e060 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000e950 l     F .text	00000030 sdIrs()
0000e980 l     F .text	00000018 isBusyCommandComplete()
0000e998 l     F .text	00000010 isBusyCommandInhibit()
0000e9a8 l     F .text	00000014 isBusyDat()
0000e9bc l     F .text	0000000c isBusyDMA()
0000e9c8 l     F .text	00000014 isBusyFifoRead()
0000e9dc l     F .text	00000014 isBusyFifoWrite()
0000e9f0 l     F .text	00000018 isBusyTransferComplete()
0000ea08 l     F .text	000000cc setSdclk(unsigned long)
0000eb38 l     F .text	00000028 waitTimeout(bool (*)())
0000eb60 l     F .text	0000004c yieldTimeout(bool (*)())
0000ebdc l     F .text	0000005c cardCommand(unsigned long, unsigned long)
0000ec38 l     F .text	0000002c isBusyCMD13()
0000ec84 l     F .text	00000064 readReg16(unsigned long, void*)
0000ece8 l     F .text	00000020 waitDmaStatus() [clone .part.4]
0000ed08 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000ef14 l     F .text	00000058 waitTransferComplete() [clone .part.8]
0000f2e8 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff2458 l     O .bss	00000001 m_version2
1fff245c l     O .bss	00000010 m_cid
1fff246c l     O .bss	00000004 m_busyFcn
1fff2470 l     O .bss	00000001 m_highCapacity
1fff2474 l     O .bss	00000004 m_ocr
1fff2478 l     O .bss	00000004 m_rca
1fff247c l     O .bss	00000001 m_transferActive
1fff2480 l     O .bss	00000004 m_irqstat
1fff0a04 l     O .data	00000001 m_errorCode
1fff2484 l     O .bss	00000001 m_initDone
1fff2488 l     O .bss	00000010 m_csd
1fff2498 l     O .bss	00000001 m_dmaBusy
1fff249c l     O .bss	00000004 m_sdClkKhz
1fff24a0 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff24a5 l     O .bss	00000001 tx_noautoflush
1fff24a8 l     O .bss	00000004 tx_packet
1fff24ac l     O .bss	00000001 transmit_previous_timeout
1fff24b0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0a0c l     O .data	00000012 device_descriptor
1fff0a38 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
000104fc l     F .text	0000004c digitalWrite.part.1
00010548 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0af8 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff24bc l     O .bss	00000004 ep0_tx_ptr
1fff24c0 l     O .bss	00000018 rx_last
1fff24d8 l     O .bss	00000002 ep0_tx_len
1fff24dc l     O .bss	00000040 ep0_rx0_buf
1fff251c l     O .bss	00000018 rx_first
1fff2534 l     O .bss	00000001 ep0_tx_data_toggle
1fff2538 l     O .bss	00000040 ep0_rx1_buf
1fff2578 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff2590 l     O .bss	00000018 tx_last
1fff25a8 l     O .bss	00000008 setup
1fff25b0 l     O .bss	00000001 ep0_tx_bdt_bank
1fff25b4 l     O .bss	00000008 reply_buffer
1fff25c0 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff25c6 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff25f5 l     O .bss	00000001 calibrating
1fff0b11 l     O .data	00000001 analog_config_bits
1fff25f6 l     O .bss	00000001 analog_reference_internal
1fff0b12 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00017710 l     O .text	00000010 zeroes.7258
00017760 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00014f34 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00014f54 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00017978 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0b18 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff14c0 l       .bss	00000000 __bss_start__
1fff2648 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00010098  w    F .text	00000006 adc0_isr
00001d90 g     F .text	0000015c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00012344 g     F .text	0000002c .hidden __aeabi_dcmpun
0000fdf4 g     F .text	0000001c usb_serial_available
00012308 g     F .text	00000012 .hidden __aeabi_dcmple
00013440 g     F .text	000000ba strcpy
00012244 g     F .text	0000007a .hidden __cmpdf2
0000f260 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
000115e8  w    F .text	000000ec yield
0000c0a0 g     F .text	000003b0 FatFile::write(void const*, unsigned int)
00012244 g     F .text	0000007a .hidden __eqdf2
0000e034  w    F .text	00000002 SdSpiCard::~SdSpiCard()
000118dc g     F .text	000000ba Print::printNumber64(unsigned long long, unsigned char, unsigned char)
00008544 g     F .text	000005f0 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff1e50 g     O .bss	00000104 storage
1fff0a20 g     O .data	00000018 usb_string_manufacturer_name_default
1fff1f6c g     O .bss	00000004 tx_event_packet
0000bf44 g     F .text	0000015c FatFile::truncate()
000021e0 g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
00011db4 g     F .text	0000005a .hidden __floatdidf
00010050  w    F .text	00000048 hard_fault_isr
00010098  w    F .text	00000006 dma_ch6_isr
1fff2448 g     O .bss	00000004 FsDateTime::callback
00011800 g     F .text	00000020 Print::println()
00010098  w    F .text	00000006 uart0_lon_isr
000083c0 g     F .text	00000184 ExFatFile::seekSet(unsigned long long)
00015eb4 g     F .text	00000100 fcvtbuf
0001094c g     F .text	00000108 usb_rx_memory
0000e018  w    F .text	00000004 SdSpiCard::errorCode() const
000004b0  w    F .text	0000000c File::flush()
00006f88 g     F .text	00000018 usb_init_events
00010098  w    F .text	00000006 dma_ch8_isr
00012fec g     F .text	00000002 __malloc_unlock
000006c8  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff2454 g     O .bss	00000004 FsVolume::m_cwv
0000adb4 g     F .text	0000018c FatFile::open(FatFile*, char const*, int)
000119b4 g     F .text	000000e0 analog_init
00010a54 g     F .text	00000084 usb_tx
00010098  w    F .text	00000006 portcd_isr
0000c450 g     F .text	00000024 FatFile::printModifyDateTime(Print*)
00014de4 g     F .text	0000004a _vdprintf_r
00007648 g     F .text	000000b0 SPIClass::setSCK(unsigned char)
00016ab4  w    O .text	00000060 vtable for SDFile
00012e84 g     F .text	000000c6 memmove
000033dc g     F .text	00000046 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0000f958 g     F .text	00000068 SdioCard::stopTransmission(bool)
00016264 g     F .text	0000004c _Balloc
00010098  w    F .text	00000006 can1_rx_warn_isr
00006fd8 g     F .text	0000002c MTPD::send_Event(unsigned short)
00001718  w    F .text	00000004 MTPStorage_SD::get_FSCount()
000179ac g       .ARM.exidx	00000000 __exidx_end
00010098  w    F .text	00000006 dma_error_isr
0000c950 g     F .text	000000a0 FatPartition::freeChain(unsigned long)
1fff25d8 g     O .bss	00000001 EventResponder::runningFromYield
0000fb94 g     F .text	0000001a SdSpiArduinoDriver::receive()
0000e20c g     F .text	00000096 SdSpiCard::cardCommand(unsigned char, unsigned long)
00010098  w    F .text	00000006 i2c0_isr
000117d4 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
00012234 g     F .text	0000008a .hidden __gtdf2
0000cce0 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
00012768 g     F .text	0000000c __errno
00000b64  w    F .text	00000026 SDFile::isDirectory()
00010098  w    F .text	00000006 portd_isr
00010098  w    F .text	00000006 enet_error_isr
00008dec g     F .text	0000011c ExFatFile::printName(Print*)
00000e24  w    F .text	00000028 File::~File()
1fff25c8 g     O .bss	00000004 EventResponder::firstInterrupt
000058d4 g     F .text	0000006e MTPD::GetObjectHandles(unsigned long, unsigned long)
0000e038  w    F .text	0000000e SdSpiCard::~SdSpiCard()
0000dda4 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
00010098  w    F .text	00000006 tpm1_isr
0000969c g     F .text	0000003c ExFatPartition::rootLength()
0000e01c  w    F .text	00000004 SdSpiCard::errorData() const
000117c4  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000174d0 g     O .text	00000200 digital_pin_to_info_PGM
1fff2644 g     O .bss	00000004 errno
0000e4b8 g     F .text	0000004c SdSpiCard::readOCR(unsigned long*)
0000fbb0 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000d72c g     F .text	0000054c FatFile::open(FatFile*, fname_t*, int)
0000927c g     F .text	00000074 ExFatPartition::fatGet(unsigned long, unsigned long*)
000179ac g       .ARM.exidx	00000000 _etext
00007354 g     F .text	00000134 _spi_dma_rxISR0()
1fff14c0 g       .bss	00000000 _sbss
0000fc3c g     F .text	00000006 sdCsInit(unsigned char)
000122d0 g     F .text	00000010 .hidden __aeabi_cdcmple
0000eae0 g     F .text	0000000c SdioCard::errorData() const
0000172c g     F .text	0000000c MTPStorage_SD::totalSize(unsigned long)
00004548 g     F .text	000000fe MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
0000f190 g     F .text	000000d0 SdioCard::writeSector(unsigned long, unsigned char const*)
00010098  w    F .text	00000006 porte_isr
0000158c g     F .text	0000004c loop
00010098  w    F .text	00000006 portb_isr
00010098  w    F .text	00000006 spi1_isr
00005dc0 g     F .text	00000144 MTPD::GetStorageInfo(unsigned long)
00010098  w    F .text	00000006 uart3_status_isr
00007fa8 g     F .text	00000144 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00010098  w    F .text	00000006 mcm_isr
0000f728 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000e150 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
1fff25cc g     O .bss	00000004 EventResponder::lastInterrupt
00010098  w    F .text	00000006 uart1_status_isr
0000de1c g     F .text	00000028 FsBaseFile::close()
0000fc48 g     F .text	00000134 memcpy
00010098  w    F .text	00000006 randnum_isr
000122c0 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000494  w    F .text	0000000c File::available()
00003424 g     F .text	000007b4 MTPStorage_SD::removeFile(unsigned long, char*)
00002b5c g     F .text	00000816 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
000093bc g     F .text	000000e8 ExFatPartition::freeChain(unsigned long)
000024e4 g     F .text	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
0000b1e4 g     F .text	0000002a FatFile::peek()
00013700 g     F .text	000016e4 _svfprintf_r
00011d44 g     F .text	00000022 .hidden __floatsidf
00000600  w    F .text	00000014 SDFile::whoami()
1fff14dc  w    O .bss	00000001 SDFile::name()::zeroterm
1fff24b8 g     O .bss	00000004 systick_millis_count
0001223c g     F .text	00000082 .hidden __ltdf2
0000a1fc g     F .text	0000015c ExFatFile::rename(ExFatFile*, char const*)
00010050  w    F .text	00000048 bus_fault_isr
00000938  w    F .text	00000044 SDFile::truncate(unsigned long long)
00006910 g     F .text	00000678 MTPD::loop()
00010098  w    F .text	00000006 watchdog_isr
000123c0 g     F .text	00000000 .hidden __aeabi_uldivmod
00010098  w    F .text	00000006 i2c1_isr
1fff25bc g     O .bss	00000001 usb_configuration
00010098  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
0000fa40 g     F .text	0000002c SdioCard::syncDevice()
0000eff8 g     F .text	0000009c SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
1fff25d9 g     O .bss	00000001 SPCRemulation::pinout
00000cfc  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
0000b210 g     F .text	00000078 FatFile::readDirCache(bool)
00010098  w    F .text	00000006 i2c2_isr
1fff0a20  w    O .data	00000018 usb_string_manufacturer_name
1fff2638 g     O .bss	0000000c usb_rx_byte_count_data
00010098  w    F .text	00000006 pit1_isr
1fff0aa4 g     O .data	00000008 usb_string_mtp
000127c4 g     F .text	00000010 malloc
00010098  w    F .text	00000006 dma_ch4_isr
00010098  w    F .text	00000006 software_isr
00016a30  w    O .text	00000024 vtable for FsFile
00010098  w    F .text	00000006 dma_ch7_isr
0000700c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00017888 g     O .text	000000c8 __mprec_tens
00011520 g     F .text	000000c8 usb_init
1fff1f68 g     O .bss	00000004 sessionID_
0000e030  w    F .text	00000004 SdSpiCard::type() const
00010098  w    F .text	00000006 lptmr_isr
00000da0  w    F .text	00000084 SDFile::seek(unsigned long long, int)
1fff2600 g     O .bss	00000004 __malloc_top_pad
000105d0 g     F .text	00000024 rtc_set
1fff09c0 g     O .data	00000040 SPI1
0000e084 g     F .text	0000007a SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000a358 g     F .text	000001c8 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
00011d24 g     F .text	0000001e .hidden __aeabi_ui2d
00016248 g     F .text	0000001c _localeconv_r
1fff0974 g     O .data	00000008 sd_str
000105c0 g     F .text	00000010 attachInterruptVector
0000fb4c g     F .text	00000048 SdSpiArduinoDriver::deactivate()
000163e0 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
0000050c  w    F .text	0000000c File::operator bool()
000123f0 g     F .text	000002e2 .hidden __udivmoddi4
00005c04 g     F .text	000001bc MTPD::getObjectPropValue(unsigned long, unsigned long)
00011aa0 g     F .text	00000000 .hidden __aeabi_drsub
0000a8e0 g     F .text	0000006c FatFile::addCluster()
000133d0 g     F .text	00000024 _sbrk_r
0000e504 g     F .text	0000003e SdSpiCard::readRegister(unsigned char, void*)
0000ebbc g     F .text	00000020 SdioCard::type() const
00000488  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
0000fd7c g     F .text	00000048 usb_serial_getchar
00010098  w    F .text	00000006 can1_bus_off_isr
00010098  w    F .text	00000006 ftm2_isr
000008ec  w    F .text	0000004c SDFile::name()
1fff262c g     O .bss	00000008 usb_cdc_line_coding
000105f4 g     F .text	0000000a digitalWrite
1fff25d0 g     O .bss	00000004 EventResponder::lastYield
00010098  w    F .text	00000006 uart5_status_isr
00010098  w    F .text	00000006 lpuart0_status_isr
00007f50 g     F .text	00000058 ExFatFile::openRoot(ExFatVolume*)
00017460 g     O .text	00000006 usb_endpoint_config_table
00010098  w    F .text	00000006 dma_ch9_isr
00007d88  w    F .text	0000001c Print::write(char const*)
000007f8  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00010098  w    F .text	00000006 pit2_isr
000122f4 g     F .text	00000012 .hidden __aeabi_dcmplt
00016f04 g     O .text	0000005c SPISettings::ctar_clock_table
1fff25fc g     O .bss	00000004 __malloc_max_sbrked_mem
00000ac8  w    F .text	0000001a SDFile::position()
00010600 g     F .text	0000000a pinMode
0000e804 g     F .text	00000042 SdSpiCard::writeStop()
00002950 g     F .text	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00010898 g     F .text	0000004c usb_free
00010098  w    F .text	00000006 i2c3_isr
00011d68 g     F .text	0000003a .hidden __extendsfdf2
00012064 g     F .text	000001d0 .hidden __aeabi_ddiv
00011aac g     F .text	00000276 .hidden __adddf3
00005b98 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
0000548c g     F .text	000000a8 MTPD::writestring(char const*)
0000e89c g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000004a0  w    F .text	00000010 File::peek()
0000c9f0 g     F .text	00000108 FatPartition::freeClusterCount()
00000bf0  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
000179a4 g       .ARM.exidx	00000000 __exidx_start
00011e10 g     F .text	00000254 .hidden __aeabi_dmul
0000e6fc g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
00010098  w    F .text	00000006 pit0_isr
1fff25d4 g     O .bss	00000004 EventResponder::firstYield
000176fc g     O .text	00000004 _global_impure_ptr
00001744 g     F .text	00000080 MTPStorage_SD::write(char const*, unsigned long)
00010098  w    F .text	00000006 can1_error_isr
00000844  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00012ff0 g     F .text	000003de _realloc_r
00000b00  w    F .text	00000018 SDFile::read(void*, unsigned int)
00012774 g     F .text	00000050 __libc_init_array
1fff2648 g       .bss	00000000 __bss_end
000101a8 g     F .text	00000354 dtostrf
000009cc  w    F .text	00000044 SDFile::rewindDirectory()
00010098  w    F .text	00000006 can0_wakeup_isr
00008cf4 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000eaec g     F .text	0000001c SdioCard::readCID(CID*)
00009df0 g     F .text	000001a0 ExFatFile::addDirCluster()
00010098  w    F .text	00000006 flash_cmd_isr
00004754 g     F .text	00000034 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
0000e848 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00017950 g     O .text	00000028 __mprec_bigtens
000117ac  w    F .text	00000004 usb_serial_class::clear()
00011d24 g     F .text	0000001e .hidden __floatunsidf
00010098  w    F .text	00000006 uart2_status_isr
000100b0 g     F .text	0000002c _sbrk
00016674 g     F .text	00000042 __mcmp
00003ca0 g     F .text	000008a8 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
00016b14  w    O .text	00000028 vtable for SDClass
000005c0  w    F .text	00000012 SDFile::operator bool()
1fff0a08 g     O .data	00000004 __brkval
00007d44 g     F .text	00000042 fsPrintDateTime(Print*, unsigned short, unsigned short)
1fff24b4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00010008 g     F .text	00000048 usb_serial_flush_callback
00017984 g     F .text	00000000 _init
0000aad4 g     F .text	00000054 FatFile::cacheDirEntry(unsigned char)
00010098  w    F .text	00000006 svcall_isr
00000b8c  w    F .text	00000062 SDClass::remove(char const*)
000006ac  w    F .text	0000001c SDFile::close()
00010098  w    F .text	00000006 dma_ch15_isr
00000f58  w    F .text	0000005c SDFile::~SDFile()
000079c8 g     F .text	00000020 day()
00010098  w    F .text	00000006 uart1_error_isr
00015fb4 g     F .text	00000028 __libc_fini_array
00010098  w    F .text	00000006 usbhs_phy_isr
0000fafc g     F .text	00000050 SdSpiArduinoDriver::begin(SdSpiConfig)
1fff2648 g       .bss	00000000 _ebss
0000f108 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000055f0 g     F .text	0000027c MTPD::WriteDescriptor()
1fff097c g     O .data	00000004 propertyListNum
00000cc0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00016344 g     F .text	00000040 __hi0bits
00012370 g     F .text	0000004e .hidden __fixdfsi
00009f90 g     F .text	000000dc ExFatFile::mkdir(ExFatFile*, ExName_t*)
00010098 g     F .text	00000006 unused_isr
0000586c g     F .text	00000068 MTPD::WriteStorageIDs()
00010098  w    F .text	00000006 spi0_isr
00010098  w    F .text	00000006 dma_ch3_isr
00007a2c  w    F .text	00000002 SDClass::~SDClass()
000051d4 g     F .text	00000214 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
1fff14e0 g     O .bss	00000970 sdx
00000e24  w    F .text	00000028 File::~File()
00000fb4 g     F .text	00000378 storage_configure()
00007a08 g     F .text	00000024 year()
000119b0 g     F .text	00000004 operator delete(void*, unsigned int)
00010098  w    F .text	00000006 flash_error_isr
00011aac g     F .text	00000276 .hidden __aeabi_dadd
0001223c g     F .text	00000082 .hidden __ledf2
00010098  w    F .text	00000006 uart5_error_isr
00010098  w    F .text	00000006 rtc_seconds_isr
00016e70 g     O .text	00000094 SPIClass::spi0_hardware
00010098  w    F .text	00000006 pdb_isr
00016524 g     F .text	000000a0 __pow5mult
0000b3e4 g     F .text	000000d0 FatFile::rmdir()
00011da4 g     F .text	0000006a .hidden __aeabi_ul2d
00010050  w    F .text	00000048 usage_fault_isr
00010098  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000c7f4 g     F .text	0000015c FatPartition::allocateCluster(unsigned long, unsigned long*)
00010098  w    F .text	00000006 dma_ch14_isr
00000d54  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
1fff2634 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0001179c g     F .text	00000010 systick_isr
00010098  w    F .text	00000006 rtc_alarm_isr
0000052c  w    F .text	0000000c File::isDirectory()
0000dc78 g     F .text	000000cc FatFile::getSFN(char*)
0000e63c g     F .text	0000006c SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
00010098  w    F .text	00000006 dma_ch2_isr
1fff0b00 g     O .data	00000010 Serial
00007c14 g     F .text	00000054 fmtBase10(char*, unsigned short)
00010098  w    F .text	00000006 ftm1_isr
000004c8  w    F .text	00000016 File::seek(unsigned long long, int)
00008d68 g     F .text	00000060 ExFatFile::printFileSize(Print*)
000117cc  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000dec4 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
000100a0  w    F .text	0000000c startup_early_hook
0000e8d0 g     F .text	00000064 SdSpiCard::writeSingle(unsigned long, unsigned char const*)
00010098  w    F .text	00000006 dma_ch13_isr
0000976c g     F .text	00000168 ExFatFile::addCluster()
00016a54  w    O .text	00000060 vtable for File
00010098  w    F .text	00000006 uart2_error_isr
00000a10  w    F .text	00000052 SDClass::usedSize()
0000fdc4 g     F .text	00000030 usb_serial_peekchar
00012330 g     F .text	00000012 .hidden __aeabi_dcmpgt
000019f8 g     F .text	00000002 mtp_yield()
00012d80 g     F .text	00000000 memchr
0000c708 g     F .text	000000ec FatPartition::fatPut(unsigned long, unsigned long)
1fff0ae0 g     O .data	00000016 usb_string_serial_number_default
00010050 g     F .text	00000048 fault_isr
00016078 g     F .text	000001d0 _free_r
0000ef6c g     F .text	0000008c SdioCard::readStop()
00007b30 g     F .text	000000d4 FsCache::get(unsigned long, unsigned char)
0001231c g     F .text	00000012 .hidden __aeabi_dcmpge
00010098  w    F .text	00000006 usb_charge_isr
00004648 g     F .text	0000010a MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
000117bc  w    F .text	00000004 usb_serial_class::flush()
00010098  w    F .text	00000006 cmt_isr
00011aa8 g     F .text	0000027a .hidden __aeabi_dsub
0000caf8 g     F .text	000001c0 FatPartition::init(BlockDeviceInterface*, unsigned char)
00010098  w    F .text	00000006 usbhs_isr
0000b7e8 g     F .text	0000024c FatFile::mkdir(FatFile*, fname_t*)
1fff14bc g     O .data	00000004 __malloc_sbrk_base
000117b4  w    F .text	00000004 usb_serial_class::read()
00010098  w    F .text	00000006 ftm3_isr
00000570  w    F .text	0000000c File::rewindDirectory()
00010098  w    F .text	00000006 tsi0_isr
0000d384 g     F .text	000002a4 FatFile::remove()
00011da4 g     F .text	0000006a .hidden __floatundidf
000100dc  w    F .text	00000002 __cxa_pure_virtual
000165c4 g     F .text	000000ae __lshift
0000ba34 g     F .text	00000184 FatFile::mkdir(FatFile*, char const*, bool)
00010098  w    F .text	00000006 spi2_isr
000096d8 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
00016888 g     F .text	00000100 __ssprint_r
00016988 g     F .text	0000005e _vasnprintf_r
000119a8  w    F .text	00000002 serialEvent()
1fff2535 g     O .bss	00000001 usb_reboot_timer
00014e90 g     F .text	000000a4 __register_exitproc
00008b34 g     F .text	000001c0 ExFatFile::open(ExFatFile*, char const*, int)
00007cbc g     F .text	00000050 fsFmtDate(char*, unsigned short)
00013550 g     F .text	0000002c strlcpy
0001365c g     F .text	000000a0 strncmp
0000a06c g     F .text	00000190 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000fe10 g     F .text	00000038 usb_serial_flush_input
000094a4 g     F .text	00000072 ExFatPartition::freeClusterCount()
000023d0 g     F .text	00000064 MTPStorage_SD::ConstructFilename(int, char*, int)
00007d0c g     F .text	00000038 fsFmtTime(char*, unsigned short)
000163f4 g     F .text	00000130 __multiply
0000ff50 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff2604 g     O .bss	00000028 __malloc_current_mallinfo
000167cc g     F .text	000000ba __d2b
1fff25dc g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
00010098  w    F .text	00000006 can0_bus_off_isr
0000ebac  w    F .text	0000000e SdioCard::~SdioCard()
0000171c  w    F .text	00000008 MTPStorage_SD::get_FSName(unsigned long)
00007e24 g     F .text	0000012c ExFatFile::getName(char*, unsigned int)
1fff25b1 g     O .bss	00000001 usb_rx_memory_needed
0000f094 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00010ad8 g     F .text	00000a48 usb_isr
00012738 g     F .text	0000000c __cxa_atexit
000080ec g     F .text	000002a4 ExFatFile::read(void*, unsigned int)
00011d44 g     F .text	00000022 .hidden __aeabi_i2d
00007da4  w    F .text	00000014 Print::println(int)
00000b18  w    F .text	00000018 SDFile::peek()
00007c04 g     F .text	0000000e FsCache::sync()
1fff0980 g     O .data	00000040 SPI
00012e20 g     F .text	00000062 memcmp
000176d0  w    O .text	00000028 vtable for usb_serial_class
0000fbd0 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
00010098  w    F .text	00000006 uart3_error_isr
00006608 g     F .text	0000007c MTPD::GetObject(unsigned long)
0000fc44 g     F .text	00000004 sdCsWrite(unsigned char, bool)
000126d4  w    F .text	00000002 .hidden __aeabi_ldiv0
00009aa0 g     F .text	000000a8 ExFatFile::rmdir()
00010098  w    F .text	00000006 porta_isr
00005f04 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00012064 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
0000e554 g     F .text	00000098 SdSpiCard::sectorCount()
00010098  w    F .text	00000006 low_voltage_isr
00001728 g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff10b0 g     O .data	00000408 __malloc_av_
00010098  w    F .text	00000006 can0_error_isr
000106ec g     F .text	0000016c _init_Teensyduino_internal_
00000830  w    F .text	00000014 SDFile::flush()
00011e10 g     F .text	00000254 .hidden __muldf3
0000ffb0 g     F .text	00000058 usb_serial_flush_output
00010098  w    F .text	00000006 dma_ch12_isr
00012fe8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000cf64 g     F .text	000002a8 FatFile::parsePathName(char const*, fname_t*, char const**)
00010098  w    F .text	00000006 can1_wakeup_isr
00006fa0 g     F .text	00000038 usb_mtp_sendEvent
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000fbe8 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000126d8 g     F .text	0000005e _calloc_r
00010098  w    F .text	00000006 pit3_isr
00007488 g     F .text	0000007c SPIClass::begin()
00006684 g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff1f84 g     O .bss	00000004 getTimePtr
1fff0afc g     O .data	00000001 yield_active_check_flags
00010098  w    F .text	00000006 enet_rx_isr
00009d60 g     F .text	00000090 ExFatFile::sync()
0000bbb8 g     F .text	00000380 FatFile::rename(FatFile*, char const*)
0000f9c0 g     F .text	00000080 SdioCard::isBusy()
00010098  w    F .text	00000006 portc_isr
0000e6a8 g     F .text	00000038 SdSpiCard::readStop()
00012f4c g     F .text	0000009a memset
00011998 g     F .text	00000010 main
1fff25f8 g     O .bss	00000004 __malloc_max_total_mem
00009084 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
000078c8 g     F .text	000000a0 now()
0000a520 g     F .text	000003c0 ExFatFile::write(void const*, unsigned int)
00016c5c g     O .text	00000060 vtable for MTPStorage_SD
00006764 g     F .text	00000132 MTPD::SendObjectInfo(unsigned long, unsigned long)
000134fc g     F .text	00000052 strlcat
00010050  w    F .text	00000048 memmanage_fault_isr
0000ac34 g     F .text	000000a0 FatFile::dirEntry(DirFat_t*)
00000788  w    F .text	00000058 SDFile::available()
00000500  w    F .text	0000000c File::close()
000100e0 g     F .text	0000007c usb_init_serialnumber
000179a0 g       .text	00000000 __init_array_end
00015080 g     F .text	00000e34 _dtoa_r
000127e4 g     F .text	00000570 _malloc_r
1fff25f4 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00010098  w    F .text	00000006 debugmonitor_isr
00014e48 g     F .text	0000001a __ascii_wctomb
0000dda4 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
00011db4 g     F .text	0000005a .hidden __aeabi_l2d
1fff2450 g     O .bss	00000004 FatVolume::m_cwv
000116d4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
000076f8 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
0001060c g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000538  w    F .text	00000038 File::openNextFile(unsigned char)
00010098  w    F .text	00000006 cmp1_isr
0000d20c g     F .text	00000178 FatFile::printName(Print*)
00010098  w    F .text	00000006 ftm0_isr
00009b48 g     F .text	00000218 ExFatFile::syncDir()
00015fdc g     F .text	0000009c _malloc_trim_r
1fff0adc g     O .data	00000004 string0
0000fe48 g     F .text	00000108 usb_serial_write
000016fc  w    F .text	0000001a MTPStorage_SD::addFilesystem(FS&, char const*)
000100ac  w    F .text	00000002 startup_late_hook
000117b8  w    F .text	00000004 usb_serial_class::available()
1fff0b10 g     O .data	00000001 _serialEvent_default
000066f4 g     F .text	00000044 MTPD::readstring(char*)
0000bf38 g     F .text	0000000c FatFile::sync()
0000097c  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0aac  w    O .data	0000002e usb_string_product_name
000053e8 g     F .text	00000028 MTPD::GetNumObjects(unsigned long, unsigned long)
00010650 g     F .text	0000009c delay
00012244 g     F .text	0000007a .hidden __nedf2
00010098  w    F .text	00000006 tpm0_isr
00001840 g     F .text	00000118 MTPStorage_SD::CloseIndex()
00007dcc g     F .text	00000058 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
000179a0 g     F .fini	00000000 _fini
00005410 g     F .text	00000018 MTPD::get_buffer()
00000518  w    F .text	00000014 File::name()
000079e8 g     F .text	00000020 month()
00016e40 g     O .text	0000002e SPISettings::ctar_div_table
0000e5ec g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00008d04 g     F .text	00000064 ExFatFile::openNext(ExFatFile*, int)
000133f4 g     F .text	0000004c sprintf
00011830 g     F .text	0000001c Print::printf(char const*, ...)
00010098  w    F .text	00000006 i2s0_rx_isr
00010098  w    F .text	00000006 uart4_error_isr
000118cc g     F .text	00000010 Print::print(long)
0000ac14 g     F .text	0000001e FatFile::close()
00007c68 g     F .text	00000052 fmtBase10(char*, unsigned long)
000004e0  w    F .text	00000010 File::position()
00000e4c  w    F .text	00000064 SDFile::~SDFile()
00014f48 g     F .text	0000000c atexit
0000eb34  w    F .text	00000002 SdioCard::~SdioCard()
000007e0  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000005a8  w    F .text	00000018 File::write(unsigned char)
00014e64 g     F .text	0000002c _write_r
1fff1f90 g     O .bss	000004b8 SD
0000ee28 g     F .text	000000ec SdioCard::erase(unsigned long, unsigned long)
00010098  w    F .text	00000006 can0_message_isr
00007504 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff0f40 g     O .data	00000004 _impure_ptr
000169e8  w    O .text	00000024 vtable for Stream
00010098  w    F .text	00000006 can1_message_isr
00008390 g     F .text	0000002e ExFatFile::peek()
00016a0c  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00010098  w    F .text	00000006 nmi_isr
0000d628 g     F .text	00000104 FatFile::lfnUniqueSfn(fname_t*)
00000cd4  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000dfec g     F .text	00000028 FsVolume::open(char const*, int)
0000ead4 g     F .text	0000000c SdioCard::errorCode() const
0000af40 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000ce8  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00017990 g       .text	00000000 __preinit_array_end
00000614 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000e034  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00010098  w    F .text	00000006 sdhc_isr
00007988 g     F .text	00000020 minute()
00009518 g     F .text	00000184 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00009248 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000e74c g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
00003c8c g     F .text	00000012 MTPStorage_SD::DeleteObject(unsigned long)
00012d54 g     F .text	0000002a __ascii_mbtowc
0000e100 g     F .text	0000004e SdSpiCard::isBusy()
000173b0 g     O .text	00000058 vtable for SdSpiCard
0000e54c  w    F .text	00000008 SdSpiCard::readCID(CID*)
0000132c g     F .text	00000260 setup
00017468 g     O .text	00000060 usb_descriptor_list
000108e4 g     F .text	0000003c usb_rx
0000ec64 g     F .text	00000020 SdioCard::status()
000017c4 g     F .text	0000007c MTPStorage_SD::ResetIndex()
00010098  w    F .text	00000006 dma_ch10_isr
0000acd4 g     F .text	0000005c FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000470  w    F .text	00000002 Print::flush()
00010098  w    F .text	00000006 uart0_error_isr
000004f0  w    F .text	00000010 File::size()
00000a64  w    F .text	00000062 SDClass::rmdir(char const*)
00010858 g     F .text	00000040 usb_malloc
0000af50 g     F .text	00000294 FatFile::read(void*, unsigned int)
00010098  w    F .text	00000006 i2s0_isr
0000ad30 g     F .text	00000084 FatFile::openRoot(FatVolume*)
1fff244c g     O .bss	00000004 ExFatVolume::m_cwv
20030000 g       .bss	00000000 _estack
0000e014 g     F .text	00000004 operator new(unsigned int, unsigned long*)
0000e544  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000057c  w    F .text	0000002c File::read()
0000ff68 g     F .text	00000048 usb_serial_write_buffer_free
0000e1d0 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
00010098  w    F .text	00000006 enet_timer_isr
000122e0 g     F .text	00000012 .hidden __aeabi_dcmpeq
00000eb0  w    F .text	00000030 File::~File()
00011820  w    F .text	0000000e _write
1fff14c0 g       .data	00000000 _edata
00009338 g     F .text	00000084 ExFatPartition::fatPut(unsigned long, unsigned long)
00005944 g     F .text	00000254 MTPD::GetObjectInfo(unsigned long)
0000eb34  w    F .text	00000002 SdioCard::~SdioCard()
00010098  w    F .text	00000006 i2s0_tx_isr
00010098  w    F .text	00000006 adc1_isr
0000e6e0 g     F .text	0000001c SdSpiCard::syncDevice()
0000a94c g     F .text	00000188 FatFile::addDirCluster()
0000047c  w    F .text	0000000c File::read(void*, unsigned int)
000117c0  w    F .text	00000004 usb_serial_class::availableForWrite()
00010098  w    F .text	00000006 cmp0_isr
000004bc  w    F .text	0000000c File::truncate(unsigned long long)
0001015c g     F .text	0000004c ultoa
00007a2c  w    F .text	00000002 SDClass::~SDClass()
0000e2a4 g     F .text	00000214 SdSpiCard::begin(SdSpiConfig)
000079a8 g     F .text	00000020 second()
0000de44 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00001f70 g     F .text	00000210 MTPStorage_SD::ReadIndexRecord(unsigned long)
000119ac g     F .text	00000004 operator new(unsigned int)
00011754 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff14b8 g     O .data	00000004 __malloc_trim_threshold
000117b0  w    F .text	00000004 usb_serial_class::peek()
00012744 g     F .text	00000024 fcvtf
00002180 g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
00000ee0  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
1fff1f54 g     O .bss	00000014 mtpd
000166b8 g     F .text	00000114 __mdiff
0000eb24 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
00012370 g     F .text	0000004e .hidden __aeabi_d2iz
00002ab0 g     F .text	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
000092f0 g     F .text	00000048 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff24a4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
00007220 g     F .text	00000134 _spi_dma_rxISR1()
00010098  w    F .text	00000006 pit_isr
00007968 g     F .text	00000020 hour()
0000ef6c g     F .text	0000008c SdioCard::writeStop()
0000e934  w    F .text	0000001c SdSpiCard::writeSector(unsigned long, unsigned char const*)
0000dd44 g     F .text	00000060 FatFile::printSFN(Print*)
00007db8 g     F .text	00000014 ExFatFile::close()
00017770 g     O .text	00000101 _ctype_
00010098  w    F .text	00000006 dac0_isr
0000e020  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00017990 g       .text	00000000 __init_array_start
000126d4  w    F .text	00000002 .hidden __aeabi_idiv0
00010098  w    F .text	00000006 can1_tx_warn_isr
000019fc g     F .text	00000394 MTPStorage_SD::OpenIndex()
00012344 g     F .text	0000002c .hidden __unorddf2
00000878  w    F .text	00000074 SDClass::rename(char const*, char const*)
00010098  w    F .text	00000006 uart0_status_isr
00010098  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000c474 g     F .text	0000003e FatFile::printFileSize(Print*)
00013580 g     F .text	000000dc strlen
0000cd04 g     F .text	0000002e FatFile::openCluster(FatFile*)
00016dac g     O .text	00000094 SPIClass::spi1_hardware
000122d0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00008f08 g     F .text	0000017c ExFatFile::ls(Print*, unsigned char, unsigned char)
00012234 g     F .text	0000008a .hidden __gedf2
0000b288 g     F .text	0000015c FatFile::seekSet(unsigned long)
1fff0aac g     O .data	0000002e usb_string_product_name_default
00014e30 g     F .text	00000018 vdprintf
00010098  w    F .text	00000006 dma_ch1_isr
0000edbc g     F .text	0000006c SdioCard::sectorCount()
0000df24 g     F .text	000000c8 FsVolume::begin(BlockDeviceInterface*)
00007004 g     F .text	00000008 MTPD::send_DeviceResetEvent()
00010920 g     F .text	0000002c usb_tx_packet_count
0000b6ac g     F .text	0000013c FatFile::openNext(FatFile*, int)
00017408 g     O .text	00000058 vtable for SdioCard
00011d68 g     F .text	0000003a .hidden __aeabi_f2d
00010098  w    F .text	00000006 dma_ch5_isr
00002234 g     F .text	0000019c MTPStorage_SD::close()
0000cd34 g     F .text	00000230 FatFile::getName(char*, unsigned int)
00010098  w    F .text	00000006 can0_rx_warn_isr
00000ee0  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
00002434 g     F .text	000000b0 MTPStorage_SD::rename(unsigned long, char const*)
00010098  w    F .text	00000006 can0_tx_warn_isr
00010098  w    F .text	00000006 uart4_status_isr
0000f7f4 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000fa6c g     F .text	00000090 SdSpiArduinoDriver::activate()
00008dc8 g     F .text	00000024 ExFatFile::printModifyDateTime(Print*)
0000c4b4 g     F .text	00000164 FatFile::ls(Print*, unsigned char, unsigned char)
00001724 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
00011aa8 g     F .text	0000027a .hidden __subdf3
00017990 g       .text	00000000 __preinit_array_start
00009138 g     F .text	00000110 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000221c g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
000005d8  w    F .text	00000028 File::whoami()
00016384 g     F .text	0000005a __lo0bits
0000b4b4 g     F .text	000001f8 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00011a94 g     F .text	0000000a __aeabi_atexit
000065ec g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
000098d4 g     F .text	000001cc ExFatFile::remove()
00010098  w    F .text	00000006 cmp2_isr
00011798 g     F .text	00000004 pendablesrvreq_isr
00000b30  w    F .text	00000034 SDClass::totalSize()
00006898 g     F .text	00000076 MTPD::SendObject()
00001738 g     F .text	0000000c MTPStorage_SD::usedSize(unsigned long)
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0f44 g     O .data	0000016c __global_locale
00010098  w    F .text	00000006 wakeup_isr
000075a8 g     F .text	000000a0 SPIClass::setMISO(unsigned char)
0000f394 g     F .text	00000394 SdioCard::begin(SdioConfig)
00010098  w    F .text	00000006 cmp3_isr
00007700 g     F .text	000001b0 breakTime(long, tmElements_t&)
0001184c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000c618 g     F .text	000000f0 FatPartition::fatGet(unsigned long, unsigned long*)
000127d4 g     F .text	00000010 free
00010098  w    F .text	00000006 tpm2_isr
000162c4 g     F .text	00000080 __multadd
000162b0 g     F .text	00000012 _Bfree
00000ae4  w    F .text	0000001a SDFile::size()
00010098  w    F .text	00000006 dma_ch0_isr
00000f58  w    F .text	0000005c SDFile::~SDFile()
1fff0ae0  w    O .data	00000016 usb_string_serial_number
00010098  w    F .text	00000006 enet_tx_isr
00009730 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
0000f868 g     F .text	000000f0 SdioCard::readSector(unsigned long, unsigned char*)
0000eb08 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "ExFatVolume.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const ExChar_t* path) {
       0:	... ........Q...
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
      10:	Q...Q...Q...Q...
      20:	Q...Q...Q.......
    goto fail;
  }
  if (!dir.isDir()) {
    goto fail;
  }
  m_vwd = dir;
      30:	....Q...........
      40:	................
  return true;

 fail:
  return false;
}
      50:	................
      60:	................
      70:	................
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	................
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	100a0 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	106ec <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	105d0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	105d0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	12774 <__libc_init_array>

	startup_late_hook();
     32c:	bl	100ac <startup_late_hook>
	main();
     330:	bl	11998 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff14c0
     360:	.word	0x000179a8
     364:	.word	0x1fff0970
     368:	.word	0x1fff14c0
     36c:	.word	0x1fff2648
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff14c0
     42c:	.word	0x00000000
     430:	.word	0x000179a4

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff14c4
     460:	.word	0x000179a4
     464:	.word	0x1fff14c0
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     47c:	ldr	r0, [r0, #16]
     47e:	cbz	r0, 486 <File::read(void*, unsigned int)+0xa>
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #40]	; 0x28
     484:	bx	r3
	}
     486:	bx	lr

00000488 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     488:	ldr	r0, [r0, #16]
     48a:	cbz	r0, 492 <File::write(void const*, unsigned int)+0xa>
     48c:	ldr	r3, [r0, #0]
     48e:	ldr	r3, [r3, #44]	; 0x2c
     490:	bx	r3
	}
     492:	bx	lr

00000494 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     494:	ldr	r0, [r0, #16]
     496:	cbz	r0, 49e <File::available()+0xa>
     498:	ldr	r3, [r0, #0]
     49a:	ldr	r3, [r3, #16]
     49c:	bx	r3
	}
     49e:	bx	lr

000004a0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     4a0:	ldr	r0, [r0, #16]
     4a2:	cbz	r0, 4aa <File::peek()+0xa>
     4a4:	ldr	r3, [r0, #0]
     4a6:	ldr	r3, [r3, #24]
     4a8:	bx	r3
	}
     4aa:	mov.w	r0, #4294967295
     4ae:	bx	lr

000004b0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4b0:	ldr	r0, [r0, #16]
     4b2:	cbz	r0, 4ba <File::flush()+0xa>
     4b4:	ldr	r3, [r0, #0]
     4b6:	ldr	r3, [r3, #12]
     4b8:	bx	r3
     4ba:	bx	lr

000004bc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
     4bc:	ldr	r0, [r0, #16]
     4be:	cbz	r0, 4c6 <File::truncate(unsigned long long)+0xa>
     4c0:	ldr	r1, [r0, #0]
     4c2:	ldr	r1, [r1, #48]	; 0x30
     4c4:	bx	r1
	}
     4c6:	bx	lr

000004c8 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
     4c8:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
     4ca:	ldr	r0, [r0, #16]
     4cc:	cbz	r0, 4d8 <File::seek(unsigned long long, int)+0x10>
     4ce:	ldr	r4, [r0, #0]
     4d0:	ldr	r1, [r4, #52]	; 0x34
	}
     4d2:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4d6:	bx	r1
	}
     4d8:	ldr.w	r4, [sp], #4
     4dc:	bx	lr
     4de:	nop

000004e0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
     4e0:	ldr	r0, [r0, #16]
     4e2:	cbz	r0, 4ea <File::position()+0xa>
     4e4:	ldr	r3, [r0, #0]
     4e6:	ldr	r3, [r3, #56]	; 0x38
     4e8:	bx	r3
	}
     4ea:	movs	r0, #0
     4ec:	movs	r1, #0
     4ee:	bx	lr

000004f0 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::size()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #60]	; 0x3c
     4f8:	bx	r3
	}
     4fa:	movs	r0, #0
     4fc:	movs	r1, #0
     4fe:	bx	lr

00000500 <File::close()>:
	virtual void close() {
		if (f) f->close();
     500:	ldr	r0, [r0, #16]
     502:	cbz	r0, 50a <File::close()+0xa>
     504:	ldr	r3, [r0, #0]
     506:	ldr	r3, [r3, #64]	; 0x40
     508:	bx	r3
     50a:	bx	lr

0000050c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::operator bool()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #68]	; 0x44
     514:	bx	r3
	}
     516:	bx	lr

00000518 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     518:	ldr	r0, [r0, #16]
     51a:	cbz	r0, 522 <File::name()+0xa>
     51c:	ldr	r3, [r0, #0]
     51e:	ldr	r3, [r3, #72]	; 0x48
     520:	bx	r3
	}
     522:	ldr	r0, [pc, #4]	; (528 <File::name()+0x10>)
     524:	bx	lr
     526:	nop
     528:	.word	0x00016b54

0000052c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     52c:	ldr	r0, [r0, #16]
     52e:	cbz	r0, 536 <File::isDirectory()+0xa>
     530:	ldr	r3, [r0, #0]
     532:	ldr	r3, [r3, #76]	; 0x4c
     534:	bx	r3
	}
     536:	bx	lr

00000538 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     538:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     53a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     53c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     53e:	cbz	r3, 54c <File::openNextFile(unsigned char)+0x14>
     540:	ldr	r5, [r3, #0]
     542:	mov	r1, r3
     544:	ldr	r3, [r5, #80]	; 0x50
     546:	blx	r3
	}
     548:	mov	r0, r4
     54a:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     54c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     550:	ldr	r2, [pc, #24]	; (56c <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     552:	strb	r3, [r4, #4]
     554:	strb	r3, [r4, #12]
     556:	str	r0, [r4, #8]
     558:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     55a:	ldr	r3, [r1, #16]
     55c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     55e:	cmp	r3, #0
     560:	beq.n	548 <File::openNextFile(unsigned char)+0x10>
     562:	ldr	r2, [r3, #16]
     564:	adds	r2, #1
     566:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     568:	mov	r0, r4
     56a:	pop	{r3, r4, r5, pc}
     56c:	.word	0x00016a5c

00000570 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     570:	ldr	r0, [r0, #16]
     572:	cbz	r0, 57a <File::rewindDirectory()+0xa>
     574:	ldr	r3, [r0, #0]
     576:	ldr	r3, [r3, #84]	; 0x54
     578:	bx	r3
     57a:	bx	lr

0000057c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     57c:	ldr	r0, [r0, #16]
     57e:	cbz	r0, 5a2 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     580:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     582:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     584:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     586:	ldr	r3, [r3, #40]	; 0x28
     588:	movs	r2, #1
     58a:	add.w	r1, sp, #7
     58e:	blx	r3
     590:	cbz	r0, 59c <File::read()+0x20>
		return b;
     592:	ldrb.w	r0, [sp, #7]
	}
     596:	add	sp, #12
     598:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     59c:	mov.w	r0, #4294967295
     5a0:	b.n	596 <File::read()+0x1a>
     5a2:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     5a6:	bx	lr

000005a8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     5a8:	push	{r4, lr}
     5aa:	sub	sp, #8
     5ac:	add	r3, sp, #8
		return write(&b, 1);
     5ae:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     5b0:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     5b4:	ldr	r4, [r2, #44]	; 0x2c
     5b6:	mov	r1, r3
     5b8:	movs	r2, #1
     5ba:	blx	r4
	}
     5bc:	add	sp, #8
     5be:	pop	{r4, pc}

000005c0 <SDFile::operator bool()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     5c0:	ldr	r3, [r0, #92]	; 0x5c
     5c2:	cbz	r3, 5c8 <SDFile::operator bool()+0x8>
     5c4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5c6:	bx	lr
     5c8:	ldr	r0, [r0, #96]	; 0x60
     5ca:	adds	r0, #0
     5cc:	it	ne
     5ce:	movne	r0, #1
     5d0:	bx	lr
     5d2:	nop

000005d4 <__tcf_0>:
    const char *sd_str[]={"sd1"}; // edit to reflect your configuration
    const int cs[] = {10}; // edit to reflect your configuration
  #endif
  const int nsd = sizeof(sd_str)/sizeof(const char *);

SDClass sdx[nsd];
     5d4:	bx	lr
     5d6:	nop

000005d8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     5d8:	push	{r4, lr}
     5da:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     5dc:	mov	r2, r0
     5de:	ldr	r3, [r0, #16]
     5e0:	ldr	r1, [pc, #20]	; (5f8 <File::whoami()+0x20>)
     5e2:	ldr	r0, [pc, #24]	; (5fc <File::whoami()+0x24>)
     5e4:	bl	11830 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5e8:	ldr	r0, [r4, #16]
     5ea:	cbz	r0, 5f6 <File::whoami()+0x1e>
     5ec:	ldr	r3, [r0, #0]
	}
     5ee:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5f2:	ldr	r3, [r3, #36]	; 0x24
     5f4:	bx	r3
     5f6:	pop	{r4, pc}
     5f8:	.word	0x00016b3c
     5fc:	.word	0x1fff0b00

00000600 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     600:	mov	r2, r0
     602:	ldr	r3, [r0, #16]
     604:	ldr	r1, [pc, #4]	; (60c <SDFile::whoami()+0xc>)
     606:	ldr	r0, [pc, #8]	; (610 <SDFile::whoami()+0x10>)
     608:	b.w	11830 <Print::printf(char const*, ...)>
     60c:	.word	0x00016b58
     610:	.word	0x1fff0b00

00000614 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
    #include "TimeLib.h"
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     614:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     618:	mov	r7, r1
     61a:	mov	r6, r2
     61c:	mov	r8, r0
     61e:	bl	7a08 <year()>
     622:	mov	r4, r0
     624:	bl	79e8 <month()>
     628:	mov	r5, r0
     62a:	bl	79c8 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     62e:	subw	r3, r4, #1980	; 0x7bc
     632:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     634:	cmp	r3, #127	; 0x7f
     636:	bhi.n	63e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     638:	uxtb	r2, r5
     63a:	cmp	r2, #12
     63c:	bls.n	696 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     63e:	movs	r3, #0
     640:	strh.w	r3, [r8]
      *time = FS_TIME(hour(), minute(), second());
     644:	bl	7968 <hour()>
     648:	mov	r4, r0
     64a:	bl	7988 <minute()>
     64e:	mov	r5, r0
     650:	bl	79a8 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     654:	uxtb	r3, r4
     656:	cmp	r3, #23
     658:	bhi.n	660 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     65a:	uxtb	r3, r5
     65c:	cmp	r3, #59	; 0x3b
     65e:	bls.n	678 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     660:	movs	r3, #0
     662:	strh	r3, [r7, #0]
      *ms10 = second() & 1 ? 100 : 0;
     664:	bl	79a8 <second()>
     668:	tst.w	r0, #1
     66c:	ite	ne
     66e:	movne	r3, #100	; 0x64
     670:	moveq	r3, #0
     672:	strb	r3, [r6, #0]
     674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     678:	uxtb	r3, r0
     67a:	cmp	r3, #59	; 0x3b
     67c:	bhi.n	660 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     67e:	lsls	r4, r4, #11
     680:	lsls	r3, r5, #5
     682:	and.w	r4, r4, #522240	; 0x7f800
     686:	and.w	r3, r3, #8160	; 0x1fe0
     68a:	orrs	r3, r4
     68c:	ubfx	r0, r0, #1, #7
     690:	orrs	r3, r0
     692:	uxth	r3, r3
     694:	b.n	662 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
    #include "TimeLib.h"
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     696:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     698:	cmp	r0, #31
     69a:	bhi.n	63e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     69c:	lsls	r5, r5, #5
     69e:	and.w	r5, r5, #8160	; 0x1fe0
     6a2:	orrs	r0, r5
     6a4:	orr.w	r3, r0, r3, lsl #9
     6a8:	uxth	r3, r3
     6aa:	b.n	640 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

000006ac <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     6ac:	push	{r4, lr}
     6ae:	mov	r4, r0
		if (filename) {
     6b0:	ldr	r0, [r0, #100]	; 0x64
     6b2:	cbz	r0, 6bc <SDFile::close()+0x10>
			free(filename);
     6b4:	bl	127d4 <free>
			filename = nullptr;
     6b8:	movs	r3, #0
     6ba:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     6bc:	add.w	r0, r4, #36	; 0x24
	}
     6c0:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     6c4:	b.w	de1c <FsBaseFile::close()>

000006c8 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     6c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6cc:	movs	r3, #0
     6ce:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     6d0:	mov	r2, r3
     6d2:	mov	r5, r0
     6d4:	adds	r1, #36	; 0x24
     6d6:	add	r0, sp, #16
     6d8:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6dc:	ldr	r7, [pc, #148]	; (774 <SDFile::openNextFile(unsigned char)+0xac>)
     6de:	strb.w	r3, [sp, #4]
     6e2:	strb.w	r3, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
     6e6:	str	r3, [sp, #72]	; 0x48
     6e8:	str	r3, [sp, #76]	; 0x4c
     6ea:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6ec:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     6ee:	bl	dec4 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     6f2:	ldr	r3, [sp, #72]	; 0x48
     6f4:	cmp	r3, #0
     6f6:	beq.n	75e <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     6f8:	movs	r0, #104	; 0x68
     6fa:	bl	119ac <operator new(unsigned int)>
     6fe:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     700:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     704:	ldr	r2, [sp, #8]
     706:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     70a:	ldr	r0, [pc, #108]	; (778 <SDFile::openNextFile(unsigned char)+0xb0>)
     70c:	ldr	r1, [pc, #108]	; (77c <SDFile::openNextFile(unsigned char)+0xb4>)
     70e:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     710:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     714:	movs	r6, #0
     716:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     718:	str	r1, [r4, #20]
     71a:	str	r2, [r4, #28]
     71c:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     720:	add.w	r0, r4, #36	; 0x24
     724:	add	r1, sp, #16
     726:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     728:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     72a:	str	r6, [r4, #16]
     72c:	str.w	r8, [r4, #8]
     730:	bl	dda4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     734:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     736:	ldr	r2, [pc, #72]	; (780 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     738:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     73a:	adds	r3, #1
     73c:	str	r6, [r4, #100]	; 0x64
     73e:	strb	r6, [r5, #4]
     740:	str.w	r8, [r5, #8]
     744:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     746:	str	r4, [r5, #16]
		if (f) f->refcount++;
     748:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     74a:	str	r2, [r5, #0]
     74c:	ldr	r3, [pc, #52]	; (784 <SDFile::openNextFile(unsigned char)+0xbc>)
     74e:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     750:	add	r0, sp, #16
     752:	bl	de1c <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     756:	mov	r0, r5
     758:	add	sp, #80	; 0x50
     75a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     75e:	ldr	r3, [sp, #76]	; 0x4c
     760:	cmp	r3, #0
     762:	bne.n	6f8 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     764:	ldr	r2, [pc, #24]	; (780 <SDFile::openNextFile(unsigned char)+0xb8>)
     766:	strb	r3, [r5, #4]
     768:	str	r4, [r5, #8]
     76a:	strb	r3, [r5, #12]
     76c:	str	r3, [r5, #16]
     76e:	str	r2, [r5, #0]
     770:	b.n	74c <SDFile::openNextFile(unsigned char)+0x84>
     772:	nop
     774:	.word	0x00016a38
     778:	.word	0x00016abc
     77c:	.word	0x000169f0
     780:	.word	0x00016a5c
     784:	.word	0x00016a14

00000788 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     788:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     78a:	cbz	r2, 7a6 <SDFile::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     78c:	ldrb	r3, [r2, #0]
     78e:	and.w	r3, r3, #8
     792:	and.w	r0, r3, #255	; 0xff
     796:	cbz	r3, 7da <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     798:	ldr	r3, [r2, #28]
     79a:	ldr	r0, [r2, #20]
     79c:	subs	r0, r3, r0
     79e:	it	mi
     7a0:	mvnmi.w	r0, #2147483648	; 0x80000000
     7a4:	bx	lr
     7a6:	ldr	r1, [r0, #96]	; 0x60
     7a8:	cbz	r1, 7dc <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     7aa:	ldrb.w	r3, [r1, #49]	; 0x31
     7ae:	and.w	r3, r3, #8
     7b2:	and.w	r0, r3, #255	; 0xff
     7b6:	cbz	r3, 7da <SDFile::available()+0x52>
     7b8:	ldrd	r2, r3, [r1, #16]
     7bc:	ldrd	r0, r1, [r1]
     7c0:	subs	r0, r2, r0
     7c2:	push	{r4, r5}
     7c4:	sbc.w	r1, r3, r1
     7c8:	movs	r5, #0
     7ca:	mvn.w	r4, #2147483648	; 0x80000000
     7ce:	cmp	r5, r1
     7d0:	it	eq
     7d2:	cmpeq	r4, r0
     7d4:	bcs.n	7d8 <SDFile::available()+0x50>
     7d6:	mov	r0, r4
		return sdfatfile.available();
	}
     7d8:	pop	{r4, r5}
     7da:	bx	lr
     7dc:	mov	r0, r1
     7de:	bx	lr

000007e0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7e0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     7e2:	cbz	r3, 7ea <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     7e4:	mov	r0, r3
     7e6:	b.w	b1e4 <FatFile::peek()>
     7ea:	ldr	r0, [r0, #76]	; 0x4c
     7ec:	cbz	r0, 7f2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     7ee:	b.w	8390 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     7f2:	mov.w	r0, #4294967295
     7f6:	bx	lr

000007f8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     7f8:	push	{lr}
     7fa:	ldr	r3, [r0, #72]	; 0x48
     7fc:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     7fe:	cbz	r3, 81a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     800:	mov	r0, r3
     802:	movs	r2, #1
     804:	add.w	r1, sp, #7
     808:	bl	af50 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     80c:	cmp	r0, #1
     80e:	bne.n	82a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     810:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     814:	add	sp, #12
     816:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     81a:	ldr	r0, [r0, #76]	; 0x4c
     81c:	cbz	r0, 82a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     81e:	movs	r2, #1
     820:	add.w	r1, sp, #7
     824:	bl	80ec <ExFatFile::read(void*, unsigned int)>
     828:	b.n	80c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     82a:	mov.w	r0, #4294967295
     82e:	b.n	814 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000830 <SDFile::flush()>:
	virtual void flush() {
     830:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     832:	cbz	r3, 83a <SDFile::flush()+0xa>
     834:	mov	r0, r3
     836:	b.w	bf38 <FatFile::sync()>
     83a:	ldr	r0, [r0, #96]	; 0x60
     83c:	cbz	r0, 842 <SDFile::flush()+0x12>
     83e:	b.w	9d60 <ExFatFile::sync()>
     842:	bx	lr

00000844 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     844:	push	{lr}
     846:	ldr	r3, [r0, #72]	; 0x48
     848:	sub	sp, #12
     84a:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     84e:	cbz	r3, 862 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     850:	mov	r0, r3
     852:	movs	r2, #1
     854:	add.w	r1, sp, #7
     858:	bl	c0a0 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     85c:	add	sp, #12
     85e:	ldr.w	pc, [sp], #4
     862:	ldr	r0, [r0, #76]	; 0x4c
     864:	cmp	r0, #0
     866:	beq.n	85c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     868:	movs	r2, #1
     86a:	add.w	r1, sp, #7
     86e:	bl	a520 <ExFatFile::write(void const*, unsigned int)>
     872:	add	sp, #12
     874:	ldr.w	pc, [sp], #4

00000878 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     878:	push	{r4, r5, r6, lr}
     87a:	ldr.w	r4, [r0, #1156]	; 0x484
     87e:	sub	sp, #56	; 0x38
     880:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     882:	cbz	r4, 8b6 <SDClass::rename(char const*, char const*)+0x3e>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     884:	movs	r5, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     886:	addw	r4, r4, #1092	; 0x444
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     88a:	mov	r2, r1
     88c:	mov	r3, r5
     88e:	mov	r1, r4
     890:	mov	r0, sp
     892:	strb.w	r5, [sp]
     896:	strb.w	r5, [sp, #1]
     89a:	strb.w	r5, [sp, #2]
     89e:	bl	adb4 <FatFile::open(FatFile*, char const*, int)>
     8a2:	cbnz	r0, 8a8 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     8a4:	add	sp, #56	; 0x38
     8a6:	pop	{r4, r5, r6, pc}
     8a8:	mov	r2, r6
     8aa:	mov	r1, r4
     8ac:	mov	r0, sp
     8ae:	bl	bbb8 <FatFile::rename(FatFile*, char const*)>
     8b2:	add	sp, #56	; 0x38
     8b4:	pop	{r4, r5, r6, pc}
     8b6:	ldr.w	r0, [r0, #1160]	; 0x488
     8ba:	cmp	r0, #0
     8bc:	beq.n	8a4 <SDClass::rename(char const*, char const*)+0x2c>
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     8be:	add.w	r5, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     8c2:	mov	r2, r1
     8c4:	mov	r3, r4
     8c6:	mov	r1, r5
     8c8:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     8ca:	strb.w	r4, [sp, #49]	; 0x31
     8ce:	strb.w	r4, [sp, #50]	; 0x32
     8d2:	strb.w	r4, [sp, #51]	; 0x33
     8d6:	bl	8b34 <ExFatFile::open(ExFatFile*, char const*, int)>
     8da:	cmp	r0, #0
     8dc:	beq.n	8a4 <SDClass::rename(char const*, char const*)+0x2c>
     8de:	mov	r2, r6
     8e0:	mov	r1, r5
     8e2:	mov	r0, sp
     8e4:	bl	a1fc <ExFatFile::rename(ExFatFile*, char const*)>
     8e8:	add	sp, #56	; 0x38
     8ea:	pop	{r4, r5, r6, pc}

000008ec <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     8ec:	push	{r3, r4, r5, lr}
		if (!filename) {
     8ee:	ldr	r4, [r0, #100]	; 0x64
     8f0:	cbz	r4, 8f6 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     8f2:	mov	r0, r4
     8f4:	pop	{r3, r4, r5, pc}
     8f6:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     8f8:	mov.w	r0, #256	; 0x100
     8fc:	bl	127c4 <malloc>
     900:	mov	r1, r0
     902:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     904:	cbz	r0, 928 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     906:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     908:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     90a:	cbz	r0, 918 <SDFile::name()+0x2c>
     90c:	mov.w	r2, #256	; 0x100
     910:	bl	cd34 <FatFile::getName(char*, unsigned int)>
     914:	ldr	r4, [r5, #100]	; 0x64
     916:	b.n	8f2 <SDFile::name()+0x6>
     918:	ldr	r0, [r5, #96]	; 0x60
     91a:	cbz	r0, 92e <SDFile::name()+0x42>
     91c:	mov.w	r2, #256	; 0x100
     920:	bl	7e24 <ExFatFile::getName(char*, unsigned int)>
     924:	ldr	r4, [r5, #100]	; 0x64
     926:	b.n	8f2 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     928:	ldr	r4, [pc, #8]	; (934 <SDFile::name()+0x48>)
     92a:	str	r4, [r5, #100]	; 0x64
     92c:	b.n	8f2 <SDFile::name()+0x6>
     92e:	mov	r4, r1
     930:	b.n	8f2 <SDFile::name()+0x6>
     932:	nop
     934:	.word	0x1fff14dc

00000938 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     938:	push	{r4, r6, r7, lr}
     93a:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     93c:	cbz	r4, 962 <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     93e:	cmp	r3, #1
     940:	it	eq
     942:	cmpeq	r2, #0
     944:	bcc.n	94a <SDFile::truncate(unsigned long long)+0x12>
     946:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
     948:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     94a:	mov	r1, r2
     94c:	mov	r0, r4
     94e:	bl	b288 <FatFile::seekSet(unsigned long)>
     952:	cmp	r0, #0
     954:	beq.n	946 <SDFile::truncate(unsigned long long)+0xe>
     956:	mov	r0, r4
     958:	bl	bf44 <FatFile::truncate()>
     95c:	cmp	r0, #0
     95e:	beq.n	946 <SDFile::truncate(unsigned long long)+0xe>
     960:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     962:	ldr	r4, [r0, #96]	; 0x60
     964:	cmp	r4, #0
     966:	beq.n	946 <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     968:	mov	r0, r4
     96a:	bl	83c0 <ExFatFile::seekSet(unsigned long long)>
     96e:	cmp	r0, #0
     970:	beq.n	946 <SDFile::truncate(unsigned long long)+0xe>
     972:	mov	r0, r4
     974:	ldmia.w	sp!, {r4, r6, r7, lr}
     978:	b.w	a358 <ExFatFile::truncate()>

0000097c <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     97c:	push	{r4, lr}
     97e:	ldr.w	r4, [r0, #1156]	; 0x484
     982:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     984:	cbz	r4, 9a6 <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     986:	mov	r2, r1
     988:	movs	r3, #1
     98a:	addw	r1, r4, #1092	; 0x444
     98e:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     990:	movs	r4, #0
     992:	strb.w	r4, [sp]
     996:	strb.w	r4, [sp, #1]
     99a:	strb.w	r4, [sp, #2]
     99e:	bl	ba34 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     9a2:	add	sp, #56	; 0x38
     9a4:	pop	{r4, pc}
     9a6:	ldr.w	r0, [r0, #1160]	; 0x488
     9aa:	cmp	r0, #0
     9ac:	beq.n	9a2 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     9ae:	mov	r2, r1
     9b0:	movs	r3, #1
     9b2:	add.w	r1, r0, #1096	; 0x448
     9b6:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     9b8:	strb.w	r4, [sp, #49]	; 0x31
     9bc:	strb.w	r4, [sp, #50]	; 0x32
     9c0:	strb.w	r4, [sp, #51]	; 0x33
     9c4:	bl	a06c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     9c8:	add	sp, #56	; 0x38
     9ca:	pop	{r4, pc}

000009cc <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     9cc:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     9ce:	cbz	r3, 9f8 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     9d0:	ldrb	r2, [r3, #0]
     9d2:	tst.w	r2, #112	; 0x70
     9d6:	bne.n	9da <SDFile::rewindDirectory()+0xe>
     9d8:	bx	lr
     9da:	push	{r4, lr}
     9dc:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     9de:	movs	r1, #0
     9e0:	mov	r0, r3
     9e2:	bl	b288 <FatFile::seekSet(unsigned long)>
     9e6:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     9e8:	cbz	r0, 9f6 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     9ea:	movs	r2, #0
     9ec:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     9ee:	ldmia.w	sp!, {r4, lr}
     9f2:	b.w	83c0 <ExFatFile::seekSet(unsigned long long)>
     9f6:	pop	{r4, pc}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     9f8:	ldr	r0, [r0, #96]	; 0x60
     9fa:	cmp	r0, #0
     9fc:	beq.n	9d8 <SDFile::rewindDirectory()+0xc>
     9fe:	ldrb.w	r3, [r0, #49]	; 0x31
     a02:	tst.w	r3, #80	; 0x50
     a06:	beq.n	9d8 <SDFile::rewindDirectory()+0xc>
     a08:	movs	r2, #0
     a0a:	movs	r3, #0
     a0c:	b.w	83c0 <ExFatFile::seekSet(unsigned long long)>

00000a10 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
     a10:	push	{r3, r4, r5, lr}
     a12:	mov	r5, r0
     a14:	ldr.w	r0, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a18:	cbz	r0, a4c <SDClass::usedSize()+0x3c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     a1a:	ldr	r4, [r0, #28]
     a1c:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     a1e:	bl	c9f0 <FatPartition::freeClusterCount()>
     a22:	ldr.w	r3, [r5, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     a26:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     a28:	cbz	r3, a3c <SDClass::usedSize()+0x2c>
     a2a:	ldrb	r0, [r3, #6]
     a2c:	mov.w	r3, #512	; 0x200
     a30:	lsl.w	r0, r3, r0
     a34:	uxth	r0, r0
     a36:	umull	r0, r1, r0, r4
     a3a:	pop	{r3, r4, r5, pc}
     a3c:	ldr.w	r3, [r5, #1160]	; 0x488
     a40:	cbz	r3, a5c <SDClass::usedSize()+0x4c>
     a42:	ldr.w	r0, [r3, #1084]	; 0x43c
     a46:	umull	r0, r1, r0, r4
     a4a:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a4c:	ldr.w	r0, [r5, #1160]	; 0x488
     a50:	cbz	r0, a5c <SDClass::usedSize()+0x4c>
     a52:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     a56:	bl	94a4 <ExFatPartition::freeClusterCount()>
     a5a:	b.n	a22 <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a5c:	movs	r0, #0
     a5e:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     a60:	pop	{r3, r4, r5, pc}
     a62:	nop

00000a64 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     a64:	push	{r4, r5, lr}
     a66:	ldr.w	r4, [r0, #1156]	; 0x484
     a6a:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     a6c:	cbz	r4, a98 <SDClass::rmdir(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     a6e:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     a70:	mov	r2, r1
     a72:	mov	r3, r5
     a74:	mov	r1, r4
     a76:	mov	r0, sp
     a78:	strb.w	r5, [sp]
     a7c:	strb.w	r5, [sp, #1]
     a80:	strb.w	r5, [sp, #2]
     a84:	bl	af40 <FatFile::open(FatVolume*, char const*, int)>
     a88:	cbnz	r0, a8e <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     a8a:	add	sp, #60	; 0x3c
     a8c:	pop	{r4, r5, pc}
     a8e:	mov	r0, sp
     a90:	bl	b3e4 <FatFile::rmdir()>
     a94:	add	sp, #60	; 0x3c
     a96:	pop	{r4, r5, pc}
     a98:	ldr.w	r0, [r0, #1160]	; 0x488
     a9c:	cmp	r0, #0
     a9e:	beq.n	a8a <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     aa0:	mov	r2, r1
     aa2:	mov	r3, r4
     aa4:	mov	r1, r0
     aa6:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     aa8:	strb.w	r4, [sp, #49]	; 0x31
     aac:	strb.w	r4, [sp, #50]	; 0x32
     ab0:	strb.w	r4, [sp, #51]	; 0x33
     ab4:	bl	8cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
     ab8:	cmp	r0, #0
     aba:	beq.n	a8a <SDClass::rmdir(char const*)+0x26>
     abc:	mov	r0, sp
     abe:	bl	9aa0 <ExFatFile::rmdir()>
     ac2:	add	sp, #60	; 0x3c
     ac4:	pop	{r4, r5, pc}
     ac6:	nop

00000ac8 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
     ac8:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     aca:	cbz	r3, ad2 <SDFile::position()+0xa>
     acc:	ldr	r0, [r3, #20]
     ace:	movs	r1, #0
     ad0:	bx	lr
     ad2:	ldr	r3, [r0, #96]	; 0x60
     ad4:	cbz	r3, adc <SDFile::position()+0x14>
     ad6:	ldmia.w	r3, {r0, r1}
     ada:	bx	lr
     adc:	mov	r0, r3
     ade:	mov	r1, r3
		return sdfatfile.curPosition();
	}
     ae0:	bx	lr
     ae2:	nop

00000ae4 <SDFile::size()>:
	virtual uint64_t size() {
     ae4:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     ae6:	cbz	r3, aee <SDFile::size()+0xa>
     ae8:	ldr	r0, [r3, #28]
     aea:	movs	r1, #0
     aec:	bx	lr
     aee:	ldr	r3, [r0, #96]	; 0x60
     af0:	cbz	r3, af8 <SDFile::size()+0x14>
     af2:	ldr	r0, [r3, #16]
     af4:	ldr	r1, [r3, #20]
     af6:	bx	lr
     af8:	mov	r0, r3
     afa:	mov	r1, r3
		return sdfatfile.size();
	}
     afc:	bx	lr
     afe:	nop

00000b00 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     b00:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     b02:	cbz	r3, b0a <SDFile::read(void*, unsigned int)+0xa>
     b04:	mov	r0, r3
     b06:	b.w	af50 <FatFile::read(void*, unsigned int)>
     b0a:	ldr	r0, [r0, #96]	; 0x60
     b0c:	cbz	r0, b12 <SDFile::read(void*, unsigned int)+0x12>
     b0e:	b.w	80ec <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     b12:	mov.w	r0, #4294967295
     b16:	bx	lr

00000b18 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     b18:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     b1a:	cbz	r3, b22 <SDFile::peek()+0xa>
     b1c:	mov	r0, r3
     b1e:	b.w	b1e4 <FatFile::peek()>
     b22:	ldr	r0, [r0, #96]	; 0x60
     b24:	cbz	r0, b2a <SDFile::peek()+0x12>
     b26:	b.w	8390 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     b2a:	mov.w	r0, #4294967295
     b2e:	bx	lr

00000b30 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
     b30:	ldr.w	r2, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     b34:	cbz	r2, b4a <SDClass::totalSize()+0x1a>
     b36:	ldrb	r1, [r2, #6]
     b38:	ldr	r0, [r2, #28]
     b3a:	mov.w	r3, #512	; 0x200
     b3e:	lsls	r3, r1
     b40:	uxth	r3, r3
     b42:	subs	r0, #1
     b44:	umull	r0, r1, r3, r0
     b48:	bx	lr
     b4a:	ldr.w	r2, [r0, #1160]	; 0x488
     b4e:	cbz	r2, b5e <SDClass::totalSize()+0x2e>
     b50:	ldr.w	r3, [r2, #1072]	; 0x430
     b54:	ldr.w	r0, [r2, #1084]	; 0x43c
     b58:	umull	r0, r1, r3, r0
     b5c:	bx	lr
     b5e:	movs	r0, #0
     b60:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
     b62:	bx	lr

00000b64 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     b64:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b66:	cbz	r3, b76 <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     b68:	ldrb	r3, [r3, #0]
     b6a:	tst.w	r3, #112	; 0x70
     b6e:	ite	ne
     b70:	movne	r0, #1
     b72:	moveq	r0, #0
     b74:	bx	lr
     b76:	ldr	r0, [r0, #96]	; 0x60
     b78:	cbz	r0, b88 <SDFile::isDirectory()+0x24>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     b7a:	ldrb.w	r3, [r0, #49]	; 0x31
     b7e:	tst.w	r3, #80	; 0x50
     b82:	ite	ne
     b84:	movne	r0, #1
     b86:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     b88:	bx	lr
     b8a:	nop

00000b8c <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     b8c:	push	{r4, lr}
     b8e:	ldr.w	r4, [r0, #1156]	; 0x484
     b92:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     b94:	cbz	r4, bc0 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     b96:	mov	r2, r1
     b98:	mov	r0, sp
     b9a:	mov	r1, r4
     b9c:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     b9e:	movs	r4, #0
     ba0:	strb.w	r4, [sp]
     ba4:	strb.w	r4, [sp, #1]
     ba8:	strb.w	r4, [sp, #2]
     bac:	bl	af40 <FatFile::open(FatVolume*, char const*, int)>
     bb0:	cbnz	r0, bb6 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     bb2:	add	sp, #56	; 0x38
     bb4:	pop	{r4, pc}
     bb6:	mov	r0, sp
     bb8:	bl	d384 <FatFile::remove()>
     bbc:	add	sp, #56	; 0x38
     bbe:	pop	{r4, pc}
     bc0:	ldr.w	r0, [r0, #1160]	; 0x488
     bc4:	cmp	r0, #0
     bc6:	beq.n	bb2 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     bc8:	mov	r2, r1
     bca:	movs	r3, #1
     bcc:	mov	r1, r0
     bce:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     bd0:	strb.w	r4, [sp, #49]	; 0x31
     bd4:	strb.w	r4, [sp, #50]	; 0x32
     bd8:	strb.w	r4, [sp, #51]	; 0x33
     bdc:	bl	8cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
     be0:	cmp	r0, #0
     be2:	beq.n	bb2 <SDClass::remove(char const*)+0x26>
     be4:	mov	r0, sp
     be6:	bl	98d4 <ExFatFile::remove()>
     bea:	add	sp, #56	; 0x38
     bec:	pop	{r4, pc}
     bee:	nop

00000bf0 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     bf0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     bf4:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     bf6:	sub	sp, #80	; 0x50
     bf8:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     bfa:	beq.n	c80 <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     bfc:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
     bfe:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     c02:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c06:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     c08:	it	ne
     c0a:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c0c:	bl	dfec <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     c10:	ldr	r3, [sp, #72]	; 0x48
     c12:	cmp	r3, #0
     c14:	beq.n	c92 <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
     c16:	movs	r0, #104	; 0x68
     c18:	bl	119ac <operator new(unsigned int)>
     c1c:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     c1e:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     c22:	ldr	r0, [pc, #136]	; (cac <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     c24:	ldr	r1, [pc, #136]	; (cb0 <SDClass::open(char const*, unsigned char)+0xc0>)
     c26:	ldr	r2, [sp, #8]
     c28:	ldrb.w	r3, [sp, #12]
     c2c:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     c2e:	add	r7, sp, #16
     c30:	strb	r6, [r4, #24]
     c32:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
     c34:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     c36:	mov.w	r8, #1000	; 0x3e8
     c3a:	mov	r1, r7
     c3c:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     c40:	str	r2, [r4, #28]
     c42:	strb.w	r3, [r4, #32]
     c46:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     c48:	strb	r6, [r4, #12]
     c4a:	str	r6, [r4, #16]
     c4c:	str.w	r8, [r4, #8]
     c50:	bl	dda4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     c54:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     c56:	ldr	r1, [pc, #92]	; (cb4 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     c58:	ldr	r2, [pc, #92]	; (cb8 <SDClass::open(char const*, unsigned char)+0xc8>)
     c5a:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     c5c:	adds	r3, #1
     c5e:	strb	r6, [r5, #4]
     c60:	str.w	r8, [r5, #8]
     c64:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     c66:	str	r4, [r5, #16]
     c68:	str	r1, [r4, #20]
		if (f) f->refcount++;
     c6a:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     c6c:	str	r2, [r5, #0]
     c6e:	ldr	r3, [pc, #76]	; (cbc <SDClass::open(char const*, unsigned char)+0xcc>)
     c70:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     c72:	mov	r0, r7
     c74:	bl	de1c <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     c78:	mov	r0, r5
     c7a:	add	sp, #80	; 0x50
     c7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     c80:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     c84:	adds	r1, #4
     c86:	mov	r0, sp
     c88:	bl	dfec <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     c8c:	ldr	r3, [sp, #72]	; 0x48
     c8e:	cmp	r3, #0
     c90:	bne.n	c16 <SDClass::open(char const*, unsigned char)+0x26>
     c92:	ldr	r3, [sp, #76]	; 0x4c
     c94:	cmp	r3, #0
     c96:	bne.n	c16 <SDClass::open(char const*, unsigned char)+0x26>
     c98:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     c9c:	ldr	r2, [pc, #24]	; (cb8 <SDClass::open(char const*, unsigned char)+0xc8>)
     c9e:	strb	r3, [r5, #4]
     ca0:	strb	r3, [r5, #12]
     ca2:	str	r3, [r5, #16]
     ca4:	str	r1, [r5, #8]
     ca6:	str	r2, [r5, #0]
     ca8:	add	r7, sp, #16
     caa:	b.n	c6e <SDClass::open(char const*, unsigned char)+0x7e>
     cac:	.word	0x00016abc
     cb0:	.word	0x000169f0
     cb4:	.word	0x00016a38
     cb8:	.word	0x00016a5c
     cbc:	.word	0x00016a14

00000cc0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     cc0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     cc2:	cbz	r3, cca <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     cc4:	mov	r0, r3
     cc6:	b.w	bf38 <FatFile::sync()>
     cca:	ldr	r0, [r0, #76]	; 0x4c
     ccc:	cbz	r0, cd2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     cce:	b.w	9d60 <ExFatFile::sync()>
     cd2:	bx	lr

00000cd4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     cd4:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     cd6:	cbz	r3, cde <SDFile::write(void const*, unsigned int)+0xa>
     cd8:	mov	r0, r3
     cda:	b.w	c0a0 <FatFile::write(void const*, unsigned int)>
     cde:	ldr	r0, [r0, #96]	; 0x60
     ce0:	cbz	r0, ce6 <SDFile::write(void const*, unsigned int)+0x12>
     ce2:	b.w	a520 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     ce6:	bx	lr

00000ce8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     ce8:	ldr	r3, [r0, #72]	; 0x48
     cea:	cbz	r3, cf2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     cec:	mov	r0, r3
     cee:	b.w	c0a0 <FatFile::write(void const*, unsigned int)>
     cf2:	ldr	r0, [r0, #76]	; 0x4c
     cf4:	cbz	r0, cfa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     cf6:	b.w	a520 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     cfa:	bx	lr

00000cfc <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     cfc:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     cfe:	cbz	r2, d1a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     d00:	ldrb	r3, [r2, #0]
     d02:	and.w	r3, r3, #8
     d06:	and.w	r0, r3, #255	; 0xff
     d0a:	cbz	r3, d4e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     d0c:	ldr	r3, [r2, #28]
     d0e:	ldr	r0, [r2, #20]
     d10:	subs	r0, r3, r0
     d12:	it	mi
     d14:	mvnmi.w	r0, #2147483648	; 0x80000000
     d18:	bx	lr
     d1a:	ldr	r1, [r0, #76]	; 0x4c
     d1c:	cbz	r1, d50 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     d1e:	ldrb.w	r3, [r1, #49]	; 0x31
     d22:	and.w	r3, r3, #8
     d26:	and.w	r0, r3, #255	; 0xff
     d2a:	cbz	r3, d4e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     d2c:	ldrd	r2, r3, [r1, #16]
     d30:	ldrd	r0, r1, [r1]
     d34:	subs	r0, r2, r0
     d36:	push	{r4, r5}
     d38:	sbc.w	r1, r3, r1
     d3c:	movs	r5, #0
     d3e:	mvn.w	r4, #2147483648	; 0x80000000
     d42:	cmp	r5, r1
     d44:	it	eq
     d46:	cmpeq	r4, r0
     d48:	bcs.n	d4c <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     d4a:	mov	r0, r4
    return BaseFile::available();
  }
     d4c:	pop	{r4, r5}
     d4e:	bx	lr
     d50:	mov	r0, r1
     d52:	bx	lr

00000d54 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     d54:	push	{r4, r5, lr}
     d56:	ldr.w	r4, [r0, #1156]	; 0x484
     d5a:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     d5c:	cbz	r4, d7c <SDClass::exists(char const*)+0x28>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     d5e:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     d60:	mov	r2, r1
     d62:	mov	r3, r5
     d64:	mov	r1, r4
     d66:	mov	r0, sp
     d68:	strb.w	r5, [sp]
     d6c:	strb.w	r5, [sp, #1]
     d70:	strb.w	r5, [sp, #2]
     d74:	bl	af40 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     d78:	add	sp, #60	; 0x3c
     d7a:	pop	{r4, r5, pc}
     d7c:	ldr.w	r0, [r0, #1160]	; 0x488
     d80:	cmp	r0, #0
     d82:	beq.n	d78 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     d84:	mov	r2, r1
     d86:	mov	r3, r4
     d88:	mov	r1, r0
     d8a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     d8c:	strb.w	r4, [sp, #49]	; 0x31
     d90:	strb.w	r4, [sp, #50]	; 0x32
     d94:	strb.w	r4, [sp, #51]	; 0x33
     d98:	bl	8cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
     d9c:	add	sp, #60	; 0x3c
     d9e:	pop	{r4, r5, pc}

00000da0 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     da0:	push	{r4, r6, r7}
     da2:	ldr	r4, [sp, #12]
     da4:	mov	r6, r2
     da6:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     da8:	cbz	r4, db8 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     daa:	cmp	r4, #1
     dac:	beq.n	dec <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     dae:	cmp	r4, #2
     db0:	beq.n	dce <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
     db2:	movs	r0, #0
     db4:	pop	{r4, r6, r7}
     db6:	bx	lr
     db8:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     dba:	cbz	r4, df4 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     dbc:	cmp	r3, #1
     dbe:	it	eq
     dc0:	cmpeq	r2, #0
     dc2:	bcs.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     dc4:	mov	r0, r4
     dc6:	mov	r1, r2
     dc8:	pop	{r4, r6, r7}
     dca:	b.w	b288 <FatFile::seekSet(unsigned long)>
     dce:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     dd0:	cbz	r3, e00 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     dd2:	ldr	r2, [r3, #28]
     dd4:	adds	r6, r6, r2
     dd6:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     dda:	cmp	r7, #1
     ddc:	it	eq
     dde:	cmpeq	r6, #0
     de0:	bcs.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     de2:	mov	r1, r6
     de4:	mov	r0, r3
     de6:	pop	{r4, r6, r7}
     de8:	b.w	b288 <FatFile::seekSet(unsigned long)>
     dec:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     dee:	cbz	r3, e14 <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
     df0:	ldr	r2, [r3, #20]
     df2:	b.n	dd4 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     df4:	ldr	r0, [r0, #96]	; 0x60
     df6:	cmp	r0, #0
     df8:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
     dfa:	pop	{r4, r6, r7}
     dfc:	b.w	83c0 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e00:	ldr	r0, [r0, #96]	; 0x60
     e02:	cmp	r0, #0
     e04:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e06:	ldrd	r2, r3, [r0, #16]
     e0a:	adds	r2, r2, r6
     e0c:	adcs	r3, r7
     e0e:	pop	{r4, r6, r7}
     e10:	b.w	83c0 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e14:	ldr	r0, [r0, #96]	; 0x60
     e16:	cmp	r0, #0
     e18:	beq.n	db2 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e1a:	ldrd	r2, r3, [r0]
     e1e:	adds	r2, r2, r6
     e20:	adcs	r3, r7
     e22:	b.n	dfa <SDFile::seek(unsigned long long, int)+0x5a>

00000e24 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e24:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e26:	ldr	r3, [pc, #32]	; (e48 <File::~File()+0x24>)
     e28:	push	{r4, lr}
     e2a:	mov	r4, r0
     e2c:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e2e:	cbz	r2, e42 <File::~File()+0x1e>
     e30:	ldr	r3, [r2, #16]
     e32:	subs	r3, #1
     e34:	str	r3, [r2, #16]
     e36:	cbnz	r3, e42 <File::~File()+0x1e>
     e38:	ldr	r0, [r0, #16]
     e3a:	cbz	r0, e42 <File::~File()+0x1e>
     e3c:	ldr	r3, [r0, #0]
     e3e:	ldr	r3, [r3, #32]
     e40:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     e42:	mov	r0, r4
     e44:	pop	{r4, pc}
     e46:	nop
     e48:	.word	0x00016a5c

00000e4c <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     e4c:	push	{r3, r4, r5, lr}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     e4e:	ldr	r3, [r0, #92]	; 0x5c
     e50:	ldr	r2, [pc, #80]	; (ea4 <SDFile::~SDFile()+0x58>)
     e52:	str	r2, [r0, #0]
     e54:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     e56:	add.w	r5, r0, #36	; 0x24
     e5a:	cbz	r3, e9a <SDFile::~SDFile()+0x4e>
     e5c:	mov	r0, r5
     e5e:	bl	de1c <FsBaseFile::close()>
		if (filename) free(filename);
     e62:	ldr	r0, [r4, #100]	; 0x64
     e64:	cbz	r0, e6a <SDFile::~SDFile()+0x1e>
     e66:	bl	127d4 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     e6a:	ldr	r3, [pc, #60]	; (ea8 <SDFile::~SDFile()+0x5c>)
     e6c:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     e6e:	mov	r0, r5
     e70:	bl	de1c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e74:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e76:	ldr	r3, [pc, #52]	; (eac <SDFile::~SDFile()+0x60>)
     e78:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e7a:	cbz	r2, e8e <SDFile::~SDFile()+0x42>
     e7c:	ldr	r3, [r2, #16]
     e7e:	subs	r3, #1
     e80:	str	r3, [r2, #16]
     e82:	cbnz	r3, e8e <SDFile::~SDFile()+0x42>
     e84:	ldr	r0, [r4, #16]
     e86:	cbz	r0, e8e <SDFile::~SDFile()+0x42>
     e88:	ldr	r3, [r0, #0]
     e8a:	ldr	r3, [r3, #32]
     e8c:	blx	r3
	}
     e8e:	mov	r0, r4
     e90:	movs	r1, #104	; 0x68
     e92:	bl	119b0 <operator delete(void*, unsigned int)>
     e96:	mov	r0, r4
     e98:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     e9a:	ldr	r3, [r0, #96]	; 0x60
     e9c:	cmp	r3, #0
     e9e:	bne.n	e5c <SDFile::~SDFile()+0x10>
     ea0:	b.n	e62 <SDFile::~SDFile()+0x16>
     ea2:	nop
     ea4:	.word	0x00016abc
     ea8:	.word	0x00016a14
     eac:	.word	0x00016a5c

00000eb0 <File::~File()>:
     eb0:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     eb2:	ldr	r3, [pc, #40]	; (edc <File::~File()+0x2c>)
     eb4:	push	{r4, lr}
     eb6:	mov	r4, r0
     eb8:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     eba:	cbz	r2, ece <File::~File()+0x1e>
     ebc:	ldr	r3, [r2, #16]
     ebe:	subs	r3, #1
     ec0:	str	r3, [r2, #16]
     ec2:	cbnz	r3, ece <File::~File()+0x1e>
     ec4:	ldr	r0, [r0, #16]
     ec6:	cbz	r0, ece <File::~File()+0x1e>
     ec8:	ldr	r3, [r0, #0]
     eca:	ldr	r3, [r3, #32]
     ecc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     ece:	mov	r0, r4
     ed0:	movs	r1, #20
     ed2:	bl	119b0 <operator delete(void*, unsigned int)>
     ed6:	mov	r0, r4
     ed8:	pop	{r4, pc}
     eda:	nop
     edc:	.word	0x00016a5c

00000ee0 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ee0:	ldr.w	r2, [r0, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     ee4:	push	{r3, r4, r5, lr}
     ee6:	ldr	r3, [pc, #104]	; (f50 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ee8:	ldr	r5, [pc, #104]	; (f54 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
     eea:	str	r3, [r0, #0]
     eec:	mov	r4, r0
     eee:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ef2:	cbz	r2, efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     ef4:	ldr	r3, [r2, #16]
     ef6:	subs	r3, #1
     ef8:	str	r3, [r2, #16]
     efa:	cbz	r3, f30 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     efc:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f00:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f04:	cbz	r2, f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f06:	ldr	r3, [r2, #16]
     f08:	subs	r3, #1
     f0a:	str	r3, [r2, #16]
     f0c:	cbz	r3, f40 <MTPStorage_SD::~MTPStorage_SD()+0x60>
     f0e:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f12:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f16:	cbz	r2, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f18:	ldr	r3, [r2, #16]
     f1a:	subs	r3, #1
     f1c:	str	r3, [r2, #16]
     f1e:	cbnz	r3, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f20:	ldr.w	r0, [r4, #184]	; 0xb8
     f24:	cbz	r0, f2c <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f26:	ldr	r3, [r0, #0]
     f28:	ldr	r3, [r3, #32]
     f2a:	blx	r3
     f2c:	mov	r0, r4
     f2e:	pop	{r3, r4, r5, pc}
     f30:	ldr.w	r0, [r0, #224]	; 0xe0
     f34:	cmp	r0, #0
     f36:	beq.n	efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f38:	ldr	r3, [r0, #0]
     f3a:	ldr	r3, [r3, #32]
     f3c:	blx	r3
     f3e:	b.n	efc <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f40:	ldr.w	r0, [r4, #204]	; 0xcc
     f44:	cmp	r0, #0
     f46:	beq.n	f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f48:	ldr	r3, [r0, #0]
     f4a:	ldr	r3, [r3, #32]
     f4c:	blx	r3
     f4e:	b.n	f0e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f50:	.word	0x00016c64
     f54:	.word	0x00016a5c

00000f58 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     f58:	push	{r3, r4, r5, lr}
     f5a:	ldr	r3, [r0, #92]	; 0x5c
     f5c:	ldr	r2, [pc, #72]	; (fa8 <SDFile::~SDFile()+0x50>)
     f5e:	str	r2, [r0, #0]
     f60:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     f62:	add.w	r5, r0, #36	; 0x24
     f66:	cbz	r3, f9e <SDFile::~SDFile()+0x46>
     f68:	mov	r0, r5
     f6a:	bl	de1c <FsBaseFile::close()>
		if (filename) free(filename);
     f6e:	ldr	r0, [r4, #100]	; 0x64
     f70:	cbz	r0, f76 <SDFile::~SDFile()+0x1e>
     f72:	bl	127d4 <free>
     f76:	ldr	r3, [pc, #52]	; (fac <SDFile::~SDFile()+0x54>)
     f78:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     f7a:	mov	r0, r5
     f7c:	bl	de1c <FsBaseFile::close()>
     f80:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f82:	ldr	r3, [pc, #44]	; (fb0 <SDFile::~SDFile()+0x58>)
     f84:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f86:	cbz	r2, f9a <SDFile::~SDFile()+0x42>
     f88:	ldr	r3, [r2, #16]
     f8a:	subs	r3, #1
     f8c:	str	r3, [r2, #16]
     f8e:	cbnz	r3, f9a <SDFile::~SDFile()+0x42>
     f90:	ldr	r0, [r4, #16]
     f92:	cbz	r0, f9a <SDFile::~SDFile()+0x42>
     f94:	ldr	r3, [r0, #0]
     f96:	ldr	r3, [r3, #32]
     f98:	blx	r3
	}
     f9a:	mov	r0, r4
     f9c:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     f9e:	ldr	r3, [r0, #96]	; 0x60
     fa0:	cmp	r3, #0
     fa2:	bne.n	f68 <SDFile::~SDFile()+0x10>
     fa4:	b.n	f6e <SDFile::~SDFile()+0x16>
     fa6:	nop
     fa8:	.word	0x00016abc
     fac:	.word	0x00016a14
     fb0:	.word	0x00016a5c

00000fb4 <storage_configure()>:

MTPStorage_SD storage;
MTPD    mtpd(&storage);

void storage_configure()
{
     fb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     fb8:	movs	r1, #11

MTPStorage_SD storage;
MTPD    mtpd(&storage);

void storage_configure()
{
     fba:	sub	sp, #64	; 0x40
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     fbc:	ldr	r0, [pc, #740]	; (12a4 <storage_configure()+0x2f0>)
     fbe:	ldr	r4, [pc, #744]	; (12a8 <storage_configure()+0x2f4>)
     fc0:	ldr	r6, [pc, #744]	; (12ac <storage_configure()+0x2f8>)
     fc2:	ldr.w	fp, [pc, #784]	; 12d4 <storage_configure()+0x320>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
     fc6:	ldr.w	r9, [pc, #784]	; 12d8 <storage_configure()+0x324>
     fca:	bl	7504 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
     fce:	movs	r1, #12
     fd0:	ldr	r0, [pc, #720]	; (12a4 <storage_configure()+0x2f0>)
     fd2:	bl	75a8 <SPIClass::setMISO(unsigned char)>
     fd6:	addw	r7, r4, #1172	; 0x494
      SPI.setSCK(SD_SCK);
     fda:	movs	r1, #13
     fdc:	ldr	r0, [pc, #708]	; (12a4 <storage_configure()+0x2f0>)
     fde:	bl	7648 <SPIClass::setSCK(unsigned char)>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     fe2:	mov	r0, r7
     fe4:	mov.w	r1, #0
     fe8:	bl	f394 <SdioCard::begin(SdioConfig)>
    #endif

    for(int ii=0; ii<nsd; ii++)
     fec:	movs	r5, #0
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     fee:	str.w	r7, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
     ff2:	cbz	r7, ffe <storage_configure()+0x4a>
     ff4:	mov	r0, r7
     ff6:	bl	ead4 <SdioCard::errorCode() const>
     ffa:	cmp	r0, #0
     ffc:	beq.n	10ba <storage_configure()+0x106>
    { 
      #if defined(BUILTIN_SDCARD)
        if(cs[ii] == BUILTIN_SDCARD)
        {
          if(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO))) 
          { Serial.printf("SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     ffe:	ldr	r3, [r6, #0]
    1000:	str	r3, [sp, #0]
    1002:	mov	r2, r5
    1004:	movs	r3, #254	; 0xfe
    1006:	ldr	r1, [pc, #680]	; (12b0 <storage_configure()+0x2fc>)
    1008:	ldr	r0, [pc, #680]	; (12b4 <storage_configure()+0x300>)
    100a:	bl	11830 <Print::printf(char const*, ...)>
    100e:	ldr	r0, [pc, #676]	; (12b4 <storage_configure()+0x300>)
    1010:	bl	11800 <Print::println()>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    for(int ii=0; ii<nsd; ii++)
    1014:	adds	r5, #1
    1016:	cmp	r5, #2
    1018:	add.w	r6, r6, #4
    101c:	add.w	r4, r4, #1208	; 0x4b8
    1020:	beq.n	10b4 <storage_configure()+0x100>
    1022:	movs	r7, #10
          }
        }
        else if(cs[ii]<BUILTIN_SDCARD)
      #endif
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
    1024:	uxtb.w	r8, r7
    1028:	mov	r0, r8
    102a:	movs	r1, #1
    102c:	bl	10600 <pinMode>
    1030:	mov.w	lr, #0
    1034:	strb.w	r8, [sp, #28]
    1038:	str.w	fp, [sp, #32]
    103c:	strb.w	lr, [sp, #29]
    1040:	str.w	lr, [sp, #36]	; 0x24
    1044:	add	r3, sp, #28
    1046:	ldmia.w	r3, {r0, r1, r2}
    104a:	add	r3, sp, #40	; 0x28
    104c:	stmia.w	r3, {r0, r1, r2}
    1050:	strb.w	r8, [sp, #40]	; 0x28
    1054:	strb.w	lr, [sp, #41]	; 0x29
    1058:	str.w	lr, [sp, #48]	; 0x30
    105c:	str.w	fp, [sp, #44]	; 0x2c
    1060:	ldmia.w	r3, {r0, r1, r2}
    1064:	add	r3, sp, #52	; 0x34
    1066:	stmia.w	r3, {r0, r1, r2}
			}
			#endif
		}
	} else {
		if (val) {
			*portSetRegister(pin) = digitalPinToBitMask(pin);
    106a:	ldr	r2, [pc, #588]	; (12b8 <storage_configure()+0x304>)
    106c:	ldr.w	r2, [r2, r8, lsl #3]
    1070:	movs	r1, #1
    1072:	add.w	r8, r4, #1184	; 0x4a0
    1076:	strb.w	r1, [r2, #128]	; 0x80
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    107a:	mov	r0, r8
    107c:	ldmia	r3, {r1, r2, r3}
    107e:	bl	e2a4 <SdSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    1082:	ldrb.w	r3, [r4, #1203]	; 0x4b3
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    1086:	str.w	r8, [r4, #1168]	; 0x490
    108a:	adds	r0, r4, #4
    return m_card && !m_card->errorCode();
    108c:	cmp	r3, #0
    108e:	beq.n	118c <storage_configure()+0x1d8>
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
    1090:	ldr	r3, [r6, #0]
    1092:	str	r3, [sp, #0]
    1094:	mov	r2, r5
    1096:	mov	r3, r7
    1098:	ldr	r1, [pc, #544]	; (12bc <storage_configure()+0x308>)
    109a:	ldr	r0, [pc, #536]	; (12b4 <storage_configure()+0x300>)
    109c:	bl	11830 <Print::printf(char const*, ...)>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    for(int ii=0; ii<nsd; ii++)
    10a0:	adds	r5, #1
        else if(cs[ii]<BUILTIN_SDCARD)
      #endif
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
    10a2:	ldr	r0, [pc, #528]	; (12b4 <storage_configure()+0x300>)
    10a4:	bl	11800 <Print::println()>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    for(int ii=0; ii<nsd; ii++)
    10a8:	cmp	r5, #2
    10aa:	add.w	r6, r6, #4
    10ae:	add.w	r4, r4, #1208	; 0x4b8
    10b2:	bne.n	1022 <storage_configure()+0x6e>
        uint64_t usedSize  = spifs[ii].usedSize();
        Serial.printf("SPIFlash Storage %d %d %s ",ii,lfs_cs[ii],lfs_spi_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
      }
    }
    #endif
}
    10b4:	add	sp, #64	; 0x40
    10b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
    10ba:	add.w	r8, r4, #4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    10be:	mov	r0, r8
    10c0:	ldr.w	r1, [r4, #1168]	; 0x490
    10c4:	bl	df24 <FsVolume::begin(BlockDeviceInterface*)>
    10c8:	cmp	r0, #0
    10ca:	beq.n	ffe <storage_configure()+0x4a>
    10cc:	ldr.w	r3, [r9, #4]
    10d0:	cmp	r3, #19
    10d2:	bgt.n	10e4 <storage_configure()+0x130>
        sd_name[fsCount] = name;
    10d4:	add.w	r1, r9, r3, lsl #2
    10d8:	ldr	r0, [r6, #0]
    10da:	str	r0, [r1, #8]
        sdx[fsCount++] = &fs;
    10dc:	adds	r3, #1
    10de:	str	r4, [r1, #88]	; 0x58
    10e0:	str.w	r3, [r9, #4]
          { Serial.printf("SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
          }
          else
          {
            storage.addFilesystem(sdx[ii], sd_str[ii]);
            uint64_t totalSize = sdx[ii].totalSize();
    10e4:	ldr	r1, [r4, #0]
    10e6:	ldr	r2, [pc, #472]	; (12c0 <storage_configure()+0x30c>)
    10e8:	ldr	r3, [r1, #28]
    10ea:	cmp	r3, r2
    10ec:	bne.w	1280 <storage_configure()+0x2cc>
    10f0:	ldr.w	r0, [r4, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    10f4:	cmp	r0, #0
    10f6:	beq.w	12dc <storage_configure()+0x328>
    10fa:	ldrb	r7, [r0, #6]
    10fc:	ldr	r2, [r0, #28]
    10fe:	mov.w	r3, #512	; 0x200
    1102:	lsls	r3, r7
    1104:	subs	r2, #1
    1106:	uxth	r3, r3
    1108:	umull	r2, r3, r3, r2
  uint8_t bytesPerClusterShift() const {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() const {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    110c:	strd	r2, r3, [sp, #8]
            uint64_t usedSize  = sdx[ii].usedSize();
    1110:	ldr	r3, [r1, #24]
    1112:	ldr	r2, [pc, #432]	; (12c4 <storage_configure()+0x310>)
    1114:	cmp	r3, r2
    1116:	bne.w	1276 <storage_configure()+0x2c2>
    111a:	ldr.w	r0, [r4, #1156]	; 0x484
    111e:	cmp	r0, #0
    1120:	beq.w	12f4 <storage_configure()+0x340>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    1124:	ldr	r7, [r0, #28]
    1126:	subs	r7, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    1128:	bl	c9f0 <FatPartition::freeClusterCount()>
    112c:	ldr.w	r3, [r4, #1156]	; 0x484
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    1130:	subs	r7, r7, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1132:	cmp	r3, #0
    1134:	beq.w	128c <storage_configure()+0x2d8>
    1138:	ldrb	r2, [r3, #6]
    113a:	mov.w	r3, #512	; 0x200
    113e:	lsls	r3, r2
    1140:	uxth	r3, r3
    1142:	umull	r2, r3, r3, r7
  uint8_t bytesPerClusterShift() const {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() const {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    1146:	strd	r2, r3, [sp, #16]
            Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    114a:	ldr	r3, [r6, #0]
    114c:	ldr	r1, [pc, #376]	; (12c8 <storage_configure()+0x314>)
    114e:	str	r3, [sp, #0]
    1150:	mov	r2, r5
    1152:	movs	r3, #254	; 0xfe
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    1154:	mov.w	r8, #0
    1158:	movs	r7, #10
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].totalSize();
          uint64_t usedSize  = sdx[ii].usedSize();
          Serial.printf("SD Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    115a:	ldr	r0, [pc, #344]	; (12b4 <storage_configure()+0x300>)
    115c:	bl	11830 <Print::printf(char const*, ...)>
    1160:	ldrd	r2, r3, [sp, #8]
    1164:	stmia.w	sp, {r7, r8}
    1168:	ldr	r0, [pc, #328]	; (12b4 <storage_configure()+0x300>)
    116a:	bl	118dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    116e:	movs	r1, #1
    1170:	ldr	r0, [pc, #344]	; (12cc <storage_configure()+0x318>)
    1172:	bl	fe48 <usb_serial_write>
    1176:	stmia.w	sp, {r7, r8}
    117a:	ldrd	r2, r3, [sp, #16]
    117e:	ldr	r0, [pc, #308]	; (12b4 <storage_configure()+0x300>)
    1180:	bl	118dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    1184:	ldr	r0, [pc, #300]	; (12b4 <storage_configure()+0x300>)
    1186:	bl	11800 <Print::println()>
    118a:	b.n	1014 <storage_configure()+0x60>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
    118c:	mov	r1, r8
    118e:	bl	df24 <FsVolume::begin(BlockDeviceInterface*)>
    1192:	cmp	r0, #0
    1194:	beq.w	1090 <storage_configure()+0xdc>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    1198:	ldr.w	r3, [r9, #4]
    119c:	cmp	r3, #19
    119e:	bgt.n	11b0 <storage_configure()+0x1fc>
        sd_name[fsCount] = name;
    11a0:	add.w	r1, r9, r3, lsl #2
    11a4:	ldr	r0, [r6, #0]
    11a6:	str	r0, [r1, #8]
        sdx[fsCount++] = &fs;
    11a8:	adds	r3, #1
    11aa:	str	r4, [r1, #88]	; 0x58
    11ac:	str.w	r3, [r9, #4]
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].totalSize();
    11b0:	ldr	r1, [r4, #0]
    11b2:	ldr	r2, [pc, #268]	; (12c0 <storage_configure()+0x30c>)
    11b4:	ldr	r3, [r1, #28]
    11b6:	cmp	r3, r2
    11b8:	bne.n	121e <storage_configure()+0x26a>
    11ba:	ldr.w	r0, [r4, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    11be:	cmp	r0, #0
    11c0:	beq.n	124a <storage_configure()+0x296>
    11c2:	ldrb.w	lr, [r0, #6]
    11c6:	ldr	r2, [r0, #28]
    11c8:	mov.w	r3, #512	; 0x200
    11cc:	lsl.w	r3, r3, lr
    11d0:	subs	r2, #1
    11d2:	uxth	r3, r3
    11d4:	umull	r2, r3, r3, r2
    11d8:	strd	r2, r3, [sp, #8]
          uint64_t usedSize  = sdx[ii].usedSize();
    11dc:	ldr	r3, [r1, #24]
    11de:	ldr	r2, [pc, #228]	; (12c4 <storage_configure()+0x310>)
    11e0:	cmp	r3, r2
    11e2:	bne.n	122a <storage_configure()+0x276>
    11e4:	ldr.w	r0, [r4, #1156]	; 0x484
    11e8:	cmp	r0, #0
    11ea:	beq.n	1264 <storage_configure()+0x2b0>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    11ec:	ldr	r3, [r0, #28]
    11ee:	add.w	r8, r3, #4294967295
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    11f2:	bl	c9f0 <FatPartition::freeClusterCount()>
    11f6:	ldr.w	r3, [r4, #1156]	; 0x484
    11fa:	rsb	r0, r0, r8
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    11fe:	cbz	r3, 1234 <storage_configure()+0x280>
    1200:	ldrb	r2, [r3, #6]
    1202:	mov.w	r3, #512	; 0x200
    1206:	lsls	r3, r2
    1208:	uxth	r3, r3
    120a:	umull	r0, r1, r3, r0
  uint8_t bytesPerClusterShift() const {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() const {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    120e:	strd	r0, r1, [sp, #16]
          Serial.printf("SD Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    1212:	ldr	r3, [r6, #0]
    1214:	str	r3, [sp, #0]
    1216:	mov	r2, r5
    1218:	mov	r3, r7
    121a:	ldr	r1, [pc, #180]	; (12d0 <storage_configure()+0x31c>)
    121c:	b.n	1154 <storage_configure()+0x1a0>
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].totalSize();
    121e:	mov	r0, r4
    1220:	blx	r3
    1222:	strd	r0, r1, [sp, #8]
    1226:	ldr	r1, [r4, #0]
    1228:	b.n	11dc <storage_configure()+0x228>
          uint64_t usedSize  = sdx[ii].usedSize();
    122a:	mov	r0, r4
    122c:	blx	r3
    122e:	strd	r0, r1, [sp, #16]
    1232:	b.n	1212 <storage_configure()+0x25e>
    1234:	ldr.w	r3, [r4, #1160]	; 0x488
    1238:	cmp	r3, #0
    123a:	beq.n	1304 <storage_configure()+0x350>
    123c:	ldr.w	r3, [r3, #1084]	; 0x43c
    1240:	umull	r2, r3, r0, r3
    1244:	strd	r2, r3, [sp, #16]
    1248:	b.n	1212 <storage_configure()+0x25e>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    124a:	ldr.w	r3, [r4, #1160]	; 0x488
    124e:	cmp	r3, #0
    1250:	beq.n	130e <storage_configure()+0x35a>
    1252:	ldr.w	r2, [r3, #1072]	; 0x430
    1256:	ldr.w	r3, [r3, #1084]	; 0x43c
    125a:	umull	r2, r3, r2, r3
    125e:	strd	r2, r3, [sp, #8]
    1262:	b.n	11dc <storage_configure()+0x228>
    1264:	ldr.w	r0, [r4, #1160]	; 0x488
    1268:	cmp	r0, #0
    126a:	beq.n	1304 <storage_configure()+0x350>
    126c:	ldr.w	r8, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1270:	bl	94a4 <ExFatPartition::freeClusterCount()>
    1274:	b.n	11f6 <storage_configure()+0x242>
          }
          else
          {
            storage.addFilesystem(sdx[ii], sd_str[ii]);
            uint64_t totalSize = sdx[ii].totalSize();
            uint64_t usedSize  = sdx[ii].usedSize();
    1276:	mov	r0, r4
    1278:	blx	r3
    127a:	strd	r0, r1, [sp, #16]
    127e:	b.n	114a <storage_configure()+0x196>
          { Serial.printf("SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
          }
          else
          {
            storage.addFilesystem(sdx[ii], sd_str[ii]);
            uint64_t totalSize = sdx[ii].totalSize();
    1280:	mov	r0, r4
    1282:	blx	r3
    1284:	strd	r0, r1, [sp, #8]
    1288:	ldr	r1, [r4, #0]
    128a:	b.n	1110 <storage_configure()+0x15c>
    128c:	ldr.w	r3, [r4, #1160]	; 0x488
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1290:	cmp	r3, #0
    1292:	beq.n	1318 <storage_configure()+0x364>
    1294:	ldr.w	r3, [r3, #1084]	; 0x43c
    1298:	umull	r2, r3, r7, r3
    129c:	strd	r2, r3, [sp, #16]
    12a0:	b.n	114a <storage_configure()+0x196>
    12a2:	nop
    12a4:	.word	0x1fff0980
    12a8:	.word	0x1fff14e0
    12ac:	.word	0x1fff0974
    12b0:	.word	0x00016bd0
    12b4:	.word	0x1fff0b00
    12b8:	.word	0x000174d0
    12bc:	.word	0x00016b90
    12c0:	.word	0x00000b31
    12c4:	.word	0x00000a11
    12c8:	.word	0x00016b78
    12cc:	.word	0x00016d90
    12d0:	.word	0x00016bb8
    12d4:	.word	0x01f78a40
    12d8:	.word	0x1fff1e50
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    12dc:	ldr.w	r3, [r4, #1160]	; 0x488
    12e0:	cbz	r3, 1322 <storage_configure()+0x36e>
    12e2:	ldr.w	r2, [r3, #1072]	; 0x430
    12e6:	ldr.w	r3, [r3, #1084]	; 0x43c
    12ea:	umull	r2, r3, r2, r3
    12ee:	strd	r2, r3, [sp, #8]
    12f2:	b.n	1110 <storage_configure()+0x15c>
    12f4:	ldr.w	r0, [r4, #1160]	; 0x488
    12f8:	cbz	r0, 1318 <storage_configure()+0x364>
    12fa:	ldr.w	r7, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    12fe:	bl	94a4 <ExFatPartition::freeClusterCount()>
    1302:	b.n	112c <storage_configure()+0x178>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1304:	movs	r2, #0
    1306:	movs	r3, #0
    1308:	strd	r2, r3, [sp, #16]
    130c:	b.n	1212 <storage_configure()+0x25e>
    130e:	movs	r2, #0
    1310:	movs	r3, #0
    1312:	strd	r2, r3, [sp, #8]
    1316:	b.n	11dc <storage_configure()+0x228>
    1318:	movs	r2, #0
    131a:	movs	r3, #0
    131c:	strd	r2, r3, [sp, #16]
    1320:	b.n	114a <storage_configure()+0x196>
    1322:	movs	r2, #0
    1324:	movs	r3, #0
    1326:	strd	r2, r3, [sp, #8]
    132a:	b.n	1110 <storage_configure()+0x15c>

0000132c <setup>:
      *ms10 = second() & 1 ? 100 : 0;
    }
  #endif

void setup()
{ 
    132c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1330:	ldr	r2, [pc, #524]	; (1540 <setup+0x214>)
    1332:	ldr	r1, [pc, #528]	; (1544 <setup+0x218>)
    1334:	ldr	r5, [pc, #528]	; (1548 <setup+0x21c>)
    1336:	ldr	r4, [pc, #532]	; (154c <setup+0x220>)
    1338:	sub	sp, #108	; 0x6c
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    133a:	ldrb	r3, [r2, #0]
    133c:	cmp	r3, #0
    133e:	beq.n	133a <setup+0xe>
    1340:	ldrb	r3, [r1, #0]
    1342:	lsls	r3, r3, #31
    1344:	bpl.n	133a <setup+0xe>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1346:	ldr	r3, [r5, #0]
    1348:	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    134a:	subs	r3, r3, r0
    134c:	cmp	r3, #14
    134e:	bls.n	133a <setup+0xe>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1350:	movs	r1, #8
    1352:	ldr	r0, [pc, #508]	; (1550 <setup+0x224>)
    1354:	ldr.w	r8, [pc, #556]	; 1584 <setup+0x258>
    1358:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    135c:	ldr	r0, [pc, #500]	; (1554 <setup+0x228>)
    135e:	bl	11800 <Print::println()>
    while(!Serial.available()); // comment if you do not want to wait for terminal (otherwise press any key to continue)
  #endif
  Serial.println("MTP_test");

  #if USE_EVENTS==1
    usb_init_events();
    1362:	bl	6f88 <usb_init_events>
  #endif

  #if !__has_include("usb_mtp.h")
    usb_mtp_configure();
  #endif
  storage_configure();
    1366:	bl	fb4 <storage_configure()>

  #if USE_SD==1
  // Set Time callback // needed for SDFat
  FsDateTime::callback = dateTime;
    136a:	ldr	r3, [pc, #492]	; (1558 <setup+0x22c>)
    136c:	ldr.w	r6, [r8, #1156]	; 0x484
    1370:	ldr	r2, [pc, #488]	; (155c <setup+0x230>)
    1372:	str	r2, [r3, #0]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1374:	cmp	r6, #0
    1376:	beq.w	1484 <setup+0x158>
    137a:	movs	r5, #0
    137c:	add	r4, sp, #24
    137e:	mov	r1, r6
    1380:	mov	r3, r5
    1382:	mov	r0, r4
    1384:	ldr	r2, [pc, #472]	; (1560 <setup+0x234>)
    1386:	strb.w	r5, [sp, #24]
    138a:	strb.w	r5, [sp, #25]
    138e:	strb.w	r5, [sp, #26]
    1392:	bl	af40 <FatFile::open(FatVolume*, char const*, int)>

  if(1){
    const char *str = "/test1.txt";
    if(sdx[0].exists(str)) sdx[0].remove(str);
    1396:	cmp	r0, #0
    1398:	bne.w	14aa <setup+0x17e>
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    139c:	movw	r3, #514	; 0x202
    13a0:	mov	r0, r4
    13a2:	ldr	r2, [pc, #444]	; (1560 <setup+0x234>)
    13a4:	ldr	r1, [pc, #444]	; (1564 <setup+0x238>)
    13a6:	bl	dfec <FsVolume::open(char const*, int)>
    13aa:	ldr	r3, [sp, #96]	; 0x60
    13ac:	cmp	r3, #0
    13ae:	beq.w	151e <setup+0x1f2>
		if (file) return File(new SDFile(file));
    13b2:	movs	r0, #104	; 0x68
    13b4:	bl	119ac <operator new(unsigned int)>
    13b8:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    13ba:	ldrb.w	r5, [sp, #28]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    13be:	ldr	r2, [sp, #32]
    13c0:	ldrb.w	r3, [sp, #36]	; 0x24
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    13c4:	ldr	r0, [pc, #416]	; (1568 <setup+0x23c>)
    13c6:	ldr	r1, [pc, #420]	; (156c <setup+0x240>)
    13c8:	strb	r5, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    13ca:	mov.w	r9, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    13ce:	movs	r5, #0
    13d0:	add	r7, sp, #40	; 0x28
    13d2:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    13d4:	str	r1, [r4, #20]
    13d6:	str	r2, [r4, #28]
    13d8:	strb.w	r3, [r4, #32]
    13dc:	add.w	r0, r4, #36	; 0x24
    13e0:	mov	r1, r7
    13e2:	strb	r5, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    13e4:	strb	r5, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    13e6:	str	r5, [r4, #16]
    13e8:	str.w	r9, [r4, #8]
    13ec:	bl	dda4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    13f0:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    13f2:	ldr	r2, [pc, #380]	; (1570 <setup+0x244>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    13f4:	ldr	r6, [pc, #380]	; (1574 <setup+0x248>)
    13f6:	str	r5, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    13f8:	adds	r3, #1
    13fa:	strb.w	r5, [sp, #8]
    13fe:	str.w	r9, [sp, #12]
    1402:	strb.w	r5, [sp, #16]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    1406:	str	r4, [sp, #20]
    1408:	str	r2, [r4, #20]
		if (f) f->refcount++;
    140a:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    140c:	str	r6, [sp, #4]
    140e:	ldr	r3, [pc, #360]	; (1578 <setup+0x24c>)
    1410:	str	r3, [sp, #24]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    1412:	mov	r0, r7
    1414:	bl	de1c <FsBaseFile::close()>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1418:	movs	r2, #19
    141a:	ldr	r1, [pc, #352]	; (157c <setup+0x250>)
    141c:	add	r0, sp, #4
    141e:	bl	117d4 <Print::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1422:	add	r0, sp, #4
    1424:	bl	11800 <Print::println()>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1428:	ldr	r0, [sp, #20]
    142a:	cbz	r0, 1432 <setup+0x106>
    142c:	ldr	r3, [r0, #0]
    142e:	ldr	r3, [r3, #64]	; 0x40
    1430:	blx	r3
    1432:	movs	r1, #23
    1434:	ldr	r0, [pc, #328]	; (1580 <setup+0x254>)
    1436:	bl	fe48 <usb_serial_write>
    143a:	ldr	r0, [pc, #280]	; (1554 <setup+0x228>)
    143c:	bl	11800 <Print::println()>
    1440:	ldr.w	r2, [r8, #1156]	; 0x484
    1444:	ldr	r3, [pc, #316]	; (1584 <setup+0x258>)
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr) {
    return m_fVol ? m_fVol->ls(pr) :
           m_xVol ? m_xVol->ls(pr) : false;
    1446:	cmp	r2, #0
    1448:	beq.n	14da <setup+0x1ae>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags = 0) {
    return m_vwd.ls(pr, flags);
    144a:	movs	r3, #0
    144c:	addw	r0, r2, #1092	; 0x444
    1450:	ldr	r1, [pc, #256]	; (1554 <setup+0x228>)
    1452:	mov	r2, r3
    1454:	bl	c4b4 <FatFile::ls(Print*, unsigned char, unsigned char)>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1458:	ldr	r2, [sp, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    145a:	str	r6, [sp, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    145c:	cbz	r2, 1470 <setup+0x144>
    145e:	ldr	r3, [r2, #16]
    1460:	subs	r3, #1
    1462:	str	r3, [r2, #16]
    1464:	cbnz	r3, 1470 <setup+0x144>
    1466:	ldr	r0, [sp, #20]
    1468:	cbz	r0, 1470 <setup+0x144>
    146a:	ldr	r3, [r0, #0]
    146c:	ldr	r3, [r3, #32]
    146e:	blx	r3
    1470:	movs	r1, #11
    1472:	ldr	r0, [pc, #276]	; (1588 <setup+0x25c>)
    1474:	bl	fe48 <usb_serial_write>
    1478:	ldr	r0, [pc, #216]	; (1554 <setup+0x228>)
    147a:	bl	11800 <Print::println()>
    file.close();

  #endif

  Serial.println("\nSetup done");
}
    147e:	add	sp, #108	; 0x6c
    1480:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1484:	ldr.w	r1, [r8, #1160]	; 0x488
    1488:	add	r4, sp, #24
    148a:	cmp	r1, #0
    148c:	beq.n	139c <setup+0x70>
    148e:	mov	r3, r6
    1490:	mov	r0, r4
    1492:	ldr	r2, [pc, #204]	; (1560 <setup+0x234>)
    1494:	strb.w	r6, [sp, #73]	; 0x49
    1498:	strb.w	r6, [sp, #74]	; 0x4a
    149c:	strb.w	r6, [sp, #75]	; 0x4b
    14a0:	bl	8cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
  // Set Time callback // needed for SDFat
  FsDateTime::callback = dateTime;

  if(1){
    const char *str = "/test1.txt";
    if(sdx[0].exists(str)) sdx[0].remove(str);
    14a4:	cmp	r0, #0
    14a6:	beq.w	139c <setup+0x70>
    14aa:	ldr.w	r5, [r8, #1156]	; 0x484
    14ae:	ldr	r3, [pc, #212]	; (1584 <setup+0x258>)
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    14b0:	cbz	r5, 14f0 <setup+0x1c4>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    14b2:	mov	r1, r5
    14b4:	movs	r3, #1
    14b6:	movs	r5, #0
    14b8:	ldr	r2, [pc, #164]	; (1560 <setup+0x234>)
    14ba:	strb.w	r5, [sp, #24]
    14be:	mov	r0, r4
    14c0:	strb.w	r5, [sp, #25]
    14c4:	strb.w	r5, [sp, #26]
    14c8:	bl	af40 <FatFile::open(FatVolume*, char const*, int)>
    14cc:	cmp	r0, #0
    14ce:	beq.w	139c <setup+0x70>
    14d2:	mov	r0, r4
    14d4:	bl	d384 <FatFile::remove()>
    14d8:	b.n	139c <setup+0x70>
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr) {
    return m_fVol ? m_fVol->ls(pr) :
           m_xVol ? m_xVol->ls(pr) : false;
    14da:	ldr.w	r0, [r3, #1160]	; 0x488
    14de:	cmp	r0, #0
    14e0:	beq.n	1458 <setup+0x12c>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags = 0) {
    return m_vwd.ls(pr, flags);
    14e2:	mov	r3, r2
    14e4:	ldr	r1, [pc, #108]	; (1554 <setup+0x228>)
    14e6:	add.w	r0, r0, #1096	; 0x448
    14ea:	bl	8f08 <ExFatFile::ls(Print*, unsigned char, unsigned char)>
    14ee:	b.n	1458 <setup+0x12c>
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    14f0:	ldr.w	r1, [r3, #1160]	; 0x488
    14f4:	cmp	r1, #0
    14f6:	beq.w	139c <setup+0x70>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    14fa:	movs	r3, #1
    14fc:	ldr	r2, [pc, #96]	; (1560 <setup+0x234>)
    14fe:	strb.w	r5, [sp, #73]	; 0x49
    1502:	mov	r0, r4
    1504:	strb.w	r5, [sp, #74]	; 0x4a
    1508:	strb.w	r5, [sp, #75]	; 0x4b
    150c:	bl	8cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1510:	cmp	r0, #0
    1512:	beq.w	139c <setup+0x70>
    1516:	mov	r0, r4
    1518:	bl	98d4 <ExFatFile::remove()>
    151c:	b.n	139c <setup+0x70>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    151e:	ldr	r3, [sp, #100]	; 0x64
    1520:	cmp	r3, #0
    1522:	bne.w	13b2 <setup+0x86>
    1526:	mov.w	r2, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    152a:	ldr	r6, [pc, #72]	; (1574 <setup+0x248>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    152c:	strb.w	r3, [sp, #8]
    1530:	strb.w	r3, [sp, #16]
    1534:	str	r3, [sp, #20]
    1536:	str	r2, [sp, #12]
    1538:	str	r6, [sp, #4]
    153a:	add	r7, sp, #40	; 0x28
    153c:	b.n	140e <setup+0xe2>
    153e:	nop
    1540:	.word	0x1fff25bc
    1544:	.word	0x1fff24b4
    1548:	.word	0x1fff24b8
    154c:	.word	0x1fff2634
    1550:	.word	0x00016c3c
    1554:	.word	0x1fff0b00
    1558:	.word	0x1fff2448
    155c:	.word	0x00000615
    1560:	.word	0x00016bf8
    1564:	.word	0x1fff14e4
    1568:	.word	0x00016abc
    156c:	.word	0x000169f0
    1570:	.word	0x00016a38
    1574:	.word	0x00016a5c
    1578:	.word	0x00016a14
    157c:	.word	0x00016c04
    1580:	.word	0x00016c18
    1584:	.word	0x1fff14e0
    1588:	.word	0x00016c30

0000158c <loop>:

  Serial.println("\nSetup done");
}

void loop()
{ 
    158c:	push	{r4, lr}
  mtpd.loop();
    158e:	ldr	r0, [pc, #60]	; (15cc <loop+0x40>)
    1590:	bl	6910 <MTPD::loop()>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1594:	bl	fdf4 <usb_serial_available>

#if USE_EVENTS==1
  if(Serial.available())
    1598:	cbnz	r0, 159c <loop+0x10>
    159a:	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
    159c:	bl	fd7c <usb_serial_getchar>
  {
    char ch=Serial.read();
    15a0:	uxtb	r4, r0
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    15a2:	mov	r0, r4
    15a4:	bl	ff50 <usb_serial_putchar>

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
    15a8:	ldr	r0, [pc, #36]	; (15d0 <loop+0x44>)
    15aa:	bl	11800 <Print::println()>
    Serial.println(ch);
    if(ch=='r') 
    15ae:	cmp	r4, #114	; 0x72
    15b0:	bne.n	159a <loop+0xe>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    15b2:	movs	r1, #5
    15b4:	ldr	r0, [pc, #28]	; (15d4 <loop+0x48>)
    15b6:	bl	fe48 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    15ba:	ldr	r0, [pc, #20]	; (15d0 <loop+0x44>)
    15bc:	bl	11800 <Print::println()>
    {
      Serial.println("Reset");
      mtpd.send_DeviceResetEvent();
    15c0:	ldr	r0, [pc, #8]	; (15cc <loop+0x40>)
        mtpd.send_StorageInfoChangedEvent(store);
      }
    #endif
  }
#endif
}
    15c2:	ldmia.w	sp!, {r4, lr}
    char ch=Serial.read();
    Serial.println(ch);
    if(ch=='r') 
    {
      Serial.println("Reset");
      mtpd.send_DeviceResetEvent();
    15c6:	b.w	7004 <MTPD::send_DeviceResetEvent()>
    15ca:	nop
    15cc:	.word	0x1fff1f54
    15d0:	.word	0x1fff0b00
    15d4:	.word	0x00016c48

000015d8 <_GLOBAL__sub_I__Z17usb_mtp_configurev>:
        mtpd.send_StorageInfoChangedEvent(store);
      }
    #endif
  }
#endif
}
    15d8:	push	{r3, r4, r5, r6, r7, lr}


class SDClass : public FS
{
public:
	SDClass() { }
    15da:	ldr	r3, [pc, #240]	; (16cc <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xf4>)
    15dc:	ldr	r1, [pc, #240]	; (16d0 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xf8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    15de:	ldr	r7, [pc, #244]	; (16d4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xfc>)
    const char *sd_str[]={"sd1"}; // edit to reflect your configuration
    const int cs[] = {10}; // edit to reflect your configuration
  #endif
  const int nsd = sizeof(sd_str)/sizeof(const char *);

SDClass sdx[nsd];
    15e0:	ldr	r6, [pc, #244]	; (16d8 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x100>)
    15e2:	str	r1, [r3, #0]
    15e4:	str.w	r1, [r3, #1208]	; 0x4b8
    15e8:	str.w	r7, [r3, #1172]	; 0x494
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    15ec:	ldr	r1, [pc, #236]	; (16dc <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x104>)
    15ee:	str.w	r7, [r3, #2380]	; 0x94c
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    15f2:	ldr	r7, [pc, #236]	; (16e0 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x108>)
    15f4:	str.w	r1, [r3, #1184]	; 0x4a0
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    15f8:	movs	r4, #0
    15fa:	str.w	r1, [r3, #2392]	; 0x958
    15fe:	str.w	r7, [r3, #1192]	; 0x4a8
    1602:	movs	r1, #1
    1604:	str.w	r7, [r3, #2400]	; 0x960
    1608:	movs	r7, #41	; 0x29

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    160a:	ldr	r5, [pc, #216]	; (16e4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x10c>)
    160c:	strb.w	r1, [r3, #1201]	; 0x4b1
    1610:	mov	r2, r6
    1612:	strb.w	r1, [r3, #2409]	; 0x969
    1616:	strb.w	r7, [r3, #1203]	; 0x4b3
    161a:	strb.w	r7, [r3, #2411]	; 0x96b
    161e:	str.w	r4, [r3, #1156]	; 0x484
    1622:	str.w	r4, [r3, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    1626:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    162a:	strb.w	r4, [r3, #1181]	; 0x49d
    162e:	strb.w	r4, [r3, #1206]	; 0x4b6
    1632:	str.w	r4, [r3, #2364]	; 0x93c
    1636:	str.w	r4, [r3, #2368]	; 0x940
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    163a:	strb.w	r4, [r3, #2388]	; 0x954
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    163e:	strb.w	r4, [r3, #2389]	; 0x955
    1642:	strb.w	r4, [r3, #2414]	; 0x96e
    1646:	ldr	r1, [pc, #160]	; (16e8 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x110>)
    1648:	mov	r0, r4
    164a:	bl	11a94 <__aeabi_atexit>

LittleFS_SPIFlash spifs[nfs_spi];
#endif


MTPStorage_SD storage;
    164e:	mov	r2, r6

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1650:	ldr	r6, [pc, #152]	; (16ec <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x114>)
    1652:	ldr	r3, [pc, #156]	; (16f0 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x118>)
    1654:	str	r6, [r5, #0]
    1656:	mov.w	r6, #1000	; 0x3e8
    165a:	str.w	r3, [r5, #168]	; 0xa8
    165e:	str.w	r3, [r5, #188]	; 0xbc
    1662:	str.w	r3, [r5, #208]	; 0xd0
    1666:	ldr	r1, [pc, #140]	; (16f4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x11c>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1668:	str	r4, [r5, #4]

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    166a:	mvn.w	r7, #1
    166e:	mov	r0, r5
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1670:	strb.w	r4, [r5, #172]	; 0xac
    1674:	strb.w	r4, [r5, #180]	; 0xb4
    1678:	str.w	r4, [r5, #184]	; 0xb8
    167c:	strb.w	r4, [r5, #192]	; 0xc0
    1680:	strb.w	r4, [r5, #200]	; 0xc8
    1684:	str.w	r4, [r5, #204]	; 0xcc
    1688:	strb.w	r4, [r5, #212]	; 0xd4
    168c:	strb.w	r4, [r5, #220]	; 0xdc
    1690:	str.w	r4, [r5, #224]	; 0xe0
    1694:	str.w	r6, [r5, #176]	; 0xb0
    1698:	str.w	r6, [r5, #196]	; 0xc4
    169c:	str.w	r6, [r5, #216]	; 0xd8
    16a0:	str.w	r4, [r5, #228]	; 0xe4
    16a4:	str.w	r4, [r5, #232]	; 0xe8
    16a8:	str.w	r4, [r5, #236]	; 0xec
    16ac:	str.w	r4, [r5, #244]	; 0xf4
    16b0:	strb.w	r4, [r5, #248]	; 0xf8
    16b4:	strb.w	r4, [r5, #249]	; 0xf9
    16b8:	str.w	r7, [r5, #240]	; 0xf0
    16bc:	bl	11a94 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    16c0:	ldr	r3, [pc, #52]	; (16f8 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x120>)
    16c2:	str	r5, [r3, #0]
    16c4:	str	r4, [r3, #4]
    16c6:	strb	r4, [r3, #8]
    16c8:	str	r4, [r3, #12]
    16ca:	pop	{r3, r4, r5, r6, r7, pc}
    16cc:	.word	0x1fff14e0
    16d0:	.word	0x00016b1c
    16d4:	.word	0x00017410
    16d8:	.word	0x1fff0970
    16dc:	.word	0x000173b8
    16e0:	.word	0x38011001
    16e4:	.word	0x1fff1e50
    16e8:	.word	0x000005d5
    16ec:	.word	0x00016c64
    16f0:	.word	0x00016a5c
    16f4:	.word	0x00000ee1
    16f8:	.word	0x1fff1f54

000016fc <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    16fc:	ldr	r3, [r0, #4]
    16fe:	cmp	r3, #19
    1700:	bgt.n	1714 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x18>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1702:	push	{r4}
    1704:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    1708:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    170a:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    170c:	str	r3, [r0, #4]
    170e:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1710:	ldr.w	r4, [sp], #4
    1714:	bx	lr
    1716:	nop

00001718 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1718:	ldr	r0, [r0, #4]
    171a:	bx	lr

0000171c <MTPStorage_SD::get_FSName(unsigned long)>:
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    171c:	add.w	r1, r0, r1, lsl #2
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1720:	ldr	r0, [r1, #8]
    1722:	bx	lr

00001724 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    1724:	movs	r0, #0
    1726:	bx	lr

00001728 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    1728:	movs	r0, #1
    172a:	bx	lr

0000172c <MTPStorage_SD::totalSize(unsigned long)>:
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }

    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    172c:	add.w	r1, r0, r1, lsl #2
    1730:	ldr	r0, [r1, #88]	; 0x58
    1732:	ldr	r3, [r0, #0]
    1734:	ldr	r3, [r3, #28]
    1736:	bx	r3

00001738 <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    1738:	add.w	r1, r0, r1, lsl #2
    173c:	ldr	r0, [r1, #88]	; 0x58
    173e:	ldr	r3, [r0, #0]
    1740:	ldr	r3, [r3, #24]
    1742:	bx	r3

00001744 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1744:	ldr.w	r0, [r0, #204]	; 0xcc
    1748:	cmp	r0, #0
    174a:	beq.n	17b2 <MTPStorage_SD::write(char const*, unsigned long)+0x6e>
    #endif
    return ret;
  }

  size_t MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    174c:	push	{r4, r5, r6}
    174e:	ldr	r4, [r0, #0]
    1750:	ldr	r3, [pc, #108]	; (17c0 <MTPStorage_SD::write(char const*, unsigned long)+0x7c>)
    1752:	ldr	r4, [r4, #44]	; 0x2c
    1754:	cmp	r4, r3
    1756:	bne.n	17ac <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1758:	ldr	r0, [r0, #16]
    175a:	cbz	r0, 17a6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    175c:	ldr	r4, [r0, #0]
    175e:	ldr	r4, [r4, #44]	; 0x2c
    1760:	cmp	r4, r3
    1762:	bne.n	17ac <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1764:	ldr	r0, [r0, #16]
    1766:	cbz	r0, 17a6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1768:	ldr	r4, [r0, #0]
    176a:	ldr	r4, [r4, #44]	; 0x2c
    176c:	cmp	r4, r3
    176e:	bne.n	17ac <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1770:	ldr	r0, [r0, #16]
    1772:	cbz	r0, 17a6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1774:	ldr	r4, [r0, #0]
    1776:	ldr	r4, [r4, #44]	; 0x2c
    1778:	cmp	r4, r3
    177a:	bne.n	17ac <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    177c:	ldr	r0, [r0, #16]
    177e:	cbz	r0, 17a6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1780:	mov	r6, r2
    1782:	ldr	r2, [r0, #0]
    1784:	ldr	r4, [r2, #44]	; 0x2c
    1786:	cmp	r4, r3
    1788:	mov	r5, r1
    178a:	bne.n	17b6 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    178c:	ldr	r0, [r0, #16]
    178e:	cbz	r0, 17a6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1790:	ldr	r2, [r0, #0]
    1792:	ldr	r4, [r2, #44]	; 0x2c
    1794:	cmp	r4, r3
    1796:	bne.n	17b6 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1798:	ldr	r0, [r0, #16]
    179a:	cbz	r0, 17a6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    179c:	ldr	r3, [r0, #0]
    179e:	mov	r2, r6
    17a0:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    17a2:	pop	{r4, r5, r6}
    17a4:	bx	r3
    17a6:	movs	r0, #0
    17a8:	pop	{r4, r5, r6}
    17aa:	bx	lr
    17ac:	mov	r3, r4
    17ae:	pop	{r4, r5, r6}
    17b0:	bx	r3
    17b2:	movs	r0, #0
    17b4:	bx	lr
    17b6:	mov	r2, r6
    17b8:	mov	r1, r5
    17ba:	mov	r3, r4
    17bc:	pop	{r4, r5, r6}
    17be:	bx	r3
    17c0:	.word	0x00000489

000017c4 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    17c4:	ldr.w	r3, [r0, #184]	; 0xb8
    17c8:	cmp	r3, #0
    17ca:	beq.n	1834 <MTPStorage_SD::ResetIndex()+0x70>
    17cc:	ldr	r2, [r3, #0]
    17ce:	ldr	r1, [pc, #108]	; (183c <MTPStorage_SD::ResetIndex()+0x78>)
    17d0:	ldr	r2, [r2, #68]	; 0x44
    17d2:	cmp	r2, r1
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    17d4:	push	{r4, lr}
    17d6:	mov	r4, r0
    17d8:	bne.n	182e <MTPStorage_SD::ResetIndex()+0x6a>
    17da:	ldr	r0, [r3, #16]
    17dc:	cbz	r0, 182c <MTPStorage_SD::ResetIndex()+0x68>
    17de:	ldr	r3, [r0, #0]
    17e0:	ldr	r3, [r3, #68]	; 0x44
    17e2:	cmp	r3, r2
    17e4:	bne.n	1836 <MTPStorage_SD::ResetIndex()+0x72>
    17e6:	ldr	r0, [r0, #16]
    17e8:	cbz	r0, 182c <MTPStorage_SD::ResetIndex()+0x68>
    17ea:	ldr	r2, [r0, #0]
    17ec:	ldr	r2, [r2, #68]	; 0x44
    17ee:	cmp	r2, r3
    17f0:	bne.n	1830 <MTPStorage_SD::ResetIndex()+0x6c>
    17f2:	ldr	r0, [r0, #16]
    17f4:	cbz	r0, 182c <MTPStorage_SD::ResetIndex()+0x68>
    17f6:	ldr	r3, [r0, #0]
    17f8:	ldr	r3, [r3, #68]	; 0x44
    17fa:	cmp	r3, r2
    17fc:	bne.n	1836 <MTPStorage_SD::ResetIndex()+0x72>
    17fe:	ldr	r0, [r0, #16]
    1800:	cbz	r0, 182c <MTPStorage_SD::ResetIndex()+0x68>
    1802:	ldr	r2, [r0, #0]
    1804:	ldr	r2, [r2, #68]	; 0x44
    1806:	cmp	r2, r3
    1808:	bne.n	1830 <MTPStorage_SD::ResetIndex()+0x6c>
    180a:	ldr	r0, [r0, #16]
    180c:	cbz	r0, 182c <MTPStorage_SD::ResetIndex()+0x68>
    180e:	ldr	r3, [r0, #0]
    1810:	ldr	r3, [r3, #68]	; 0x44
    1812:	blx	r3
    if(!sd_isOpen(index_)) return;
    1814:	cbz	r0, 182c <MTPStorage_SD::ResetIndex()+0x68>
    CloseIndex();
    1816:	ldr	r3, [r4, #0]
    1818:	mov	r0, r4
    181a:	ldr	r3, [r3, #64]	; 0x40
    181c:	blx	r3
//    OpenIndex();

    all_scanned_ = false;
    181e:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1820:	mvn.w	r3, #1
  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    CloseIndex();
//    OpenIndex();

    all_scanned_ = false;
    1824:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    1828:	str.w	r3, [r4, #240]	; 0xf0
    182c:	pop	{r4, pc}
    182e:	mov	r0, r3
    1830:	blx	r2
    1832:	b.n	1814 <MTPStorage_SD::ResetIndex()+0x50>
    1834:	bx	lr
    1836:	blx	r3
    1838:	b.n	1814 <MTPStorage_SD::ResetIndex()+0x50>
    183a:	nop
    183c:	.word	0x0000050d

00001840 <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    1840:	push	{r4, lr}
    1842:	mov	r4, r0
    1844:	ldr.w	r0, [r0, #184]	; 0xb8
    1848:	cmp	r0, #0
    184a:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    184c:	ldr	r3, [r0, #0]
    184e:	ldr	r2, [pc, #256]	; (1950 <MTPStorage_SD::CloseIndex()+0x110>)
    1850:	ldr	r3, [r3, #68]	; 0x44
    1852:	cmp	r3, r2
    1854:	bne.n	1938 <MTPStorage_SD::CloseIndex()+0xf8>
    1856:	ldr	r0, [r0, #16]
    1858:	cmp	r0, #0
    185a:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    185c:	ldr	r2, [r0, #0]
    185e:	ldr	r2, [r2, #68]	; 0x44
    1860:	cmp	r2, r3
    1862:	bne.n	194a <MTPStorage_SD::CloseIndex()+0x10a>
    1864:	ldr	r0, [r0, #16]
    1866:	cmp	r0, #0
    1868:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    186a:	ldr	r3, [r0, #0]
    186c:	ldr	r3, [r3, #68]	; 0x44
    186e:	cmp	r3, r2
    1870:	bne.n	1938 <MTPStorage_SD::CloseIndex()+0xf8>
    1872:	ldr	r0, [r0, #16]
    1874:	cmp	r0, #0
    1876:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    1878:	ldr	r2, [r0, #0]
    187a:	ldr	r2, [r2, #68]	; 0x44
    187c:	cmp	r2, r3
    187e:	bne.n	194a <MTPStorage_SD::CloseIndex()+0x10a>
    1880:	ldr	r0, [r0, #16]
    1882:	cmp	r0, #0
    1884:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    1886:	ldr	r3, [r0, #0]
    1888:	ldr	r3, [r3, #68]	; 0x44
    188a:	cmp	r3, r2
    188c:	bne.n	1938 <MTPStorage_SD::CloseIndex()+0xf8>
    188e:	ldr	r0, [r0, #16]
    1890:	cmp	r0, #0
    1892:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    1894:	ldr	r3, [r0, #0]
    1896:	ldr	r3, [r3, #68]	; 0x44
    1898:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    189a:	cmp	r0, #0
    189c:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    189e:	ldr.w	r0, [r4, #184]	; 0xb8
    18a2:	cmp	r0, #0
    18a4:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    18a6:	ldr	r2, [r0, #0]
    18a8:	ldr	r3, [pc, #168]	; (1954 <MTPStorage_SD::CloseIndex()+0x114>)
    18aa:	ldr	r2, [r2, #64]	; 0x40
    18ac:	cmp	r2, r3
    18ae:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    18b0:	ldr	r0, [r0, #16]
    18b2:	cmp	r0, #0
    18b4:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    18b6:	ldr	r2, [r0, #0]
    18b8:	ldr	r2, [r2, #64]	; 0x40
    18ba:	cmp	r2, r3
    18bc:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    18be:	ldr	r0, [r0, #16]
    18c0:	cmp	r0, #0
    18c2:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    18c4:	ldr	r2, [r0, #0]
    18c6:	ldr	r2, [r2, #64]	; 0x40
    18c8:	cmp	r2, r3
    18ca:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    18cc:	ldr	r0, [r0, #16]
    18ce:	cmp	r0, #0
    18d0:	beq.n	192c <MTPStorage_SD::CloseIndex()+0xec>
    18d2:	ldr	r2, [r0, #0]
    18d4:	ldr	r2, [r2, #64]	; 0x40
    18d6:	cmp	r2, r3
    18d8:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    18da:	ldr	r0, [r0, #16]
    18dc:	cbz	r0, 192c <MTPStorage_SD::CloseIndex()+0xec>
    18de:	ldr	r2, [r0, #0]
    18e0:	ldr	r2, [r2, #64]	; 0x40
    18e2:	cmp	r2, r3
    18e4:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    18e6:	ldr	r0, [r0, #16]
    18e8:	cbz	r0, 192c <MTPStorage_SD::CloseIndex()+0xec>
    18ea:	ldr	r2, [r0, #0]
    18ec:	ldr	r2, [r2, #64]	; 0x40
    18ee:	cmp	r2, r3
    18f0:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    18f2:	ldr	r0, [r0, #16]
    18f4:	cbz	r0, 192c <MTPStorage_SD::CloseIndex()+0xec>
    18f6:	ldr	r2, [r0, #0]
    18f8:	ldr	r2, [r2, #64]	; 0x40
    18fa:	cmp	r2, r3
    18fc:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    18fe:	ldr	r0, [r0, #16]
    1900:	cbz	r0, 192c <MTPStorage_SD::CloseIndex()+0xec>
    1902:	ldr	r2, [r0, #0]
    1904:	ldr	r2, [r2, #64]	; 0x40
    1906:	cmp	r2, r3
    1908:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    190a:	ldr	r0, [r0, #16]
    190c:	cbz	r0, 192c <MTPStorage_SD::CloseIndex()+0xec>
    190e:	ldr	r2, [r0, #0]
    1910:	ldr	r2, [r2, #64]	; 0x40
    1912:	cmp	r2, r3
    1914:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    1916:	ldr	r0, [r0, #16]
    1918:	cbz	r0, 192c <MTPStorage_SD::CloseIndex()+0xec>
    191a:	ldr	r2, [r0, #0]
    191c:	ldr	r2, [r2, #64]	; 0x40
    191e:	cmp	r2, r3
    1920:	bne.n	193c <MTPStorage_SD::CloseIndex()+0xfc>
    1922:	ldr	r0, [r0, #16]
    1924:	cbz	r0, 192c <MTPStorage_SD::CloseIndex()+0xec>
    1926:	ldr	r3, [r0, #0]
    1928:	ldr	r3, [r3, #64]	; 0x40
    192a:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    192c:	movs	r3, #0
    192e:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    1932:	str.w	r3, [r4, #244]	; 0xf4
    1936:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1938:	blx	r3
    193a:	b.n	189a <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    193c:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    193e:	movs	r3, #0
    1940:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    1944:	str.w	r3, [r4, #244]	; 0xf4
    1948:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    194a:	blx	r2
    194c:	b.n	189a <MTPStorage_SD::CloseIndex()+0x5a>
    194e:	nop
    1950:	.word	0x0000050d
    1954:	.word	0x00000501

00001958 <File::invalidate() [clone .isra.1]>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1958:	ldr	r2, [r0, #0]
    195a:	cmp	r2, #0
    195c:	beq.n	19d8 <File::invalidate() [clone .isra.1]+0x80>
    195e:	ldr	r3, [r2, #16]
    1960:	subs	r3, #1
    1962:	str	r3, [r2, #16]
    1964:	cmp	r3, #0
    1966:	bne.n	19d8 <File::invalidate() [clone .isra.1]+0x80>
	}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
    1968:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (f && --(f->refcount) == 0) delete f;
    196c:	ldr	r4, [r0, #0]
    196e:	cmp	r4, #0
    1970:	beq.n	19da <File::invalidate() [clone .isra.1]+0x82>
    1972:	ldr	r3, [r4, #0]
    1974:	ldr	r1, [pc, #120]	; (19f0 <File::invalidate() [clone .isra.1]+0x98>)
    1976:	ldr	r3, [r3, #32]
    1978:	cmp	r3, r1
    197a:	bne.n	19de <File::invalidate() [clone .isra.1]+0x86>
    197c:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    197e:	ldr	r6, [pc, #116]	; (19f4 <File::invalidate() [clone .isra.1]+0x9c>)
    1980:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1982:	cbz	r2, 19cc <File::invalidate() [clone .isra.1]+0x74>
    1984:	ldr	r3, [r2, #16]
    1986:	subs	r3, #1
    1988:	str	r3, [r2, #16]
    198a:	cbnz	r3, 19cc <File::invalidate() [clone .isra.1]+0x74>
    198c:	ldr	r5, [r4, #16]
    198e:	cbz	r5, 19cc <File::invalidate() [clone .isra.1]+0x74>
    1990:	ldr	r3, [r5, #0]
    1992:	ldr	r3, [r3, #32]
    1994:	cmp	r3, r1
    1996:	bne.n	19e6 <File::invalidate() [clone .isra.1]+0x8e>
    1998:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    199a:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    199c:	cbz	r2, 19c4 <File::invalidate() [clone .isra.1]+0x6c>
    199e:	ldr	r3, [r2, #16]
    19a0:	subs	r3, #1
    19a2:	str	r3, [r2, #16]
    19a4:	cbnz	r3, 19c4 <File::invalidate() [clone .isra.1]+0x6c>
    19a6:	ldr	r7, [r5, #16]
    19a8:	cbz	r7, 19c4 <File::invalidate() [clone .isra.1]+0x6c>
    19aa:	ldr	r3, [r7, #0]
    19ac:	ldr	r3, [r3, #32]
    19ae:	cmp	r3, r1
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    19b0:	mov	r0, r7
    19b2:	bne.n	19ec <File::invalidate() [clone .isra.1]+0x94>
    19b4:	str.w	r6, [r0], #16
		invalidate();
    19b8:	bl	1958 <File::invalidate() [clone .isra.1]>
	}
    19bc:	mov	r0, r7
    19be:	movs	r1, #20
    19c0:	bl	119b0 <operator delete(void*, unsigned int)>
    19c4:	mov	r0, r5
    19c6:	movs	r1, #20
    19c8:	bl	119b0 <operator delete(void*, unsigned int)>
    19cc:	mov	r0, r4
    19ce:	movs	r1, #20
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
	}
    19d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    19d4:	b.w	119b0 <operator delete(void*, unsigned int)>
    19d8:	bx	lr
    19da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    19de:	mov	r0, r4
	}
    19e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    19e4:	bx	r3
    19e6:	mov	r0, r5
    19e8:	blx	r3
    19ea:	b.n	19cc <File::invalidate() [clone .isra.1]+0x74>
    19ec:	blx	r3
    19ee:	b.n	19c4 <File::invalidate() [clone .isra.1]+0x6c>
    19f0:	.word	0x00000eb1
    19f4:	.word	0x00016a5c

000019f8 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    19f8:	bx	lr
    19fa:	nop

000019fc <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    19fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a00:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1a02:	ldr.w	r0, [r0, #184]	; 0xb8
    1a06:	sub	sp, #28
    1a08:	cbz	r0, 1a5c <MTPStorage_SD::OpenIndex()+0x60>
    1a0a:	ldr	r3, [r0, #0]
    1a0c:	ldr	r2, [pc, #536]	; (1c28 <MTPStorage_SD::OpenIndex()+0x22c>)
    1a0e:	ldr	r3, [r3, #68]	; 0x44
    1a10:	cmp	r3, r2
    1a12:	bne.w	1d2c <MTPStorage_SD::OpenIndex()+0x330>
    1a16:	ldr	r0, [r0, #16]
    1a18:	cbz	r0, 1a5c <MTPStorage_SD::OpenIndex()+0x60>
    1a1a:	ldr	r2, [r0, #0]
    1a1c:	ldr	r2, [r2, #68]	; 0x44
    1a1e:	cmp	r2, r3
    1a20:	bne.w	1d40 <MTPStorage_SD::OpenIndex()+0x344>
    1a24:	ldr	r0, [r0, #16]
    1a26:	cbz	r0, 1a5c <MTPStorage_SD::OpenIndex()+0x60>
    1a28:	ldr	r3, [r0, #0]
    1a2a:	ldr	r3, [r3, #68]	; 0x44
    1a2c:	cmp	r3, r2
    1a2e:	bne.w	1d2c <MTPStorage_SD::OpenIndex()+0x330>
    1a32:	ldr	r0, [r0, #16]
    1a34:	cbz	r0, 1a5c <MTPStorage_SD::OpenIndex()+0x60>
    1a36:	ldr	r2, [r0, #0]
    1a38:	ldr	r2, [r2, #68]	; 0x44
    1a3a:	cmp	r2, r3
    1a3c:	bne.w	1d40 <MTPStorage_SD::OpenIndex()+0x344>
    1a40:	ldr	r0, [r0, #16]
    1a42:	cbz	r0, 1a5c <MTPStorage_SD::OpenIndex()+0x60>
    1a44:	ldr	r3, [r0, #0]
    1a46:	ldr	r3, [r3, #68]	; 0x44
    1a48:	cmp	r3, r2
    1a4a:	bne.w	1d2c <MTPStorage_SD::OpenIndex()+0x330>
    1a4e:	ldr	r0, [r0, #16]
    1a50:	cbz	r0, 1a5c <MTPStorage_SD::OpenIndex()+0x60>
    1a52:	ldr	r3, [r0, #0]
    1a54:	ldr	r3, [r3, #68]	; 0x44
    1a56:	blx	r3
    1a58:	cmp	r0, #0
    1a5a:	bne.n	1b30 <MTPStorage_SD::OpenIndex()+0x134>
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    1a5c:	ldr	r1, [r4, #88]	; 0x58
    1a5e:	ldr	r2, [pc, #460]	; (1c2c <MTPStorage_SD::OpenIndex()+0x230>)
    1a60:	ldr	r3, [r1, #0]
    1a62:	add	r0, sp, #4
    1a64:	ldr	r5, [r3, #0]
    1a66:	movs	r3, #2
    1a68:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1a6a:	ldr.w	r3, [r4, #184]	; 0xb8
    1a6e:	cbz	r3, 1a7c <MTPStorage_SD::OpenIndex()+0x80>
    1a70:	ldr	r2, [r3, #16]
    1a72:	subs	r2, #1
    1a74:	str	r2, [r3, #16]
    1a76:	cmp	r2, #0
    1a78:	beq.w	1c40 <MTPStorage_SD::OpenIndex()+0x244>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1a7c:	ldr	r3, [sp, #20]
    1a7e:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    1a82:	cbz	r3, 1a9c <MTPStorage_SD::OpenIndex()+0xa0>
    1a84:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    1a86:	ldr	r1, [pc, #424]	; (1c30 <MTPStorage_SD::OpenIndex()+0x234>)
    1a88:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1a8a:	adds	r2, #1
    1a8c:	str	r2, [r3, #16]
    1a8e:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1a90:	cbz	r2, 1a9c <MTPStorage_SD::OpenIndex()+0xa0>
    1a92:	ldr	r3, [r2, #16]
    1a94:	subs	r3, #1
    1a96:	str	r3, [r2, #16]
    1a98:	cmp	r3, #0
    1a9a:	beq.n	1b36 <MTPStorage_SD::OpenIndex()+0x13a>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1a9c:	ldr.w	r0, [r4, #184]	; 0xb8
    1aa0:	cmp	r0, #0
    1aa2:	beq.n	1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1aa4:	ldr	r2, [r0, #0]
    1aa6:	ldr	r3, [pc, #384]	; (1c28 <MTPStorage_SD::OpenIndex()+0x22c>)
    1aa8:	ldr	r2, [r2, #68]	; 0x44
    1aaa:	cmp	r2, r3
    1aac:	bne.w	1d36 <MTPStorage_SD::OpenIndex()+0x33a>
    1ab0:	ldr	r0, [r0, #16]
    1ab2:	cmp	r0, #0
    1ab4:	beq.n	1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1ab6:	ldr	r2, [r0, #0]
    1ab8:	ldr	r2, [r2, #68]	; 0x44
    1aba:	cmp	r2, r3
    1abc:	bne.w	1d36 <MTPStorage_SD::OpenIndex()+0x33a>
    1ac0:	ldr	r0, [r0, #16]
    1ac2:	cmp	r0, #0
    1ac4:	beq.n	1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1ac6:	ldr	r2, [r0, #0]
    1ac8:	ldr	r2, [r2, #68]	; 0x44
    1aca:	cmp	r2, r3
    1acc:	bne.w	1d36 <MTPStorage_SD::OpenIndex()+0x33a>
    1ad0:	ldr	r0, [r0, #16]
    1ad2:	cbz	r0, 1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1ad4:	ldr	r2, [r0, #0]
    1ad6:	ldr	r2, [r2, #68]	; 0x44
    1ad8:	cmp	r2, r3
    1ada:	bne.w	1d36 <MTPStorage_SD::OpenIndex()+0x33a>
    1ade:	ldr	r0, [r0, #16]
    1ae0:	cbz	r0, 1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1ae2:	ldr	r2, [r0, #0]
    1ae4:	ldr	r2, [r2, #68]	; 0x44
    1ae6:	cmp	r2, r3
    1ae8:	bne.w	1d36 <MTPStorage_SD::OpenIndex()+0x33a>
    1aec:	ldr	r0, [r0, #16]
    1aee:	cbz	r0, 1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1af0:	ldr	r2, [r0, #0]
    1af2:	ldr	r2, [r2, #68]	; 0x44
    1af4:	cmp	r2, r3
    1af6:	bne.w	1d36 <MTPStorage_SD::OpenIndex()+0x33a>
    1afa:	ldr	r0, [r0, #16]
    1afc:	cbz	r0, 1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1afe:	ldr	r2, [r0, #0]
    1b00:	ldr	r2, [r2, #68]	; 0x44
    1b02:	cmp	r2, r3
    1b04:	bne.w	1d36 <MTPStorage_SD::OpenIndex()+0x33a>
    1b08:	ldr	r0, [r0, #16]
    1b0a:	cbz	r0, 1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1b0c:	ldr	r2, [r0, #0]
    1b0e:	ldr	r2, [r2, #68]	; 0x44
    1b10:	cmp	r2, r3
    1b12:	bne.w	1d36 <MTPStorage_SD::OpenIndex()+0x33a>
    1b16:	ldr	r0, [r0, #16]
    1b18:	cbz	r0, 1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1b1a:	ldr	r3, [r0, #0]
    1b1c:	ldr	r3, [r3, #68]	; 0x44
    1b1e:	blx	r3
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    1b20:	cbnz	r0, 1b30 <MTPStorage_SD::OpenIndex()+0x134>
    1b22:	movs	r1, #22
    1b24:	ldr	r0, [pc, #268]	; (1c34 <MTPStorage_SD::OpenIndex()+0x238>)
    1b26:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1b2a:	ldr	r0, [pc, #268]	; (1c38 <MTPStorage_SD::OpenIndex()+0x23c>)
    1b2c:	bl	11800 <Print::println()>
    mtp_lock_storage(false);
  }
    1b30:	add	sp, #28
    1b32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1b36:	ldr	r5, [sp, #20]
    1b38:	cmp	r5, #0
    1b3a:	beq.n	1a9c <MTPStorage_SD::OpenIndex()+0xa0>
    1b3c:	ldr	r2, [r5, #0]
    1b3e:	ldr	r3, [pc, #252]	; (1c3c <MTPStorage_SD::OpenIndex()+0x240>)
    1b40:	ldr	r2, [r2, #32]
    1b42:	cmp	r2, r3
    1b44:	bne.w	1d50 <MTPStorage_SD::OpenIndex()+0x354>
    1b48:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1b4a:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1b4c:	cmp	r0, #0
    1b4e:	beq.n	1c1e <MTPStorage_SD::OpenIndex()+0x222>
    1b50:	ldr	r2, [r0, #16]
    1b52:	subs	r2, #1
    1b54:	str	r2, [r0, #16]
    1b56:	cmp	r2, #0
    1b58:	bne.n	1c1e <MTPStorage_SD::OpenIndex()+0x222>
    1b5a:	ldr	r6, [r5, #16]
    1b5c:	cmp	r6, #0
    1b5e:	beq.n	1c1e <MTPStorage_SD::OpenIndex()+0x222>
    1b60:	ldr	r2, [r6, #0]
    1b62:	ldr	r2, [r2, #32]
    1b64:	cmp	r2, r3
    1b66:	bne.w	1d56 <MTPStorage_SD::OpenIndex()+0x35a>
    1b6a:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1b6c:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1b6e:	cmp	r0, #0
    1b70:	beq.n	1c16 <MTPStorage_SD::OpenIndex()+0x21a>
    1b72:	ldr	r2, [r0, #16]
    1b74:	subs	r2, #1
    1b76:	str	r2, [r0, #16]
    1b78:	cmp	r2, #0
    1b7a:	bne.n	1c16 <MTPStorage_SD::OpenIndex()+0x21a>
    1b7c:	ldr	r7, [r6, #16]
    1b7e:	cmp	r7, #0
    1b80:	beq.n	1c16 <MTPStorage_SD::OpenIndex()+0x21a>
    1b82:	ldr	r2, [r7, #0]
    1b84:	ldr	r2, [r2, #32]
    1b86:	cmp	r2, r3
    1b88:	bne.w	1d68 <MTPStorage_SD::OpenIndex()+0x36c>
    1b8c:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1b8e:	str	r1, [r7, #0]
    1b90:	ldr.w	lr, [pc, #156]	; 1c30 <MTPStorage_SD::OpenIndex()+0x234>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1b94:	cmp	r0, #0
    1b96:	beq.n	1c0e <MTPStorage_SD::OpenIndex()+0x212>
    1b98:	ldr	r2, [r0, #16]
    1b9a:	subs	r2, #1
    1b9c:	str	r2, [r0, #16]
    1b9e:	cmp	r2, #0
    1ba0:	bne.n	1c0e <MTPStorage_SD::OpenIndex()+0x212>
    1ba2:	ldr.w	r8, [r7, #16]
    1ba6:	cmp.w	r8, #0
    1baa:	beq.n	1c0e <MTPStorage_SD::OpenIndex()+0x212>
    1bac:	ldr.w	r2, [r8]
    1bb0:	ldr	r2, [r2, #32]
    1bb2:	cmp	r2, r3
    1bb4:	bne.w	1d74 <MTPStorage_SD::OpenIndex()+0x378>
    1bb8:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1bbc:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1bc0:	cbz	r0, 1c06 <MTPStorage_SD::OpenIndex()+0x20a>
    1bc2:	ldr	r2, [r0, #16]
    1bc4:	subs	r2, #1
    1bc6:	str	r2, [r0, #16]
    1bc8:	cbnz	r2, 1c06 <MTPStorage_SD::OpenIndex()+0x20a>
    1bca:	ldr.w	r9, [r8, #16]
    1bce:	cmp.w	r9, #0
    1bd2:	beq.n	1c06 <MTPStorage_SD::OpenIndex()+0x20a>
    1bd4:	ldr.w	r2, [r9]
    1bd8:	ldr	r2, [r2, #32]
    1bda:	cmp	r2, r3
    1bdc:	bne.w	1d80 <MTPStorage_SD::OpenIndex()+0x384>
    1be0:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1be4:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1be8:	cbz	r2, 1bfe <MTPStorage_SD::OpenIndex()+0x202>
    1bea:	ldr	r3, [r2, #16]
    1bec:	subs	r3, #1
    1bee:	str	r3, [r2, #16]
    1bf0:	cbnz	r3, 1bfe <MTPStorage_SD::OpenIndex()+0x202>
    1bf2:	ldr.w	r0, [r9, #16]
    1bf6:	cbz	r0, 1bfe <MTPStorage_SD::OpenIndex()+0x202>
    1bf8:	ldr	r3, [r0, #0]
    1bfa:	ldr	r3, [r3, #32]
    1bfc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1bfe:	mov	r0, r9
    1c00:	movs	r1, #20
    1c02:	bl	119b0 <operator delete(void*, unsigned int)>
    1c06:	mov	r0, r8
    1c08:	movs	r1, #20
    1c0a:	bl	119b0 <operator delete(void*, unsigned int)>
    1c0e:	mov	r0, r7
    1c10:	movs	r1, #20
    1c12:	bl	119b0 <operator delete(void*, unsigned int)>
    1c16:	mov	r0, r6
    1c18:	movs	r1, #20
    1c1a:	bl	119b0 <operator delete(void*, unsigned int)>
    1c1e:	mov	r0, r5
    1c20:	movs	r1, #20
    1c22:	bl	119b0 <operator delete(void*, unsigned int)>
    1c26:	b.n	1a9c <MTPStorage_SD::OpenIndex()+0xa0>
    1c28:	.word	0x0000050d
    1c2c:	.word	0x00016cbc
    1c30:	.word	0x00016a5c
    1c34:	.word	0x00016ccc
    1c38:	.word	0x1fff0b00
    1c3c:	.word	0x00000eb1
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c40:	ldr.w	r5, [r4, #184]	; 0xb8
    1c44:	cmp	r5, #0
    1c46:	beq.w	1a7c <MTPStorage_SD::OpenIndex()+0x80>
    1c4a:	ldr	r2, [r5, #0]
    1c4c:	ldr	r3, [pc, #312]	; (1d88 <MTPStorage_SD::OpenIndex()+0x38c>)
    1c4e:	ldr	r2, [r2, #32]
    1c50:	cmp	r2, r3
    1c52:	bne.n	1d4a <MTPStorage_SD::OpenIndex()+0x34e>
    1c54:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1c56:	ldr	r1, [pc, #308]	; (1d8c <MTPStorage_SD::OpenIndex()+0x390>)
    1c58:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c5a:	cmp	r0, #0
    1c5c:	beq.n	1d22 <MTPStorage_SD::OpenIndex()+0x326>
    1c5e:	ldr	r2, [r0, #16]
    1c60:	subs	r2, #1
    1c62:	str	r2, [r0, #16]
    1c64:	cmp	r2, #0
    1c66:	bne.n	1d22 <MTPStorage_SD::OpenIndex()+0x326>
    1c68:	ldr	r6, [r5, #16]
    1c6a:	cmp	r6, #0
    1c6c:	beq.n	1d22 <MTPStorage_SD::OpenIndex()+0x326>
    1c6e:	ldr	r2, [r6, #0]
    1c70:	ldr	r2, [r2, #32]
    1c72:	cmp	r2, r3
    1c74:	bne.n	1d5c <MTPStorage_SD::OpenIndex()+0x360>
    1c76:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1c78:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c7a:	cmp	r0, #0
    1c7c:	beq.n	1d1a <MTPStorage_SD::OpenIndex()+0x31e>
    1c7e:	ldr	r2, [r0, #16]
    1c80:	subs	r2, #1
    1c82:	str	r2, [r0, #16]
    1c84:	cmp	r2, #0
    1c86:	bne.n	1d1a <MTPStorage_SD::OpenIndex()+0x31e>
    1c88:	ldr	r7, [r6, #16]
    1c8a:	cmp	r7, #0
    1c8c:	beq.n	1d1a <MTPStorage_SD::OpenIndex()+0x31e>
    1c8e:	ldr	r2, [r7, #0]
    1c90:	ldr	r2, [r2, #32]
    1c92:	cmp	r2, r3
    1c94:	bne.n	1d62 <MTPStorage_SD::OpenIndex()+0x366>
    1c96:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1c98:	str	r1, [r7, #0]
    1c9a:	ldr.w	lr, [pc, #240]	; 1d8c <MTPStorage_SD::OpenIndex()+0x390>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c9e:	cmp	r0, #0
    1ca0:	beq.n	1d12 <MTPStorage_SD::OpenIndex()+0x316>
    1ca2:	ldr	r2, [r0, #16]
    1ca4:	subs	r2, #1
    1ca6:	str	r2, [r0, #16]
    1ca8:	cbnz	r2, 1d12 <MTPStorage_SD::OpenIndex()+0x316>
    1caa:	ldr.w	r8, [r7, #16]
    1cae:	cmp.w	r8, #0
    1cb2:	beq.n	1d12 <MTPStorage_SD::OpenIndex()+0x316>
    1cb4:	ldr.w	r2, [r8]
    1cb8:	ldr	r2, [r2, #32]
    1cba:	cmp	r2, r3
    1cbc:	bne.n	1d6e <MTPStorage_SD::OpenIndex()+0x372>
    1cbe:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1cc2:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1cc6:	cbz	r0, 1d0a <MTPStorage_SD::OpenIndex()+0x30e>
    1cc8:	ldr	r2, [r0, #16]
    1cca:	subs	r2, #1
    1ccc:	str	r2, [r0, #16]
    1cce:	cbnz	r2, 1d0a <MTPStorage_SD::OpenIndex()+0x30e>
    1cd0:	ldr.w	r9, [r8, #16]
    1cd4:	cmp.w	r9, #0
    1cd8:	beq.n	1d0a <MTPStorage_SD::OpenIndex()+0x30e>
    1cda:	ldr.w	r2, [r9]
    1cde:	ldr	r2, [r2, #32]
    1ce0:	cmp	r2, r3
    1ce2:	bne.n	1d7a <MTPStorage_SD::OpenIndex()+0x37e>
    1ce4:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1ce8:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1cec:	cbz	r2, 1d02 <MTPStorage_SD::OpenIndex()+0x306>
    1cee:	ldr	r3, [r2, #16]
    1cf0:	subs	r3, #1
    1cf2:	str	r3, [r2, #16]
    1cf4:	cbnz	r3, 1d02 <MTPStorage_SD::OpenIndex()+0x306>
    1cf6:	ldr.w	r0, [r9, #16]
    1cfa:	cbz	r0, 1d02 <MTPStorage_SD::OpenIndex()+0x306>
    1cfc:	ldr	r3, [r0, #0]
    1cfe:	ldr	r3, [r3, #32]
    1d00:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1d02:	mov	r0, r9
    1d04:	movs	r1, #20
    1d06:	bl	119b0 <operator delete(void*, unsigned int)>
    1d0a:	mov	r0, r8
    1d0c:	movs	r1, #20
    1d0e:	bl	119b0 <operator delete(void*, unsigned int)>
    1d12:	mov	r0, r7
    1d14:	movs	r1, #20
    1d16:	bl	119b0 <operator delete(void*, unsigned int)>
    1d1a:	mov	r0, r6
    1d1c:	movs	r1, #20
    1d1e:	bl	119b0 <operator delete(void*, unsigned int)>
    1d22:	mov	r0, r5
    1d24:	movs	r1, #20
    1d26:	bl	119b0 <operator delete(void*, unsigned int)>
    1d2a:	b.n	1a7c <MTPStorage_SD::OpenIndex()+0x80>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1d2c:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1d2e:	cmp	r0, #0
    1d30:	bne.w	1b30 <MTPStorage_SD::OpenIndex()+0x134>
    1d34:	b.n	1a5c <MTPStorage_SD::OpenIndex()+0x60>
    1d36:	blx	r2
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    1d38:	cmp	r0, #0
    1d3a:	bne.w	1b30 <MTPStorage_SD::OpenIndex()+0x134>
    1d3e:	b.n	1b22 <MTPStorage_SD::OpenIndex()+0x126>
    1d40:	blx	r2
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1d42:	cmp	r0, #0
    1d44:	bne.w	1b30 <MTPStorage_SD::OpenIndex()+0x134>
    1d48:	b.n	1a5c <MTPStorage_SD::OpenIndex()+0x60>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1d4a:	mov	r0, r5
    1d4c:	blx	r2
    1d4e:	b.n	1a7c <MTPStorage_SD::OpenIndex()+0x80>
    1d50:	mov	r0, r5
    1d52:	blx	r2
    1d54:	b.n	1a9c <MTPStorage_SD::OpenIndex()+0xa0>
    1d56:	mov	r0, r6
    1d58:	blx	r2
    1d5a:	b.n	1c1e <MTPStorage_SD::OpenIndex()+0x222>
    1d5c:	mov	r0, r6
    1d5e:	blx	r2
    1d60:	b.n	1d22 <MTPStorage_SD::OpenIndex()+0x326>
    1d62:	mov	r0, r7
    1d64:	blx	r2
    1d66:	b.n	1d1a <MTPStorage_SD::OpenIndex()+0x31e>
    1d68:	mov	r0, r7
    1d6a:	blx	r2
    1d6c:	b.n	1c16 <MTPStorage_SD::OpenIndex()+0x21a>
    1d6e:	mov	r0, r8
    1d70:	blx	r2
    1d72:	b.n	1d12 <MTPStorage_SD::OpenIndex()+0x316>
    1d74:	mov	r0, r8
    1d76:	blx	r2
    1d78:	b.n	1c0e <MTPStorage_SD::OpenIndex()+0x212>
    1d7a:	mov	r0, r9
    1d7c:	blx	r2
    1d7e:	b.n	1d0a <MTPStorage_SD::OpenIndex()+0x30e>
    1d80:	mov	r0, r9
    1d82:	blx	r2
    1d84:	b.n	1c06 <MTPStorage_SD::OpenIndex()+0x20a>
    1d86:	nop
    1d88:	.word	0x00000eb1
    1d8c:	.word	0x00016a5c

00001d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    all_scanned_ = false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    1d90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d94:	mov	r6, r0
    1d96:	sub	sp, #12
    1d98:	mov	r4, r1
    1d9a:	mov	r7, r2
    1d9c:	bl	19fc <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1da0:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    1da4:	add.w	r4, r4, r4, lsl #4
    1da8:	cmp	r5, #0
    1daa:	beq.n	1e82 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1dac:	ldr	r0, [r5, #0]
    1dae:	ldr	r1, [pc, #308]	; (1ee4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    1db0:	lsls	r2, r4, #4
    1db2:	ldr	r4, [r0, #52]	; 0x34
    1db4:	cmp	r4, r1
    1db6:	mov.w	ip, #0
    1dba:	bne.n	1eaa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x11a>
    1dbc:	ldr	r1, [r5, #16]
    1dbe:	cmp	r1, #0
    1dc0:	beq.n	1e7a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xea>
    1dc2:	ldr	r3, [r1, #0]
    1dc4:	ldr.w	r8, [r3, #52]	; 0x34
    1dc8:	cmp	r8, r4
    1dca:	bne.n	1eb6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x126>
    1dcc:	ldr.w	lr, [r1, #16]
    1dd0:	cmp.w	lr, #0
    1dd4:	beq.n	1e88 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    1dd6:	ldr.w	r4, [lr]
    1dda:	ldr	r4, [r4, #52]	; 0x34
    1ddc:	cmp	r4, r8
    1dde:	bne.n	1ec2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x132>
    1de0:	ldr.w	lr, [lr, #16]
    1de4:	cmp.w	lr, #0
    1de8:	beq.n	1e88 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    1dea:	ldr.w	r3, [lr]
    1dee:	ldr.w	r8, [r3, #52]	; 0x34
    1df2:	cmp	r8, r4
    1df4:	bne.n	1ece <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13e>
    1df6:	ldr.w	r4, [lr, #16]
    1dfa:	cmp	r4, #0
    1dfc:	beq.n	1e88 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    1dfe:	ldr	r3, [r4, #0]
    1e00:	ldr.w	r9, [r3, #52]	; 0x34
    1e04:	cmp	r9, r8
    1e06:	bne.n	1eda <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14a>
    1e08:	ldr	r4, [r4, #16]
    1e0a:	cmp	r4, #0
    1e0c:	beq.n	1e88 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    1e0e:	ldr	r1, [r4, #0]
    1e10:	str.w	ip, [sp]
    1e14:	mov	r3, ip
    1e16:	mov	r0, r4
    1e18:	ldr	r1, [r1, #52]	; 0x34
    1e1a:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1e1c:	ldr.w	r5, [r6, #184]	; 0xb8
    1e20:	cmp	r5, #0
    1e22:	beq.n	1e82 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1e24:	ldr	r2, [r5, #0]
    1e26:	ldr	r3, [pc, #192]	; (1ee8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    1e28:	ldr	r4, [r2, #44]	; 0x2c
    1e2a:	cmp	r4, r3
    1e2c:	bne.n	1e94 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    1e2e:	ldr	r0, [r5, #16]
    1e30:	cbz	r0, 1e82 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1e32:	ldr	r2, [r0, #0]
    1e34:	ldr	r4, [r2, #44]	; 0x2c
    1e36:	cmp	r4, r3
    1e38:	bne.n	1ea6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1e3a:	ldr	r0, [r0, #16]
    1e3c:	cbz	r0, 1e82 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1e3e:	ldr	r2, [r0, #0]
    1e40:	ldr	r4, [r2, #44]	; 0x2c
    1e42:	cmp	r4, r3
    1e44:	bne.n	1ea6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1e46:	ldr	r0, [r0, #16]
    1e48:	cbz	r0, 1e82 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1e4a:	ldr	r2, [r0, #0]
    1e4c:	ldr	r4, [r2, #44]	; 0x2c
    1e4e:	cmp	r4, r3
    1e50:	bne.n	1ea6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1e52:	ldr	r0, [r0, #16]
    1e54:	cbz	r0, 1e82 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1e56:	ldr	r2, [r0, #0]
    1e58:	ldr	r4, [r2, #44]	; 0x2c
    1e5a:	cmp	r4, r3
    1e5c:	bne.n	1ea6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1e5e:	ldr	r0, [r0, #16]
    1e60:	cbz	r0, 1e82 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1e62:	ldr	r2, [r0, #0]
    1e64:	ldr	r4, [r2, #44]	; 0x2c
    1e66:	cmp	r4, r3
    1e68:	bne.n	1ea6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    1e6a:	ldr	r0, [r0, #16]
    1e6c:	cbz	r0, 1e82 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    1e6e:	ldr	r3, [r0, #0]
    1e70:	mov	r1, r7
    1e72:	ldr	r3, [r3, #44]	; 0x2c
    1e74:	mov.w	r2, #272	; 0x110
    1e78:	b.n	1e9e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10e>
    1e7a:	ldr	r4, [r0, #44]	; 0x2c
    1e7c:	ldr	r3, [pc, #104]	; (1ee8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    1e7e:	cmp	r4, r3
    1e80:	bne.n	1e94 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    1e82:	add	sp, #12
    1e84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e88:	ldr	r4, [r0, #44]	; 0x2c
    1e8a:	ldr	r3, [pc, #92]	; (1ee8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    1e8c:	cmp	r4, r3
    1e8e:	bne.n	1e94 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    1e90:	mov	r0, r1
    1e92:	b.n	1e32 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xa2>
    1e94:	mov	r1, r7
    1e96:	mov	r0, r5
    1e98:	mov.w	r2, #272	; 0x110
    1e9c:	mov	r3, r4
    1e9e:	add	sp, #12
    1ea0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1ea4:	bx	r3
    1ea6:	mov	r1, r7
    1ea8:	b.n	1e98 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x108>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1eaa:	str.w	ip, [sp]
    1eae:	mov	r3, ip
    1eb0:	mov	r0, r5
    1eb2:	blx	r4
    1eb4:	b.n	1e1c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1eb6:	str.w	ip, [sp]
    1eba:	mov	r3, ip
    1ebc:	mov	r0, r1
    1ebe:	blx	r8
    1ec0:	b.n	1e1c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1ec2:	str.w	ip, [sp]
    1ec6:	mov	r3, ip
    1ec8:	mov	r0, lr
    1eca:	blx	r4
    1ecc:	b.n	1e1c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1ece:	str.w	ip, [sp]
    1ed2:	mov	r3, ip
    1ed4:	mov	r0, lr
    1ed6:	blx	r8
    1ed8:	b.n	1e1c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1eda:	movs	r3, #0
    1edc:	mov	r0, r4
    1ede:	str	r3, [sp, #0]
    1ee0:	blx	r9
    1ee2:	b.n	1e1c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    1ee4:	.word	0x000004c9
    1ee8:	.word	0x00000489

00001eec <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1eec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  { if (index_generated) return; 
    index_generated = true;
    1ef0:	movs	r7, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1ef2:	mov	r4, r0
    1ef4:	sub	sp, #272	; 0x110
    1ef6:	movs	r1, #13
  { if (index_generated) return; 
    index_generated = true;
    1ef8:	strb.w	r7, [r0, #248]	; 0xf8
    1efc:	ldr	r0, [pc, #104]	; (1f68 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    1efe:	bl	fe48 <usb_serial_write>
    1f02:	ldr	r0, [pc, #104]	; (1f6c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x80>)
    1f04:	bl	11800 <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    1f08:	ldr	r0, [r4, #88]	; 0x58
    1f0a:	ldr	r1, [pc, #92]	; (1f68 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    1f0c:	ldr	r3, [r0, #0]
    1f0e:	ldr	r3, [r3, #16]
    1f10:	blx	r3
    1f12:	ldr	r3, [r4, #4]
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    1f14:	str.w	r3, [r4, #228]	; 0xe4

    index_entries_ = 0;
    1f18:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1f1a:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    1f1c:	str.w	r1, [r4, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1f20:	ble.n	1f62 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x76>
    1f22:	mov	r5, r1
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
    1f24:	mov	r6, r1
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    1f26:	mov.w	r8, #4294967295
    1f2a:	b.n	1f30 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x44>
    1f2c:	ldr.w	r1, [r4, #244]	; 0xf4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
    1f30:	strh.w	r5, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1f34:	adds	r3, r1, #1
    1f36:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    1f3a:	mov	r2, sp
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    1f3c:	movs	r3, #47	; 0x2f
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1f3e:	mov	r0, r4
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    1f40:	strh.w	r3, [sp, #16]
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    1f44:	str.w	r8, [sp]
      r.sibling = 0;
    1f48:	str	r6, [sp, #8]
      r.child = 0;
    1f4a:	str	r6, [sp, #4]
      r.isdir = true;
    1f4c:	strb.w	r7, [sp, #12]
      r.scanned = false;
    1f50:	strb.w	r6, [sp, #13]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1f54:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    1f58:	ldr.w	r3, [r4, #228]	; 0xe4
    1f5c:	adds	r5, #1
    1f5e:	cmp	r3, r5
    1f60:	bgt.n	1f2c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x40>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    1f62:	add	sp, #272	; 0x110
    1f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f68:	.word	0x00016cbc
    1f6c:	.word	0x1fff0b00

00001f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1f70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f74:	mov	r5, r1
    1f76:	mov	r4, r2
    1f78:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1f7a:	movs	r1, #0
    1f7c:	mov.w	r2, #272	; 0x110
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1f80:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1f82:	bl	12f4c <memset>
    if (i > index_entries_) 
    1f86:	ldr.w	r3, [r5, #244]	; 0xf4
    1f8a:	cmp	r3, r4
    1f8c:	bcc.w	2106 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x196>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    1f90:	mov	r0, r5
    1f92:	bl	19fc <MTPStorage_SD::OpenIndex()>
    1f96:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    1f9a:	add.w	r4, r4, r4, lsl #4
    1f9e:	lsls	r2, r4, #4
    1fa0:	mov.w	ip, #0
    1fa4:	cmp	r0, #0
    1fa6:	beq.w	20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    1faa:	ldr	r7, [r0, #0]
    1fac:	ldr	r4, [pc, #456]	; (2178 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x208>)
    1fae:	ldr	r1, [r7, #52]	; 0x34
    1fb0:	cmp	r1, r4
    1fb2:	bne.w	2132 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    1fb6:	ldr	r1, [r0, #16]
    1fb8:	cmp	r1, #0
    1fba:	beq.w	211a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1aa>
    1fbe:	ldr	r3, [r1, #0]
    1fc0:	ldr.w	r8, [r3, #52]	; 0x34
    1fc4:	cmp	r8, r4
    1fc6:	bne.w	2160 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f0>
    1fca:	ldr.w	lr, [r1, #16]
    1fce:	cmp.w	lr, #0
    1fd2:	beq.n	2086 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1fd4:	ldr.w	r3, [lr]
    1fd8:	ldr.w	r8, [r3, #52]	; 0x34
    1fdc:	cmp	r8, r4
    1fde:	bne.w	2154 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    1fe2:	ldr.w	lr, [lr, #16]
    1fe6:	cmp.w	lr, #0
    1fea:	beq.n	2086 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    1fec:	ldr.w	r3, [lr]
    1ff0:	ldr.w	r8, [r3, #52]	; 0x34
    1ff4:	cmp	r8, r4
    1ff6:	bne.w	2154 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    1ffa:	ldr.w	lr, [lr, #16]
    1ffe:	cmp.w	lr, #0
    2002:	beq.n	2086 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2004:	ldr.w	r3, [lr]
    2008:	ldr.w	r8, [r3, #52]	; 0x34
    200c:	cmp	r8, r4
    200e:	bne.w	216c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2012:	ldr.w	lr, [lr, #16]
    2016:	cmp.w	lr, #0
    201a:	beq.n	2086 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    201c:	ldr.w	r3, [lr]
    2020:	ldr.w	r8, [r3, #52]	; 0x34
    2024:	cmp	r8, r4
    2026:	bne.w	216c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    202a:	ldr.w	lr, [lr, #16]
    202e:	cmp.w	lr, #0
    2032:	beq.n	2086 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2034:	ldr.w	r3, [lr]
    2038:	ldr.w	r8, [r3, #52]	; 0x34
    203c:	cmp	r8, r4
    203e:	bne.w	216c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2042:	ldr.w	lr, [lr, #16]
    2046:	cmp.w	lr, #0
    204a:	beq.n	2086 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    204c:	ldr.w	r3, [lr]
    2050:	ldr.w	r8, [r3, #52]	; 0x34
    2054:	cmp	r8, r4
    2056:	bne.w	216c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    205a:	ldr.w	lr, [lr, #16]
    205e:	cmp.w	lr, #0
    2062:	beq.n	2086 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2064:	ldr.w	r3, [lr]
    2068:	ldr.w	r8, [r3, #52]	; 0x34
    206c:	cmp	r8, r4
    206e:	bne.n	216c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2070:	ldr.w	r4, [lr, #16]
    2074:	cbz	r4, 2086 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2076:	ldr	r1, [r4, #0]
    2078:	str.w	ip, [sp]
    207c:	mov	r3, ip
    207e:	mov	r0, r4
    2080:	ldr	r1, [r1, #52]	; 0x34
    2082:	blx	r1
    2084:	b.n	213a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2086:	ldr	r4, [r7, #40]	; 0x28
    2088:	ldr	r3, [pc, #240]	; (217c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    208a:	cmp	r4, r3
    208c:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    208e:	mov	r0, r1
    2090:	ldr	r2, [r0, #0]
    2092:	ldr	r4, [r2, #40]	; 0x28
    2094:	cmp	r4, r3
    2096:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2098:	ldr	r0, [r0, #16]
    209a:	cmp	r0, #0
    209c:	beq.n	20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    209e:	ldr	r2, [r0, #0]
    20a0:	ldr	r4, [r2, #40]	; 0x28
    20a2:	cmp	r4, r3
    20a4:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    20a6:	ldr	r0, [r0, #16]
    20a8:	cbz	r0, 20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    20aa:	ldr	r2, [r0, #0]
    20ac:	ldr	r4, [r2, #40]	; 0x28
    20ae:	cmp	r4, r3
    20b0:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    20b2:	ldr	r0, [r0, #16]
    20b4:	cbz	r0, 20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    20b6:	ldr	r2, [r0, #0]
    20b8:	ldr	r4, [r2, #40]	; 0x28
    20ba:	cmp	r4, r3
    20bc:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    20be:	ldr	r0, [r0, #16]
    20c0:	cbz	r0, 20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    20c2:	ldr	r2, [r0, #0]
    20c4:	ldr	r4, [r2, #40]	; 0x28
    20c6:	cmp	r4, r3
    20c8:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    20ca:	ldr	r0, [r0, #16]
    20cc:	cbz	r0, 20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    20ce:	ldr	r2, [r0, #0]
    20d0:	ldr	r4, [r2, #40]	; 0x28
    20d2:	cmp	r4, r3
    20d4:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    20d6:	ldr	r0, [r0, #16]
    20d8:	cbz	r0, 20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    20da:	ldr	r2, [r0, #0]
    20dc:	ldr	r4, [r2, #40]	; 0x28
    20de:	cmp	r4, r3
    20e0:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    20e2:	ldr	r0, [r0, #16]
    20e4:	cbz	r0, 20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    20e6:	ldr	r2, [r0, #0]
    20e8:	ldr	r4, [r2, #40]	; 0x28
    20ea:	cmp	r4, r3
    20ec:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    20ee:	ldr	r0, [r0, #16]
    20f0:	cbz	r0, 20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    20f2:	ldr	r3, [r0, #0]
    20f4:	mov.w	r2, #272	; 0x110
    20f8:	ldr	r3, [r3, #40]	; 0x28
    20fa:	mov	r1, r6
    20fc:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    20fe:	mov	r0, r6
    2100:	add	sp, #8
    2102:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    2106:	mov.w	r2, #272	; 0x110
    210a:	movs	r1, #0
    210c:	mov	r0, r6
    210e:	bl	12f4c <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    2112:	mov	r0, r6
    2114:	add	sp, #8
    2116:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    211a:	ldr	r4, [r7, #40]	; 0x28
    211c:	ldr	r3, [pc, #92]	; (217c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    211e:	cmp	r4, r3
    2120:	beq.n	20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2122:	mov.w	r2, #272	; 0x110
    2126:	mov	r1, r6
    2128:	blx	r4
    212a:	mov	r0, r6
    212c:	add	sp, #8
    212e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2132:	str.w	ip, [sp]
    2136:	mov	r3, ip
    2138:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    213a:	ldr.w	r0, [r5, #184]	; 0xb8
    213e:	cmp	r0, #0
    2140:	beq.n	20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2142:	ldr	r2, [r0, #0]
    2144:	ldr	r3, [pc, #52]	; (217c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2146:	ldr	r4, [r2, #40]	; 0x28
    2148:	cmp	r4, r3
    214a:	bne.n	2122 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    214c:	ldr	r0, [r0, #16]
    214e:	cmp	r0, #0
    2150:	bne.n	2090 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x120>
    2152:	b.n	20fe <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2154:	str.w	ip, [sp]
    2158:	mov	r3, ip
    215a:	mov	r0, lr
    215c:	blx	r8
    215e:	b.n	213a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2160:	str.w	ip, [sp]
    2164:	mov	r3, ip
    2166:	mov	r0, r1
    2168:	blx	r8
    216a:	b.n	213a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    216c:	movs	r3, #0
    216e:	mov	r0, lr
    2170:	str	r3, [sp, #0]
    2172:	blx	r8
    2174:	b.n	213a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2176:	nop
    2178:	.word	0x000004c9
    217c:	.word	0x0000047d

00002180 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    2180:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    2182:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    2186:	sub	sp, #276	; 0x114
    2188:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    218a:	cbnz	r5, 21a0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
    218c:	b.n	21d6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    218e:	ldr	r3, [sp, #8]
    2190:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    2194:	ldrb.w	r3, [sp, #16]
    2198:	cbnz	r3, 21d0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    219a:	ldr.w	r5, [r4, #252]	; 0xfc
    219e:	cbz	r5, 21d6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    21a0:	mov	r2, r5
    21a2:	mov	r1, r4
    21a4:	mov	r0, sp
    21a6:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    21aa:	ldrb.w	r2, [r4, #256]	; 0x100
    21ae:	cmp	r2, #0
    21b0:	bne.n	218e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    21b2:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    21b6:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    21ba:	adds	r3, #1
    21bc:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    21c0:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    21c2:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    21c6:	it	cs
    21c8:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    21cc:	cmp	r3, #0
    21ce:	beq.n	219a <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    21d0:	mov	r0, r5
    21d2:	add	sp, #276	; 0x114
    21d4:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    21d6:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    21d8:	mov	r0, r5
    21da:	add	sp, #276	; 0x114
    21dc:	pop	{r4, r5, pc}
    21de:	nop

000021e0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    21e0:	push	{r4, r5, r6, r7, lr}
    21e2:	sub	sp, #276	; 0x114
    21e4:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    21e6:	mov	r2, r1
    21e8:	mov	r1, r0
    21ea:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    21ec:	mov	r5, r3
    21ee:	ldr	r6, [sp, #296]	; 0x128
    21f0:	ldr	r4, [sp, #300]	; 0x12c
    Record r = ReadIndexRecord(handle);
    21f2:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    21f6:	mov	r0, r7
    21f8:	add	r1, sp, #16
    21fa:	bl	13440 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    21fe:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    2202:	ldr	r2, [sp, #0]
    2204:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2206:	cbnz	r3, 2216 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    2208:	ldr	r3, [sp, #4]
    *store = r.store;
    220a:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    220e:	str	r3, [r5, #0]
    *store = r.store;
    2210:	strh	r2, [r4, #0]
  }
    2212:	add	sp, #276	; 0x114
    2214:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2216:	mov.w	r3, #4294967295
    221a:	b.n	220a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

0000221c <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    221c:	push	{lr}
    221e:	sub	sp, #276	; 0x114
    return ReadIndexRecord(handle).child;
    2220:	mov	r2, r1
    2222:	mov	r1, r0
    2224:	mov	r0, sp
    2226:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    222a:	ldr	r0, [sp, #4]
    222c:	add	sp, #276	; 0x114
    222e:	ldr.w	pc, [sp], #4
    2232:	nop

00002234 <MTPStorage_SD::close()>:
      mtp_lock_storage(false);
      return ret;
  }

  void MTPStorage_SD::close() 
  {
    2234:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2236:	ldr.w	r3, [r0, #204]	; 0xcc
    223a:	sub	sp, #272	; 0x110
    223c:	mov	r4, r0
    223e:	cmp	r3, #0
    2240:	beq.n	22dc <MTPStorage_SD::close()+0xa8>
    2242:	ldr	r5, [r3, #0]
    2244:	ldr	r1, [pc, #384]	; (23c8 <MTPStorage_SD::close()+0x194>)
    2246:	ldr	r2, [r5, #60]	; 0x3c
    2248:	cmp	r2, r1
    224a:	bne.w	23bc <MTPStorage_SD::close()+0x188>
    224e:	ldr	r2, [r3, #16]
    2250:	cmp	r2, #0
    2252:	beq.w	23ac <MTPStorage_SD::close()+0x178>
    2256:	ldr	r0, [r2, #0]
    2258:	ldr	r6, [r0, #60]	; 0x3c
    225a:	cmp	r6, r1
    225c:	bne.n	2304 <MTPStorage_SD::close()+0xd0>
    225e:	ldr	r0, [r2, #16]
    2260:	cmp	r0, #0
    2262:	beq.n	22ce <MTPStorage_SD::close()+0x9a>
    2264:	ldr	r6, [r0, #0]
    2266:	ldr	r6, [r6, #60]	; 0x3c
    2268:	cmp	r6, r1
    226a:	bne.n	2306 <MTPStorage_SD::close()+0xd2>
    226c:	ldr	r0, [r0, #16]
    226e:	cmp	r0, #0
    2270:	beq.n	22ce <MTPStorage_SD::close()+0x9a>
    2272:	ldr	r6, [r0, #0]
    2274:	ldr	r6, [r6, #60]	; 0x3c
    2276:	cmp	r6, r1
    2278:	bne.n	2306 <MTPStorage_SD::close()+0xd2>
    227a:	ldr	r0, [r0, #16]
    227c:	cbz	r0, 22ce <MTPStorage_SD::close()+0x9a>
    227e:	ldr	r6, [r0, #0]
    2280:	ldr	r6, [r6, #60]	; 0x3c
    2282:	cmp	r6, r1
    2284:	bne.n	2306 <MTPStorage_SD::close()+0xd2>
    2286:	ldr	r0, [r0, #16]
    2288:	cbz	r0, 22ce <MTPStorage_SD::close()+0x9a>
    228a:	ldr	r6, [r0, #0]
    228c:	ldr	r6, [r6, #60]	; 0x3c
    228e:	cmp	r6, r1
    2290:	bne.n	2306 <MTPStorage_SD::close()+0xd2>
    2292:	ldr	r0, [r0, #16]
    2294:	cbz	r0, 22ce <MTPStorage_SD::close()+0x9a>
    2296:	ldr	r6, [r0, #0]
    2298:	ldr	r6, [r6, #60]	; 0x3c
    229a:	cmp	r6, r1
    229c:	bne.n	2306 <MTPStorage_SD::close()+0xd2>
    229e:	ldr	r0, [r0, #16]
    22a0:	cbz	r0, 22ce <MTPStorage_SD::close()+0x9a>
    22a2:	ldr	r6, [r0, #0]
    22a4:	ldr	r6, [r6, #60]	; 0x3c
    22a6:	cmp	r6, r1
    22a8:	bne.n	2306 <MTPStorage_SD::close()+0xd2>
    22aa:	ldr	r0, [r0, #16]
    22ac:	cbz	r0, 22ce <MTPStorage_SD::close()+0x9a>
    22ae:	ldr	r6, [r0, #0]
    22b0:	ldr	r6, [r6, #60]	; 0x3c
    22b2:	cmp	r6, r1
    22b4:	bne.n	2306 <MTPStorage_SD::close()+0xd2>
    22b6:	ldr	r0, [r0, #16]
    22b8:	cbz	r0, 22ce <MTPStorage_SD::close()+0x9a>
    22ba:	ldr	r6, [r0, #0]
    22bc:	ldr	r6, [r6, #60]	; 0x3c
    22be:	cmp	r6, r1
    22c0:	bne.n	2306 <MTPStorage_SD::close()+0xd2>
    22c2:	ldr	r0, [r0, #16]
    22c4:	cbz	r0, 22ce <MTPStorage_SD::close()+0x9a>
    22c6:	ldr	r3, [r0, #0]
    22c8:	ldr	r3, [r3, #60]	; 0x3c
    22ca:	blx	r3
    22cc:	b.n	2308 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    22ce:	ldr	r6, [r5, #64]	; 0x40
    22d0:	ldr	r1, [pc, #248]	; (23cc <MTPStorage_SD::close()+0x198>)
    22d2:	cmp	r6, r1
    22d4:	bne.n	23c2 <MTPStorage_SD::close()+0x18e>
    22d6:	mov	r0, r2
    22d8:	movs	r5, #0
    22da:	b.n	2322 <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    22dc:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    22de:	mov	r0, sp
    22e0:	ldr.w	r2, [r4, #240]	; 0xf0
    22e4:	mov	r1, r4
    22e6:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    22ea:	mov	r2, sp
    22ec:	ldr.w	r1, [r4, #240]	; 0xf0
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    22f0:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    22f2:	mov	r0, r4
    22f4:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    22f8:	mvn.w	r3, #1
    22fc:	str.w	r3, [r4, #240]	; 0xf0
  }
    2300:	add	sp, #272	; 0x110
    2302:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2304:	mov	r0, r2
    2306:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    2308:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    230c:	mov	r5, r0
    230e:	cmp	r3, #0
    2310:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    2312:	ldr	r2, [r3, #0]
    2314:	ldr	r1, [pc, #180]	; (23cc <MTPStorage_SD::close()+0x198>)
    2316:	ldr	r6, [r2, #64]	; 0x40
    2318:	cmp	r6, r1
    231a:	bne.n	23b6 <MTPStorage_SD::close()+0x182>
    231c:	ldr	r0, [r3, #16]
    231e:	cmp	r0, #0
    2320:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    2322:	ldr	r3, [r0, #0]
    2324:	ldr	r3, [r3, #64]	; 0x40
    2326:	cmp	r3, r1
    2328:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    232a:	ldr	r0, [r0, #16]
    232c:	cmp	r0, #0
    232e:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    2330:	ldr	r3, [r0, #0]
    2332:	ldr	r3, [r3, #64]	; 0x40
    2334:	cmp	r3, r1
    2336:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    2338:	ldr	r0, [r0, #16]
    233a:	cmp	r0, #0
    233c:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    233e:	ldr	r3, [r0, #0]
    2340:	ldr	r3, [r3, #64]	; 0x40
    2342:	cmp	r3, r1
    2344:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    2346:	ldr	r0, [r0, #16]
    2348:	cmp	r0, #0
    234a:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    234c:	ldr	r3, [r0, #0]
    234e:	ldr	r3, [r3, #64]	; 0x40
    2350:	cmp	r3, r1
    2352:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    2354:	ldr	r0, [r0, #16]
    2356:	cmp	r0, #0
    2358:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    235a:	ldr	r3, [r0, #0]
    235c:	ldr	r3, [r3, #64]	; 0x40
    235e:	cmp	r3, r1
    2360:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    2362:	ldr	r0, [r0, #16]
    2364:	cmp	r0, #0
    2366:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    2368:	ldr	r3, [r0, #0]
    236a:	ldr	r3, [r3, #64]	; 0x40
    236c:	cmp	r3, r1
    236e:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    2370:	ldr	r0, [r0, #16]
    2372:	cmp	r0, #0
    2374:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    2376:	ldr	r3, [r0, #0]
    2378:	ldr	r3, [r3, #64]	; 0x40
    237a:	cmp	r3, r1
    237c:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    237e:	ldr	r0, [r0, #16]
    2380:	cmp	r0, #0
    2382:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    2384:	ldr	r3, [r0, #0]
    2386:	ldr	r3, [r3, #64]	; 0x40
    2388:	cmp	r3, r1
    238a:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    238c:	ldr	r0, [r0, #16]
    238e:	cmp	r0, #0
    2390:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    2392:	ldr	r3, [r0, #0]
    2394:	ldr	r3, [r3, #64]	; 0x40
    2396:	cmp	r3, r1
    2398:	bne.n	23a8 <MTPStorage_SD::close()+0x174>
    239a:	ldr	r0, [r0, #16]
    239c:	cmp	r0, #0
    239e:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    23a0:	ldr	r3, [r0, #0]
    23a2:	ldr	r3, [r3, #64]	; 0x40
    23a4:	blx	r3
    23a6:	b.n	22de <MTPStorage_SD::close()+0xaa>
    23a8:	blx	r3
    23aa:	b.n	22de <MTPStorage_SD::close()+0xaa>
    23ac:	ldr	r6, [r5, #64]	; 0x40
    23ae:	ldr	r1, [pc, #28]	; (23cc <MTPStorage_SD::close()+0x198>)
    23b0:	cmp	r6, r1
    23b2:	mov	r5, r2
    23b4:	beq.n	22de <MTPStorage_SD::close()+0xaa>
    23b6:	mov	r0, r3
    23b8:	blx	r6
    23ba:	b.n	22de <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    23bc:	mov	r0, r3
    23be:	blx	r2
    23c0:	b.n	2308 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    23c2:	movs	r5, #0
    23c4:	b.n	23b6 <MTPStorage_SD::close()+0x182>
    23c6:	nop
    23c8:	.word	0x000004f1
    23cc:	.word	0x00000501

000023d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    23d0:	push	{r4, r5, r6, lr}
    23d2:	mov	r6, r0
    23d4:	sub	sp, #272	; 0x110
    23d6:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    23d8:	mov	r0, sp
    23da:	mov	r2, r1
    23dc:	mov	r1, r6

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    23de:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    23e0:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    23e4:	ldr	r1, [sp, #0]
    23e6:	adds	r3, r1, #1
    23e8:	beq.n	2420 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    23ea:	mov	r3, r5
    23ec:	mov	r2, r4
    23ee:	mov	r0, r6
    23f0:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    23f4:	mov	r0, r4
    23f6:	bl	13580 <strlen>
    23fa:	add	r0, r4
    23fc:	ldrb.w	r3, [r0, #-1]
    2400:	cmp	r3, #47	; 0x2f
    2402:	beq.n	240e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3e>
    2404:	mov	r2, r5
    2406:	ldr	r1, [pc, #40]	; (2430 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    2408:	mov	r0, r4
    240a:	bl	134fc <strlcat>
      strlcat(out, tmp.name,len);
    240e:	mov	r2, r5
    2410:	mov	r0, r4
    2412:	add	r1, sp, #16
    2414:	bl	134fc <strlcat>
      return tmp.store;
    2418:	ldrh.w	r0, [sp, #14]
    }
  }
    241c:	add	sp, #272	; 0x110
    241e:	pop	{r4, r5, r6, pc}
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2420:	ldr	r3, [pc, #12]	; (2430 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    2422:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2426:	ldrh	r3, [r3, #0]
    2428:	strh	r3, [r4, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
      strlcat(out, tmp.name,len);
      return tmp.store;
    }
  }
    242a:	add	sp, #272	; 0x110
    242c:	pop	{r4, r5, r6, pc}
    242e:	nop
    2430:	.word	0x00016ce4

00002434 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2434:	push	{r4, r5, r6, r7, lr}
    2436:	subw	sp, sp, #1044	; 0x414
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    243a:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    243e:	mov	r7, r2
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2440:	mov	r2, sp
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2442:	mov	r5, r1
    2444:	mov	r4, r0
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2446:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    244a:	mov	r6, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    244c:	mov	r0, sp
    244e:	bl	13580 <strlen>
    2452:	mov	r1, r0
    2454:	mov	r0, sp
    2456:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    245a:	ldr	r0, [pc, #132]	; (24e0 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    245c:	bl	11800 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    2460:	mov	r2, r5
    2462:	mov	r1, r4
    2464:	add	r0, sp, #768	; 0x300
    2466:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    246a:	add	r1, sp, #784	; 0x310
    246c:	mov.w	r2, #256	; 0x100
    2470:	add	r0, sp, #512	; 0x200
    2472:	bl	13550 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    2476:	mov	r1, r7
    2478:	mov.w	r2, #256	; 0x100
    247c:	add	r0, sp, #784	; 0x310
    247e:	bl	13550 <strlcpy>

    WriteIndexRecord(handle, p1);
    2482:	add	r2, sp, #768	; 0x300
    2484:	mov	r1, r5
    2486:	mov	r0, r4
    2488:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    248c:	add	r2, sp, #256	; 0x100
    248e:	mov.w	r3, #256	; 0x100
    2492:	mov	r1, r5
    2494:	mov	r0, r4
    2496:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    249a:	add	r0, sp, #256	; 0x100
    249c:	bl	13580 <strlen>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    24a0:	add.w	r6, r4, r6, lsl #2
    24a4:	mov	r1, r0
    24a6:	add	r0, sp, #256	; 0x100
    24a8:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    24ac:	ldr	r0, [pc, #48]	; (24e0 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    24ae:	bl	11800 <Print::println()>
    24b2:	ldr	r0, [r6, #88]	; 0x58
    24b4:	ldr	r3, [r0, #0]
    24b6:	add	r2, sp, #256	; 0x100
    24b8:	mov	r1, sp
    24ba:	ldr	r3, [r3, #12]
    24bc:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    24be:	mov	r6, r0
    24c0:	cbnz	r0, 24d8 <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    24c2:	add	r1, sp, #512	; 0x200
    24c4:	mov.w	r2, #256	; 0x100
    24c8:	add	r0, sp, #784	; 0x310
    24ca:	bl	13550 <strlcpy>
    WriteIndexRecord(handle, p1);
    24ce:	add	r2, sp, #768	; 0x300
    24d0:	mov	r1, r5
    24d2:	mov	r0, r4
    24d4:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    24d8:	mov	r0, r6
    24da:	addw	sp, sp, #1044	; 0x414
    24de:	pop	{r4, r5, r6, r7, pc}
    24e0:	.word	0x1fff0b00

000024e4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    24e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    24e8:	ldr.w	r3, [r0, #240]	; 0xf0
    24ec:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    24ee:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    24f0:	beq.w	28e8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    24f4:	mov	r6, r2
    char filename[MAX_FILENAME_LEN];
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    24f6:	mov.w	r3, #256	; 0x100
    24fa:	add	r2, sp, #32
    24fc:	mov	r4, r0
    24fe:	mov	r5, r1
    2500:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2504:	mov	r7, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2506:	ldr.w	r0, [r4, #204]	; 0xcc
    250a:	cmp	r0, #0
    250c:	beq.w	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2510:	ldr	r2, [r0, #0]
    2512:	ldr	r3, [pc, #348]	; (2670 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    2514:	ldr	r2, [r2, #68]	; 0x44
    2516:	cmp	r2, r3
    2518:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    251c:	ldr	r0, [r0, #16]
    251e:	cmp	r0, #0
    2520:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2522:	ldr	r2, [r0, #0]
    2524:	ldr	r2, [r2, #68]	; 0x44
    2526:	cmp	r2, r3
    2528:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    252c:	ldr	r0, [r0, #16]
    252e:	cmp	r0, #0
    2530:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2532:	ldr	r2, [r0, #0]
    2534:	ldr	r2, [r2, #68]	; 0x44
    2536:	cmp	r2, r3
    2538:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    253c:	ldr	r0, [r0, #16]
    253e:	cmp	r0, #0
    2540:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2542:	ldr	r2, [r0, #0]
    2544:	ldr	r2, [r2, #68]	; 0x44
    2546:	cmp	r2, r3
    2548:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    254c:	ldr	r0, [r0, #16]
    254e:	cmp	r0, #0
    2550:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2552:	ldr	r2, [r0, #0]
    2554:	ldr	r2, [r2, #68]	; 0x44
    2556:	cmp	r2, r3
    2558:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    255c:	ldr	r0, [r0, #16]
    255e:	cmp	r0, #0
    2560:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2562:	ldr	r2, [r0, #0]
    2564:	ldr	r2, [r2, #68]	; 0x44
    2566:	cmp	r2, r3
    2568:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    256c:	ldr	r0, [r0, #16]
    256e:	cmp	r0, #0
    2570:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2572:	ldr	r2, [r0, #0]
    2574:	ldr	r2, [r2, #68]	; 0x44
    2576:	cmp	r2, r3
    2578:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    257c:	ldr	r0, [r0, #16]
    257e:	cmp	r0, #0
    2580:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2582:	ldr	r2, [r0, #0]
    2584:	ldr	r2, [r2, #68]	; 0x44
    2586:	cmp	r2, r3
    2588:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    258c:	ldr	r0, [r0, #16]
    258e:	cmp	r0, #0
    2590:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2592:	ldr	r2, [r0, #0]
    2594:	ldr	r2, [r2, #68]	; 0x44
    2596:	cmp	r2, r3
    2598:	bne.w	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    259c:	ldr	r0, [r0, #16]
    259e:	cmp	r0, #0
    25a0:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    25a2:	ldr	r3, [r0, #0]
    25a4:	ldr	r3, [r3, #68]	; 0x44
    25a6:	blx	r3

    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    25a8:	cmp	r0, #0
    25aa:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    25ac:	ldr.w	r0, [r4, #204]	; 0xcc
    25b0:	cmp	r0, #0
    25b2:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    25b4:	ldr	r2, [r0, #0]
    25b6:	ldr	r3, [pc, #188]	; (2674 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    25b8:	ldr	r2, [r2, #64]	; 0x40
    25ba:	cmp	r2, r3
    25bc:	bne.w	28fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    25c0:	ldr	r0, [r0, #16]
    25c2:	cmp	r0, #0
    25c4:	beq.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    25c6:	ldr	r2, [r0, #0]
    25c8:	ldr	r2, [r2, #64]	; 0x40
    25ca:	cmp	r2, r3
    25cc:	bne.w	28fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    25d0:	ldr	r0, [r0, #16]
    25d2:	cbz	r0, 2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    25d4:	ldr	r2, [r0, #0]
    25d6:	ldr	r2, [r2, #64]	; 0x40
    25d8:	cmp	r2, r3
    25da:	bne.w	28fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    25de:	ldr	r0, [r0, #16]
    25e0:	cbz	r0, 2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    25e2:	ldr	r2, [r0, #0]
    25e4:	ldr	r2, [r2, #64]	; 0x40
    25e6:	cmp	r2, r3
    25e8:	bne.w	28fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    25ec:	ldr	r0, [r0, #16]
    25ee:	cbz	r0, 2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    25f0:	ldr	r2, [r0, #0]
    25f2:	ldr	r2, [r2, #64]	; 0x40
    25f4:	cmp	r2, r3
    25f6:	bne.w	28fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    25fa:	ldr	r0, [r0, #16]
    25fc:	cbz	r0, 2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    25fe:	ldr	r2, [r0, #0]
    2600:	ldr	r2, [r2, #64]	; 0x40
    2602:	cmp	r2, r3
    2604:	bne.w	28fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2608:	ldr	r0, [r0, #16]
    260a:	cbz	r0, 2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    260c:	ldr	r2, [r0, #0]
    260e:	ldr	r2, [r2, #64]	; 0x40
    2610:	cmp	r2, r3
    2612:	bne.w	28fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2616:	ldr	r0, [r0, #16]
    2618:	cbz	r0, 2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    261a:	ldr	r3, [r0, #0]
    261c:	ldr	r3, [r3, #64]	; 0x40
    261e:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    2620:	add.w	r7, r4, r7, lsl #2
    2624:	add	r2, sp, #32
    2626:	ldr	r1, [r7, #88]	; 0x58
    2628:	ldr	r3, [r1, #0]
    262a:	add	r0, sp, #12
    262c:	ldr	r7, [r3, #0]
    262e:	uxtb	r3, r6
    2630:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2632:	ldr.w	r2, [r4, #204]	; 0xcc
    2636:	cbz	r2, 2640 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2638:	ldr	r3, [r2, #16]
    263a:	subs	r3, #1
    263c:	str	r3, [r2, #16]
    263e:	cbz	r3, 267c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2640:	ldr	r2, [sp, #28]
    2642:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    2646:	cbz	r2, 2662 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2648:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    264a:	ldr	r3, [pc, #44]	; (2678 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
    264c:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    264e:	adds	r1, #1
    2650:	str	r1, [r2, #16]
    2652:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2654:	cbz	r1, 2662 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2656:	ldr	r2, [r1, #16]
    2658:	subs	r2, #1
    265a:	str	r2, [r1, #16]
    265c:	cmp	r2, #0
    265e:	beq.w	27b8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    2662:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    2666:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    266a:	add	sp, #292	; 0x124
    266c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2670:	.word	0x0000050d
    2674:	.word	0x00000501
    2678:	.word	0x00016a5c
    267c:	ldr.w	r7, [r4, #204]	; 0xcc
    2680:	cmp	r7, #0
    2682:	beq.n	2640 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2684:	ldr	r3, [r7, #0]
    2686:	ldr	r1, [pc, #680]	; (2930 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2688:	ldr	r3, [r3, #32]
    268a:	cmp	r3, r1
    268c:	bne.w	2900 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
    2690:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2692:	ldr	r3, [pc, #672]	; (2934 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
    2694:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2696:	cmp	r0, #0
    2698:	beq.w	27ae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    269c:	ldr	r2, [r0, #16]
    269e:	subs	r2, #1
    26a0:	str	r2, [r0, #16]
    26a2:	cmp	r2, #0
    26a4:	bne.w	27ae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    26a8:	ldr.w	r8, [r7, #16]
    26ac:	cmp.w	r8, #0
    26b0:	beq.n	27ae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    26b2:	ldr.w	r2, [r8]
    26b6:	ldr	r2, [r2, #32]
    26b8:	cmp	r2, r1
    26ba:	bne.w	291e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    26be:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    26c2:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    26c6:	cmp	r0, #0
    26c8:	beq.n	27a6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    26ca:	ldr	r2, [r0, #16]
    26cc:	subs	r2, #1
    26ce:	str	r2, [r0, #16]
    26d0:	cmp	r2, #0
    26d2:	bne.n	27a6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    26d4:	ldr.w	r9, [r8, #16]
    26d8:	cmp.w	r9, #0
    26dc:	beq.n	27a6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    26de:	ldr.w	r2, [r9]
    26e2:	ldr	r2, [r2, #32]
    26e4:	cmp	r2, r1
    26e6:	bne.w	2912 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    26ea:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    26ee:	str.w	r3, [r9]
    26f2:	ldr.w	lr, [pc, #576]	; 2934 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    26f6:	cmp	r0, #0
    26f8:	beq.n	279e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    26fa:	ldr	r2, [r0, #16]
    26fc:	subs	r2, #1
    26fe:	str	r2, [r0, #16]
    2700:	cmp	r2, #0
    2702:	bne.n	279e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2704:	ldr.w	sl, [r9, #16]
    2708:	cmp.w	sl, #0
    270c:	beq.n	279e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    270e:	ldr.w	r2, [sl]
    2712:	ldr	r2, [r2, #32]
    2714:	cmp	r2, r1
    2716:	bne.w	292a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    271a:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    271e:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2722:	cmp	r0, #0
    2724:	beq.n	2796 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2726:	ldr	r2, [r0, #16]
    2728:	subs	r2, #1
    272a:	str	r2, [r0, #16]
    272c:	cmp	r2, #0
    272e:	bne.n	2796 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2730:	ldr.w	fp, [sl, #16]
    2734:	cmp.w	fp, #0
    2738:	beq.n	2796 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    273a:	ldr.w	r2, [fp]
    273e:	ldr	r2, [r2, #32]
    2740:	cmp	r2, r1
    2742:	bne.w	293e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    2746:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    274a:	str.w	r3, [fp]
    274e:	ldr	r0, [pc, #484]	; (2934 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2750:	cbz	r2, 278e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2752:	ldr	r3, [r2, #16]
    2754:	subs	r3, #1
    2756:	str	r3, [r2, #16]
    2758:	cbnz	r3, 278e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    275a:	ldr.w	r2, [fp, #16]
    275e:	cbz	r2, 278e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2760:	ldr	r3, [r2, #0]
    2762:	ldr	r3, [r3, #32]
    2764:	cmp	r3, r1
    2766:	bne.w	294a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    276a:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    276c:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    276e:	cbz	r1, 2786 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2770:	ldr	r3, [r1, #16]
    2772:	subs	r3, #1
    2774:	str	r3, [r1, #16]
    2776:	cbnz	r3, 2786 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2778:	ldr	r0, [r2, #16]
    277a:	cbz	r0, 2786 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    277c:	ldr	r3, [r0, #0]
    277e:	str	r2, [sp, #4]
    2780:	ldr	r3, [r3, #32]
    2782:	blx	r3
    2784:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2786:	mov	r0, r2
    2788:	movs	r1, #20
    278a:	bl	119b0 <operator delete(void*, unsigned int)>
    278e:	mov	r0, fp
    2790:	movs	r1, #20
    2792:	bl	119b0 <operator delete(void*, unsigned int)>
    2796:	mov	r0, sl
    2798:	movs	r1, #20
    279a:	bl	119b0 <operator delete(void*, unsigned int)>
    279e:	mov	r0, r9
    27a0:	movs	r1, #20
    27a2:	bl	119b0 <operator delete(void*, unsigned int)>
    27a6:	mov	r0, r8
    27a8:	movs	r1, #20
    27aa:	bl	119b0 <operator delete(void*, unsigned int)>
    27ae:	mov	r0, r7
    27b0:	movs	r1, #20
    27b2:	bl	119b0 <operator delete(void*, unsigned int)>
    27b6:	b.n	2640 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    27b8:	ldr	r7, [sp, #28]
    27ba:	cmp	r7, #0
    27bc:	beq.w	2662 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    27c0:	ldr	r2, [r7, #0]
    27c2:	ldr	r1, [pc, #364]	; (2930 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    27c4:	ldr	r2, [r2, #32]
    27c6:	cmp	r2, r1
    27c8:	bne.w	2906 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    27cc:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    27ce:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    27d0:	cmp	r0, #0
    27d2:	beq.w	28de <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    27d6:	ldr	r2, [r0, #16]
    27d8:	subs	r2, #1
    27da:	str	r2, [r0, #16]
    27dc:	cmp	r2, #0
    27de:	bne.n	28de <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    27e0:	ldr.w	r8, [r7, #16]
    27e4:	cmp.w	r8, #0
    27e8:	beq.n	28de <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    27ea:	ldr.w	r2, [r8]
    27ee:	ldr	r2, [r2, #32]
    27f0:	cmp	r2, r1
    27f2:	bne.w	2918 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    27f6:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    27fa:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    27fe:	cmp	r0, #0
    2800:	beq.n	28d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2802:	ldr	r2, [r0, #16]
    2804:	subs	r2, #1
    2806:	str	r2, [r0, #16]
    2808:	cmp	r2, #0
    280a:	bne.n	28d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    280c:	ldr.w	r9, [r8, #16]
    2810:	cmp.w	r9, #0
    2814:	beq.n	28d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2816:	ldr.w	r2, [r9]
    281a:	ldr	r2, [r2, #32]
    281c:	cmp	r2, r1
    281e:	bne.n	290c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    2820:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2824:	str.w	r3, [r9]
    2828:	ldr.w	lr, [pc, #264]	; 2934 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    282c:	cmp	r0, #0
    282e:	beq.n	28ce <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2830:	ldr	r2, [r0, #16]
    2832:	subs	r2, #1
    2834:	str	r2, [r0, #16]
    2836:	cmp	r2, #0
    2838:	bne.n	28ce <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    283a:	ldr.w	sl, [r9, #16]
    283e:	cmp.w	sl, #0
    2842:	beq.n	28ce <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2844:	ldr.w	r2, [sl]
    2848:	ldr	r2, [r2, #32]
    284a:	cmp	r2, r1
    284c:	bne.n	2924 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    284e:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2852:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2856:	cmp	r0, #0
    2858:	beq.n	28c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    285a:	ldr	r2, [r0, #16]
    285c:	subs	r2, #1
    285e:	str	r2, [r0, #16]
    2860:	cmp	r2, #0
    2862:	bne.n	28c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2864:	ldr.w	fp, [sl, #16]
    2868:	cmp.w	fp, #0
    286c:	beq.n	28c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    286e:	ldr.w	r2, [fp]
    2872:	ldr	r2, [r2, #32]
    2874:	cmp	r2, r1
    2876:	bne.n	2938 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    2878:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    287c:	str.w	r3, [fp]
    2880:	ldr	r0, [pc, #176]	; (2934 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2882:	cbz	r2, 28be <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2884:	ldr	r3, [r2, #16]
    2886:	subs	r3, #1
    2888:	str	r3, [r2, #16]
    288a:	cbnz	r3, 28be <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    288c:	ldr.w	r2, [fp, #16]
    2890:	cbz	r2, 28be <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2892:	ldr	r3, [r2, #0]
    2894:	ldr	r3, [r3, #32]
    2896:	cmp	r3, r1
    2898:	bne.n	2944 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    289a:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    289c:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    289e:	cbz	r1, 28b6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    28a0:	ldr	r3, [r1, #16]
    28a2:	subs	r3, #1
    28a4:	str	r3, [r1, #16]
    28a6:	cbnz	r3, 28b6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    28a8:	ldr	r0, [r2, #16]
    28aa:	cbz	r0, 28b6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    28ac:	ldr	r3, [r0, #0]
    28ae:	str	r2, [sp, #4]
    28b0:	ldr	r3, [r3, #32]
    28b2:	blx	r3
    28b4:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    28b6:	mov	r0, r2
    28b8:	movs	r1, #20
    28ba:	bl	119b0 <operator delete(void*, unsigned int)>
    28be:	mov	r0, fp
    28c0:	movs	r1, #20
    28c2:	bl	119b0 <operator delete(void*, unsigned int)>
    28c6:	mov	r0, sl
    28c8:	movs	r1, #20
    28ca:	bl	119b0 <operator delete(void*, unsigned int)>
    28ce:	mov	r0, r9
    28d0:	movs	r1, #20
    28d2:	bl	119b0 <operator delete(void*, unsigned int)>
    28d6:	mov	r0, r8
    28d8:	movs	r1, #20
    28da:	bl	119b0 <operator delete(void*, unsigned int)>
    28de:	mov	r0, r7
    28e0:	movs	r1, #20
    28e2:	bl	119b0 <operator delete(void*, unsigned int)>
    28e6:	b.n	2662 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    28e8:	ldr.w	r3, [r0, #236]	; 0xec
    28ec:	cmp	r3, r2
    28ee:	bne.w	24f4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    28f2:	add	sp, #292	; 0x124
    28f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    28f8:	blx	r2
    28fa:	b.n	25a8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    28fc:	blx	r2
    28fe:	b.n	2620 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2900:	mov	r0, r7
    2902:	blx	r3
    2904:	b.n	2640 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2906:	mov	r0, r7
    2908:	blx	r2
    290a:	b.n	2662 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    290c:	mov	r0, r9
    290e:	blx	r2
    2910:	b.n	28d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2912:	mov	r0, r9
    2914:	blx	r2
    2916:	b.n	27a6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2918:	mov	r0, r8
    291a:	blx	r2
    291c:	b.n	28de <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    291e:	mov	r0, r8
    2920:	blx	r2
    2922:	b.n	27ae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2924:	mov	r0, sl
    2926:	blx	r2
    2928:	b.n	28ce <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    292a:	mov	r0, sl
    292c:	blx	r2
    292e:	b.n	279e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2930:	.word	0x00000eb1
    2934:	.word	0x00016a5c
    2938:	mov	r0, fp
    293a:	blx	r2
    293c:	b.n	28c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    293e:	mov	r0, fp
    2940:	blx	r2
    2942:	b.n	2796 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2944:	mov	r0, r2
    2946:	blx	r3
    2948:	b.n	28be <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    294a:	mov	r0, r2
    294c:	blx	r3
    294e:	b.n	278e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

00002950 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    2950:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2954:	mov	r5, r0
    2956:	sub	sp, #8
    2958:	mov	r7, r2
    OpenFileByIndex(handle);
    295a:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    295c:	mov	r8, r3
    295e:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    2962:	bl	24e4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2966:	ldr.w	r4, [r5, #204]	; 0xcc
    296a:	cmp	r4, #0
    296c:	beq.n	2a44 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    296e:	ldr	r0, [r4, #0]
    2970:	ldr	r2, [pc, #308]	; (2aa8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    2972:	ldr	r6, [r0, #52]	; 0x34
    2974:	cmp	r6, r2
    2976:	mov.w	r3, #0
    297a:	bne.n	2a74 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x124>
    297c:	ldr	r1, [r4, #16]
    297e:	cmp	r1, #0
    2980:	beq.n	2a3c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xec>
    2982:	ldr	r2, [r1, #0]
    2984:	ldr.w	sl, [r2, #52]	; 0x34
    2988:	cmp	sl, r6
    298a:	bne.n	2a7e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12e>
    298c:	ldr.w	lr, [r1, #16]
    2990:	cmp.w	lr, #0
    2994:	beq.n	2a4a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    2996:	ldr.w	r2, [lr]
    299a:	ldr	r6, [r2, #52]	; 0x34
    299c:	cmp	r6, sl
    299e:	bne.n	2a88 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x138>
    29a0:	ldr.w	lr, [lr, #16]
    29a4:	cmp.w	lr, #0
    29a8:	beq.n	2a4a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    29aa:	ldr.w	r2, [lr]
    29ae:	ldr.w	sl, [r2, #52]	; 0x34
    29b2:	cmp	sl, r6
    29b4:	bne.n	2a92 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x142>
    29b6:	ldr.w	lr, [lr, #16]
    29ba:	cmp.w	lr, #0
    29be:	beq.n	2a4a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    29c0:	ldr.w	r3, [lr]
    29c4:	ldr	r6, [r3, #52]	; 0x34
    29c6:	cmp	r6, sl
    29c8:	bne.n	2a9c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14c>
    29ca:	ldr.w	r6, [lr, #16]
    29ce:	cmp	r6, #0
    29d0:	beq.n	2a4a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    29d2:	ldr	r1, [r6, #0]
    29d4:	movs	r3, #0
    29d6:	str	r3, [sp, #0]
    29d8:	mov	r2, r7
    29da:	mov	r0, r6
    29dc:	ldr	r1, [r1, #52]	; 0x34
    29de:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    29e0:	ldr.w	r4, [r5, #204]	; 0xcc
    29e4:	cmp	r4, #0
    29e6:	beq.n	2a44 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    29e8:	ldr	r2, [r4, #0]
    29ea:	ldr	r3, [pc, #192]	; (2aac <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    29ec:	ldr	r5, [r2, #40]	; 0x28
    29ee:	cmp	r5, r3
    29f0:	bne.n	2a56 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    29f2:	ldr	r0, [r4, #16]
    29f4:	cbz	r0, 2a44 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    29f6:	ldr	r2, [r0, #0]
    29f8:	ldr	r4, [r2, #40]	; 0x28
    29fa:	cmp	r4, r3
    29fc:	bne.n	2a66 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    29fe:	ldr	r0, [r0, #16]
    2a00:	cbz	r0, 2a44 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2a02:	ldr	r2, [r0, #0]
    2a04:	ldr	r4, [r2, #40]	; 0x28
    2a06:	cmp	r4, r3
    2a08:	bne.n	2a66 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2a0a:	ldr	r0, [r0, #16]
    2a0c:	cbz	r0, 2a44 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2a0e:	ldr	r2, [r0, #0]
    2a10:	ldr	r4, [r2, #40]	; 0x28
    2a12:	cmp	r4, r3
    2a14:	bne.n	2a66 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2a16:	ldr	r0, [r0, #16]
    2a18:	cbz	r0, 2a44 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2a1a:	ldr	r2, [r0, #0]
    2a1c:	ldr	r4, [r2, #40]	; 0x28
    2a1e:	cmp	r4, r3
    2a20:	bne.n	2a66 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2a22:	ldr	r0, [r0, #16]
    2a24:	cbz	r0, 2a44 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2a26:	ldr	r2, [r0, #0]
    2a28:	ldr	r4, [r2, #40]	; 0x28
    2a2a:	cmp	r4, r3
    2a2c:	bne.n	2a66 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    2a2e:	ldr	r0, [r0, #16]
    2a30:	cbz	r0, 2a44 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    2a32:	ldr	r3, [r0, #0]
    2a34:	mov	r2, r9
    2a36:	mov	r1, r8
    2a38:	ldr	r3, [r3, #40]	; 0x28
    2a3a:	b.n	2a5e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10e>
    2a3c:	ldr	r5, [r0, #40]	; 0x28
    2a3e:	ldr	r3, [pc, #108]	; (2aac <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2a40:	cmp	r5, r3
    2a42:	bne.n	2a56 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    2a44:	add	sp, #8
    2a46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a4a:	ldr	r5, [r0, #40]	; 0x28
    2a4c:	ldr	r3, [pc, #92]	; (2aac <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2a4e:	cmp	r5, r3
    2a50:	bne.n	2a56 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    2a52:	mov	r0, r1
    2a54:	b.n	29f6 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa6>
    2a56:	mov	r2, r9
    2a58:	mov	r1, r8
    2a5a:	mov	r0, r4
    2a5c:	mov	r3, r5
    2a5e:	add	sp, #8
    2a60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a64:	bx	r3
    2a66:	mov	r2, r9
    2a68:	mov	r1, r8
    2a6a:	mov	r3, r4
    2a6c:	add	sp, #8
    2a6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a72:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2a74:	str	r3, [sp, #0]
    2a76:	mov	r2, r7
    2a78:	mov	r0, r4
    2a7a:	blx	r6
    2a7c:	b.n	29e0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2a7e:	str	r3, [sp, #0]
    2a80:	mov	r2, r7
    2a82:	mov	r0, r1
    2a84:	blx	sl
    2a86:	b.n	29e0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2a88:	str	r3, [sp, #0]
    2a8a:	mov	r2, r7
    2a8c:	mov	r0, lr
    2a8e:	blx	r6
    2a90:	b.n	29e0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2a92:	str	r3, [sp, #0]
    2a94:	mov	r2, r7
    2a96:	mov	r0, lr
    2a98:	blx	sl
    2a9a:	b.n	29e0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2a9c:	movs	r3, #0
    2a9e:	mov	r2, r7
    2aa0:	mov	r0, lr
    2aa2:	str	r3, [sp, #0]
    2aa4:	blx	r6
    2aa6:	b.n	29e0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    2aa8:	.word	0x000004c9
    2aac:	.word	0x0000047d

00002ab0 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2ab0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    2ab4:	cmp.w	r2, #4294967295
    2ab8:	ite	ne
    2aba:	movne	r6, r2
    2abc:	moveq	r6, r1
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2abe:	sub.w	sp, sp, #800	; 0x320
    2ac2:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2ac4:	mov	r2, r6
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2ac6:	mov	r7, r1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2ac8:	mov	r1, r0
    2aca:	add	r0, sp, #256	; 0x100
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2acc:	mov	r8, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2ace:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    2ad2:	ldr	r1, [sp, #824]	; 0x338
    2ad4:	mov.w	r2, #256	; 0x100
    2ad8:	add	r0, sp, #544	; 0x220
    2ada:	bl	13550 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2ade:	ldr.w	r5, [r4, #244]	; 0xf4
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    2ae2:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    2ae6:	ldr	r2, [sp, #260]	; 0x104
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    2ae8:	strh.w	r3, [sp, #542]	; 0x21e
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2aec:	adds	r1, r5, #1
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2aee:	movs	r3, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2af0:	str.w	r1, [r4, #244]	; 0xf4
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2af4:	str	r3, [sp, #532]	; 0x214
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2af6:	mov	r1, r5
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    2af8:	movs	r3, #1
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    2afa:	str	r2, [sp, #536]	; 0x218
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2afc:	mov	r0, r4
    2afe:	add	r2, sp, #528	; 0x210
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    2b00:	str	r6, [sp, #528]	; 0x210
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    2b02:	strb.w	r8, [sp, #540]	; 0x21c
    // New folder is empty, scanned = true.
    r.scanned = 1;
    2b06:	strb.w	r3, [sp, #541]	; 0x21d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2b0a:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    2b0e:	mov	r1, r6
    2b10:	add	r2, sp, #256	; 0x100
    2b12:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    2b14:	str	r5, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    2b16:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    2b1a:	cmp.w	r8, #0
    2b1e:	bne.n	2b34 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x84>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    2b20:	mov	r0, r4
    2b22:	movs	r2, #2
    2b24:	mov	r1, r5
    2b26:	bl	24e4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    2b2a:	mov	r0, r5
    2b2c:	add.w	sp, sp, #800	; 0x320
    2b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    2b34:	mov	r0, r4
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    2b36:	add.w	r4, r4, r7, lsl #2
    2b3a:	mov	r2, sp
    2b3c:	mov	r1, r5
    2b3e:	mov.w	r3, #256	; 0x100
    2b42:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2b46:	ldr	r0, [r4, #88]	; 0x58
    2b48:	ldr	r3, [r0, #0]
    2b4a:	mov	r1, sp
    2b4c:	ldr	r3, [r3, #8]
    2b4e:	blx	r3
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    2b50:	mov	r0, r5
    2b52:	add.w	sp, sp, #800	; 0x320
    2b56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b5a:	nop

00002b5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    2b5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b60:	cmp.w	r2, #4294967295
    2b64:	ite	ne
    2b66:	movne	r6, r2
    2b68:	moveq	r6, r1
    2b6a:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    2b6e:	mov	r1, r0
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    2b70:	mov	r4, r0
    
    Record record = ReadIndexRecord(i);
    2b72:	mov	r2, r6
    2b74:	add	r0, sp, #16
    2b76:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    2b7a:	ldrb.w	r3, [sp, #28]
    2b7e:	cbz	r3, 2b86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2b80:	ldrb.w	r2, [sp, #29]
    2b84:	cbz	r2, 2b8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    2b86:	add.w	sp, sp, #564	; 0x234
    2b8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    2b8e:	mov	r0, r4
    2b90:	mov	r1, r6
    2b92:	bl	24e4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2b96:	ldr.w	r0, [r4, #204]	; 0xcc
    2b9a:	cmp	r0, #0
    2b9c:	beq.n	2b86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2b9e:	ldr	r3, [r0, #0]
    2ba0:	ldr.w	r8, [pc, #892]	; 2f20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c4>
    2ba4:	ldr	r3, [r3, #68]	; 0x44
    2ba6:	cmp	r3, r8
    2ba8:	bne.n	2c64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    2baa:	ldr	r0, [r0, #16]
    2bac:	cmp	r0, #0
    2bae:	beq.n	2b86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2bb0:	ldr	r3, [r0, #0]
    2bb2:	ldr	r3, [r3, #68]	; 0x44
    2bb4:	cmp	r3, r8
    2bb6:	bne.n	2c64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    2bb8:	ldr	r0, [r0, #16]
    2bba:	cmp	r0, #0
    2bbc:	beq.n	2b86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2bbe:	ldr	r3, [r0, #0]
    2bc0:	ldr	r3, [r3, #68]	; 0x44
    2bc2:	cmp	r3, r8
    2bc4:	bne.n	2c64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    2bc6:	ldr	r0, [r0, #16]
    2bc8:	cmp	r0, #0
    2bca:	beq.n	2b86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2bcc:	ldr	r3, [r0, #0]
    2bce:	ldr	r3, [r3, #68]	; 0x44
    2bd0:	cmp	r3, r8
    2bd2:	bne.n	2c64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    2bd4:	ldr	r0, [r0, #16]
    2bd6:	cmp	r0, #0
    2bd8:	beq.n	2b86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2bda:	ldr	r3, [r0, #0]
    2bdc:	ldr	r3, [r3, #68]	; 0x44
    2bde:	cmp	r3, r8
    2be0:	bne.n	2c64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    2be2:	ldr	r0, [r0, #16]
    2be4:	cmp	r0, #0
    2be6:	beq.n	2b86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2be8:	ldr	r3, [r0, #0]
    2bea:	ldr	r3, [r3, #68]	; 0x44
    2bec:	blx	r3
      if (!sd_isOpen(file_)) return;
    2bee:	cmp	r0, #0
    2bf0:	beq.n	2b86 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2bf2:	ldr.w	r9, [pc, #804]	; 2f18 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>
    2bf6:	ldr.w	fp, [pc, #812]	; 2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    2bfa:	movs	r5, #0
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    2bfc:	ldr.w	r1, [r4, #204]	; 0xcc
    2c00:	cmp	r1, #0
    2c02:	beq.n	2c68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    2c04:	ldr	r3, [r1, #0]
    2c06:	ldr	r3, [r3, #80]	; 0x50
    2c08:	cmp	r3, fp
    2c0a:	bne.w	311e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    2c0e:	ldr	r1, [r1, #16]
    2c10:	cbz	r1, 2c68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    2c12:	ldr	r3, [r1, #0]
    2c14:	ldr	r3, [r3, #80]	; 0x50
    2c16:	cmp	r3, fp
    2c18:	bne.w	311e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    2c1c:	ldr	r1, [r1, #16]
    2c1e:	cbz	r1, 2c68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    2c20:	ldr	r3, [r1, #0]
    2c22:	ldr	r3, [r3, #80]	; 0x50
    2c24:	cmp	r3, fp
    2c26:	bne.w	311e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    2c2a:	ldr	r1, [r1, #16]
    2c2c:	cbz	r1, 2c68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    2c2e:	ldr	r3, [r1, #0]
    2c30:	ldr	r3, [r3, #80]	; 0x50
    2c32:	cmp	r3, fp
    2c34:	bne.w	311e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    2c38:	ldr	r1, [r1, #16]
    2c3a:	cbz	r1, 2c68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    2c3c:	ldr	r3, [r1, #0]
    2c3e:	ldr	r3, [r3, #80]	; 0x50
    2c40:	cmp	r3, fp
    2c42:	bne.w	311e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    2c46:	ldr	r1, [r1, #16]
    2c48:	cbz	r1, 2c68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    2c4a:	ldr	r3, [r1, #0]
    2c4c:	ldr	r3, [r3, #80]	; 0x50
    2c4e:	cmp	r3, fp
    2c50:	bne.w	311e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    2c54:	ldr	r1, [r1, #16]
    2c56:	cbz	r1, 2c68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    2c58:	ldr	r3, [r1, #0]
    2c5a:	movs	r2, #0
    2c5c:	ldr	r3, [r3, #80]	; 0x50
    2c5e:	add	r0, sp, #288	; 0x120
    2c60:	blx	r3
    2c62:	b.n	2c7e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2c64:	blx	r3
    2c66:	b.n	2bee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x92>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2c68:	movs	r3, #0
    2c6a:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2c6e:	str.w	r9, [sp, #288]	; 0x120
    2c72:	strb.w	r3, [sp, #292]	; 0x124
    2c76:	strb.w	r3, [sp, #300]	; 0x12c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    2c7a:	str	r3, [sp, #304]	; 0x130
    2c7c:	str	r2, [sp, #296]	; 0x128
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2c7e:	ldr.w	r2, [r4, #224]	; 0xe0
    2c82:	cmp	r2, #0
    2c84:	beq.n	2d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2c86:	ldr	r3, [r2, #16]
    2c88:	subs	r3, #1
    2c8a:	str	r3, [r2, #16]
    2c8c:	cmp	r3, #0
    2c8e:	bne.n	2d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2c90:	ldr.w	r7, [r4, #224]	; 0xe0
    2c94:	cmp	r7, #0
    2c96:	beq.n	2d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2c98:	ldr	r3, [r7, #0]
    2c9a:	ldr	r0, [pc, #632]	; (2f14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    2c9c:	ldr	r3, [r3, #32]
    2c9e:	cmp	r3, r0
    2ca0:	bne.w	3140 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e4>
    2ca4:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ca6:	str.w	r9, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2caa:	cbz	r2, 2d12 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    2cac:	ldr	r3, [r2, #16]
    2cae:	subs	r3, #1
    2cb0:	str	r3, [r2, #16]
    2cb2:	cbnz	r3, 2d12 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    2cb4:	ldr.w	sl, [r7, #16]
    2cb8:	cmp.w	sl, #0
    2cbc:	beq.n	2d12 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    2cbe:	ldr.w	r3, [sl]
    2cc2:	ldr	r3, [r3, #32]
    2cc4:	cmp	r3, r0
    2cc6:	bne.w	330e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b2>
    2cca:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2cce:	ldr	r3, [pc, #584]	; (2f18 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    2cd0:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2cd4:	cbz	r2, 2d0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    2cd6:	ldr	r3, [r2, #16]
    2cd8:	subs	r3, #1
    2cda:	str	r3, [r2, #16]
    2cdc:	cbnz	r3, 2d0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    2cde:	ldr.w	r3, [sl, #16]
    2ce2:	cbz	r3, 2d0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    2ce4:	ldr	r2, [r3, #0]
    2ce6:	ldr	r2, [r2, #32]
    2ce8:	cmp	r2, r0
    2cea:	bne.w	3320 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
    2cee:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2cf0:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2cf4:	cbz	r1, 2d02 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    2cf6:	ldr	r2, [r1, #16]
    2cf8:	subs	r2, #1
    2cfa:	str	r2, [r1, #16]
    2cfc:	cmp	r2, #0
    2cfe:	beq.w	3158 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5fc>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2d02:	mov	r0, r3
    2d04:	movs	r1, #20
    2d06:	bl	119b0 <operator delete(void*, unsigned int)>
    2d0a:	mov	r0, sl
    2d0c:	movs	r1, #20
    2d0e:	bl	119b0 <operator delete(void*, unsigned int)>
    2d12:	mov	r0, r7
    2d14:	movs	r1, #20
    2d16:	bl	119b0 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2d1a:	ldr	r3, [sp, #304]	; 0x130
    2d1c:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    2d20:	cmp	r3, #0
    2d22:	beq.n	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    2d24:	ldr	r2, [r3, #16]
    2d26:	adds	r2, #1
    2d28:	str	r2, [r3, #16]
    2d2a:	ldr	r2, [sp, #304]	; 0x130
		return *this;
	}
	virtual ~File() {
    2d2c:	str.w	r9, [sp, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d30:	cmp	r2, #0
    2d32:	beq.n	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    2d34:	ldr	r3, [r2, #16]
    2d36:	subs	r3, #1
    2d38:	str	r3, [r2, #16]
    2d3a:	cmp	r3, #0
    2d3c:	bne.n	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    2d3e:	ldr	r7, [sp, #304]	; 0x130
    2d40:	cmp	r7, #0
    2d42:	beq.n	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    2d44:	ldr	r3, [r7, #0]
    2d46:	ldr	r0, [pc, #460]	; (2f14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    2d48:	ldr	r3, [r3, #32]
    2d4a:	cmp	r3, r0
    2d4c:	bne.w	313a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5de>
    2d50:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d52:	ldr	r3, [pc, #452]	; (2f18 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    2d54:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d56:	cbz	r2, 2dbe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    2d58:	ldr	r3, [r2, #16]
    2d5a:	subs	r3, #1
    2d5c:	str	r3, [r2, #16]
    2d5e:	cbnz	r3, 2dbe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    2d60:	ldr.w	sl, [r7, #16]
    2d64:	cmp.w	sl, #0
    2d68:	beq.n	2dbe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    2d6a:	ldr.w	r3, [sl]
    2d6e:	ldr	r3, [r3, #32]
    2d70:	cmp	r3, r0
    2d72:	bne.w	3314 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b8>
    2d76:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d7a:	ldr	r3, [pc, #412]	; (2f18 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    2d7c:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d80:	cbz	r2, 2db6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    2d82:	ldr	r3, [r2, #16]
    2d84:	subs	r3, #1
    2d86:	str	r3, [r2, #16]
    2d88:	cbnz	r3, 2db6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    2d8a:	ldr.w	r3, [sl, #16]
    2d8e:	cbz	r3, 2db6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    2d90:	ldr	r2, [r3, #0]
    2d92:	ldr	r2, [r2, #32]
    2d94:	cmp	r2, r0
    2d96:	bne.w	331a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7be>
    2d9a:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2d9c:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2da0:	cbz	r1, 2dae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    2da2:	ldr	r2, [r1, #16]
    2da4:	subs	r2, #1
    2da6:	str	r2, [r1, #16]
    2da8:	cmp	r2, #0
    2daa:	beq.w	3236 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6da>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2dae:	mov	r0, r3
    2db0:	movs	r1, #20
    2db2:	bl	119b0 <operator delete(void*, unsigned int)>
    2db6:	mov	r0, sl
    2db8:	movs	r1, #20
    2dba:	bl	119b0 <operator delete(void*, unsigned int)>
    2dbe:	mov	r0, r7
    2dc0:	movs	r1, #20
    2dc2:	bl	119b0 <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2dc6:	ldr.w	r0, [r4, #224]	; 0xe0
    2dca:	cmp	r0, #0
    2dcc:	beq.w	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2dd0:	ldr	r3, [r0, #0]
    2dd2:	ldr	r3, [r3, #68]	; 0x44
    2dd4:	cmp	r3, r8
    2dd6:	bne.w	2f10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2dda:	ldr	r0, [r0, #16]
    2ddc:	cmp	r0, #0
    2dde:	beq.w	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2de2:	ldr	r3, [r0, #0]
    2de4:	ldr	r3, [r3, #68]	; 0x44
    2de6:	cmp	r3, r8
    2de8:	bne.w	2f10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2dec:	ldr	r0, [r0, #16]
    2dee:	cmp	r0, #0
    2df0:	beq.w	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2df4:	ldr	r3, [r0, #0]
    2df6:	ldr	r3, [r3, #68]	; 0x44
    2df8:	cmp	r3, r8
    2dfa:	bne.w	2f10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2dfe:	ldr	r0, [r0, #16]
    2e00:	cmp	r0, #0
    2e02:	beq.n	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2e04:	ldr	r3, [r0, #0]
    2e06:	ldr	r3, [r3, #68]	; 0x44
    2e08:	cmp	r3, r8
    2e0a:	bne.w	2f10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2e0e:	ldr	r0, [r0, #16]
    2e10:	cmp	r0, #0
    2e12:	beq.n	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2e14:	ldr	r3, [r0, #0]
    2e16:	ldr	r3, [r3, #68]	; 0x44
    2e18:	cmp	r3, r8
    2e1a:	bne.n	2f10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2e1c:	ldr	r0, [r0, #16]
    2e1e:	cmp	r0, #0
    2e20:	beq.n	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2e22:	ldr	r3, [r0, #0]
    2e24:	ldr	r3, [r3, #68]	; 0x44
    2e26:	cmp	r3, r8
    2e28:	bne.n	2f10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2e2a:	ldr	r0, [r0, #16]
    2e2c:	cmp	r0, #0
    2e2e:	beq.n	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2e30:	ldr	r3, [r0, #0]
    2e32:	ldr	r3, [r3, #68]	; 0x44
    2e34:	cmp	r3, r8
    2e36:	bne.n	2f10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2e38:	ldr	r0, [r0, #16]
    2e3a:	cmp	r0, #0
    2e3c:	beq.n	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2e3e:	ldr	r3, [r0, #0]
    2e40:	ldr	r3, [r3, #68]	; 0x44
    2e42:	cmp	r3, r8
    2e44:	bne.n	2f10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    2e46:	ldr	r0, [r0, #16]
    2e48:	cmp	r0, #0
    2e4a:	beq.n	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    2e4c:	ldr	r3, [r0, #0]
    2e4e:	ldr	r3, [r3, #68]	; 0x44
    2e50:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    2e52:	cmp	r0, #0
    2e54:	beq.n	2ef6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    2e56:	ldr.w	r3, [r4, #224]	; 0xe0

        Record r;
        r.store = record.store;
    2e5a:	ldrh.w	r2, [sp, #30]
        r.parent = i;
    2e5e:	str	r6, [sp, #288]	; 0x120
        r.sibling = sibling;
    2e60:	str	r5, [sp, #296]	; 0x128
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    2e62:	strh.w	r2, [sp, #302]	; 0x12e
    2e66:	cmp	r3, #0
    2e68:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2e6c:	ldr	r1, [r3, #0]
    2e6e:	ldr	r2, [pc, #172]	; (2f1c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c0>)
    2e70:	ldr	r1, [r1, #76]	; 0x4c
    2e72:	cmp	r1, r2
    2e74:	bne.n	2f28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>
    2e76:	ldr	r0, [r3, #16]
    2e78:	cmp	r0, #0
    2e7a:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2e7e:	ldr	r1, [r0, #0]
    2e80:	ldr	r1, [r1, #76]	; 0x4c
    2e82:	cmp	r1, r2
    2e84:	bne.n	2f2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2e86:	ldr	r0, [r0, #16]
    2e88:	cmp	r0, #0
    2e8a:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2e8e:	ldr	r1, [r0, #0]
    2e90:	ldr	r1, [r1, #76]	; 0x4c
    2e92:	cmp	r1, r2
    2e94:	bne.n	2f2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2e96:	ldr	r0, [r0, #16]
    2e98:	cmp	r0, #0
    2e9a:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2e9e:	ldr	r1, [r0, #0]
    2ea0:	ldr	r1, [r1, #76]	; 0x4c
    2ea2:	cmp	r1, r2
    2ea4:	bne.n	2f2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2ea6:	ldr	r0, [r0, #16]
    2ea8:	cmp	r0, #0
    2eaa:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2eae:	ldr	r1, [r0, #0]
    2eb0:	ldr	r1, [r1, #76]	; 0x4c
    2eb2:	cmp	r1, r2
    2eb4:	bne.n	2f2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2eb6:	ldr	r0, [r0, #16]
    2eb8:	cmp	r0, #0
    2eba:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2ebe:	ldr	r1, [r0, #0]
    2ec0:	ldr	r1, [r1, #76]	; 0x4c
    2ec2:	cmp	r1, r2
    2ec4:	bne.n	2f2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2ec6:	ldr	r0, [r0, #16]
    2ec8:	cmp	r0, #0
    2eca:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2ece:	ldr	r1, [r0, #0]
    2ed0:	ldr	r1, [r1, #76]	; 0x4c
    2ed2:	cmp	r1, r2
    2ed4:	bne.n	2f2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2ed6:	ldr	r0, [r0, #16]
    2ed8:	cmp	r0, #0
    2eda:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2ede:	ldr	r1, [r0, #0]
    2ee0:	ldr	r1, [r1, #76]	; 0x4c
    2ee2:	cmp	r1, r2
    2ee4:	bne.n	2f2a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    2ee6:	ldr	r0, [r0, #16]
    2ee8:	cmp	r0, #0
    2eea:	beq.w	3092 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    2eee:	ldr	r3, [r0, #0]
    2ef0:	ldr	r3, [r3, #76]	; 0x4c
    2ef2:	blx	r3
    2ef4:	b.n	2f2c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    2ef6:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    2ef8:	mov	r1, r6
    2efa:	mov	r0, r4
    2efc:	add	r2, sp, #16
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    2efe:	str	r5, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    2f00:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    2f04:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    2f08:	add.w	sp, sp, #564	; 0x234
    2f0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2f10:	blx	r3
    2f12:	b.n	2e52 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2f6>
    2f14:	.word	0x00000eb1
    2f18:	.word	0x00016a5c
    2f1c:	.word	0x0000052d
    2f20:	.word	0x0000050d
    2f24:	.word	0x00000539
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    2f28:	mov	r0, r3
    2f2a:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    2f2c:	strb.w	r0, [sp, #300]	; 0x12c
    2f30:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    2f34:	cmp	r0, #0
    2f36:	beq.w	3098 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53c>
    2f3a:	movs	r0, #0
        r.scanned = false;
    2f3c:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    2f3e:	str	r0, [sp, #292]	; 0x124
        r.scanned = false;
    2f40:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    2f44:	cmp	r3, #0
    2f46:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2f4a:	ldr	r1, [r3, #0]
    2f4c:	ldr	r2, [pc, #504]	; (3148 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    2f4e:	ldr	r1, [r1, #72]	; 0x48
    2f50:	cmp	r1, r2
    2f52:	bne.w	3112 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    2f56:	ldr	r0, [r3, #16]
    2f58:	cmp	r0, #0
    2f5a:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2f5e:	ldr	r3, [r0, #0]
    2f60:	ldr	r3, [r3, #72]	; 0x48
    2f62:	cmp	r3, r2
    2f64:	bne.n	2fd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2f66:	ldr	r0, [r0, #16]
    2f68:	cmp	r0, #0
    2f6a:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2f6e:	ldr	r3, [r0, #0]
    2f70:	ldr	r3, [r3, #72]	; 0x48
    2f72:	cmp	r3, r2
    2f74:	bne.n	2fd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2f76:	ldr	r0, [r0, #16]
    2f78:	cmp	r0, #0
    2f7a:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2f7e:	ldr	r3, [r0, #0]
    2f80:	ldr	r3, [r3, #72]	; 0x48
    2f82:	cmp	r3, r2
    2f84:	bne.n	2fd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2f86:	ldr	r0, [r0, #16]
    2f88:	cmp	r0, #0
    2f8a:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2f8e:	ldr	r3, [r0, #0]
    2f90:	ldr	r3, [r3, #72]	; 0x48
    2f92:	cmp	r3, r2
    2f94:	bne.n	2fd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2f96:	ldr	r0, [r0, #16]
    2f98:	cmp	r0, #0
    2f9a:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2f9e:	ldr	r3, [r0, #0]
    2fa0:	ldr	r3, [r3, #72]	; 0x48
    2fa2:	cmp	r3, r2
    2fa4:	bne.n	2fd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2fa6:	ldr	r0, [r0, #16]
    2fa8:	cmp	r0, #0
    2faa:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2fae:	ldr	r3, [r0, #0]
    2fb0:	ldr	r3, [r3, #72]	; 0x48
    2fb2:	cmp	r3, r2
    2fb4:	bne.n	2fd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2fb6:	ldr	r0, [r0, #16]
    2fb8:	cmp	r0, #0
    2fba:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2fbe:	ldr	r3, [r0, #0]
    2fc0:	ldr	r3, [r3, #72]	; 0x48
    2fc2:	cmp	r3, r2
    2fc4:	bne.n	2fd8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    2fc6:	ldr	r0, [r0, #16]
    2fc8:	cmp	r0, #0
    2fca:	beq.w	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    2fce:	ldr	r3, [r0, #0]
    2fd0:	ldr	r3, [r3, #72]	; 0x48
    2fd2:	blx	r3
    2fd4:	mov	r1, r0
    2fd6:	b.n	2fdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    2fd8:	blx	r3
    2fda:	mov	r1, r0
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
    2fdc:	mov.w	r2, #256	; 0x100
    2fe0:	add	r0, sp, #304	; 0x130
    2fe2:	bl	13550 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2fe6:	ldr.w	r5, [r4, #244]	; 0xf4
    2fea:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    2fec:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2fee:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    2ff2:	mov	r1, r5
    2ff4:	add	r2, sp, #288	; 0x120
    2ff6:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2ffa:	ldr.w	r0, [r4, #224]	; 0xe0
    2ffe:	cmp	r0, #0
    3000:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3004:	ldr	r2, [r0, #0]
    3006:	ldr	r3, [pc, #324]	; (314c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>)
    3008:	ldr	r2, [r2, #64]	; 0x40
    300a:	cmp	r2, r3
    300c:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    300e:	ldr	r0, [r0, #16]
    3010:	cmp	r0, #0
    3012:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3016:	ldr	r2, [r0, #0]
    3018:	ldr	r2, [r2, #64]	; 0x40
    301a:	cmp	r2, r3
    301c:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    301e:	ldr	r0, [r0, #16]
    3020:	cmp	r0, #0
    3022:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3026:	ldr	r2, [r0, #0]
    3028:	ldr	r2, [r2, #64]	; 0x40
    302a:	cmp	r2, r3
    302c:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    302e:	ldr	r0, [r0, #16]
    3030:	cmp	r0, #0
    3032:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3036:	ldr	r2, [r0, #0]
    3038:	ldr	r2, [r2, #64]	; 0x40
    303a:	cmp	r2, r3
    303c:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    303e:	ldr	r0, [r0, #16]
    3040:	cmp	r0, #0
    3042:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3046:	ldr	r2, [r0, #0]
    3048:	ldr	r2, [r2, #64]	; 0x40
    304a:	cmp	r2, r3
    304c:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    304e:	ldr	r0, [r0, #16]
    3050:	cmp	r0, #0
    3052:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3056:	ldr	r2, [r0, #0]
    3058:	ldr	r2, [r2, #64]	; 0x40
    305a:	cmp	r2, r3
    305c:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    305e:	ldr	r0, [r0, #16]
    3060:	cmp	r0, #0
    3062:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3066:	ldr	r2, [r0, #0]
    3068:	ldr	r2, [r2, #64]	; 0x40
    306a:	cmp	r2, r3
    306c:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    306e:	ldr	r0, [r0, #16]
    3070:	cmp	r0, #0
    3072:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3076:	ldr	r2, [r0, #0]
    3078:	ldr	r2, [r2, #64]	; 0x40
    307a:	cmp	r2, r3
    307c:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    307e:	ldr	r0, [r0, #16]
    3080:	cmp	r0, #0
    3082:	beq.w	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3086:	ldr	r3, [r0, #0]
    3088:	ldr	r3, [r3, #64]	; 0x40
    308a:	blx	r3
    308c:	b.n	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    308e:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    3090:	b.n	2bfc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3092:	movs	r2, #0
    3094:	strb.w	r2, [sp, #300]	; 0x12c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3098:	cmp	r3, #0
    309a:	beq.n	3130 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d4>
    309c:	ldr	r1, [r3, #0]
    309e:	ldr	r2, [pc, #176]	; (3150 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f4>)
    30a0:	ldr	r1, [r1, #60]	; 0x3c
    30a2:	cmp	r1, r2
    30a4:	bne.n	3126 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    30a6:	ldr	r0, [r3, #16]
    30a8:	cbz	r0, 30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    30aa:	ldr	r1, [r0, #0]
    30ac:	ldr	r1, [r1, #60]	; 0x3c
    30ae:	cmp	r1, r2
    30b0:	bne.n	3128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    30b2:	ldr	r0, [r0, #16]
    30b4:	cbz	r0, 30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    30b6:	ldr	r1, [r0, #0]
    30b8:	ldr	r1, [r1, #60]	; 0x3c
    30ba:	cmp	r1, r2
    30bc:	bne.n	3128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    30be:	ldr	r0, [r0, #16]
    30c0:	cbz	r0, 30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    30c2:	ldr	r1, [r0, #0]
    30c4:	ldr	r1, [r1, #60]	; 0x3c
    30c6:	cmp	r1, r2
    30c8:	bne.n	3128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    30ca:	ldr	r0, [r0, #16]
    30cc:	cbz	r0, 30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    30ce:	ldr	r1, [r0, #0]
    30d0:	ldr	r1, [r1, #60]	; 0x3c
    30d2:	cmp	r1, r2
    30d4:	bne.n	3128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    30d6:	ldr	r0, [r0, #16]
    30d8:	cbz	r0, 30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    30da:	ldr	r1, [r0, #0]
    30dc:	ldr	r1, [r1, #60]	; 0x3c
    30de:	cmp	r1, r2
    30e0:	bne.n	3128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    30e2:	ldr	r0, [r0, #16]
    30e4:	cbz	r0, 30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    30e6:	ldr	r1, [r0, #0]
    30e8:	ldr	r1, [r1, #60]	; 0x3c
    30ea:	cmp	r1, r2
    30ec:	bne.n	3128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    30ee:	ldr	r0, [r0, #16]
    30f0:	cbz	r0, 30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    30f2:	ldr	r3, [r0, #0]
    30f4:	ldr	r3, [r3, #60]	; 0x3c
    30f6:	blx	r3
    30f8:	ldr.w	r3, [r4, #224]	; 0xe0
    30fc:	b.n	2f3c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    30fe:	movs	r2, #0
        r.scanned = false;
    3100:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3104:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3106:	str	r2, [sp, #292]	; 0x124
    3108:	ldr	r1, [r1, #72]	; 0x48
    310a:	ldr	r2, [pc, #60]	; (3148 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    310c:	cmp	r1, r2
    310e:	beq.w	2f56 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3fa>
    3112:	mov	r0, r3
    3114:	blx	r1
    3116:	mov	r1, r0
    3118:	b.n	2fdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    311a:	ldr	r1, [pc, #56]	; (3154 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    311c:	b.n	2fdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    311e:	movs	r2, #0
    3120:	add	r0, sp, #288	; 0x120
    3122:	blx	r3
    3124:	b.n	2c7e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3126:	mov	r0, r3
    3128:	blx	r1
    312a:	ldr.w	r3, [r4, #224]	; 0xe0
    312e:	b.n	2f3c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
    3130:	str	r3, [sp, #292]	; 0x124
        r.scanned = false;
    3132:	strb.w	r3, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3136:	ldr	r1, [pc, #28]	; (3154 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3138:	b.n	2fdc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    313a:	mov	r0, r7
    313c:	blx	r3
    313e:	b.n	2dc6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3140:	mov	r0, r7
    3142:	blx	r3
    3144:	b.n	2d1a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3146:	nop
    3148:	.word	0x00000519
    314c:	.word	0x00000501
    3150:	.word	0x000004f1
    3154:	.word	0x00016b54
    3158:	ldr	r2, [r3, #16]
    315a:	cmp	r2, #0
    315c:	beq.w	2d02 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3160:	ldr	r1, [r2, #0]
    3162:	ldr	r1, [r1, #32]
    3164:	cmp	r1, r0
    3166:	bne.w	3330 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d4>
    316a:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    316e:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3172:	cmp.w	lr, #0
    3176:	beq.n	3228 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3178:	ldr.w	r1, [lr, #16]
    317c:	subs	r1, #1
    317e:	str.w	r1, [lr, #16]
    3182:	cmp	r1, #0
    3184:	bne.n	3228 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3186:	ldr	r1, [r2, #16]
    3188:	str	r1, [sp, #0]
    318a:	cmp	r1, #0
    318c:	beq.n	3228 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    318e:	ldr	r1, [sp, #0]
    3190:	ldr	r1, [r1, #0]
    3192:	ldr	r1, [r1, #32]
    3194:	cmp	r1, r0
    3196:	bne.w	3348 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ec>
    319a:	ldr	r1, [sp, #0]
    319c:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    31a0:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    31a4:	cmp.w	lr, #0
    31a8:	beq.n	3218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    31aa:	ldr.w	r1, [lr, #16]
    31ae:	subs	r1, #1
    31b0:	str.w	r1, [lr, #16]
    31b4:	cbnz	r1, 3218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    31b6:	ldr	r1, [sp, #0]
    31b8:	ldr.w	ip, [r1, #16]
    31bc:	cmp.w	ip, #0
    31c0:	beq.n	3218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    31c2:	ldr.w	r1, [ip]
    31c6:	ldr	r1, [r1, #32]
    31c8:	cmp	r1, r0
    31ca:	bne.w	3364 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x808>
    31ce:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    31d2:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    31d6:	cbz	r0, 3208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    31d8:	ldr	r1, [r0, #16]
    31da:	add.w	lr, r1, #4294967295
    31de:	str.w	lr, [r0, #16]
    31e2:	cmp.w	lr, #0
    31e6:	bne.n	3208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    31e8:	ldr.w	r0, [ip, #16]
    31ec:	cbz	r0, 3208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    31ee:	ldr.w	lr, [r0]
    31f2:	str.w	ip, [sp, #12]
    31f6:	str	r2, [sp, #8]
    31f8:	str	r3, [sp, #4]
    31fa:	ldr.w	r3, [lr, #32]
    31fe:	blx	r3
    3200:	ldr.w	ip, [sp, #12]
    3204:	ldr	r2, [sp, #8]
    3206:	ldr	r3, [sp, #4]
    3208:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    320a:	mov	r0, ip
    320c:	movs	r1, #20
    320e:	str	r3, [sp, #4]
    3210:	bl	119b0 <operator delete(void*, unsigned int)>
    3214:	ldr	r3, [sp, #4]
    3216:	ldr	r2, [sp, #8]
    3218:	ldr	r0, [sp, #0]
    321a:	str	r2, [sp, #8]
    321c:	movs	r1, #20
    321e:	str	r3, [sp, #4]
    3220:	bl	119b0 <operator delete(void*, unsigned int)>
    3224:	ldr	r3, [sp, #4]
    3226:	ldr	r2, [sp, #8]
    3228:	str	r3, [sp, #0]
    322a:	mov	r0, r2
    322c:	movs	r1, #20
    322e:	bl	119b0 <operator delete(void*, unsigned int)>
    3232:	ldr	r3, [sp, #0]
    3234:	b.n	2d02 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3236:	ldr	r2, [r3, #16]
    3238:	cmp	r2, #0
    323a:	beq.w	2dae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    323e:	ldr	r1, [r2, #0]
    3240:	ldr	r1, [r1, #32]
    3242:	cmp	r1, r0
    3244:	bne.n	3326 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ca>
    3246:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    324a:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    324e:	cmp.w	lr, #0
    3252:	beq.n	3300 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3254:	ldr.w	r1, [lr, #16]
    3258:	subs	r1, #1
    325a:	str.w	r1, [lr, #16]
    325e:	cmp	r1, #0
    3260:	bne.n	3300 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3262:	ldr	r1, [r2, #16]
    3264:	str	r1, [sp, #0]
    3266:	cmp	r1, #0
    3268:	beq.n	3300 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    326a:	ldr	r1, [sp, #0]
    326c:	ldr	r1, [r1, #0]
    326e:	ldr	r1, [r1, #32]
    3270:	cmp	r1, r0
    3272:	bne.n	333a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7de>
    3274:	ldr	r1, [sp, #0]
    3276:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    327a:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    327e:	cmp.w	lr, #0
    3282:	beq.n	32f0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    3284:	ldr.w	r1, [lr, #16]
    3288:	subs	r1, #1
    328a:	str.w	r1, [lr, #16]
    328e:	cbnz	r1, 32f0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    3290:	ldr	r1, [sp, #0]
    3292:	ldr.w	ip, [r1, #16]
    3296:	cmp.w	ip, #0
    329a:	beq.n	32f0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    329c:	ldr.w	r1, [ip]
    32a0:	ldr	r1, [r1, #32]
    32a2:	cmp	r1, r0
    32a4:	bne.n	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7fa>
    32a6:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    32aa:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    32ae:	cbz	r0, 32e0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    32b0:	ldr	r1, [r0, #16]
    32b2:	add.w	lr, r1, #4294967295
    32b6:	str.w	lr, [r0, #16]
    32ba:	cmp.w	lr, #0
    32be:	bne.n	32e0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    32c0:	ldr.w	r0, [ip, #16]
    32c4:	cbz	r0, 32e0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    32c6:	ldr.w	lr, [r0]
    32ca:	str.w	ip, [sp, #12]
    32ce:	str	r2, [sp, #8]
    32d0:	str	r3, [sp, #4]
    32d2:	ldr.w	r3, [lr, #32]
    32d6:	blx	r3
    32d8:	ldr.w	ip, [sp, #12]
    32dc:	ldr	r2, [sp, #8]
    32de:	ldr	r3, [sp, #4]
    32e0:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    32e2:	mov	r0, ip
    32e4:	movs	r1, #20
    32e6:	str	r3, [sp, #4]
    32e8:	bl	119b0 <operator delete(void*, unsigned int)>
    32ec:	ldr	r3, [sp, #4]
    32ee:	ldr	r2, [sp, #8]
    32f0:	ldr	r0, [sp, #0]
    32f2:	str	r2, [sp, #8]
    32f4:	movs	r1, #20
    32f6:	str	r3, [sp, #4]
    32f8:	bl	119b0 <operator delete(void*, unsigned int)>
    32fc:	ldr	r3, [sp, #4]
    32fe:	ldr	r2, [sp, #8]
    3300:	str	r3, [sp, #0]
    3302:	mov	r0, r2
    3304:	movs	r1, #20
    3306:	bl	119b0 <operator delete(void*, unsigned int)>
    330a:	ldr	r3, [sp, #0]
    330c:	b.n	2dae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    330e:	mov	r0, sl
    3310:	blx	r3
    3312:	b.n	2d12 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3314:	mov	r0, sl
    3316:	blx	r3
    3318:	b.n	2dbe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    331a:	mov	r0, r3
    331c:	blx	r2
    331e:	b.n	2db6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    3320:	mov	r0, r3
    3322:	blx	r2
    3324:	b.n	2d0a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3326:	str	r3, [sp, #0]
    3328:	mov	r0, r2
    332a:	blx	r1
    332c:	ldr	r3, [sp, #0]
    332e:	b.n	2dae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    3330:	str	r3, [sp, #0]
    3332:	mov	r0, r2
    3334:	blx	r1
    3336:	ldr	r3, [sp, #0]
    3338:	b.n	2d02 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    333a:	str	r2, [sp, #8]
    333c:	str	r3, [sp, #4]
    333e:	ldr	r0, [sp, #0]
    3340:	blx	r1
    3342:	ldr	r2, [sp, #8]
    3344:	ldr	r3, [sp, #4]
    3346:	b.n	3300 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3348:	str	r2, [sp, #8]
    334a:	str	r3, [sp, #4]
    334c:	ldr	r0, [sp, #0]
    334e:	blx	r1
    3350:	ldr	r2, [sp, #8]
    3352:	ldr	r3, [sp, #4]
    3354:	b.n	3228 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3356:	str	r2, [sp, #8]
    3358:	str	r3, [sp, #4]
    335a:	mov	r0, ip
    335c:	blx	r1
    335e:	ldr	r2, [sp, #8]
    3360:	ldr	r3, [sp, #4]
    3362:	b.n	32f0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    3364:	str	r2, [sp, #8]
    3366:	str	r3, [sp, #4]
    3368:	mov	r0, ip
    336a:	blx	r1
    336c:	ldr	r2, [sp, #8]
    336e:	ldr	r3, [sp, #4]
    3370:	b.n	3218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    3372:	nop

00003374 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3374:	ldrb.w	r3, [r0, #248]	; 0xf8
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    3378:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    337a:	push	{r4, r5, r6, lr}
    337c:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    337e:	strb.w	r2, [r0, #249]	; 0xf9
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    3382:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3384:	cbz	r3, 33a4 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    3386:	ldr.w	r3, [r5, #244]	; 0xf4
    338a:	cbz	r3, 33a2 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x2e>
    338c:	movs	r4, #0
    338e:	mov	r2, r4
    3390:	mov	r1, r6
    3392:	mov	r0, r5
    3394:	bl	2b5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    3398:	ldr.w	r3, [r5, #244]	; 0xf4
    339c:	adds	r4, #1
    339e:	cmp	r3, r4
    33a0:	bhi.n	338e <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x1a>
    33a2:	pop	{r4, r5, r6, pc}
    33a4:	bl	1eec <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    33a8:	b.n	3386 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x12>
    33aa:	nop

000033ac <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    33ac:	push	{r4, r5, lr}
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    33ae:	cmp.w	r2, #4294967295
    33b2:	ite	ne
    33b4:	movne	r5, r2
    33b6:	moveq	r5, r1

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    33b8:	mov	r4, r0
    33ba:	sub	sp, #276	; 0x114
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization

      ScanDir(store, parent);
    33bc:	mov	r2, r5
    33be:	bl	2b5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    33c2:	movs	r3, #1
    33c4:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    33c8:	mov	r2, r5
    33ca:	mov	r1, r4
    33cc:	mov	r0, sp
    33ce:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    33d2:	ldr	r3, [sp, #4]
    33d4:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    33d8:	add	sp, #276	; 0x114
    33da:	pop	{r4, r5, pc}

000033dc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    33dc:	push	{r4, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    33de:	ldrb.w	r3, [r0, #248]	; 0xf8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    33e2:	sub	sp, #8
    33e4:	mov	r4, r0

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    33e6:	cbz	r3, 340c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    GenerateIndex(store);
    if (parent) 
    33e8:	cbz	r2, 33f6 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1a>
    33ea:	mov	r0, r4
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    33ec:	add	sp, #8
    33ee:	ldmia.w	sp!, {r4, lr}
    33f2:	b.w	33ac <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    33f6:	ldrb.w	r3, [r4, #249]	; 0xf9
    33fa:	cbz	r3, 341a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    33fc:	movs	r2, #0
      next_ = 1;
    33fe:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3400:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    3404:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    3408:	add	sp, #8
    340a:	pop	{r4, pc}
    340c:	stmia.w	sp, {r1, r2}
    3410:	bl	1eec <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    3414:	ldmia.w	sp, {r1, r2}
    3418:	b.n	33e8 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xc>
    341a:	mov	r0, r4
    341c:	bl	3374 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>
    3420:	b.n	33fc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x20>
    3422:	nop

00003424 <MTPStorage_SD::removeFile(unsigned long, char*)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    3424:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3428:	add.w	r9, r0, r1, lsl #2
    342c:	sub	sp, #340	; 0x154
    342e:	str	r1, [sp, #12]
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3430:	ldr.w	r1, [r9, #88]	; 0x58
    3434:	str	r0, [sp, #8]
    3436:	ldr	r3, [r1, #0]
    3438:	str	r2, [sp, #4]
    343a:	ldr	r4, [r3, #0]
    343c:	add	r0, sp, #40	; 0x28
    343e:	movs	r3, #0
    3440:	blx	r4
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3442:	ldr	r0, [sp, #56]	; 0x38
    3444:	cmp	r0, #0
    3446:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    344a:	ldr	r3, [r0, #0]
    344c:	ldr.w	sl, [pc, #868]	; 37b4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x390>
    3450:	ldr	r3, [r3, #76]	; 0x4c
    3452:	cmp	r3, sl
    3454:	bne.w	3954 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3458:	ldr	r0, [r0, #16]
    345a:	cmp	r0, #0
    345c:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3460:	ldr	r3, [r0, #0]
    3462:	ldr	r3, [r3, #76]	; 0x4c
    3464:	cmp	r3, sl
    3466:	bne.w	3954 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    346a:	ldr	r0, [r0, #16]
    346c:	cmp	r0, #0
    346e:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3472:	ldr	r3, [r0, #0]
    3474:	ldr	r3, [r3, #76]	; 0x4c
    3476:	cmp	r3, sl
    3478:	bne.w	3954 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    347c:	ldr	r0, [r0, #16]
    347e:	cmp	r0, #0
    3480:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3484:	ldr	r3, [r0, #0]
    3486:	ldr	r3, [r3, #76]	; 0x4c
    3488:	cmp	r3, sl
    348a:	bne.w	3954 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    348e:	ldr	r0, [r0, #16]
    3490:	cmp	r0, #0
    3492:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3496:	ldr	r3, [r0, #0]
    3498:	ldr	r3, [r3, #76]	; 0x4c
    349a:	cmp	r3, sl
    349c:	bne.w	3954 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    34a0:	ldr	r0, [r0, #16]
    34a2:	cmp	r0, #0
    34a4:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    34a8:	ldr	r3, [r0, #0]
    34aa:	ldr	r3, [r3, #76]	; 0x4c
    34ac:	cmp	r3, sl
    34ae:	bne.w	3954 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    34b2:	ldr	r0, [r0, #16]
    34b4:	cmp	r0, #0
    34b6:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    34ba:	ldr	r3, [r0, #0]
    34bc:	ldr	r3, [r3, #76]	; 0x4c
    34be:	cmp	r3, sl
    34c0:	bne.w	3954 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    34c4:	ldr	r0, [r0, #16]
    34c6:	cmp	r0, #0
    34c8:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    34cc:	ldr	r3, [r0, #0]
    34ce:	ldr	r3, [r3, #76]	; 0x4c
    34d0:	cmp	r3, sl
    34d2:	bne.w	3954 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    34d6:	ldr	r0, [r0, #16]
    34d8:	cmp	r0, #0
    34da:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    34de:	ldr	r3, [r0, #0]
    34e0:	ldr	r3, [r3, #76]	; 0x4c
    34e2:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
    34e4:	cmp	r0, #0
    34e6:	beq.w	37f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    34ea:	ldr.w	fp, [pc, #700]	; 37a8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
    34ee:	ldr.w	r8, [pc, #712]	; 37b8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x394>
    34f2:	movs	r4, #0
    34f4:	mov	r7, fp
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    34f6:	ldr	r1, [sp, #56]	; 0x38
    34f8:	cmp	r1, #0
    34fa:	beq.w	37da <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    34fe:	ldr	r3, [r1, #0]
    3500:	ldr	r2, [pc, #668]	; (37a0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x37c>)
    3502:	ldr	r3, [r3, #80]	; 0x50
    3504:	cmp	r3, r2
    3506:	bne.w	3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    350a:	ldr	r1, [r1, #16]
    350c:	cmp	r1, #0
    350e:	beq.w	37da <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3512:	ldr	r3, [r1, #0]
    3514:	ldr	r3, [r3, #80]	; 0x50
    3516:	cmp	r3, r2
    3518:	bne.w	3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    351c:	ldr	r1, [r1, #16]
    351e:	cmp	r1, #0
    3520:	beq.w	37da <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3524:	ldr	r3, [r1, #0]
    3526:	ldr	r3, [r3, #80]	; 0x50
    3528:	cmp	r3, r2
    352a:	bne.w	3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    352e:	ldr	r1, [r1, #16]
    3530:	cmp	r1, #0
    3532:	beq.w	37da <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3536:	ldr	r3, [r1, #0]
    3538:	ldr	r3, [r3, #80]	; 0x50
    353a:	cmp	r3, r2
    353c:	bne.w	3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3540:	ldr	r1, [r1, #16]
    3542:	cmp	r1, #0
    3544:	beq.w	37da <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3548:	ldr	r3, [r1, #0]
    354a:	ldr	r3, [r3, #80]	; 0x50
    354c:	cmp	r3, r2
    354e:	bne.w	3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3552:	ldr	r1, [r1, #16]
    3554:	cmp	r1, #0
    3556:	beq.w	37da <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    355a:	ldr	r3, [r1, #0]
    355c:	ldr	r3, [r3, #80]	; 0x50
    355e:	cmp	r3, r2
    3560:	bne.w	3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3564:	ldr	r1, [r1, #16]
    3566:	cmp	r1, #0
    3568:	beq.w	37da <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    356c:	ldr	r3, [r1, #0]
    356e:	movs	r2, #0
    3570:	ldr	r3, [r3, #80]	; 0x50
    3572:	add	r0, sp, #60	; 0x3c
    3574:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3576:	cbz	r4, 3594 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3578:	ldr	r3, [r4, #16]
    357a:	subs	r3, #1
    357c:	str	r3, [r4, #16]
    357e:	cbnz	r3, 3594 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3580:	ldr	r3, [r4, #0]
    3582:	ldr	r2, [pc, #544]	; (37a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3584:	ldr	r3, [r3, #32]
    3586:	cmp	r3, r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3588:	mov	r0, r4
    358a:	bne.w	3b48 <MTPStorage_SD::removeFile(unsigned long, char*)+0x724>
    358e:	movs	r1, #20
    3590:	bl	119b0 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3594:	ldr	r4, [sp, #76]	; 0x4c
		if (f) f->refcount++;
    3596:	cmp	r4, #0
    3598:	beq.w	3b14 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
    359c:	ldr	r3, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    359e:	ldr	r2, [r4, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    35a0:	adds	r0, r3, #1
    35a2:	str	r0, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    35a4:	ldr	r2, [r2, #68]	; 0x44
    35a6:	cmp	r2, r8
    35a8:	bne.w	3b00 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6dc>
    35ac:	cmp	r0, #0
    35ae:	beq.w	3ae0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    35b2:	ldr.w	r3, [r3, #1]
    35b6:	ldr	r3, [r3, #68]	; 0x44
    35b8:	cmp	r3, r8
    35ba:	bne.w	3af8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    35be:	ldr	r0, [r0, #16]
    35c0:	cmp	r0, #0
    35c2:	beq.w	3ae0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    35c6:	ldr	r3, [r0, #0]
    35c8:	ldr	r3, [r3, #68]	; 0x44
    35ca:	cmp	r3, r8
    35cc:	bne.w	3af8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    35d0:	ldr	r0, [r0, #16]
    35d2:	cmp	r0, #0
    35d4:	beq.w	3ae0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    35d8:	ldr	r3, [r0, #0]
    35da:	ldr	r3, [r3, #68]	; 0x44
    35dc:	cmp	r3, r8
    35de:	bne.w	3af8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    35e2:	ldr	r0, [r0, #16]
    35e4:	cmp	r0, #0
    35e6:	beq.w	3ae0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    35ea:	ldr	r3, [r0, #0]
    35ec:	ldr	r3, [r3, #68]	; 0x44
    35ee:	cmp	r3, r8
    35f0:	bne.w	3af8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    35f4:	ldr	r0, [r0, #16]
    35f6:	cmp	r0, #0
    35f8:	beq.w	3ae0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    35fc:	ldr	r3, [r0, #0]
    35fe:	ldr	r3, [r3, #68]	; 0x44
    3600:	blx	r3
    3602:	ldr	r2, [sp, #76]	; 0x4c
    3604:	mov	r6, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3606:	str	r7, [sp, #60]	; 0x3c
    3608:	ldr	r1, [pc, #412]	; (37a8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    360a:	cmp	r2, #0
    360c:	beq.n	36a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    360e:	ldr	r3, [r2, #16]
    3610:	subs	r3, #1
    3612:	str	r3, [r2, #16]
    3614:	cmp	r3, #0
    3616:	bne.n	36a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3618:	ldr	r5, [sp, #76]	; 0x4c
    361a:	cmp	r5, #0
    361c:	beq.n	36a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    361e:	ldr	r3, [r5, #0]
    3620:	ldr	r2, [pc, #384]	; (37a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3622:	ldr	r3, [r3, #32]
    3624:	cmp	r3, r2
    3626:	bne.w	3b0a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6e6>
    362a:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    362c:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    362e:	cmp	r2, #0
    3630:	beq.n	369c <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3632:	ldr	r3, [r2, #16]
    3634:	subs	r3, #1
    3636:	str	r3, [r2, #16]
    3638:	cbnz	r3, 369c <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    363a:	ldr.w	fp, [r5, #16]
    363e:	cmp.w	fp, #0
    3642:	beq.n	369c <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3644:	ldr.w	r3, [fp]
    3648:	ldr	r2, [pc, #344]	; (37a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    364a:	ldr	r3, [r3, #32]
    364c:	cmp	r3, r2
    364e:	bne.w	3b4c <MTPStorage_SD::removeFile(unsigned long, char*)+0x728>
    3652:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3656:	str.w	r1, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    365a:	cbz	r2, 3694 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    365c:	ldr	r3, [r2, #16]
    365e:	subs	r3, #1
    3660:	str	r3, [r2, #16]
    3662:	cbnz	r3, 3694 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3664:	ldr.w	r3, [fp, #16]
    3668:	cbz	r3, 3694 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    366a:	ldr	r2, [r3, #0]
    366c:	ldr	r1, [pc, #308]	; (37a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    366e:	ldr	r2, [r2, #32]
    3670:	cmp	r2, r1
    3672:	bne.w	3b52 <MTPStorage_SD::removeFile(unsigned long, char*)+0x72e>
    3676:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3678:	str	r7, [r3, #0]
    367a:	ldr.w	ip, [pc, #300]	; 37a8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    367e:	cbz	r1, 368c <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3680:	ldr	r2, [r1, #16]
    3682:	subs	r2, #1
    3684:	str	r2, [r1, #16]
    3686:	cmp	r2, #0
    3688:	beq.w	396c <MTPStorage_SD::removeFile(unsigned long, char*)+0x548>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    368c:	mov	r0, r3
    368e:	movs	r1, #20
    3690:	bl	119b0 <operator delete(void*, unsigned int)>
    3694:	mov	r0, fp
    3696:	movs	r1, #20
    3698:	bl	119b0 <operator delete(void*, unsigned int)>
    369c:	mov	r0, r5
    369e:	movs	r1, #20
    36a0:	bl	119b0 <operator delete(void*, unsigned int)>
  {
    File f2;
    while(f2=f1.openNextFile())
    36a4:	cmp	r6, #0
    36a6:	beq.w	3b14 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    36aa:	cmp	r4, #0
    36ac:	beq.w	3ab0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x68c>
    36b0:	ldr	r2, [r4, #0]
    36b2:	ldr	r3, [pc, #248]	; (37ac <MTPStorage_SD::removeFile(unsigned long, char*)+0x388>)
    36b4:	ldr	r2, [r2, #72]	; 0x48
    36b6:	cmp	r2, r3
    36b8:	bne.w	3aec <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c8>
    36bc:	ldr	r0, [r4, #16]
    36be:	cmp	r0, #0
    36c0:	beq.w	3af4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    36c4:	ldr	r2, [r0, #0]
    36c6:	ldr	r2, [r2, #72]	; 0x48
    36c8:	cmp	r2, r3
    36ca:	bne.w	3aee <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    36ce:	ldr	r0, [r0, #16]
    36d0:	cmp	r0, #0
    36d2:	beq.w	3af4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    36d6:	ldr	r2, [r0, #0]
    36d8:	ldr	r2, [r2, #72]	; 0x48
    36da:	cmp	r2, r3
    36dc:	bne.w	3aee <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    36e0:	ldr	r0, [r0, #16]
    36e2:	cmp	r0, #0
    36e4:	beq.w	3af4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    36e8:	ldr	r2, [r0, #0]
    36ea:	ldr	r2, [r2, #72]	; 0x48
    36ec:	cmp	r2, r3
    36ee:	bne.w	3aee <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    36f2:	ldr	r0, [r0, #16]
    36f4:	cmp	r0, #0
    36f6:	beq.w	3af4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    36fa:	ldr	r2, [r0, #0]
    36fc:	ldr	r2, [r2, #72]	; 0x48
    36fe:	cmp	r2, r3
    3700:	bne.w	3aee <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3704:	ldr	r0, [r0, #16]
    3706:	cmp	r0, #0
    3708:	beq.w	3af4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    370c:	ldr	r2, [r0, #0]
    370e:	ldr	r2, [r2, #72]	; 0x48
    3710:	cmp	r2, r3
    3712:	bne.w	3aee <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3716:	ldr	r0, [r0, #16]
    3718:	cmp	r0, #0
    371a:	beq.w	3af4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    371e:	ldr	r3, [r0, #0]
    3720:	ldr	r3, [r3, #72]	; 0x48
    3722:	blx	r3
    3724:	mov	r3, r0
    { sprintf(tname,"%s/%s",file,f2.name());
    3726:	add	r5, sp, #80	; 0x50
    3728:	ldr	r1, [pc, #132]	; (37b0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x38c>)
    372a:	ldr	r2, [sp, #4]
    372c:	mov	r0, r5
    372e:	bl	133f4 <sprintf>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3732:	ldr	r3, [r4, #0]
    3734:	ldr	r3, [r3, #76]	; 0x4c
    3736:	cmp	r3, sl
    3738:	bne.w	3ae6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c2>
    373c:	ldr	r0, [r4, #16]
    373e:	cmp	r0, #0
    3740:	beq.w	3abe <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3744:	ldr	r3, [r0, #0]
    3746:	ldr	r3, [r3, #76]	; 0x4c
    3748:	cmp	r3, sl
    374a:	bne.w	3ae8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    374e:	ldr	r0, [r0, #16]
    3750:	cmp	r0, #0
    3752:	beq.w	3abe <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3756:	ldr	r3, [r0, #0]
    3758:	ldr	r3, [r3, #76]	; 0x4c
    375a:	cmp	r3, sl
    375c:	bne.w	3ae8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3760:	ldr	r0, [r0, #16]
    3762:	cmp	r0, #0
    3764:	beq.w	3abe <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3768:	ldr	r3, [r0, #0]
    376a:	ldr	r3, [r3, #76]	; 0x4c
    376c:	cmp	r3, sl
    376e:	bne.w	3ae8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3772:	ldr	r0, [r0, #16]
    3774:	cmp	r0, #0
    3776:	beq.w	3abe <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    377a:	ldr	r3, [r0, #0]
    377c:	ldr	r3, [r3, #76]	; 0x4c
    377e:	cmp	r3, sl
    3780:	bne.w	3ae8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3784:	ldr	r0, [r0, #16]
    3786:	cmp	r0, #0
    3788:	beq.w	3abe <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    378c:	ldr	r3, [r0, #0]
    378e:	ldr	r3, [r3, #76]	; 0x4c
    3790:	cmp	r3, sl
    3792:	bne.w	3ae8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3796:	ldr	r0, [r0, #16]
    3798:	cmp	r0, #0
    379a:	beq.w	3abe <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    379e:	b.n	37bc <MTPStorage_SD::removeFile(unsigned long, char*)+0x398>
    37a0:	.word	0x00000539
    37a4:	.word	0x00000eb1
    37a8:	.word	0x00016a5c
    37ac:	.word	0x00000519
    37b0:	.word	0x00016ce8
    37b4:	.word	0x0000052d
    37b8:	.word	0x0000050d
    37bc:	ldr	r3, [r0, #0]
    37be:	ldr	r3, [r3, #76]	; 0x4c
    37c0:	blx	r3
      if(f2.isDirectory()) removeFile(store,tname); else  sd_remove(store,tname);
    37c2:	cmp	r0, #0
    37c4:	beq.w	3abe <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    37c8:	ldr	r1, [sp, #12]
    37ca:	ldr	r0, [sp, #8]
    37cc:	mov	r2, r5
    37ce:	bl	3424 <MTPStorage_SD::removeFile(unsigned long, char*)>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    37d2:	ldr	r1, [sp, #56]	; 0x38
    37d4:	cmp	r1, #0
    37d6:	bne.w	34fe <MTPStorage_SD::removeFile(unsigned long, char*)+0xda>
    37da:	movs	r3, #0
    37dc:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    37e0:	str	r7, [sp, #60]	; 0x3c
    37e2:	strb.w	r3, [sp, #64]	; 0x40
    37e6:	strb.w	r3, [sp, #72]	; 0x48
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    37ea:	str	r3, [sp, #76]	; 0x4c
    37ec:	str	r2, [sp, #68]	; 0x44
    37ee:	b.n	3576 <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    37f0:	ldr	r4, [sp, #4]
    37f2:	ldr.w	fp, [pc, #368]	; 3964 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>
    37f6:	mov	r0, r4
    37f8:	bl	13580 <strlen>
    37fc:	mov	r1, r0
    37fe:	mov	r0, r4
    3800:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3804:	ldr	r0, [pc, #344]	; (3960 <MTPStorage_SD::removeFile(unsigned long, char*)+0x53c>)
    3806:	bl	11800 <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    380a:	ldr.w	r0, [r9, #88]	; 0x58
    380e:	ldr	r3, [r0, #0]
    3810:	mov	r1, r4
    3812:	ldr	r3, [r3, #16]
    3814:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3816:	ldr	r2, [sp, #56]	; 0x38
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3818:	str.w	fp, [sp, #40]	; 0x28
    381c:	ldr	r1, [pc, #324]	; (3964 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    381e:	cmp	r2, #0
    3820:	beq.w	394e <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3824:	ldr	r3, [r2, #16]
    3826:	subs	r3, #1
    3828:	str	r3, [r2, #16]
    382a:	cmp	r3, #0
    382c:	bne.w	394e <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3830:	ldr	r4, [sp, #56]	; 0x38
    3832:	cmp	r4, #0
    3834:	beq.w	394e <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3838:	ldr	r3, [r4, #0]
    383a:	ldr	r0, [pc, #300]	; (3968 <MTPStorage_SD::removeFile(unsigned long, char*)+0x544>)
    383c:	ldr	r3, [r3, #32]
    383e:	cmp	r3, r0
    3840:	bne.w	3b58 <MTPStorage_SD::removeFile(unsigned long, char*)+0x734>
    3844:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3846:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3848:	cmp	r2, #0
    384a:	beq.n	3946 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    384c:	ldr	r3, [r2, #16]
    384e:	subs	r3, #1
    3850:	str	r3, [r2, #16]
    3852:	cmp	r3, #0
    3854:	bne.n	3946 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3856:	ldr	r5, [r4, #16]
    3858:	cmp	r5, #0
    385a:	beq.n	3946 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    385c:	ldr	r3, [r5, #0]
    385e:	ldr	r3, [r3, #32]
    3860:	cmp	r3, r0
    3862:	bne.w	3b6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x748>
    3866:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3868:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    386a:	cmp	r2, #0
    386c:	beq.n	393e <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    386e:	ldr	r3, [r2, #16]
    3870:	subs	r3, #1
    3872:	str	r3, [r2, #16]
    3874:	cmp	r3, #0
    3876:	bne.n	393e <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3878:	ldr	r6, [r5, #16]
    387a:	cmp	r6, #0
    387c:	beq.n	393e <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    387e:	ldr	r3, [r6, #0]
    3880:	ldr	r3, [r3, #32]
    3882:	cmp	r3, r0
    3884:	bne.w	3b80 <MTPStorage_SD::removeFile(unsigned long, char*)+0x75c>
    3888:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    388a:	str.w	fp, [r6]
    388e:	ldr	r1, [pc, #212]	; (3964 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3890:	cmp	r2, #0
    3892:	beq.n	3936 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3894:	ldr	r3, [r2, #16]
    3896:	subs	r3, #1
    3898:	str	r3, [r2, #16]
    389a:	cmp	r3, #0
    389c:	bne.n	3936 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    389e:	ldr	r7, [r6, #16]
    38a0:	cmp	r7, #0
    38a2:	beq.n	3936 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    38a4:	ldr	r3, [r7, #0]
    38a6:	ldr	r3, [r3, #32]
    38a8:	cmp	r3, r0
    38aa:	bne.w	3b86 <MTPStorage_SD::removeFile(unsigned long, char*)+0x762>
    38ae:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38b0:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38b2:	cmp	r2, #0
    38b4:	beq.n	392e <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    38b6:	ldr	r3, [r2, #16]
    38b8:	subs	r3, #1
    38ba:	str	r3, [r2, #16]
    38bc:	cmp	r3, #0
    38be:	bne.n	392e <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    38c0:	ldr.w	r8, [r7, #16]
    38c4:	cmp.w	r8, #0
    38c8:	beq.n	392e <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    38ca:	ldr.w	r3, [r8]
    38ce:	ldr	r3, [r3, #32]
    38d0:	cmp	r3, r0
    38d2:	bne.w	3ba8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x784>
    38d6:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38da:	str.w	fp, [r8]
    38de:	ldr	r1, [pc, #132]	; (3964 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38e0:	cbz	r2, 3926 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    38e2:	ldr	r3, [r2, #16]
    38e4:	subs	r3, #1
    38e6:	str	r3, [r2, #16]
    38e8:	cbnz	r3, 3926 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    38ea:	ldr.w	r9, [r8, #16]
    38ee:	cmp.w	r9, #0
    38f2:	beq.n	3926 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    38f4:	ldr.w	r3, [r9]
    38f8:	ldr	r3, [r3, #32]
    38fa:	cmp	r3, r0
    38fc:	bne.w	3bbe <MTPStorage_SD::removeFile(unsigned long, char*)+0x79a>
    3900:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3904:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3908:	cbz	r2, 391e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    390a:	ldr	r3, [r2, #16]
    390c:	subs	r3, #1
    390e:	str	r3, [r2, #16]
    3910:	cbnz	r3, 391e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    3912:	ldr.w	r0, [r9, #16]
    3916:	cbz	r0, 391e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    3918:	ldr	r3, [r0, #0]
    391a:	ldr	r3, [r3, #32]
    391c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    391e:	mov	r0, r9
    3920:	movs	r1, #20
    3922:	bl	119b0 <operator delete(void*, unsigned int)>
    3926:	mov	r0, r8
    3928:	movs	r1, #20
    392a:	bl	119b0 <operator delete(void*, unsigned int)>
    392e:	mov	r0, r7
    3930:	movs	r1, #20
    3932:	bl	119b0 <operator delete(void*, unsigned int)>
    3936:	mov	r0, r6
    3938:	movs	r1, #20
    393a:	bl	119b0 <operator delete(void*, unsigned int)>
    393e:	mov	r0, r5
    3940:	movs	r1, #20
    3942:	bl	119b0 <operator delete(void*, unsigned int)>
    3946:	mov	r0, r4
    3948:	movs	r1, #20
    394a:	bl	119b0 <operator delete(void*, unsigned int)>
    sd_rmdir(store,file);
  }
  else
  { sd_remove(store,file);
  }
}
    394e:	add	sp, #340	; 0x154
    3950:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3954:	blx	r3
    3956:	b.n	34e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc0>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3958:	movs	r2, #0
    395a:	add	r0, sp, #60	; 0x3c
    395c:	blx	r3
    395e:	b.n	3576 <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
    3960:	.word	0x1fff0b00
    3964:	.word	0x00016a5c
    3968:	.word	0x00000eb1
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    396c:	ldr	r2, [r3, #16]
    396e:	cmp	r2, #0
    3970:	beq.w	368c <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3974:	ldr	r1, [r2, #0]
    3976:	ldr	r0, [pc, #588]	; (3bc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3978:	ldr	r1, [r1, #32]
    397a:	cmp	r1, r0
    397c:	bne.w	3b62 <MTPStorage_SD::removeFile(unsigned long, char*)+0x73e>
    3980:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3984:	str.w	ip, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3988:	cmp.w	lr, #0
    398c:	beq.w	3aa2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3990:	ldr.w	r1, [lr, #16]
    3994:	subs	r1, #1
    3996:	str.w	r1, [lr, #16]
    399a:	cmp	r1, #0
    399c:	bne.w	3aa2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    39a0:	ldr	r1, [r2, #16]
    39a2:	str	r1, [sp, #16]
    39a4:	cmp	r1, #0
    39a6:	beq.n	3aa2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    39a8:	ldr	r1, [sp, #16]
    39aa:	ldr	r0, [pc, #536]	; (3bc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    39ac:	ldr	r1, [r1, #0]
    39ae:	ldr	r1, [r1, #32]
    39b0:	cmp	r1, r0
    39b2:	bne.w	3b72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x74e>
    39b6:	ldr	r1, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39b8:	ldr.w	ip, [pc, #536]	; 3bd4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7b0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39bc:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39c0:	str	r7, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39c2:	cmp.w	lr, #0
    39c6:	beq.n	3a92 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    39c8:	ldr.w	r1, [lr, #16]
    39cc:	subs	r1, #1
    39ce:	str.w	r1, [lr, #16]
    39d2:	cmp	r1, #0
    39d4:	bne.n	3a92 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    39d6:	ldr	r1, [sp, #16]
    39d8:	ldr	r1, [r1, #16]
    39da:	str	r1, [sp, #20]
    39dc:	cmp	r1, #0
    39de:	beq.n	3a92 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    39e0:	ldr	r1, [sp, #20]
    39e2:	ldr	r0, [pc, #480]	; (3bc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    39e4:	ldr	r1, [r1, #0]
    39e6:	ldr	r1, [r1, #32]
    39e8:	cmp	r1, r0
    39ea:	bne.w	3b8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x768>
    39ee:	ldr	r0, [sp, #20]
    39f0:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39f4:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39f8:	cmp.w	lr, #0
    39fc:	beq.n	3a82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    39fe:	ldr.w	r1, [lr, #16]
    3a02:	subs	r1, #1
    3a04:	str.w	r1, [lr, #16]
    3a08:	cmp	r1, #0
    3a0a:	bne.n	3a82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3a0c:	ldr	r1, [sp, #20]
    3a0e:	ldr	r1, [r1, #16]
    3a10:	str	r1, [sp, #24]
    3a12:	cmp	r1, #0
    3a14:	beq.n	3a82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3a16:	ldr	r1, [sp, #24]
    3a18:	ldr	r0, [pc, #424]	; (3bc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3a1a:	ldr	r1, [r1, #0]
    3a1c:	ldr	r1, [r1, #32]
    3a1e:	cmp	r1, r0
    3a20:	bne.w	3b9a <MTPStorage_SD::removeFile(unsigned long, char*)+0x776>
    3a24:	ldr	r0, [sp, #24]
    3a26:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3a2a:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3a2e:	cmp.w	lr, #0
    3a32:	beq.n	3a72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3a34:	ldr.w	r1, [lr, #16]
    3a38:	subs	r1, #1
    3a3a:	str.w	r1, [lr, #16]
    3a3e:	cbnz	r1, 3a72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3a40:	ldr	r1, [sp, #24]
    3a42:	ldr	r1, [r1, #16]
    3a44:	cbz	r1, 3a72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3a46:	ldr	r0, [r1, #0]
    3a48:	ldr	r0, [r0, #32]
    3a4a:	mov	lr, r0
    3a4c:	ldr	r0, [pc, #372]	; (3bc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3a4e:	cmp	lr, r0
    3a50:	bne.w	3bae <MTPStorage_SD::removeFile(unsigned long, char*)+0x78a>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3a54:	mov	r0, r1
    3a56:	str	r2, [sp, #36]	; 0x24
    3a58:	str.w	r7, [r0], #16
    3a5c:	str	r3, [sp, #32]
    3a5e:	str	r1, [sp, #28]
		invalidate();
    3a60:	bl	1958 <File::invalidate() [clone .isra.1]>
	}
    3a64:	ldr	r1, [sp, #28]
    3a66:	mov	r0, r1
    3a68:	movs	r1, #20
    3a6a:	bl	119b0 <operator delete(void*, unsigned int)>
    3a6e:	ldr	r3, [sp, #32]
    3a70:	ldr	r2, [sp, #36]	; 0x24
    3a72:	ldr	r0, [sp, #24]
    3a74:	str	r2, [sp, #32]
    3a76:	movs	r1, #20
    3a78:	str	r3, [sp, #28]
    3a7a:	bl	119b0 <operator delete(void*, unsigned int)>
    3a7e:	ldr	r3, [sp, #28]
    3a80:	ldr	r2, [sp, #32]
    3a82:	ldr	r0, [sp, #20]
    3a84:	str	r2, [sp, #28]
    3a86:	movs	r1, #20
    3a88:	str	r3, [sp, #24]
    3a8a:	bl	119b0 <operator delete(void*, unsigned int)>
    3a8e:	ldr	r3, [sp, #24]
    3a90:	ldr	r2, [sp, #28]
    3a92:	ldr	r0, [sp, #16]
    3a94:	str	r2, [sp, #24]
    3a96:	movs	r1, #20
    3a98:	str	r3, [sp, #20]
    3a9a:	bl	119b0 <operator delete(void*, unsigned int)>
    3a9e:	ldr	r3, [sp, #20]
    3aa0:	ldr	r2, [sp, #24]
    3aa2:	str	r3, [sp, #16]
    3aa4:	mov	r0, r2
    3aa6:	movs	r1, #20
    3aa8:	bl	119b0 <operator delete(void*, unsigned int)>
    3aac:	ldr	r3, [sp, #16]
    3aae:	b.n	368c <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    { sprintf(tname,"%s/%s",file,f2.name());
    3ab0:	add	r5, sp, #80	; 0x50
    3ab2:	mov	r0, r5
    3ab4:	ldr	r3, [pc, #272]	; (3bc8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    3ab6:	ldr	r1, [pc, #276]	; (3bcc <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a8>)
    3ab8:	ldr	r2, [sp, #4]
    3aba:	bl	133f4 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3abe:	mov	r0, r5
    3ac0:	bl	13580 <strlen>
    3ac4:	mov	r1, r0
    3ac6:	mov	r0, r5
    3ac8:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3acc:	ldr	r0, [pc, #256]	; (3bd0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7ac>)
    3ace:	bl	11800 <Print::println()>
    3ad2:	ldr.w	r0, [r9, #88]	; 0x58
    3ad6:	ldr	r3, [r0, #0]
    3ad8:	mov	r1, r5
    3ada:	ldr	r3, [r3, #16]
    3adc:	blx	r3
    3ade:	b.n	34f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
    3ae0:	ldr	r2, [sp, #76]	; 0x4c
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3ae2:	movs	r6, #0
    3ae4:	b.n	3606 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3ae6:	mov	r0, r4
    3ae8:	blx	r3
    3aea:	b.n	37c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x39e>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3aec:	mov	r0, r4
    3aee:	blx	r2
    3af0:	mov	r3, r0
    3af2:	b.n	3726 <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
    3af4:	ldr	r3, [pc, #208]	; (3bc8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    3af6:	b.n	3726 <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3af8:	blx	r3
    3afa:	ldr	r2, [sp, #76]	; 0x4c
    3afc:	mov	r6, r0
    3afe:	b.n	3606 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
    3b00:	mov	r0, r4
    3b02:	blx	r2
    3b04:	ldr	r2, [sp, #76]	; 0x4c
    3b06:	mov	r6, r0
    3b08:	b.n	3606 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b0a:	mov	r0, r5
    3b0c:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    3b0e:	cmp	r6, #0
    3b10:	bne.w	36aa <MTPStorage_SD::removeFile(unsigned long, char*)+0x286>
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    3b14:	ldr.w	r0, [r9, #88]	; 0x58
    3b18:	ldr	r1, [sp, #4]
    3b1a:	ldr	r3, [r0, #0]
    3b1c:	ldr	r3, [r3, #20]
    3b1e:	mov	fp, r7
    3b20:	blx	r3
    3b22:	cmp	r4, #0
    3b24:	beq.w	3816 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3b28:	ldr	r3, [r4, #16]
    3b2a:	subs	r3, #1
    3b2c:	str	r3, [r4, #16]
    3b2e:	cmp	r3, #0
    3b30:	bne.w	3816 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3b34:	ldr	r3, [r4, #0]
    3b36:	ldr	r2, [pc, #140]	; (3bc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3b38:	ldr	r3, [r3, #32]
    3b3a:	cmp	r3, r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3b3c:	mov	r0, r4
    3b3e:	bne.n	3b5e <MTPStorage_SD::removeFile(unsigned long, char*)+0x73a>
    3b40:	movs	r1, #20
    3b42:	bl	119b0 <operator delete(void*, unsigned int)>
    3b46:	b.n	3816 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b48:	blx	r3
    3b4a:	b.n	3594 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3b4c:	mov	r0, fp
    3b4e:	blx	r3
    3b50:	b.n	369c <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3b52:	mov	r0, r3
    3b54:	blx	r2
    3b56:	b.n	3694 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3b58:	mov	r0, r4
    3b5a:	blx	r3
    sd_rmdir(store,file);
  }
  else
  { sd_remove(store,file);
  }
}
    3b5c:	b.n	394e <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3b5e:	blx	r3
    3b60:	b.n	3816 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3b62:	str	r3, [sp, #16]
    3b64:	mov	r0, r2
    3b66:	blx	r1
    3b68:	ldr	r3, [sp, #16]
    3b6a:	b.n	368c <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3b6c:	mov	r0, r5
    3b6e:	blx	r3
    3b70:	b.n	3946 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3b72:	str	r2, [sp, #24]
    3b74:	str	r3, [sp, #20]
    3b76:	ldr	r0, [sp, #16]
    3b78:	blx	r1
    3b7a:	ldr	r2, [sp, #24]
    3b7c:	ldr	r3, [sp, #20]
    3b7e:	b.n	3aa2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3b80:	mov	r0, r6
    3b82:	blx	r3
    3b84:	b.n	393e <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3b86:	mov	r0, r7
    3b88:	blx	r3
    3b8a:	b.n	3936 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3b8c:	str	r2, [sp, #28]
    3b8e:	str	r3, [sp, #24]
    3b90:	ldr	r0, [sp, #20]
    3b92:	blx	r1
    3b94:	ldr	r2, [sp, #28]
    3b96:	ldr	r3, [sp, #24]
    3b98:	b.n	3a92 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3b9a:	str	r2, [sp, #32]
    3b9c:	str	r3, [sp, #28]
    3b9e:	ldr	r0, [sp, #24]
    3ba0:	blx	r1
    3ba2:	ldr	r2, [sp, #32]
    3ba4:	ldr	r3, [sp, #28]
    3ba6:	b.n	3a82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3ba8:	mov	r0, r8
    3baa:	blx	r3
    3bac:	b.n	392e <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3bae:	str	r2, [sp, #32]
    3bb0:	str	r3, [sp, #28]
    3bb2:	mov	r0, r1
    3bb4:	mov	r3, lr
    3bb6:	blx	r3
    3bb8:	ldr	r2, [sp, #32]
    3bba:	ldr	r3, [sp, #28]
    3bbc:	b.n	3a72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3bbe:	mov	r0, r9
    3bc0:	blx	r3
    3bc2:	b.n	3926 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3bc4:	.word	0x00000eb1
    3bc8:	.word	0x00016b54
    3bcc:	.word	0x00016ce8
    3bd0:	.word	0x1fff0b00
    3bd4:	.word	0x00016a5c

00003bd8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    3bd8:	push	{r4, r5, r6, r7, lr}
    3bda:	subw	sp, sp, #1348	; 0x544
    3bde:	mov	r5, r0
    3be0:	mov	r6, r1
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    3be2:	mov.w	r3, #256	; 0x100
    3be6:	add	r2, sp, #272	; 0x110
    3be8:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    3bec:	mov	r2, r6
    3bee:	mov	r1, r5
    3bf0:	add	r0, sp, #528	; 0x210
    3bf2:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    3bf6:	add	r2, sp, #272	; 0x110
    3bf8:	ldrh.w	r1, [sp, #542]	; 0x21e
    3bfc:	mov	r0, r5
    3bfe:	bl	3424 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    3c02:	movs	r3, #0
    WriteIndexRecord(object, r);
    3c04:	add	r2, sp, #528	; 0x210
    3c06:	mov	r1, r6
    3c08:	mov	r0, r5
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    3c0a:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    3c0e:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    3c12:	ldr	r2, [sp, #528]	; 0x210
    3c14:	mov	r1, r5
    3c16:	add	r0, sp, #800	; 0x320
    3c18:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    3c1c:	ldr	r7, [sp, #804]	; 0x324
    3c1e:	cmp	r6, r7
    3c20:	beq.n	3c72 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x9a>
    }
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
    3c22:	add.w	r0, sp, #1072	; 0x430
    3c26:	mov	r2, r7
    3c28:	mov	r1, r5
    3c2a:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    3c2e:	ldr.w	r4, [sp, #1080]	; 0x438
    3c32:	cmp	r6, r4
    3c34:	bne.n	3c3a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x62>
    3c36:	b.n	3c86 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0xae>
    3c38:	mov	r4, r3
    3c3a:	mov	r2, r4
    3c3c:	mov	r1, r5
    3c3e:	mov	r0, sp
    3c40:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3c44:	mov.w	r2, #272	; 0x110
    3c48:	mov	r1, sp
    3c4a:	add.w	r0, sp, #1072	; 0x430
    3c4e:	bl	fc48 <memcpy>
    3c52:	ldr.w	r3, [sp, #1080]	; 0x438
    3c56:	cmp	r6, r3
    3c58:	bne.n	3c38 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x60>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    3c5a:	mov	r0, r5
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
    3c5c:	ldr	r3, [sp, #536]	; 0x218
    3c5e:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    3c62:	add.w	r2, sp, #1072	; 0x430
    3c66:	mov	r1, r4
    3c68:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    3c6c:	addw	sp, sp, #1348	; 0x544
    3c70:	pop	{r4, r5, r6, r7, pc}
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
      WriteIndexRecord(r.parent, t);
    3c72:	mov	r0, r5
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    3c74:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    3c76:	ldr	r1, [sp, #528]	; 0x210
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    3c78:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    3c7a:	add	r2, sp, #800	; 0x320
    3c7c:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    3c80:	addw	sp, sp, #1348	; 0x544
    3c84:	pop	{r4, r5, r6, r7, pc}
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    3c86:	mov	r4, r7
    3c88:	b.n	3c5a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x82>
    3c8a:	nop

00003c8c <MTPStorage_SD::DeleteObject(unsigned long)>:
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    3c8c:	adds	r2, r1, #1
    3c8e:	beq.n	3c9a <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
  { sd_remove(store,file);
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    3c90:	push	{r3, lr}
    3c92:	bl	3bd8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    3c96:	movs	r0, #1
    3c98:	pop	{r3, pc}
    3c9a:	movs	r0, #1
    3c9c:	bx	lr
    3c9e:	nop

00003ca0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    3ca0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3ca4:	add.w	r1, r0, r1, lsl #2
    3ca8:	mov	r6, r0
    3caa:	ldr	r1, [r1, #84]	; 0x54
    3cac:	ldr	r0, [r1, #0]
    3cae:	subw	sp, sp, #2092	; 0x82c
    3cb2:	ldr	r4, [r0, #0]
    3cb4:	mov	r7, r3
    3cb6:	mov	r0, sp
    3cb8:	movs	r3, #0
    3cba:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3cbc:	ldr	r3, [sp, #16]
    3cbe:	cmp	r3, #0
    3cc0:	beq.w	40ea <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x44a>
    3cc4:	ldr	r2, [r3, #0]
    3cc6:	ldr	r5, [pc, #624]	; (3f38 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x298>)
    3cc8:	ldr	r2, [r2, #68]	; 0x44
    3cca:	cmp	r2, r5
    3ccc:	bne.w	4048 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a8>
    3cd0:	ldr	r0, [r3, #16]
    3cd2:	cmp	r0, #0
    3cd4:	beq.w	3ef8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3cd8:	ldr	r2, [r0, #0]
    3cda:	ldr	r2, [r2, #68]	; 0x44
    3cdc:	cmp	r2, r5
    3cde:	bne.w	404a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3ce2:	ldr	r0, [r0, #16]
    3ce4:	cmp	r0, #0
    3ce6:	beq.w	3ef8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3cea:	ldr	r2, [r0, #0]
    3cec:	ldr	r2, [r2, #68]	; 0x44
    3cee:	cmp	r2, r5
    3cf0:	bne.w	404a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3cf4:	ldr	r0, [r0, #16]
    3cf6:	cmp	r0, #0
    3cf8:	beq.w	3ef8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3cfc:	ldr	r2, [r0, #0]
    3cfe:	ldr	r2, [r2, #68]	; 0x44
    3d00:	cmp	r2, r5
    3d02:	bne.w	404a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3d06:	ldr	r0, [r0, #16]
    3d08:	cmp	r0, #0
    3d0a:	beq.w	3ef8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3d0e:	ldr	r2, [r0, #0]
    3d10:	ldr	r2, [r2, #68]	; 0x44
    3d12:	cmp	r2, r5
    3d14:	bne.w	404a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3d18:	ldr	r0, [r0, #16]
    3d1a:	cmp	r0, #0
    3d1c:	beq.w	3ef8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3d20:	ldr	r2, [r0, #0]
    3d22:	ldr	r2, [r2, #68]	; 0x44
    3d24:	cmp	r2, r5
    3d26:	bne.w	404a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3d2a:	ldr	r0, [r0, #16]
    3d2c:	cmp	r0, #0
    3d2e:	beq.w	3ef8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3d32:	ldr	r2, [r0, #0]
    3d34:	ldr	r2, [r2, #68]	; 0x44
    3d36:	cmp	r2, r5
    3d38:	bne.w	404a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3d3c:	ldr	r0, [r0, #16]
    3d3e:	cmp	r0, #0
    3d40:	beq.w	3ef8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3d44:	ldr	r3, [r0, #0]
    3d46:	ldr	r3, [r3, #68]	; 0x44
    3d48:	blx	r3
    3d4a:	mov	r4, r0
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    3d4c:	cmp	r4, #0
    3d4e:	beq.w	4532 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x892>
    3d52:	add.w	r6, r6, r7, lsl #2
    3d56:	add	r0, sp, #20
    3d58:	ldr	r1, [r6, #84]	; 0x54
    3d5a:	ldr.w	r2, [sp, #2128]	; 0x850
    3d5e:	ldr	r3, [r1, #0]
    3d60:	ldr	r4, [r3, #0]
    3d62:	movs	r3, #2
    3d64:	blx	r4
    3d66:	ldr	r0, [sp, #36]	; 0x24
    3d68:	cmp	r0, #0
    3d6a:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3d6e:	ldr	r3, [r0, #0]
    3d70:	ldr	r3, [r3, #68]	; 0x44
    3d72:	cmp	r3, r5
    3d74:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3d78:	ldr	r0, [r0, #16]
    3d7a:	cmp	r0, #0
    3d7c:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3d80:	ldr	r3, [r0, #0]
    3d82:	ldr	r3, [r3, #68]	; 0x44
    3d84:	cmp	r3, r5
    3d86:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3d8a:	ldr	r0, [r0, #16]
    3d8c:	cmp	r0, #0
    3d8e:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3d92:	ldr	r3, [r0, #0]
    3d94:	ldr	r3, [r3, #68]	; 0x44
    3d96:	cmp	r3, r5
    3d98:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3d9c:	ldr	r0, [r0, #16]
    3d9e:	cmp	r0, #0
    3da0:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3da4:	ldr	r3, [r0, #0]
    3da6:	ldr	r3, [r3, #68]	; 0x44
    3da8:	cmp	r3, r5
    3daa:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3dae:	ldr	r0, [r0, #16]
    3db0:	cmp	r0, #0
    3db2:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3db6:	ldr	r3, [r0, #0]
    3db8:	ldr	r3, [r3, #68]	; 0x44
    3dba:	cmp	r3, r5
    3dbc:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3dc0:	ldr	r0, [r0, #16]
    3dc2:	cmp	r0, #0
    3dc4:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3dc8:	ldr	r3, [r0, #0]
    3dca:	ldr	r3, [r3, #68]	; 0x44
    3dcc:	cmp	r3, r5
    3dce:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3dd2:	ldr	r0, [r0, #16]
    3dd4:	cmp	r0, #0
    3dd6:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3dda:	ldr	r3, [r0, #0]
    3ddc:	ldr	r3, [r3, #68]	; 0x44
    3dde:	cmp	r3, r5
    3de0:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3de4:	ldr	r0, [r0, #16]
    3de6:	cmp	r0, #0
    3de8:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3dec:	ldr	r3, [r0, #0]
    3dee:	ldr	r3, [r3, #68]	; 0x44
    3df0:	cmp	r3, r5
    3df2:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3df6:	ldr	r0, [r0, #16]
    3df8:	cmp	r0, #0
    3dfa:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3dfe:	ldr	r3, [r0, #0]
    3e00:	ldr	r3, [r3, #68]	; 0x44
    3e02:	cmp	r3, r5
    3e04:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3e08:	ldr	r0, [r0, #16]
    3e0a:	cmp	r0, #0
    3e0c:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3e10:	ldr	r3, [r0, #0]
    3e12:	ldr	r3, [r3, #68]	; 0x44
    3e14:	cmp	r3, r5
    3e16:	bne.w	421a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    3e1a:	ldr	r0, [r0, #16]
    3e1c:	cmp	r0, #0
    3e1e:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3e22:	ldr	r3, [r0, #0]
    3e24:	ldr	r3, [r3, #68]	; 0x44
    3e26:	blx	r3
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    3e28:	cmp	r0, #0
    3e2a:	beq.w	4050 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    3e2e:	ldr	r5, [pc, #268]	; (3f3c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x29c>)
    3e30:	mov.w	r4, #4294967295
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    3e34:	ldr	r3, [sp, #16]
    3e36:	cmp	r3, #0
    3e38:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    3e3c:	ldr	r1, [r3, #0]
    3e3e:	ldr	r2, [r1, #16]
    3e40:	cmp	r2, r5
    3e42:	bne.w	4428 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x788>
    3e46:	ldr	r2, [r3, #16]
    3e48:	cmp	r2, #0
    3e4a:	beq.w	442e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x78e>
    3e4e:	ldr	r0, [r2, #0]
    3e50:	ldr	r6, [r0, #16]
    3e52:	cmp	r6, r5
    3e54:	bne.w	42d0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x630>
    3e58:	ldr	r0, [r2, #16]
    3e5a:	cmp	r0, #0
    3e5c:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3e60:	ldr	r6, [r0, #0]
    3e62:	ldr	r6, [r6, #16]
    3e64:	cmp	r6, r5
    3e66:	bne.w	42d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3e6a:	ldr	r0, [r0, #16]
    3e6c:	cmp	r0, #0
    3e6e:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3e72:	ldr	r6, [r0, #0]
    3e74:	ldr	r6, [r6, #16]
    3e76:	cmp	r6, r5
    3e78:	bne.w	42d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3e7c:	ldr	r0, [r0, #16]
    3e7e:	cmp	r0, #0
    3e80:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3e84:	ldr	r6, [r0, #0]
    3e86:	ldr	r6, [r6, #16]
    3e88:	cmp	r6, r5
    3e8a:	bne.w	42d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3e8e:	ldr	r0, [r0, #16]
    3e90:	cmp	r0, #0
    3e92:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3e96:	ldr	r6, [r0, #0]
    3e98:	ldr	r6, [r6, #16]
    3e9a:	cmp	r6, r5
    3e9c:	bne.w	42d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3ea0:	ldr	r0, [r0, #16]
    3ea2:	cmp	r0, #0
    3ea4:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3ea8:	ldr	r6, [r0, #0]
    3eaa:	ldr	r6, [r6, #16]
    3eac:	cmp	r6, r5
    3eae:	bne.w	42d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3eb2:	ldr	r0, [r0, #16]
    3eb4:	cmp	r0, #0
    3eb6:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3eba:	ldr	r6, [r0, #0]
    3ebc:	ldr	r6, [r6, #16]
    3ebe:	cmp	r6, r5
    3ec0:	bne.w	42d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3ec4:	ldr	r0, [r0, #16]
    3ec6:	cmp	r0, #0
    3ec8:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3ecc:	ldr	r6, [r0, #0]
    3ece:	ldr	r6, [r6, #16]
    3ed0:	cmp	r6, r5
    3ed2:	bne.w	42d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3ed6:	ldr	r0, [r0, #16]
    3ed8:	cmp	r0, #0
    3eda:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3ede:	ldr	r6, [r0, #0]
    3ee0:	ldr	r6, [r6, #16]
    3ee2:	cmp	r6, r5
    3ee4:	bne.w	42d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    3ee8:	ldr	r0, [r0, #16]
    3eea:	cmp	r0, #0
    3eec:	beq.w	421e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    3ef0:	ldr	r3, [r0, #0]
    3ef2:	ldr	r3, [r3, #16]
    3ef4:	blx	r3
    3ef6:	b.n	42d4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3ef8:	ldr	r6, [pc, #68]	; (3f40 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a0>)
    3efa:	str	r6, [sp, #0]
    3efc:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3efe:	ldr	r2, [r3, #16]
    3f00:	subs	r2, #1
    3f02:	str	r2, [r3, #16]
    3f04:	cbnz	r2, 3f2c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    3f06:	ldr	r5, [sp, #16]
    3f08:	cbz	r5, 3f2c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    3f0a:	ldr	r3, [r5, #0]
    3f0c:	ldr	r2, [pc, #52]	; (3f44 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a4>)
    3f0e:	ldr	r3, [r3, #32]
    3f10:	cmp	r3, r2
    3f12:	bne.w	44c6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x826>
    3f16:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f18:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f1a:	cbz	r1, 3f24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    3f1c:	ldr	r3, [r1, #16]
    3f1e:	subs	r3, #1
    3f20:	str	r3, [r1, #16]
    3f22:	cbz	r3, 3f48 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a8>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3f24:	mov	r0, r5
    3f26:	movs	r1, #20
    3f28:	bl	119b0 <operator delete(void*, unsigned int)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    3f2c:	mov	r0, r4
    3f2e:	addw	sp, sp, #2092	; 0x82c
    3f32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f36:	nop
    3f38:	.word	0x0000050d
    3f3c:	.word	0x00000495
    3f40:	.word	0x00016a5c
    3f44:	.word	0x00000eb1
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f48:	ldr	r7, [r5, #16]
    3f4a:	cmp	r7, #0
    3f4c:	beq.n	3f24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    3f4e:	ldr	r3, [r7, #0]
    3f50:	ldr	r3, [r3, #32]
    3f52:	cmp	r3, r2
    3f54:	bne.w	44e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x848>
    3f58:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f5a:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f5c:	cmp	r1, #0
    3f5e:	beq.n	403e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    3f60:	ldr	r3, [r1, #16]
    3f62:	subs	r3, #1
    3f64:	str	r3, [r1, #16]
    3f66:	cmp	r3, #0
    3f68:	bne.n	403e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    3f6a:	ldr.w	r8, [r7, #16]
    3f6e:	cmp.w	r8, #0
    3f72:	beq.n	403e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    3f74:	ldr.w	r3, [r8]
    3f78:	ldr	r3, [r3, #32]
    3f7a:	cmp	r3, r2
    3f7c:	bne.w	450e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x86e>
    3f80:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f84:	str.w	r6, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f88:	cmp	r1, #0
    3f8a:	beq.n	4036 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    3f8c:	ldr	r3, [r1, #16]
    3f8e:	subs	r3, #1
    3f90:	str	r3, [r1, #16]
    3f92:	cmp	r3, #0
    3f94:	bne.n	4036 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    3f96:	ldr.w	r9, [r8, #16]
    3f9a:	cmp.w	r9, #0
    3f9e:	beq.n	4036 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    3fa0:	ldr.w	r3, [r9]
    3fa4:	ldr	r3, [r3, #32]
    3fa6:	cmp	r3, r2
    3fa8:	bne.w	4514 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x874>
    3fac:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fb0:	str.w	r6, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fb4:	cmp	r1, #0
    3fb6:	beq.n	402e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    3fb8:	ldr	r3, [r1, #16]
    3fba:	subs	r3, #1
    3fbc:	str	r3, [r1, #16]
    3fbe:	cmp	r3, #0
    3fc0:	bne.n	402e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    3fc2:	ldr.w	sl, [r9, #16]
    3fc6:	cmp.w	sl, #0
    3fca:	beq.n	402e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    3fcc:	ldr.w	r3, [sl]
    3fd0:	ldr	r3, [r3, #32]
    3fd2:	cmp	r3, r2
    3fd4:	bne.w	4526 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x886>
    3fd8:	ldr.w	r1, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fdc:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fe0:	cbz	r1, 4026 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    3fe2:	ldr	r3, [r1, #16]
    3fe4:	subs	r3, #1
    3fe6:	str	r3, [r1, #16]
    3fe8:	cbnz	r3, 4026 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    3fea:	ldr.w	fp, [sl, #16]
    3fee:	cmp.w	fp, #0
    3ff2:	beq.n	4026 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    3ff4:	ldr.w	r3, [fp]
    3ff8:	ldr	r3, [r3, #32]
    3ffa:	cmp	r3, r2
    3ffc:	bne.w	452c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x88c>
    4000:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4004:	str.w	r6, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4008:	cbz	r2, 401e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    400a:	ldr	r3, [r2, #16]
    400c:	subs	r3, #1
    400e:	str	r3, [r2, #16]
    4010:	cbnz	r3, 401e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    4012:	ldr.w	r0, [fp, #16]
    4016:	cbz	r0, 401e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    4018:	ldr	r3, [r0, #0]
    401a:	ldr	r3, [r3, #32]
    401c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    401e:	mov	r0, fp
    4020:	movs	r1, #20
    4022:	bl	119b0 <operator delete(void*, unsigned int)>
    4026:	mov	r0, sl
    4028:	movs	r1, #20
    402a:	bl	119b0 <operator delete(void*, unsigned int)>
    402e:	mov	r0, r9
    4030:	movs	r1, #20
    4032:	bl	119b0 <operator delete(void*, unsigned int)>
    4036:	mov	r0, r8
    4038:	movs	r1, #20
    403a:	bl	119b0 <operator delete(void*, unsigned int)>
    403e:	mov	r0, r7
    4040:	movs	r1, #20
    4042:	bl	119b0 <operator delete(void*, unsigned int)>
    4046:	b.n	3f24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4048:	mov	r0, r3
    404a:	blx	r2
    404c:	mov	r4, r0
    404e:	b.n	3d4c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xac>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4050:	ldr	r0, [sp, #16]
    4052:	cmp	r0, #0
    4054:	beq.n	40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4056:	ldr	r3, [r0, #0]
    4058:	ldr	r1, [pc, #616]	; (42c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    405a:	ldr	r3, [r3, #64]	; 0x40
    405c:	cmp	r3, r1
    405e:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4062:	ldr	r0, [r0, #16]
    4064:	cmp	r0, #0
    4066:	beq.n	40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4068:	ldr	r3, [r0, #0]
    406a:	ldr	r3, [r3, #64]	; 0x40
    406c:	cmp	r3, r1
    406e:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4072:	ldr	r0, [r0, #16]
    4074:	cmp	r0, #0
    4076:	beq.n	40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4078:	ldr	r3, [r0, #0]
    407a:	ldr	r3, [r3, #64]	; 0x40
    407c:	cmp	r3, r1
    407e:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4082:	ldr	r0, [r0, #16]
    4084:	cmp	r0, #0
    4086:	beq.n	40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4088:	ldr	r3, [r0, #0]
    408a:	ldr	r3, [r3, #64]	; 0x40
    408c:	cmp	r3, r1
    408e:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4092:	ldr	r0, [r0, #16]
    4094:	cmp	r0, #0
    4096:	beq.n	40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4098:	ldr	r3, [r0, #0]
    409a:	ldr	r3, [r3, #64]	; 0x40
    409c:	cmp	r3, r1
    409e:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    40a2:	ldr	r0, [r0, #16]
    40a4:	cbz	r0, 40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    40a6:	ldr	r3, [r0, #0]
    40a8:	ldr	r3, [r3, #64]	; 0x40
    40aa:	cmp	r3, r1
    40ac:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    40b0:	ldr	r0, [r0, #16]
    40b2:	cbz	r0, 40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    40b4:	ldr	r3, [r0, #0]
    40b6:	ldr	r3, [r3, #64]	; 0x40
    40b8:	cmp	r3, r1
    40ba:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    40be:	ldr	r0, [r0, #16]
    40c0:	cbz	r0, 40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    40c2:	ldr	r3, [r0, #0]
    40c4:	ldr	r3, [r3, #64]	; 0x40
    40c6:	cmp	r3, r1
    40c8:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    40cc:	ldr	r0, [r0, #16]
    40ce:	cbz	r0, 40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    40d0:	ldr	r3, [r0, #0]
    40d2:	ldr	r3, [r3, #64]	; 0x40
    40d4:	cmp	r3, r1
    40d6:	bne.w	4212 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    40da:	ldr	r0, [r0, #16]
    40dc:	cbz	r0, 40f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    40de:	ldr	r3, [r0, #0]
    40e0:	ldr	r3, [r3, #64]	; 0x40
    40e2:	blx	r3
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    40e4:	movs	r4, #0
    40e6:	ldr	r3, [sp, #36]	; 0x24
    40e8:	b.n	40fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    40ea:	mov	r4, r3
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    40ec:	mov	r0, r4
    40ee:	addw	sp, sp, #2092	; 0x82c
    40f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40f6:	ldr	r3, [sp, #36]	; 0x24
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    40f8:	movs	r4, #0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40fa:	ldr	r6, [pc, #460]	; (42c8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
    40fc:	str	r6, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40fe:	cmp	r3, #0
    4100:	beq.w	4206 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4104:	ldr	r2, [r3, #16]
    4106:	subs	r2, #1
    4108:	str	r2, [r3, #16]
    410a:	cmp	r2, #0
    410c:	bne.n	4206 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    410e:	ldr	r5, [sp, #36]	; 0x24
    4110:	cmp	r5, #0
    4112:	beq.n	4206 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4114:	ldr	r3, [r5, #0]
    4116:	ldr	r2, [pc, #436]	; (42cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x62c>)
    4118:	ldr	r3, [r3, #32]
    411a:	cmp	r3, r2
    411c:	bne.w	44ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x84e>
    4120:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4122:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4124:	cmp	r1, #0
    4126:	beq.n	41fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4128:	ldr	r3, [r1, #16]
    412a:	subs	r3, #1
    412c:	str	r3, [r1, #16]
    412e:	cmp	r3, #0
    4130:	bne.n	41fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4132:	ldr	r7, [r5, #16]
    4134:	cmp	r7, #0
    4136:	beq.n	41fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4138:	ldr	r3, [r7, #0]
    413a:	ldr	r3, [r3, #32]
    413c:	cmp	r3, r2
    413e:	bne.w	4508 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x868>
    4142:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4144:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4146:	cmp	r1, #0
    4148:	beq.n	41f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    414a:	ldr	r3, [r1, #16]
    414c:	subs	r3, #1
    414e:	str	r3, [r1, #16]
    4150:	cmp	r3, #0
    4152:	bne.n	41f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4154:	ldr.w	r8, [r7, #16]
    4158:	cmp.w	r8, #0
    415c:	beq.n	41f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    415e:	ldr.w	r3, [r8]
    4162:	ldr	r3, [r3, #32]
    4164:	cmp	r3, r2
    4166:	bne.w	451a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x87a>
    416a:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    416e:	str.w	r6, [r8]
    4172:	ldr	r0, [pc, #340]	; (42c8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4174:	cmp	r1, #0
    4176:	beq.n	41ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4178:	ldr	r3, [r1, #16]
    417a:	subs	r3, #1
    417c:	str	r3, [r1, #16]
    417e:	cmp	r3, #0
    4180:	bne.n	41ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4182:	ldr.w	r9, [r8, #16]
    4186:	cmp.w	r9, #0
    418a:	beq.n	41ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    418c:	ldr.w	r3, [r9]
    4190:	ldr	r3, [r3, #32]
    4192:	cmp	r3, r2
    4194:	bne.w	4520 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x880>
    4198:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    419c:	str.w	r0, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    41a0:	cbz	r1, 41e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    41a2:	ldr	r3, [r1, #16]
    41a4:	subs	r3, #1
    41a6:	str	r3, [r1, #16]
    41a8:	cbnz	r3, 41e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    41aa:	ldr.w	sl, [r9, #16]
    41ae:	cmp.w	sl, #0
    41b2:	beq.n	41e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    41b4:	ldr.w	r3, [sl]
    41b8:	ldr	r3, [r3, #32]
    41ba:	cmp	r3, r2
    41bc:	bne.w	453c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x89c>
    41c0:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    41c4:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    41c8:	cbz	r2, 41de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    41ca:	ldr	r3, [r2, #16]
    41cc:	subs	r3, #1
    41ce:	str	r3, [r2, #16]
    41d0:	cbnz	r3, 41de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    41d2:	ldr.w	r0, [sl, #16]
    41d6:	cbz	r0, 41de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    41d8:	ldr	r3, [r0, #0]
    41da:	ldr	r3, [r3, #32]
    41dc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    41de:	mov	r0, sl
    41e0:	movs	r1, #20
    41e2:	bl	119b0 <operator delete(void*, unsigned int)>
    41e6:	mov	r0, r9
    41e8:	movs	r1, #20
    41ea:	bl	119b0 <operator delete(void*, unsigned int)>
    41ee:	mov	r0, r8
    41f0:	movs	r1, #20
    41f2:	bl	119b0 <operator delete(void*, unsigned int)>
    41f6:	mov	r0, r7
    41f8:	movs	r1, #20
    41fa:	bl	119b0 <operator delete(void*, unsigned int)>
    41fe:	mov	r0, r5
    4200:	movs	r1, #20
    4202:	bl	119b0 <operator delete(void*, unsigned int)>
    4206:	ldr	r3, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4208:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    420a:	cmp	r3, #0
    420c:	bne.w	3efe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x25e>
    4210:	b.n	3f2c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4212:	blx	r3
    4214:	movs	r4, #0
    4216:	ldr	r3, [sp, #36]	; 0x24
    4218:	b.n	40fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    421a:	blx	r3
    421c:	b.n	3e28 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x188>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    421e:	ldr	r5, [r1, #64]	; 0x40
    4220:	ldr	r1, [pc, #160]	; (42c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    4222:	cmp	r5, r1
    4224:	bne.w	44f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4228:	mov	r0, r2
    422a:	ldr	r3, [r0, #0]
    422c:	ldr	r3, [r3, #64]	; 0x40
    422e:	cmp	r3, r1
    4230:	bne.w	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4234:	ldr	r0, [r0, #16]
    4236:	cmp	r0, #0
    4238:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    423c:	ldr	r3, [r0, #0]
    423e:	ldr	r3, [r3, #64]	; 0x40
    4240:	cmp	r3, r1
    4242:	bne.w	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4246:	ldr	r0, [r0, #16]
    4248:	cmp	r0, #0
    424a:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    424e:	ldr	r3, [r0, #0]
    4250:	ldr	r3, [r3, #64]	; 0x40
    4252:	cmp	r3, r1
    4254:	bne.w	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4258:	ldr	r0, [r0, #16]
    425a:	cmp	r0, #0
    425c:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4260:	ldr	r3, [r0, #0]
    4262:	ldr	r3, [r3, #64]	; 0x40
    4264:	cmp	r3, r1
    4266:	bne.w	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    426a:	ldr	r0, [r0, #16]
    426c:	cmp	r0, #0
    426e:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4272:	ldr	r3, [r0, #0]
    4274:	ldr	r3, [r3, #64]	; 0x40
    4276:	cmp	r3, r1
    4278:	bne.w	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    427c:	ldr	r0, [r0, #16]
    427e:	cmp	r0, #0
    4280:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4284:	ldr	r3, [r0, #0]
    4286:	ldr	r3, [r3, #64]	; 0x40
    4288:	cmp	r3, r1
    428a:	bne.w	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    428e:	ldr	r0, [r0, #16]
    4290:	cmp	r0, #0
    4292:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4296:	ldr	r3, [r0, #0]
    4298:	ldr	r3, [r3, #64]	; 0x40
    429a:	cmp	r3, r1
    429c:	bne.w	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    42a0:	ldr	r0, [r0, #16]
    42a2:	cmp	r0, #0
    42a4:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    42a8:	ldr	r3, [r0, #0]
    42aa:	ldr	r3, [r3, #64]	; 0x40
    42ac:	cmp	r3, r1
    42ae:	bne.w	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    42b2:	ldr	r0, [r0, #16]
    42b4:	cmp	r0, #0
    42b6:	beq.w	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    42ba:	ldr	r3, [r0, #0]
    42bc:	ldr	r3, [r3, #64]	; 0x40
    42be:	blx	r3
    42c0:	b.n	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    42c2:	nop
    42c4:	.word	0x00000501
    42c8:	.word	0x00016a5c
    42cc:	.word	0x00000eb1
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    42d0:	mov	r0, r2
    42d2:	blx	r6

  while(f1.available()>0)
    42d4:	cmp	r0, #0
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    42d6:	ldr	r3, [sp, #16]
    42d8:	ble.n	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e4>
    42da:	cmp	r3, #0
    42dc:	beq.n	438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    42de:	ldr	r1, [r3, #0]
    42e0:	ldr	r2, [pc, #536]	; (44fc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x85c>)
    42e2:	ldr	r4, [r1, #40]	; 0x28
    42e4:	cmp	r4, r2
    42e6:	bne.n	4366 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c6>
    42e8:	ldr	r0, [r3, #16]
    42ea:	cmp	r0, #0
    42ec:	beq.n	438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    42ee:	ldr	r1, [r0, #0]
    42f0:	ldr	r4, [r1, #40]	; 0x28
    42f2:	cmp	r4, r2
    42f4:	bne.n	4368 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    42f6:	ldr	r0, [r0, #16]
    42f8:	cmp	r0, #0
    42fa:	beq.n	438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    42fc:	ldr	r1, [r0, #0]
    42fe:	ldr	r4, [r1, #40]	; 0x28
    4300:	cmp	r4, r2
    4302:	bne.n	4368 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4304:	ldr	r0, [r0, #16]
    4306:	cmp	r0, #0
    4308:	beq.n	438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    430a:	ldr	r1, [r0, #0]
    430c:	ldr	r4, [r1, #40]	; 0x28
    430e:	cmp	r4, r2
    4310:	bne.n	4368 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4312:	ldr	r0, [r0, #16]
    4314:	cmp	r0, #0
    4316:	beq.n	438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4318:	ldr	r1, [r0, #0]
    431a:	ldr	r4, [r1, #40]	; 0x28
    431c:	cmp	r4, r2
    431e:	bne.n	4368 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4320:	ldr	r0, [r0, #16]
    4322:	cmp	r0, #0
    4324:	beq.n	438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4326:	ldr	r1, [r0, #0]
    4328:	ldr	r4, [r1, #40]	; 0x28
    432a:	cmp	r4, r2
    432c:	bne.n	4368 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    432e:	ldr	r0, [r0, #16]
    4330:	cbz	r0, 438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4332:	ldr	r1, [r0, #0]
    4334:	ldr	r4, [r1, #40]	; 0x28
    4336:	cmp	r4, r2
    4338:	bne.n	4368 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    433a:	ldr	r0, [r0, #16]
    433c:	cbz	r0, 438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    433e:	ldr	r1, [r0, #0]
    4340:	ldr	r4, [r1, #40]	; 0x28
    4342:	cmp	r4, r2
    4344:	bne.n	4368 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4346:	ldr	r0, [r0, #16]
    4348:	cbz	r0, 438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    434a:	ldr	r1, [r0, #0]
    434c:	ldr	r4, [r1, #40]	; 0x28
    434e:	cmp	r4, r2
    4350:	bne.n	4368 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4352:	ldr	r0, [r0, #16]
    4354:	cbz	r0, 438c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4356:	ldr	r3, [r0, #0]
    4358:	mov.w	r2, #2048	; 0x800
    435c:	ldr	r3, [r3, #40]	; 0x28
    435e:	add	r1, sp, #40	; 0x28
    4360:	blx	r3
    4362:	mov	r2, r0
    4364:	b.n	4372 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6d2>
    4366:	mov	r0, r3
    4368:	mov.w	r2, #2048	; 0x800
    436c:	add	r1, sp, #40	; 0x28
    436e:	blx	r4
    4370:	mov	r2, r0
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    4372:	subs	r4, r2, #0
    4374:	blt.n	4382 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e2>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4376:	ldr	r0, [sp, #36]	; 0x24
    4378:	cbnz	r0, 4398 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6f8>
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    437a:	cmp.w	r4, #2048	; 0x800
    437e:	bge.w	3e34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x194>
    4382:	ldr	r3, [sp, #16]
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4384:	cmp	r3, #0
    4386:	bne.w	44d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x832>
    438a:	b.n	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    438c:	ldr	r0, [sp, #36]	; 0x24
    438e:	cmp	r0, #0
    4390:	beq.w	44cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x82c>
    4394:	movs	r2, #0
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4396:	mov	r4, r2
    4398:	ldr	r1, [r0, #0]
    439a:	ldr	r3, [pc, #356]	; (4500 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x860>)
    439c:	ldr	r6, [r1, #44]	; 0x2c
    439e:	cmp	r6, r3
    43a0:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    43a2:	ldr	r0, [r0, #16]
    43a4:	cmp	r0, #0
    43a6:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    43a8:	ldr	r1, [r0, #0]
    43aa:	ldr	r6, [r1, #44]	; 0x2c
    43ac:	cmp	r6, r3
    43ae:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    43b0:	ldr	r0, [r0, #16]
    43b2:	cmp	r0, #0
    43b4:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    43b6:	ldr	r1, [r0, #0]
    43b8:	ldr	r6, [r1, #44]	; 0x2c
    43ba:	cmp	r6, r3
    43bc:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    43be:	ldr	r0, [r0, #16]
    43c0:	cmp	r0, #0
    43c2:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    43c4:	ldr	r1, [r0, #0]
    43c6:	ldr	r6, [r1, #44]	; 0x2c
    43c8:	cmp	r6, r3
    43ca:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    43cc:	ldr	r0, [r0, #16]
    43ce:	cmp	r0, #0
    43d0:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    43d2:	ldr	r1, [r0, #0]
    43d4:	ldr	r6, [r1, #44]	; 0x2c
    43d6:	cmp	r6, r3
    43d8:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    43da:	ldr	r0, [r0, #16]
    43dc:	cmp	r0, #0
    43de:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    43e0:	ldr	r1, [r0, #0]
    43e2:	ldr	r6, [r1, #44]	; 0x2c
    43e4:	cmp	r6, r3
    43e6:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    43e8:	ldr	r0, [r0, #16]
    43ea:	cmp	r0, #0
    43ec:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    43ee:	ldr	r1, [r0, #0]
    43f0:	ldr	r6, [r1, #44]	; 0x2c
    43f2:	cmp	r6, r3
    43f4:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    43f6:	ldr	r0, [r0, #16]
    43f8:	cmp	r0, #0
    43fa:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    43fc:	ldr	r1, [r0, #0]
    43fe:	ldr	r6, [r1, #44]	; 0x2c
    4400:	cmp	r6, r3
    4402:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4404:	ldr	r0, [r0, #16]
    4406:	cmp	r0, #0
    4408:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    440a:	ldr	r1, [r0, #0]
    440c:	ldr	r6, [r1, #44]	; 0x2c
    440e:	cmp	r6, r3
    4410:	bne.n	4422 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4412:	ldr	r0, [r0, #16]
    4414:	cmp	r0, #0
    4416:	beq.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4418:	ldr	r3, [r0, #0]
    441a:	add	r1, sp, #40	; 0x28
    441c:	ldr	r3, [r3, #44]	; 0x2c
    441e:	blx	r3
    4420:	b.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4422:	add	r1, sp, #40	; 0x28
    4424:	blx	r6
    4426:	b.n	437a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4428:	mov	r0, r3
    442a:	blx	r2
    442c:	b.n	42d4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    442e:	ldr	r5, [r1, #64]	; 0x40
    4430:	ldr	r2, [pc, #208]	; (4504 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4432:	cmp	r5, r2
    4434:	bne.n	44f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4436:	ldr	r3, [sp, #36]	; 0x24
    4438:	cmp	r3, #0
    443a:	beq.n	44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    443c:	ldr	r2, [r3, #0]
    443e:	ldr	r1, [pc, #196]	; (4504 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4440:	ldr	r2, [r2, #64]	; 0x40
    4442:	cmp	r2, r1
    4444:	bne.n	44ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81a>
    4446:	ldr	r0, [r3, #16]
    4448:	cmp	r0, #0
    444a:	beq.n	44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    444c:	ldr	r2, [r0, #0]
    444e:	ldr	r2, [r2, #64]	; 0x40
    4450:	cmp	r2, r1
    4452:	bne.n	44bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4454:	ldr	r0, [r0, #16]
    4456:	cmp	r0, #0
    4458:	beq.n	44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    445a:	ldr	r2, [r0, #0]
    445c:	ldr	r2, [r2, #64]	; 0x40
    445e:	cmp	r2, r1
    4460:	bne.n	44bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4462:	ldr	r0, [r0, #16]
    4464:	cmp	r0, #0
    4466:	beq.n	44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4468:	ldr	r2, [r0, #0]
    446a:	ldr	r2, [r2, #64]	; 0x40
    446c:	cmp	r2, r1
    446e:	bne.n	44bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4470:	ldr	r0, [r0, #16]
    4472:	cbz	r0, 44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4474:	ldr	r2, [r0, #0]
    4476:	ldr	r2, [r2, #64]	; 0x40
    4478:	cmp	r2, r1
    447a:	bne.n	44bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    447c:	ldr	r0, [r0, #16]
    447e:	cbz	r0, 44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4480:	ldr	r2, [r0, #0]
    4482:	ldr	r2, [r2, #64]	; 0x40
    4484:	cmp	r2, r1
    4486:	bne.n	44bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4488:	ldr	r0, [r0, #16]
    448a:	cbz	r0, 44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    448c:	ldr	r2, [r0, #0]
    448e:	ldr	r2, [r2, #64]	; 0x40
    4490:	cmp	r2, r1
    4492:	bne.n	44bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4494:	ldr	r0, [r0, #16]
    4496:	cbz	r0, 44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4498:	ldr	r2, [r0, #0]
    449a:	ldr	r2, [r2, #64]	; 0x40
    449c:	cmp	r2, r1
    449e:	bne.n	44bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    44a0:	ldr	r0, [r0, #16]
    44a2:	cbz	r0, 44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    44a4:	ldr	r2, [r0, #0]
    44a6:	ldr	r2, [r2, #64]	; 0x40
    44a8:	cmp	r2, r1
    44aa:	bne.n	44bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    44ac:	ldr	r0, [r0, #16]
    44ae:	cbz	r0, 44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    44b0:	ldr	r3, [r0, #0]
    44b2:	ldr	r3, [r3, #64]	; 0x40
    44b4:	blx	r3
    44b6:	ldr	r3, [sp, #36]	; 0x24
    44b8:	b.n	44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    44ba:	mov	r0, r3
    44bc:	blx	r2
    44be:	ldr	r3, [sp, #36]	; 0x24
    if(nd<nbuf) break;  // end of file
  }
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    44c0:	mvns	r4, r4
    44c2:	lsrs	r4, r4, #31
    44c4:	b.n	40fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    44c6:	mov	r0, r5
    44c8:	blx	r3
    44ca:	b.n	3f2c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    44cc:	mov	r4, r0
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    44ce:	cmp	r3, #0
    44d0:	beq.n	4538 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x898>
    44d2:	ldr	r2, [r3, #0]
    44d4:	ldr	r1, [pc, #44]	; (4504 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    44d6:	ldr	r5, [r2, #64]	; 0x40
    44d8:	cmp	r5, r1
    44da:	bne.n	44f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    44dc:	ldr	r0, [r3, #16]
    44de:	cmp	r0, #0
    44e0:	beq.n	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    44e2:	b.n	422a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x58a>
    44e4:	blx	r3
    44e6:	b.n	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    44e8:	mov	r0, r7
    44ea:	blx	r3
    44ec:	b.n	3f24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    44ee:	mov	r0, r5
    44f0:	blx	r3
    44f2:	b.n	4206 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    44f4:	mov	r0, r3
    44f6:	blx	r5
    44f8:	b.n	4436 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    44fa:	nop
    44fc:	.word	0x0000047d
    4500:	.word	0x00000489
    4504:	.word	0x00000501
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4508:	mov	r0, r7
    450a:	blx	r3
    450c:	b.n	41fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    450e:	mov	r0, r8
    4510:	blx	r3
    4512:	b.n	403e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4514:	mov	r0, r9
    4516:	blx	r3
    4518:	b.n	4036 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    451a:	mov	r0, r8
    451c:	blx	r3
    451e:	b.n	41f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4520:	mov	r0, r9
    4522:	blx	r3
    4524:	b.n	41ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4526:	mov	r0, sl
    4528:	blx	r3
    452a:	b.n	402e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    452c:	mov	r0, fp
    452e:	blx	r3
    4530:	b.n	4026 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4532:	ldr	r3, [sp, #16]
    4534:	ldr	r6, [pc, #12]	; (4544 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8a4>)
    4536:	b.n	4208 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x568>
    4538:	mov	r4, r3
    453a:	b.n	44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    453c:	mov	r0, sl
    453e:	blx	r3
    4540:	b.n	41e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4542:	nop
    4544:	.word	0x00016a5c

00004548 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4548:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    454c:	mov	r8, r1
    454e:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    4552:	cmp.w	r3, #4294967295
    4556:	ite	ne
    4558:	movne	r7, r3
    455a:	moveq	r7, r2

    Record p1 = ReadIndexRecord(handle);
    455c:	mov	r1, r0
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    455e:	mov	r4, r0
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4560:	mov	r2, r8
    4562:	add	r0, sp, #520	; 0x208
    4564:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    4568:	mov	r2, r7
    456a:	mov	r1, r4
    456c:	add	r0, sp, #792	; 0x318
    456e:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t newHandle;
    if(p1.isdir)
    4572:	ldrb.w	r6, [sp, #532]	; 0x214
    4576:	cmp	r6, #0
    4578:	bne.n	4600 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0xb8>
      CopyFiles(handle, p2.store, newHandle);
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    457a:	add	r1, sp, #536	; 0x218
    457c:	mov.w	r2, #256	; 0x100
    4580:	add.w	r0, sp, #1080	; 0x438
    4584:	bl	13550 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4588:	ldr.w	r5, [r4, #244]	; 0xf4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    458c:	ldrh.w	r0, [sp, #806]	; 0x326
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4590:	ldr	r3, [sp, #796]	; 0x31c
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4592:	strh.w	r0, [sp, #1078]	; 0x436
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4596:	adds	r2, r5, #1
    4598:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    459c:	mov	r1, r5
    459e:	add.w	r2, sp, #1064	; 0x428
    45a2:	mov	r0, r4
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    45a4:	str.w	r3, [sp, #1072]	; 0x430
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
    45a8:	str.w	r7, [sp, #1064]	; 0x428
      r.child = 0;
    45ac:	str.w	r6, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
      r.isdir = 0;
    45b0:	strb.w	r6, [sp, #1076]	; 0x434
      r.scanned = 0;
    45b4:	strb.w	r6, [sp, #1077]	; 0x435
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    45b8:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);
    45bc:	add	r2, sp, #792	; 0x318
    45be:	mov	r1, r7
    45c0:	mov	r0, r4
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
    45c2:	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    45c4:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    45c8:	mov	r1, r8
    45ca:	add	r2, sp, #8
    45cc:	mov.w	r3, #256	; 0x100
    45d0:	mov	r0, r4
    45d2:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    45d6:	add	r6, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    45d8:	mov	r7, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    45da:	mov	r1, r5
    45dc:	mov	r2, r6
    45de:	mov.w	r3, #256	; 0x100
    45e2:	mov	r0, r4
    45e4:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>

      sd_copy(store0,oldfilename,store1,newfilename);
    45e8:	str	r6, [sp, #0]
    45ea:	mov	r3, r0
    45ec:	add	r2, sp, #8
    45ee:	mov	r1, r7
    45f0:	adds	r0, r4, #4
    45f2:	bl	3ca0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }

    return newHandle;
  }
    45f6:	mov	r0, r5
    45f8:	add.w	sp, sp, #1336	; 0x538
    45fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    4600:	ldrh.w	r1, [sp, #534]	; 0x216
    4604:	mov	r2, r8
    4606:	mov	r0, r4
    4608:	adds	r1, #1
    460a:	bl	2b5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    460e:	ldrb.w	r3, [sp, #532]	; 0x214
    4612:	ldr	r0, [r4, #0]
    4614:	ldrh.w	r1, [sp, #806]	; 0x326
    4618:	add	r2, sp, #536	; 0x218
    461a:	adds	r3, #0
    461c:	str	r2, [sp, #0]
    461e:	it	ne
    4620:	movne	r3, #1
    4622:	mov	r2, r7
    4624:	ldr	r5, [r0, #44]	; 0x2c
    4626:	mov	r0, r4
    4628:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    462a:	ldr	r3, [r4, #0]
    462c:	ldrh.w	r2, [sp, #806]	; 0x326
    4630:	ldr	r6, [r3, #84]	; 0x54

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4632:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    4634:	mov	r3, r0
    4636:	mov	r1, r8
    4638:	mov	r0, r4
    463a:	blx	r6

      sd_copy(store0,oldfilename,store1,newfilename);
    }

    return newHandle;
  }
    463c:	mov	r0, r5
    463e:	add.w	sp, sp, #1336	; 0x538
    4642:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4646:	nop

00004648 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:

bool MTPStorage_SD::CopyFiles(uint32_t handle, uint32_t store, uint32_t newHandle)
{ // assume handle and newHandle point to existing directories
    4648:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    464c:	mov	r4, r0
    464e:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    4652:	cmp.w	r3, #4294967295
    4656:	ite	ne
    4658:	movne	r8, r3
    465a:	moveq	r8, r2
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    465c:	add	r0, sp, #520	; 0x208
    465e:	mov	r2, r1
    4660:	mov	r1, r4
    4662:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    4666:	mov	r2, r8
    4668:	mov	r1, r4
    466a:	add	r0, sp, #792	; 0x318
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    466c:	ldrh.w	r9, [sp, #534]	; 0x216
  Record p2=ReadIndexRecord(newHandle);
    4670:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    4674:	ldr	r6, [sp, #524]	; 0x20c
  uint32_t iy= 0;
  while(ix)
    4676:	cmp	r6, #0
    4678:	beq.n	474e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x106>
    467a:	movs	r5, #0
    467c:	add	r7, sp, #264	; 0x108

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    467e:	add.w	sl, r4, #4
    4682:	b.n	46b8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    4684:	ldrh.w	r3, [sp, #1350]	; 0x546
    4688:	add.w	r3, r4, r3, lsl #2
    468c:	ldr	r0, [r3, #88]	; 0x58
    468e:	ldr	r3, [r0, #0]
    4690:	ldr	r3, [r3, #8]
    4692:	blx	r3

    if(py.isdir) 
    { 
      sd_mkdir(py.store,newfilename);

      ScanDir(p1.store,ix); 
    4694:	mov	r2, r6
    4696:	mov	r1, r9
    4698:	mov	r0, r4
    469a:	bl	2b5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    469e:	ldr	r3, [r4, #0]
    46a0:	ldrh.w	r2, [sp, #806]	; 0x326
    46a4:	ldr.w	fp, [r3, #84]	; 0x54
    46a8:	mov	r1, r6
    46aa:	mov	r3, r5
    46ac:	mov	r0, r4
    46ae:	blx	fp
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
    46b0:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    46b4:	cmp	r6, #0
    46b6:	beq.n	4738 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
  { // get child
    Record px = ReadIndexRecord(ix) ;
    46b8:	mov	r2, r6
    46ba:	mov	r1, r4
    46bc:	add.w	r0, sp, #1064	; 0x428
    46c0:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    46c4:	mov.w	r2, #272	; 0x110
    46c8:	add.w	r1, sp, #1064	; 0x428
    46cc:	add.w	r0, sp, #1336	; 0x538
    46d0:	bl	fc48 <memcpy>
    py.store = p2.store;
    py.parent = newHandle;
    py.sibling = iy;
    46d4:	str.w	r5, [sp, #1344]	; 0x540
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    46d8:	ldr.w	r5, [r4, #244]	; 0xf4
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    46dc:	ldrh.w	r3, [sp, #806]	; 0x326
    46e0:	strh.w	r3, [sp, #1350]	; 0x546
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    46e4:	adds	r2, r5, #1
    46e6:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    46ea:	mov	r1, r5
    46ec:	add.w	r2, sp, #1336	; 0x538
    46f0:	mov	r0, r4
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    py.parent = newHandle;
    46f2:	str.w	r8, [sp, #1336]	; 0x538
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    46f6:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    py.sibling = iy;
    iy = AppendIndexRecord(py);

    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    46fa:	mov.w	r3, #256	; 0x100
    46fe:	add	r2, sp, #8
    4700:	mov	r1, r6
    4702:	mov	r0, r4
    4704:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    4708:	mov	r1, r5
    470a:	mov.w	r3, #256	; 0x100
    470e:	mov	r2, r7
    4710:	mov	r0, r4
    4712:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    if(py.isdir) 
    4716:	ldrb.w	r3, [sp, #1348]	; 0x544
    471a:	mov	r1, r7

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    471c:	add	r2, sp, #8
    471e:	mov	r0, sl
    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);

    if(py.isdir) 
    4720:	cmp	r3, #0
    4722:	bne.n	4684 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4724:	ldrh.w	r3, [sp, #1350]	; 0x546
    4728:	str	r7, [sp, #0]
    472a:	mov	r1, r9
    472c:	bl	3ca0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }
    ix = px.sibling;
    4730:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4734:	cmp	r6, #0
    4736:	bne.n	46b8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
  WriteIndexRecord(newHandle,p2);
    4738:	mov	r0, r4
    473a:	mov	r1, r8
    473c:	add	r2, sp, #792	; 0x318
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
    473e:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    4740:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  return true;
}
    4744:	movs	r0, #1
    4746:	addw	sp, sp, #1612	; 0x64c
    474a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  #endif

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
    474e:	mov	r5, r6
    4750:	b.n	4738 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
    4752:	nop

00004754 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    4754:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4758:	mov	r5, r3
    475a:	add.w	r3, r0, r3, lsl #2
    475e:	mov	r4, r0
    4760:	ldr	r0, [r3, #84]	; 0x54
    4762:	ldr	r6, [sp, #24]
    4764:	ldr	r3, [r0, #0]
    4766:	mov	r7, r1
    4768:	ldr	r3, [r3, #8]
    476a:	mov	r1, r6
    476c:	mov	r8, r2
    476e:	blx	r3

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    4770:	cbnz	r0, 4776 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x22>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4772:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4776:	str	r6, [sp, #24]
    4778:	mov	r3, r5
    477a:	mov	r2, r8
    477c:	mov	r1, r7
    477e:	mov	r0, r4
    4780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4784:	b.w	4788 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>

00004788 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>:
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    4788:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    478c:	add.w	sl, r0, r1, lsl #2
    4790:	mov	r8, r1
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    4792:	ldr.w	r1, [sl, #84]	; 0x54
    4796:	sub.w	sp, sp, #596	; 0x254
    479a:	mov	r9, r0
    479c:	ldr	r0, [r1, #0]
    479e:	str	r3, [sp, #8]
    47a0:	ldr	r4, [r0, #0]
    47a2:	str	r2, [sp, #12]
    47a4:	movs	r3, #0
    47a6:	add	r0, sp, #40	; 0x28
    47a8:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    47aa:	ldr	r3, [sp, #56]	; 0x38
    47ac:	cmp	r3, #0
    47ae:	beq.w	5106 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x97e>
    47b2:	ldr	r2, [r3, #0]
    47b4:	ldr	r6, [pc, #460]	; (4984 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1fc>)
    47b6:	ldr	r2, [r2, #68]	; 0x44
    47b8:	cmp	r2, r6
    47ba:	bne.w	4a92 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30a>
    47be:	ldr	r0, [r3, #16]
    47c0:	cmp	r0, #0
    47c2:	beq.w	4940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    47c6:	ldr	r2, [r0, #0]
    47c8:	ldr	r2, [r2, #68]	; 0x44
    47ca:	cmp	r2, r6
    47cc:	bne.w	4a94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    47d0:	ldr	r0, [r0, #16]
    47d2:	cmp	r0, #0
    47d4:	beq.w	4940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    47d8:	ldr	r2, [r0, #0]
    47da:	ldr	r2, [r2, #68]	; 0x44
    47dc:	cmp	r2, r6
    47de:	bne.w	4a94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    47e2:	ldr	r0, [r0, #16]
    47e4:	cmp	r0, #0
    47e6:	beq.w	4940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    47ea:	ldr	r2, [r0, #0]
    47ec:	ldr	r2, [r2, #68]	; 0x44
    47ee:	cmp	r2, r6
    47f0:	bne.w	4a94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    47f4:	ldr	r0, [r0, #16]
    47f6:	cmp	r0, #0
    47f8:	beq.w	4940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    47fc:	ldr	r2, [r0, #0]
    47fe:	ldr	r2, [r2, #68]	; 0x44
    4800:	cmp	r2, r6
    4802:	bne.w	4a94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4806:	ldr	r0, [r0, #16]
    4808:	cmp	r0, #0
    480a:	beq.w	4940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    480e:	ldr	r2, [r0, #0]
    4810:	ldr	r2, [r2, #68]	; 0x44
    4812:	cmp	r2, r6
    4814:	bne.w	4a94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4818:	ldr	r0, [r0, #16]
    481a:	cmp	r0, #0
    481c:	beq.w	4940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4820:	ldr	r2, [r0, #0]
    4822:	ldr	r2, [r2, #68]	; 0x44
    4824:	cmp	r2, r6
    4826:	bne.w	4a94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    482a:	ldr	r0, [r0, #16]
    482c:	cmp	r0, #0
    482e:	beq.w	4940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4832:	ldr	r3, [r0, #0]
    4834:	ldr	r3, [r3, #68]	; 0x44
    4836:	blx	r3
    4838:	mov	r4, r0
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    483a:	cmp	r4, #0
    483c:	beq.w	51bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa34>
    4840:	ldr.w	fp, [pc, #336]	; 4994 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    4844:	add	r4, sp, #336	; 0x150
  { while(1)
    {
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    4846:	mov.w	r2, #256	; 0x100
    484a:	ldr	r1, [sp, #12]
    484c:	add	r0, sp, #80	; 0x50
    484e:	bl	13550 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    4852:	add	r0, sp, #80	; 0x50
    4854:	bl	13580 <strlen>
    4858:	add	r3, sp, #80	; 0x50
    485a:	add	r0, r3
    485c:	ldrb.w	r3, [r0, #-1]
    4860:	cmp	r3, #47	; 0x2f
    4862:	beq.n	4870 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xe8>
    4864:	mov.w	r2, #256	; 0x100
    4868:	ldr	r1, [pc, #284]	; (4988 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    486a:	add	r0, sp, #80	; 0x50
    486c:	bl	134fc <strlcat>

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    4870:	mov.w	r2, #256	; 0x100
    4874:	ldr	r1, [sp, #632]	; 0x278
    4876:	mov	r0, r4
    4878:	bl	13550 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    487c:	mov	r0, r4
    487e:	bl	13580 <strlen>
    4882:	add	r0, r4
    4884:	ldrb.w	r3, [r0, #-1]
    4888:	cmp	r3, #47	; 0x2f
    488a:	beq.n	4898 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x110>
    488c:	mov.w	r2, #256	; 0x100
    4890:	ldr	r1, [pc, #244]	; (4988 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4892:	mov	r0, r4
    4894:	bl	134fc <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4898:	ldr	r1, [sp, #56]	; 0x38
    489a:	cmp	r1, #0
    489c:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    48a0:	ldr	r3, [r1, #0]
    48a2:	ldr	r2, [pc, #232]	; (498c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x204>)
    48a4:	ldr	r3, [r3, #80]	; 0x50
    48a6:	cmp	r3, r2
    48a8:	bne.w	4b7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    48ac:	ldr	r1, [r1, #16]
    48ae:	cmp	r1, #0
    48b0:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    48b4:	ldr	r3, [r1, #0]
    48b6:	ldr	r3, [r3, #80]	; 0x50
    48b8:	cmp	r3, r2
    48ba:	bne.w	4b7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    48be:	ldr	r1, [r1, #16]
    48c0:	cmp	r1, #0
    48c2:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    48c6:	ldr	r3, [r1, #0]
    48c8:	ldr	r3, [r3, #80]	; 0x50
    48ca:	cmp	r3, r2
    48cc:	bne.w	4b7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    48d0:	ldr	r1, [r1, #16]
    48d2:	cmp	r1, #0
    48d4:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    48d8:	ldr	r3, [r1, #0]
    48da:	ldr	r3, [r3, #80]	; 0x50
    48dc:	cmp	r3, r2
    48de:	bne.w	4b7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    48e2:	ldr	r1, [r1, #16]
    48e4:	cmp	r1, #0
    48e6:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    48ea:	ldr	r3, [r1, #0]
    48ec:	ldr	r3, [r3, #80]	; 0x50
    48ee:	cmp	r3, r2
    48f0:	bne.w	4b7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    48f4:	ldr	r1, [r1, #16]
    48f6:	cmp	r1, #0
    48f8:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    48fc:	ldr	r3, [r1, #0]
    48fe:	ldr	r3, [r3, #80]	; 0x50
    4900:	cmp	r3, r2
    4902:	bne.w	4b7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4906:	ldr	r1, [r1, #16]
    4908:	cmp	r1, #0
    490a:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    490e:	ldr	r3, [r1, #0]
    4910:	ldr	r3, [r3, #80]	; 0x50
    4912:	cmp	r3, r2
    4914:	bne.w	4b7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4918:	ldr	r1, [r1, #16]
    491a:	cmp	r1, #0
    491c:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4920:	ldr	r3, [r1, #0]
    4922:	ldr	r3, [r3, #80]	; 0x50
    4924:	cmp	r3, r2
    4926:	bne.w	4b7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    492a:	ldr	r1, [r1, #16]
    492c:	cmp	r1, #0
    492e:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4932:	ldr	r3, [r1, #0]
    4934:	add	r5, sp, #60	; 0x3c
    4936:	ldr	r3, [r3, #80]	; 0x50
    4938:	mov	r0, r5
    493a:	movs	r2, #0
    493c:	blx	r3
    493e:	b.n	4b84 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3fc>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4940:	ldr.w	fp, [pc, #80]	; 4994 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    4944:	str.w	fp, [sp, #40]	; 0x28
    4948:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    494a:	ldr	r2, [r3, #16]
    494c:	subs	r2, #1
    494e:	str	r2, [r3, #16]
    4950:	cbnz	r2, 497a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4952:	ldr	r5, [sp, #56]	; 0x38
    4954:	cbz	r5, 497a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4956:	ldr	r2, [r5, #0]
    4958:	ldr	r3, [pc, #52]	; (4990 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x208>)
    495a:	ldr	r2, [r2, #32]
    495c:	cmp	r2, r3
    495e:	bne.w	5120 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x998>
    4962:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4964:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4968:	cbz	r1, 4972 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    496a:	ldr	r2, [r1, #16]
    496c:	subs	r2, #1
    496e:	str	r2, [r1, #16]
    4970:	cbz	r2, 4998 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x210>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4972:	mov	r0, r5
    4974:	movs	r1, #20
    4976:	bl	119b0 <operator delete(void*, unsigned int)>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    497a:	mov	r0, r4
    497c:	add.w	sp, sp, #596	; 0x254
    4980:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4984:	.word	0x0000050d
    4988:	.word	0x00016ce4
    498c:	.word	0x00000539
    4990:	.word	0x00000eb1
    4994:	.word	0x00016a5c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4998:	ldr	r6, [r5, #16]
    499a:	cmp	r6, #0
    499c:	beq.n	4972 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    499e:	ldr	r2, [r6, #0]
    49a0:	ldr	r2, [r2, #32]
    49a2:	cmp	r2, r3
    49a4:	bne.w	5136 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ae>
    49a8:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    49aa:	str.w	fp, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    49ae:	cmp	r1, #0
    49b0:	beq.n	4a88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    49b2:	ldr	r2, [r1, #16]
    49b4:	subs	r2, #1
    49b6:	str	r2, [r1, #16]
    49b8:	cmp	r2, #0
    49ba:	bne.n	4a88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    49bc:	ldr	r7, [r6, #16]
    49be:	cmp	r7, #0
    49c0:	beq.n	4a88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    49c2:	ldr	r2, [r7, #0]
    49c4:	ldr	r2, [r2, #32]
    49c6:	cmp	r2, r3
    49c8:	bne.w	5152 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ca>
    49cc:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    49ce:	str.w	fp, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    49d2:	cmp	r1, #0
    49d4:	beq.n	4a80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    49d6:	ldr	r2, [r1, #16]
    49d8:	subs	r2, #1
    49da:	str	r2, [r1, #16]
    49dc:	cmp	r2, #0
    49de:	bne.n	4a80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    49e0:	ldr.w	r8, [r7, #16]
    49e4:	cmp.w	r8, #0
    49e8:	beq.n	4a80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    49ea:	ldr.w	r2, [r8]
    49ee:	ldr	r2, [r2, #32]
    49f0:	cmp	r2, r3
    49f2:	bne.w	5168 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e0>
    49f6:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    49fa:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    49fe:	cmp	r1, #0
    4a00:	beq.n	4a78 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4a02:	ldr	r2, [r1, #16]
    4a04:	subs	r2, #1
    4a06:	str	r2, [r1, #16]
    4a08:	cmp	r2, #0
    4a0a:	bne.n	4a78 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4a0c:	ldr.w	r9, [r8, #16]
    4a10:	cmp.w	r9, #0
    4a14:	beq.n	4a78 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4a16:	ldr.w	r2, [r9]
    4a1a:	ldr	r2, [r2, #32]
    4a1c:	cmp	r2, r3
    4a1e:	bne.w	5190 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa08>
    4a22:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4a26:	str.w	fp, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4a2a:	cbz	r1, 4a70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4a2c:	ldr	r2, [r1, #16]
    4a2e:	subs	r2, #1
    4a30:	str	r2, [r1, #16]
    4a32:	cbnz	r2, 4a70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4a34:	ldr.w	sl, [r9, #16]
    4a38:	cmp.w	sl, #0
    4a3c:	beq.n	4a70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4a3e:	ldr.w	r2, [sl]
    4a42:	ldr	r2, [r2, #32]
    4a44:	cmp	r2, r3
    4a46:	bne.w	5196 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa0e>
    4a4a:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4a4e:	str.w	fp, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4a52:	cbz	r2, 4a68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4a54:	ldr	r3, [r2, #16]
    4a56:	subs	r3, #1
    4a58:	str	r3, [r2, #16]
    4a5a:	cbnz	r3, 4a68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4a5c:	ldr.w	r0, [sl, #16]
    4a60:	cbz	r0, 4a68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4a62:	ldr	r3, [r0, #0]
    4a64:	ldr	r3, [r3, #32]
    4a66:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4a68:	mov	r0, sl
    4a6a:	movs	r1, #20
    4a6c:	bl	119b0 <operator delete(void*, unsigned int)>
    4a70:	mov	r0, r9
    4a72:	movs	r1, #20
    4a74:	bl	119b0 <operator delete(void*, unsigned int)>
    4a78:	mov	r0, r8
    4a7a:	movs	r1, #20
    4a7c:	bl	119b0 <operator delete(void*, unsigned int)>
    4a80:	mov	r0, r7
    4a82:	movs	r1, #20
    4a84:	bl	119b0 <operator delete(void*, unsigned int)>
    4a88:	mov	r0, r6
    4a8a:	movs	r1, #20
    4a8c:	bl	119b0 <operator delete(void*, unsigned int)>
    4a90:	b.n	4972 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4a92:	mov	r0, r3
    4a94:	blx	r2
    4a96:	mov	r4, r0
    4a98:	b.n	483a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xb2>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4a9a:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4a9e:	ldr	r3, [r2, #16]
    4aa0:	subs	r3, #1
    4aa2:	str	r3, [r2, #16]
    4aa4:	cmp	r3, #0
    4aa6:	bne.n	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4aa8:	ldr	r4, [r5, #16]
    4aaa:	cmp	r4, #0
    4aac:	beq.n	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4aae:	ldr	r2, [r4, #0]
    4ab0:	ldr	r3, [pc, #192]	; (4b74 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ec>)
    4ab2:	ldr	r2, [r2, #32]
    4ab4:	cmp	r2, r3
    4ab6:	bne.w	5142 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ba>
    4aba:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4abc:	str.w	fp, [r4]
    4ac0:	ldr	r0, [pc, #180]	; (4b78 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4ac2:	cmp	r1, #0
    4ac4:	beq.n	4b4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4ac6:	ldr	r2, [r1, #16]
    4ac8:	subs	r2, #1
    4aca:	str	r2, [r1, #16]
    4acc:	cmp	r2, #0
    4ace:	bne.n	4b4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4ad0:	ldr	r5, [r4, #16]
    4ad2:	cmp	r5, #0
    4ad4:	beq.n	4b4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4ad6:	ldr	r2, [r5, #0]
    4ad8:	ldr	r2, [r2, #32]
    4ada:	cmp	r2, r3
    4adc:	bne.w	5158 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d0>
    4ae0:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4ae2:	str	r0, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4ae4:	cmp	r1, #0
    4ae6:	beq.n	4b46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4ae8:	ldr	r2, [r1, #16]
    4aea:	subs	r2, #1
    4aec:	str	r2, [r1, #16]
    4aee:	cbnz	r2, 4b46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4af0:	ldr	r6, [r5, #16]
    4af2:	cbz	r6, 4b46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4af4:	ldr	r2, [r6, #0]
    4af6:	ldr	r2, [r2, #32]
    4af8:	cmp	r2, r3
    4afa:	bne.w	517e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9f6>
    4afe:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4b00:	str.w	fp, [r6]
    4b04:	ldr	r0, [pc, #112]	; (4b78 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4b06:	cbz	r1, 4b3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4b08:	ldr	r2, [r1, #16]
    4b0a:	subs	r2, #1
    4b0c:	str	r2, [r1, #16]
    4b0e:	cbnz	r2, 4b3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4b10:	ldr	r7, [r6, #16]
    4b12:	cbz	r7, 4b3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4b14:	ldr	r2, [r7, #0]
    4b16:	ldr	r2, [r2, #32]
    4b18:	cmp	r2, r3
    4b1a:	bne.w	5184 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9fc>
    4b1e:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4b20:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4b22:	cbz	r2, 4b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4b24:	ldr	r3, [r2, #16]
    4b26:	subs	r3, #1
    4b28:	str	r3, [r2, #16]
    4b2a:	cbnz	r3, 4b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4b2c:	ldr	r0, [r7, #16]
    4b2e:	cbz	r0, 4b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4b30:	ldr	r3, [r0, #0]
    4b32:	ldr	r3, [r3, #32]
    4b34:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4b36:	mov	r0, r7
    4b38:	movs	r1, #20
    4b3a:	bl	119b0 <operator delete(void*, unsigned int)>
    4b3e:	mov	r0, r6
    4b40:	movs	r1, #20
    4b42:	bl	119b0 <operator delete(void*, unsigned int)>
    4b46:	mov	r0, r5
    4b48:	movs	r1, #20
    4b4a:	bl	119b0 <operator delete(void*, unsigned int)>
    4b4e:	mov	r0, r4
    4b50:	movs	r1, #20
    4b52:	bl	119b0 <operator delete(void*, unsigned int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    4b56:	ldr.w	r0, [sl, #84]	; 0x54
    4b5a:	ldr	r1, [sp, #12]
    4b5c:	ldr	r3, [r0, #0]
    4b5e:	ldr	r3, [r3, #20]
    4b60:	blx	r3
    4b62:	ldr	r3, [sp, #56]	; 0x38
    4b64:	mov	r4, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4b66:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4b6a:	cmp	r3, #0
    4b6c:	bne.w	494a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1c2>
    4b70:	b.n	497a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4b72:	nop
    4b74:	.word	0x00000eb1
    4b78:	.word	0x00016a5c
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4b7c:	add	r5, sp, #60	; 0x3c
    4b7e:	mov	r0, r5
    4b80:	movs	r2, #0
    4b82:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4b84:	ldr	r2, [r5, #16]
    4b86:	cmp	r2, #0
    4b88:	beq.n	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4b8a:	ldr	r3, [r2, #0]
    4b8c:	ldr	r3, [r3, #68]	; 0x44
    4b8e:	cmp	r3, r6
    4b90:	bne.w	50d4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94c>
    4b94:	ldr	r0, [r2, #16]
    4b96:	cmp	r0, #0
    4b98:	beq.w	4a9a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4b9c:	ldr	r1, [r0, #0]
    4b9e:	ldr	r1, [r1, #68]	; 0x44
    4ba0:	cmp	r1, r6
    4ba2:	bne.w	50ea <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x962>
    4ba6:	ldr	r0, [r0, #16]
    4ba8:	cmp	r0, #0
    4baa:	beq.w	4a9a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4bae:	ldr	r3, [r0, #0]
    4bb0:	ldr	r3, [r3, #68]	; 0x44
    4bb2:	cmp	r3, r6
    4bb4:	bne.w	50d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4bb8:	ldr	r0, [r0, #16]
    4bba:	cmp	r0, #0
    4bbc:	beq.w	4a9a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4bc0:	ldr	r3, [r0, #0]
    4bc2:	ldr	r3, [r3, #68]	; 0x44
    4bc4:	cmp	r3, r6
    4bc6:	bne.w	50d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4bca:	ldr	r0, [r0, #16]
    4bcc:	cmp	r0, #0
    4bce:	beq.w	4a9a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4bd2:	ldr	r3, [r0, #0]
    4bd4:	ldr	r3, [r3, #68]	; 0x44
    4bd6:	cmp	r3, r6
    4bd8:	bne.w	50d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4bdc:	ldr	r0, [r0, #16]
    4bde:	cmp	r0, #0
    4be0:	beq.w	4a9a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4be4:	ldr	r3, [r0, #0]
    4be6:	ldr	r3, [r3, #68]	; 0x44
    4be8:	cmp	r3, r6
    4bea:	bne.w	50d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4bee:	ldr	r0, [r0, #16]
    4bf0:	cmp	r0, #0
    4bf2:	beq.w	4a9a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4bf6:	ldr	r3, [r0, #0]
    4bf8:	ldr	r3, [r3, #68]	; 0x44
    4bfa:	blx	r3

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);

      File f2=f1.openNextFile();
      if(!f2) break;
    4bfc:	cmp	r0, #0
    4bfe:	beq.w	51ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa26>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    4c02:	ldr	r0, [r5, #16]
    4c04:	cmp	r0, #0
    4c06:	beq.w	50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4c0a:	ldr	r2, [r0, #0]
    4c0c:	ldr	r3, [pc, #696]	; (4ec8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    4c0e:	ldr	r2, [r2, #72]	; 0x48
    4c10:	cmp	r2, r3
    4c12:	bne.w	50da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4c16:	ldr	r0, [r0, #16]
    4c18:	cmp	r0, #0
    4c1a:	beq.w	50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4c1e:	ldr	r2, [r0, #0]
    4c20:	ldr	r2, [r2, #72]	; 0x48
    4c22:	cmp	r2, r3
    4c24:	bne.w	50da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4c28:	ldr	r0, [r0, #16]
    4c2a:	cmp	r0, #0
    4c2c:	beq.w	50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4c30:	ldr	r2, [r0, #0]
    4c32:	ldr	r2, [r2, #72]	; 0x48
    4c34:	cmp	r2, r3
    4c36:	bne.w	50da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4c3a:	ldr	r0, [r0, #16]
    4c3c:	cmp	r0, #0
    4c3e:	beq.w	50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4c42:	ldr	r2, [r0, #0]
    4c44:	ldr	r2, [r2, #72]	; 0x48
    4c46:	cmp	r2, r3
    4c48:	bne.w	50da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4c4c:	ldr	r0, [r0, #16]
    4c4e:	cmp	r0, #0
    4c50:	beq.w	50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4c54:	ldr	r2, [r0, #0]
    4c56:	ldr	r2, [r2, #72]	; 0x48
    4c58:	cmp	r2, r3
    4c5a:	bne.w	50da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4c5e:	ldr	r0, [r0, #16]
    4c60:	cmp	r0, #0
    4c62:	beq.w	50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4c66:	ldr	r2, [r0, #0]
    4c68:	ldr	r2, [r2, #72]	; 0x48
    4c6a:	cmp	r2, r3
    4c6c:	bne.w	50da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4c70:	ldr	r0, [r0, #16]
    4c72:	cmp	r0, #0
    4c74:	beq.w	50d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4c78:	ldr	r3, [r0, #0]
    4c7a:	ldr	r3, [r3, #72]	; 0x48
    4c7c:	blx	r3
    4c7e:	mov	r1, r0
      { // generate filenames
        strlcat(tmp0Name,f2.name(),MAX_FILENAME_LEN);
    4c80:	mov.w	r2, #256	; 0x100
    4c84:	add	r0, sp, #80	; 0x50
    4c86:	bl	134fc <strlcat>
    4c8a:	ldr	r0, [r5, #16]
    4c8c:	cmp	r0, #0
    4c8e:	beq.w	50cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4c92:	ldr	r2, [r0, #0]
    4c94:	ldr	r3, [pc, #560]	; (4ec8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    4c96:	ldr	r2, [r2, #72]	; 0x48
    4c98:	cmp	r2, r3
    4c9a:	bne.w	50e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4c9e:	ldr	r0, [r0, #16]
    4ca0:	cmp	r0, #0
    4ca2:	beq.w	50cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4ca6:	ldr	r2, [r0, #0]
    4ca8:	ldr	r2, [r2, #72]	; 0x48
    4caa:	cmp	r2, r3
    4cac:	bne.w	50e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4cb0:	ldr	r0, [r0, #16]
    4cb2:	cmp	r0, #0
    4cb4:	beq.w	50cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4cb8:	ldr	r2, [r0, #0]
    4cba:	ldr	r2, [r2, #72]	; 0x48
    4cbc:	cmp	r2, r3
    4cbe:	bne.w	50e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4cc2:	ldr	r0, [r0, #16]
    4cc4:	cmp	r0, #0
    4cc6:	beq.w	50cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4cca:	ldr	r2, [r0, #0]
    4ccc:	ldr	r2, [r2, #72]	; 0x48
    4cce:	cmp	r2, r3
    4cd0:	bne.w	50e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4cd4:	ldr	r0, [r0, #16]
    4cd6:	cmp	r0, #0
    4cd8:	beq.w	50cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4cdc:	ldr	r2, [r0, #0]
    4cde:	ldr	r2, [r2, #72]	; 0x48
    4ce0:	cmp	r2, r3
    4ce2:	bne.w	50e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4ce6:	ldr	r0, [r0, #16]
    4ce8:	cmp	r0, #0
    4cea:	beq.w	50cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4cee:	ldr	r2, [r0, #0]
    4cf0:	ldr	r2, [r2, #72]	; 0x48
    4cf2:	cmp	r2, r3
    4cf4:	bne.w	50e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4cf8:	ldr	r0, [r0, #16]
    4cfa:	cmp	r0, #0
    4cfc:	beq.w	50cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4d00:	ldr	r3, [r0, #0]
    4d02:	ldr	r3, [r3, #72]	; 0x48
    4d04:	blx	r3
    4d06:	mov	r1, r0
        strlcat(tmp1Name,f2.name(),MAX_FILENAME_LEN);
    4d08:	mov.w	r2, #256	; 0x100
    4d0c:	mov	r0, r4
    4d0e:	bl	134fc <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    4d12:	ldr	r0, [r5, #16]
    4d14:	cmp	r0, #0
    4d16:	beq.w	4f98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4d1a:	ldr	r2, [r0, #0]
    4d1c:	ldr	r3, [pc, #428]	; (4ecc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x744>)
    4d1e:	ldr	r2, [r2, #76]	; 0x4c
    4d20:	cmp	r2, r3
    4d22:	bne.w	50e0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    4d26:	ldr	r0, [r0, #16]
    4d28:	cmp	r0, #0
    4d2a:	beq.w	4f98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4d2e:	ldr	r2, [r0, #0]
    4d30:	ldr	r2, [r2, #76]	; 0x4c
    4d32:	cmp	r2, r3
    4d34:	bne.w	50e0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    4d38:	ldr	r0, [r0, #16]
    4d3a:	cmp	r0, #0
    4d3c:	beq.w	4f98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4d40:	ldr	r2, [r0, #0]
    4d42:	ldr	r2, [r2, #76]	; 0x4c
    4d44:	cmp	r2, r3
    4d46:	bne.w	50e0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    4d4a:	ldr	r0, [r0, #16]
    4d4c:	cmp	r0, #0
    4d4e:	beq.w	4f98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4d52:	ldr	r2, [r0, #0]
    4d54:	ldr	r2, [r2, #76]	; 0x4c
    4d56:	cmp	r2, r3
    4d58:	bne.w	50e0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    4d5c:	ldr	r0, [r0, #16]
    4d5e:	cmp	r0, #0
    4d60:	beq.w	4f98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4d64:	ldr	r2, [r0, #0]
    4d66:	ldr	r2, [r2, #76]	; 0x4c
    4d68:	cmp	r2, r3
    4d6a:	bne.w	50e0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    4d6e:	ldr	r0, [r0, #16]
    4d70:	cmp	r0, #0
    4d72:	beq.w	4f98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4d76:	ldr	r2, [r0, #0]
    4d78:	ldr	r2, [r2, #76]	; 0x4c
    4d7a:	cmp	r2, r3
    4d7c:	bne.w	50e0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    4d80:	ldr	r0, [r0, #16]
    4d82:	cmp	r0, #0
    4d84:	beq.w	4f98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4d88:	ldr	r3, [r0, #0]
    4d8a:	ldr	r3, [r3, #76]	; 0x4c
    4d8c:	blx	r3

        if(f2.isDirectory())
    4d8e:	cmp	r0, #0
    4d90:	beq.w	4f98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
        { 
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    4d94:	str	r4, [sp, #0]
    4d96:	ldr	r3, [sp, #8]
    4d98:	add	r2, sp, #80	; 0x50
    4d9a:	mov	r1, r8
    4d9c:	mov	r0, r9
    4d9e:	bl	4754 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    4da2:	cmp	r0, #0
    4da4:	beq.w	4fce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4da8:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4daa:	str.w	fp, [r5]
    4dae:	ldr	r1, [pc, #288]	; (4ed0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4db0:	cmp	r2, #0
    4db2:	beq.w	4846 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    4db6:	ldr	r3, [r2, #16]
    4db8:	subs	r3, #1
    4dba:	str	r3, [r2, #16]
    4dbc:	cmp	r3, #0
    4dbe:	bne.w	4846 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    4dc2:	ldr	r5, [r5, #16]
    4dc4:	cmp	r5, #0
    4dc6:	beq.w	4846 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    4dca:	ldr	r2, [r5, #0]
    4dcc:	ldr	r3, [pc, #260]	; (4ed4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x74c>)
    4dce:	ldr	r2, [r2, #32]
    4dd0:	cmp	r2, r3
    4dd2:	bne.w	50ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x966>
    4dd6:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4dd8:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4dda:	cmp	r0, #0
    4ddc:	beq.w	4f8e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    4de0:	ldr	r2, [r0, #16]
    4de2:	subs	r2, #1
    4de4:	str	r2, [r0, #16]
    4de6:	cmp	r2, #0
    4de8:	bne.w	4f8e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    4dec:	ldr	r7, [r5, #16]
    4dee:	cmp	r7, #0
    4df0:	beq.w	4f8e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    4df4:	ldr	r2, [r7, #0]
    4df6:	ldr	r2, [r2, #32]
    4df8:	cmp	r2, r3
    4dfa:	bne.w	50f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x96e>
    4dfe:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e00:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e02:	cmp	r0, #0
    4e04:	beq.w	4f86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    4e08:	ldr	r2, [r0, #16]
    4e0a:	subs	r2, #1
    4e0c:	str	r2, [r0, #16]
    4e0e:	cmp	r2, #0
    4e10:	bne.w	4f86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    4e14:	ldr	r2, [r7, #16]
    4e16:	cmp	r2, #0
    4e18:	beq.w	4f86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    4e1c:	ldr	r1, [r2, #0]
    4e1e:	ldr	r1, [r1, #32]
    4e20:	cmp	r1, r3
    4e22:	bne.w	5112 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x98a>
    4e26:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e2a:	str.w	fp, [r2]
    4e2e:	ldr	r0, [pc, #160]	; (4ed0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e30:	cmp.w	lr, #0
    4e34:	beq.w	4f7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    4e38:	ldr.w	r1, [lr, #16]
    4e3c:	subs	r1, #1
    4e3e:	str.w	r1, [lr, #16]
    4e42:	cmp	r1, #0
    4e44:	bne.w	4f7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    4e48:	ldr	r1, [r2, #16]
    4e4a:	str	r1, [sp, #16]
    4e4c:	cmp	r1, #0
    4e4e:	beq.w	4f7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    4e52:	ldr	r1, [sp, #16]
    4e54:	ldr	r1, [r1, #0]
    4e56:	ldr	r1, [r1, #32]
    4e58:	cmp	r1, r3
    4e5a:	bne.w	5126 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x99e>
    4e5e:	ldr	r1, [sp, #16]
    4e60:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e64:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e66:	cmp.w	lr, #0
    4e6a:	beq.w	4f72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    4e6e:	ldr.w	r1, [lr, #16]
    4e72:	subs	r1, #1
    4e74:	str.w	r1, [lr, #16]
    4e78:	cmp	r1, #0
    4e7a:	bne.n	4f72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    4e7c:	ldr	r1, [sp, #16]
    4e7e:	ldr	r1, [r1, #16]
    4e80:	str	r1, [sp, #20]
    4e82:	cmp	r1, #0
    4e84:	beq.n	4f72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    4e86:	ldr	r0, [sp, #20]
    4e88:	ldr	r1, [r0, #0]
    4e8a:	ldr	r1, [r1, #32]
    4e8c:	cmp	r1, r3
    4e8e:	bne.w	5148 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9c0>
    4e92:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e96:	str.w	fp, [r0]
    4e9a:	ldr	r0, [pc, #52]	; (4ed0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e9c:	cmp.w	lr, #0
    4ea0:	beq.n	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    4ea2:	ldr.w	r1, [lr, #16]
    4ea6:	subs	r1, #1
    4ea8:	str.w	r1, [lr, #16]
    4eac:	cmp	r1, #0
    4eae:	bne.n	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    4eb0:	ldr	r1, [sp, #20]
    4eb2:	ldr	r1, [r1, #16]
    4eb4:	str	r1, [sp, #24]
    4eb6:	cmp	r1, #0
    4eb8:	beq.n	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    4eba:	ldr	r1, [sp, #24]
    4ebc:	ldr	r1, [r1, #0]
    4ebe:	ldr	r1, [r1, #32]
    4ec0:	cmp	r1, r3
    4ec2:	bne.w	515e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d6>
    4ec6:	b.n	4ed8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x750>
    4ec8:	.word	0x00000519
    4ecc:	.word	0x0000052d
    4ed0:	.word	0x00016a5c
    4ed4:	.word	0x00000eb1
    4ed8:	ldr	r1, [sp, #24]
    4eda:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4ede:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4ee0:	cmp.w	lr, #0
    4ee4:	beq.n	4f5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    4ee6:	ldr.w	r1, [lr, #16]
    4eea:	subs	r1, #1
    4eec:	str.w	r1, [lr, #16]
    4ef0:	cmp	r1, #0
    4ef2:	bne.n	4f5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    4ef4:	ldr	r1, [sp, #24]
    4ef6:	ldr	r1, [r1, #16]
    4ef8:	str	r1, [sp, #28]
    4efa:	cbz	r1, 4f5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    4efc:	ldr	r1, [sp, #28]
    4efe:	ldr	r1, [r1, #0]
    4f00:	ldr	r1, [r1, #32]
    4f02:	cmp	r1, r3
    4f04:	bne.w	5174 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ec>
    4f08:	ldr	r1, [sp, #28]
    4f0a:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4f0e:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4f10:	cmp.w	lr, #0
    4f14:	beq.n	4f4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    4f16:	ldr.w	r1, [lr, #16]
    4f1a:	subs	r1, #1
    4f1c:	str.w	r1, [lr, #16]
    4f20:	cbnz	r1, 4f4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    4f22:	ldr	r1, [sp, #28]
    4f24:	ldr	r1, [r1, #16]
    4f26:	cbz	r1, 4f4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    4f28:	ldr	r0, [r1, #0]
    4f2a:	ldr	r0, [r0, #32]
    4f2c:	cmp	r0, r3
    4f2e:	mov	lr, r0
    4f30:	bne.w	519c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa14>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4f34:	mov	r0, r1
    4f36:	str	r2, [sp, #36]	; 0x24
    4f38:	str.w	fp, [r0], #16
    4f3c:	str	r1, [sp, #32]
		invalidate();
    4f3e:	bl	1958 <File::invalidate() [clone .isra.1]>
	}
    4f42:	ldr	r1, [sp, #32]
    4f44:	mov	r0, r1
    4f46:	movs	r1, #20
    4f48:	bl	119b0 <operator delete(void*, unsigned int)>
    4f4c:	ldr	r2, [sp, #36]	; 0x24
    4f4e:	ldr	r0, [sp, #28]
    4f50:	str	r2, [sp, #32]
    4f52:	movs	r1, #20
    4f54:	bl	119b0 <operator delete(void*, unsigned int)>
    4f58:	ldr	r2, [sp, #32]
    4f5a:	ldr	r0, [sp, #24]
    4f5c:	str	r2, [sp, #28]
    4f5e:	movs	r1, #20
    4f60:	bl	119b0 <operator delete(void*, unsigned int)>
    4f64:	ldr	r2, [sp, #28]
    4f66:	ldr	r0, [sp, #20]
    4f68:	str	r2, [sp, #24]
    4f6a:	movs	r1, #20
    4f6c:	bl	119b0 <operator delete(void*, unsigned int)>
    4f70:	ldr	r2, [sp, #24]
    4f72:	ldr	r0, [sp, #16]
    4f74:	str	r2, [sp, #20]
    4f76:	movs	r1, #20
    4f78:	bl	119b0 <operator delete(void*, unsigned int)>
    4f7c:	ldr	r2, [sp, #20]
    4f7e:	mov	r0, r2
    4f80:	movs	r1, #20
    4f82:	bl	119b0 <operator delete(void*, unsigned int)>
    4f86:	mov	r0, r7
    4f88:	movs	r1, #20
    4f8a:	bl	119b0 <operator delete(void*, unsigned int)>
    4f8e:	mov	r0, r5
    4f90:	movs	r1, #20
    4f92:	bl	119b0 <operator delete(void*, unsigned int)>
    4f96:	b.n	4846 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
        }
        else
        { 
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    4f98:	str	r4, [sp, #0]
    4f9a:	ldr	r3, [sp, #8]
    4f9c:	add	r2, sp, #80	; 0x50
    4f9e:	mov	r1, r8
    4fa0:	mov	r0, r9
    4fa2:	bl	3ca0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    4fa6:	cbz	r0, 4fce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    4fa8:	add	r0, sp, #80	; 0x50
    4faa:	bl	13580 <strlen>
    4fae:	mov	r1, r0
    4fb0:	add	r0, sp, #80	; 0x50
    4fb2:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    4fb6:	ldr	r0, [pc, #524]	; (51c4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa3c>)
    4fb8:	bl	11800 <Print::println()>

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    4fbc:	ldr.w	r0, [sl, #84]	; 0x54
    4fc0:	ldr	r3, [r0, #0]
    4fc2:	add	r1, sp, #80	; 0x50
    4fc4:	ldr	r3, [r3, #16]
    4fc6:	blx	r3
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    4fc8:	cmp	r0, #0
    4fca:	bne.w	4da8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x620>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4fce:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4fd0:	str.w	fp, [r5]
    4fd4:	ldr	r1, [pc, #496]	; (51c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4fd6:	cmp	r2, #0
    4fd8:	beq.n	50c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    4fda:	ldr	r3, [r2, #16]
    4fdc:	subs	r3, #1
    4fde:	str	r3, [r2, #16]
    4fe0:	cmp	r3, #0
    4fe2:	bne.n	50c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    4fe4:	ldr	r4, [r5, #16]
    4fe6:	cmp	r4, #0
    4fe8:	beq.n	50c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    4fea:	ldr	r2, [r4, #0]
    4fec:	ldr	r3, [pc, #476]	; (51cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa44>)
    4fee:	ldr	r2, [r2, #32]
    4ff0:	cmp	r2, r3
    4ff2:	bne.w	513c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9b4>
    4ff6:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4ff8:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4ffa:	cmp	r0, #0
    4ffc:	beq.n	50be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    4ffe:	ldr	r2, [r0, #16]
    5000:	subs	r2, #1
    5002:	str	r2, [r0, #16]
    5004:	cmp	r2, #0
    5006:	bne.n	50be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5008:	ldr	r5, [r4, #16]
    500a:	cmp	r5, #0
    500c:	beq.n	50be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    500e:	ldr	r2, [r5, #0]
    5010:	ldr	r2, [r2, #32]
    5012:	cmp	r2, r3
    5014:	bne.w	5130 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a8>
    5018:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    501a:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    501c:	cmp	r0, #0
    501e:	beq.n	50b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5020:	ldr	r2, [r0, #16]
    5022:	subs	r2, #1
    5024:	str	r2, [r0, #16]
    5026:	cmp	r2, #0
    5028:	bne.n	50b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    502a:	ldr	r6, [r5, #16]
    502c:	cmp	r6, #0
    502e:	beq.n	50b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5030:	ldr	r2, [r6, #0]
    5032:	ldr	r2, [r2, #32]
    5034:	cmp	r2, r3
    5036:	bne.w	516e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e6>
    503a:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    503c:	str.w	fp, [r6]
    5040:	ldr	r0, [pc, #388]	; (51c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5042:	cmp	r1, #0
    5044:	beq.n	50ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5046:	ldr	r2, [r1, #16]
    5048:	subs	r2, #1
    504a:	str	r2, [r1, #16]
    504c:	cbnz	r2, 50ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    504e:	ldr	r7, [r6, #16]
    5050:	cbz	r7, 50ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5052:	ldr	r2, [r7, #0]
    5054:	ldr	r2, [r2, #32]
    5056:	cmp	r2, r3
    5058:	bne.w	518a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa02>
    505c:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    505e:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5060:	cbz	r1, 50a6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    5062:	ldr	r2, [r1, #16]
    5064:	subs	r2, #1
    5066:	str	r2, [r1, #16]
    5068:	cbnz	r2, 50a6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    506a:	ldr.w	r8, [r7, #16]
    506e:	cmp.w	r8, #0
    5072:	beq.n	50a6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    5074:	ldr.w	r2, [r8]
    5078:	ldr	r2, [r2, #32]
    507a:	cmp	r2, r3
    507c:	bne.w	51a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa20>
    5080:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5084:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5088:	cbz	r2, 509e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    508a:	ldr	r3, [r2, #16]
    508c:	subs	r3, #1
    508e:	str	r3, [r2, #16]
    5090:	cbnz	r3, 509e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    5092:	ldr.w	r0, [r8, #16]
    5096:	cbz	r0, 509e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    5098:	ldr	r3, [r0, #0]
    509a:	ldr	r3, [r3, #32]
    509c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    509e:	mov	r0, r8
    50a0:	movs	r1, #20
    50a2:	bl	119b0 <operator delete(void*, unsigned int)>
    50a6:	mov	r0, r7
    50a8:	movs	r1, #20
    50aa:	bl	119b0 <operator delete(void*, unsigned int)>
    50ae:	mov	r0, r6
    50b0:	movs	r1, #20
    50b2:	bl	119b0 <operator delete(void*, unsigned int)>
    50b6:	mov	r0, r5
    50b8:	movs	r1, #20
    50ba:	bl	119b0 <operator delete(void*, unsigned int)>
    50be:	mov	r0, r4
    50c0:	movs	r1, #20
    50c2:	bl	119b0 <operator delete(void*, unsigned int)>
    50c6:	ldr	r3, [sp, #56]	; 0x38
    50c8:	movs	r4, #0
    50ca:	b.n	4b66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    50cc:	ldr	r1, [pc, #256]	; (51d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    50ce:	b.n	4d08 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
    50d0:	ldr	r1, [pc, #252]	; (51d0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    50d2:	b.n	4c80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    50d4:	mov	r0, r2
    50d6:	blx	r3
    50d8:	b.n	4bfc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    50da:	blx	r2
    50dc:	mov	r1, r0
    50de:	b.n	4c80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    50e0:	blx	r2
    50e2:	b.n	4d8e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x606>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    50e4:	blx	r2
    50e6:	mov	r1, r0
    50e8:	b.n	4d08 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    50ea:	blx	r1
    50ec:	b.n	4bfc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50ee:	mov	r0, r5
    50f0:	blx	r2
    50f2:	b.w	4846 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    50f6:	mov	r0, r7
    50f8:	blx	r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    50fa:	mov	r0, r5
    50fc:	movs	r1, #20
    50fe:	bl	119b0 <operator delete(void*, unsigned int)>
    5102:	b.w	4846 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    5106:	mov	r4, r3
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    5108:	mov	r0, r4
    510a:	add.w	sp, sp, #596	; 0x254
    510e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5112:	mov	r0, r2
    5114:	blx	r1
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5116:	mov	r0, r7
    5118:	movs	r1, #20
    511a:	bl	119b0 <operator delete(void*, unsigned int)>
    511e:	b.n	4f8e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5120:	mov	r0, r5
    5122:	blx	r2
    5124:	b.n	497a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    5126:	str	r2, [sp, #20]
    5128:	ldr	r0, [sp, #16]
    512a:	blx	r1
    512c:	ldr	r2, [sp, #20]
    512e:	b.n	4f7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5130:	mov	r0, r5
    5132:	blx	r2
    5134:	b.n	50be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5136:	mov	r0, r6
    5138:	blx	r2
    513a:	b.n	4972 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    513c:	mov	r0, r4
    513e:	blx	r2
    5140:	b.n	50c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5142:	mov	r0, r4
    5144:	blx	r2
    5146:	b.n	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5148:	str	r2, [sp, #24]
    514a:	ldr	r0, [sp, #20]
    514c:	blx	r1
    514e:	ldr	r2, [sp, #24]
    5150:	b.n	4f72 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    5152:	mov	r0, r7
    5154:	blx	r2
    5156:	b.n	4a88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5158:	mov	r0, r5
    515a:	blx	r2
    515c:	b.n	4b4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    515e:	str	r2, [sp, #28]
    5160:	ldr	r0, [sp, #24]
    5162:	blx	r1
    5164:	ldr	r2, [sp, #28]
    5166:	b.n	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5168:	mov	r0, r8
    516a:	blx	r2
    516c:	b.n	4a80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    516e:	mov	r0, r6
    5170:	blx	r2
    5172:	b.n	50b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5174:	str	r2, [sp, #32]
    5176:	ldr	r0, [sp, #28]
    5178:	blx	r1
    517a:	ldr	r2, [sp, #32]
    517c:	b.n	4f5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    517e:	mov	r0, r6
    5180:	blx	r2
    5182:	b.n	4b46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5184:	mov	r0, r7
    5186:	blx	r2
    5188:	b.n	4b3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    518a:	mov	r0, r7
    518c:	blx	r2
    518e:	b.n	50ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5190:	mov	r0, r9
    5192:	blx	r2
    5194:	b.n	4a78 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    5196:	mov	r0, sl
    5198:	blx	r2
    519a:	b.n	4a70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    519c:	str	r2, [sp, #32]
    519e:	mov	r0, r1
    51a0:	mov	r3, lr
    51a2:	blx	r3
    51a4:	ldr	r2, [sp, #32]
    51a6:	b.n	4f4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    51a8:	mov	r0, r8
    51aa:	blx	r2
    51ac:	b.n	50a6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    51ae:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51b0:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51b4:	cmp	r2, #0
    51b6:	beq.w	4b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    51ba:	b.n	4a9e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x316>
    51bc:	ldr	r3, [sp, #56]	; 0x38
    51be:	ldr.w	fp, [pc, #8]	; 51c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>
    51c2:	b.n	4b66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
    51c4:	.word	0x1fff0b00
    51c8:	.word	0x00016a5c
    51cc:	.word	0x00000eb1
    51d0:	.word	0x00016b54

000051d4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    51d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51d8:	mov	r6, r1
    51da:	subw	sp, sp, #2696	; 0xa88
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    51de:	cmp.w	r3, #4294967295
    51e2:	ite	ne
    51e4:	movne	r7, r3
    51e6:	moveq	r7, r2
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    51e8:	mov	r4, r0
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    51ea:	mov	r1, r0
    51ec:	mov	r2, r6
    51ee:	add	r0, sp, #792	; 0x318
    51f0:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    51f4:	mov	r2, r7
    51f6:	mov	r1, r4
    51f8:	add.w	r0, sp, #1064	; 0x428
    51fc:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    5200:	ldr	r2, [sp, #792]	; 0x318
    5202:	mov	r1, r4
    5204:	add.w	r0, sp, #1336	; 0x538
    5208:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if(p1.isdir) 
    520c:	ldrb.w	r3, [sp, #804]	; 0x324
    5210:	cbz	r3, 521c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    5212:	ldrb.w	r3, [sp, #805]	; 0x325
    5216:	cmp	r3, #0
    5218:	beq.w	53c8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f4>
      { ScanDir(p1.store, handle) ; // in case scan directory
        WriteIndexRecord(handle, p1);
      }
    }

    Record p1o = p1;
    521c:	mov.w	r2, #272	; 0x110
    5220:	add	r1, sp, #792	; 0x318
    5222:	add.w	r0, sp, #1608	; 0x648
    5226:	bl	fc48 <memcpy>
    Record p2o = p2;
    522a:	mov.w	r2, #272	; 0x110
    522e:	add.w	r1, sp, #1064	; 0x428
    5232:	add.w	r0, sp, #1880	; 0x758
    5236:	bl	fc48 <memcpy>
    Record p3o = p3;

    char oldName[MAX_FILENAME_LEN];
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    523a:	add	r2, sp, #280	; 0x118
    523c:	mov.w	r3, #256	; 0x100
    5240:	mov	r1, r6
    5242:	mov	r0, r4
    5244:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    uint32_t jx=-1;
    Record pxo;

      // remove index from old parent
      Record px;
      if(p3.child==handle)
    5248:	ldr.w	r8, [sp, #1340]	; 0x53c
    524c:	cmp	r6, r8
    524e:	beq.w	538e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1ba>
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
    5252:	add	r0, sp, #8
    5254:	mov	r2, r8
    5256:	mov	r1, r4
    5258:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    525c:	add	r1, sp, #8
    525e:	mov.w	r2, #272	; 0x110
    5262:	addw	r0, sp, #2424	; 0x978
    5266:	bl	fc48 <memcpy>
        pxo = px;
    526a:	addw	r1, sp, #2424	; 0x978
    526e:	addw	r0, sp, #2152	; 0x868
    5272:	mov.w	r2, #272	; 0x110
    5276:	bl	fc48 <memcpy>
        while(handle != px.sibling)
    527a:	ldr.w	r5, [sp, #2432]	; 0x980
    527e:	cmp	r6, r5
    5280:	bne.n	5286 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb2>
    5282:	b.n	53e0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x20c>
    5284:	mov	r5, r3
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
    5286:	mov	r2, r5
    5288:	mov	r1, r4
    528a:	add	r0, sp, #8
    528c:	bl	1f70 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5290:	mov.w	r2, #272	; 0x110
    5294:	add	r1, sp, #8
    5296:	addw	r0, sp, #2424	; 0x978
    529a:	bl	fc48 <memcpy>
          pxo = px;
    529e:	mov.w	r2, #272	; 0x110
    52a2:	addw	r1, sp, #2424	; 0x978
    52a6:	addw	r0, sp, #2152	; 0x868
    52aa:	bl	fc48 <memcpy>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    52ae:	ldr.w	r3, [sp, #2432]	; 0x980
    52b2:	cmp	r6, r3
    52b4:	bne.n	5284 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb0>
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    52b6:	ldr	r3, [sp, #800]	; 0x320
    52b8:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    52bc:	addw	r2, sp, #2424	; 0x978
    52c0:	mov	r1, r5
    52c2:	mov	r0, r4
    52c4:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    52c8:	ldrh.w	r0, [sp, #1078]	; 0x436
      p1.sibling = p2.child;
    52cc:	ldr.w	r3, [sp, #1068]	; 0x42c
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    52d0:	strh.w	r0, [sp, #806]	; 0x326
      p1.sibling = p2.child;
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    52d4:	add	r2, sp, #792	; 0x318
    52d6:	mov	r1, r6
    52d8:	mov	r0, r4
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    52da:	str	r3, [sp, #800]	; 0x320
        px.sibling = p1.sibling;
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
    52dc:	str	r7, [sp, #792]	; 0x318
      p1.store = p2.store;
      p1.sibling = p2.child;
      p2.child = handle;
    52de:	str.w	r6, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    52e2:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    52e6:	add.w	r2, sp, #1064	; 0x428
    52ea:	mov	r1, r7
    52ec:	mov	r0, r4
    52ee:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      // now working on disk storage
      char newName[MAX_FILENAME_LEN];
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    52f2:	mov.w	r3, #256	; 0x100
    52f6:	mov	r1, r6
    52f8:	add	r2, sp, #536	; 0x218
    52fa:	mov	r0, r4
    52fc:	bl	23d0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
        Serial.print(p1.store); Serial.print(": ");Serial.println(newName);
        dumpIndexList();
      #endif


    if(p1o.store == p2o.store)
    5300:	ldrh.w	r1, [sp, #1622]	; 0x656
    5304:	ldrh.w	r3, [sp, #1894]	; 0x766
    5308:	cmp	r1, r3
    530a:	beq.n	53a6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1d2>
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    530c:	ldrb.w	r2, [sp, #1620]	; 0x654
    5310:	cbz	r2, 5354 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x180>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    }
    else
    { // move directory cross mtp-disks
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5312:	add	r2, sp, #536	; 0x218
    5314:	str	r2, [sp, #0]
    5316:	adds	r0, r4, #4
    5318:	add	r2, sp, #280	; 0x118
    531a:	bl	4754 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    531e:	cmp	r0, #0
    5320:	bne.n	53ba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e6>
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    5322:	mov	r1, r5
    5324:	addw	r2, sp, #2152	; 0x868
    5328:	mov	r0, r4
    532a:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    532e:	add.w	r2, sp, #1608	; 0x648
    5332:	mov	r1, r6
    5334:	mov	r0, r4
    5336:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    533a:	add.w	r2, sp, #1880	; 0x758
    533e:	mov	r1, r7
    5340:	mov	r0, r4
    5342:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    5346:	mov.w	r8, #0
  }
    534a:	mov	r0, r8
    534c:	addw	sp, sp, #2696	; 0xa88
    5350:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5354:	add	r2, sp, #536	; 0x218
    5356:	str	r2, [sp, #0]
    5358:	adds	r0, r4, #4
    535a:	add	r2, sp, #280	; 0x118
    535c:	bl	3ca0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5360:	mov	r8, r0
    5362:	cmp	r0, #0
    5364:	beq.n	5322 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    5366:	add	r0, sp, #280	; 0x118
    5368:	bl	13580 <strlen>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    536c:	ldrh.w	r5, [sp, #1894]	; 0x766
    5370:	mov	r1, r0
    5372:	add.w	r4, r4, r5, lsl #2
    5376:	add	r0, sp, #280	; 0x118
    5378:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    537c:	ldr	r0, [pc, #100]	; (53e4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x210>)
    537e:	bl	11800 <Print::println()>
    5382:	ldr	r0, [r4, #88]	; 0x58
    5384:	ldr	r3, [r0, #0]
    5386:	add	r1, sp, #280	; 0x118
    5388:	ldr	r3, [r3, #16]
    538a:	blx	r3
    538c:	b.n	534a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x176>

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    538e:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(p1.parent, p3);    
    5390:	ldr	r1, [sp, #792]	; 0x318

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5392:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    5396:	add.w	r2, sp, #1336	; 0x538
    539a:	mov	r0, r4
    539c:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    #if DEBUG>1
      Serial.print(p1.store); Serial.print(": "); Serial.println(oldName);
      dumpIndexList();
    #endif

    uint32_t jx=-1;
    53a0:	mov.w	r5, #4294967295
    53a4:	b.n	52c8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf4>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    53a6:	add.w	r1, r4, r1, lsl #2
    53aa:	add	r2, sp, #536	; 0x218
    53ac:	ldr	r0, [r1, #88]	; 0x58
    53ae:	ldr	r3, [r0, #0]
    53b0:	add	r1, sp, #280	; 0x118
    53b2:	ldr	r3, [r3, #12]
    53b4:	blx	r3
      #endif


    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    53b6:	cmp	r0, #0
    53b8:	beq.n	5322 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    53ba:	mov.w	r8, #1
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
  }
    53be:	mov	r0, r8
    53c0:	addw	sp, sp, #2696	; 0xa88
    53c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(p1.parent); 

    if(p1.isdir) 
    { if(!p1.scanned) 
      { ScanDir(p1.store, handle) ; // in case scan directory
    53c8:	mov	r2, r6
    53ca:	ldrh.w	r1, [sp, #806]	; 0x326
    53ce:	mov	r0, r4
    53d0:	bl	2b5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    53d4:	add	r2, sp, #792	; 0x318
    53d6:	mov	r1, r6
    53d8:	mov	r0, r4
    53da:	bl	1d90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    53de:	b.n	521c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    53e0:	mov	r5, r8
    53e2:	b.n	52b6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>
    53e4:	.word	0x1fff0b00

000053e8 <MTPD::GetNumObjects(unsigned long, unsigned long)>:

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    53e8:	push	{r4, r5, r6, lr}
    53ea:	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    53ec:	ldr	r0, [r0, #0]
    53ee:	ldr	r3, [r0, #0]

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    53f0:	subs	r5, r1, #1
    storage_->StartGetObjectHandles(store, parent);
    53f2:	ldr	r3, [r3, #28]
    53f4:	mov	r1, r5
    53f6:	blx	r3
    int num = 0;
    53f8:	movs	r4, #0
    53fa:	b.n	53fe <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    while (storage_->GetNextObjectHandle(store)) num++;
    53fc:	adds	r4, #1
    53fe:	ldr	r0, [r6, #0]
    5400:	ldr	r3, [r0, #0]
    5402:	mov	r1, r5
    5404:	ldr	r3, [r3, #32]
    5406:	blx	r3
    5408:	cmp	r0, #0
    540a:	bne.n	53fc <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    return num;
  }
    540c:	mov	r0, r4
    540e:	pop	{r4, r5, r6, pc}

00005410 <MTPD::get_buffer()>:


#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    5410:	push	{r4, lr}
    5412:	mov	r4, r0
    5414:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    5416:	cbnz	r0, 5420 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    5418:	bl	10858 <usb_malloc>
    541c:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    541e:	cbz	r0, 5422 <MTPD::get_buffer()+0x12>
    5420:	pop	{r4, pc}
    5422:	bl	19f8 <mtp_yield()>
    5426:	b.n	5414 <MTPD::get_buffer()+0x4>

00005428 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5428:	cmp	r2, #0
    542a:	ble.n	548a <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    542c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5430:	mov.w	r9, #0
    5434:	mov	r6, r2
    5436:	mov	r7, r1
    5438:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    543a:	mov	r8, r9
    543c:	b.n	5442 <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    543e:	cmp	r6, r9
    5440:	ble.n	5486 <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    5442:	mov	r0, r5
    5444:	bl	5410 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    5448:	ldr	r3, [r5, #4]
    544a:	ldrh.w	r0, [r3], #8
    544e:	rsb	r2, r9, r6
    5452:	rsb	r4, r0, #64	; 0x40
    5456:	cmp	r4, r2
    5458:	it	ge
    545a:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    545c:	add.w	r1, r7, r9
    5460:	add	r0, r3
    5462:	mov	r2, r4
    5464:	bl	fc48 <memcpy>
        data_buffer_->len += to_copy;
    5468:	ldr	r1, [r5, #4]
    546a:	ldrh	r3, [r1, #0]
    546c:	add	r3, r4
    546e:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5470:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    5472:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    5474:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5476:	bne.n	543e <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    5478:	movs	r0, #4
    547a:	bl	10a54 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    547e:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5480:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5484:	bgt.n	5442 <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    5486:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    548a:	bx	lr

0000548c <MTPD::writestring(char const*)>:
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    548c:	push	{r4, r5, lr}
    if (*str) 
    548e:	ldrb	r3, [r1, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5490:	sub	sp, #12
    5492:	mov	r4, r0
    if (*str) 
    5494:	cbz	r3, 54f0 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    5496:	mov	r0, r1
    5498:	mov	r5, r1
    549a:	bl	13580 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    549e:	ldrb	r1, [r4, #8]
    54a0:	adds	r0, #1
    54a2:	strb.w	r0, [sp, #3]
    54a6:	cbz	r1, 5502 <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    54a8:	ldr	r3, [r4, #12]
    54aa:	adds	r3, #1
    54ac:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    54ae:	ldrb	r2, [r5, #0]
    54b0:	cbnz	r2, 54c0 <MTPD::writestring(char const*)+0x34>
    54b2:	b.n	54e8 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    54b4:	ldr	r3, [r4, #12]
    54b6:	adds	r3, #2
    54b8:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    54ba:	ldrb.w	r2, [r5, #1]!
    54be:	cbz	r2, 54de <MTPD::writestring(char const*)+0x52>
    54c0:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    54c4:	cmp	r1, #0
    54c6:	bne.n	54b4 <MTPD::writestring(char const*)+0x28>
    54c8:	movs	r2, #2
    54ca:	add.w	r1, sp, #6
    54ce:	mov	r0, r4
    54d0:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    54d4:	ldrb.w	r2, [r5, #1]!
    54d8:	ldrb	r1, [r4, #8]
    54da:	cmp	r2, #0
    54dc:	bne.n	54c0 <MTPD::writestring(char const*)+0x34>
    54de:	movs	r3, #0
    54e0:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    54e4:	cbz	r1, 5526 <MTPD::writestring(char const*)+0x9a>
    54e6:	ldr	r3, [r4, #12]
      write_length_ += len;
    54e8:	adds	r3, #2
    54ea:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    54ec:	add	sp, #12
    54ee:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    54f0:	ldrb	r2, [r0, #8]
    54f2:	strb.w	r3, [sp, #2]
    54f6:	cbz	r2, 5518 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    54f8:	ldr	r3, [r0, #12]
    54fa:	adds	r3, #1
    54fc:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    54fe:	add	sp, #12
    5500:	pop	{r4, r5, pc}
    5502:	movs	r2, #1
    5504:	add.w	r1, sp, #3
    5508:	mov	r0, r4
    550a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    550e:	ldrb	r2, [r5, #0]
    5510:	ldrb	r1, [r4, #8]
    5512:	cmp	r2, #0
    5514:	bne.n	54c0 <MTPD::writestring(char const*)+0x34>
    5516:	b.n	54de <MTPD::writestring(char const*)+0x52>
    5518:	movs	r2, #1
    551a:	add.w	r1, sp, #2
    551e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    5522:	add	sp, #12
    5524:	pop	{r4, r5, pc}
    5526:	mov	r0, r4
    5528:	movs	r2, #2
    552a:	add	r1, sp, #4
    552c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5530:	add	sp, #12
    5532:	pop	{r4, r5, pc}

00005534 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5534:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5536:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5538:	sub	sp, #8
    553a:	mov	r4, r0
    553c:	mov	r5, r1
    553e:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5542:	cbz	r3, 557c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    5544:	ldr	r3, [r0, #12]
    5546:	movw	r2, #65535	; 0xffff
    554a:	adds	r3, #2
    554c:	str	r3, [r0, #12]
    554e:	strh.w	r2, [sp, #6]
    5552:	adds	r3, #2
    5554:	movs	r2, #0
    5556:	str	r3, [r4, #12]
    5558:	strb.w	r2, [sp, #2]
    555c:	adds	r3, #1
    555e:	str	r3, [r4, #12]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5560:	movw	r3, #54274	; 0xd402
    5564:	cmp	r5, r3
    5566:	beq.n	55b8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5568:	ldrb	r3, [r4, #8]
    556a:	movs	r2, #0
    556c:	strb.w	r2, [sp, #3]
    5570:	cbz	r3, 55d4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    5572:	ldr	r3, [r4, #12]
    5574:	adds	r3, #1
    5576:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5578:	add	sp, #8
    557a:	pop	{r4, r5, r6, pc}
    557c:	movs	r2, #2
    557e:	add	r1, sp, #4
    5580:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5584:	ldrb	r6, [r4, #8]
    5586:	movw	r3, #65535	; 0xffff
    558a:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    558e:	cbnz	r6, 55e4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    5590:	movs	r2, #2
    5592:	add.w	r1, sp, #6
    5596:	mov	r0, r4
    5598:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    559c:	ldrb	r3, [r4, #8]
    559e:	strb.w	r6, [sp, #2]
    55a2:	cbnz	r3, 55e8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    55a4:	movs	r2, #1
    55a6:	add.w	r1, sp, #2
    55aa:	mov	r0, r4
    55ac:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    55b0:	movw	r3, #54274	; 0xd402
    55b4:	cmp	r5, r3
    55b6:	bne.n	5568 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    55b8:	ldr	r1, [pc, #48]	; (55ec <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    55ba:	mov	r0, r4
    55bc:	bl	548c <MTPD::writestring(char const*)>
    55c0:	ldr	r1, [pc, #40]	; (55ec <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    55c2:	mov	r0, r4
    55c4:	bl	548c <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    55c8:	ldrb	r3, [r4, #8]
    55ca:	movs	r2, #0
    55cc:	strb.w	r2, [sp, #3]
    55d0:	cmp	r3, #0
    55d2:	bne.n	5572 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    55d4:	mov	r0, r4
    55d6:	movs	r2, #1
    55d8:	add.w	r1, sp, #3
    55dc:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    55e0:	add	sp, #8
    55e2:	pop	{r4, r5, r6, pc}
    55e4:	ldr	r3, [r4, #12]
    55e6:	b.n	5552 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    55e8:	ldr	r3, [r4, #12]
    55ea:	b.n	555c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    55ec:	.word	0x00016d54

000055f0 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    55f0:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    55f2:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    55f4:	sub	sp, #68	; 0x44
    55f6:	movs	r5, #100	; 0x64
    55f8:	mov	r4, r0
    55fa:	strh.w	r5, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    55fe:	cmp	r3, #0
    5600:	beq.w	5750 <MTPD::WriteDescriptor()+0x160>
      write_length_ += len;
    5604:	ldr	r3, [r0, #12]
    5606:	movs	r2, #6
    5608:	adds	r3, #2
    560a:	str	r3, [r0, #12]
    560c:	str	r2, [sp, #24]
    560e:	adds	r3, #4
    5610:	movs	r2, #100	; 0x64
    5612:	str	r3, [r4, #12]
    5614:	strh.w	r2, [sp, #6]
    5618:	adds	r3, #2
    561a:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    561c:	ldr	r1, [pc, #556]	; (584c <MTPD::WriteDescriptor()+0x25c>)
    561e:	mov	r0, r4
    5620:	bl	548c <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5624:	ldrb	r3, [r4, #8]
    5626:	movs	r2, #0
    5628:	strh.w	r2, [sp, #4]
    562c:	cmp	r3, #0
    562e:	beq.w	580a <MTPD::WriteDescriptor()+0x21a>
      write_length_ += len;
    5632:	ldr	r3, [r4, #12]
    5634:	movs	r2, #20
    5636:	adds	r3, #2
    5638:	str	r3, [r4, #12]
    563a:	str	r2, [sp, #20]
    563c:	adds	r3, #4
    563e:	str	r3, [r4, #12]
    5640:	movs	r6, #1
    5642:	ldr	r5, [pc, #524]	; (5850 <MTPD::WriteDescriptor()+0x260>)
    5644:	movw	r3, #4097	; 0x1001
    5648:	add.w	r7, r5, #38	; 0x26
    564c:	b.n	565e <MTPD::WriteDescriptor()+0x6e>
    564e:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5650:	cmp	r5, r7
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5652:	add.w	r3, r3, #2
    5656:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5658:	beq.n	5678 <MTPD::WriteDescriptor()+0x88>
    565a:	ldrh.w	r3, [r5, #2]!
    565e:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5662:	cmp	r6, #0
    5664:	bne.n	564e <MTPD::WriteDescriptor()+0x5e>
    5666:	movs	r2, #2
    5668:	add.w	r1, sp, #10
    566c:	mov	r0, r4
    566e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5672:	cmp	r5, r7
    5674:	ldrb	r6, [r4, #8]
    5676:	bne.n	565a <MTPD::WriteDescriptor()+0x6a>
    5678:	movs	r2, #4
    567a:	str	r2, [sp, #28]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    567c:	cmp	r6, #0
    567e:	beq.w	57fe <MTPD::WriteDescriptor()+0x20e>
      write_length_ += len;
    5682:	ldr	r3, [r4, #12]
    5684:	adds	r3, #4
    5686:	str	r3, [r4, #12]
    5688:	ldr	r5, [pc, #456]	; (5854 <MTPD::WriteDescriptor()+0x264>)
    568a:	movw	r3, #16388	; 0x4004
    568e:	adds	r7, r5, #6
    5690:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5694:	cbz	r6, 56ae <MTPD::WriteDescriptor()+0xbe>
      write_length_ += len;
    5696:	ldr	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5698:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    569a:	add.w	r3, r3, #2
    569e:	str	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    56a0:	beq.n	56be <MTPD::WriteDescriptor()+0xce>
    56a2:	ldrh.w	r3, [r5, #2]!
    56a6:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    56aa:	cmp	r6, #0
    56ac:	bne.n	5696 <MTPD::WriteDescriptor()+0xa6>
    56ae:	movs	r2, #2
    56b0:	add	r1, sp, #12
    56b2:	mov	r0, r4
    56b4:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    56b8:	cmp	r7, r5
    56ba:	ldrb	r6, [r4, #8]
    56bc:	bne.n	56a2 <MTPD::WriteDescriptor()+0xb2>
    56be:	movs	r3, #1
    56c0:	str	r3, [sp, #40]	; 0x28
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    56c2:	cmp	r6, #0
    56c4:	beq.n	5784 <MTPD::WriteDescriptor()+0x194>
      write_length_ += len;
    56c6:	ldr	r3, [r4, #12]
    56c8:	movw	r2, #54274	; 0xd402
    56cc:	adds	r3, #4
    56ce:	str	r3, [r4, #12]
    56d0:	strh.w	r2, [sp, #18]
    56d4:	adds	r3, #2
    56d6:	movs	r2, #0
    56d8:	str	r3, [r4, #12]
    56da:	str	r2, [sp, #36]	; 0x24
    56dc:	adds	r3, #4
    56de:	movs	r2, #2
    56e0:	str	r3, [r4, #12]
    56e2:	str	r2, [sp, #32]
    56e4:	adds	r3, #4
    56e6:	mov.w	r2, #12288	; 0x3000
    56ea:	str	r3, [r4, #12]
    56ec:	strh.w	r2, [sp, #16]
    56f0:	adds	r3, #2
    56f2:	movw	r2, #12289	; 0x3001
    56f6:	str	r3, [r4, #12]
    56f8:	strh.w	r2, [sp, #14]
    56fc:	adds	r3, #2
    56fe:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    5700:	ldr	r1, [pc, #340]	; (5858 <MTPD::WriteDescriptor()+0x268>)
    5702:	mov	r0, r4
    5704:	bl	548c <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    5708:	ldr	r1, [pc, #336]	; (585c <MTPD::WriteDescriptor()+0x26c>)
    570a:	mov	r0, r4
    570c:	bl	548c <MTPD::writestring(char const*)>
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    5710:	vldr	s0, [pc, #332]	; 5860 <MTPD::WriteDescriptor()+0x270>
    5714:	add	r2, sp, #44	; 0x2c
    5716:	movs	r1, #2
    5718:	movs	r0, #3
    571a:	bl	101a8 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    571e:	movs	r2, #20
    5720:	ldr	r1, [pc, #320]	; (5864 <MTPD::WriteDescriptor()+0x274>)
    5722:	add	r0, sp, #44	; 0x2c
    5724:	bl	134fc <strlcat>
    writestring( buf );    
    5728:	mov	r0, r4
    572a:	add	r1, sp, #44	; 0x2c
    572c:	bl	548c <MTPD::writestring(char const*)>
    5730:	ldr	r2, [pc, #308]	; (5868 <MTPD::WriteDescriptor()+0x278>)
    5732:	add	r3, sp, #44	; 0x2c
    5734:	add.w	r0, sp, #54	; 0x36
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    5738:	ldrh.w	r1, [r2, #2]!
    573c:	strb.w	r1, [r3], #1
    5740:	cmp	r3, r0
    5742:	bne.n	5738 <MTPD::WriteDescriptor()+0x148>
    #pragma GCC diagnostic pop
    writestring(buf);    
    5744:	add	r1, sp, #44	; 0x2c
    5746:	mov	r0, r4
    5748:	bl	548c <MTPD::writestring(char const*)>
  }
    574c:	add	sp, #68	; 0x44
    574e:	pop	{r4, r5, r6, r7, pc}
    5750:	movs	r2, #2
    5752:	add	r1, sp, #8
    5754:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5758:	ldrb	r3, [r4, #8]
    575a:	movs	r2, #6
    575c:	str	r2, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    575e:	cmp	r3, #0
    5760:	bne.n	582a <MTPD::WriteDescriptor()+0x23a>
    5762:	movs	r2, #4
    5764:	add	r1, sp, #24
    5766:	mov	r0, r4
    5768:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    576c:	ldrb	r3, [r4, #8]
    576e:	strh.w	r5, [sp, #6]
    5772:	cmp	r3, #0
    5774:	bne.n	582e <MTPD::WriteDescriptor()+0x23e>
    5776:	movs	r2, #2
    5778:	add.w	r1, sp, #6
    577c:	mov	r0, r4
    577e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5782:	b.n	561c <MTPD::WriteDescriptor()+0x2c>
    5784:	movs	r2, #4
    5786:	add	r1, sp, #40	; 0x28
    5788:	mov	r0, r4
    578a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    578e:	ldrb	r3, [r4, #8]
    5790:	movw	r2, #54274	; 0xd402
    5794:	strh.w	r2, [sp, #18]
    5798:	cmp	r3, #0
    579a:	bne.n	5832 <MTPD::WriteDescriptor()+0x242>
    579c:	movs	r2, #2
    579e:	add.w	r1, sp, #18
    57a2:	mov	r0, r4
    57a4:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    57a8:	ldrb	r3, [r4, #8]
    57aa:	str	r6, [sp, #36]	; 0x24
    57ac:	cmp	r3, #0
    57ae:	bne.n	5836 <MTPD::WriteDescriptor()+0x246>
    57b0:	movs	r2, #4
    57b2:	add	r1, sp, #36	; 0x24
    57b4:	mov	r0, r4
    57b6:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    57ba:	ldrb	r3, [r4, #8]
    57bc:	movs	r5, #2
    57be:	str	r5, [sp, #32]
    57c0:	cmp	r3, #0
    57c2:	bne.n	583a <MTPD::WriteDescriptor()+0x24a>
    57c4:	movs	r2, #4
    57c6:	add	r1, sp, #32
    57c8:	mov	r0, r4
    57ca:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    57ce:	ldrb	r3, [r4, #8]
    57d0:	mov.w	r2, #12288	; 0x3000
    57d4:	strh.w	r2, [sp, #16]
    57d8:	cbnz	r3, 583e <MTPD::WriteDescriptor()+0x24e>
    57da:	mov	r2, r5
    57dc:	add	r1, sp, #16
    57de:	mov	r0, r4
    57e0:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    57e4:	ldrb	r3, [r4, #8]
    57e6:	movw	r2, #12289	; 0x3001
    57ea:	strh.w	r2, [sp, #14]
    57ee:	cbnz	r3, 5842 <MTPD::WriteDescriptor()+0x252>
    57f0:	mov	r2, r5
    57f2:	add.w	r1, sp, #14
    57f6:	mov	r0, r4
    57f8:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    57fc:	b.n	5700 <MTPD::WriteDescriptor()+0x110>
    57fe:	add	r1, sp, #28
    5800:	mov	r0, r4
    5802:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5806:	ldrb	r6, [r4, #8]
    5808:	b.n	5688 <MTPD::WriteDescriptor()+0x98>
    580a:	movs	r2, #2
    580c:	add	r1, sp, #4
    580e:	mov	r0, r4
    5810:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5814:	ldrb	r3, [r4, #8]
    5816:	movs	r2, #20
    5818:	str	r2, [sp, #20]
    581a:	cbnz	r3, 5846 <MTPD::WriteDescriptor()+0x256>
    581c:	movs	r2, #4
    581e:	add	r1, sp, #20
    5820:	mov	r0, r4
    5822:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5826:	ldrb	r6, [r4, #8]
    5828:	b.n	5642 <MTPD::WriteDescriptor()+0x52>
    582a:	ldr	r3, [r4, #12]
    582c:	b.n	560e <MTPD::WriteDescriptor()+0x1e>
    582e:	ldr	r3, [r4, #12]
    5830:	b.n	5618 <MTPD::WriteDescriptor()+0x28>
    5832:	ldr	r3, [r4, #12]
    5834:	b.n	56d4 <MTPD::WriteDescriptor()+0xe4>
    5836:	ldr	r3, [r4, #12]
    5838:	b.n	56dc <MTPD::WriteDescriptor()+0xec>
    583a:	ldr	r3, [r4, #12]
    583c:	b.n	56e4 <MTPD::WriteDescriptor()+0xf4>
    583e:	ldr	r3, [r4, #12]
    5840:	b.n	56f0 <MTPD::WriteDescriptor()+0x100>
    5842:	ldr	r3, [r4, #12]
    5844:	b.n	56fc <MTPD::WriteDescriptor()+0x10c>
    5846:	ldr	r3, [r4, #12]
    5848:	b.n	563c <MTPD::WriteDescriptor()+0x4c>
    584a:	nop
    584c:	.word	0x00016d5c
    5850:	.word	0x00016d1c
    5854:	.word	0x00016da4
    5858:	.word	0x00016d70
    585c:	.word	0x00016d54
    5860:	.word	0x3fc51eb8
    5864:	.word	0x00016d78
    5868:	.word	0x1fff0ae0

0000586c <MTPD::WriteStorageIDs()>:
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    586c:	push	{r4, r5, r6, lr}
    586e:	mov	r5, r0
    uint32_t num=storage_->get_FSCount();
    5870:	ldr	r0, [r0, #0]
    5872:	ldr	r2, [pc, #92]	; (58d0 <MTPD::WriteStorageIDs()+0x64>)
    5874:	ldr	r3, [r0, #0]
    5876:	ldr	r3, [r3, #4]
    5878:	cmp	r3, r2
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    587a:	sub	sp, #8
    587c:	bne.n	58c8 <MTPD::WriteStorageIDs()+0x5c>
    {
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    587e:	ldr	r6, [r0, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5880:	ldrb	r3, [r5, #8]
    5882:	str	r6, [sp, #0]
    5884:	cbz	r3, 58bc <MTPD::WriteStorageIDs()+0x50>
      write_length_ += len;
    5886:	ldr	r3, [r5, #12]
    5888:	adds	r3, #4
    588a:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    588c:	cbz	r6, 58b8 <MTPD::WriteStorageIDs()+0x4c>
    588e:	movs	r4, #0
    5890:	b.n	589e <MTPD::WriteStorageIDs()+0x32>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5892:	ldr	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5894:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5896:	add.w	r3, r3, #4
    589a:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    589c:	beq.n	58b8 <MTPD::WriteStorageIDs()+0x4c>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    589e:	ldrb	r3, [r5, #8]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    58a0:	adds	r4, #1
    58a2:	str	r4, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    58a4:	cmp	r3, #0
    58a6:	bne.n	5892 <MTPD::WriteStorageIDs()+0x26>
    58a8:	movs	r2, #4
    58aa:	add.w	r1, sp, r2
    58ae:	mov	r0, r5
    58b0:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    58b4:	cmp	r6, r4
    58b6:	bne.n	589e <MTPD::WriteStorageIDs()+0x32>
  }
    58b8:	add	sp, #8
    58ba:	pop	{r4, r5, r6, pc}
    58bc:	movs	r2, #4
    58be:	mov	r1, sp
    58c0:	mov	r0, r5
    58c2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    58c6:	b.n	588c <MTPD::WriteStorageIDs()+0x20>
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    58c8:	blx	r3
    58ca:	mov	r6, r0
    58cc:	b.n	5880 <MTPD::WriteStorageIDs()+0x14>
    58ce:	nop
    58d0:	.word	0x00001719

000058d4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    58d4:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    58d6:	ldrb	r3, [r0, #8]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    58d8:	sub	sp, #8
    58da:	mov	r4, r0
    if (write_get_length_) {
    58dc:	cbnz	r3, 5928 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x54>
    58de:	mov	r5, r1
    58e0:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    58e2:	bl	53e8 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    58e6:	ldrb	r3, [r4, #8]
    58e8:	str	r0, [sp, #0]
    58ea:	cbz	r3, 5936 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x62>
      write_length_ += len;
    58ec:	ldr	r3, [r4, #12]
    58ee:	adds	r3, #4
    58f0:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    58f2:	ldr	r0, [r4, #0]
    58f4:	ldr	r3, [r0, #0]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    58f6:	subs	r5, #1
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    58f8:	mov	r2, r6
    58fa:	ldr	r3, [r3, #28]
    58fc:	mov	r1, r5
    58fe:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    5900:	ldr	r0, [r4, #0]
    5902:	ldr	r3, [r0, #0]
    5904:	mov	r1, r5
    5906:	ldr	r3, [r3, #32]
    5908:	blx	r3
    590a:	cbz	r0, 5932 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    590c:	ldrb	r3, [r4, #8]
    590e:	str	r0, [sp, #4]
    5910:	cbz	r3, 591a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x46>
      write_length_ += len;
    5912:	ldr	r3, [r4, #12]
    5914:	adds	r3, #4
    5916:	str	r3, [r4, #12]
    5918:	b.n	5900 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
    591a:	movs	r2, #4
    591c:	add.w	r1, sp, r2
    5920:	mov	r0, r4
    5922:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5926:	b.n	5900 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    5928:	bl	53e8 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    592c:	adds	r0, #1
    592e:	lsls	r0, r0, #2
    5930:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    }
  }
    5932:	add	sp, #8
    5934:	pop	{r4, r5, r6, pc}
    5936:	movs	r2, #4
    5938:	mov	r1, sp
    593a:	mov	r0, r4
    593c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5940:	b.n	58f2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
    5942:	nop

00005944 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    5944:	push	{r4, r5, r6, r7, lr}
    5946:	mov	r4, r0
    5948:	sub	sp, #332	; 0x14c
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    594a:	ldr	r0, [r0, #0]
    594c:	add.w	r6, sp, #10
    5950:	add	r5, sp, #24
    5952:	ldr	r3, [r0, #0]
    5954:	stmia.w	sp, {r5, r6}
    5958:	add	r2, sp, #72	; 0x48
    595a:	ldr	r7, [r3, #36]	; 0x24
    595c:	add	r3, sp, #20
    595e:	blx	r7
    5960:	ldrh	r3, [r6, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5962:	ldrb	r2, [r4, #8]
    5964:	adds	r3, #1
    5966:	str	r3, [sp, #28]
    5968:	cmp	r2, #0
    596a:	beq.n	5a20 <MTPD::GetObjectInfo(unsigned long)+0xdc>
      write_length_ += len;
    596c:	ldr	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    596e:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5970:	adds	r3, #4
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5972:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5974:	str	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5976:	beq.w	5b50 <MTPD::GetObjectInfo(unsigned long)+0x20c>
    597a:	movs	r2, #0
    597c:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5980:	adds	r3, #2
    5982:	movs	r2, #0
    5984:	str	r3, [r4, #12]
    5986:	strh.w	r2, [sp, #14]
    598a:	adds	r3, #2
    598c:	ldr	r2, [sp, #20]
    598e:	str	r3, [r4, #12]
    5990:	str	r2, [sp, #60]	; 0x3c
    5992:	adds	r3, #4
    5994:	movs	r2, #0
    5996:	str	r3, [r4, #12]
    5998:	strh.w	r2, [sp, #12]
    599c:	adds	r3, #2
    599e:	movs	r2, #0
    59a0:	str	r3, [r4, #12]
    59a2:	str	r2, [sp, #56]	; 0x38
    59a4:	adds	r3, #4
    59a6:	movs	r2, #0
    59a8:	str	r3, [r4, #12]
    59aa:	str	r2, [sp, #52]	; 0x34
    59ac:	adds	r3, #4
    59ae:	movs	r2, #0
    59b0:	str	r3, [r4, #12]
    59b2:	str	r2, [sp, #48]	; 0x30
    59b4:	adds	r3, #4
    59b6:	movs	r2, #0
    59b8:	str	r3, [r4, #12]
    59ba:	str	r2, [sp, #44]	; 0x2c
    59bc:	adds	r3, #4
    59be:	movs	r2, #0
    59c0:	str	r3, [r4, #12]
    59c2:	str	r2, [sp, #40]	; 0x28
    59c4:	adds	r3, #4
    59c6:	movs	r2, #0
    59c8:	str	r3, [r4, #12]
    59ca:	str	r2, [sp, #36]	; 0x24
    59cc:	adds	r3, #4
    59ce:	ldr	r2, [r5, #0]
    59d0:	str	r3, [r4, #12]
    59d2:	str	r2, [sp, #32]
    59d4:	ldr	r2, [sp, #20]
    59d6:	sub.w	r2, r2, #4294967295
    59da:	clz	r2, r2
    59de:	lsrs	r2, r2, #5
    59e0:	adds	r3, #4
    59e2:	str	r3, [r4, #12]
    59e4:	strh.w	r2, [sp, #18]
    59e8:	adds	r3, #2
    59ea:	movs	r2, #0
    59ec:	str	r3, [r4, #12]
    59ee:	str	r2, [sp, #68]	; 0x44
    59f0:	adds	r3, #4
    59f2:	movs	r2, #0
    59f4:	str	r3, [r4, #12]
    59f6:	str	r2, [sp, #64]	; 0x40
    59f8:	adds	r3, #4
    59fa:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    59fc:	add	r1, sp, #72	; 0x48
    59fe:	mov	r0, r4
    5a00:	bl	548c <MTPD::writestring(char const*)>
    writestring("");  // date created
    5a04:	mov	r0, r4
    5a06:	ldr	r1, [pc, #396]	; (5b94 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    5a08:	bl	548c <MTPD::writestring(char const*)>
    writestring("");  // date modified
    5a0c:	mov	r0, r4
    5a0e:	ldr	r1, [pc, #388]	; (5b94 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    5a10:	bl	548c <MTPD::writestring(char const*)>
    writestring("");  // keywords
    5a14:	mov	r0, r4
    5a16:	ldr	r1, [pc, #380]	; (5b94 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    5a18:	bl	548c <MTPD::writestring(char const*)>
  }
    5a1c:	add	sp, #332	; 0x14c
    5a1e:	pop	{r4, r5, r6, r7, pc}
    5a20:	add	r1, sp, #28
    5a22:	movs	r2, #4
    5a24:	mov	r0, r4
    5a26:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5a2a:	ldr	r3, [sp, #20]
    5a2c:	ldrb	r6, [r4, #8]
    5a2e:	adds	r3, #1
    5a30:	movw	r3, #12289	; 0x3001
    5a34:	it	ne
    5a36:	movne	r3, #0
    5a38:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5a3c:	cmp	r6, #0
    5a3e:	bne.w	5b62 <MTPD::GetObjectInfo(unsigned long)+0x21e>
    5a42:	add	r1, sp, #16
    5a44:	movs	r2, #2
    5a46:	mov	r0, r4
    5a48:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5a4c:	ldrb	r3, [r4, #8]
    5a4e:	strh.w	r6, [sp, #14]
    5a52:	cmp	r3, #0
    5a54:	bne.w	5b66 <MTPD::GetObjectInfo(unsigned long)+0x222>
    5a58:	movs	r2, #2
    5a5a:	add.w	r1, sp, #14
    5a5e:	mov	r0, r4
    5a60:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5a64:	ldrb	r3, [r4, #8]
    5a66:	ldr	r2, [sp, #20]
    5a68:	str	r2, [sp, #60]	; 0x3c
    5a6a:	cmp	r3, #0
    5a6c:	bne.n	5b6a <MTPD::GetObjectInfo(unsigned long)+0x226>
    5a6e:	add	r1, sp, #60	; 0x3c
    5a70:	movs	r2, #4
    5a72:	mov	r0, r4
    5a74:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5a78:	ldrb	r3, [r4, #8]
    5a7a:	strh.w	r6, [sp, #12]
    5a7e:	cmp	r3, #0
    5a80:	bne.n	5b6e <MTPD::GetObjectInfo(unsigned long)+0x22a>
    5a82:	add	r1, sp, #12
    5a84:	movs	r2, #2
    5a86:	mov	r0, r4
    5a88:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5a8c:	ldrb	r3, [r4, #8]
    5a8e:	str	r6, [sp, #56]	; 0x38
    5a90:	cmp	r3, #0
    5a92:	bne.n	5b72 <MTPD::GetObjectInfo(unsigned long)+0x22e>
    5a94:	add	r1, sp, #56	; 0x38
    5a96:	movs	r2, #4
    5a98:	mov	r0, r4
    5a9a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5a9e:	ldrb	r3, [r4, #8]
    5aa0:	str	r6, [sp, #52]	; 0x34
    5aa2:	cmp	r3, #0
    5aa4:	bne.n	5b76 <MTPD::GetObjectInfo(unsigned long)+0x232>
    5aa6:	add	r1, sp, #52	; 0x34
    5aa8:	movs	r2, #4
    5aaa:	mov	r0, r4
    5aac:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5ab0:	ldrb	r3, [r4, #8]
    5ab2:	str	r6, [sp, #48]	; 0x30
    5ab4:	cmp	r3, #0
    5ab6:	bne.n	5b7a <MTPD::GetObjectInfo(unsigned long)+0x236>
    5ab8:	add	r1, sp, #48	; 0x30
    5aba:	movs	r2, #4
    5abc:	mov	r0, r4
    5abe:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5ac2:	ldrb	r3, [r4, #8]
    5ac4:	str	r6, [sp, #44]	; 0x2c
    5ac6:	cmp	r3, #0
    5ac8:	bne.n	5b7e <MTPD::GetObjectInfo(unsigned long)+0x23a>
    5aca:	add	r1, sp, #44	; 0x2c
    5acc:	movs	r2, #4
    5ace:	mov	r0, r4
    5ad0:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5ad4:	ldrb	r3, [r4, #8]
    5ad6:	str	r6, [sp, #40]	; 0x28
    5ad8:	cmp	r3, #0
    5ada:	bne.n	5b82 <MTPD::GetObjectInfo(unsigned long)+0x23e>
    5adc:	add	r1, sp, #40	; 0x28
    5ade:	movs	r2, #4
    5ae0:	mov	r0, r4
    5ae2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5ae6:	ldrb	r3, [r4, #8]
    5ae8:	str	r6, [sp, #36]	; 0x24
    5aea:	cmp	r3, #0
    5aec:	bne.n	5b86 <MTPD::GetObjectInfo(unsigned long)+0x242>
    5aee:	movs	r2, #4
    5af0:	add	r1, sp, #36	; 0x24
    5af2:	mov	r0, r4
    5af4:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5af8:	ldrb	r3, [r4, #8]
    5afa:	ldr	r2, [r5, #0]
    5afc:	str	r2, [sp, #32]
    5afe:	cmp	r3, #0
    5b00:	bne.n	5b8a <MTPD::GetObjectInfo(unsigned long)+0x246>
    5b02:	add	r1, sp, #32
    5b04:	movs	r2, #4
    5b06:	mov	r0, r4
    5b08:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5b0c:	ldr	r3, [sp, #20]
    5b0e:	ldrb	r6, [r4, #8]
    5b10:	sub.w	r3, r3, #4294967295
    5b14:	clz	r3, r3
    5b18:	lsrs	r3, r3, #5
    5b1a:	strh.w	r3, [sp, #18]
    5b1e:	cmp	r6, #0
    5b20:	bne.n	5b8e <MTPD::GetObjectInfo(unsigned long)+0x24a>
    5b22:	add.w	r1, sp, #18
    5b26:	movs	r2, #2
    5b28:	mov	r0, r4
    5b2a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5b2e:	ldrb	r5, [r4, #8]
    5b30:	str	r6, [sp, #68]	; 0x44
    5b32:	cbnz	r5, 5b5e <MTPD::GetObjectInfo(unsigned long)+0x21a>
    5b34:	add	r1, sp, #68	; 0x44
    5b36:	movs	r2, #4
    5b38:	mov	r0, r4
    5b3a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5b3e:	ldrb	r3, [r4, #8]
    5b40:	str	r5, [sp, #64]	; 0x40
    5b42:	cbnz	r3, 5b5a <MTPD::GetObjectInfo(unsigned long)+0x216>
    5b44:	add	r1, sp, #64	; 0x40
    5b46:	movs	r2, #4
    5b48:	mov	r0, r4
    5b4a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5b4e:	b.n	59fc <MTPD::GetObjectInfo(unsigned long)+0xb8>
    5b50:	movw	r2, #12289	; 0x3001
    5b54:	strh.w	r2, [sp, #16]
    5b58:	b.n	5980 <MTPD::GetObjectInfo(unsigned long)+0x3c>
    5b5a:	ldr	r3, [r4, #12]
    5b5c:	b.n	59f8 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    5b5e:	ldr	r3, [r4, #12]
    5b60:	b.n	59f0 <MTPD::GetObjectInfo(unsigned long)+0xac>
    5b62:	ldr	r3, [r4, #12]
    5b64:	b.n	5980 <MTPD::GetObjectInfo(unsigned long)+0x3c>
    5b66:	ldr	r3, [r4, #12]
    5b68:	b.n	598a <MTPD::GetObjectInfo(unsigned long)+0x46>
    5b6a:	ldr	r3, [r4, #12]
    5b6c:	b.n	5992 <MTPD::GetObjectInfo(unsigned long)+0x4e>
    5b6e:	ldr	r3, [r4, #12]
    5b70:	b.n	599c <MTPD::GetObjectInfo(unsigned long)+0x58>
    5b72:	ldr	r3, [r4, #12]
    5b74:	b.n	59a4 <MTPD::GetObjectInfo(unsigned long)+0x60>
    5b76:	ldr	r3, [r4, #12]
    5b78:	b.n	59ac <MTPD::GetObjectInfo(unsigned long)+0x68>
    5b7a:	ldr	r3, [r4, #12]
    5b7c:	b.n	59b4 <MTPD::GetObjectInfo(unsigned long)+0x70>
    5b7e:	ldr	r3, [r4, #12]
    5b80:	b.n	59bc <MTPD::GetObjectInfo(unsigned long)+0x78>
    5b82:	ldr	r3, [r4, #12]
    5b84:	b.n	59c4 <MTPD::GetObjectInfo(unsigned long)+0x80>
    5b86:	ldr	r3, [r4, #12]
    5b88:	b.n	59cc <MTPD::GetObjectInfo(unsigned long)+0x88>
    5b8a:	ldr	r3, [r4, #12]
    5b8c:	b.n	59d4 <MTPD::GetObjectInfo(unsigned long)+0x90>
    5b8e:	ldr	r3, [r4, #12]
    5b90:	b.n	59e8 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    5b92:	nop
    5b94:	.word	0x00016b54

00005b98 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    5b98:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    5b9a:	ldr	r7, [pc, #96]	; (5bfc <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5b9c:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    5b9e:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    5ba0:	sub	sp, #12
    5ba2:	mov	r4, r0
    5ba4:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ba6:	cbz	r2, 5bee <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    5ba8:	ldr	r2, [r0, #12]
    5baa:	adds	r2, #4
    5bac:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5bae:	cbz	r3, 5bea <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    5bb0:	ldr	r6, [pc, #76]	; (5c00 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    5bb2:	movw	r3, #56321	; 0xdc01
    5bb6:	movs	r5, #0
    5bb8:	b.n	5bcc <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5bba:	ldr	r3, [r4, #12]
    5bbc:	adds	r3, #2
    5bbe:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5bc0:	ldr	r3, [r7, #0]
    5bc2:	adds	r5, #1
    5bc4:	cmp	r3, r5
    5bc6:	bls.n	5bea <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    5bc8:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5bcc:	ldrb	r2, [r4, #8]
    5bce:	strh.w	r3, [sp, #2]
    5bd2:	cmp	r2, #0
    5bd4:	bne.n	5bba <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    5bd6:	movs	r2, #2
    5bd8:	add.w	r1, sp, r2
    5bdc:	mov	r0, r4
    5bde:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5be2:	ldr	r3, [r7, #0]
    5be4:	adds	r5, #1
    5be6:	cmp	r3, r5
    5be8:	bhi.n	5bc8 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    5bea:	add	sp, #12
    5bec:	pop	{r4, r5, r6, r7, pc}
    5bee:	movs	r2, #4
    5bf0:	add.w	r1, sp, r2
    5bf4:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5bf8:	ldr	r3, [r7, #0]
    5bfa:	b.n	5bae <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    5bfc:	.word	0x1fff097c
    5c00:	.word	0x00016d44

00005c04 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    5c04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5c08:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    5c0a:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    5c0c:	sub	sp, #316	; 0x13c
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    5c0e:	ldr	r3, [r0, #0]
    5c10:	add.w	r6, sp, #10
    5c14:	add	r7, sp, #20
    5c16:	str	r6, [sp, #4]
    5c18:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    5c1a:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    5c1c:	ldr.w	r8, [r3, #36]	; 0x24
    5c20:	add	r2, sp, #56	; 0x38
    5c22:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    5c24:	mov	r9, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    5c26:	blx	r8
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
      switch(p2)
    5c28:	sub.w	r2, r4, #56320	; 0xdc00
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    5c2c:	ldrh	r3, [r6, #0]
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    5c2e:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
      switch(p2)
    5c30:	subs	r2, #1
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    5c32:	adds	r4, r3, #1
      switch(p2)
    5c34:	cmp	r2, #67	; 0x43
    5c36:	bhi.n	5c9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5c38:	tbb	[pc, r2]
    5c3c:	.word	0x776a4b41
    5c40:	.word	0x333a3030
    5c44:	.word	0x305c3033
    5c48:	.word	0x30303030
    5c4c:	.word	0x30303030
    5c50:	.word	0x30303030
    5c54:	.word	0x30303030
    5c58:	.word	0x30303030
    5c5c:	.word	0x30303030
    5c60:	.word	0x30303030
    5c64:	.word	0x30303030
    5c68:	.word	0x30303030
    5c6c:	.word	0x30303030
    5c70:	.word	0x30303030
    5c74:	.word	0x30303030
    5c78:	.word	0x30303030
    5c7c:	.word	0x3a303022
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c80:	ldrb	r3, [r5, #8]
    5c82:	str.w	r9, [sp, #52]	; 0x34
    5c86:	cmp	r3, #0
    5c88:	beq.n	5d3a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x136>
      write_length_ += len;
    5c8a:	ldr	r3, [r5, #12]
    5c8c:	adds	r3, #4
    5c8e:	str	r3, [r5, #12]
    5c90:	adds	r3, #4
    5c92:	str	r3, [r5, #12]
    5c94:	adds	r3, #4
    5c96:	str	r3, [r5, #12]
    5c98:	adds	r3, #4
    5c9a:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    5c9c:	add	sp, #316	; 0x13c
    5c9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    5ca2:	mov	r0, r5
    5ca4:	ldr	r1, [pc, #276]	; (5dbc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b8>)
    5ca6:	bl	548c <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    5caa:	add	sp, #316	; 0x13c
    5cac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(parent);
          write32(storage);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    5cb0:	add	r1, sp, #56	; 0x38
    5cb2:	mov	r0, r5
    5cb4:	bl	548c <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    5cb8:	add	sp, #316	; 0x13c
    5cba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cbe:	ldrb	r3, [r5, #8]
    5cc0:	str	r4, [sp, #24]
    5cc2:	cmp	r3, #0
    5cc4:	beq.n	5d86 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x182>
      write_length_ += len;
    5cc6:	ldr	r3, [r5, #12]
    5cc8:	adds	r3, #4
    5cca:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    5ccc:	add	sp, #316	; 0x13c
    5cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    5cd2:	adds	r1, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cd4:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    5cd6:	movw	r3, #12289	; 0x3001
    5cda:	it	ne
    5cdc:	movne.w	r3, #12288	; 0x3000
    5ce0:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ce4:	cmp	r2, #0
    5ce6:	beq.n	5d7a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x176>
      write_length_ += len;
    5ce8:	ldr	r3, [r5, #12]
    5cea:	adds	r3, #2
    5cec:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    5cee:	add	sp, #316	; 0x13c
    5cf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    5cf4:	ldr	r2, [r7, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cf6:	ldrb	r1, [r5, #8]
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    5cf8:	cmp	r3, r2
    5cfa:	it	eq
    5cfc:	moveq	r2, #0
    5cfe:	str	r2, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d00:	cmp	r1, #0
    5d02:	bne.n	5cc6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc2>
    5d04:	add	r1, sp, #36	; 0x24
    5d06:	mov	r0, r5
    5d08:	movs	r2, #4
    5d0a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d0e:	b.n	5c9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5d10:	ldrb	r3, [r5, #8]
    5d12:	movs	r2, #0
    5d14:	strh.w	r2, [sp, #14]
    5d18:	cmp	r3, #0
    5d1a:	bne.n	5ce8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe4>
    5d1c:	add.w	r1, sp, #14
    5d20:	mov	r0, r5
    5d22:	movs	r2, #2
    5d24:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d28:	b.n	5c9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5d2a:	ldrb	r4, [r5, #8]
    5d2c:	str	r1, [sp, #32]
    5d2e:	cmp	r4, #0
    5d30:	beq.n	5d92 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18e>
      write_length_ += len;
    5d32:	ldr	r3, [r5, #12]
    5d34:	adds	r3, #4
    5d36:	str	r3, [r5, #12]
    5d38:	b.n	5c98 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    5d3a:	movs	r2, #4
    5d3c:	add	r1, sp, #52	; 0x34
    5d3e:	mov	r0, r5
    5d40:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d44:	ldrb	r3, [r5, #8]
    5d46:	ldr	r2, [r7, #0]
    5d48:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d4a:	cmp	r3, #0
    5d4c:	bne.n	5db6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b2>
    5d4e:	add	r1, sp, #48	; 0x30
    5d50:	movs	r2, #4
    5d52:	mov	r0, r5
    5d54:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d58:	ldrb	r6, [r5, #8]
    5d5a:	str	r4, [sp, #44]	; 0x2c
    5d5c:	cbnz	r6, 5db2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ae>
    5d5e:	add	r1, sp, #44	; 0x2c
    5d60:	movs	r2, #4
    5d62:	mov	r0, r5
    5d64:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d68:	ldrb	r3, [r5, #8]
    5d6a:	str	r6, [sp, #40]	; 0x28
    5d6c:	cbnz	r3, 5dae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1aa>
    5d6e:	add	r1, sp, #40	; 0x28
    5d70:	mov	r0, r5
    5d72:	movs	r2, #4
    5d74:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d78:	b.n	5c9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5d7a:	add	r1, sp, #12
    5d7c:	mov	r0, r5
    5d7e:	movs	r2, #2
    5d80:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d84:	b.n	5c9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5d86:	add	r1, sp, #24
    5d88:	mov	r0, r5
    5d8a:	movs	r2, #4
    5d8c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d90:	b.n	5c9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5d92:	add	r1, sp, #32
    5d94:	movs	r2, #4
    5d96:	mov	r0, r5
    5d98:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5d9c:	ldrb	r3, [r5, #8]
    5d9e:	str	r4, [sp, #28]
    5da0:	cbnz	r3, 5dae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1aa>
    5da2:	add	r1, sp, #28
    5da4:	mov	r0, r5
    5da6:	movs	r2, #4
    5da8:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5dac:	b.n	5c9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    5dae:	ldr	r3, [r5, #12]
    5db0:	b.n	5c98 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    5db2:	ldr	r3, [r5, #12]
    5db4:	b.n	5c94 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    5db6:	ldr	r3, [r5, #12]
    5db8:	b.n	5c90 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8c>
    5dba:	nop
    5dbc:	.word	0x00016b54

00005dc0 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    5dc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5dc4:	mov	r4, r0
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5dc6:	ldr	r0, [r0, #0]
    5dc8:	ldr	r3, [r0, #0]
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    5dca:	subs	r5, r1, #1
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    5dcc:	sub	sp, #36	; 0x24
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5dce:	ldr	r3, [r3, #20]
    5dd0:	mov	r1, r5
    5dd2:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5dd4:	ldrb	r3, [r4, #8]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5dd6:	cmp	r0, #0
    5dd8:	ite	eq
    5dda:	moveq	r2, #4
    5ddc:	movne	r2, #1
    5dde:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5de2:	cmp	r3, #0
    5de4:	beq.n	5e80 <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    5de6:	ldr	r3, [r4, #12]
    5de8:	adds	r3, #2
    5dea:	str	r3, [r4, #12]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5dec:	ldr	r0, [r4, #0]
    5dee:	ldr	r3, [r0, #0]
    5df0:	mov	r1, r5
    5df2:	ldr	r3, [r3, #24]
    5df4:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5df6:	ldrb	r6, [r4, #8]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5df8:	cmp	r0, #0
    5dfa:	ite	eq
    5dfc:	moveq	r3, #1
    5dfe:	movne	r3, #2
    5e00:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e04:	cmp	r6, #0
    5e06:	beq.n	5ec8 <MTPD::GetStorageInfo(unsigned long)+0x108>
      write_length_ += len;
    5e08:	ldr	r3, [r4, #12]
    5e0a:	movs	r2, #0
    5e0c:	adds	r3, #2
    5e0e:	str	r3, [r4, #12]
    5e10:	strh.w	r2, [sp, #8]
    5e14:	adds	r3, #2
    5e16:	str	r3, [r4, #12]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    5e18:	ldr	r0, [r4, #0]
    5e1a:	ldr	r3, [r0, #0]
    5e1c:	mov	r1, r5
    5e1e:	ldr	r3, [r3, #12]
    5e20:	blx	r3
    5e22:	mov	r6, r0
    uint64_t nused = storage_->usedSize(store) ; 
    5e24:	ldr	r0, [r4, #0]
    5e26:	ldr	r3, [r0, #0]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    5e28:	mov	r7, r1
    uint64_t nused = storage_->usedSize(store) ; 
    5e2a:	ldr	r3, [r3, #16]
    5e2c:	mov	r1, r5
    5e2e:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e30:	ldrb	r3, [r4, #8]
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    uint64_t nused = storage_->usedSize(store) ; 
    5e32:	mov	r8, r0
    5e34:	mov	r9, r1
    5e36:	strd	r6, r7, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e3a:	cbz	r3, 5e8e <MTPD::GetStorageInfo(unsigned long)+0xce>
    5e3c:	subs	r6, r6, r0
      write_length_ += len;
    5e3e:	ldr	r3, [r4, #12]
    5e40:	sbc.w	r7, r7, r1
    5e44:	strd	r6, r7, [sp, #16]
    5e48:	adds	r3, #8
    5e4a:	str	r3, [r4, #12]
    5e4c:	adds	r3, #8
    5e4e:	mov.w	r2, #4294967295
    5e52:	str	r3, [r4, #12]
    5e54:	str	r2, [sp, #12]
    5e56:	adds	r3, #4
    5e58:	str	r3, [r4, #12]

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    5e5a:	ldr	r0, [r4, #0]
    5e5c:	ldr	r2, [pc, #156]	; (5efc <MTPD::GetStorageInfo(unsigned long)+0x13c>)
    5e5e:	ldr	r3, [r0, #0]
    5e60:	ldr	r3, [r3, #8]
    5e62:	cmp	r3, r2
    5e64:	bne.n	5ee8 <MTPD::GetStorageInfo(unsigned long)+0x128>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    5e66:	add.w	r0, r0, r5, lsl #2
    5e6a:	ldr	r1, [r0, #8]
    writestring(name);  // storage descriptor
    5e6c:	mov	r0, r4
    5e6e:	bl	548c <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    5e72:	mov	r0, r4
    5e74:	ldr	r1, [pc, #136]	; (5f00 <MTPD::GetStorageInfo(unsigned long)+0x140>)
    5e76:	bl	548c <MTPD::writestring(char const*)>

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    5e7a:	add	sp, #36	; 0x24
    5e7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5e80:	movs	r2, #2
    5e82:	add.w	r1, sp, #6
    5e86:	mov	r0, r4
    5e88:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5e8c:	b.n	5dec <MTPD::GetStorageInfo(unsigned long)+0x2c>
    5e8e:	movs	r2, #8
    5e90:	add	r1, sp, #24
    5e92:	mov	r0, r4
    5e94:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5e98:	subs.w	r6, r6, r8
    5e9c:	ldrb	r3, [r4, #8]
    5e9e:	sbc.w	r7, r7, r9
    5ea2:	strd	r6, r7, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ea6:	cbnz	r3, 5ef4 <MTPD::GetStorageInfo(unsigned long)+0x134>
    5ea8:	movs	r2, #8
    5eaa:	add	r1, sp, #16
    5eac:	mov	r0, r4
    5eae:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5eb2:	ldrb	r3, [r4, #8]
    5eb4:	mov.w	r2, #4294967295
    5eb8:	str	r2, [sp, #12]
    5eba:	cbnz	r3, 5ef0 <MTPD::GetStorageInfo(unsigned long)+0x130>
    5ebc:	movs	r2, #4
    5ebe:	add	r1, sp, #12
    5ec0:	mov	r0, r4
    5ec2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5ec6:	b.n	5e5a <MTPD::GetStorageInfo(unsigned long)+0x9a>
    5ec8:	movs	r2, #2
    5eca:	add.w	r1, sp, #10
    5ece:	mov	r0, r4
    5ed0:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5ed4:	ldrb	r3, [r4, #8]
    5ed6:	strh.w	r6, [sp, #8]
    5eda:	cbnz	r3, 5ef8 <MTPD::GetStorageInfo(unsigned long)+0x138>
    5edc:	movs	r2, #2
    5ede:	add	r1, sp, #8
    5ee0:	mov	r0, r4
    5ee2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    5ee6:	b.n	5e18 <MTPD::GetStorageInfo(unsigned long)+0x58>

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    5ee8:	mov	r1, r5
    5eea:	blx	r3
    5eec:	mov	r1, r0
    5eee:	b.n	5e6c <MTPD::GetStorageInfo(unsigned long)+0xac>
    5ef0:	ldr	r3, [r4, #12]
    5ef2:	b.n	5e56 <MTPD::GetStorageInfo(unsigned long)+0x96>
    5ef4:	ldr	r3, [r4, #12]
    5ef6:	b.n	5e4c <MTPD::GetStorageInfo(unsigned long)+0x8c>
    5ef8:	ldr	r3, [r4, #12]
    5efa:	b.n	5e14 <MTPD::GetStorageInfo(unsigned long)+0x54>
    5efc:	.word	0x0000171d
    5f00:	.word	0x00016b54

00005f04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    5f04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    5f08:	sub.w	r1, r1, #56320	; 0xdc00
    5f0c:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    5f0e:	sub	sp, #148	; 0x94
    5f10:	mov	r4, r0
      switch(p1)
    5f12:	cmp	r1, #67	; 0x43
    5f14:	bhi.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    5f16:	tbh	[pc, r1, lsl #1]
    5f1a:	.short	0x005c
    5f1c:	.word	0x0080006e
    5f20:	.word	0x005900c6
    5f24:	.word	0x00d80059
    5f28:	.word	0x01690121
    5f2c:	.word	0x01b10059
    5f30:	.word	0x00590059
    5f34:	.word	0x00590059
    5f38:	.word	0x00590059
    5f3c:	.word	0x00590059
    5f40:	.word	0x00590059
    5f44:	.word	0x00590059
    5f48:	.word	0x00590059
    5f4c:	.word	0x00590059
    5f50:	.word	0x00590059
    5f54:	.word	0x00590059
    5f58:	.word	0x00590059
    5f5c:	.word	0x00590059
    5f60:	.word	0x00590059
    5f64:	.word	0x00590059
    5f68:	.word	0x00590059
    5f6c:	.word	0x00590059
    5f70:	.word	0x00590059
    5f74:	.word	0x00590059
    5f78:	.word	0x00590059
    5f7c:	.word	0x00590059
    5f80:	.word	0x00590059
    5f84:	.word	0x00590059
    5f88:	.word	0x00590059
    5f8c:	.word	0x00590059
    5f90:	.word	0x00590059
    5f94:	.word	0x00590059
    5f98:	.word	0x01f70059
    5f9c:	.word	0x00590059
    5fa0:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5fa2:	ldrb	r3, [r0, #8]
    5fa4:	movw	r2, #56388	; 0xdc44
    5fa8:	strh.w	r2, [sp, #70]	; 0x46
    5fac:	cmp	r3, #0
    5fae:	beq.w	642c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    5fb2:	ldr	r3, [r4, #12]
    5fb4:	adds	r3, #2
    5fb6:	str	r3, [r4, #12]
    5fb8:	adds	r3, #2
    5fba:	str	r3, [r4, #12]
    5fbc:	adds	r3, #1
    5fbe:	str	r3, [r4, #12]
    5fc0:	adds	r3, #1
    5fc2:	str	r3, [r4, #12]
    5fc4:	adds	r3, #4
    5fc6:	str	r3, [r4, #12]
    5fc8:	adds	r3, #1
    5fca:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    5fcc:	add	sp, #148	; 0x94
    5fce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5fd2:	ldrb	r3, [r0, #8]
    5fd4:	movw	r2, #56321	; 0xdc01
    5fd8:	strh.w	r2, [sp, #30]
    5fdc:	cmp	r3, #0
    5fde:	beq.w	6540 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    5fe2:	ldr	r3, [r4, #12]
    5fe4:	adds	r3, #2
    5fe6:	str	r3, [r4, #12]
    5fe8:	adds	r3, #2
    5fea:	str	r3, [r4, #12]
    5fec:	adds	r3, #1
    5fee:	str	r3, [r4, #12]
    5ff0:	adds	r3, #4
    5ff2:	str	r3, [r4, #12]
    5ff4:	b.n	5fc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ff6:	ldrb	r3, [r0, #8]
    5ff8:	movw	r2, #56322	; 0xdc02
    5ffc:	strh.w	r2, [sp, #36]	; 0x24
    6000:	cmp	r3, #0
    6002:	beq.w	63ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    6006:	ldr	r3, [r4, #12]
    6008:	adds	r3, #2
    600a:	str	r3, [r4, #12]
    600c:	adds	r3, #2
    600e:	str	r3, [r4, #12]
    6010:	adds	r3, #1
    6012:	str	r3, [r4, #12]
    6014:	adds	r3, #2
    6016:	str	r3, [r4, #12]
    6018:	b.n	5fc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    601a:	ldrb	r3, [r0, #8]
    601c:	movw	r2, #56323	; 0xdc03
    6020:	strh.w	r2, [sp, #42]	; 0x2a
    6024:	cmp	r3, #0
    6026:	bne.n	6006 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    6028:	movs	r2, #2
    602a:	add.w	r1, sp, #42	; 0x2a
    602e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6032:	ldrb	r7, [r4, #8]
    6034:	movs	r6, #4
    6036:	strh.w	r6, [sp, #40]	; 0x28
    603a:	cmp	r7, #0
    603c:	bne.w	65d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    6040:	movs	r2, #2
    6042:	add	r1, sp, #40	; 0x28
    6044:	mov	r0, r4
    6046:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    604a:	ldrb	r5, [r4, #8]
    604c:	strb.w	r7, [sp, #9]
    6050:	cmp	r5, #0
    6052:	bne.w	65d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    6056:	movs	r2, #1
    6058:	add.w	r1, sp, #9
    605c:	mov	r0, r4
    605e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6062:	ldrb	r7, [r4, #8]
    6064:	strh.w	r5, [sp, #38]	; 0x26
    6068:	cmp	r7, #0
    606a:	bne.w	65ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    606e:	movs	r2, #2
    6070:	add.w	r1, sp, #38	; 0x26
    6074:	mov	r0, r4
    6076:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    607a:	ldrb	r5, [r4, #8]
    607c:	str	r7, [sp, #84]	; 0x54
    607e:	cmp	r5, #0
    6080:	bne.w	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6084:	mov	r2, r6
    6086:	add	r1, sp, #84	; 0x54
    6088:	mov	r0, r4
    608a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    608e:	ldrb	r3, [r4, #8]
    6090:	strb.w	r5, [sp, #8]
    6094:	cmp	r3, #0
    6096:	bne.w	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    609a:	mov	r0, r4
    609c:	movs	r2, #1
    609e:	add	r1, sp, #8
    60a0:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    60a4:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    60a6:	ldrb	r3, [r0, #8]
    60a8:	movw	r2, #56324	; 0xdc04
    60ac:	strh.w	r2, [sp, #46]	; 0x2e
    60b0:	cmp	r3, #0
    60b2:	beq.w	632c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    60b6:	ldr	r3, [r0, #12]
    60b8:	adds	r3, #2
    60ba:	str	r3, [r0, #12]
    60bc:	adds	r3, #2
    60be:	str	r3, [r4, #12]
    60c0:	adds	r3, #1
    60c2:	str	r3, [r4, #12]
    60c4:	adds	r3, #8
    60c6:	str	r3, [r4, #12]
    60c8:	b.n	5fc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    60ca:	ldrb	r3, [r0, #8]
    60cc:	movw	r2, #56327	; 0xdc07
    60d0:	strh.w	r2, [sp, #50]	; 0x32
    60d4:	cmp	r3, #0
    60d6:	bne.w	5fb2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    60da:	movs	r2, #2
    60dc:	add.w	r1, sp, #50	; 0x32
    60e0:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    60e4:	ldrb	r3, [r4, #8]
    60e6:	movw	r2, #65535	; 0xffff
    60ea:	strh.w	r2, [sp, #48]	; 0x30
    60ee:	cmp	r3, #0
    60f0:	bne.w	65be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    60f4:	movs	r2, #2
    60f6:	add	r1, sp, #48	; 0x30
    60f8:	mov	r0, r4
    60fa:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    60fe:	ldrb	r6, [r4, #8]
    6100:	movs	r5, #1
    6102:	strb.w	r5, [sp, #14]
    6106:	cmp	r6, #0
    6108:	bne.w	65ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    610c:	mov	r2, r5
    610e:	add.w	r1, sp, #14
    6112:	mov	r0, r4
    6114:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6118:	ldrb	r7, [r4, #8]
    611a:	strb.w	r6, [sp, #13]
    611e:	cmp	r7, #0
    6120:	bne.w	65ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6124:	mov	r2, r5
    6126:	add.w	r1, sp, #13
    612a:	mov	r0, r4
    612c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6130:	ldrb	r6, [r4, #8]
    6132:	str	r7, [sp, #92]	; 0x5c
    6134:	cmp	r6, #0
    6136:	bne.w	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    613a:	movs	r2, #4
    613c:	add	r1, sp, #92	; 0x5c
    613e:	mov	r0, r4
    6140:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6144:	ldrb	r3, [r4, #8]
    6146:	strb.w	r6, [sp, #12]
    614a:	cmp	r3, #0
    614c:	bne.w	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6150:	mov	r2, r5
    6152:	mov	r0, r4
    6154:	add	r1, sp, #12
    6156:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    615a:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    615c:	ldrb	r3, [r0, #8]
    615e:	movw	r2, #56328	; 0xdc08
    6162:	strh.w	r2, [sp, #54]	; 0x36
    6166:	cmp	r3, #0
    6168:	bne.w	5fb2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    616c:	movs	r2, #2
    616e:	add.w	r1, sp, #54	; 0x36
    6172:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6176:	ldrb	r6, [r4, #8]
    6178:	movw	r3, #65535	; 0xffff
    617c:	strh.w	r3, [sp, #52]	; 0x34
    6180:	cmp	r6, #0
    6182:	bne.w	65be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6186:	movs	r2, #2
    6188:	add	r1, sp, #52	; 0x34
    618a:	mov	r0, r4
    618c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6190:	ldrb	r5, [r4, #8]
    6192:	strb.w	r6, [sp, #17]
    6196:	cmp	r5, #0
    6198:	bne.w	65ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    619c:	movs	r2, #1
    619e:	add.w	r1, sp, #17
    61a2:	mov	r0, r4
    61a4:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    61a8:	ldrb	r6, [r4, #8]
    61aa:	strb.w	r5, [sp, #16]
    61ae:	cmp	r6, #0
    61b0:	bne.w	65ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    61b4:	movs	r2, #1
    61b6:	add	r1, sp, #16
    61b8:	mov	r0, r4
    61ba:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    61be:	ldrb	r5, [r4, #8]
    61c0:	str	r6, [sp, #96]	; 0x60
    61c2:	cmp	r5, #0
    61c4:	bne.w	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    61c8:	movs	r2, #4
    61ca:	add	r1, sp, #96	; 0x60
    61cc:	mov	r0, r4
    61ce:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    61d2:	ldrb	r3, [r4, #8]
    61d4:	strb.w	r5, [sp, #15]
    61d8:	cmp	r3, #0
    61da:	bne.w	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    61de:	mov	r0, r4
    61e0:	movs	r2, #1
    61e2:	add.w	r1, sp, #15
    61e6:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    61ea:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    61ec:	ldrb	r3, [r0, #8]
    61ee:	movw	r2, #56329	; 0xdc09
    61f2:	strh.w	r2, [sp, #58]	; 0x3a
    61f6:	cmp	r3, #0
    61f8:	bne.w	5fb2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    61fc:	movs	r2, #2
    61fe:	add.w	r1, sp, #58	; 0x3a
    6202:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6206:	ldrb	r6, [r4, #8]
    6208:	movw	r3, #65535	; 0xffff
    620c:	strh.w	r3, [sp, #56]	; 0x38
    6210:	cmp	r6, #0
    6212:	bne.w	65be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6216:	movs	r2, #2
    6218:	add	r1, sp, #56	; 0x38
    621a:	mov	r0, r4
    621c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6220:	ldrb	r5, [r4, #8]
    6222:	strb.w	r6, [sp, #20]
    6226:	cmp	r5, #0
    6228:	bne.w	65ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    622c:	movs	r2, #1
    622e:	add	r1, sp, #20
    6230:	mov	r0, r4
    6232:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6236:	ldrb	r6, [r4, #8]
    6238:	strb.w	r5, [sp, #19]
    623c:	cmp	r6, #0
    623e:	bne.w	65ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6242:	movs	r2, #1
    6244:	add.w	r1, sp, #19
    6248:	mov	r0, r4
    624a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    624e:	ldrb	r5, [r4, #8]
    6250:	str	r6, [sp, #100]	; 0x64
    6252:	cmp	r5, #0
    6254:	bne.w	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6258:	movs	r2, #4
    625a:	add	r1, sp, #100	; 0x64
    625c:	mov	r0, r4
    625e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6262:	ldrb	r3, [r4, #8]
    6264:	strb.w	r5, [sp, #18]
    6268:	cmp	r3, #0
    626a:	bne.w	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    626e:	mov	r0, r4
    6270:	movs	r2, #1
    6272:	add.w	r1, sp, #18
    6276:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    627a:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    627c:	ldrb	r3, [r0, #8]
    627e:	movw	r2, #56331	; 0xdc0b
    6282:	strh.w	r2, [sp, #62]	; 0x3e
    6286:	cmp	r3, #0
    6288:	bne.w	5fe2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    628c:	movs	r2, #2
    628e:	add.w	r1, sp, #62	; 0x3e
    6292:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6296:	ldrb	r6, [r4, #8]
    6298:	movs	r3, #6
    629a:	strh.w	r3, [sp, #60]	; 0x3c
    629e:	cmp	r6, #0
    62a0:	bne.w	65b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    62a4:	movs	r2, #2
    62a6:	add	r1, sp, #60	; 0x3c
    62a8:	mov	r0, r4
    62aa:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    62ae:	ldrb	r5, [r4, #8]
    62b0:	strb.w	r6, [sp, #22]
    62b4:	cmp	r5, #0
    62b6:	bne.w	65b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    62ba:	movs	r2, #1
    62bc:	add.w	r1, sp, #22
    62c0:	mov	r0, r4
    62c2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    62c6:	ldrb	r6, [r4, #8]
    62c8:	str	r5, [sp, #108]	; 0x6c
    62ca:	cmp	r6, #0
    62cc:	bne.w	65ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    62d0:	movs	r2, #4
    62d2:	add	r1, sp, #108	; 0x6c
    62d4:	mov	r0, r4
    62d6:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    62da:	ldrb	r5, [r4, #8]
    62dc:	str	r6, [sp, #104]	; 0x68
    62de:	cmp	r5, #0
    62e0:	bne.w	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    62e4:	movs	r2, #4
    62e6:	add	r1, sp, #104	; 0x68
    62e8:	mov	r0, r4
    62ea:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    62ee:	ldrb	r3, [r4, #8]
    62f0:	strb.w	r5, [sp, #21]
    62f4:	cmp	r3, #0
    62f6:	bne.w	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    62fa:	mov	r0, r4
    62fc:	movs	r2, #1
    62fe:	add.w	r1, sp, #21
    6302:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6306:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6308:	ldrb	r3, [r0, #8]
    630a:	movw	r2, #56385	; 0xdc41
    630e:	strh.w	r2, [sp, #66]	; 0x42
    6312:	cmp	r3, #0
    6314:	beq.w	64ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    6318:	ldr	r3, [r0, #12]
    631a:	adds	r3, #2
    631c:	str	r3, [r0, #12]
    631e:	adds	r3, #2
    6320:	str	r3, [r4, #12]
    6322:	adds	r3, #1
    6324:	str	r3, [r4, #12]
    6326:	adds	r3, #8
    6328:	str	r3, [r4, #12]
    632a:	b.n	60c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    632c:	movs	r2, #2
    632e:	add.w	r1, sp, #46	; 0x2e
    6332:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6336:	ldrb	r6, [r4, #8]
    6338:	movs	r5, #8
    633a:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    633e:	cmp	r6, #0
    6340:	bne.w	65c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    6344:	movs	r2, #2
    6346:	add	r1, sp, #44	; 0x2c
    6348:	mov	r0, r4
    634a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    634e:	ldrb	r3, [r4, #8]
    6350:	strb.w	r6, [sp, #11]
    6354:	cmp	r3, #0
    6356:	bne.w	65c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    635a:	movs	r2, #1
    635c:	add.w	r1, sp, #11
    6360:	mov	r0, r4
    6362:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6366:	ldrb	r6, [r4, #8]
    6368:	movs	r2, #0
    636a:	movs	r3, #0
    636c:	strd	r2, r3, [sp, #120]	; 0x78
    6370:	cmp	r6, #0
    6372:	bne.w	65da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6376:	mov	r2, r5
    6378:	add	r1, sp, #120	; 0x78
    637a:	mov	r0, r4
    637c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6380:	ldrb	r5, [r4, #8]
    6382:	str	r6, [sp, #88]	; 0x58
    6384:	cmp	r5, #0
    6386:	bne.w	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    638a:	movs	r2, #4
    638c:	add	r1, sp, #88	; 0x58
    638e:	mov	r0, r4
    6390:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6394:	ldrb	r3, [r4, #8]
    6396:	strb.w	r5, [sp, #10]
    639a:	cmp	r3, #0
    639c:	bne.w	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    63a0:	mov	r0, r4
    63a2:	movs	r2, #1
    63a4:	add.w	r1, sp, #10
    63a8:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    63ac:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    63ae:	movs	r2, #2
    63b0:	add	r1, sp, #36	; 0x24
    63b2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    63b6:	ldrb	r7, [r4, #8]
    63b8:	movs	r6, #4
    63ba:	strh.w	r6, [sp, #34]	; 0x22
    63be:	cmp	r7, #0
    63c0:	bne.w	65d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    63c4:	movs	r2, #2
    63c6:	add.w	r1, sp, #34	; 0x22
    63ca:	mov	r0, r4
    63cc:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    63d0:	ldrb	r5, [r4, #8]
    63d2:	strb.w	r7, [sp, #7]
    63d6:	cmp	r5, #0
    63d8:	bne.w	65d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    63dc:	movs	r2, #1
    63de:	add.w	r1, sp, #7
    63e2:	mov	r0, r4
    63e4:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    63e8:	ldrb	r7, [r4, #8]
    63ea:	strh.w	r5, [sp, #32]
    63ee:	cmp	r7, #0
    63f0:	bne.w	65ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    63f4:	movs	r2, #2
    63f6:	add	r1, sp, #32
    63f8:	mov	r0, r4
    63fa:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    63fe:	ldrb	r5, [r4, #8]
    6400:	str	r7, [sp, #80]	; 0x50
    6402:	cmp	r5, #0
    6404:	bne.w	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6408:	mov	r2, r6
    640a:	add	r1, sp, #80	; 0x50
    640c:	mov	r0, r4
    640e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6412:	ldrb	r3, [r4, #8]
    6414:	strb.w	r5, [sp, #6]
    6418:	cmp	r3, #0
    641a:	bne.w	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    641e:	mov	r0, r4
    6420:	movs	r2, #1
    6422:	add.w	r1, sp, #6
    6426:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    642a:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    642c:	movs	r2, #2
    642e:	add.w	r1, sp, #70	; 0x46
    6432:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6436:	ldrb	r6, [r4, #8]
    6438:	movw	r3, #65535	; 0xffff
    643c:	strh.w	r3, [sp, #68]	; 0x44
    6440:	cmp	r6, #0
    6442:	bne.w	65be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6446:	movs	r2, #2
    6448:	add	r1, sp, #68	; 0x44
    644a:	mov	r0, r4
    644c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6450:	ldrb	r5, [r4, #8]
    6452:	strb.w	r6, [sp, #27]
    6456:	cmp	r5, #0
    6458:	bne.w	65ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    645c:	movs	r2, #1
    645e:	add.w	r1, sp, #27
    6462:	mov	r0, r4
    6464:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6468:	ldrb	r6, [r4, #8]
    646a:	strb.w	r5, [sp, #26]
    646e:	cmp	r6, #0
    6470:	bne.w	65ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6474:	movs	r2, #1
    6476:	add.w	r1, sp, #26
    647a:	mov	r0, r4
    647c:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6480:	ldrb	r5, [r4, #8]
    6482:	str	r6, [sp, #116]	; 0x74
    6484:	cmp	r5, #0
    6486:	bne.w	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    648a:	movs	r2, #4
    648c:	add	r1, sp, #116	; 0x74
    648e:	mov	r0, r4
    6490:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6494:	ldrb	r3, [r4, #8]
    6496:	strb.w	r5, [sp, #25]
    649a:	cmp	r3, #0
    649c:	bne.w	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    64a0:	mov	r0, r4
    64a2:	movs	r2, #1
    64a4:	add.w	r1, sp, #25
    64a8:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    64ac:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    64ae:	movs	r2, #2
    64b0:	add.w	r1, sp, #66	; 0x42
    64b4:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    64b8:	ldrb	r5, [r4, #8]
    64ba:	movs	r3, #10
    64bc:	strh.w	r3, [sp, #64]	; 0x40
    64c0:	cmp	r5, #0
    64c2:	bne.w	65e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    64c6:	movs	r2, #2
    64c8:	add	r1, sp, #64	; 0x40
    64ca:	mov	r0, r4
    64cc:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    64d0:	ldrb	r3, [r4, #8]
    64d2:	strb.w	r5, [sp, #24]
    64d6:	cmp	r3, #0
    64d8:	bne.w	65e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    64dc:	movs	r2, #1
    64de:	add	r1, sp, #24
    64e0:	mov	r0, r4
    64e2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    64e6:	ldrb	r3, [r4, #8]
    64e8:	mov.w	r8, #0
    64ec:	mov.w	r9, #0
    64f0:	strd	r8, r9, [sp, #136]	; 0x88
    64f4:	cmp	r3, #0
    64f6:	bne.n	65de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    64f8:	movs	r2, #8
    64fa:	add	r1, sp, #136	; 0x88
    64fc:	mov	r0, r4
    64fe:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6502:	ldrb	r6, [r4, #8]
    6504:	strd	r8, r9, [sp, #128]	; 0x80
    6508:	cmp	r6, #0
    650a:	bne.n	65da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    650c:	movs	r2, #8
    650e:	add	r1, sp, #128	; 0x80
    6510:	mov	r0, r4
    6512:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6516:	ldrb	r5, [r4, #8]
    6518:	str	r6, [sp, #112]	; 0x70
    651a:	cmp	r5, #0
    651c:	bne.n	65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    651e:	movs	r2, #4
    6520:	add	r1, sp, #112	; 0x70
    6522:	mov	r0, r4
    6524:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6528:	ldrb	r3, [r4, #8]
    652a:	strb.w	r5, [sp, #23]
    652e:	cmp	r3, #0
    6530:	bne.n	65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6532:	mov	r0, r4
    6534:	movs	r2, #1
    6536:	add.w	r1, sp, #23
    653a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    653e:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6540:	movs	r2, #2
    6542:	add.w	r1, sp, #30
    6546:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    654a:	ldrb	r6, [r4, #8]
    654c:	movs	r3, #6
    654e:	strh.w	r3, [sp, #28]
    6552:	cbnz	r6, 65b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    6554:	movs	r2, #2
    6556:	add	r1, sp, #28
    6558:	mov	r0, r4
    655a:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    655e:	ldrb	r5, [r4, #8]
    6560:	strb.w	r6, [sp, #5]
    6564:	cbnz	r5, 65b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    6566:	movs	r2, #1
    6568:	add.w	r1, sp, #5
    656c:	mov	r0, r4
    656e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6572:	ldrb	r6, [r4, #8]
    6574:	str	r5, [sp, #76]	; 0x4c
    6576:	cbnz	r6, 65ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    6578:	movs	r2, #4
    657a:	add	r1, sp, #76	; 0x4c
    657c:	mov	r0, r4
    657e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6582:	ldrb	r5, [r4, #8]
    6584:	str	r6, [sp, #72]	; 0x48
    6586:	cbnz	r5, 65aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6588:	movs	r2, #4
    658a:	add	r1, sp, #72	; 0x48
    658c:	mov	r0, r4
    658e:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6592:	ldrb	r3, [r4, #8]
    6594:	strb.w	r5, [sp, #4]
    6598:	cbnz	r3, 65a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    659a:	mov	r0, r4
    659c:	movs	r2, #1
    659e:	add	r1, sp, #4
    65a0:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    65a4:	b.n	5fcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    65a6:	ldr	r3, [r4, #12]
    65a8:	b.n	5fc8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    65aa:	ldr	r3, [r4, #12]
    65ac:	b.n	5fc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    65ae:	ldr	r3, [r4, #12]
    65b0:	b.n	5ff0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    65b2:	ldr	r3, [r4, #12]
    65b4:	b.n	5fec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    65b6:	ldr	r3, [r4, #12]
    65b8:	b.n	5fe8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    65ba:	ldr	r3, [r4, #12]
    65bc:	b.n	5fbc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    65be:	ldr	r3, [r4, #12]
    65c0:	b.n	5fb8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    65c2:	ldr	r3, [r4, #12]
    65c4:	b.n	60c0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    65c6:	ldr	r3, [r4, #12]
    65c8:	b.n	60bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    65ca:	ldr	r3, [r4, #12]
    65cc:	b.n	5fc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    65ce:	ldr	r3, [r4, #12]
    65d0:	b.n	6014 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    65d2:	ldr	r3, [r4, #12]
    65d4:	b.n	6010 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    65d6:	ldr	r3, [r4, #12]
    65d8:	b.n	600c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    65da:	ldr	r3, [r4, #12]
    65dc:	b.n	60c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    65de:	ldr	r3, [r4, #12]
    65e0:	b.n	6326 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    65e2:	ldr	r3, [r4, #12]
    65e4:	b.n	6322 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    65e6:	ldr	r3, [r4, #12]
    65e8:	b.n	631e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    65ea:	nop

000065ec <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    65ec:	push	{r4, lr}
    65ee:	mov	r4, r0
    65f0:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    65f2:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    65f4:	cbnz	r3, 65fe <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    65f6:	bl	108e4 <usb_rx>
    65fa:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    65fc:	cbz	r0, 6600 <MTPD::receive_buffer()+0x14>
    65fe:	pop	{r4, pc}
    6600:	bl	19f8 <mtp_yield()>
    6604:	b.n	65f0 <MTPD::receive_buffer()+0x4>
    6606:	nop

00006608 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6608:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    660c:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    660e:	ldr	r0, [r0, #0]
    6610:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6612:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    6614:	ldr	r3, [r3, #40]	; 0x28
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6616:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    6618:	blx	r3
    if (write_get_length_) {
    661a:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    661c:	mov	r7, r0
    if (write_get_length_) {
    661e:	cbnz	r5, 6678 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6620:	cbz	r0, 6672 <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6622:	mov	r9, r5
    6624:	b.n	662a <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6626:	cmp	r7, r5
    6628:	bls.n	6672 <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    662a:	mov	r0, r6
    662c:	bl	5410 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    6630:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    6634:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    6638:	ldr	r1, [r0, #0]
    663a:	subs	r4, r7, r5
    663c:	rsb	lr, r2, #64	; 0x40
    6640:	cmp	r4, lr
    6642:	it	cs
    6644:	movcs	r4, lr
    6646:	str	r4, [sp, #0]
    6648:	add	r3, r2
    664a:	ldr.w	sl, [r1, #48]	; 0x30
    664e:	mov	r2, r5
    6650:	mov	r1, r8
    6652:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    6654:	ldr	r1, [r6, #4]
    6656:	ldrh	r3, [r1, #0]
    6658:	add	r3, r4
    665a:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    665c:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    665e:	add	r5, r4
        data_buffer_->len += to_copy;
    6660:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6662:	bne.n	6626 <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    6664:	movs	r0, #4
    6666:	bl	10a54 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    666a:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    666c:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6670:	bhi.n	662a <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6672:	add	sp, #8
    6674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    6678:	ldr	r3, [r6, #12]
    667a:	add	r7, r3
    667c:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    667e:	add	sp, #8
    6680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006684 <MTPD::read(char*, unsigned long)>:
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6684:	cbz	r2, 66f0 <MTPD::read(char*, unsigned long)+0x6c>
      if(CONTAINER->len>20) printf(" %x", CONTAINER->params[2]); \
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    6686:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    668a:	mov	r6, r0
    668c:	mov	r5, r1
    while (size) {
    668e:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    6690:	movs	r7, #0
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    6692:	mov	r0, r6
    6694:	bl	65ec <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6698:	ldr	r3, [r6, #4]
    669a:	ldrh.w	lr, [r3, #2]
    669e:	ldrh.w	ip, [r3]
    66a2:	rsb	r4, lr, ip
    66a6:	cmp	r4, r8
    66a8:	it	cs
    66aa:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    66ac:	add.w	r1, r3, #8
    66b0:	add	r1, lr
    66b2:	mov	r0, r5
    66b4:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    66b6:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    66ba:	cbz	r5, 66cc <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    66bc:	bl	fc48 <memcpy>
    66c0:	ldr	r3, [r6, #4]
    66c2:	ldrh.w	lr, [r3, #2]
    66c6:	ldrh.w	ip, [r3]
        data += to_copy;
    66ca:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    66cc:	add	r4, lr
    66ce:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    66d0:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    66d2:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    66d4:	beq.n	66e0 <MTPD::read(char*, unsigned long)+0x5c>
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    66d6:	cmp.w	r8, #0
    66da:	bne.n	6692 <MTPD::read(char*, unsigned long)+0xe>
    66dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    66e0:	mov	r0, r3
    66e2:	bl	10898 <usb_free>
        data_buffer_ = NULL;
    66e6:	str	r7, [r6, #4]
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    66e8:	cmp.w	r8, #0
    66ec:	bne.n	6692 <MTPD::read(char*, unsigned long)+0xe>
    66ee:	b.n	66dc <MTPD::read(char*, unsigned long)+0x58>
    66f0:	bx	lr
    66f2:	nop

000066f4 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    66f4:	push	{r4, r5, r6, lr}
    66f6:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    66f8:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    66fa:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    66fc:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6700:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6702:	bl	6684 <MTPD::read(char*, unsigned long)>
    6706:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    670a:	cbz	r4, 672c <MTPD::readstring(char*)+0x38>
    670c:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    670e:	cbz	r2, 6728 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6710:	movs	r2, #2
    6712:	add.w	r1, sp, #6
    6716:	mov	r0, r6
    6718:	bl	6684 <MTPD::read(char*, unsigned long)>
    671c:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    6720:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6724:	cmp	r5, r4
    6726:	bne.n	6710 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    6728:	add	sp, #8
    672a:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    672c:	lsls	r2, r2, #1
    672e:	mov	r1, r4
    6730:	mov	r0, r6
    6732:	bl	6684 <MTPD::read(char*, unsigned long)>
    6736:	b.n	6728 <MTPD::readstring(char*)+0x34>

00006738 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
    }
    storage_->close();
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    6738:	push	{r4, r5, lr}
    673a:	sub	sp, #260	; 0x104
    673c:	mov	r4, r0
    673e:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6740:	movs	r2, #12
    6742:	mov	r1, sp
    6744:	bl	6684 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[MAX_FILENAME_LEN];
        ReadMTPHeader();
        readstring(filename);
    6748:	mov	r1, sp
    674a:	mov	r0, r4
    674c:	bl	66f4 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    6750:	ldr	r0, [r4, #0]
    6752:	ldr	r3, [r0, #0]
    6754:	mov	r2, sp
    6756:	mov	r1, r5
    6758:	ldr	r3, [r3, #72]	; 0x48
    675a:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    675c:	movw	r0, #8193	; 0x2001
    6760:	add	sp, #260	; 0x104
    6762:	pop	{r4, r5, pc}

00006764 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6764:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6768:	sub	sp, #276	; 0x114
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    676a:	add	r7, sp, #16
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    676c:	mov	r9, r1
    676e:	mov	fp, r2
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6770:	mov	r1, r7
    6772:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6774:	mov	r5, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6776:	bl	6684 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    677a:	ldrh	r3, [r7, #4]
    677c:	cmp	r3, #2
    677e:	it	eq
    6780:	ldreq	r4, [r7, #0]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6782:	mov.w	r2, #4
    6786:	mov	r1, r7
    6788:	mov	r0, r5
    678a:	ite	eq
    678c:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    678e:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6792:	bl	6684 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6796:	movs	r2, #2
    6798:	mov	r1, r7
    679a:	mov	r0, r5
    679c:	bl	6684 <MTPD::read(char*, unsigned long)>
    67a0:	ldrh.w	sl, [r7]
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    67a4:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    67a8:	movs	r2, #2
    67aa:	mov	r1, r7
    67ac:	mov	r0, r5
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    67ae:	rsb	sl, r3, sl
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    67b2:	bl	6684 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    67b6:	movs	r2, #4
    67b8:	mov	r1, r7
    67ba:	mov	r0, r5
    67bc:	bl	6684 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    67c0:	movs	r2, #2
    67c2:	mov	r1, r7
    67c4:	mov	r0, r5
    67c6:	bl	6684 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    67ca:	movs	r2, #4
    67cc:	mov	r1, r7
    67ce:	mov	r0, r5
    67d0:	bl	6684 <MTPD::read(char*, unsigned long)>
    67d4:	movs	r2, #4
    67d6:	mov	r1, r7
    67d8:	mov	r0, r5
    67da:	bl	6684 <MTPD::read(char*, unsigned long)>
    67de:	movs	r2, #4
    67e0:	mov	r1, r7
    67e2:	mov	r0, r5
    67e4:	bl	6684 <MTPD::read(char*, unsigned long)>
    67e8:	movs	r2, #4
    67ea:	mov	r1, r7
    67ec:	mov	r0, r5
    67ee:	bl	6684 <MTPD::read(char*, unsigned long)>
    67f2:	movs	r2, #4
    67f4:	mov	r1, r7
    67f6:	mov	r0, r5
    67f8:	bl	6684 <MTPD::read(char*, unsigned long)>
    67fc:	movs	r2, #4
    67fe:	mov	r1, r7
    6800:	mov	r0, r5
    6802:	bl	6684 <MTPD::read(char*, unsigned long)>
    6806:	movs	r2, #4
    6808:	mov	r1, r7
    680a:	mov	r0, r5
    680c:	bl	6684 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6810:	movs	r2, #2
    6812:	mov	r1, r7
    6814:	mov	r0, r5
    6816:	bl	6684 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    681a:	movs	r2, #4
    681c:	mov	r1, r7
    681e:	mov	r0, r5
    6820:	bl	6684 <MTPD::read(char*, unsigned long)>
    6824:	movs	r2, #4
    6826:	mov	r1, r7
    6828:	mov	r0, r5
    682a:	bl	6684 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    682e:	mov	r1, r7
    6830:	mov	r0, r5
    6832:	bl	66f4 <MTPD::readstring(char*)>
    6836:	mov	r0, r7
    6838:	bl	13580 <strlen>
    683c:	adds	r0, #1
    683e:	sub.w	r4, r4, r0, lsl #1
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6842:	clz	sl, sl
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6846:	cmp	r4, #3
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6848:	mov.w	sl, sl, lsr #5

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);
    684c:	add.w	r9, r9, #4294967295
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6850:	bls.n	686c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x108>
    6852:	mov	r6, r4
    6854:	add.w	r8, sp, #12
    6858:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    685a:	movs	r2, #4
    685c:	mov	r1, r8
    685e:	mov	r0, r5
    6860:	bl	6684 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6864:	cmp	r6, #3
    6866:	bhi.n	6858 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xf4>
    6868:	and.w	r4, r4, #3
    686c:	add.w	r8, sp, #12
    while(len) {read8(); len--;}
    6870:	cbz	r4, 6880 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11c>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6872:	movs	r2, #1
    6874:	mov	r1, r8
    6876:	mov	r0, r5
    6878:	bl	6684 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    687c:	subs	r4, #1
    687e:	bne.n	6872 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10e>
    
    return storage_->Create(store, parent, dir, filename);
    6880:	ldr	r0, [r5, #0]
    6882:	ldr	r4, [r0, #0]
    6884:	str	r7, [sp, #0]
    6886:	mov	r3, sl
    6888:	mov	r2, fp
    688a:	mov	r1, r9
    688c:	ldr	r4, [r4, #44]	; 0x2c
    688e:	blx	r4
  }
    6890:	add	sp, #276	; 0x114
    6892:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6896:	nop

00006898 <MTPD::SendObject()>:

  bool MTPD::SendObject() {
    6898:	push	{r4, r5, r6, r7, lr}
    689a:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    689c:	movs	r2, #12
    689e:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    68a0:	mov	r6, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    68a2:	bl	6684 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    68a6:	ldrh.w	r3, [sp, #8]
    68aa:	cmp	r3, #2
    68ac:	beq.n	68bc <MTPD::SendObject()+0x24>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    68ae:	ldr	r0, [r6, #0]
    68b0:	ldr	r3, [r0, #0]
    68b2:	ldr	r3, [r3, #56]	; 0x38
    68b4:	blx	r3
    return true;
    68b6:	movs	r0, #1
  }
    68b8:	add	sp, #20
    68ba:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    68bc:	ldr	r7, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    68be:	subs	r7, #12
    68c0:	beq.n	68ae <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    68c2:	movs	r5, #0

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    68c4:	mov	r0, r6
    68c6:	bl	65ec <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    68ca:	ldmia.w	r6, {r0, r1}
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    68ce:	ldrh	r2, [r1, #2]
    68d0:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    68d4:	ldr	r3, [r0, #0]
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    68d6:	subs	r4, r4, r2
    68d8:	cmp	r4, r7
    68da:	it	cs
    68dc:	movcs	r4, r7
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    68de:	add	r1, r2
    68e0:	ldr	r3, [r3, #52]	; 0x34
    68e2:	mov	r2, r4
    68e4:	blx	r3
      data_buffer_->index += to_copy;
      len -= to_copy;
    68e6:	subs	r7, r7, r4
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    68e8:	cmp	r0, #0
    68ea:	beq.n	68b8 <MTPD::SendObject()+0x20>
      data_buffer_->index += to_copy;
    68ec:	ldr	r0, [r6, #4]
    68ee:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    68f0:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    68f2:	add	r4, r3
    68f4:	uxth	r4, r4
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    68f6:	cmp	r2, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    68f8:	strh	r4, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    68fa:	beq.n	6902 <MTPD::SendObject()+0x6a>
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    68fc:	cmp	r7, #0
    68fe:	bne.n	68c4 <MTPD::SendObject()+0x2c>
    6900:	b.n	68ae <MTPD::SendObject()+0x16>
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    6902:	bl	10898 <usb_free>
        data_buffer_ = NULL;
    6906:	str	r5, [r6, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    6908:	cmp	r7, #0
    690a:	bne.n	68c4 <MTPD::SendObject()+0x2c>
    690c:	b.n	68ae <MTPD::SendObject()+0x16>
    690e:	nop

00006910 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    6910:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6914:	mov	r5, r0
    6916:	sub	sp, #36	; 0x24
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    6918:	movs	r0, #5
    691a:	bl	108e4 <usb_rx>
    691e:	cmp	r0, #0
    6920:	beq.n	6986 <MTPD::loop()+0x76>
      printContainer();
    6922:	ldr	r1, [r0, #16]
    6924:	ldr	r3, [r0, #8]
    6926:	ldrh	r2, [r0, #14]
    6928:	str	r1, [sp, #4]
    692a:	ldrh	r1, [r0, #12]
    692c:	str	r1, [sp, #0]
    692e:	mov	r4, r0
    6930:	ldr	r1, [pc, #764]	; (6c30 <MTPD::loop()+0x320>)
    6932:	ldr	r0, [pc, #768]	; (6c34 <MTPD::loop()+0x324>)
    6934:	bl	11830 <Print::printf(char const*, ...)>
    6938:	ldr	r3, [r4, #8]
    693a:	cmp	r3, #12
    693c:	bhi.n	69ce <MTPD::loop()+0xbe>
    693e:	ldr	r1, [pc, #760]	; (6c38 <MTPD::loop()+0x328>)
    6940:	ldr	r0, [pc, #752]	; (6c34 <MTPD::loop()+0x324>)
    6942:	bl	11830 <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    6946:	ldrh	r2, [r4, #0]
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    6948:	ldr	r6, [r4, #16]
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
    694a:	ldrh	r0, [r4, #14]
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    694c:	ldr	r7, [r4, #8]
        int typ= CONTAINER->type;
    694e:	ldrh	r1, [r4, #12]
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    6950:	add.w	r3, r4, #20
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    6954:	cmp	r2, #11
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    6956:	ldmia.w	r3, {r3, r9, fp}
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    695a:	str	r6, [r5, #16]

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    695c:	bls.n	69c6 <MTPD::loop()+0xb6>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    695e:	mov.w	sl, #12
        
        if (typ == 1) { // command
    6962:	cmp	r1, #1
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    6964:	strh.w	sl, [r4]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    6968:	mov	r8, r3
      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
    696a:	beq.n	6a26 <MTPD::loop()+0x116>
    696c:	mov.w	r0, #8192	; 0x2000
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    6970:	movs	r3, #3
        CONTAINER->len=len;
        CONTAINER->op=return_code;
    6972:	strh	r0, [r4, #14]
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
        CONTAINER->len=len;
    6974:	str	r7, [r4, #8]
        CONTAINER->op=return_code;
        CONTAINER->transaction_id=id;
    6976:	str	r6, [r4, #16]
        CONTAINER->params[0]=p1;
    6978:	str.w	r8, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    697c:	strh	r3, [r4, #12]
        CONTAINER->params[0]=p1;
        #if DEBUG>1
          printContainer();
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    697e:	mov	r1, r4
    6980:	movs	r0, #4
    6982:	bl	10a54 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    6986:	movs	r0, #6
    6988:	bl	108e4 <usb_rx>
    698c:	mov	r4, r0
    698e:	cbz	r0, 69c0 <MTPD::loop()+0xb0>
      printf("Event: "); printContainer();
    6990:	ldr	r1, [pc, #680]	; (6c3c <MTPD::loop()+0x32c>)
    6992:	ldr	r0, [pc, #672]	; (6c34 <MTPD::loop()+0x324>)
    6994:	bl	11830 <Print::printf(char const*, ...)>
    6998:	ldr	r1, [r4, #16]
    699a:	ldr	r3, [r4, #8]
    699c:	ldrh	r2, [r4, #14]
    699e:	str	r1, [sp, #4]
    69a0:	ldrh	r1, [r4, #12]
    69a2:	str	r1, [sp, #0]
    69a4:	ldr	r0, [pc, #652]	; (6c34 <MTPD::loop()+0x324>)
    69a6:	ldr	r1, [pc, #648]	; (6c30 <MTPD::loop()+0x320>)
    69a8:	bl	11830 <Print::printf(char const*, ...)>
    69ac:	ldr	r3, [r4, #8]
    69ae:	cmp	r3, #12
    69b0:	bhi.n	69fa <MTPD::loop()+0xea>
    69b2:	ldr	r1, [pc, #644]	; (6c38 <MTPD::loop()+0x328>)
    69b4:	ldr	r0, [pc, #636]	; (6c34 <MTPD::loop()+0x324>)
    69b6:	bl	11830 <Print::printf(char const*, ...)>
      usb_free(receive_buffer);
    69ba:	mov	r0, r4
    69bc:	bl	10898 <usb_free>
    }
  }
    69c0:	add	sp, #36	; 0x24
    69c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    69c6:	mov	r0, r4
    69c8:	bl	10898 <usb_free>
    69cc:	b.n	6986 <MTPD::loop()+0x76>

  void MTPD::loop(void) 
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
    69ce:	ldr	r2, [r4, #20]
    69d0:	ldr	r1, [pc, #620]	; (6c40 <MTPD::loop()+0x330>)
    69d2:	ldr	r0, [pc, #608]	; (6c34 <MTPD::loop()+0x324>)
    69d4:	bl	11830 <Print::printf(char const*, ...)>
    69d8:	ldr	r3, [r4, #8]
    69da:	cmp	r3, #16
    69dc:	bls.n	693e <MTPD::loop()+0x2e>
    69de:	ldr	r2, [r4, #24]
    69e0:	ldr	r1, [pc, #604]	; (6c40 <MTPD::loop()+0x330>)
    69e2:	ldr	r0, [pc, #592]	; (6c34 <MTPD::loop()+0x324>)
    69e4:	bl	11830 <Print::printf(char const*, ...)>
    69e8:	ldr	r3, [r4, #8]
    69ea:	cmp	r3, #20
    69ec:	bls.n	693e <MTPD::loop()+0x2e>
    69ee:	ldr	r2, [r4, #28]
    69f0:	ldr	r1, [pc, #588]	; (6c40 <MTPD::loop()+0x330>)
    69f2:	ldr	r0, [pc, #576]	; (6c34 <MTPD::loop()+0x324>)
    69f4:	bl	11830 <Print::printf(char const*, ...)>
    69f8:	b.n	693e <MTPD::loop()+0x2e>
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
      printf("Event: "); printContainer();
    69fa:	ldr	r2, [r4, #20]
    69fc:	ldr	r1, [pc, #576]	; (6c40 <MTPD::loop()+0x330>)
    69fe:	ldr	r0, [pc, #564]	; (6c34 <MTPD::loop()+0x324>)
    6a00:	bl	11830 <Print::printf(char const*, ...)>
    6a04:	ldr	r3, [r4, #8]
    6a06:	cmp	r3, #16
    6a08:	bls.n	69b2 <MTPD::loop()+0xa2>
    6a0a:	ldr	r2, [r4, #24]
    6a0c:	ldr	r1, [pc, #560]	; (6c40 <MTPD::loop()+0x330>)
    6a0e:	ldr	r0, [pc, #548]	; (6c34 <MTPD::loop()+0x324>)
    6a10:	bl	11830 <Print::printf(char const*, ...)>
    6a14:	ldr	r3, [r4, #8]
    6a16:	cmp	r3, #20
    6a18:	bls.n	69b2 <MTPD::loop()+0xa2>
    6a1a:	ldr	r2, [r4, #28]
    6a1c:	ldr	r1, [pc, #544]	; (6c40 <MTPD::loop()+0x330>)
    6a1e:	ldr	r0, [pc, #532]	; (6c34 <MTPD::loop()+0x324>)
    6a20:	bl	11830 <Print::printf(char const*, ...)>
    6a24:	b.n	69b2 <MTPD::loop()+0xa2>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6a26:	movw	r2, #4108	; 0x100c
    6a2a:	cmp	r0, r2
    6a2c:	beq.w	6d6a <MTPD::loop()+0x45a>
    6a30:	bhi.n	6a6e <MTPD::loop()+0x15e>
    6a32:	movw	r2, #4101	; 0x1005
    6a36:	cmp	r0, r2
    6a38:	beq.w	6e70 <MTPD::loop()+0x560>
    6a3c:	bls.n	6af8 <MTPD::loop()+0x1e8>
    6a3e:	movw	r2, #4104	; 0x1008
    6a42:	cmp	r0, r2
    6a44:	beq.w	6e30 <MTPD::loop()+0x520>
    6a48:	bhi.w	6bc4 <MTPD::loop()+0x2b4>
    6a4c:	movw	r2, #4102	; 0x1006
    6a50:	cmp	r0, r2
    6a52:	beq.w	6cb0 <MTPD::loop()+0x3a0>
    6a56:	movw	r2, #4103	; 0x1007
    6a5a:	cmp	r0, r2
    6a5c:	bne.w	6bbe <MTPD::loop()+0x2ae>
              } else {
                p1 = GetNumObjects(p1, p3);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
    6a60:	cmp.w	r9, #0
    6a64:	beq.w	6ed4 <MTPD::loop()+0x5c4>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    6a68:	movw	r0, #8212	; 0x2014
    6a6c:	b.n	6970 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6a6e:	movw	r2, #4121	; 0x1019
    6a72:	cmp	r0, r2
    6a74:	beq.w	6e08 <MTPD::loop()+0x4f8>
    6a78:	bls.n	6b54 <MTPD::loop()+0x244>
    6a7a:	movw	r2, #38914	; 0x9802
    6a7e:	cmp	r0, r2
    6a80:	beq.w	6d84 <MTPD::loop()+0x474>
    6a84:	bhi.w	6bfa <MTPD::loop()+0x2ea>
    6a88:	movw	r2, #4122	; 0x101a
    6a8c:	cmp	r0, r2
    6a8e:	beq.w	6eb0 <MTPD::loop()+0x5a0>
    6a92:	movw	r2, #38913	; 0x9801
    6a96:	cmp	r0, r2
    6a98:	bne.w	6bbe <MTPD::loop()+0x2ae>
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
              else {p1 = return_code; return_code=0x2001;}
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    6a9c:	movs	r2, #1
    6a9e:	mov.w	r9, #0
    6aa2:	mov	r1, r3
    6aa4:	strb	r2, [r5, #8]
    6aa6:	mov	r0, r5
    6aa8:	str.w	r9, [r5, #12]
    6aac:	str	r3, [sp, #12]
    6aae:	bl	5b98 <MTPD::getObjectPropsSupported(unsigned long)>
    6ab2:	ldr	r2, [r5, #12]
    6ab4:	strb.w	r9, [r5, #8]
    6ab8:	adds	r2, #12
    6aba:	movs	r1, #2
    6abc:	strh.w	r1, [sp, #24]
    6ac0:	str	r2, [sp, #20]
    6ac2:	ldrh	r2, [r4, #14]
    6ac4:	strh.w	r2, [sp, #26]
    6ac8:	ldr	r2, [r4, #16]
    6aca:	str	r2, [sp, #28]
    6acc:	add	r1, sp, #20
    6ace:	mov	r0, r5
    6ad0:	movs	r2, #12
    6ad2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6ad6:	ldr	r3, [sp, #12]
    6ad8:	mov	r0, r5
    6ada:	mov	r1, r3
    6adc:	bl	5b98 <MTPD::getObjectPropsSupported(unsigned long)>
    6ae0:	mov	r0, r5
    6ae2:	bl	5410 <MTPD::get_buffer()>
    6ae6:	ldr	r1, [r5, #4]
    6ae8:	movs	r0, #4
    6aea:	bl	10a54 <usb_tx>
    6aee:	str.w	r9, [r5, #4]
              break;
    6af2:	movw	r0, #8193	; 0x2001
    6af6:	b.n	6970 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6af8:	movw	r3, #4098	; 0x1002
    6afc:	cmp	r0, r3
    6afe:	beq.w	6c9c <MTPD::loop()+0x38c>
    6b02:	bls.w	6c58 <MTPD::loop()+0x348>
    6b06:	movw	r3, #4099	; 0x1003
    6b0a:	cmp	r0, r3
    6b0c:	beq.n	6af2 <MTPD::loop()+0x1e2>
    6b0e:	movw	r3, #4100	; 0x1004
    6b12:	cmp	r0, r3
    6b14:	bne.n	6bbe <MTPD::loop()+0x2ae>
              openSession(p1);
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    6b16:	mov.w	r9, #0
    6b1a:	movs	r3, #1
    6b1c:	strb	r3, [r5, #8]
    6b1e:	mov	r0, r5
    6b20:	str.w	r9, [r5, #12]
    6b24:	bl	586c <MTPD::WriteStorageIDs()>
    6b28:	ldr	r3, [r5, #12]
    6b2a:	strb.w	r9, [r5, #8]
    6b2e:	adds	r3, #12
    6b30:	movs	r2, #2
    6b32:	strh.w	r2, [sp, #24]
    6b36:	str	r3, [sp, #20]
    6b38:	ldrh	r3, [r4, #14]
    6b3a:	strh.w	r3, [sp, #26]
    6b3e:	ldr	r3, [r4, #16]
    6b40:	str	r3, [sp, #28]
    6b42:	mov	r0, r5
    6b44:	movs	r2, #12
    6b46:	add	r1, sp, #20
    6b48:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6b4c:	mov	r0, r5
    6b4e:	bl	586c <MTPD::WriteStorageIDs()>
    6b52:	b.n	6ae0 <MTPD::loop()+0x1d0>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6b54:	movw	r2, #4112	; 0x1010
    6b58:	cmp	r0, r2
    6b5a:	beq.n	6bbe <MTPD::loop()+0x2ae>
    6b5c:	bls.n	6c44 <MTPD::loop()+0x334>
    6b5e:	movw	r2, #4116	; 0x1014
    6b62:	cmp	r0, r2
    6b64:	beq.w	6cca <MTPD::loop()+0x3ba>
    6b68:	movw	r2, #4117	; 0x1015
    6b6c:	cmp	r0, r2
    6b6e:	bne.n	6bbe <MTPD::loop()+0x2ae>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    6b70:	movw	r2, #54274	; 0xd402
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    6b74:	mov.w	r9, #0
    6b78:	movs	r1, #1
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    6b7a:	cmp	r3, r2
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    6b7c:	str.w	r9, [r5, #12]
    6b80:	strb	r1, [r5, #8]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    6b82:	beq.w	6f1a <MTPD::loop()+0x60a>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    6b86:	movs	r3, #2
    6b88:	movs	r2, #12
    6b8a:	strb.w	r9, [r5, #8]
    6b8e:	str	r2, [sp, #20]
    6b90:	strh.w	r3, [sp, #24]
    6b94:	ldrh	r3, [r4, #14]
    6b96:	strh.w	r3, [sp, #26]
    6b9a:	ldr	r3, [r4, #16]
    6b9c:	str	r3, [sp, #28]
    6b9e:	add	r1, sp, #20
    6ba0:	mov	r0, r5
    6ba2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6ba6:	mov	r0, r5
    6ba8:	bl	5410 <MTPD::get_buffer()>
    6bac:	movs	r0, #4
    6bae:	ldr	r1, [r5, #4]
    6bb0:	bl	10a54 <usb_tx>
    6bb4:	movs	r3, #0
    6bb6:	str	r3, [r5, #4]
              break;
    6bb8:	movw	r0, #8193	; 0x2001
    6bbc:	b.n	6970 <MTPD::loop()+0x60>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    6bbe:	movw	r0, #8197	; 0x2005
    6bc2:	b.n	6970 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6bc4:	movw	r2, #4105	; 0x1009
    6bc8:	cmp	r0, r2
    6bca:	beq.w	6dc8 <MTPD::loop()+0x4b8>
    6bce:	movw	r2, #4107	; 0x100b
    6bd2:	cmp	r0, r2
    6bd4:	bne.n	6bbe <MTPD::loop()+0x2ae>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    6bd6:	cmp.w	r9, #0
    6bda:	bne.w	6a68 <MTPD::loop()+0x158>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(p1)) {
    6bde:	ldr	r0, [r5, #0]
    6be0:	ldr	r2, [r0, #0]
    6be2:	mov	r1, r3
    6be4:	ldr	r3, [r2, #60]	; 0x3c
    6be6:	blx	r3
    6be8:	movw	r3, #8210	; 0x2012
    6bec:	movw	r2, #8193	; 0x2001
    6bf0:	cmp	r0, #0
    6bf2:	ite	eq
    6bf4:	moveq	r0, r3
    6bf6:	movne	r0, r2
    6bf8:	b.n	6970 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6bfa:	movw	r2, #38915	; 0x9803
    6bfe:	cmp	r0, r2
    6c00:	beq.w	6d14 <MTPD::loop()+0x404>
    6c04:	movw	r2, #38916	; 0x9804
    6c08:	cmp	r0, r2
    6c0a:	bne.n	6bbe <MTPD::loop()+0x2ae>
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    6c0c:	mov	r0, r5
    6c0e:	str	r3, [sp, #12]
    6c10:	bl	65ec <MTPD::receive_buffer()>
      if(p2==0xDC07)
    6c14:	movw	r2, #56327	; 0xdc07
    6c18:	cmp	r9, r2
    6c1a:	ldr	r3, [sp, #12]
    6c1c:	bne.n	6bbe <MTPD::loop()+0x2ae>
    6c1e:	mov	r1, r3
    6c20:	mov	r0, r5
    6c22:	bl	6738 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    6c26:	cmp	r0, #0
    6c28:	beq.w	69c6 <MTPD::loop()+0xb6>
    6c2c:	uxth	r0, r0
    6c2e:	b.n	6970 <MTPD::loop()+0x60>
    6c30:	.word	0x00016d84
    6c34:	.word	0x1fff0b00
    6c38:	.word	0x00016d98
    6c3c:	.word	0x00016d9c
    6c40:	.word	0x00016d94
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6c44:	movw	r3, #4109	; 0x100d
    6c48:	cmp	r0, r3
    6c4a:	bne.n	6bbe <MTPD::loop()+0x2ae>
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    6c4c:	mov	r0, r5
    6c4e:	bl	6898 <MTPD::SendObject()>
              break;
    6c52:	movw	r0, #8193	; 0x2001
    6c56:	b.n	6970 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    6c58:	movw	r3, #4097	; 0x1001
    6c5c:	cmp	r0, r3
    6c5e:	bne.n	6bbe <MTPD::loop()+0x2ae>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    6c60:	mov.w	r9, #0
    6c64:	strb	r1, [r5, #8]
    6c66:	mov	r0, r5
    6c68:	str.w	r9, [r5, #12]
    6c6c:	bl	55f0 <MTPD::WriteDescriptor()>
    6c70:	ldr	r3, [r5, #12]
    6c72:	strb.w	r9, [r5, #8]
    6c76:	adds	r3, #12
    6c78:	movs	r2, #2
    6c7a:	strh.w	r2, [sp, #24]
    6c7e:	str	r3, [sp, #20]
    6c80:	ldrh	r3, [r4, #14]
    6c82:	strh.w	r3, [sp, #26]
    6c86:	ldr	r3, [r4, #16]
    6c88:	str	r3, [sp, #28]
    6c8a:	mov	r0, r5
    6c8c:	mov	r2, sl
    6c8e:	add	r1, sp, #20
    6c90:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6c94:	mov	r0, r5
    6c96:	bl	55f0 <MTPD::WriteDescriptor()>
    6c9a:	b.n	6ae0 <MTPD::loop()+0x1d0>
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
      storage_->ResetIndex();
    6c9c:	ldr	r0, [r5, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    6c9e:	ldr	r2, [pc, #736]	; (6f80 <MTPD::loop()+0x670>)
      storage_->ResetIndex();
    6ca0:	ldr	r3, [r0, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    6ca2:	str.w	r8, [r2]
      storage_->ResetIndex();
    6ca6:	ldr	r3, [r3, #68]	; 0x44
    6ca8:	blx	r3
    6caa:	movw	r0, #8193	; 0x2001
    6cae:	b.n	6970 <MTPD::loop()+0x60>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
              break;
            case 0x1006:  // GetNumObjects
              if (p2) {
    6cb0:	cmp.w	r9, #0
    6cb4:	bne.w	6a68 <MTPD::loop()+0x158>
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(p1, p3);
    6cb8:	mov	r2, fp
    6cba:	mov	r1, r3
    6cbc:	mov	r0, r5
    6cbe:	bl	53e8 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    6cc2:	mov	r8, r0
    6cc4:	movw	r0, #8193	; 0x2001
    6cc8:	b.n	6970 <MTPD::loop()+0x60>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    6cca:	movw	r2, #54274	; 0xd402
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    6cce:	movs	r0, #0
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    6cd0:	cmp	r3, r2
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    6cd2:	strb	r1, [r5, #8]
    6cd4:	str	r0, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    6cd6:	beq.w	6f50 <MTPD::loop()+0x640>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    6cda:	movs	r2, #12
    6cdc:	movs	r0, #0
    6cde:	movs	r1, #2
    6ce0:	strb	r0, [r5, #8]
    6ce2:	str	r2, [sp, #20]
    6ce4:	strh.w	r1, [sp, #24]
    6ce8:	ldrh	r1, [r4, #14]
    6cea:	strh.w	r1, [sp, #26]
    6cee:	ldr	r1, [r4, #16]
    6cf0:	str	r1, [sp, #28]
    6cf2:	mov	r0, r5
    6cf4:	add	r1, sp, #20
    6cf6:	str	r3, [sp, #12]
    6cf8:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    6cfc:	ldr	r3, [sp, #12]
    6cfe:	movw	r2, #54274	; 0xd402
    6d02:	cmp	r3, r2
    6d04:	bne.w	6ba6 <MTPD::loop()+0x296>
    6d08:	movw	r1, #54274	; 0xd402
    6d0c:	mov	r0, r5
    6d0e:	bl	5534 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    6d12:	b.n	6ba6 <MTPD::loop()+0x296>
          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
    6d14:	mov.w	fp, #0
    6d18:	strb	r1, [r5, #8]
    6d1a:	mov	r2, r9
    6d1c:	mov	r1, r3
    6d1e:	mov	r0, r5
    6d20:	str.w	fp, [r5, #12]
    6d24:	bl	5c04 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    6d28:	ldr	r3, [r5, #12]
    6d2a:	strb.w	fp, [r5, #8]
    6d2e:	adds	r3, #12
    6d30:	movs	r2, #2
    6d32:	strh.w	r2, [sp, #24]
    6d36:	str	r3, [sp, #20]
    6d38:	ldrh	r3, [r4, #14]
    6d3a:	strh.w	r3, [sp, #26]
    6d3e:	mov	r2, sl
    6d40:	ldr	r3, [r4, #16]
    6d42:	str	r3, [sp, #28]
    6d44:	add	r1, sp, #20
    6d46:	mov	r0, r5
    6d48:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6d4c:	mov	r2, r9
    6d4e:	mov	r1, r8
    6d50:	mov	r0, r5
    6d52:	bl	5c04 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    6d56:	mov	r0, r5
    6d58:	bl	5410 <MTPD::get_buffer()>
    6d5c:	ldr	r1, [r5, #4]
    6d5e:	movs	r0, #4
    6d60:	bl	10a54 <usb_tx>
    6d64:	str.w	fp, [r5, #4]
    6d68:	b.n	6af2 <MTPD::loop()+0x1e2>
                  return_code = 0x2012; // partial deletion
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
    6d6a:	mov	r0, r5
    6d6c:	mov	r2, r9
    6d6e:	mov	r1, r3
    6d70:	bl	6764 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                   p2); // parent
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
    6d74:	movs	r7, #24
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
                                   p2); // parent
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
    6d76:	str	r0, [r4, #28]
              }
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
                                   p2); // parent
              CONTAINER->params[1]=p2;
    6d78:	str.w	r9, [r4, #24]
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
    6d7c:	strh	r7, [r4, #0]
              break;
    6d7e:	movw	r0, #8193	; 0x2001
    6d82:	b.n	6970 <MTPD::loop()+0x60>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
    6d84:	mov.w	fp, #0
    6d88:	strb	r1, [r5, #8]
    6d8a:	mov	r2, r9
    6d8c:	mov	r1, r3
    6d8e:	mov	r0, r5
    6d90:	str.w	fp, [r5, #12]
    6d94:	bl	5f04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    6d98:	ldr	r3, [r5, #12]
    6d9a:	strb.w	fp, [r5, #8]
    6d9e:	adds	r3, #12
    6da0:	movs	r2, #2
    6da2:	strh.w	r2, [sp, #24]
    6da6:	str	r3, [sp, #20]
    6da8:	ldrh	r3, [r4, #14]
    6daa:	strh.w	r3, [sp, #26]
    6dae:	mov	r2, sl
    6db0:	ldr	r3, [r4, #16]
    6db2:	str	r3, [sp, #28]
    6db4:	add	r1, sp, #20
    6db6:	mov	r0, r5
    6db8:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6dbc:	mov	r2, r9
    6dbe:	mov	r1, r8
    6dc0:	mov	r0, r5
    6dc2:	bl	5f04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    6dc6:	b.n	6d56 <MTPD::loop()+0x446>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
    6dc8:	mov.w	r9, #0
    6dcc:	strb	r1, [r5, #8]
    6dce:	mov	r0, r5
    6dd0:	mov	r1, r3
    6dd2:	str.w	r9, [r5, #12]
    6dd6:	bl	6608 <MTPD::GetObject(unsigned long)>
    6dda:	ldr	r3, [r5, #12]
    6ddc:	strb.w	r9, [r5, #8]
    6de0:	adds	r3, #12
    6de2:	movs	r2, #2
    6de4:	strh.w	r2, [sp, #24]
    6de8:	str	r3, [sp, #20]
    6dea:	ldrh	r3, [r4, #14]
    6dec:	strh.w	r3, [sp, #26]
    6df0:	ldr	r3, [r4, #16]
    6df2:	str	r3, [sp, #28]
    6df4:	add	r1, sp, #20
    6df6:	mov	r0, r5
    6df8:	mov	r2, sl
    6dfa:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6dfe:	mov	r1, r8
    6e00:	mov	r0, r5
    6e02:	bl	6608 <MTPD::GetObject(unsigned long)>
    6e06:	b.n	6ae0 <MTPD::loop()+0x1d0>
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    6e08:	ldr	r0, [r5, #0]
    6e0a:	ldr	r1, [r0, #0]
    6e0c:	mov	r3, fp
    6e0e:	add.w	r2, r9, #4294967295
    6e12:	ldr	r5, [r1, #76]	; 0x4c
    6e14:	mov	r1, r8
    6e16:	blx	r5
    6e18:	movw	r3, #8197	; 0x2005
    6e1c:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
    6e20:	strh.w	sl, [r4]
              break;
    6e24:	mov	r7, sl
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    6e26:	cmp	r0, #0
    6e28:	ite	eq
    6e2a:	moveq	r0, r3
    6e2c:	movne	r0, r2
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
              break;
    6e2e:	b.n	6970 <MTPD::loop()+0x60>
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
    6e30:	mov.w	r9, #0
    6e34:	strb	r1, [r5, #8]
    6e36:	mov	r0, r5
    6e38:	mov	r1, r3
    6e3a:	str.w	r9, [r5, #12]
    6e3e:	bl	5944 <MTPD::GetObjectInfo(unsigned long)>
    6e42:	ldr	r3, [r5, #12]
    6e44:	strb.w	r9, [r5, #8]
    6e48:	adds	r3, #12
    6e4a:	movs	r2, #2
    6e4c:	strh.w	r2, [sp, #24]
    6e50:	str	r3, [sp, #20]
    6e52:	ldrh	r3, [r4, #14]
    6e54:	strh.w	r3, [sp, #26]
    6e58:	ldr	r3, [r4, #16]
    6e5a:	str	r3, [sp, #28]
    6e5c:	add	r1, sp, #20
    6e5e:	mov	r0, r5
    6e60:	mov	r2, sl
    6e62:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6e66:	mov	r1, r8
    6e68:	mov	r0, r5
    6e6a:	bl	5944 <MTPD::GetObjectInfo(unsigned long)>
    6e6e:	b.n	6ae0 <MTPD::loop()+0x1d0>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
    6e70:	mov.w	r9, #0
    6e74:	strb	r1, [r5, #8]
    6e76:	mov	r0, r5
    6e78:	mov	r1, r3
    6e7a:	str.w	r9, [r5, #12]
    6e7e:	bl	5dc0 <MTPD::GetStorageInfo(unsigned long)>
    6e82:	ldr	r3, [r5, #12]
    6e84:	strb.w	r9, [r5, #8]
    6e88:	adds	r3, #12
    6e8a:	movs	r2, #2
    6e8c:	strh.w	r2, [sp, #24]
    6e90:	str	r3, [sp, #20]
    6e92:	ldrh	r3, [r4, #14]
    6e94:	strh.w	r3, [sp, #26]
    6e98:	ldr	r3, [r4, #16]
    6e9a:	str	r3, [sp, #28]
    6e9c:	add	r1, sp, #20
    6e9e:	mov	r0, r5
    6ea0:	mov	r2, sl
    6ea2:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6ea6:	mov	r1, r8
    6ea8:	mov	r0, r5
    6eaa:	bl	5dc0 <MTPD::GetStorageInfo(unsigned long)>
    6eae:	b.n	6ae0 <MTPD::loop()+0x1d0>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    }
    
    uint32_t MTPD::copyObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      return storage_->copy(handle,store1,newHandle);
    6eb0:	ldr	r0, [r5, #0]
    6eb2:	ldr	r1, [r0, #0]
    6eb4:	mov	r3, fp
    6eb6:	ldr	r5, [r1, #80]	; 0x50
    6eb8:	add.w	r2, r9, #4294967295
    6ebc:	mov	r1, r8
    6ebe:	blx	r5
              len  = receive_buffer->len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
    6ec0:	cbnz	r0, 6ecc <MTPD::loop()+0x5bc>
    6ec2:	movs	r7, #12
    6ec4:	strh	r7, [r4, #0]
    6ec6:	movw	r0, #8197	; 0x2005
    6eca:	b.n	6970 <MTPD::loop()+0x60>
              else {p1 = return_code; return_code=0x2001;}
    6ecc:	mov	r8, r0
    6ece:	movw	r0, #8193	; 0x2001
    6ed2:	b.n	6970 <MTPD::loop()+0x60>
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
    6ed4:	movs	r2, #1
    6ed6:	mov	r1, r3
    6ed8:	strb	r2, [r5, #8]
    6eda:	mov	r0, r5
    6edc:	mov	r2, fp
    6ede:	str.w	r9, [r5, #12]
    6ee2:	str	r3, [sp, #12]
    6ee4:	bl	58d4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    6ee8:	ldr	r2, [r5, #12]
    6eea:	strb.w	r9, [r5, #8]
    6eee:	adds	r2, #12
    6ef0:	movs	r1, #2
    6ef2:	strh.w	r1, [sp, #24]
    6ef6:	str	r2, [sp, #20]
    6ef8:	ldrh	r2, [r4, #14]
    6efa:	strh.w	r2, [sp, #26]
    6efe:	ldr	r2, [r4, #16]
    6f00:	str	r2, [sp, #28]
    6f02:	add	r1, sp, #20
    6f04:	mov	r0, r5
    6f06:	movs	r2, #12
    6f08:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6f0c:	ldr	r3, [sp, #12]
    6f0e:	mov	r2, fp
    6f10:	mov	r1, r3
    6f12:	mov	r0, r5
    6f14:	bl	58d4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    6f18:	b.n	6ae0 <MTPD::loop()+0x1d0>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    6f1a:	mov	r0, r5
    6f1c:	ldr	r1, [pc, #100]	; (6f84 <MTPD::loop()+0x674>)
    6f1e:	bl	548c <MTPD::writestring(char const*)>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    6f22:	ldr	r3, [r5, #12]
    6f24:	strb.w	r9, [r5, #8]
    6f28:	adds	r3, #12
    6f2a:	movs	r2, #2
    6f2c:	strh.w	r2, [sp, #24]
    6f30:	str	r3, [sp, #20]
    6f32:	ldrh	r3, [r4, #14]
    6f34:	strh.w	r3, [sp, #26]
    6f38:	ldr	r3, [r4, #16]
    6f3a:	str	r3, [sp, #28]
    6f3c:	add	r1, sp, #20
    6f3e:	mov	r0, r5
    6f40:	movs	r2, #12
    6f42:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    6f46:	ldr	r1, [pc, #60]	; (6f84 <MTPD::loop()+0x674>)
    6f48:	mov	r0, r5
    6f4a:	bl	548c <MTPD::writestring(char const*)>
    6f4e:	b.n	6ba6 <MTPD::loop()+0x296>
    6f50:	mov	r1, r2
    6f52:	mov	r0, r5
    6f54:	bl	5534 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    6f58:	ldr	r3, [r5, #12]
    6f5a:	movs	r1, #0
    6f5c:	adds	r3, #12
    6f5e:	movs	r2, #2
    6f60:	strb	r1, [r5, #8]
    6f62:	strh.w	r2, [sp, #24]
    6f66:	str	r3, [sp, #20]
    6f68:	ldrh	r3, [r4, #14]
    6f6a:	strh.w	r3, [sp, #26]
    6f6e:	ldr	r3, [r4, #16]
    6f70:	str	r3, [sp, #28]
    6f72:	movs	r2, #12
    6f74:	add	r1, sp, #20
    6f76:	mov	r0, r5
    6f78:	bl	5428 <MTPD::write(char const*, int) [clone .part.2]>
    6f7c:	b.n	6d08 <MTPD::loop()+0x3f8>
    6f7e:	nop
    6f80:	.word	0x1fff1f68
    6f84:	.word	0x00016d54

00006f88 <usb_init_events>:
  extern "C"
  {
    usb_packet_t *tx_event_packet=NULL;

    int usb_init_events(void)
    {
    6f88:	push	{r3, lr}
      tx_event_packet = usb_malloc();
    6f8a:	bl	10858 <usb_malloc>
    6f8e:	ldr	r2, [pc, #12]	; (6f9c <usb_init_events+0x14>)
    6f90:	mov	r3, r0
      if(tx_event_packet) return 1; else return 0; 
    }
    6f92:	adds	r0, #0
    6f94:	it	ne
    6f96:	movne	r0, #1
  {
    usb_packet_t *tx_event_packet=NULL;

    int usb_init_events(void)
    {
      tx_event_packet = usb_malloc();
    6f98:	str	r3, [r2, #0]
      if(tx_event_packet) return 1; else return 0; 
    }
    6f9a:	pop	{r3, pc}
    6f9c:	.word	0x1fff1f6c

00006fa0 <usb_mtp_sendEvent>:


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
    6fa0:	push	{r3, r4, r5, lr}
      if (!usb_configuration) return -1;
    6fa2:	ldr	r3, [pc, #44]	; (6fd0 <usb_mtp_sendEvent+0x30>)
    6fa4:	ldrb	r3, [r3, #0]
    6fa6:	cbz	r3, 6fc8 <usb_mtp_sendEvent+0x28>
      memcpy(tx_event_packet->buf, buffer, len);
    6fa8:	ldr	r3, [pc, #40]	; (6fd4 <usb_mtp_sendEvent+0x34>)
    6faa:	ldr	r5, [r3, #0]
    6fac:	mov	r4, r1
    6fae:	mov	r2, r4
    6fb0:	mov	r1, r0
    6fb2:	add.w	r0, r5, #8
    6fb6:	bl	fc48 <memcpy>
      tx_event_packet->len = len;
    6fba:	strh	r4, [r5, #0]
      usb_tx(MTP_EVENT_ENDPOINT, tx_event_packet);
    6fbc:	mov	r1, r5
    6fbe:	movs	r0, #6
    6fc0:	bl	10a54 <usb_tx>
      return len;
    6fc4:	mov	r0, r4
    6fc6:	pop	{r3, r4, r5, pc}
    }


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
      if (!usb_configuration) return -1;
    6fc8:	mov.w	r0, #4294967295
      memcpy(tx_event_packet->buf, buffer, len);
      tx_event_packet->len = len;
      usb_tx(MTP_EVENT_ENDPOINT, tx_event_packet);
      return len;
    }
    6fcc:	pop	{r3, r4, r5, pc}
    6fce:	nop
    6fd0:	.word	0x1fff25bc
    6fd4:	.word	0x1fff1f6c

00006fd8 <MTPD::send_Event(unsigned short)>:

  #endif
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    6fd8:	push	{r4, r5, lr}
    6fda:	sub	sp, #36	; 0x24
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    6fdc:	ldr	r3, [r0, #16]

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    6fde:	strh.w	r1, [sp, #6]
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    6fe2:	movs	r4, #12
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    6fe4:	str	r3, [sp, #8]
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    6fe6:	mov	r1, r4
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    event.params[0]=0;
    6fe8:	movs	r3, #0
  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    6fea:	movs	r5, #4
    event.transaction_id=TID;
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    6fec:	movs	r2, #60	; 0x3c
    6fee:	mov	r0, sp
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    6ff0:	str	r4, [sp, #0]
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    6ff2:	strh.w	r5, [sp, #4]
    event.transaction_id=TID;
    event.params[0]=0;
    6ff6:	str	r3, [sp, #12]
    event.params[1]=0;
    6ff8:	str	r3, [sp, #16]
    event.params[2]=0;
    6ffa:	str	r3, [sp, #20]
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    6ffc:	bl	6fa0 <usb_mtp_sendEvent>
  }
    7000:	add	sp, #36	; 0x24
    7002:	pop	{r4, r5, pc}

00007004 <MTPD::send_DeviceResetEvent()>:
    event.params[2]=p3;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
  }

  int MTPD::send_DeviceResetEvent(void) 
  { return send_Event(MTP_EVENT_DEVICE_RESET); } 
    7004:	movw	r1, #16395	; 0x400b
    7008:	b.w	6fd8 <MTPD::send_Event(unsigned short)>

0000700c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    700c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    700e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7010:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7012:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7014:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7016:	beq.n	7020 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    7018:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    701c:	b.w	116d4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7020:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    7022:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7026:	bx	r3

00007028 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7028:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    702c:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    702e:	ldr	r5, [r4, #12]
    7030:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    7034:	ldr	r5, [pc, #484]	; (721c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    7036:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    7038:	bne.n	70e0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    703a:	lsls	r7, r3, #31
    703c:	bpl.w	71a6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    7040:	cmp	r1, #0
    7042:	beq.w	720c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7046:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    7048:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    704a:	it	ne
    704c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    7050:	str	r5, [r4, #52]	; 0x34
    7052:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    7054:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    7058:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    705c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    7060:	cmp.w	ip, #0
    7064:	beq.w	71b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    7068:	cbz	r1, 7074 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    706a:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    706c:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    7070:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7074:	ldr	r5, [r0, #4]
    7076:	ldrb	r6, [r5, #8]
			if (count == 2)
    7078:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    707c:	add.w	r6, r6, #4294967295
    7080:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    7084:	ite	eq
    7086:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    708a:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    708e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    7090:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    7092:	sub.w	ip, ip, #2
    7096:	b.n	70aa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    7098:	cbz	r2, 709e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    709a:	strb	r4, [r2, #0]
    709c:	adds	r2, #1
						} 
						count_read--;
    709e:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    70a0:	and.w	r5, r5, #61440	; 0xf000
    70a4:	cmp	r5, r6
    70a6:	bls.n	70d6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    70a8:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    70aa:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    70ac:	tst.w	r5, #240	; 0xf0
    70b0:	beq.n	70a0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    70b2:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    70b4:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    70b8:	mov	r7, r2
    70ba:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    70be:	bne.n	7098 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    70c0:	cbz	r2, 70ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    70c2:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    70c6:	strb	r4, [r2, #1]
    70c8:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    70ca:	and.w	r5, r5, #61440	; 0xf000
    70ce:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    70d0:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    70d4:	bhi.n	70a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    70d6:	cmp.w	ip, #0
    70da:	beq.n	71b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    70dc:	ldr	r4, [r0, #0]
    70de:	b.n	7068 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    70e0:	lsls	r5, r3, #31
    70e2:	bpl.n	717e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    70e4:	cmp	r1, #0
    70e6:	beq.w	71fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    70ea:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    70ec:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    70ee:	it	ne
    70f0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    70f4:	str	r5, [r4, #52]	; 0x34
    70f6:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    70f8:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    70fc:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    7100:	cmp.w	lr, #0
    7104:	beq.n	718a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    7106:	cbz	r1, 7114 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    7108:	ldrb.w	ip, [r1, #1]
    710c:	ldrb	r5, [r1, #0]
    710e:	adds	r1, #2
    7110:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7114:	ldr	r5, [r0, #4]
    7116:	ldrb	r6, [r5, #8]
			if (count == 2)
    7118:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    711c:	add.w	r6, r6, #4294967295
    7120:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    7124:	ite	eq
    7126:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    712a:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    712e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    7130:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    7132:	sub.w	lr, lr, #2
    7136:	b.n	714a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    7138:	cbz	r2, 713e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    713a:	strb	r4, [r2, #0]
    713c:	adds	r2, #1
						} 
						count_read--;
    713e:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7140:	and.w	r5, r5, #61440	; 0xf000
    7144:	cmp	r5, r6
    7146:	bls.n	7174 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    7148:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    714a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    714c:	tst.w	r5, #240	; 0xf0
    7150:	beq.n	7140 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    7152:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    7156:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    7158:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    715a:	bne.n	7138 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    715c:	cbz	r2, 7168 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    715e:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    7162:	asrs	r4, r4, #8
    7164:	strb	r4, [r2, #1]
    7166:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7168:	and.w	r5, r5, #61440	; 0xf000
    716c:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    716e:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7172:	bhi.n	7148 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    7174:	cmp.w	lr, #0
    7178:	beq.n	718a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    717a:	ldr	r4, [r0, #0]
    717c:	b.n	7106 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    717e:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    7180:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    7184:	cmp.w	lr, #0
    7188:	bne.n	7106 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    718a:	cbz	r3, 71d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    718c:	ldr	r4, [r0, #0]
			sr = port().SR;
    718e:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    7190:	tst.w	r1, #240	; 0xf0
    7194:	beq.n	718e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    7196:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    7198:	lsls	r4, r3, #31
    719a:	bpl.n	71d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    719c:	cbz	r2, 71a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    719e:	strb	r1, [r2, #0]
    71a0:	adds	r2, #1
					count_read--;
    71a2:	subs	r3, #1
    71a4:	b.n	718a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    71a6:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    71aa:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    71ac:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    71b0:	cmp.w	ip, #0
    71b4:	bne.w	7068 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    71b8:	cbz	r3, 71d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    71ba:	ldr	r4, [r0, #0]
			sr = port().SR;
    71bc:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    71be:	tst.w	r1, #240	; 0xf0
    71c2:	beq.n	71bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    71c4:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    71c6:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    71c8:	bpl.n	71ea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    71ca:	cbz	r2, 71d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    71cc:	strb	r1, [r2, #0]
    71ce:	adds	r2, #1
					count_read--;
    71d0:	subs	r3, #1
    71d2:	b.n	71b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    71d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    71d8:	cbz	r2, 71e6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    71da:	mov	r4, r2
						*p_read++ = w >> 8;
    71dc:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    71de:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    71e2:	strb	r5, [r2, #1]
    71e4:	mov	r2, r4
					}
					count_read -= 2;
    71e6:	subs	r3, #2
    71e8:	b.n	718a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    71ea:	cbz	r2, 71f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    71ec:	mov	r4, r2
    71ee:	asrs	r5, r1, #8
    71f0:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    71f4:	strb	r1, [r2, #1]
    71f6:	mov	r2, r4
					}
					count_read -= 2;
    71f8:	subs	r3, #2
    71fa:	b.n	71b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    71fc:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    7200:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7202:	it	ne
    7204:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    7208:	str	r5, [r4, #52]	; 0x34
    720a:	b.n	70f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    720c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    7210:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7212:	it	ne
    7214:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    7218:	str	r5, [r4, #52]	; 0x34
    721a:	b.n	7054 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    721c:	.word	0x801f0400

00007220 <_spi_dma_rxISR1()>:
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7220:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7222:	ldr	r3, [pc, #280]	; (733c <_spi_dma_rxISR1()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7224:	ldr	r2, [pc, #280]	; (7340 <_spi_dma_rxISR1()+0x120>)
    7226:	ldr	r0, [r3, #56]	; 0x38
    7228:	ldr	r4, [r3, #52]	; 0x34
    722a:	ldrb	r1, [r0, #4]
    722c:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    722e:	ldr	r1, [pc, #276]	; (7344 <_spi_dma_rxISR1()+0x124>)
    7230:	ldrb	r2, [r4, #4]
    7232:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    7234:	ldr	r2, [r3, #48]	; 0x30
    7236:	ldrb	r0, [r0, #4]
    7238:	strb	r0, [r1, #0]
    723a:	cmp	r2, #0
    723c:	beq.n	72cc <_spi_dma_rxISR1()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    723e:	ldr	r1, [r3, #4]
    7240:	ldr	r1, [r1, #12]
    7242:	cmp	r2, r1
    7244:	bhi.n	72c4 <_spi_dma_rxISR1()+0xa4>
    7246:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7248:	ldrh	r4, [r1, #30]
    724a:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    724c:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7250:	bmi.n	731e <_spi_dma_rxISR1()+0xfe>
		tcd->BITER = len & 0x7fff;
    7252:	ubfx	r0, r0, #0, #15
    7256:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7258:	ldrh	r0, [r1, #30]
    725a:	uxth	r0, r0
    725c:	strh	r0, [r1, #22]
    725e:	ldr	r1, [r3, #56]	; 0x38
    7260:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7262:	ldrh	r0, [r1, #30]
    7264:	lsls	r0, r0, #16
    7266:	bmi.n	730e <_spi_dma_rxISR1()+0xee>
		tcd->BITER = len & 0x7fff;
    7268:	ubfx	r0, r2, #0, #15
    726c:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    726e:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    7270:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7272:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7274:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7278:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    727a:	it	ne
    727c:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    727e:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7280:	ldr	r1, [r3, #52]	; 0x34
    7282:	ldr	r0, [pc, #184]	; (733c <_spi_dma_rxISR1()+0x11c>)
    7284:	ldr	r1, [r1, #0]
    7286:	ldr	r5, [r1, #0]
    7288:	add.w	r4, r0, #44	; 0x2c
    728c:	cmp	r5, r4
    728e:	beq.n	72fe <_spi_dma_rxISR1()+0xde>
    7290:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7292:	ldr	r4, [r0, #12]
    7294:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7298:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    729a:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    729c:	itete	ne
    729e:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    72a0:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    72a2:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    72a4:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    72a6:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    72aa:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    72ac:	str	r4, [r0, #52]	; 0x34
    72ae:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    72b0:	ldr	r3, [pc, #148]	; (7348 <_spi_dma_rxISR1()+0x128>)
    72b2:	ldrb	r1, [r1, #4]
    72b4:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    72b6:	ldr	r1, [pc, #132]	; (733c <_spi_dma_rxISR1()+0x11c>)
		if (should_reenable_tx)
    72b8:	cbz	r2, 72c0 <_spi_dma_rxISR1()+0xa0>
    72ba:	ldr	r2, [r1, #52]	; 0x34
    72bc:	ldrb	r2, [r2, #4]
    72be:	strb	r2, [r3, #0]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72c0:	pop	{r4, r5, r6, r7}
    72c2:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    72c4:	subs	r2, r2, r1
    72c6:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    72c8:	movs	r2, #1
    72ca:	b.n	7280 <_spi_dma_rxISR1()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    72cc:	ldr	r0, [r3, #60]	; 0x3c
    72ce:	ldr	r1, [r3, #0]
    72d0:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    72d2:	ldr	r4, [pc, #120]	; (734c <_spi_dma_rxISR1()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    72d4:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    72d6:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    72d8:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    72da:	ldr	r5, [r5, #0]
    72dc:	ldr	r6, [pc, #112]	; (7350 <_spi_dma_rxISR1()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    72de:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    72e2:	movs	r7, #3
    72e4:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    72e6:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    72e8:	strb.w	r7, [r3, #45]	; 0x2d
    72ec:	bne.n	732e <_spi_dma_rxISR1()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    72ee:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    72f0:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    72f2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    72f4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    72f6:	beq.n	7336 <_spi_dma_rxISR1()+0x116>
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    72f8:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    72fa:	b.w	116d4 <EventResponder::triggerEventNotImmediate()>
    72fe:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7300:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7304:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7306:	orr.w	r0, r0, #2147483648	; 0x80000000
    730a:	str	r0, [r1, #52]	; 0x34
    730c:	b.n	72ae <_spi_dma_rxISR1()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    730e:	ldrh	r4, [r1, #30]
    7310:	ubfx	r0, r2, #0, #9
    7314:	and.w	r4, r4, #65024	; 0xfe00
    7318:	orrs	r0, r4
    731a:	strh	r0, [r1, #30]
    731c:	b.n	726e <_spi_dma_rxISR1()+0x4e>
    731e:	ldrh	r4, [r1, #30]
    7320:	ubfx	r0, r0, #0, #9
    7324:	and.w	r4, r4, #65024	; 0xfe00
    7328:	orrs	r0, r4
    732a:	strh	r0, [r1, #30]
    732c:	b.n	7258 <_spi_dma_rxISR1()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    732e:	mov	r3, r5
    7330:	mov	r1, r2
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7332:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7334:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7336:	ldr	r3, [r0, #8]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7338:	pop	{r4, r5, r6, r7}
    733a:	bx	r3
    733c:	.word	0x1fff09c0
    7340:	.word	0x4000801f
    7344:	.word	0x4000801c
    7348:	.word	0x4000801b
    734c:	.word	0xff0f0000
    7350:	.word	0x0000700d

00007354 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7354:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7356:	ldr	r3, [pc, #280]	; (7470 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7358:	ldr	r2, [pc, #280]	; (7474 <_spi_dma_rxISR0()+0x120>)
    735a:	ldr	r0, [r3, #56]	; 0x38
    735c:	ldr	r4, [r3, #52]	; 0x34
    735e:	ldrb	r1, [r0, #4]
    7360:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7362:	ldr	r1, [pc, #276]	; (7478 <_spi_dma_rxISR0()+0x124>)
    7364:	ldrb	r2, [r4, #4]
    7366:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    7368:	ldr	r2, [r3, #48]	; 0x30
    736a:	ldrb	r0, [r0, #4]
    736c:	strb	r0, [r1, #0]
    736e:	cmp	r2, #0
    7370:	beq.n	7400 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    7372:	ldr	r1, [r3, #4]
    7374:	ldr	r1, [r1, #12]
    7376:	cmp	r2, r1
    7378:	bhi.n	73f8 <_spi_dma_rxISR0()+0xa4>
    737a:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    737c:	ldrh	r4, [r1, #30]
    737e:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    7380:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7384:	bmi.n	7452 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    7386:	ubfx	r0, r0, #0, #15
    738a:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    738c:	ldrh	r0, [r1, #30]
    738e:	uxth	r0, r0
    7390:	strh	r0, [r1, #22]
    7392:	ldr	r1, [r3, #56]	; 0x38
    7394:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7396:	ldrh	r0, [r1, #30]
    7398:	lsls	r0, r0, #16
    739a:	bmi.n	7442 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    739c:	ubfx	r0, r2, #0, #15
    73a0:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    73a2:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    73a4:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    73a6:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    73a8:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    73ac:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    73ae:	it	ne
    73b0:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    73b2:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    73b4:	ldr	r1, [r3, #52]	; 0x34
    73b6:	ldr	r0, [pc, #184]	; (7470 <_spi_dma_rxISR0()+0x11c>)
    73b8:	ldr	r1, [r1, #0]
    73ba:	ldr	r5, [r1, #0]
    73bc:	add.w	r4, r0, #44	; 0x2c
    73c0:	cmp	r5, r4
    73c2:	beq.n	7432 <_spi_dma_rxISR0()+0xde>
    73c4:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    73c6:	ldr	r4, [r0, #12]
    73c8:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    73cc:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    73ce:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    73d0:	itete	ne
    73d2:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    73d4:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    73d6:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    73d8:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    73da:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    73de:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    73e0:	str	r4, [r0, #52]	; 0x34
    73e2:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    73e4:	ldr	r3, [pc, #148]	; (747c <_spi_dma_rxISR0()+0x128>)
    73e6:	ldrb	r1, [r1, #4]
    73e8:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    73ea:	ldr	r1, [pc, #132]	; (7470 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    73ec:	cbz	r2, 73f4 <_spi_dma_rxISR0()+0xa0>
    73ee:	ldr	r2, [r1, #52]	; 0x34
    73f0:	ldrb	r2, [r2, #4]
    73f2:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    73f4:	pop	{r4, r5, r6, r7}
    73f6:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    73f8:	subs	r2, r2, r1
    73fa:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    73fc:	movs	r2, #1
    73fe:	b.n	73b4 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7400:	ldr	r0, [r3, #60]	; 0x3c
    7402:	ldr	r1, [r3, #0]
    7404:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7406:	ldr	r4, [pc, #120]	; (7480 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    7408:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    740a:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    740c:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    740e:	ldr	r5, [r5, #0]
    7410:	ldr	r6, [pc, #112]	; (7484 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7412:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7416:	movs	r7, #3
    7418:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    741a:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    741c:	strb.w	r7, [r3, #45]	; 0x2d
    7420:	bne.n	7462 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7422:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7424:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7426:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7428:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    742a:	beq.n	746a <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    742c:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    742e:	b.w	116d4 <EventResponder::triggerEventNotImmediate()>
    7432:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7434:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7438:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    743a:	orr.w	r0, r0, #2147483648	; 0x80000000
    743e:	str	r0, [r1, #52]	; 0x34
    7440:	b.n	73e2 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7442:	ldrh	r4, [r1, #30]
    7444:	ubfx	r0, r2, #0, #9
    7448:	and.w	r4, r4, #65024	; 0xfe00
    744c:	orrs	r0, r4
    744e:	strh	r0, [r1, #30]
    7450:	b.n	73a2 <_spi_dma_rxISR0()+0x4e>
    7452:	ldrh	r4, [r1, #30]
    7454:	ubfx	r0, r0, #0, #9
    7458:	and.w	r4, r4, #65024	; 0xfe00
    745c:	orrs	r0, r4
    745e:	strh	r0, [r1, #30]
    7460:	b.n	738c <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7462:	mov	r3, r5
    7464:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7466:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7468:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    746a:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    746c:	pop	{r4, r5, r6, r7}
    746e:	bx	r3
    7470:	.word	0x1fff0980
    7474:	.word	0x4000801f
    7478:	.word	0x4000801c
    747c:	.word	0x4000801b
    7480:	.word	0xff0f0000
    7484:	.word	0x0000700d

00007488 <SPIClass::begin()>:
    7488:	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    748c:	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    748e:	ldr	r4, [r3, #0]
    7490:	ldr	r1, [r3, #4]
    7492:	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7494:	ldr	r7, [pc, #88]	; (74f0 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7496:	ldr	r6, [pc, #92]	; (74f4 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7498:	orrs	r1, r5
    749a:	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    749c:	ldr	r5, [pc, #88]	; (74f8 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    749e:	ldr	r1, [pc, #92]	; (74fc <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    74a0:	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    74a2:	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    74a4:	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    74a6:	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    74a8:	ldrb	r1, [r0, #9]
    74aa:	ldr	r2, [pc, #84]	; (7500 <SPIClass::begin()+0x78>)
    74ac:	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    74ae:	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    74b0:	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    74b4:	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    74b8:	add.w	r1, r2, r4, lsl #3
    74bc:	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    74be:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    74c0:	ldrb	r1, [r0, #8]
    74c2:	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    74c4:	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    74c8:	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    74ca:	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    74cc:	add.w	r1, r2, r4, lsl #3
    74d0:	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    74d2:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    74d4:	ldrb	r1, [r0, #10]
    74d6:	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    74d8:	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    74dc:	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    74e0:	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    74e2:	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    74e6:	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    74e8:	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    74ea:	str	r1, [r3, #0]
}
    74ec:	bx	lr
    74ee:	nop
    74f0:	.word	0x001f4001
    74f4:	.word	0x38001001
    74f8:	.word	0x78001001
    74fc:	.word	0x801f0000
    7500:	.word	0x000174d0

00007504 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    7504:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7506:	ldr	r3, [pc, #148]	; (759c <SPIClass::setMOSI(unsigned char)+0x98>)
    7508:	ldr	r5, [r0, #4]
    750a:	cmp	r3, r5
    750c:	beq.n	7532 <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    750e:	ldrb	r3, [r0, #9]
    7510:	add	r3, r5
    7512:	ldrb.w	r6, [r3, #44]	; 0x2c
    7516:	cmp	r1, r6
    7518:	beq.n	752e <SPIClass::setMOSI(unsigned char)+0x2a>
    751a:	add.w	r2, r5, #43	; 0x2b
    751e:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    7520:	ldrb.w	r4, [r2, #1]!
    7524:	cmp	r4, r1
    7526:	beq.n	755e <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    7528:	adds	r3, #1
    752a:	cmp	r3, #4
    752c:	bne.n	7520 <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    752e:	pop	{r4, r5, r6, r7}
    7530:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    7532:	cmp	r1, #11
    7534:	beq.n	7590 <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    7536:	cmp	r1, #7
    7538:	beq.n	754e <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    753a:	cmp	r1, #28
    753c:	bne.n	750e <SPIClass::setMOSI(unsigned char)+0xa>
    753e:	ldr	r2, [pc, #96]	; (75a0 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7540:	ldrb	r3, [r2, #0]
    7542:	bic.w	r3, r3, #3
    7546:	orr.w	r3, r3, #2
    754a:	strb	r3, [r2, #0]
    754c:	b.n	750e <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    754e:	ldr	r2, [pc, #80]	; (75a0 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7550:	ldrb	r3, [r2, #0]
    7552:	bic.w	r3, r3, #3
    7556:	orr.w	r3, r3, #1
    755a:	strb	r3, [r2, #0]
    755c:	b.n	750e <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    755e:	ldmia.w	r5, {r1, r2}
    7562:	ldr	r1, [r1, #0]
    7564:	tst	r1, r2
    7566:	beq.n	758a <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7568:	ldr	r2, [pc, #56]	; (75a4 <SPIClass::setMOSI(unsigned char)+0xa0>)
    756a:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    756e:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7570:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7572:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    7574:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7576:	ldrb.w	r1, [r1, #44]	; 0x2c
    757a:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    757e:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7582:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    7584:	ldr.w	r2, [r5, r1, lsl #2]
    7588:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    758a:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    758c:	pop	{r4, r5, r6, r7}
    758e:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    7590:	ldr	r2, [pc, #12]	; (75a0 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7592:	ldrb	r3, [r2, #0]
    7594:	bic.w	r3, r3, #3
    7598:	strb	r3, [r2, #0]
    759a:	b.n	750e <SPIClass::setMOSI(unsigned char)+0xa>
    759c:	.word	0x00016e70
    75a0:	.word	0x1fff25d9
    75a4:	.word	0x000174d0

000075a8 <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    75a8:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    75aa:	ldr	r3, [pc, #144]	; (763c <SPIClass::setMISO(unsigned char)+0x94>)
    75ac:	ldr	r5, [r0, #4]
    75ae:	cmp	r3, r5
    75b0:	beq.n	75d4 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    75b2:	ldrb	r3, [r0, #8]
    75b4:	add	r3, r5
    75b6:	ldrb	r6, [r3, #24]
    75b8:	cmp	r1, r6
    75ba:	beq.n	75d0 <SPIClass::setMISO(unsigned char)+0x28>
    75bc:	add.w	r2, r5, #23
    75c0:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    75c2:	ldrb.w	r4, [r2, #1]!
    75c6:	cmp	r4, r1
    75c8:	beq.n	7600 <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    75ca:	adds	r3, #1
    75cc:	cmp	r3, #4
    75ce:	bne.n	75c2 <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    75d0:	pop	{r4, r5, r6, r7}
    75d2:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    75d4:	cmp	r1, #12
    75d6:	beq.n	762e <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    75d8:	cmp	r1, #8
    75da:	beq.n	75f0 <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    75dc:	cmp	r1, #39	; 0x27
    75de:	bne.n	75b2 <SPIClass::setMISO(unsigned char)+0xa>
    75e0:	ldr	r2, [pc, #92]	; (7640 <SPIClass::setMISO(unsigned char)+0x98>)
    75e2:	ldrb	r3, [r2, #0]
    75e4:	bic.w	r3, r3, #12
    75e8:	orr.w	r3, r3, #8
    75ec:	strb	r3, [r2, #0]
    75ee:	b.n	75b2 <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    75f0:	ldr	r2, [pc, #76]	; (7640 <SPIClass::setMISO(unsigned char)+0x98>)
    75f2:	ldrb	r3, [r2, #0]
    75f4:	bic.w	r3, r3, #12
    75f8:	orr.w	r3, r3, #4
    75fc:	strb	r3, [r2, #0]
    75fe:	b.n	75b2 <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7600:	ldmia.w	r5, {r1, r2}
    7604:	ldr	r1, [r1, #0]
    7606:	tst	r1, r2
    7608:	beq.n	7628 <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    760a:	ldr	r2, [pc, #56]	; (7644 <SPIClass::setMISO(unsigned char)+0x9c>)
    760c:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7610:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7612:	ldr	r4, [r6, #4]
					*reg = 0;
    7614:	movs	r7, #0
    7616:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    7618:	ldrb	r1, [r1, #24]
    761a:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    761e:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7622:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    7624:	ldr	r1, [r5, #28]
    7626:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    7628:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    762a:	pop	{r4, r5, r6, r7}
    762c:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    762e:	ldr	r2, [pc, #16]	; (7640 <SPIClass::setMISO(unsigned char)+0x98>)
    7630:	ldrb	r3, [r2, #0]
    7632:	bic.w	r3, r3, #12
    7636:	strb	r3, [r2, #0]
    7638:	b.n	75b2 <SPIClass::setMISO(unsigned char)+0xa>
    763a:	nop
    763c:	.word	0x00016e70
    7640:	.word	0x1fff25d9
    7644:	.word	0x000174d0

00007648 <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7648:	ldr	r2, [pc, #160]	; (76ec <SPIClass::setSCK(unsigned char)+0xa4>)
    764a:	ldr	r3, [r0, #4]
    764c:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    764e:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7650:	beq.n	767e <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    7652:	ldrb	r2, [r0, #10]
    7654:	add	r2, r3
    7656:	ldrb.w	r2, [r2, #64]	; 0x40
    765a:	cmp	r1, r2
    765c:	beq.n	767a <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    765e:	ldrb.w	r4, [r3, #64]	; 0x40
    7662:	cmp	r4, r1
    7664:	beq.n	76e6 <SPIClass::setSCK(unsigned char)+0x9e>
    7666:	ldrb.w	r4, [r3, #65]	; 0x41
    766a:	cmp	r4, r1
    766c:	beq.n	76aa <SPIClass::setSCK(unsigned char)+0x62>
    766e:	ldrb.w	r4, [r3, #66]	; 0x42
    7672:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7674:	it	eq
    7676:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    7678:	beq.n	76ac <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    767a:	pop	{r4, r5, r6}
    767c:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    767e:	cmp	r1, #13
    7680:	beq.n	76da <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    7682:	cmp	r1, #14
    7684:	beq.n	769a <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    7686:	cmp	r1, #27
    7688:	bne.n	7652 <SPIClass::setSCK(unsigned char)+0xa>
    768a:	ldr	r4, [pc, #100]	; (76f0 <SPIClass::setSCK(unsigned char)+0xa8>)
    768c:	ldrb	r2, [r4, #0]
    768e:	bic.w	r2, r2, #48	; 0x30
    7692:	orr.w	r2, r2, #32
    7696:	strb	r2, [r4, #0]
    7698:	b.n	7652 <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    769a:	ldr	r4, [pc, #84]	; (76f0 <SPIClass::setSCK(unsigned char)+0xa8>)
    769c:	ldrb	r2, [r4, #0]
    769e:	bic.w	r2, r2, #48	; 0x30
    76a2:	orr.w	r2, r2, #16
    76a6:	strb	r2, [r4, #0]
    76a8:	b.n	7652 <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    76aa:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    76ac:	ldr	r5, [r3, #0]
    76ae:	ldr	r4, [r3, #4]
    76b0:	ldr	r5, [r5, #0]
    76b2:	tst	r5, r4
    76b4:	beq.n	76d6 <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    76b6:	ldr	r4, [pc, #60]	; (76f4 <SPIClass::setSCK(unsigned char)+0xac>)
    76b8:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    76bc:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    76be:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    76c0:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    76c2:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    76c4:	ldrb.w	r2, [r2, #64]	; 0x40
    76c8:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    76cc:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    76d0:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    76d2:	ldr	r3, [r3, #68]	; 0x44
    76d4:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    76d6:	strb	r1, [r0, #10]
				return;
    76d8:	b.n	767a <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    76da:	ldr	r4, [pc, #20]	; (76f0 <SPIClass::setSCK(unsigned char)+0xa8>)
    76dc:	ldrb	r2, [r4, #0]
    76de:	bic.w	r2, r2, #48	; 0x30
    76e2:	strb	r2, [r4, #0]
    76e4:	b.n	7652 <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    76e6:	movs	r1, #0
    76e8:	b.n	76ac <SPIClass::setSCK(unsigned char)+0x64>
    76ea:	nop
    76ec:	.word	0x00016e70
    76f0:	.word	0x1fff25d9
    76f4:	.word	0x000174d0

000076f8 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    76f8:	cbz	r3, 76fe <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    76fa:	b.w	7028 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    76fe:	bx	lr

00007700 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7700:	ldr	r2, [pc, #400]	; (7894 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7702:	ldr	r3, [pc, #404]	; (7898 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    7704:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7708:	ldr	r6, [pc, #400]	; (789c <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    770a:	ldr.w	sl, [pc, #416]	; 78ac <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    770e:	ldr	r4, [pc, #400]	; (78a0 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7710:	ldr.w	r9, [pc, #400]	; 78a4 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7714:	umull	r5, r2, r2, r0
    7718:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    771c:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7720:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7724:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7728:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    772c:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    772e:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7730:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7734:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7738:	rsb	r6, fp, r7
    773c:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7740:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7742:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7744:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7746:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    774a:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    774e:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7752:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7756:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7758:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    775c:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7760:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7764:	adds	r6, #1
    7766:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7768:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    776a:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    776c:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    776e:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    7770:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7772:	movw	fp, #365	; 0x16d
    7776:	mov.w	r8, #100	; 0x64
    777a:	mov.w	sl, #400	; 0x190
    777e:	b.n	779e <breakTime(long, tmElements_t&)+0x9e>
    7780:	rsb	r5, r6, r5, asr #7
    7784:	mls	r5, sl, r5, r3
    7788:	cbnz	r0, 77e8 <breakTime(long, tmElements_t&)+0xe8>
    778a:	cmp	r5, #0
    778c:	ite	ne
    778e:	movne	r0, fp
    7790:	moveq.w	r0, #366	; 0x16e
    7794:	add	r2, r0
    7796:	cmp	ip, r2
    7798:	add.w	r4, r4, #1
    779c:	bcc.n	77c6 <breakTime(long, tmElements_t&)+0xc6>
    779e:	uxtb	r7, r4
    77a0:	addw	r3, r7, #1970	; 0x7b2
    77a4:	smull	r0, r5, r9, r3
    77a8:	asrs	r6, r3, #31
    77aa:	rsb	r0, r6, r5, asr #5
    77ae:	ands.w	lr, r3, #3
    77b2:	mls	r0, r8, r0, r3
    77b6:	beq.n	7780 <breakTime(long, tmElements_t&)+0x80>
    77b8:	movw	r0, #365	; 0x16d
    77bc:	add	r2, r0
    77be:	cmp	ip, r2
    77c0:	add.w	r4, r4, #1
    77c4:	bcs.n	779e <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    77c6:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    77c8:	cmp.w	lr, #0
    77cc:	bne.n	77ee <breakTime(long, tmElements_t&)+0xee>
    77ce:	ldr	r0, [pc, #212]	; (78a4 <breakTime(long, tmElements_t&)+0x1a4>)
    77d0:	asrs	r6, r3, #31
    77d2:	smull	r4, r0, r0, r3
    77d6:	rsb	r4, r6, r0, asr #5
    77da:	movs	r5, #100	; 0x64
    77dc:	mls	r4, r5, r4, r3
    77e0:	cbz	r4, 7852 <breakTime(long, tmElements_t&)+0x152>
    77e2:	mov.w	r4, #366	; 0x16e
    77e6:	b.n	77f4 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    77e8:	mov.w	r0, #366	; 0x16e
    77ec:	b.n	7794 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    77ee:	movw	r4, #365	; 0x16d
    77f2:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    77f4:	ldr	r0, [pc, #172]	; (78a4 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    77f6:	ldr	r5, [pc, #176]	; (78a8 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    77f8:	smull	r7, r0, r0, r3
    77fc:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7800:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7802:	rsb	r6, r6, r0, asr #7
    7806:	movs	r4, #100	; 0x64
    7808:	mov.w	r0, #400	; 0x190
    780c:	mls	r6, r0, r6, r3
    7810:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7814:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7818:	movs	r0, #1
    781a:	movs	r3, #0
    781c:	b.n	7824 <breakTime(long, tmElements_t&)+0x124>
    781e:	adds	r0, #1
    7820:	uxtb	r0, r0
    7822:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    7824:	cmp	r3, #1
    7826:	uxtb	r7, r3
    7828:	beq.n	786c <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    782a:	ldrb	r4, [r3, r5]
    782c:	cmp	r4, r2
    782e:	bhi.n	7844 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7830:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    7832:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7836:	bne.n	781e <breakTime(long, tmElements_t&)+0x11e>
    7838:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    783a:	adds	r2, #1
    783c:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    783e:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7840:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7844:	adds	r7, #1
    7846:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7848:	adds	r2, #1
    784a:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    784c:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    784e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7852:	mov.w	r4, #400	; 0x190
    7856:	rsb	r0, r6, r0, asr #7
    785a:	mls	r0, r4, r0, r3
    785e:	cmp	r0, #0
    7860:	movw	r4, #365	; 0x16d
    7864:	it	eq
    7866:	moveq.w	r4, #366	; 0x16e
    786a:	b.n	77f4 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    786c:	cmp.w	lr, #0
    7870:	bne.n	7888 <breakTime(long, tmElements_t&)+0x188>
    7872:	cmp.w	r8, #0
    7876:	bne.n	7890 <breakTime(long, tmElements_t&)+0x190>
    7878:	cmp	r6, #0
    787a:	ite	ne
    787c:	movne	r4, #28
    787e:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7880:	cmp	r2, r4
    7882:	bcc.n	788c <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    7884:	subs	r2, r2, r4
    7886:	b.n	781e <breakTime(long, tmElements_t&)+0x11e>
    7888:	movs	r4, #28
    788a:	b.n	7880 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    788c:	movs	r7, #2
    788e:	b.n	783a <breakTime(long, tmElements_t&)+0x13a>
    7890:	movs	r4, #29
    7892:	b.n	7880 <breakTime(long, tmElements_t&)+0x180>
    7894:	.word	0xc22e4507
    7898:	.word	0x88888889
    789c:	.word	0x91a2b3c5
    78a0:	.word	0xaaaaaaab
    78a4:	.word	0x51eb851f
    78a8:	.word	0x00016f60
    78ac:	.word	0x24924925

000078b0 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    78b0:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    78b2:	ldr	r1, [pc, #12]	; (78c0 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    78b4:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    78b6:	bl	7700 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    78ba:	ldr	r3, [pc, #8]	; (78c4 <refreshCache(long) [clone .part.0]+0x14>)
    78bc:	str	r4, [r3, #0]
    78be:	pop	{r4, pc}
    78c0:	.word	0x1fff1f74
    78c4:	.word	0x1fff1f70

000078c8 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    78c8:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78ca:	ldr	r4, [pc, #128]	; (794c <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    78cc:	ldr	r6, [pc, #128]	; (7950 <now()+0x88>)
    78ce:	ldr	r3, [r4, #0]
    78d0:	ldr	r2, [r6, #0]
    78d2:	ldr	r5, [pc, #128]	; (7954 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    78d4:	sub	sp, #12
    78d6:	ldr	r0, [r5, #0]
    78d8:	str	r3, [sp, #0]
	return ret;
    78da:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    78dc:	subs	r3, r3, r2
    78de:	cmp.w	r3, #1000	; 0x3e8
    78e2:	bcc.n	7904 <now()+0x3c>
    78e4:	adds	r0, #1
    78e6:	b.n	78ea <now()+0x22>
    78e8:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78ea:	ldr	r3, [r4, #0]
    78ec:	str	r3, [sp, #0]
	return ret;
    78ee:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    78f0:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    78f4:	subs	r3, r3, r2
    78f6:	cmp.w	r3, #1000	; 0x3e8
    78fa:	add.w	r1, r0, #1
    78fe:	bcs.n	78e8 <now()+0x20>
    7900:	str	r0, [r5, #0]
    7902:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    7904:	ldr	r7, [pc, #80]	; (7958 <now()+0x90>)
    7906:	ldr	r3, [r7, #0]
    7908:	cmp	r0, r3
    790a:	bcc.n	792c <now()+0x64>
    if (getTimePtr != 0) {
    790c:	ldr	r3, [pc, #76]	; (795c <now()+0x94>)
    790e:	ldr	r3, [r3, #0]
    7910:	cbz	r3, 792c <now()+0x64>
      time_t t = getTimePtr();
    7912:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7914:	ldr	r3, [pc, #72]	; (7960 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    7916:	cbnz	r0, 7930 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7918:	ldr	r1, [pc, #72]	; (7964 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    791a:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    791c:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    791e:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7920:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7922:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7924:	it	ne
    7926:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7928:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    792a:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    792c:	add	sp, #12
    792e:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7930:	ldr	r2, [r4, #0]
    7932:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7934:	ldr	r3, [r3, #0]
  Status = timeSet;
    7936:	ldr	r2, [pc, #44]	; (7964 <now()+0x9c>)
	return ret;
    7938:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    793a:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    793c:	add	r3, r0
  Status = timeSet;
    793e:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    7940:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7942:	str	r3, [r7, #0]
  Status = timeSet;
    7944:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    7946:	add	sp, #12
    7948:	pop	{r4, r5, r6, r7, pc}
    794a:	nop
    794c:	.word	0x1fff24b8
    7950:	.word	0x1fff1f88
    7954:	.word	0x1fff1f7c
    7958:	.word	0x1fff1f8c
    795c:	.word	0x1fff1f84
    7960:	.word	0x1fff0a00
    7964:	.word	0x1fff1f80

00007968 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    7968:	push	{r3, lr}
  return hour(now()); 
    796a:	bl	78c8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    796e:	ldr	r3, [pc, #16]	; (7980 <hour()+0x18>)
    7970:	ldr	r3, [r3, #0]
    7972:	cmp	r0, r3
    7974:	beq.n	797a <hour()+0x12>
    7976:	bl	78b0 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    797a:	ldr	r3, [pc, #8]	; (7984 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    797c:	ldrb	r0, [r3, #2]
    797e:	pop	{r3, pc}
    7980:	.word	0x1fff1f70
    7984:	.word	0x1fff1f74

00007988 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    7988:	push	{r3, lr}
  return minute(now()); 
    798a:	bl	78c8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    798e:	ldr	r3, [pc, #16]	; (79a0 <minute()+0x18>)
    7990:	ldr	r3, [r3, #0]
    7992:	cmp	r0, r3
    7994:	beq.n	799a <minute()+0x12>
    7996:	bl	78b0 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    799a:	ldr	r3, [pc, #8]	; (79a4 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    799c:	ldrb	r0, [r3, #1]
    799e:	pop	{r3, pc}
    79a0:	.word	0x1fff1f70
    79a4:	.word	0x1fff1f74

000079a8 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    79a8:	push	{r3, lr}
  return second(now()); 
    79aa:	bl	78c8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    79ae:	ldr	r3, [pc, #16]	; (79c0 <second()+0x18>)
    79b0:	ldr	r3, [r3, #0]
    79b2:	cmp	r0, r3
    79b4:	beq.n	79ba <second()+0x12>
    79b6:	bl	78b0 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    79ba:	ldr	r3, [pc, #8]	; (79c4 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    79bc:	ldrb	r0, [r3, #0]
    79be:	pop	{r3, pc}
    79c0:	.word	0x1fff1f70
    79c4:	.word	0x1fff1f74

000079c8 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    79c8:	push	{r3, lr}
  return(day(now())); 
    79ca:	bl	78c8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    79ce:	ldr	r3, [pc, #16]	; (79e0 <day()+0x18>)
    79d0:	ldr	r3, [r3, #0]
    79d2:	cmp	r0, r3
    79d4:	beq.n	79da <day()+0x12>
    79d6:	bl	78b0 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    79da:	ldr	r3, [pc, #8]	; (79e4 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    79dc:	ldrb	r0, [r3, #4]
    79de:	pop	{r3, pc}
    79e0:	.word	0x1fff1f70
    79e4:	.word	0x1fff1f74

000079e8 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    79e8:	push	{r3, lr}
  return month(now()); 
    79ea:	bl	78c8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    79ee:	ldr	r3, [pc, #16]	; (7a00 <month()+0x18>)
    79f0:	ldr	r3, [r3, #0]
    79f2:	cmp	r0, r3
    79f4:	beq.n	79fa <month()+0x12>
    79f6:	bl	78b0 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    79fa:	ldr	r3, [pc, #8]	; (7a04 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    79fc:	ldrb	r0, [r3, #5]
    79fe:	pop	{r3, pc}
    7a00:	.word	0x1fff1f70
    7a04:	.word	0x1fff1f74

00007a08 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    7a08:	push	{r3, lr}
  return year(now()); 
    7a0a:	bl	78c8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7a0e:	ldr	r3, [pc, #20]	; (7a24 <year()+0x1c>)
    7a10:	ldr	r3, [r3, #0]
    7a12:	cmp	r0, r3
    7a14:	beq.n	7a1a <year()+0x12>
    7a16:	bl	78b0 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    7a1a:	ldr	r3, [pc, #12]	; (7a28 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    7a1c:	ldrb	r0, [r3, #6]
}
    7a1e:	addw	r0, r0, #1970	; 0x7b2
    7a22:	pop	{r3, pc}
    7a24:	.word	0x1fff1f70
    7a28:	.word	0x1fff1f74

00007a2c <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    7a2c:	bx	lr
    7a2e:	nop

00007a30 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    7a30:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    7a32:	ldr	r3, [pc, #68]	; (7a78 <_GLOBAL__sub_I_SD+0x48>)
    7a34:	ldr	r5, [pc, #68]	; (7a7c <_GLOBAL__sub_I_SD+0x4c>)
    7a36:	ldr	r4, [pc, #72]	; (7a80 <_GLOBAL__sub_I_SD+0x50>)
    7a38:	str	r5, [r3, #0]
    7a3a:	str.w	r4, [r3, #1184]	; 0x4a0
    7a3e:	movs	r5, #41	; 0x29
    7a40:	movs	r4, #0
    7a42:	ldr	r0, [pc, #64]	; (7a84 <_GLOBAL__sub_I_SD+0x54>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    7a44:	ldr	r7, [pc, #64]	; (7a88 <_GLOBAL__sub_I_SD+0x58>)
    7a46:	strb.w	r5, [r3, #1203]	; 0x4b3
    7a4a:	movs	r6, #1
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    7a4c:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    7a50:	strb.w	r4, [r3, #1181]	; 0x49d
    7a54:	strb.w	r4, [r3, #1206]	; 0x4b6
    7a58:	str.w	r0, [r3, #1172]	; 0x494
    7a5c:	str.w	r7, [r3, #1192]	; 0x4a8
    7a60:	strb.w	r6, [r3, #1201]	; 0x4b1
    7a64:	str.w	r4, [r3, #1156]	; 0x484
    7a68:	str.w	r4, [r3, #1160]	; 0x488
    7a6c:	ldr	r2, [pc, #28]	; (7a8c <_GLOBAL__sub_I_SD+0x5c>)
    7a6e:	ldr	r1, [pc, #32]	; (7a90 <_GLOBAL__sub_I_SD+0x60>)
    7a70:	mov	r0, r3
    7a72:	pop	{r4, r5, r6, r7}
    7a74:	b.w	11a94 <__aeabi_atexit>
    7a78:	.word	0x1fff1f90
    7a7c:	.word	0x00016b1c
    7a80:	.word	0x000173b8
    7a84:	.word	0x00017410
    7a88:	.word	0x38011001
    7a8c:	.word	0x1fff0970
    7a90:	.word	0x00007a2d

00007a94 <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    7a94:	push	{r3, r4, r5, r6, r7, lr}
    7a96:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    7a98:	add.w	r6, r0, #16
    7a9c:	ldr	r0, [r0, #4]
    7a9e:	ldr	r1, [r4, #12]
    7aa0:	ldr	r3, [r0, #0]
    7aa2:	mov	r2, r6
    7aa4:	ldr	r3, [r3, #28]
    7aa6:	blx	r3
    7aa8:	mov	r5, r0
    7aaa:	cbz	r0, 7ad4 <FsCache::sync() [clone .part.0]+0x40>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    7aac:	ldrb	r3, [r4, #0]
    7aae:	lsls	r2, r3, #30
    7ab0:	bmi.n	7abc <FsCache::sync() [clone .part.0]+0x28>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    7ab2:	bic.w	r3, r3, #1
    7ab6:	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    7ab8:	mov	r0, r5
    7aba:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    7abc:	ldr	r0, [r4, #4]
    7abe:	ldr	r1, [r4, #12]
    7ac0:	ldr	r2, [r0, #0]
    7ac2:	ldr	r3, [r4, #8]
    7ac4:	ldr	r7, [r2, #28]
    7ac6:	add	r1, r3
    7ac8:	mov	r2, r6
    7aca:	blx	r7
    7acc:	mov	r6, r0
    7ace:	cbz	r0, 7afc <FsCache::sync() [clone .part.0]+0x68>
    7ad0:	ldrb	r3, [r4, #0]
    7ad2:	b.n	7ab2 <FsCache::sync() [clone .part.0]+0x1e>
    7ad4:	movs	r1, #10
    7ad6:	ldr	r0, [pc, #76]	; (7b24 <FsCache::sync() [clone .part.0]+0x90>)
    7ad8:	bl	fe48 <usb_serial_write>
    7adc:	movs	r1, #99	; 0x63
    7ade:	ldr	r0, [pc, #72]	; (7b28 <FsCache::sync() [clone .part.0]+0x94>)
    7ae0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7ae4:	movs	r0, #46	; 0x2e
    7ae6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7aea:	movs	r1, #57	; 0x39
    7aec:	ldr	r0, [pc, #60]	; (7b2c <FsCache::sync() [clone .part.0]+0x98>)
    7aee:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7af2:	ldr	r0, [pc, #56]	; (7b2c <FsCache::sync() [clone .part.0]+0x98>)
    7af4:	bl	11800 <Print::println()>
  }
  return true;

 fail:
  return false;
}
    7af8:	mov	r0, r5
    7afa:	pop	{r3, r4, r5, r6, r7, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7afc:	movs	r1, #10
    7afe:	ldr	r0, [pc, #36]	; (7b24 <FsCache::sync() [clone .part.0]+0x90>)
    7b00:	bl	fe48 <usb_serial_write>
    7b04:	movs	r1, #99	; 0x63
    7b06:	ldr	r0, [pc, #32]	; (7b28 <FsCache::sync() [clone .part.0]+0x94>)
    7b08:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7b0c:	movs	r0, #46	; 0x2e
    7b0e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7b12:	movs	r1, #64	; 0x40
    7b14:	ldr	r0, [pc, #20]	; (7b2c <FsCache::sync() [clone .part.0]+0x98>)
    7b16:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7b1a:	ldr	r0, [pc, #16]	; (7b2c <FsCache::sync() [clone .part.0]+0x98>)
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    7b1c:	mov	r5, r6
    7b1e:	bl	11800 <Print::println()>
    7b22:	b.n	7ab8 <FsCache::sync() [clone .part.0]+0x24>
    7b24:	.word	0x00016f6c
    7b28:	.word	0x00016f78
    7b2c:	.word	0x1fff0b00

00007b30 <FsCache::get(unsigned long, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    7b30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_blockDev) {
    7b34:	ldr	r4, [r0, #4]
    7b36:	cmp	r4, #0
    7b38:	beq.n	7bdc <FsCache::get(unsigned long, unsigned char)+0xac>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    7b3a:	ldr	r3, [r0, #12]
    7b3c:	cmp	r3, r1
    7b3e:	mov	r6, r0
    7b40:	mov	r8, r1
    7b42:	mov	r7, r2
    7b44:	beq.n	7b68 <FsCache::get(unsigned long, unsigned char)+0x38>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    7b46:	ldrb	r3, [r0, #0]
    7b48:	lsls	r2, r3, #31
    7b4a:	bmi.n	7b78 <FsCache::get(unsigned long, unsigned char)+0x48>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    7b4c:	lsls	r3, r7, #29
    7b4e:	bpl.n	7bac <FsCache::get(unsigned long, unsigned char)+0x7c>
    7b50:	add.w	r5, r6, #16
    7b54:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    7b56:	and.w	r7, r7, #3
    7b5a:	orrs	r7, r3
    7b5c:	strb	r7, [r6, #0]
    7b5e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    7b60:	str.w	r8, [r6, #12]
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
}
    7b64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b68:	ldrsb.w	r3, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    7b6c:	and.w	r7, r7, #3
    7b70:	orrs	r7, r3
    7b72:	strb	r7, [r6, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    7b74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b78:	bl	7a94 <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    7b7c:	mov	r4, r0
    7b7e:	cmp	r0, #0
    7b80:	bne.n	7b4c <FsCache::get(unsigned long, unsigned char)+0x1c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7b82:	movs	r1, #10
    7b84:	ldr	r0, [pc, #112]	; (7bf8 <FsCache::get(unsigned long, unsigned char)+0xc8>)
    7b86:	bl	fe48 <usb_serial_write>
    7b8a:	movs	r1, #99	; 0x63
    7b8c:	ldr	r0, [pc, #108]	; (7bfc <FsCache::get(unsigned long, unsigned char)+0xcc>)
    7b8e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7b92:	movs	r0, #46	; 0x2e
    7b94:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7b98:	movs	r1, #35	; 0x23
    7b9a:	ldr	r0, [pc, #100]	; (7c00 <FsCache::get(unsigned long, unsigned char)+0xd0>)
    7b9c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7ba0:	ldr	r0, [pc, #92]	; (7c00 <FsCache::get(unsigned long, unsigned char)+0xd0>)
    7ba2:	bl	11800 <Print::println()>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    7ba6:	mov	r0, r4
    7ba8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    7bac:	ldr	r0, [r6, #4]
    7bae:	ldr	r3, [r0, #0]
    7bb0:	add.w	r5, r6, #16
    7bb4:	ldr	r3, [r3, #12]
    7bb6:	mov	r2, r5
    7bb8:	mov	r1, r8
    7bba:	blx	r3
    7bbc:	mov	r4, r0
    7bbe:	cmp	r0, #0
    7bc0:	bne.n	7b54 <FsCache::get(unsigned long, unsigned char)+0x24>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7bc2:	movs	r1, #10
    7bc4:	ldr	r0, [pc, #48]	; (7bf8 <FsCache::get(unsigned long, unsigned char)+0xc8>)
    7bc6:	bl	fe48 <usb_serial_write>
    7bca:	movs	r1, #99	; 0x63
    7bcc:	ldr	r0, [pc, #44]	; (7bfc <FsCache::get(unsigned long, unsigned char)+0xcc>)
    7bce:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7bd2:	movs	r0, #46	; 0x2e
    7bd4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7bd8:	movs	r1, #40	; 0x28
    7bda:	b.n	7b9a <FsCache::get(unsigned long, unsigned char)+0x6a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7bdc:	movs	r1, #10
    7bde:	ldr	r0, [pc, #24]	; (7bf8 <FsCache::get(unsigned long, unsigned char)+0xc8>)
    7be0:	bl	fe48 <usb_serial_write>
    7be4:	movs	r1, #99	; 0x63
    7be6:	ldr	r0, [pc, #20]	; (7bfc <FsCache::get(unsigned long, unsigned char)+0xcc>)
    7be8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7bec:	movs	r0, #46	; 0x2e
    7bee:	bl	ff50 <usb_serial_putchar>
    7bf2:	movs	r1, #30
    7bf4:	b.n	7b9a <FsCache::get(unsigned long, unsigned char)+0x6a>
    7bf6:	nop
    7bf8:	.word	0x00016f6c
    7bfc:	.word	0x00016f78
    7c00:	.word	0x1fff0b00

00007c04 <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    7c04:	ldrb	r3, [r0, #0]
    7c06:	lsls	r3, r3, #31
    7c08:	bmi.n	7c0e <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    7c0a:	movs	r0, #1
    7c0c:	bx	lr
    7c0e:	b.w	7a94 <FsCache::sync() [clone .part.0]>
    7c12:	nop

00007c14 <fmtBase10(char*, unsigned short)>:
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    7c14:	cmp	r1, #9
    7c16:	bls.n	7c60 <fmtBase10(char*, unsigned short)+0x4c>
// return q + (r > 9);
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
    7c18:	push	{r4}
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm16(n, r, tmp8);
#else  // USE_STIMMER
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
    7c1a:	asrs	r2, r1, #2
    7c1c:	add.w	r2, r2, r1, lsr #1
    n = n + (n >> 4);
    7c20:	ubfx	r4, r2, #4, #16
    7c24:	add	r2, r4
    7c26:	uxth	r2, r2
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    7c28:	add.w	r2, r2, r2, lsr #8
    7c2c:	ubfx	r3, r2, #3, #13
    uint8_t r = t - (((n << 2) + n) << 1);
    7c30:	uxtb	r4, r3
    7c32:	add.w	r4, r4, r4, lsl #2
    7c36:	sub.w	r2, r1, r4, lsl #1
    7c3a:	uxtb	r2, r2
    if (r > 9) {
    7c3c:	cmp	r2, #9
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    7c3e:	uxth	r1, r3
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
      r -= 10;
    7c40:	sub.w	r3, r2, #10
    7c44:	itt	hi
    7c46:	uxtbhi	r2, r3
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
    7c48:	addhi	r1, #1
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    7c4a:	adds	r2, #48	; 0x30
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    7c4c:	cmp	r1, #9
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    7c4e:	strb.w	r2, [r0, #-1]!
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    7c52:	bhi.n	7c1a <fmtBase10(char*, unsigned short)+0x6>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  *--str = n + '0';
    7c54:	adds	r1, #48	; 0x30
    7c56:	strb.w	r1, [r0, #-1]!
  return str;
}
    7c5a:	ldr.w	r4, [sp], #4
    7c5e:	bx	lr
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  *--str = n + '0';
    7c60:	adds	r1, #48	; 0x30
    7c62:	strb.w	r1, [r0, #-1]!
  return str;
}
    7c66:	bx	lr

00007c68 <fmtBase10(char*, unsigned long)>:
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    7c68:	cmp.w	r1, #65536	; 0x10000
    7c6c:	bcc.n	7cb4 <fmtBase10(char*, unsigned long)+0x4c>
  *--str = n + '0';
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
    7c6e:	push	{r4}
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm32(n, r, tmp8);
#else  //  USE_STIMMER
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
    7c70:	lsrs	r3, r1, #2
    7c72:	add.w	r3, r3, r1, lsr #1
    n = n + (n >> 4);
    7c76:	add.w	r3, r3, r3, lsr #4
    n = n + (n >> 8);
    7c7a:	add.w	r3, r3, r3, lsr #8
    n = n + (n >> 16);
    7c7e:	add.w	r3, r3, r3, lsr #16
    n = n >> 3;
    7c82:	lsrs	r3, r3, #3
    uint8_t r = t - (((n << 2) + n) << 1);
    7c84:	uxtb	r2, r3
    7c86:	add.w	r2, r2, r2, lsl #2
    7c8a:	sub.w	r1, r1, r2, lsl #1
    7c8e:	uxtb	r2, r1
    if (r > 9) {
    7c90:	cmp	r2, #9
      n++;
      r -= 10;
    7c92:	sub.w	r4, r2, #10
    7c96:	itte	hi
    7c98:	uxtbhi	r2, r4
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
    7c9a:	addhi	r1, r3, #1
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    7c9c:	movls	r1, r3
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    7c9e:	adds	r2, #48	; 0x30
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    7ca0:	cmp.w	r1, #65536	; 0x10000
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    7ca4:	strb.w	r2, [r0, #-1]!
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    7ca8:	bcs.n	7c70 <fmtBase10(char*, unsigned long)+0x8>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  return fmtBase10(str, (uint16_t)n);
    7caa:	uxth	r1, r1
}
    7cac:	ldr.w	r4, [sp], #4
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  return fmtBase10(str, (uint16_t)n);
    7cb0:	b.w	7c14 <fmtBase10(char*, unsigned short)>
    7cb4:	uxth	r1, r1
    7cb6:	b.w	7c14 <fmtBase10(char*, unsigned short)>
    7cba:	nop

00007cbc <fsFmtDate(char*, unsigned short)>:
    *--str = '0';
  }
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
    7cbc:	push	{r3, r4, r5, lr}
  str = fsFmtField(str, date & 31, 0);
    7cbe:	and.w	r5, r1, #31
    *--str = '0';
  }
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
    7cc2:	mov	r4, r1
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    7cc4:	mov	r1, r5
    7cc6:	bl	7c14 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    7cca:	cmp	r5, #9
    7ccc:	bhi.n	7cd6 <fsFmtDate(char*, unsigned short)+0x1a>
    *--str = '0';
    7cce:	movs	r3, #48	; 0x30
    7cd0:	strb.w	r3, [r0, #-1]
    7cd4:	subs	r0, #1
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
  str = fsFmtField(str, date & 31, 0);
  date >>= 5;
    7cd6:	asrs	r4, r4, #5
  str = fsFmtField(str, date & 15, '-');
    7cd8:	and.w	r5, r4, #15
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    7cdc:	movs	r3, #45	; 0x2d
    7cde:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    7ce2:	mov	r1, r5
    7ce4:	subs	r0, #1
    7ce6:	bl	7c14 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    7cea:	cmp	r5, #9
    7cec:	bhi.n	7cf6 <fsFmtDate(char*, unsigned short)+0x3a>
    *--str = '0';
    7cee:	movs	r3, #48	; 0x30
    7cf0:	strb.w	r3, [r0, #-1]
    7cf4:	subs	r0, #1
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    7cf6:	movs	r3, #45	; 0x2d
  }
  str = fmtBase10(str, n);
    7cf8:	asrs	r1, r4, #4
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    7cfa:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    7cfe:	addw	r1, r1, #1980	; 0x7bc
    7d02:	subs	r0, #1
  str = fsFmtField(str, date & 31, 0);
  date >>= 5;
  str = fsFmtField(str, date & 15, '-');
  date >>= 4;
  return fsFmtField(str, 1980 + date, '-');
}
    7d04:	ldmia.w	sp!, {r3, r4, r5, lr}
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    7d08:	b.w	7c14 <fmtBase10(char*, unsigned short)>

00007d0c <fsFmtTime(char*, unsigned short)>:
  str = fsFmtField(str, date & 15, '-');
  date >>= 4;
  return fsFmtField(str, 1980 + date, '-');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
    7d0c:	push	{r3, r4, r5, lr}
  time >>= 5;
    7d0e:	lsrs	r4, r1, #5
  str = fsFmtField(str, time & 63, 0);
    7d10:	and.w	r5, r4, #63	; 0x3f
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    7d14:	mov	r1, r5
    7d16:	bl	7c14 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    7d1a:	cmp	r5, #9
    7d1c:	bhi.n	7d26 <fsFmtTime(char*, unsigned short)+0x1a>
    *--str = '0';
    7d1e:	movs	r3, #48	; 0x30
    7d20:	strb.w	r3, [r0, #-1]
    7d24:	subs	r0, #1
    7d26:	asrs	r4, r4, #6
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    7d28:	movs	r3, #58	; 0x3a
    7d2a:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    7d2e:	mov	r1, r4
    7d30:	subs	r0, #1
    7d32:	bl	7c14 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    7d36:	cmp	r4, #9
    7d38:	bgt.n	7d42 <fsFmtTime(char*, unsigned short)+0x36>
    *--str = '0';
    7d3a:	movs	r3, #48	; 0x30
    7d3c:	strb.w	r3, [r0, #-1]
    7d40:	subs	r0, #1
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
  time >>= 5;
  str = fsFmtField(str, time & 63, 0);
  return fsFmtField(str, time >> 6, ':');
}
    7d42:	pop	{r3, r4, r5, pc}

00007d44 <fsPrintDateTime(Print*, unsigned short, unsigned short)>:
    } while (str > buf);
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr, uint16_t date, uint16_t time) {
    7d44:	push	{r4, r5, lr}
    7d46:	mov	r4, r0
    7d48:	sub	sp, #20
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    7d4a:	cbnz	r1, 7d6a <fsPrintDateTime(Print*, unsigned short, unsigned short)+0x26>
    7d4c:	add	r1, sp, #16
    7d4e:	mov	r2, sp
    str = fsFmtTime(str, time);
    *--str = ' ';
    str = fsFmtDate(str, date);
  } else {
    do {
      *--str = ' ';
    7d50:	movs	r3, #32
    7d52:	strb.w	r3, [r1, #-1]!
    } while (str > buf);
    7d56:	cmp	r1, r2
    7d58:	bne.n	7d52 <fsPrintDateTime(Print*, unsigned short, unsigned short)+0xe>
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
    7d5a:	ldr	r3, [r4, #0]
    7d5c:	add	r2, sp, #16
    7d5e:	mov	r0, r4
    7d60:	ldr	r3, [r3, #4]
    7d62:	subs	r2, r2, r1
    7d64:	blx	r3
}
    7d66:	add	sp, #20
    7d68:	pop	{r4, r5, pc}
    7d6a:	mov	r5, r1
size_t fsPrintDateTime(print_t* pr, uint16_t date, uint16_t time) {
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    str = fsFmtTime(str, time);
    7d6c:	add	r0, sp, #16
    7d6e:	mov	r1, r2
    7d70:	bl	7d0c <fsFmtTime(char*, unsigned short)>
    *--str = ' ';
    7d74:	movs	r3, #32
    str = fsFmtDate(str, date);
    7d76:	mov	r1, r5
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    str = fsFmtTime(str, time);
    *--str = ' ';
    7d78:	strb.w	r3, [r0, #-1]
    str = fsFmtDate(str, date);
    7d7c:	subs	r0, #1
    7d7e:	bl	7cbc <fsFmtDate(char*, unsigned short)>
    7d82:	mov	r1, r0
    7d84:	b.n	7d5a <fsPrintDateTime(Print*, unsigned short, unsigned short)+0x16>
    7d86:	nop

00007d88 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    7d88:	push	{r4, r5, r6, lr}
    7d8a:	mov	r4, r0
    7d8c:	mov	r0, r1
    7d8e:	mov	r5, r1
    7d90:	bl	13580 <strlen>
    7d94:	ldr	r3, [r4, #0]
    7d96:	mov	r2, r0
    7d98:	mov	r1, r5
    7d9a:	mov	r0, r4
    7d9c:	ldr	r3, [r3, #4]
    7d9e:	ldmia.w	sp!, {r4, r5, r6, lr}
    7da2:	bx	r3

00007da4 <Print::println(int)>:
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7da4:	push	{r3, r4, r5, lr}
    7da6:	mov	r5, r0
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7da8:	bl	118cc <Print::print(long)>
    7dac:	mov	r4, r0
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7dae:	mov	r0, r5
    7db0:	bl	11800 <Print::println()>
    7db4:	add	r0, r4
    7db6:	pop	{r3, r4, r5, pc}

00007db8 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    7db8:	push	{r4, lr}
    7dba:	mov	r4, r0
  bool rtn = sync();
    7dbc:	bl	9d60 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7dc0:	movs	r3, #0
    7dc2:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    7dc6:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    7dca:	pop	{r4, pc}

00007dcc <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7dcc:	push	{r4, r5, r6, lr}
    7dce:	mov	r6, r1
    7dd0:	mov	r5, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    7dd2:	add.w	r1, r0, #36	; 0x24
    7dd6:	movs	r2, #0
    7dd8:	ldr	r0, [r0, #32]
    7dda:	bl	9248 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    7dde:	mov	r4, r0
    7de0:	cbz	r0, 7dee <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x22>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    7de2:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    7de4:	strh	r3, [r6, #0]
    7de6:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
    7de8:	strh	r3, [r5, #0]
  return true;
    7dea:	movs	r0, #1

 fail:
  return false;
}
    7dec:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7dee:	movs	r1, #10
    7df0:	ldr	r0, [pc, #36]	; (7e18 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x4c>)
    7df2:	bl	fe48 <usb_serial_write>
    7df6:	movs	r1, #103	; 0x67
    7df8:	ldr	r0, [pc, #32]	; (7e1c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x50>)
    7dfa:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7dfe:	movs	r0, #46	; 0x2e
    7e00:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7e04:	movs	r1, #128	; 0x80
    7e06:	ldr	r0, [pc, #24]	; (7e20 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x54>)
    7e08:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7e0c:	ldr	r0, [pc, #16]	; (7e20 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x54>)
    7e0e:	bl	11800 <Print::println()>
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;

 fail:
  return false;
    7e12:	mov	r0, r4
    7e14:	pop	{r4, r5, r6, pc}
    7e16:	nop
    7e18:	.word	0x00016f6c
    7e1c:	.word	0x00016fdc
    7e20:	.word	0x1fff0b00

00007e24 <ExFatFile::getName(char*, unsigned int)>:
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    7e24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    7e28:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    7e2c:	mov	r9, r0
    7e2e:	mov	r7, r1
    7e30:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    7e32:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    7e36:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    7e38:	ldrb.w	r3, [r9, #49]	; 0x31
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    7e3c:	add	r6, sp, #4
    7e3e:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    7e42:	cmp	r3, #0
    7e44:	beq.n	7ec6 <ExFatFile::getName(char*, unsigned int)+0xa2>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    7e46:	ldrb.w	r3, [r9, #48]	; 0x30
    7e4a:	cmp	r3, #1
    7e4c:	bls.n	7f40 <ExFatFile::getName(char*, unsigned int)+0x11c>
    7e4e:	mov.w	r8, #1
    7e52:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    7e54:	cmp.w	r8, #1
    7e58:	ite	ne
    7e5a:	movne	r2, #32
    7e5c:	moveq	r2, #64	; 0x40
    7e5e:	mov	r1, r6
    7e60:	ldr.w	r0, [r9, #32]
    7e64:	bl	92f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    7e68:	cmp	r0, #1
    7e6a:	bne.n	7f1a <ExFatFile::getName(char*, unsigned int)+0xf6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    7e6c:	movs	r2, #0
    7e6e:	mov	r1, r6
    7e70:	ldr.w	r0, [r9, #32]
    7e74:	bl	9248 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    7e78:	cmp	r0, #0
    7e7a:	beq.n	7ef4 <ExFatFile::getName(char*, unsigned int)+0xd0>
    7e7c:	ldrb	r3, [r0, #0]
    7e7e:	cmp	r3, #193	; 0xc1
    7e80:	bne.n	7ef4 <ExFatFile::getName(char*, unsigned int)+0xd0>
    7e82:	adds	r1, r7, r4
    7e84:	add.w	lr, r4, #15
    7e88:	b.n	7e8c <ExFatFile::getName(char*, unsigned int)+0x68>
    7e8a:	mov	r4, r2
    7e8c:	ldrh.w	r3, [r0, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
    7e90:	adds	r2, r4, #1
    7e92:	cbz	r3, 7eba <ExFatFile::getName(char*, unsigned int)+0x96>
    7e94:	cmp	r2, r5
    7e96:	bcs.n	7eba <ExFatFile::getName(char*, unsigned int)+0x96>
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    7e98:	cmp	r3, #126	; 0x7e
    7e9a:	ite	ls
    7e9c:	uxtbls	r3, r3
    7e9e:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    7ea0:	cmp	r2, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    7ea2:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    7ea6:	bne.n	7e8a <ExFatFile::getName(char*, unsigned int)+0x66>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    7ea8:	add.w	r8, r8, #1
    7eac:	ldrb.w	r3, [r9, #48]	; 0x30
    7eb0:	uxtb.w	r8, r8
    7eb4:	cmp	r3, r8
    7eb6:	mov	r4, r2
    7eb8:	bhi.n	7e54 <ExFatFile::getName(char*, unsigned int)+0x30>
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    7eba:	movs	r3, #0
  return n;
    7ebc:	mov	r0, r4
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    7ebe:	strb	r3, [r7, r4]
  return n;

 fail:
  *name = 0;
  return 0;
}
    7ec0:	add	sp, #20
    7ec2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7ec6:	movs	r1, #10
    7ec8:	ldr	r0, [pc, #120]	; (7f44 <ExFatFile::getName(char*, unsigned int)+0x120>)
    7eca:	bl	fe48 <usb_serial_write>
    7ece:	movs	r1, #103	; 0x67
    7ed0:	ldr	r0, [pc, #116]	; (7f48 <ExFatFile::getName(char*, unsigned int)+0x124>)
    7ed2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7ed6:	movs	r0, #46	; 0x2e
    7ed8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7edc:	movs	r1, #144	; 0x90
    7ede:	ldr	r0, [pc, #108]	; (7f4c <ExFatFile::getName(char*, unsigned int)+0x128>)
    7ee0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7ee4:	ldr	r0, [pc, #100]	; (7f4c <ExFatFile::getName(char*, unsigned int)+0x128>)
    7ee6:	bl	11800 <Print::println()>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    7eea:	movs	r0, #0
    7eec:	strb	r0, [r7, #0]
  return 0;
}
    7eee:	add	sp, #20
    7ef0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7ef4:	movs	r1, #10
    7ef6:	ldr	r0, [pc, #76]	; (7f44 <ExFatFile::getName(char*, unsigned int)+0x120>)
    7ef8:	bl	fe48 <usb_serial_write>
    7efc:	movs	r1, #103	; 0x67
    7efe:	ldr	r0, [pc, #72]	; (7f48 <ExFatFile::getName(char*, unsigned int)+0x124>)
    7f00:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7f04:	movs	r0, #46	; 0x2e
    7f06:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7f0a:	movs	r1, #155	; 0x9b
    7f0c:	ldr	r0, [pc, #60]	; (7f4c <ExFatFile::getName(char*, unsigned int)+0x128>)
    7f0e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7f12:	ldr	r0, [pc, #56]	; (7f4c <ExFatFile::getName(char*, unsigned int)+0x128>)
    7f14:	bl	11800 <Print::println()>
    7f18:	b.n	7eea <ExFatFile::getName(char*, unsigned int)+0xc6>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7f1a:	movs	r1, #10
    7f1c:	ldr	r0, [pc, #36]	; (7f44 <ExFatFile::getName(char*, unsigned int)+0x120>)
    7f1e:	bl	fe48 <usb_serial_write>
    7f22:	movs	r1, #103	; 0x67
    7f24:	ldr	r0, [pc, #32]	; (7f48 <ExFatFile::getName(char*, unsigned int)+0x124>)
    7f26:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7f2a:	movs	r0, #46	; 0x2e
    7f2c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7f30:	movs	r1, #149	; 0x95
    7f32:	ldr	r0, [pc, #24]	; (7f4c <ExFatFile::getName(char*, unsigned int)+0x128>)
    7f34:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7f38:	ldr	r0, [pc, #16]	; (7f4c <ExFatFile::getName(char*, unsigned int)+0x128>)
    7f3a:	bl	11800 <Print::println()>
    7f3e:	b.n	7eea <ExFatFile::getName(char*, unsigned int)+0xc6>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    7f40:	movs	r4, #0
    7f42:	b.n	7eba <ExFatFile::getName(char*, unsigned int)+0x96>
    7f44:	.word	0x00016f6c
    7f48:	.word	0x00016fdc
    7f4c:	.word	0x1fff0b00

00007f50 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    7f50:	push	{r3, r4, r5, lr}
    7f52:	mov	r5, r1
  if (isOpen()) {
    7f54:	ldrb.w	r1, [r0, #49]	; 0x31
    7f58:	cbnz	r1, 7f72 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    7f5a:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    7f5c:	movs	r2, #56	; 0x38
    7f5e:	bl	12f4c <memset>
  m_attributes = FILE_ATTR_ROOT;
    7f62:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    7f64:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    7f66:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    7f6a:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    7f6e:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    7f70:	pop	{r3, r4, r5, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7f72:	movs	r1, #10
    7f74:	ldr	r0, [pc, #36]	; (7f9c <ExFatFile::openRoot(ExFatVolume*)+0x4c>)
    7f76:	bl	fe48 <usb_serial_write>
    7f7a:	movs	r1, #103	; 0x67
    7f7c:	ldr	r0, [pc, #32]	; (7fa0 <ExFatFile::openRoot(ExFatVolume*)+0x50>)
    7f7e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7f82:	movs	r0, #46	; 0x2e
    7f84:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7f88:	movw	r1, #522	; 0x20a
    7f8c:	ldr	r0, [pc, #20]	; (7fa4 <ExFatFile::openRoot(ExFatVolume*)+0x54>)
    7f8e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7f92:	ldr	r0, [pc, #16]	; (7fa4 <ExFatFile::openRoot(ExFatVolume*)+0x54>)
    7f94:	bl	11800 <Print::println()>
    7f98:	movs	r0, #0
    7f9a:	pop	{r3, r4, r5, pc}
    7f9c:	.word	0x00016f6c
    7fa0:	.word	0x00016fdc
    7fa4:	.word	0x1fff0b00

00007fa8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    7fa8:	push	{r3, r4, r5, r6, r7, lr}
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    7faa:	mov	r0, r1
    7fac:	mov	r5, r1
    7fae:	mov	r7, r3
    7fb0:	mov	r6, r2
    7fb2:	bl	13580 <strlen>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7fb6:	mov	r1, r0
    7fb8:	mov	r0, r5
    7fba:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    7fbe:	ldr	r0, [pc, #288]	; (80e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x138>)
    7fc0:	bl	11800 <Print::println()>
  ExChar_t c;
  int end;
  int len = 0;
Serial.println((char*) path);
  // Skip leading spaces.
  while (*path == ' ') {
    7fc4:	ldrb	r3, [r5, #0]
    7fc6:	cmp	r3, #32
    7fc8:	bne.n	7fd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    7fca:	ldrb.w	r3, [r5, #1]!
    7fce:	cmp	r3, #32
    7fd0:	beq.n	7fca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x22>
    path++;
  }
  fname->lfn = path;
    7fd2:	str	r5, [r6, #4]

  for (len = 0; ; len++) {
    c = path[len];
    7fd4:	ldrb	r4, [r5, #0]
    if (c == 0 || isDirSeparator(c)) {
    7fd6:	cmp	r4, #0
    7fd8:	beq.n	80da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x132>
    7fda:	cmp	r4, #47	; 0x2f
    7fdc:	beq.n	806e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc6>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7fde:	cmp	r4, #92	; 0x5c
    7fe0:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    7fe2:	cmp	r4, #34	; 0x22
    7fe4:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    7fe6:	cmp	r4, #42	; 0x2a
    7fe8:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    7fea:	cmp	r4, #58	; 0x3a
    7fec:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    7fee:	cmp	r4, #60	; 0x3c
    7ff0:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    7ff2:	cmp	r4, #62	; 0x3e
    7ff4:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    7ff6:	cmp	r4, #63	; 0x3f
    7ff8:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    7ffa:	adds	r0, r5, #1
    7ffc:	movs	r1, #0
    7ffe:	b.n	8018 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8000:	cmp	r4, #34	; 0x22
    8002:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    8004:	cmp	r4, #42	; 0x2a
    8006:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    8008:	cmp	r4, #58	; 0x3a
    800a:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    800c:	cmp	r4, #60	; 0x3c
    800e:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    8010:	cmp	r4, #62	; 0x3e
    8012:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    8014:	cmp	r4, #63	; 0x3f
    8016:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    8018:	cmp	r4, #124	; 0x7c
    801a:	beq.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
      break;
    }
    if (!lfnLegalChar(c)) {
    801c:	sub.w	r3, r4, #32
    8020:	cmp	r3, #94	; 0x5e
    8022:	bhi.n	8038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8024:	mov	r3, r0
    8026:	ldrb.w	r4, [r0], #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    802a:	adds	r1, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    802c:	cmp	r4, #0
    802e:	beq.n	80a6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xfe>
    8030:	cmp	r4, #47	; 0x2f
    8032:	beq.n	8070 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc8>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8034:	cmp	r4, #92	; 0x5c
    8036:	bne.n	8000 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
    8038:	movs	r1, #10
    803a:	ldr	r0, [pc, #168]	; (80e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x13c>)
    803c:	bl	fe48 <usb_serial_write>
    8040:	movs	r1, #103	; 0x67
    8042:	ldr	r0, [pc, #164]	; (80e8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x140>)
    8044:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8048:	movs	r0, #46	; 0x2e
    804a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    804e:	movw	r1, #553	; 0x229
    8052:	ldr	r0, [pc, #140]	; (80e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x138>)
    8054:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8058:	ldr	r0, [pc, #132]	; (80e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x138>)
    805a:	bl	11800 <Print::println()>
    805e:	mov	r0, r4
    8060:	bl	ff50 <usb_serial_putchar>

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
    8064:	ldr	r0, [pc, #120]	; (80e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x138>)
    8066:	bl	11800 <Print::println()>
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO 
      Serial.println(c);
      return false;
    806a:	movs	r0, #0
    806c:	pop	{r3, r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    806e:	movs	r1, #0
    8070:	adds	r2, r5, r1
    8072:	mov	r3, r2
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    8074:	mov	r4, r1
    8076:	movs	r0, #47	; 0x2f
    8078:	b.n	8080 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd8>
    807a:	ldrb.w	r0, [r3, #1]!
      Serial.println(c);
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    807e:	adds	r4, #1
    8080:	cmp	r0, #32
    8082:	beq.n	807a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd2>
    8084:	cmp	r0, #47	; 0x2f
    8086:	beq.n	807a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd2>
  *ptr = &path[end];
    8088:	add	r5, r4
    808a:	str	r5, [r7, #0]

  // Back over spaces and dots.
  while (len) {
    808c:	cbz	r1, 809e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf6>
    c = path[len - 1];
    808e:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    8092:	cmp	r3, #46	; 0x2e
    8094:	beq.n	809a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf2>
    8096:	cmp	r3, #32
    8098:	bne.n	80ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x104>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    809a:	subs	r1, #1
    809c:	bne.n	808e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe6>
    c = path[len - 1];
    809e:	mov	r4, r1
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    DBG_FAIL_MACRO 
    return false;
  }
  fname->len = len;
    80a0:	str	r4, [r6, #0]
  return true;
    80a2:	movs	r0, #1
    80a4:	pop	{r3, r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    80a6:	str	r3, [r7, #0]
    80a8:	adds	r2, r5, r1
    80aa:	b.n	808e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe6>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    80ac:	cmp	r1, #255	; 0xff
    80ae:	ble.n	809e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf6>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    80b0:	movs	r1, #10
    80b2:	ldr	r0, [pc, #48]	; (80e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x13c>)
    80b4:	bl	fe48 <usb_serial_write>
    80b8:	movs	r1, #103	; 0x67
    80ba:	ldr	r0, [pc, #44]	; (80e8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x140>)
    80bc:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    80c0:	movs	r0, #46	; 0x2e
    80c2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    80c6:	mov.w	r1, #572	; 0x23c
    80ca:	ldr	r0, [pc, #20]	; (80e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x138>)
    80cc:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    80d0:	ldr	r0, [pc, #12]	; (80e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x138>)
    80d2:	bl	11800 <Print::println()>
    DBG_FAIL_MACRO 
    return false;
    80d6:	movs	r0, #0
    80d8:	pop	{r3, r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    80da:	str	r5, [r7, #0]
    80dc:	b.n	80a0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>
    80de:	nop
    80e0:	.word	0x1fff0b00
    80e4:	.word	0x00016f6c
    80e8:	.word	0x00016fdc

000080ec <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    80ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80f0:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    80f4:	lsls	r6, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    80f6:	sub	sp, #12
    80f8:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    80fa:	bpl.w	835c <ExFatFile::read(void*, unsigned int)+0x270>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    80fe:	lsls	r5, r3, #25
    8100:	mov	r8, r1
    8102:	mov	r9, r2
    8104:	bpl.w	82a0 <ExFatFile::read(void*, unsigned int)+0x1b4>
    if ((m_curPosition + count) > m_validLength) {
    8108:	ldrd	r0, r1, [r4]
    810c:	ldrd	r2, r3, [r4, #16]
    8110:	adds.w	r6, r0, r9
    8114:	adc.w	r7, r1, #0
    8118:	cmp	r3, r7
    811a:	it	eq
    811c:	cmpeq	r2, r6
    811e:	bcc.w	82ac <ExFatFile::read(void*, unsigned int)+0x1c0>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    8122:	cmp.w	r9, #0
    8126:	beq.w	8234 <ExFatFile::read(void*, unsigned int)+0x148>
    812a:	mov	fp, r4
    812c:	ldrd	r0, r1, [fp], #24
    8130:	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    8132:	ldr	r2, [r4, #32]
    8134:	ldr.w	r7, [r2, #1080]	; 0x438
    8138:	ands	r7, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    813a:	ubfx	r6, r7, #0, #9
    if (clusterOffset == 0) {
    813e:	cmp	r7, #0
    8140:	bne.n	8240 <ExFatFile::read(void*, unsigned int)+0x154>
      if (m_curPosition == 0) {
    8142:	orrs.w	r3, r0, r1
    8146:	bne.w	8260 <ExFatFile::read(void*, unsigned int)+0x174>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    814a:	ldrb.w	r3, [r4, #49]	; 0x31
    814e:	lsls	r1, r3, #25
    8150:	ite	mi
    8152:	ldrmi.w	r1, [r2, #1076]	; 0x434
    8156:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    8158:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    815a:	ldrb.w	lr, [r2, #1093]	; 0x445
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    815e:	ldr.w	r3, [r2, #1068]	; 0x42c
    8162:	subs	r1, #2
    8164:	lsrs	r7, r7, #9
    8166:	lsl.w	r0, r1, lr
    816a:	adds	r1, r7, r3
    816c:	add	r1, r0
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    816e:	cmp	r6, #0
    8170:	bne.n	81f6 <ExFatFile::read(void*, unsigned int)+0x10a>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    8172:	cmp.w	r5, #512	; 0x200
    8176:	bcc.n	81f6 <ExFatFile::read(void*, unsigned int)+0x10a>
    8178:	ldr.w	r3, [r2, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    817c:	cmp	r1, r3
    817e:	beq.n	81f6 <ExFatFile::read(void*, unsigned int)+0x10a>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    8180:	cmp.w	r5, #1024	; 0x400
    8184:	bcc.n	826e <ExFatFile::read(void*, unsigned int)+0x182>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    8186:	mov.w	sl, #1
    818a:	lsl.w	lr, sl, lr
    818e:	rsb	r7, r7, lr
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    8192:	mov.w	sl, r5, lsr #9
    8196:	cmp	r7, sl
    8198:	it	cs
    819a:	movcs	r7, sl
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    819c:	cmp	r1, r3
    819e:	bhi.n	8244 <ExFatFile::read(void*, unsigned int)+0x158>
    81a0:	adds	r0, r7, r1
    81a2:	cmp	r3, r0
    81a4:	bcs.n	8244 <ExFatFile::read(void*, unsigned int)+0x158>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    81a6:	add.w	r0, r2, #528	; 0x210
    81aa:	str	r1, [sp, #4]
    81ac:	str	r2, [sp, #0]
    81ae:	bl	7c04 <FsCache::sync()>
    81b2:	ldr	r2, [sp, #0]
    81b4:	ldr	r1, [sp, #4]
    81b6:	cmp	r0, #0
    81b8:	bne.n	8244 <ExFatFile::read(void*, unsigned int)+0x158>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    81ba:	movs	r1, #10
    81bc:	ldr	r0, [pc, #452]	; (8384 <ExFatFile::read(void*, unsigned int)+0x298>)
    81be:	bl	fe48 <usb_serial_write>
    81c2:	movs	r1, #103	; 0x67
    81c4:	ldr	r0, [pc, #448]	; (8388 <ExFatFile::read(void*, unsigned int)+0x29c>)
    81c6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    81ca:	movs	r0, #46	; 0x2e
    81cc:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    81d0:	movw	r1, #659	; 0x293
    81d4:	ldr	r0, [pc, #436]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    81d6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    81da:	ldr	r0, [pc, #432]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    81dc:	bl	11800 <Print::println()>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    81e0:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    81e4:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    81e8:	orr.w	r3, r3, #2
    81ec:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    81f0:	add	sp, #12
    81f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    81f6:	add.w	r0, r2, #528	; 0x210
    81fa:	movs	r2, #0
    81fc:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    8200:	cmp	r0, #0
    8202:	beq.n	82b2 <ExFatFile::read(void*, unsigned int)+0x1c6>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    8204:	rsb	sl, r6, #512	; 0x200
    8208:	cmp	sl, r5
    820a:	it	cs
    820c:	movcs	sl, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    820e:	adds	r1, r0, r6
    8210:	mov	r2, sl
    8212:	mov	r0, r8
    8214:	bl	fc48 <memcpy>
    8218:	mov	r2, sl
    821a:	movs	r3, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    821c:	ldrd	r6, r7, [r4]
    8220:	adds	r0, r2, r6
    8222:	adc.w	r1, r3, r7
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    8226:	subs.w	r5, r5, sl
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    822a:	add	r8, sl
    m_curPosition += n;
    822c:	strd	r0, r1, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    8230:	bne.w	8132 <ExFatFile::read(void*, unsigned int)+0x46>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    8234:	movs	r5, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    8236:	rsb	r0, r5, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    823a:	add	sp, #12
    823c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8240:	ldr	r1, [r4, #24]
    8242:	b.n	815a <ExFatFile::read(void*, unsigned int)+0x6e>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    8244:	ldr.w	r0, [r2, #532]	; 0x214
    8248:	ldr	r3, [r0, #0]
    824a:	mov	r2, r8
    824c:	ldr	r6, [r3, #16]
    824e:	mov	r3, r7
    8250:	blx	r6
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    8252:	cmp	r0, #0
    8254:	beq.n	81ba <ExFatFile::read(void*, unsigned int)+0xce>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    8256:	mov.w	sl, r7, lsl #9
    825a:	mov	r2, sl
    825c:	movs	r3, #0
    825e:	b.n	821c <ExFatFile::read(void*, unsigned int)+0x130>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    8260:	ldrb.w	r3, [r4, #51]	; 0x33
    8264:	lsls	r3, r3, #25
    8266:	bpl.n	8288 <ExFatFile::read(void*, unsigned int)+0x19c>
        m_curCluster++;
    8268:	ldr	r1, [r4, #24]
    826a:	adds	r1, #1
    826c:	b.n	8158 <ExFatFile::read(void*, unsigned int)+0x6c>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    826e:	ldr.w	r0, [r2, #532]	; 0x214
    8272:	ldr	r3, [r0, #0]
    8274:	mov	r2, r8
    8276:	ldr	r3, [r3, #12]
    8278:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    827a:	cbz	r0, 82da <ExFatFile::read(void*, unsigned int)+0x1ee>
    827c:	mov.w	r2, #512	; 0x200
    8280:	movs	r3, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    8282:	mov.w	sl, #512	; 0x200
    8286:	b.n	821c <ExFatFile::read(void*, unsigned int)+0x130>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8288:	mov	r0, r2
    828a:	ldr	r1, [r4, #24]
    828c:	mov	r2, fp
    828e:	bl	927c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    8292:	sxtb	r0, r0
        if (fg < 0) {
    8294:	cmp	r0, #0
    8296:	blt.n	8302 <ExFatFile::read(void*, unsigned int)+0x216>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    8298:	beq.n	832a <ExFatFile::read(void*, unsigned int)+0x23e>
    829a:	ldr	r2, [r4, #32]
    829c:	ldr	r1, [r4, #24]
    829e:	b.n	815a <ExFatFile::read(void*, unsigned int)+0x6e>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    82a0:	ldrb.w	r3, [r0, #49]	; 0x31
    82a4:	lsls	r0, r3, #28
    82a6:	bmi.w	8108 <ExFatFile::read(void*, unsigned int)+0x1c>
    82aa:	b.n	8122 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    82ac:	rsb	r9, r0, r2
    82b0:	b.n	8122 <ExFatFile::read(void*, unsigned int)+0x36>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    82b2:	movs	r1, #10
    82b4:	ldr	r0, [pc, #204]	; (8384 <ExFatFile::read(void*, unsigned int)+0x298>)
    82b6:	bl	fe48 <usb_serial_write>
    82ba:	movs	r1, #103	; 0x67
    82bc:	ldr	r0, [pc, #200]	; (8388 <ExFatFile::read(void*, unsigned int)+0x29c>)
    82be:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    82c2:	movs	r0, #46	; 0x2e
    82c4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    82c8:	movw	r1, #643	; 0x283
    82cc:	ldr	r0, [pc, #188]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    82ce:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    82d2:	ldr	r0, [pc, #184]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    82d4:	bl	11800 <Print::println()>
    82d8:	b.n	81e0 <ExFatFile::read(void*, unsigned int)+0xf4>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    82da:	movs	r1, #10
    82dc:	ldr	r0, [pc, #164]	; (8384 <ExFatFile::read(void*, unsigned int)+0x298>)
    82de:	bl	fe48 <usb_serial_write>
    82e2:	movs	r1, #103	; 0x67
    82e4:	ldr	r0, [pc, #160]	; (8388 <ExFatFile::read(void*, unsigned int)+0x29c>)
    82e6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    82ea:	movs	r0, #46	; 0x2e
    82ec:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    82f0:	movw	r1, #667	; 0x29b
    82f4:	ldr	r0, [pc, #148]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    82f6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    82fa:	ldr	r0, [pc, #144]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    82fc:	bl	11800 <Print::println()>
    8300:	b.n	81e0 <ExFatFile::read(void*, unsigned int)+0xf4>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8302:	movs	r1, #10
    8304:	ldr	r0, [pc, #124]	; (8384 <ExFatFile::read(void*, unsigned int)+0x298>)
    8306:	bl	fe48 <usb_serial_write>
    830a:	movs	r1, #103	; 0x67
    830c:	ldr	r0, [pc, #120]	; (8388 <ExFatFile::read(void*, unsigned int)+0x29c>)
    830e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8312:	movs	r0, #46	; 0x2e
    8314:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8318:	movw	r1, #619	; 0x26b
    831c:	ldr	r0, [pc, #108]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    831e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8322:	ldr	r0, [pc, #104]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    8324:	bl	11800 <Print::println()>
    8328:	b.n	81e0 <ExFatFile::read(void*, unsigned int)+0xf4>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    832a:	ldrb.w	r3, [r4, #49]	; 0x31
    832e:	tst.w	r3, #80	; 0x50
    8332:	bne.n	8236 <ExFatFile::read(void*, unsigned int)+0x14a>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    8334:	ldr	r1, [pc, #76]	; (8384 <ExFatFile::read(void*, unsigned int)+0x298>)
    8336:	ldr	r0, [pc, #84]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    8338:	bl	7d88 <Print::write(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    833c:	ldr	r1, [pc, #72]	; (8388 <ExFatFile::read(void*, unsigned int)+0x29c>)
    833e:	ldr	r0, [pc, #76]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    8340:	bl	7d88 <Print::write(char const*)>
    8344:	movs	r0, #46	; 0x2e
    8346:	bl	ff50 <usb_serial_putchar>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    834a:	movw	r1, #627	; 0x273
    834e:	ldr	r0, [pc, #60]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    8350:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8354:	ldr	r0, [pc, #52]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    8356:	bl	11800 <Print::println()>
    835a:	b.n	81e0 <ExFatFile::read(void*, unsigned int)+0xf4>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    835c:	movs	r1, #10
    835e:	ldr	r0, [pc, #36]	; (8384 <ExFatFile::read(void*, unsigned int)+0x298>)
    8360:	bl	fe48 <usb_serial_write>
    8364:	movs	r1, #103	; 0x67
    8366:	ldr	r0, [pc, #32]	; (8388 <ExFatFile::read(void*, unsigned int)+0x29c>)
    8368:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    836c:	movs	r0, #46	; 0x2e
    836e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8372:	movw	r1, #599	; 0x257
    8376:	ldr	r0, [pc, #20]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    8378:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    837c:	ldr	r0, [pc, #12]	; (838c <ExFatFile::read(void*, unsigned int)+0x2a0>)
    837e:	bl	11800 <Print::println()>
    8382:	b.n	81e0 <ExFatFile::read(void*, unsigned int)+0xf4>
    8384:	.word	0x00016f6c
    8388:	.word	0x00016fdc
    838c:	.word	0x1fff0b00

00008390 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    8390:	push	{r4, r5, r6, r7, lr}
    8392:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8394:	movs	r2, #1
    8396:	add.w	r1, sp, #7
    839a:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    839c:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    83a0:	ldr	r5, [r0, #24]
    83a2:	bl	80ec <ExFatFile::read(void*, unsigned int)>
    83a6:	cmp	r0, #1
    83a8:	it	eq
    83aa:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    83ae:	str	r5, [r4, #24]
    83b0:	it	ne
    83b2:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    83b6:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    83ba:	add	sp, #12
    83bc:	pop	{r4, r5, r6, r7, pc}
    83be:	nop

000083c0 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    83c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83c4:	ldrb.w	ip, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    83c8:	ldr	r5, [r0, #24]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    83ca:	sub	sp, #12
    83cc:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    83ce:	cmp.w	ip, #0
    83d2:	beq.n	84ca <ExFatFile::seekSet(unsigned long long)+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    83d4:	ldrd	r0, r1, [r0]
    83d8:	cmp	r1, r3
    83da:	it	eq
    83dc:	cmpeq	r0, r2
    83de:	mov	r6, r2
    83e0:	mov	r7, r3
    83e2:	beq.w	8502 <ExFatFile::seekSet(unsigned long long)+0x142>
    return true;
  }
  if (pos == 0) {
    83e6:	orrs.w	r3, r6, r7
    83ea:	bne.n	83fc <ExFatFile::seekSet(unsigned long long)+0x3c>
    // set position to start of file
    m_curCluster = 0;
    83ec:	movs	r3, #0
    83ee:	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    83f0:	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    83f2:	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    83f6:	add	sp, #12
    83f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    83fc:	tst.w	ip, #8
    8400:	beq.n	840e <ExFatFile::seekSet(unsigned long long)+0x4e>
    if (pos > m_validLength) {
    8402:	ldrd	r2, r3, [r4, #16]
    8406:	cmp	r3, r7
    8408:	it	eq
    840a:	cmpeq	r2, r6
    840c:	bcc.n	850a <ExFatFile::seekSet(unsigned long long)+0x14a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    840e:	ldr	r3, [r4, #32]
    8410:	str	r3, [sp, #4]
    8412:	ldrb.w	lr, [r3, #1093]	; 0x445
  if (isContiguous()) {
    8416:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    841a:	add.w	lr, lr, #9
    841e:	uxtb.w	lr, lr
    8422:	adds.w	r2, r6, #4294967295
    8426:	adc.w	r3, r7, #4294967295
    842a:	rsb	r8, lr, #32
    842e:	lsl.w	fp, r3, r8
    8432:	lsr.w	r2, r2, lr
    8436:	orr.w	r2, r2, fp
    843a:	sub.w	fp, lr, #32
    843e:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    8442:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    8446:	orr.w	r2, r2, r3
  if (isContiguous()) {
    844a:	bne.n	84fa <ExFatFile::seekSet(unsigned long long)+0x13a>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    844c:	adds.w	r9, r0, #4294967295
    8450:	adc.w	sl, r1, #4294967295
    8454:	lsr.w	lr, r9, lr
    8458:	lsl.w	r8, sl, r8
    845c:	orr.w	lr, lr, r8
    8460:	lsr.w	fp, sl, fp
    8464:	orr.w	lr, lr, fp
  if (nNew < nCur || m_curPosition == 0) {
    8468:	cmp	r2, lr
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    846a:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    846c:	bcc.n	8474 <ExFatFile::seekSet(unsigned long long)+0xb4>
    846e:	orrs.w	r3, r0, r1
    8472:	bne.n	8532 <ExFatFile::seekSet(unsigned long long)+0x172>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    8474:	tst.w	ip, #64	; 0x40
    8478:	itet	ne
    847a:	ldrne	r3, [sp, #4]
    847c:	ldreq	r3, [r4, #28]
    847e:	ldrne.w	r3, [r3, #1076]	; 0x434
    8482:	str	r3, [r4, #24]
    8484:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    8486:	add.w	r9, r4, #24
    848a:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    848c:	cmp.w	r8, #0
    8490:	beq.n	83f0 <ExFatFile::seekSet(unsigned long long)+0x30>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    8492:	ldr	r1, [r4, #24]
    8494:	ldr	r0, [r4, #32]
    8496:	bl	927c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    849a:	add.w	r8, r8, #4294967295
    849e:	cmp	r0, #0
    84a0:	bne.n	848a <ExFatFile::seekSet(unsigned long long)+0xca>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    84a2:	movs	r1, #10
    84a4:	ldr	r0, [pc, #144]	; (8538 <ExFatFile::seekSet(unsigned long long)+0x178>)
    84a6:	bl	fe48 <usb_serial_write>
    84aa:	movs	r1, #103	; 0x67
    84ac:	ldr	r0, [pc, #140]	; (853c <ExFatFile::seekSet(unsigned long long)+0x17c>)
    84ae:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    84b2:	movs	r0, #46	; 0x2e
    84b4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    84b8:	movw	r1, #735	; 0x2df
    84bc:	ldr	r0, [pc, #128]	; (8540 <ExFatFile::seekSet(unsigned long long)+0x180>)
    84be:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    84c2:	ldr	r0, [pc, #124]	; (8540 <ExFatFile::seekSet(unsigned long long)+0x180>)
    84c4:	bl	11800 <Print::println()>
    84c8:	b.n	84f0 <ExFatFile::seekSet(unsigned long long)+0x130>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    84ca:	movs	r1, #10
    84cc:	ldr	r0, [pc, #104]	; (8538 <ExFatFile::seekSet(unsigned long long)+0x178>)
    84ce:	bl	fe48 <usb_serial_write>
    84d2:	movs	r1, #103	; 0x67
    84d4:	ldr	r0, [pc, #100]	; (853c <ExFatFile::seekSet(unsigned long long)+0x17c>)
    84d6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    84da:	movs	r0, #46	; 0x2e
    84dc:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    84e0:	mov.w	r1, #700	; 0x2bc
    84e4:	ldr	r0, [pc, #88]	; (8540 <ExFatFile::seekSet(unsigned long long)+0x180>)
    84e6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    84ea:	ldr	r0, [pc, #84]	; (8540 <ExFatFile::seekSet(unsigned long long)+0x180>)
    84ec:	bl	11800 <Print::println()>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    84f0:	movs	r0, #0
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    84f2:	str	r5, [r4, #24]
  return false;
}
    84f4:	add	sp, #12
    84f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    84fa:	ldr	r3, [r4, #28]
    84fc:	add	r2, r3
    84fe:	str	r2, [r4, #24]
    goto done;
    8500:	b.n	83f0 <ExFatFile::seekSet(unsigned long long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    8502:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    8504:	add	sp, #12
    8506:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    850a:	movs	r1, #10
    850c:	ldr	r0, [pc, #40]	; (8538 <ExFatFile::seekSet(unsigned long long)+0x178>)
    850e:	bl	fe48 <usb_serial_write>
    8512:	movs	r1, #103	; 0x67
    8514:	ldr	r0, [pc, #36]	; (853c <ExFatFile::seekSet(unsigned long long)+0x17c>)
    8516:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    851a:	movs	r0, #46	; 0x2e
    851c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8520:	movw	r1, #714	; 0x2ca
    8524:	ldr	r0, [pc, #24]	; (8540 <ExFatFile::seekSet(unsigned long long)+0x180>)
    8526:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    852a:	ldr	r0, [pc, #20]	; (8540 <ExFatFile::seekSet(unsigned long long)+0x180>)
    852c:	bl	11800 <Print::println()>
    8530:	b.n	84f0 <ExFatFile::seekSet(unsigned long long)+0x130>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    8532:	rsb	r2, lr, r2
    8536:	b.n	8484 <ExFatFile::seekSet(unsigned long long)+0xc4>
    8538:	.word	0x00016f6c
    853c:	.word	0x00016fdc
    8540:	.word	0x1fff0b00

00008544 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    8544:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8548:	mov	r5, r1
    854a:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    854c:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    8550:	str	r2, [sp, #0]
    8552:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    8554:	cbnz	r1, 8562 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8556:	mov	fp, r3
    8558:	ldrb.w	r3, [r5, #49]	; 0x31
    855c:	tst.w	r3, #80	; 0x50
    8560:	bne.n	8598 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8562:	movs	r1, #10
    8564:	ldr	r0, [pc, #744]	; (8850 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30c>)
    8566:	bl	fe48 <usb_serial_write>
    856a:	movs	r1, #103	; 0x67
    856c:	ldr	r0, [pc, #740]	; (8854 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>)
    856e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8572:	movs	r0, #46	; 0x2e
    8574:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8578:	mov.w	r1, #274	; 0x112
    857c:	ldr	r0, [pc, #728]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    857e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8582:	ldr	r0, [pc, #724]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    8584:	bl	11800 <Print::println()>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    8588:	movs	r0, #0
    858a:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
    858e:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
    8592:	add	sp, #76	; 0x4c
    8594:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    8598:	ldr	r3, [sp, #112]	; 0x70
    859a:	and.w	r3, r3, #3
    859e:	cmp	r3, #1
    85a0:	beq.w	881e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2da>
    85a4:	cmp	r3, #2
    85a6:	beq.n	85d6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x92>
    85a8:	cmp	r3, #0
    85aa:	beq.w	881a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2d6>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    85ae:	movs	r1, #10
    85b0:	ldr	r0, [pc, #668]	; (8850 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30c>)
    85b2:	bl	fe48 <usb_serial_write>
    85b6:	movs	r1, #103	; 0x67
    85b8:	ldr	r0, [pc, #664]	; (8854 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>)
    85ba:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    85be:	movs	r0, #46	; 0x2e
    85c0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    85c4:	mov.w	r1, #288	; 0x120
    85c8:	ldr	r0, [pc, #652]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    85ca:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    85ce:	ldr	r0, [pc, #648]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    85d0:	bl	11800 <Print::println()>
    85d4:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
    85d6:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    85d8:	ldr	r2, [sp, #112]	; 0x70
    85da:	and.w	r2, r2, #8
    85de:	orrs	r3, r2
    85e0:	str	r3, [sp, #4]
  if (name) {
    85e2:	ldr	r3, [sp, #0]
    85e4:	cmp	r3, #0
    85e6:	beq.w	884a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x306>
    nameHash = exFatHashName(name, nameLength, 0);
    85ea:	movs	r2, #0
    85ec:	mov	r0, r3
    85ee:	mov	r1, fp
    85f0:	bl	9730 <exFatHashName(char const*, unsigned int, unsigned short)>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    85f4:	movs	r2, #0
    85f6:	str	r0, [sp, #8]
    85f8:	movs	r3, #0
    85fa:	mov	r0, r5
    85fc:	bl	83c0 <ExFatFile::seekSet(unsigned long long)>
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    8600:	ldr	r2, [pc, #600]	; (885c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x318>)
    8602:	add.w	r3, fp, #14
    8606:	smull	r1, r2, r2, r3
    860a:	add	r2, r3
    860c:	asrs	r3, r3, #31
    860e:	rsb	r3, r3, r2, asr #3
    8612:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    8614:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    8618:	add.w	sl, r3, #2
    861c:	str	r3, [sp, #12]
    861e:	uxtb.w	sl, sl

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    8622:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    8624:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    8626:	movs	r2, #32
    8628:	add	r1, sp, #40	; 0x28
    862a:	mov	r0, r5
    862c:	bl	80ec <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    8630:	cmp	r0, #0
    8632:	beq.n	86b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x16e>
      goto create;
    }
    if (n != 32) {
    8634:	cmp	r0, #32
    8636:	bne.w	8822 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2de>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    863a:	ldrb.w	r3, [sp, #40]	; 0x28
    863e:	lsls	r2, r3, #24
    8640:	bmi.n	8712 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
      if (freeCount == 0) {
    8642:	cmp	r4, #0
    8644:	bne.n	870c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1c8>
        freePos.position = dir->curPosition() - 32;
    8646:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    8648:	ldr	r1, [r5, #24]
    864a:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    864c:	subs	r2, #32
    864e:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    8650:	adds	r4, #1
    8652:	uxtb	r4, r4
      }
      if (!buf[0]) {
    8654:	cbz	r3, 86b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x16e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    8656:	cmp	r3, #192	; 0xc0
    8658:	beq.w	87a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    865c:	cmp	r3, #193	; 0xc1
    865e:	beq.n	8728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e4>
    8660:	cmp	r3, #133	; 0x85
    8662:	bne.n	8626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    8664:	movs	r2, #56	; 0x38
    8666:	movs	r1, #0
    8668:	mov	r0, r6
    866a:	bl	12f4c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    866e:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    8672:	ldrb.w	r2, [sp, #41]	; 0x29
    8676:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    867a:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    867c:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    8680:	it	pl
    8682:	orrpl.w	r2, r2, #8
    8686:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    868a:	ldr	r3, [r5, #0]
    868c:	ldr	r1, [r5, #32]
    868e:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    8690:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    8692:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    8694:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    8696:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    8698:	ldrb.w	r3, [r5, #51]	; 0x33
    869c:	ubfx	r3, r3, #6, #1
    86a0:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    86a4:	movs	r2, #32
    86a6:	add	r1, sp, #40	; 0x28
    86a8:	mov	r0, r5
    86aa:	bl	80ec <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    86ae:	cmp	r0, #0
    86b0:	bne.n	8634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xf0>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    86b2:	ldr	r3, [sp, #112]	; 0x70
    86b4:	lsls	r1, r3, #22
    86b6:	bpl.w	87f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2ae>
    86ba:	ldr	r3, [sp, #4]
    86bc:	lsls	r2, r3, #30
    86be:	bpl.w	87f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2ae>
    86c2:	ldr	r3, [sp, #0]
    86c4:	cmp	r3, #0
    86c6:	beq.w	87f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2ae>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    86ca:	cmp	r4, sl
    86cc:	bcc.n	86ea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a6>
    86ce:	b.n	8888 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x344>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    86d0:	cmp	r0, #32
    86d2:	bne.w	8954 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x410>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    86d6:	cbnz	r4, 86e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x19e>
      freePos.position = dir->curPosition() - 32;
    86d8:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    86da:	ldr	r1, [r5, #24]
    86dc:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    86de:	subs	r2, #32
    86e0:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    86e2:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    86e4:	cmp	sl, r4
    86e6:	bls.w	8888 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x344>
    n = dir->read(buf, 32);
    86ea:	movs	r2, #32
    86ec:	add	r1, sp, #40	; 0x28
    86ee:	mov	r0, r5
    86f0:	bl	80ec <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    86f4:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    86f6:	cmp	r0, #0
    86f8:	bne.n	86d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    86fa:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    86fc:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    86fe:	bl	9df0 <ExFatFile::addDirCluster()>
    8702:	cmp	r0, #0
    8704:	beq.w	8a28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4e4>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    8708:	str	r7, [r5, #24]
      continue;
    870a:	b.n	86e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a0>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    870c:	cmp	r4, sl
    870e:	bcs.n	8654 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x110>
    8710:	b.n	8650 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x10c>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    8712:	cmp.w	r9, #0
    8716:	bne.n	8656 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x112>
      if (freeCount < freeNeed) {
        freeCount = 0;
    8718:	cmp	r4, sl
    871a:	it	cc
    871c:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    871e:	cmp	r3, #133	; 0x85
    8720:	bne.n	8626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        continue;
      }
      inSet = true;
    8722:	mov.w	r9, #1
    8726:	b.n	8664 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x120>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    8728:	rsb	r8, r7, fp
    872c:	uxtb.w	r8, r8
    8730:	cmp.w	r8, #15
    8734:	it	cs
    8736:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    873a:	mov	r3, r8
    873c:	mov	r2, r7
    873e:	ldr	r1, [sp, #0]
    8740:	add	r0, sp, #40	; 0x28
    8742:	bl	96d8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    8746:	cmp	r0, #0
    8748:	beq.n	87e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x29c>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    874a:	add	r7, r8
    874c:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    874e:	cmp	fp, r7
    8750:	bne.w	8626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    8754:	ldr	r3, [sp, #112]	; 0x70
    8756:	lsls	r3, r3, #20
    8758:	bmi.w	8860 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    875c:	ldr	r3, [sp, #112]	; 0x70
    875e:	tst.w	r3, #17408	; 0x4400
    8762:	bne.w	897c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x438>
    8766:	ldrb.w	r3, [r6, #51]	; 0x33
    876a:	lsls	r7, r3, #30
    876c:	bmi.w	897c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x438>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    8770:	ldr	r3, [sp, #112]	; 0x70
    8772:	lsls	r3, r3, #21
    8774:	bpl.w	8a1e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4da>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8778:	movs	r1, #10
    877a:	ldr	r0, [pc, #212]	; (8850 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30c>)
    877c:	bl	fe48 <usb_serial_write>
    8780:	movs	r1, #103	; 0x67
    8782:	ldr	r0, [pc, #208]	; (8854 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>)
    8784:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8788:	movs	r0, #46	; 0x2e
    878a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    878e:	mov.w	r1, #402	; 0x192
    8792:	ldr	r0, [pc, #196]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    8794:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8798:	ldr	r0, [pc, #188]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    879a:	bl	11800 <Print::println()>
    879e:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    87a0:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    87a4:	ldr	r2, [sp, #4]
    87a6:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    87aa:	lsls	r1, r3, #30
    87ac:	bpl.n	87b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x272>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    87ae:	orr.w	r3, r2, #64	; 0x40
    87b2:	strb.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    87b6:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    87ba:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    87be:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    87c2:	ldr	r3, [sp, #60]	; 0x3c
    87c4:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    87c6:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    87c8:	strd	r0, r1, [r6, #8]
        if (!name) {
    87cc:	cmp	r3, #0
    87ce:	beq.n	8754 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x210>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    87d0:	ldrb.w	r3, [sp, #43]	; 0x2b
    87d4:	cmp	r3, fp
    87d6:	beq.n	87e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a0>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    87d8:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    87dc:	mov	r7, r9
    87de:	b.n	8626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    87e0:	mov	r9, r0
    87e2:	b.n	8626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    87e4:	ldrh.w	r3, [sp, #44]	; 0x2c
    87e8:	ldr	r2, [sp, #8]
    87ea:	cmp	r3, r2
    87ec:	bne.n	87d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x294>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    87ee:	movs	r7, #0
    87f0:	b.n	8626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    87f2:	movs	r1, #10
    87f4:	ldr	r0, [pc, #88]	; (8850 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30c>)
    87f6:	bl	fe48 <usb_serial_write>
    87fa:	movs	r1, #103	; 0x67
    87fc:	ldr	r0, [pc, #84]	; (8854 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>)
    87fe:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8802:	movs	r0, #46	; 0x2e
    8804:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8808:	movw	r1, #423	; 0x1a7
    880c:	ldr	r0, [pc, #72]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    880e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8812:	ldr	r0, [pc, #68]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    8814:	bl	11800 <Print::println()>
    8818:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    881a:	movs	r3, #1
    881c:	b.n	85d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x94>
    881e:	movs	r3, #2
    8820:	b.n	85d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x94>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8822:	movs	r1, #10
    8824:	ldr	r0, [pc, #40]	; (8850 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30c>)
    8826:	bl	fe48 <usb_serial_write>
    882a:	movs	r1, #103	; 0x67
    882c:	ldr	r0, [pc, #36]	; (8854 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>)
    882e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8832:	movs	r0, #46	; 0x2e
    8834:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8838:	mov.w	r1, #304	; 0x130
    883c:	ldr	r0, [pc, #24]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    883e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8842:	ldr	r0, [pc, #20]	; (8858 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x314>)
    8844:	bl	11800 <Print::println()>
    8848:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    884a:	ldr	r3, [sp, #0]
    884c:	str	r3, [sp, #8]
    884e:	b.n	8600 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xbc>
    8850:	.word	0x00016f6c
    8854:	.word	0x00016fdc
    8858:	.word	0x1fff0b00
    885c:	.word	0x88888889
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8860:	movs	r1, #10
    8862:	ldr	r0, [pc, #704]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e0>)
    8864:	bl	fe48 <usb_serial_write>
    8868:	movs	r1, #103	; 0x67
    886a:	ldr	r0, [pc, #700]	; (8b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e4>)
    886c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8870:	movs	r0, #46	; 0x2e
    8872:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8876:	mov.w	r1, #388	; 0x184
    887a:	ldr	r0, [pc, #688]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    887c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8880:	ldr	r0, [pc, #680]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8882:	bl	11800 <Print::println()>
    8886:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    8888:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    888c:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    888e:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    8892:	movs	r1, #0
    8894:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    8896:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    889a:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    889e:	bl	12f4c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    88a2:	ldr	r4, [sp, #12]
    88a4:	ldr	r3, [r5, #32]
    88a6:	str.w	fp, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    88aa:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    88ae:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    88b2:	movs	r4, #8
    88b4:	strb.w	r4, [r6, #49]	; 0x31
    88b8:	add.w	r7, fp, #30
  m_dirPos = freePos;
    88bc:	add.w	r4, r6, #36	; 0x24
    88c0:	ldr.w	fp, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    88c4:	str	r3, [r6, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    88c6:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    88ca:	stmia.w	r4, {r0, r1, r2}
    88ce:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    88d0:	movs	r5, #0
    88d2:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    88d4:	movs	r2, #1
    88d6:	mov	r1, r8
    88d8:	bl	9248 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    88dc:	mov	r4, r0
    88de:	cmp	r0, #0
    88e0:	beq.w	89f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4b2>
    88e4:	ldrsb.w	r3, [r0]
    88e8:	cmp	r3, #0
    88ea:	blt.w	89f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4b2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    88ee:	movs	r2, #32
    88f0:	movs	r1, #0
    88f2:	bl	12f4c <memset>
    if (i == 0) {
    88f6:	cmp	r5, #0
    88f8:	beq.w	8ae4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5a0>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    88fc:	cmp	r5, #1
    88fe:	beq.w	8ac4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x580>
    8902:	rsb	r3, r5, r5, lsl #4
    8906:	cmp	r7, #15
    8908:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    890c:	mov.w	r2, #193	; 0xc1
    8910:	mov	r1, r7
    8912:	it	cs
    8914:	movcs	r1, #15
    8916:	uxtb	r3, r3
    8918:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    891a:	cbz	r1, 8932 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ee>
    891c:	adds	r4, #2
    891e:	sxth	r1, r1
    8920:	add.w	r1, r4, r1, lsl #1
    8924:	add	r3, fp
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    8926:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    892a:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    892e:	cmp	r1, r4
    8930:	bne.n	8926 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3e2>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    8932:	adds	r5, #1
    8934:	uxtb	r5, r5
    8936:	cmp	sl, r5
    8938:	bls.w	8a78 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x534>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    893c:	movs	r2, #32
    893e:	mov	r1, r8
    8940:	ldr	r0, [r6, #32]
    8942:	bl	92f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8946:	cmp	r0, #1
    8948:	bne.w	8a50 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x50c>
    894c:	subs	r7, #15
    894e:	ldr	r0, [r6, #32]
    8950:	uxtb	r7, r7
    8952:	b.n	88d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x390>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8954:	movs	r1, #10
    8956:	ldr	r0, [pc, #460]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e0>)
    8958:	bl	fe48 <usb_serial_write>
    895c:	movs	r1, #103	; 0x67
    895e:	ldr	r0, [pc, #456]	; (8b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e4>)
    8960:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8964:	movs	r0, #46	; 0x2e
    8966:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    896a:	mov.w	r1, #438	; 0x1b6
    896e:	ldr	r0, [pc, #444]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8970:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8974:	ldr	r0, [pc, #436]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8976:	bl	11800 <Print::println()>
    897a:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    897c:	ldrb.w	r3, [r6, #49]	; 0x31
    8980:	tst.w	r3, #17
    8984:	bne.n	89ce <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48a>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    8986:	ldr	r3, [sp, #112]	; 0x70
    8988:	lsls	r5, r3, #21
    898a:	bpl.n	8a1e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4da>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    898c:	ldrb.w	r3, [r6, #51]	; 0x33
    8990:	lsls	r4, r3, #30
    8992:	bpl.w	8778 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x234>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    8996:	movs	r2, #0
    8998:	movs	r3, #0
    899a:	mov	r0, r6
    899c:	bl	83c0 <ExFatFile::seekSet(unsigned long long)>
    89a0:	cmp	r0, #0
    89a2:	bne.w	8ab6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x572>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    89a6:	movs	r1, #10
    89a8:	ldr	r0, [pc, #376]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e0>)
    89aa:	bl	fe48 <usb_serial_write>
    89ae:	movs	r1, #103	; 0x67
    89b0:	ldr	r0, [pc, #372]	; (8b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e4>)
    89b2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    89b6:	movs	r0, #46	; 0x2e
    89b8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    89bc:	mov.w	r1, #406	; 0x196
    89c0:	ldr	r0, [pc, #360]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    89c2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    89c6:	ldr	r0, [pc, #356]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    89c8:	bl	11800 <Print::println()>
    89cc:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    89ce:	movs	r1, #10
    89d0:	ldr	r0, [pc, #336]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e0>)
    89d2:	bl	fe48 <usb_serial_write>
    89d6:	movs	r1, #103	; 0x67
    89d8:	ldr	r0, [pc, #332]	; (8b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e4>)
    89da:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    89de:	movs	r0, #46	; 0x2e
    89e0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    89e4:	mov.w	r1, #394	; 0x18a
    89e8:	ldr	r0, [pc, #320]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    89ea:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    89ee:	ldr	r0, [pc, #316]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    89f0:	bl	11800 <Print::println()>
    89f4:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    89f6:	movs	r1, #10
    89f8:	ldr	r0, [pc, #296]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e0>)
    89fa:	bl	fe48 <usb_serial_write>
    89fe:	movs	r1, #103	; 0x67
    8a00:	ldr	r0, [pc, #292]	; (8b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e4>)
    8a02:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8a06:	movs	r0, #46	; 0x2e
    8a08:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8a0c:	mov.w	r1, #462	; 0x1ce
    8a10:	ldr	r0, [pc, #280]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8a12:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8a16:	ldr	r0, [pc, #276]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8a18:	bl	11800 <Print::println()>
    8a1c:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    8a1e:	ldr	r3, [sp, #112]	; 0x70
    8a20:	lsls	r0, r3, #17
    8a22:	bmi.n	8a80 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x53c>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    8a24:	movs	r0, #1
    8a26:	b.n	8592 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8a28:	movs	r1, #10
    8a2a:	ldr	r0, [pc, #248]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e0>)
    8a2c:	bl	fe48 <usb_serial_write>
    8a30:	movs	r1, #103	; 0x67
    8a32:	ldr	r0, [pc, #244]	; (8b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e4>)
    8a34:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8a38:	movs	r0, #46	; 0x2e
    8a3a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8a3e:	movw	r1, #431	; 0x1af
    8a42:	ldr	r0, [pc, #232]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8a44:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8a48:	ldr	r0, [pc, #224]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8a4a:	bl	11800 <Print::println()>
    8a4e:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8a50:	movs	r1, #10
    8a52:	ldr	r0, [pc, #208]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e0>)
    8a54:	bl	fe48 <usb_serial_write>
    8a58:	movs	r1, #103	; 0x67
    8a5a:	ldr	r0, [pc, #204]	; (8b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e4>)
    8a5c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8a60:	movs	r0, #46	; 0x2e
    8a62:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8a66:	mov.w	r1, #456	; 0x1c8
    8a6a:	ldr	r0, [pc, #192]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8a6c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8a70:	ldr	r0, [pc, #184]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8a72:	bl	11800 <Print::println()>
    8a76:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    8a78:	mov	r0, r6
    8a7a:	bl	9d60 <ExFatFile::sync()>
    8a7e:	b.n	8592 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    8a80:	ldrd	r2, r3, [r6, #16]
    8a84:	mov	r0, r6
    8a86:	bl	83c0 <ExFatFile::seekSet(unsigned long long)>
    8a8a:	cmp	r0, #0
    8a8c:	bne.n	8a24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4e0>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8a8e:	movs	r1, #10
    8a90:	ldr	r0, [pc, #144]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e0>)
    8a92:	bl	fe48 <usb_serial_write>
    8a96:	movs	r1, #103	; 0x67
    8a98:	ldr	r0, [pc, #140]	; (8b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e4>)
    8a9a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8a9e:	movs	r0, #46	; 0x2e
    8aa0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8aa4:	mov.w	r1, #410	; 0x19a
    8aa8:	ldr	r0, [pc, #128]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8aaa:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8aae:	ldr	r0, [pc, #124]	; (8b2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5e8>)
    8ab0:	bl	11800 <Print::println()>
    8ab4:	b.n	8588 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x44>
    8ab6:	mov	r0, r6
    8ab8:	bl	a358 <ExFatFile::truncate()>
    8abc:	cmp	r0, #0
    8abe:	beq.w	89a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x462>
    8ac2:	b.n	8a24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4e0>
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    8ac4:	movs	r3, #192	; 0xc0
    8ac6:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    8ac8:	ldr	r3, [sp, #4]
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    8aca:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    8acc:	orn	r3, r3, #63	; 0x3f
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    8ad0:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    8ad2:	strb.w	r3, [r6, #51]	; 0x33

      dirStream->nameLength = nameLength;
    8ad6:	ldrb.w	r3, [sp, #12]
    8ada:	strb	r3, [r4, #3]
    8adc:	ldrh.w	r3, [sp, #8]
    8ae0:	strh	r3, [r4, #4]
    8ae2:	b.n	8932 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ee>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    8ae4:	movs	r3, #133	; 0x85
    8ae6:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    8ae8:	ldr	r3, [pc, #68]	; (8b30 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5ec>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    8aea:	strb.w	r9, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    8aee:	strb.w	r9, [r4, #1]

      if (FsDateTime::callback) {
    8af2:	ldr	r3, [r3, #0]
    8af4:	cbz	r3, 8b16 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x5d2>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    8af6:	add.w	r2, sp, #23
    8afa:	add.w	r1, sp, #26
    8afe:	add	r0, sp, #24
    8b00:	blx	r3
    8b02:	ldrh.w	r1, [sp, #24]
    8b06:	ldrh.w	r2, [sp, #26]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    8b0a:	ldrb.w	r3, [sp, #23]
    8b0e:	strh	r1, [r4, #10]
    8b10:	strh	r2, [r4, #8]
    8b12:	strb	r3, [r4, #20]
    8b14:	b.n	8932 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ee>
    8b16:	movw	r3, #21025	; 0x5221
    8b1a:	strh	r3, [r4, #10]
    8b1c:	strh	r3, [r4, #14]
    8b1e:	strh	r3, [r4, #18]
    8b20:	b.n	8932 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ee>
    8b22:	nop
    8b24:	.word	0x00016f6c
    8b28:	.word	0x00016fdc
    8b2c:	.word	0x1fff0b00
    8b30:	.word	0x1fff2448

00008b34 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    8b34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8b38:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    8b3a:	movs	r4, #0
    8b3c:	mov	r6, r0
    8b3e:	mov	r5, r1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8b40:	ldr	r0, [pc, #416]	; (8ce4 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b0>)
    8b42:	str	r2, [sp, #12]
    8b44:	movs	r1, #5
    8b46:	mov	r9, r3
    8b48:	strb.w	r4, [sp, #73]	; 0x49
    8b4c:	strb.w	r4, [sp, #74]	; 0x4a
    8b50:	strb.w	r4, [sp, #75]	; 0x4b
    8b54:	bl	fe48 <usb_serial_write>
  ExFatFile tmpDir;
  ExName_t fname;
  Serial.print("Open "); Serial.println(path);
    8b58:	ldr	r4, [sp, #12]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    8b5a:	mov	r0, r4
    8b5c:	bl	13580 <strlen>
    8b60:	mov	r1, r0
    8b62:	mov	r0, r4
    8b64:	bl	fe48 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    8b68:	ldr	r0, [pc, #380]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8b6a:	bl	11800 <Print::println()>
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    8b6e:	ldrb.w	r3, [r6, #49]	; 0x31
    8b72:	cmp	r3, #0
    8b74:	bne.n	8c12 <ExFatFile::open(ExFatFile*, char const*, int)+0xde>
    8b76:	ldrb.w	r3, [r5, #49]	; 0x31
    8b7a:	tst.w	r3, #80	; 0x50
    8b7e:	beq.n	8c12 <ExFatFile::open(ExFatFile*, char const*, int)+0xde>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    8b80:	ldr	r1, [sp, #12]
    8b82:	ldrb	r3, [r1, #0]
    8b84:	cmp	r3, #47	; 0x2f
    8b86:	beq.n	8bf0 <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    8b88:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    8b8c:	add	r3, sp, #12
    8b8e:	add	r2, sp, #16
    8b90:	mov	r0, r6
    8b92:	bl	7fa8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    8b96:	mov	r4, r0
    8b98:	cmp	r0, #0
    8b9a:	beq.n	8c40 <ExFatFile::open(ExFatFile*, char const*, int)+0x10c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    8b9c:	ldr	r3, [sp, #12]
    8b9e:	ldrb	r3, [r3, #0]
    8ba0:	cmp	r3, #0
    8ba2:	beq.n	8c6c <ExFatFile::open(ExFatFile*, char const*, int)+0x138>
    8ba4:	ldrb.w	r3, [sp, #16]
    8ba8:	ldr	r2, [sp, #20]
    8baa:	str.w	r8, [sp]
    8bae:	mov	r1, r5
    8bb0:	mov	r0, r6
    8bb2:	bl	8544 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    8bb6:	mov	r4, r0
    8bb8:	cmp	r0, #0
    8bba:	beq.n	8c88 <ExFatFile::open(ExFatFile*, char const*, int)+0x154>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    8bbc:	mov	r4, r6
    8bbe:	add	r7, sp, #24
    8bc0:	add.w	lr, r6, #48	; 0x30
    8bc4:	ldr	r0, [r4, #0]
    8bc6:	ldr	r1, [r4, #4]
    8bc8:	ldr	r2, [r4, #8]
    8bca:	ldr	r3, [r4, #12]
    8bcc:	mov	r5, r7
    8bce:	stmia	r5!, {r0, r1, r2, r3}
    8bd0:	adds	r4, #16
    8bd2:	cmp	r4, lr
    8bd4:	mov	r7, r5
    8bd6:	bne.n	8bc4 <ExFatFile::open(ExFatFile*, char const*, int)+0x90>
    8bd8:	ldr	r0, [r4, #0]
    8bda:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    8bdc:	mov	r0, r6
    8bde:	bl	9d60 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    8be2:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    8be4:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    8be8:	strb.w	r8, [r6, #51]	; 0x33
    8bec:	ldr	r1, [sp, #12]
    8bee:	b.n	8b8c <ExFatFile::open(ExFatFile*, char const*, int)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    8bf0:	adds	r1, #1
    8bf2:	str	r1, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    8bf4:	ldrb	r3, [r1, #0]
    8bf6:	cmp	r3, #47	; 0x2f
    8bf8:	beq.n	8bf0 <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    8bfa:	ldr	r1, [r5, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    8bfc:	cmp	r3, #0
    8bfe:	beq.n	8cb4 <ExFatFile::open(ExFatFile*, char const*, int)+0x180>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    8c00:	add	r0, sp, #24
    8c02:	bl	7f50 <ExFatFile::openRoot(ExFatVolume*)>
    8c06:	mov	r4, r0
    8c08:	cmp	r0, #0
    8c0a:	beq.n	8cbe <ExFatFile::open(ExFatFile*, char const*, int)+0x18a>
    8c0c:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    8c0e:	add	r5, sp, #24
    8c10:	b.n	8b88 <ExFatFile::open(ExFatFile*, char const*, int)+0x54>
    8c12:	movs	r1, #10
    8c14:	ldr	r0, [pc, #212]	; (8cec <ExFatFile::open(ExFatFile*, char const*, int)+0x1b8>)
    8c16:	bl	fe48 <usb_serial_write>
    8c1a:	movs	r1, #103	; 0x67
    8c1c:	ldr	r0, [pc, #208]	; (8cf0 <ExFatFile::open(ExFatFile*, char const*, int)+0x1bc>)
    8c1e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8c22:	movs	r0, #46	; 0x2e
    8c24:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8c28:	movs	r1, #193	; 0xc1
    8c2a:	ldr	r0, [pc, #188]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8c2c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8c30:	ldr	r0, [pc, #180]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8c32:	bl	11800 <Print::println()>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    8c36:	movs	r4, #0
}
    8c38:	mov	r0, r4
    8c3a:	add	sp, #84	; 0x54
    8c3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8c40:	movs	r1, #10
    8c42:	ldr	r0, [pc, #168]	; (8cec <ExFatFile::open(ExFatFile*, char const*, int)+0x1b8>)
    8c44:	bl	fe48 <usb_serial_write>
    8c48:	movs	r1, #103	; 0x67
    8c4a:	ldr	r0, [pc, #164]	; (8cf0 <ExFatFile::open(ExFatFile*, char const*, int)+0x1bc>)
    8c4c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8c50:	movs	r0, #46	; 0x2e
    8c52:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8c56:	movs	r1, #211	; 0xd3
    8c58:	ldr	r0, [pc, #140]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8c5a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8c5e:	ldr	r0, [pc, #136]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8c60:	bl	11800 <Print::println()>
    8c64:	mov	r0, r4
    8c66:	add	sp, #84	; 0x54
    8c68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8c6c:	ldrb.w	r3, [sp, #16]
    8c70:	ldr	r2, [sp, #20]
    8c72:	str.w	r9, [sp]
    8c76:	mov	r1, r5
    8c78:	mov	r0, r6
    8c7a:	bl	8544 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    8c7e:	mov	r4, r0
    8c80:	mov	r0, r4
    8c82:	add	sp, #84	; 0x54
    8c84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8c88:	movs	r1, #10
    8c8a:	ldr	r0, [pc, #96]	; (8cec <ExFatFile::open(ExFatFile*, char const*, int)+0x1b8>)
    8c8c:	bl	fe48 <usb_serial_write>
    8c90:	movs	r1, #103	; 0x67
    8c92:	ldr	r0, [pc, #92]	; (8cf0 <ExFatFile::open(ExFatFile*, char const*, int)+0x1bc>)
    8c94:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8c98:	movs	r0, #46	; 0x2e
    8c9a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8c9e:	movs	r1, #218	; 0xda
    8ca0:	ldr	r0, [pc, #68]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8ca2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8ca6:	ldr	r0, [pc, #64]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8ca8:	bl	11800 <Print::println()>
    8cac:	mov	r0, r4
    8cae:	add	sp, #84	; 0x54
    8cb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    8cb4:	mov	r0, r6
    8cb6:	bl	7f50 <ExFatFile::openRoot(ExFatVolume*)>
    8cba:	mov	r4, r0
    8cbc:	b.n	8c38 <ExFatFile::open(ExFatFile*, char const*, int)+0x104>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8cbe:	movs	r1, #10
    8cc0:	ldr	r0, [pc, #40]	; (8cec <ExFatFile::open(ExFatFile*, char const*, int)+0x1b8>)
    8cc2:	bl	fe48 <usb_serial_write>
    8cc6:	movs	r1, #103	; 0x67
    8cc8:	ldr	r0, [pc, #36]	; (8cf0 <ExFatFile::open(ExFatFile*, char const*, int)+0x1bc>)
    8cca:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8cce:	movs	r0, #46	; 0x2e
    8cd0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8cd4:	movs	r1, #204	; 0xcc
    8cd6:	ldr	r0, [pc, #16]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8cd8:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8cdc:	ldr	r0, [pc, #8]	; (8ce8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1b4>)
    8cde:	bl	11800 <Print::println()>
    8ce2:	b.n	8c38 <ExFatFile::open(ExFatFile*, char const*, int)+0x104>
    8ce4:	.word	0x00017044
    8ce8:	.word	0x1fff0b00
    8cec:	.word	0x00016f6c
    8cf0:	.word	0x00016fdc

00008cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    8cf4:	cbz	r1, 8cfe <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    8cf6:	add.w	r1, r1, #1096	; 0x448
    8cfa:	b.w	8b34 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    8cfe:	mov	r0, r1
    8d00:	bx	lr
    8d02:	nop

00008d04 <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    8d04:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    8d06:	ldrb.w	r3, [r0, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    8d0a:	sub	sp, #12
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    8d0c:	cbnz	r3, 8d18 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    8d0e:	ldrb.w	r5, [r1, #49]	; 0x31
    8d12:	tst.w	r5, #80	; 0x50
    8d16:	bne.n	8d42 <ExFatFile::openNext(ExFatFile*, int)+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8d18:	movs	r1, #10
    8d1a:	ldr	r0, [pc, #64]	; (8d5c <ExFatFile::openNext(ExFatFile*, int)+0x58>)
    8d1c:	bl	fe48 <usb_serial_write>
    8d20:	movs	r1, #103	; 0x67
    8d22:	ldr	r0, [pc, #60]	; (8d60 <ExFatFile::openNext(ExFatFile*, int)+0x5c>)
    8d24:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8d28:	movs	r0, #46	; 0x2e
    8d2a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8d2e:	movs	r1, #244	; 0xf4
    8d30:	ldr	r0, [pc, #48]	; (8d64 <ExFatFile::openNext(ExFatFile*, int)+0x60>)
    8d32:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8d36:	ldr	r0, [pc, #44]	; (8d64 <ExFatFile::openNext(ExFatFile*, int)+0x60>)
    8d38:	bl	11800 <Print::println()>
    8d3c:	movs	r0, #0
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
}
    8d3e:	add	sp, #12
    8d40:	pop	{r4, r5, pc}
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    8d42:	ldrd	r4, r5, [r1]
    8d46:	movs	r5, #0
    8d48:	and.w	r4, r4, #31
    8d4c:	orrs	r4, r5
    8d4e:	bne.n	8d18 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    8d50:	str	r2, [sp, #0]
    8d52:	mov	r2, r3
    8d54:	bl	8544 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    8d58:	add	sp, #12
    8d5a:	pop	{r4, r5, pc}
    8d5c:	.word	0x00016f6c
    8d60:	.word	0x00016fdc
    8d64:	.word	0x1fff0b00

00008d68 <ExFatFile::printFileSize(Print*)>:
    return fsPrintDateTime(pr, date, time);
  }
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
    8d68:	push	{r4, r5, r6, lr}
    8d6a:	sub	sp, #24
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
    8d6c:	add	r5, sp, #24
    8d6e:	movs	r2, #0
  }
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
  uint64_t n = m_validLength;
    8d70:	ldr	r4, [r0, #16]
    8d72:	ldr	r3, [r0, #20]
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
    8d74:	strb.w	r2, [r5, #-4]!
    return fsPrintDateTime(pr, date, time);
  }
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
    8d78:	mov	r6, r1
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    uint64_t m = n;
    n /= 10;
    8d7a:	mov	r1, r3
    8d7c:	movs	r2, #10
    8d7e:	movs	r3, #0
    8d80:	mov	r0, r4
    8d82:	bl	123c0 <__aeabi_uldivmod>
    *--str = m - 10*n + '0';
    8d86:	adds	r4, #48	; 0x30
    8d88:	add.w	r3, r0, r0, lsl #2
    8d8c:	sub.w	r4, r4, r3, lsl #1
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    8d90:	orrs.w	r2, r0, r1
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
    8d94:	strb.w	r4, [r5, #-1]!
    8d98:	mov	r3, r1
    8d9a:	mov	r4, r0
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    8d9c:	bne.n	8d7a <ExFatFile::printFileSize(Print*)+0x12>
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
  } while (n);
  while (str > bgn) {
    8d9e:	add	r3, sp, #8
    8da0:	cmp	r5, r3
    8da2:	bls.n	8db2 <ExFatFile::printFileSize(Print*)+0x4a>
    8da4:	mov	r1, r5
    *--str = ' ';
    8da6:	movs	r2, #32
    8da8:	strb.w	r2, [r1, #-1]!
  do {
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
  } while (n);
  while (str > bgn) {
    8dac:	cmp	r1, r3
    8dae:	bne.n	8da8 <ExFatFile::printFileSize(Print*)+0x40>
    8db0:	add	r5, sp, #8
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    8db2:	mov	r0, r5
    8db4:	bl	13580 <strlen>
    8db8:	ldr	r3, [r6, #0]
    8dba:	mov	r2, r0
    8dbc:	mov	r1, r5
    8dbe:	ldr	r3, [r3, #4]
    8dc0:	mov	r0, r6
    8dc2:	blx	r3
    *--str = ' ';
  }
  return pr->write(str);
}
    8dc4:	add	sp, #24
    8dc6:	pop	{r4, r5, r6, pc}

00008dc8 <ExFatFile::printModifyDateTime(Print*)>:
//------------------------------------------------------------------------------
size_t ExFatFile::printModifyDateTime(print_t* pr) {
    8dc8:	push	{r4, lr}
    8dca:	sub	sp, #8
    8dcc:	mov	r4, r1
  uint16_t date;
  uint16_t time;
  if (getModifyDateTime(&date, &time)) {
    8dce:	add.w	r2, sp, #6
    8dd2:	add	r1, sp, #4
    8dd4:	bl	7dcc <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    8dd8:	cbz	r0, 8de8 <ExFatFile::printModifyDateTime(Print*)+0x20>
    return fsPrintDateTime(pr, date, time);
    8dda:	mov	r0, r4
    8ddc:	ldrh.w	r2, [sp, #6]
    8de0:	ldrh.w	r1, [sp, #4]
    8de4:	bl	7d44 <fsPrintDateTime(Print*, unsigned short, unsigned short)>
  }
  return 0;
}
    8de8:	add	sp, #8
    8dea:	pop	{r4, pc}

00008dec <ExFatFile::printName(Print*)>:
//------------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    8dec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8df0:	add.w	r3, r0, #36	; 0x24
    return fsPrintDateTime(pr, date, time);
  }
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    8df4:	mov	r5, r0
    8df6:	mov	r7, r1
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8df8:	ldmia.w	r3, {r0, r1, r2}
    return fsPrintDateTime(pr, date, time);
  }
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    8dfc:	sub	sp, #36	; 0x24
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  uint8_t in;
  uint8_t buf[15];
  if (!isOpen()) {
    8dfe:	ldrb.w	r4, [r5, #49]	; 0x31
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8e02:	add	r6, sp, #4
    8e04:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  uint8_t in;
  uint8_t buf[15];
  if (!isOpen()) {
    8e08:	cmp	r4, #0
    8e0a:	beq.n	8ec4 <ExFatFile::printName(Print*)+0xd8>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8e0c:	ldrb.w	r3, [r5, #48]	; 0x30
    8e10:	cmp	r3, #1
    8e12:	bls.n	8ef8 <ExFatFile::printName(Print*)+0x10c>
    8e14:	mov.w	r8, #1
    8e18:	mov.w	r9, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    8e1c:	cmp.w	r8, #1
    8e20:	ite	ne
    8e22:	movne	r2, #32
    8e24:	moveq	r2, #64	; 0x40
    8e26:	mov	r1, r6
    8e28:	ldr	r0, [r5, #32]
    8e2a:	bl	92f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8e2e:	cmp	r0, #1
    8e30:	bne.n	8ede <ExFatFile::printName(Print*)+0xf2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    8e32:	movs	r2, #0
    8e34:	mov	r1, r6
    8e36:	ldr	r0, [r5, #32]
    8e38:	bl	9248 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    8e3c:	cbz	r0, 8e98 <ExFatFile::printName(Print*)+0xac>
    8e3e:	ldrb	r3, [r0, #0]
    8e40:	cmp	r3, #193	; 0xc1
    8e42:	bne.n	8e98 <ExFatFile::printName(Print*)+0xac>
    8e44:	add.w	r1, sp, #15
    8e48:	add.w	lr, r9, #15
    8e4c:	mov	r4, r9
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8e4e:	ldrh.w	r3, [r0, #2]!
    8e52:	rsb	r2, r9, r4
    8e56:	uxtb	r2, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
    8e58:	cbz	r3, 8e94 <ExFatFile::printName(Print*)+0xa8>
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    8e5a:	cmp	r3, #126	; 0x7e
      n++;
    8e5c:	add.w	r4, r4, #1
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    8e60:	ite	ls
    8e62:	uxtbls	r3, r3
    8e64:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
    8e66:	cmp	r4, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    8e68:	strb.w	r3, [r1, #1]!
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
    8e6c:	bne.n	8e4e <ExFatFile::printName(Print*)+0x62>
    8e6e:	mov	r9, r4
    8e70:	movs	r2, #15
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
      n++;
    }
    pr->write(buf, in);
    8e72:	ldr	r3, [r7, #0]
    8e74:	add	r1, sp, #16
    8e76:	ldr	r3, [r3, #4]
    8e78:	mov	r0, r7
    8e7a:	blx	r3
  uint8_t buf[15];
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8e7c:	add.w	r8, r8, #1
    8e80:	ldrb.w	r3, [r5, #48]	; 0x30
    8e84:	uxtb.w	r8, r8
    8e88:	cmp	r3, r8
    8e8a:	bhi.n	8e1c <ExFatFile::printName(Print*)+0x30>
    8e8c:	mov	r0, r4
  }
  return n;

 fail:
  return 0;
}
    8e8e:	add	sp, #36	; 0x24
    8e90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
    8e94:	mov	r9, r4
    8e96:	b.n	8e72 <ExFatFile::printName(Print*)+0x86>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8e98:	movs	r1, #10
    8e9a:	ldr	r0, [pc, #96]	; (8efc <ExFatFile::printName(Print*)+0x110>)
    8e9c:	bl	fe48 <usb_serial_write>
    8ea0:	movs	r1, #108	; 0x6c
    8ea2:	ldr	r0, [pc, #92]	; (8f00 <ExFatFile::printName(Print*)+0x114>)
    8ea4:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8ea8:	movs	r0, #46	; 0x2e
    8eaa:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8eae:	movs	r1, #164	; 0xa4
    8eb0:	ldr	r0, [pc, #80]	; (8f04 <ExFatFile::printName(Print*)+0x118>)
    8eb2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8eb6:	ldr	r0, [pc, #76]	; (8f04 <ExFatFile::printName(Print*)+0x118>)
    8eb8:	bl	11800 <Print::println()>
    pr->write(buf, in);
  }
  return n;

 fail:
  return 0;
    8ebc:	movs	r0, #0
}
    8ebe:	add	sp, #36	; 0x24
    8ec0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8ec4:	movs	r1, #10
    8ec6:	ldr	r0, [pc, #52]	; (8efc <ExFatFile::printName(Print*)+0x110>)
    8ec8:	bl	fe48 <usb_serial_write>
    8ecc:	movs	r1, #108	; 0x6c
    8ece:	ldr	r0, [pc, #48]	; (8f00 <ExFatFile::printName(Print*)+0x114>)
    8ed0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8ed4:	movs	r0, #46	; 0x2e
    8ed6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8eda:	movs	r1, #153	; 0x99
    8edc:	b.n	8eb0 <ExFatFile::printName(Print*)+0xc4>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8ede:	movs	r1, #10
    8ee0:	ldr	r0, [pc, #24]	; (8efc <ExFatFile::printName(Print*)+0x110>)
    8ee2:	bl	fe48 <usb_serial_write>
    8ee6:	movs	r1, #108	; 0x6c
    8ee8:	ldr	r0, [pc, #20]	; (8f00 <ExFatFile::printName(Print*)+0x114>)
    8eea:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8eee:	movs	r0, #46	; 0x2e
    8ef0:	bl	ff50 <usb_serial_putchar>
    8ef4:	movs	r1, #158	; 0x9e
    8ef6:	b.n	8eb0 <ExFatFile::printName(Print*)+0xc4>
  uint8_t buf[15];
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8ef8:	movs	r0, #0
    8efa:	b.n	8ebe <ExFatFile::printName(Print*)+0xd2>
    8efc:	.word	0x00016f6c
    8f00:	.word	0x0001704c
    8f04:	.word	0x1fff0b00

00008f08 <ExFatFile::ls(Print*, unsigned char, unsigned char)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    8f08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile file;
  if (!isDir()) {
    8f0c:	ldrb.w	r4, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    8f10:	sub	sp, #60	; 0x3c
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    8f12:	mov.w	lr, #0
  ExFatFile file;
  if (!isDir()) {
    8f16:	ands.w	r4, r4, #80	; 0x50
    8f1a:	strb.w	lr, [sp, #49]	; 0x31
    8f1e:	strb.w	lr, [sp, #50]	; 0x32
    8f22:	strb.w	lr, [sp, #51]	; 0x33
    8f26:	beq.w	904c <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x144>
    8f2a:	mov	r8, r0
    8f2c:	mov	r7, r2
    8f2e:	mov	r6, r3
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    8f30:	movs	r2, #0
    8f32:	movs	r3, #0
    8f34:	mov	r5, r1
    8f36:	bl	83c0 <ExFatFile::seekSet(unsigned long long)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    8f3a:	movs	r2, #0
    8f3c:	mov	r1, r8
    8f3e:	mov	r0, sp
    8f40:	bl	8d04 <ExFatFile::openNext(ExFatFile*, int)>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    8f44:	and.w	r9, r7, #2
    8f48:	uxtb.w	r9, r9
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    8f4c:	mov	r4, r0
    8f4e:	cmp	r0, #0
    8f50:	beq.n	8fd6 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xce>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
    8f52:	ldrb.w	r3, [sp, #49]	; 0x31
    8f56:	lsls	r0, r3, #30
    8f58:	bpl.n	8f5e <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x56>
    8f5a:	lsls	r1, r7, #31
    8f5c:	bpl.n	8fc0 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xb8>
      for (uint8_t i = 0; i < indent; i++) {
    8f5e:	movs	r4, #0
    8f60:	cbz	r6, 8f74 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x6c>
        pr->write(' ');
    8f62:	ldr	r3, [r5, #0]
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    8f64:	adds	r4, #1
        pr->write(' ');
    8f66:	movs	r1, #32
    8f68:	ldr	r3, [r3, #0]
    8f6a:	mov	r0, r5
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    8f6c:	uxtb	r4, r4
        pr->write(' ');
    8f6e:	blx	r3
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    8f70:	cmp	r6, r4
    8f72:	bne.n	8f62 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x5a>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    8f74:	cmp.w	r9, #0
    8f78:	bne.n	900c <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x104>
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
    8f7a:	lsls	r2, r7, #29
    8f7c:	bmi.n	8ff8 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xf0>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
    8f7e:	mov	r1, r5
    8f80:	mov	r0, sp
    8f82:	bl	8dec <ExFatFile::printName(Print*)>
      if (file.isDir()) {
    8f86:	ldrb.w	r3, [sp, #49]	; 0x31
    8f8a:	tst.w	r3, #80	; 0x50
    8f8e:	bne.n	8fec <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xe4>
        pr->write('/');
      }
      pr->write('\r');
    8f90:	ldr	r3, [r5, #0]
    8f92:	movs	r1, #13
    8f94:	ldr	r3, [r3, #0]
    8f96:	mov	r0, r5
    8f98:	blx	r3
      pr->write('\n');
    8f9a:	ldr	r3, [r5, #0]
    8f9c:	movs	r1, #10
    8f9e:	ldr	r3, [r3, #0]
    8fa0:	mov	r0, r5
    8fa2:	blx	r3
      if ((flags & LS_R) && file.isDir()) {
    8fa4:	lsls	r3, r7, #28
    8fa6:	bpl.n	8fc0 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xb8>
    8fa8:	ldrb.w	r3, [sp, #49]	; 0x31
    8fac:	tst.w	r3, #80	; 0x50
    8fb0:	beq.n	8fc0 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xb8>
        file.ls(pr, flags, indent + 2);
    8fb2:	adds	r3, r6, #2
    8fb4:	uxtb	r3, r3
    8fb6:	mov	r2, r7
    8fb8:	mov	r1, r5
    8fba:	mov	r0, sp
    8fbc:	bl	8f08 <ExFatFile::ls(Print*, unsigned char, unsigned char)>
      }
    }
    file.close();
    8fc0:	mov	r0, sp
    8fc2:	bl	7db8 <ExFatFile::close()>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    8fc6:	movs	r2, #0
    8fc8:	mov	r1, r8
    8fca:	mov	r0, sp
    8fcc:	bl	8d04 <ExFatFile::openNext(ExFatFile*, int)>
    8fd0:	mov	r4, r0
    8fd2:	cmp	r0, #0
    8fd4:	bne.n	8f52 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x4a>
   * \return true for success or false for failure.
   */
  bool getCreateDateTime(uint16_t* pdate, uint16_t* ptime);
  /** \return All error bits. */
  uint8_t getError() const {
    return isOpen() ? m_error : 0XFF;
    8fd6:	ldrb.w	r3, [r8, #49]	; 0x31
    8fda:	cbz	r3, 9020 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x118>
        file.ls(pr, flags, indent + 2);
      }
    }
    file.close();
  }
  if (getError()) {
    8fdc:	ldrb.w	r3, [r8, #50]	; 0x32
    8fe0:	cbnz	r3, 9020 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x118>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    8fe2:	movs	r4, #1

 fail:
  return false;
}
    8fe4:	mov	r0, r4
    8fe6:	add	sp, #60	; 0x3c
    8fe8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
      if (file.isDir()) {
        pr->write('/');
    8fec:	ldr	r3, [r5, #0]
    8fee:	movs	r1, #47	; 0x2f
    8ff0:	ldr	r3, [r3, #0]
    8ff2:	mov	r0, r5
    8ff4:	blx	r3
    8ff6:	b.n	8f90 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x88>
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
        file.printFileSize(pr);
    8ff8:	mov	r1, r5
    8ffa:	mov	r0, sp
    8ffc:	bl	8d68 <ExFatFile::printFileSize(Print*)>
        pr->write(' ');
    9000:	ldr	r3, [r5, #0]
    9002:	movs	r1, #32
    9004:	ldr	r3, [r3, #0]
    9006:	mov	r0, r5
    9008:	blx	r3
    900a:	b.n	8f7e <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x76>
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
    900c:	mov	r1, r5
    900e:	mov	r0, sp
    9010:	bl	8dc8 <ExFatFile::printModifyDateTime(Print*)>
        pr->write(' ');
    9014:	ldr	r3, [r5, #0]
    9016:	movs	r1, #32
    9018:	ldr	r3, [r3, #0]
    901a:	mov	r0, r5
    901c:	blx	r3
    901e:	b.n	8f7a <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x72>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9020:	movs	r1, #10
    9022:	ldr	r0, [pc, #84]	; (9078 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x170>)
    9024:	bl	fe48 <usb_serial_write>
    9028:	movs	r1, #108	; 0x6c
    902a:	ldr	r0, [pc, #80]	; (907c <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x174>)
    902c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9030:	movs	r0, #46	; 0x2e
    9032:	bl	ff50 <usb_serial_putchar>
    9036:	movs	r1, #93	; 0x5d
    9038:	ldr	r0, [pc, #68]	; (9080 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x178>)
    903a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    903e:	ldr	r0, [pc, #64]	; (9080 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x178>)
    9040:	bl	11800 <Print::println()>
  }
  return true;

 fail:
  return false;
}
    9044:	mov	r0, r4
    9046:	add	sp, #60	; 0x3c
    9048:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    904c:	movs	r1, #10
    904e:	ldr	r0, [pc, #40]	; (9078 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x170>)
    9050:	bl	fe48 <usb_serial_write>
    9054:	movs	r1, #108	; 0x6c
    9056:	ldr	r0, [pc, #36]	; (907c <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x174>)
    9058:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    905c:	movs	r0, #46	; 0x2e
    905e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9062:	movs	r1, #62	; 0x3e
    9064:	ldr	r0, [pc, #24]	; (9080 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x178>)
    9066:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    906a:	ldr	r0, [pc, #20]	; (9080 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x178>)
    906c:	bl	11800 <Print::println()>
    9070:	mov	r0, r4
    9072:	add	sp, #60	; 0x3c
    9074:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9078:	.word	0x00016f6c
    907c:	.word	0x0001704c
    9080:	.word	0x1fff0b00

00009084 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    9084:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9088:	mov	r8, r0
    908a:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    908c:	mov	fp, r1
    908e:	cmp	r1, #0
    9090:	beq.n	911c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    9092:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    9094:	ldr.w	r3, [r8, #1072]	; 0x430
    9098:	cmp	r7, r3
    909a:	bcs.n	9114 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    909c:	and.w	r5, r7, #7
    90a0:	movs	r3, #1
    90a2:	lsl.w	r5, r3, r5
    90a6:	uxtb	r5, r5
    90a8:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    90ac:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    90ae:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    90b0:	ldr.w	r1, [r8, #1068]	; 0x42c
    90b4:	movs	r2, #0
    90b6:	add.w	r1, r1, r4, lsr #12
    90ba:	mov	r0, r8
    90bc:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    90c0:	cbz	r0, 90f4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    90c2:	ldrb.w	r1, [r0, sl]
    90c6:	b.n	90de <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    90c8:	cmp	r2, r9
    90ca:	beq.n	9122 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    90cc:	cmp	r7, r4
    90ce:	beq.n	90f2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    90d0:	ldr.w	r2, [r8, #1072]	; 0x430
    90d4:	cmp	r4, r2
    90d6:	bcs.n	9108 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    90d8:	ands.w	r5, r3, #255	; 0xff
    90dc:	beq.n	90f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    90de:	adds	r4, #1
        if (!(mask & cache[i])) {
    90e0:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    90e2:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    90e6:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    90ea:	beq.n	90c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    90ec:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    90ee:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    90f0:	bne.n	90d0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    90f2:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    90f4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90f8:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    90fc:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    9100:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    9104:	bne.n	90c2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    9106:	b.n	910c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    9108:	movs	r6, #0
    910a:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    910c:	mov.w	sl, #0
    9110:	movs	r5, #1
    9112:	b.n	90b0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    9114:	movs	r7, #0
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    9116:	mov	sl, r7
    9118:	movs	r5, #1
    911a:	b.n	90ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    911c:	ldr.w	r7, [r0, #1056]	; 0x420
    9120:	b.n	9094 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    9122:	cmp.w	fp, #0
    9126:	bne.n	9132 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    9128:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    912c:	it	eq
    912e:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    9132:	adds	r0, r6, #2
    9134:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    9138:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    913c:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    913e:	mov	r9, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    9140:	ldr.w	r0, [r0, #1072]	; 0x430
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    9144:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    9146:	adds	r2, r1, r2
    9148:	cmp	r2, r0
    914a:	bhi.n	9208 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xd0>
    914c:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    914e:	ldr.w	r3, [r9, #1056]	; 0x420
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    9152:	cmp.w	sl, #0
    9156:	bne.n	91c4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    9158:	cmp	r1, r3
      m_bitmapStart = start;
    915a:	it	cc
    915c:	strcc.w	r1, [r9, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    9160:	and.w	r4, r1, #7
    9164:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    9166:	ldr.w	r3, [r9, #1068]	; 0x42c
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    916a:	lsl.w	r4, r2, r4
    916e:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    9170:	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    9174:	ubfx	fp, r1, #3, #9
    9178:	movs	r2, #1
    917a:	mov	r1, r8
    917c:	mov	r0, r9
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    917e:	add	r8, r2
    9180:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    9184:	mov	r6, r0
    9186:	cmp	r0, #0
    9188:	beq.n	9222 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xea>
    918a:	add.w	r7, r0, fp
    918e:	add.w	r3, r0, #512	; 0x200
    9192:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    9196:	tst	r4, r2
    9198:	ite	ne
    919a:	movne	r6, #1
    919c:	moveq	r6, #0
    919e:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    91a0:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    91a4:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    91a8:	beq.n	91d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    91aa:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    91ac:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    91b0:	beq.n	9202 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xca>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    91b2:	ands.w	r4, r4, #255	; 0xff
    91b6:	bne.n	9196 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5e>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    91b8:	cmp	r3, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    91ba:	mov	fp, r4
    91bc:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    91c0:	bne.n	9192 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
    91c2:	b.n	9178 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    91c4:	cmp	r1, r3
    91c6:	bhi.n	9160 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    91c8:	cmp	r2, r3
    91ca:	bls.n	9160 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    91cc:	cmp	r2, r0
    91ce:	it	cs
    91d0:	movcs	r2, #0
    91d2:	str.w	r2, [r9, #1056]	; 0x420
    91d6:	b.n	9160 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    91d8:	movs	r1, #10
    91da:	ldr	r0, [pc, #96]	; (923c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x104>)
    91dc:	bl	fe48 <usb_serial_write>
    91e0:	movs	r1, #108	; 0x6c
    91e2:	ldr	r0, [pc, #92]	; (9240 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x108>)
    91e4:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    91e8:	movs	r0, #46	; 0x2e
    91ea:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    91ee:	movs	r1, #113	; 0x71
    91f0:	ldr	r0, [pc, #80]	; (9244 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x10c>)
    91f2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    91f6:	ldr	r0, [pc, #76]	; (9244 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x10c>)
    91f8:	bl	11800 <Print::println()>
    }
    i = 0;
  }

 fail:
  return false;
    91fc:	movs	r0, #0
    91fe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    9202:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    9204:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9208:	movs	r1, #10
    920a:	ldr	r0, [pc, #48]	; (923c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x104>)
    920c:	bl	fe48 <usb_serial_write>
    9210:	movs	r1, #108	; 0x6c
    9212:	ldr	r0, [pc, #44]	; (9240 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x108>)
    9214:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9218:	movs	r0, #46	; 0x2e
    921a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    921e:	movs	r1, #88	; 0x58
    9220:	b.n	91f0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9222:	movs	r1, #10
    9224:	ldr	r0, [pc, #20]	; (923c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x104>)
    9226:	bl	fe48 <usb_serial_write>
    922a:	movs	r1, #108	; 0x6c
    922c:	ldr	r0, [pc, #16]	; (9240 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x108>)
    922e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9232:	movs	r0, #46	; 0x2e
    9234:	bl	ff50 <usb_serial_putchar>
    9238:	movs	r1, #107	; 0x6b
    923a:	b.n	91f0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb8>
    923c:	.word	0x00016f6c
    9240:	.word	0x000170bc
    9244:	.word	0x1fff0b00

00009248 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    9248:	push	{r3, r4, r5, r6, r7, lr}
    924a:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    924c:	ldmia.w	r6, {r3, r5}
    9250:	ldr.w	r1, [r0, #1080]	; 0x438
    9254:	ldr.w	r4, [r0, #1068]	; 0x42c
    9258:	ldrb.w	r7, [r0, #1093]	; 0x445
    925c:	ands	r1, r5
    925e:	subs	r3, #2
    9260:	add.w	r1, r4, r1, lsr #9
    9264:	lsls	r3, r7
    9266:	add	r1, r3
    9268:	add.w	r0, r0, #528	; 0x210
    926c:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    9270:	cbz	r0, 927a <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    9272:	ldr	r3, [r6, #4]
    9274:	ubfx	r3, r3, #0, #9
    9278:	add	r0, r3
}
    927a:	pop	{r3, r4, r5, r6, r7, pc}

0000927c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
    }
  }
  return 1;
}
//------------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    927c:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    927e:	ldr.w	r3, [r0, #1072]	; 0x430
    9282:	adds	r3, #1
    9284:	cmp	r3, r1
    9286:	bcs.n	92b0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x34>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9288:	movs	r1, #10
    928a:	ldr	r0, [pc, #88]	; (92e4 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x68>)
    928c:	bl	fe48 <usb_serial_write>
    9290:	movs	r1, #108	; 0x6c
    9292:	ldr	r0, [pc, #84]	; (92e8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x6c>)
    9294:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9298:	movs	r0, #46	; 0x2e
    929a:	bl	ff50 <usb_serial_putchar>
    929e:	movs	r1, #173	; 0xad
    92a0:	ldr	r0, [pc, #72]	; (92ec <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x70>)
    92a2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    92a6:	ldr	r0, [pc, #68]	; (92ec <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x70>)
    92a8:	bl	11800 <Print::println()>
    DBG_FAIL_MACRO;
    return -1;
    92ac:	movs	r0, #255	; 0xff
    92ae:	pop	{r3, r4, r5, pc}
    92b0:	mov	r4, r1
    92b2:	ldr.w	r1, [r0, #1060]	; 0x424
    92b6:	mov	r5, r2
    92b8:	add.w	r0, r0, #528	; 0x210
    92bc:	add.w	r1, r1, r4, lsr #7
    92c0:	movs	r2, #0
    92c2:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    92c6:	cbz	r0, 92da <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x5e>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    92c8:	lsls	r4, r4, #2
    92ca:	ubfx	r4, r4, #0, #9
    92ce:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    92d0:	adds	r2, r3, #1
    92d2:	beq.n	92de <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x62>
    return 0;
  }
  *value = next;
    92d4:	str	r3, [r5, #0]
  return 1;
    92d6:	movs	r0, #1
    92d8:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    92da:	movs	r0, #255	; 0xff
    92dc:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    92de:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    92e0:	pop	{r3, r4, r5, pc}
    92e2:	nop
    92e4:	.word	0x00016f6c
    92e8:	.word	0x000170bc
    92ec:	.word	0x1fff0b00

000092f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    92f0:	push	{r4, r5, r6, lr}
    92f2:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    92f4:	ldr	r1, [r1, #4]
    92f6:	ldr.w	r3, [r0, #1080]	; 0x438
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    92fa:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    92fc:	adds	r0, r1, r2
    92fe:	str	r0, [r5, #4]
  tmp >>= bytesPerClusterShift();
    9300:	ldrb.w	r4, [r6, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9304:	ands	r3, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    9306:	adds	r4, #9
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9308:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    930a:	uxtb	r4, r4
    930c:	lsr.w	r4, r2, r4
  while (tmp--) {
    9310:	cbz	r4, 9322 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    9312:	ldrb	r3, [r5, #8]
    9314:	cbz	r3, 9326 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    9316:	ldr	r3, [r5, #0]
    9318:	adds	r3, #1
    931a:	str	r3, [r5, #0]
    931c:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    931e:	cmp	r4, #0
    9320:	bne.n	9312 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    9322:	movs	r0, #1
}
    9324:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9326:	mov	r2, r5
    9328:	ldr	r1, [r5, #0]
    932a:	mov	r0, r6
    932c:	bl	927c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    9330:	sxtb	r0, r0
      if (status != 1) {
    9332:	cmp	r0, #1
    9334:	beq.n	931c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    9336:	pop	{r4, r5, r6, pc}

00009338 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9338:	cmp	r1, #1
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    933a:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    933c:	bls.n	934a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    933e:	ldr.w	r3, [r0, #1072]	; 0x430
    9342:	adds	r3, #1
    9344:	cmp	r1, r3
    9346:	mov	r4, r1
    9348:	bls.n	9372 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    934a:	movs	r1, #10
    934c:	ldr	r0, [pc, #96]	; (93b0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x78>)
    934e:	bl	fe48 <usb_serial_write>
    9352:	movs	r1, #108	; 0x6c
    9354:	ldr	r0, [pc, #92]	; (93b4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x7c>)
    9356:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    935a:	movs	r0, #46	; 0x2e
    935c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9360:	movs	r1, #195	; 0xc3
    9362:	ldr	r0, [pc, #84]	; (93b8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x80>)
    9364:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9368:	ldr	r0, [pc, #76]	; (93b8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x80>)
    936a:	bl	11800 <Print::println()>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    936e:	movs	r0, #0
    9370:	pop	{r4, r5, r6, pc}
    9372:	ldr.w	r1, [r0, #1060]	; 0x424
    9376:	mov	r5, r2
    9378:	add.w	r0, r0, #528	; 0x210
    937c:	add.w	r1, r1, r4, lsr #7
    9380:	movs	r2, #1
    9382:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    9386:	mov	r6, r0
    9388:	cbz	r0, 9396 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x5e>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    938a:	lsls	r4, r4, #2
    938c:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    9390:	movs	r0, #1
    9392:	str	r5, [r6, r4]

 fail:
  return false;
}
    9394:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9396:	movs	r1, #10
    9398:	ldr	r0, [pc, #20]	; (93b0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x78>)
    939a:	bl	fe48 <usb_serial_write>
    939e:	movs	r1, #108	; 0x6c
    93a0:	ldr	r0, [pc, #16]	; (93b4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x7c>)
    93a2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    93a6:	movs	r0, #46	; 0x2e
    93a8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    93ac:	movs	r1, #201	; 0xc9
    93ae:	b.n	9362 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x2a>
    93b0:	.word	0x00016f6c
    93b4:	.word	0x000170bc
    93b8:	.word	0x1fff0b00

000093bc <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    93bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    93c0:	mov	r4, r1
    93c2:	sub	sp, #12
    93c4:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    93c6:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    93c8:	mov	r1, r4
    93ca:	add	r2, sp, #4
    93cc:	mov	r0, r6
    93ce:	bl	927c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    93d2:	movs	r2, #0
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    93d4:	sxtb	r5, r0
    if (status < 0) {
    93d6:	cmp	r5, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    93d8:	mov	r1, r4
    93da:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    93dc:	add.w	r4, r4, #1
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
    93e0:	blt.n	9452 <ExFatPartition::freeChain(unsigned long)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    93e2:	bl	9338 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    93e6:	rsb	r2, r8, r4
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    93ea:	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    93ec:	mov	r1, r8
    93ee:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    93f0:	cmp	r0, #0
    93f2:	beq.n	946c <ExFatPartition::freeChain(unsigned long)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    93f4:	ldr	r7, [sp, #4]
    93f6:	cmp	r4, r7
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    93f8:	mov	r0, r6
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    93fa:	bne.n	9440 <ExFatPartition::freeChain(unsigned long)+0x84>
    93fc:	cmp	r5, #0
    93fe:	bne.n	93c8 <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9400:	mov	r3, r5
    9402:	rsb	r2, r8, r4
    9406:	mov	r1, r8
    9408:	mov	r0, r6
    940a:	bl	9138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    940e:	cbnz	r0, 9438 <ExFatPartition::freeChain(unsigned long)+0x7c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9410:	movs	r1, #10
    9412:	ldr	r0, [pc, #132]	; (9498 <ExFatPartition::freeChain(unsigned long)+0xdc>)
    9414:	bl	fe48 <usb_serial_write>
    9418:	movs	r1, #108	; 0x6c
    941a:	ldr	r0, [pc, #128]	; (949c <ExFatPartition::freeChain(unsigned long)+0xe0>)
    941c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9420:	movs	r0, #46	; 0x2e
    9422:	bl	ff50 <usb_serial_putchar>
    9426:	movs	r1, #227	; 0xe3
    9428:	ldr	r0, [pc, #116]	; (94a0 <ExFatPartition::freeChain(unsigned long)+0xe4>)
    942a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    942e:	ldr	r0, [pc, #112]	; (94a0 <ExFatPartition::freeChain(unsigned long)+0xe4>)
    9430:	bl	11800 <Print::println()>
  } while (status);

  return true;

 fail:
  return false;
    9434:	mov.w	r9, #0
}
    9438:	mov	r0, r9
    943a:	add	sp, #12
    943c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9440:	bl	9138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9444:	cmp	r0, #0
    9446:	beq.n	9410 <ExFatPartition::freeChain(unsigned long)+0x54>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9448:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    944a:	cmp	r5, #0
    944c:	beq.n	9438 <ExFatPartition::freeChain(unsigned long)+0x7c>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    944e:	mov	r8, r4
    9450:	b.n	93c8 <ExFatPartition::freeChain(unsigned long)+0xc>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9452:	movs	r1, #10
    9454:	ldr	r0, [pc, #64]	; (9498 <ExFatPartition::freeChain(unsigned long)+0xdc>)
    9456:	bl	fe48 <usb_serial_write>
    945a:	movs	r1, #108	; 0x6c
    945c:	ldr	r0, [pc, #60]	; (949c <ExFatPartition::freeChain(unsigned long)+0xe0>)
    945e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9462:	movs	r0, #46	; 0x2e
    9464:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9468:	movs	r1, #218	; 0xda
    946a:	b.n	9428 <ExFatPartition::freeChain(unsigned long)+0x6c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    946c:	movs	r1, #10
    946e:	ldr	r0, [pc, #40]	; (9498 <ExFatPartition::freeChain(unsigned long)+0xdc>)
    9470:	bl	fe48 <usb_serial_write>
    9474:	movs	r1, #108	; 0x6c
    9476:	ldr	r0, [pc, #36]	; (949c <ExFatPartition::freeChain(unsigned long)+0xe0>)
    9478:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    947c:	movs	r0, #46	; 0x2e
    947e:	bl	ff50 <usb_serial_putchar>
    9482:	movs	r1, #222	; 0xde
    9484:	ldr	r0, [pc, #24]	; (94a0 <ExFatPartition::freeChain(unsigned long)+0xe4>)
    9486:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    948a:	ldr	r0, [pc, #20]	; (94a0 <ExFatPartition::freeChain(unsigned long)+0xe4>)
    948c:	bl	11800 <Print::println()>

  return true;

 fail:
  return false;
}
    9490:	mov	r0, r9
    9492:	add	sp, #12
    9494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9498:	.word	0x00016f6c
    949c:	.word	0x000170bc
    94a0:	.word	0x1fff0b00

000094a4 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    94a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    94a8:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    94aa:	ldr.w	r6, [r0, #1068]	; 0x42c

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    94ae:	mov	r8, r0
    94b0:	add.w	r7, r0, #528	; 0x210
  uint32_t nc = 0;
    94b4:	mov	r5, r4
    94b6:	mov	r1, r6
    94b8:	movs	r2, #0
    94ba:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    94bc:	adds	r6, #1
    94be:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    94c2:	cbz	r0, 9512 <ExFatPartition::freeClusterCount()+0x6e>
    94c4:	add.w	lr, r0, #4294967295
    94c8:	ldr.w	ip, [r8, #1072]	; 0x430
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    94cc:	ldrb.w	r0, [lr, #1]!
    94d0:	cmp	r0, #255	; 0xff
    94d2:	add.w	r9, r5, #4096	; 0x1000
    94d6:	beq.n	9500 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    94d8:	cbz	r0, 94ee <ExFatPartition::freeClusterCount()+0x4a>
    94da:	movs	r2, #8
    94dc:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    94de:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    94e0:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    94e4:	it	ne
    94e6:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    94e8:	subs	r2, #1
    94ea:	uxtb	r3, r1
    94ec:	bne.n	94de <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    94ee:	adds	r5, #8
      if (nc >= m_clusterCount) {
    94f0:	cmp	ip, r5
    94f2:	bls.n	950a <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    94f4:	cmp	r5, r9
    94f6:	beq.n	94b6 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    94f8:	ldrb.w	r0, [lr, #1]!
    94fc:	cmp	r0, #255	; 0xff
    94fe:	bne.n	94d8 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9500:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9502:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    9504:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    9508:	bhi.n	94f4 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    950a:	rsb	r0, r4, ip
    950e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    9512:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9516:	nop

00009518 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9518:	push	{r3, r4, r5, r6, r7, lr}
    951a:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    951c:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    951e:	mov.w	r6, #4294967295
    9522:	add.w	r7, r0, #528	; 0x210
  m_blockDev = dev;
    9526:	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    952a:	str	r1, [r0, #4]
    952c:	str.w	r1, [r0, #532]	; 0x214
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9530:	mov	r5, r2
    9532:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9534:	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9538:	strb	r3, [r4, #0]
    953a:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    953e:	str	r6, [r4, #12]
    9540:	str.w	r6, [r4, #540]	; 0x21c
    9544:	mov	r2, r3
    9546:	mov	r1, r3
    9548:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    954c:	cmp	r5, #4
    954e:	bhi.n	9600 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>
    9550:	mov	r6, r0
    9552:	cmp	r0, #0
    9554:	beq.n	9600 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    9556:	cbnz	r5, 959a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x82>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    9558:	movs	r2, #5
    955a:	ldr	r1, [pc, #304]	; (968c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x174>)
    955c:	adds	r0, r6, #3
    955e:	bl	1365c <strncmp>
    9562:	cmp	r0, #0
    9564:	bne.w	9670 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x158>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    9568:	ldrb.w	r3, [r6, #108]	; 0x6c
    956c:	cmp	r3, #9
    956e:	beq.n	961c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x104>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9570:	movs	r1, #10
    9572:	ldr	r0, [pc, #284]	; (9690 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x178>)
    9574:	bl	fe48 <usb_serial_write>
    9578:	movs	r1, #108	; 0x6c
    957a:	ldr	r0, [pc, #280]	; (9694 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x17c>)
    957c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9580:	movs	r0, #46	; 0x2e
    9582:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9586:	movw	r1, #307	; 0x133
    958a:	ldr	r0, [pc, #268]	; (9698 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x180>)
    958c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9590:	ldr	r0, [pc, #260]	; (9698 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x180>)
    9592:	bl	11800 <Print::println()>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    9596:	movs	r0, #0
    9598:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    959a:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    959c:	add.w	r3, r0, r3, lsl #4
    95a0:	ldrb.w	r2, [r3, #446]	; 0x1be
    95a4:	ands.w	r2, r2, #127	; 0x7f
    95a8:	beq.n	95c6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xae>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    95aa:	movs	r1, #10
    95ac:	ldr	r0, [pc, #224]	; (9690 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x178>)
    95ae:	bl	fe48 <usb_serial_write>
    95b2:	movs	r1, #108	; 0x6c
    95b4:	ldr	r0, [pc, #220]	; (9694 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x17c>)
    95b6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    95ba:	movs	r0, #46	; 0x2e
    95bc:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    95c0:	mov.w	r1, #290	; 0x122
    95c4:	b.n	958a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
    95c6:	ldrb.w	r3, [r3, #450]	; 0x1c2
    95ca:	cmp	r3, #0
    95cc:	beq.n	95aa <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x92>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    95ce:	add.w	r5, r0, r5, lsl #4
    95d2:	mov	r0, r7
    95d4:	ldr.w	r5, [r5, #438]	; 0x1b6
    95d8:	mov	r1, r5
    95da:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    95de:	mov	r6, r0
    95e0:	cmp	r0, #0
    95e2:	bne.n	9558 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x40>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    95e4:	movs	r1, #10
    95e6:	ldr	r0, [pc, #168]	; (9690 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x178>)
    95e8:	bl	fe48 <usb_serial_write>
    95ec:	movs	r1, #108	; 0x6c
    95ee:	ldr	r0, [pc, #164]	; (9694 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x17c>)
    95f0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    95f4:	movs	r0, #46	; 0x2e
    95f6:	bl	ff50 <usb_serial_putchar>
    95fa:	mov.w	r1, #296	; 0x128
    95fe:	b.n	958a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9600:	movs	r1, #10
    9602:	ldr	r0, [pc, #140]	; (9690 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x178>)
    9604:	bl	fe48 <usb_serial_write>
    9608:	movs	r1, #108	; 0x6c
    960a:	ldr	r0, [pc, #136]	; (9694 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x17c>)
    960c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9610:	movs	r0, #46	; 0x2e
    9612:	bl	ff50 <usb_serial_putchar>
    9616:	movw	r1, #283	; 0x11b
    961a:	b.n	958a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    961c:	ldr	r3, [r6, #80]	; 0x50
    961e:	add	r3, r5
    9620:	str.w	r3, [r4, #1060]	; 0x424
    9624:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    9626:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    962a:	ldr	r3, [r6, #88]	; 0x58
    962c:	add	r5, r3
    962e:	str.w	r5, [r4, #1068]	; 0x42c
    9632:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    9634:	str.w	r3, [r4, #1072]	; 0x430
    9638:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    963a:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    963e:	ldrb.w	r3, [r6, #109]	; 0x6d
    9642:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9646:	movs	r6, #1
    9648:	adds	r3, #9
    964a:	lsl.w	r3, r6, r3
  m_clusterMask = m_bytesPerCluster - 1;
    964e:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    9650:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    9654:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9656:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    965a:	str.w	r2, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    965e:	mov	r0, r4
    9660:	mov	r2, r6
    9662:	bl	9084 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    9666:	movs	r3, #64	; 0x40
    9668:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    966c:	mov	r0, r6

 fail:
  return false;
}
    966e:	pop	{r3, r4, r5, r6, r7, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9670:	movs	r1, #10
    9672:	ldr	r0, [pc, #28]	; (9690 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x178>)
    9674:	bl	fe48 <usb_serial_write>
    9678:	movs	r1, #108	; 0x6c
    967a:	ldr	r0, [pc, #24]	; (9694 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x17c>)
    967c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9680:	movs	r0, #46	; 0x2e
    9682:	bl	ff50 <usb_serial_putchar>
    9686:	mov.w	r1, #302	; 0x12e
    968a:	b.n	958a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
    968c:	.word	0x0001712c
    9690:	.word	0x00016f6c
    9694:	.word	0x000170bc
    9698:	.word	0x1fff0b00

0000969c <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    969c:	push	{r4, r5, r6, lr}
    969e:	sub	sp, #8
    96a0:	add	r6, sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    96a2:	ldr.w	r1, [r0, #1076]	; 0x434
    96a6:	str.w	r1, [r6, #-4]!

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    96aa:	mov	r5, r0
 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    96ac:	movs	r4, #0
    96ae:	b.n	96b8 <ExFatPartition::rootLength()+0x1c>
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    96b0:	add.w	r4, r4, #1
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    96b4:	beq.n	96c8 <ExFatPartition::rootLength()+0x2c>
    96b6:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    96b8:	mov	r2, r6
    96ba:	mov	r0, r5
    96bc:	bl	927c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    96c0:	sxtb	r0, r0
    if (status < 0) return 0;
    96c2:	cmp	r0, #0
    96c4:	bge.n	96b0 <ExFatPartition::rootLength()+0x14>
    96c6:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    96c8:	ldrb.w	r0, [r5, #1093]	; 0x445
    96cc:	adds	r0, #9
    96ce:	uxtb	r0, r0
}
    96d0:	lsl.w	r0, r4, r0
    96d4:	add	sp, #8
    96d6:	pop	{r4, r5, r6, pc}

000096d8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    96d8:	cbz	r3, 972c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return true;
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    96da:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    96dc:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    96de:	cmp	r4, #126	; 0x7e
    96e0:	bhi.n	9720 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    96e2:	add	r3, r2
    96e4:	adds	r5, r1, r3
    96e6:	add	r2, r1
    96e8:	adds	r0, #2
    96ea:	ldrb.w	r3, [r2], #1
    96ee:	uxtb	r4, r4
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    96f0:	sub.w	r1, r3, #97	; 0x61
    96f4:	cmp	r1, #25
    96f6:	sub.w	r1, r4, #97	; 0x61
    96fa:	ite	ls
    96fc:	movls	r6, #32
    96fe:	movhi	r6, #0
    9700:	cmp	r1, #25
    9702:	ite	ls
    9704:	movls	r1, #32
    9706:	movhi	r1, #0
    9708:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    970a:	subs	r4, r4, r1
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    970c:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    970e:	uxtb	r4, r4
    9710:	cmp	r4, r3
    9712:	bne.n	9720 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9714:	cmp	r2, r5
    9716:	beq.n	9726 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    9718:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    971c:	cmp	r4, #126	; 0x7e
    971e:	bls.n	96ea <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    9720:	movs	r0, #0
    }
  }
  return true;
}
    9722:	pop	{r4, r5, r6}
    9724:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9726:	movs	r0, #1
}
    9728:	pop	{r4, r5, r6}
    972a:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    972c:	movs	r0, #1
}
    972e:	bx	lr

00009730 <exFatHashName(char const*, unsigned int, unsigned short)>:
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9730:	cbz	r1, 9766 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
    hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    9732:	push	{r4}
    9734:	add	r1, r0
    9736:	lsls	r3, r2, #15
    9738:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    973c:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    9740:	sub.w	r4, r2, #97	; 0x61
    9744:	cmp	r4, #25
      c -= 'a' - 'A';
    9746:	itt	ls
    9748:	subls	r2, #32
    974a:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    974c:	uxtah	r2, r2, r3
    9750:	uxth	r2, r2
    9752:	lsls	r3, r2, #15
    9754:	orr.w	r2, r3, r2, lsr #1
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9758:	cmp	r1, r0
    975a:	uxth	r2, r2
    975c:	bne.n	9736 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    975e:	mov	r0, r2
    9760:	ldr.w	r4, [sp], #4
    9764:	bx	lr
    9766:	mov	r0, r2
    9768:	bx	lr
    976a:	nop

0000976c <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    976c:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    976e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9772:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9774:	ldr	r0, [r0, #32]
    9776:	cbz	r1, 977a <ExFatFile::addCluster()+0xe>
    9778:	adds	r1, #1
    977a:	movs	r2, #1
    977c:	bl	9084 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    9780:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9782:	mov	r6, r0
  if (find < 2) {
    9784:	bls.n	982e <ExFatFile::addCluster()+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    9786:	movs	r3, #1
    9788:	mov	r1, r0
    978a:	mov	r2, r3
    978c:	ldr	r0, [r4, #32]
    978e:	bl	9138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9792:	mov	r8, r0
    9794:	cmp	r0, #0
    9796:	beq.n	985c <ExFatFile::addCluster()+0xf0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9798:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    979a:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    979e:	cbnz	r0, 97b0 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    97a0:	orr.w	r3, r3, #64	; 0x40
    97a4:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    97a8:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    97aa:	mov	r0, r8
    97ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    97b0:	lsls	r2, r3, #25
    97b2:	bpl.n	97e0 <ExFatFile::addCluster()+0x74>
    if (find == (m_curCluster + 1)) {
    97b4:	adds	r2, r0, #1
    97b6:	cmp	r6, r2
    97b8:	beq.n	97a8 <ExFatFile::addCluster()+0x3c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    97ba:	bic.w	r2, r3, #64	; 0x40
    97be:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    97c2:	ldr	r3, [r4, #28]
    97c4:	b.n	97d6 <ExFatFile::addCluster()+0x6a>
      if (!m_vol->fatPut(c, c + 1)) {
    97c6:	ldr	r0, [r4, #32]
    97c8:	bl	9338 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    97cc:	mov	r7, r0
    97ce:	cmp	r0, #0
    97d0:	beq.n	9886 <ExFatFile::addCluster()+0x11a>
    97d2:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    97d4:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    97d6:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    97d8:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    97da:	mov	r1, r3
    97dc:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    97de:	bcc.n	97c6 <ExFatFile::addCluster()+0x5a>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    97e0:	mov.w	r2, #4294967295
    97e4:	mov	r1, r6
    97e6:	ldr	r0, [r4, #32]
    97e8:	bl	9338 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    97ec:	mov	r5, r0
    97ee:	cmp	r0, #0
    97f0:	beq.n	98ae <ExFatFile::addCluster()+0x142>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    97f2:	ldr	r1, [r4, #24]
    97f4:	cmp	r1, #0
    97f6:	beq.n	97a8 <ExFatFile::addCluster()+0x3c>
    if (!m_vol->fatPut(m_curCluster, find)) {
    97f8:	mov	r2, r6
    97fa:	ldr	r0, [r4, #32]
    97fc:	bl	9338 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9800:	mov	r5, r0
    9802:	cmp	r0, #0
    9804:	bne.n	97a8 <ExFatFile::addCluster()+0x3c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9806:	movs	r1, #10
    9808:	ldr	r0, [pc, #188]	; (98c8 <ExFatFile::addCluster()+0x15c>)
    980a:	bl	fe48 <usb_serial_write>
    980e:	movs	r1, #108	; 0x6c
    9810:	ldr	r0, [pc, #184]	; (98cc <ExFatFile::addCluster()+0x160>)
    9812:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9816:	movs	r0, #46	; 0x2e
    9818:	bl	ff50 <usb_serial_putchar>
    981c:	movs	r1, #109	; 0x6d
    981e:	ldr	r0, [pc, #176]	; (98d0 <ExFatFile::addCluster()+0x164>)
    9820:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9824:	ldr	r0, [pc, #168]	; (98d0 <ExFatFile::addCluster()+0x164>)
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    9826:	mov	r8, r5
    9828:	bl	11800 <Print::println()>
    982c:	b.n	97aa <ExFatFile::addCluster()+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    982e:	movs	r1, #10
    9830:	ldr	r0, [pc, #148]	; (98c8 <ExFatFile::addCluster()+0x15c>)
    9832:	bl	fe48 <usb_serial_write>
    9836:	movs	r1, #108	; 0x6c
    9838:	ldr	r0, [pc, #144]	; (98cc <ExFatFile::addCluster()+0x160>)
    983a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    983e:	movs	r0, #46	; 0x2e
    9840:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9844:	movs	r1, #76	; 0x4c
    9846:	ldr	r0, [pc, #136]	; (98d0 <ExFatFile::addCluster()+0x164>)
    9848:	bl	118cc <Print::print(long)>
    984c:	mov.w	r8, #0
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9850:	ldr	r0, [pc, #124]	; (98d0 <ExFatFile::addCluster()+0x164>)
    9852:	bl	11800 <Print::println()>
}
    9856:	mov	r0, r8
    9858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    985c:	movs	r1, #10
    985e:	ldr	r0, [pc, #104]	; (98c8 <ExFatFile::addCluster()+0x15c>)
    9860:	bl	fe48 <usb_serial_write>
    9864:	movs	r1, #108	; 0x6c
    9866:	ldr	r0, [pc, #100]	; (98cc <ExFatFile::addCluster()+0x160>)
    9868:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    986c:	movs	r0, #46	; 0x2e
    986e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9872:	movs	r1, #80	; 0x50
    9874:	ldr	r0, [pc, #88]	; (98d0 <ExFatFile::addCluster()+0x164>)
    9876:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    987a:	ldr	r0, [pc, #84]	; (98d0 <ExFatFile::addCluster()+0x164>)
    987c:	bl	11800 <Print::println()>
    9880:	mov	r0, r8
    9882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9886:	movs	r1, #10
    9888:	ldr	r0, [pc, #60]	; (98c8 <ExFatFile::addCluster()+0x15c>)
    988a:	bl	fe48 <usb_serial_write>
    988e:	movs	r1, #108	; 0x6c
    9890:	ldr	r0, [pc, #56]	; (98cc <ExFatFile::addCluster()+0x160>)
    9892:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9896:	movs	r0, #46	; 0x2e
    9898:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    989c:	movs	r1, #96	; 0x60
    989e:	ldr	r0, [pc, #48]	; (98d0 <ExFatFile::addCluster()+0x164>)
    98a0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    98a4:	ldr	r0, [pc, #40]	; (98d0 <ExFatFile::addCluster()+0x164>)
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    98a6:	mov	r8, r7
    98a8:	bl	11800 <Print::println()>
    98ac:	b.n	97aa <ExFatFile::addCluster()+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    98ae:	movs	r1, #10
    98b0:	ldr	r0, [pc, #20]	; (98c8 <ExFatFile::addCluster()+0x15c>)
    98b2:	bl	fe48 <usb_serial_write>
    98b6:	movs	r1, #108	; 0x6c
    98b8:	ldr	r0, [pc, #16]	; (98cc <ExFatFile::addCluster()+0x160>)
    98ba:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    98be:	movs	r0, #46	; 0x2e
    98c0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    98c4:	movs	r1, #103	; 0x67
    98c6:	b.n	981e <ExFatFile::addCluster()+0xb2>
    98c8:	.word	0x00016f6c
    98cc:	.word	0x00017134
    98d0:	.word	0x1fff0b00

000098d4 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    98d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    98d8:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    98dc:	mov	r6, r0
  DirPos_t pos = m_dirPos;
    98de:	ldmia.w	r3, {r0, r1, r2}
    98e2:	ldrb.w	r4, [r6, #51]	; 0x33

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    98e6:	sub	sp, #20
  DirPos_t pos = m_dirPos;
    98e8:	add	r7, sp, #4
  uint8_t* cache;
  if (!isWritable()) {
    98ea:	and.w	r3, r4, #2
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
    98ee:	stmia.w	r7, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    98f2:	cmp	r3, #0
    98f4:	beq.w	9a2c <ExFatFile::remove()+0x158>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    98f8:	ldr	r1, [r6, #28]
    98fa:	cmp	r1, #0
    98fc:	bne.n	9966 <ExFatFile::remove()+0x92>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    98fe:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    9900:	movs	r2, #1
    9902:	mov	r1, r7
    9904:	ldr	r0, [r6, #32]
    9906:	bl	9248 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    990a:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    990c:	mov	r5, r0
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    990e:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    9910:	cmp	r0, #0
    9912:	beq.n	99fe <ExFatFile::remove()+0x12a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    9914:	ldrb	r3, [r5, #0]
    9916:	and.w	r3, r3, #127	; 0x7f
    991a:	strb	r3, [r5, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    991c:	ldrb.w	r3, [r6, #48]	; 0x30
    9920:	cmp	r3, r4
    9922:	bcc.n	99ce <ExFatFile::remove()+0xfa>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    9924:	cmp	r4, #0
    9926:	beq.n	9900 <ExFatFile::remove()+0x2c>
    9928:	movs	r2, #32
    992a:	mov	r1, r7
    992c:	ldr	r0, [r6, #32]
    992e:	bl	92f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9932:	cmp	r0, #1
    9934:	beq.n	9900 <ExFatFile::remove()+0x2c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9936:	movs	r1, #10
    9938:	ldr	r0, [pc, #344]	; (9a94 <ExFatFile::remove()+0x1c0>)
    993a:	bl	fe48 <usb_serial_write>
    993e:	movs	r1, #108	; 0x6c
    9940:	ldr	r0, [pc, #340]	; (9a98 <ExFatFile::remove()+0x1c4>)
    9942:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9946:	movs	r0, #46	; 0x2e
    9948:	bl	ff50 <usb_serial_putchar>
    994c:	mov.w	r1, #286	; 0x11e
    9950:	ldr	r0, [pc, #328]	; (9a9c <ExFatFile::remove()+0x1c8>)
    9952:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9956:	ldr	r0, [pc, #324]	; (9a9c <ExFatFile::remove()+0x1c8>)
    9958:	bl	11800 <Print::println()>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    995c:	movs	r5, #0
}
    995e:	mov	r0, r5
    9960:	add	sp, #20
    9962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9966:	lsls	r3, r4, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    9968:	ldr	r0, [r6, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    996a:	bpl.n	9a5e <ExFatFile::remove()+0x18a>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    996c:	ldrd	r2, r3, [r6, #8]
    9970:	ldrb.w	r4, [r0, #1093]	; 0x445
    9974:	adds	r4, #9
    9976:	uxtb	r4, r4
    9978:	adds.w	r8, r2, #4294967295
    997c:	adc.w	r9, r3, #4294967295
    9980:	rsb	r5, r4, #32
    9984:	lsl.w	r5, r9, r5
    9988:	lsr.w	r2, r8, r4
    998c:	sub.w	r3, r4, #32
    9990:	orrs	r2, r5
    9992:	lsr.w	r3, r9, r3
    9996:	orrs	r2, r3
    9998:	adds	r2, #1
    999a:	movs	r3, #0
    999c:	bl	9138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    99a0:	mov	r5, r0
    99a2:	cmp	r0, #0
    99a4:	bne.n	98fe <ExFatFile::remove()+0x2a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    99a6:	movs	r1, #10
    99a8:	ldr	r0, [pc, #232]	; (9a94 <ExFatFile::remove()+0x1c0>)
    99aa:	bl	fe48 <usb_serial_write>
    99ae:	movs	r1, #108	; 0x6c
    99b0:	ldr	r0, [pc, #228]	; (9a98 <ExFatFile::remove()+0x1c4>)
    99b2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    99b6:	movs	r0, #46	; 0x2e
    99b8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    99bc:	movw	r1, #273	; 0x111
    99c0:	ldr	r0, [pc, #216]	; (9a9c <ExFatFile::remove()+0x1c8>)
    99c2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    99c6:	ldr	r0, [pc, #212]	; (9a9c <ExFatFile::remove()+0x1c8>)
    99c8:	bl	11800 <Print::println()>
    99cc:	b.n	995e <ExFatFile::remove()+0x8a>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    99ce:	ldr	r4, [r6, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    99d0:	movs	r3, #0
    99d2:	mov	r0, r4
    99d4:	strb.w	r3, [r6, #49]	; 0x31
  m_flags = 0;
    99d8:	strb.w	r3, [r6, #51]	; 0x33
    99dc:	bl	7c04 <FsCache::sync()>
    99e0:	cmp	r0, #0
    99e2:	beq.n	995c <ExFatFile::remove()+0x88>
    99e4:	add.w	r0, r4, #528	; 0x210
    99e8:	bl	7c04 <FsCache::sync()>
    99ec:	cmp	r0, #0
    99ee:	beq.n	995c <ExFatFile::remove()+0x88>
    99f0:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    99f4:	ldr	r3, [r0, #0]
    99f6:	ldr	r3, [r3, #24]
    99f8:	blx	r3
    99fa:	mov	r5, r0
    99fc:	b.n	995e <ExFatFile::remove()+0x8a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    99fe:	movs	r1, #10
    9a00:	ldr	r0, [pc, #144]	; (9a94 <ExFatFile::remove()+0x1c0>)
    9a02:	bl	fe48 <usb_serial_write>
    9a06:	movs	r1, #108	; 0x6c
    9a08:	ldr	r0, [pc, #140]	; (9a98 <ExFatFile::remove()+0x1c4>)
    9a0a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9a0e:	movs	r0, #46	; 0x2e
    9a10:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9a14:	movw	r1, #291	; 0x123
    9a18:	ldr	r0, [pc, #128]	; (9a9c <ExFatFile::remove()+0x1c8>)
    9a1a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9a1e:	ldr	r0, [pc, #124]	; (9a9c <ExFatFile::remove()+0x1c8>)
    9a20:	bl	11800 <Print::println()>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    9a24:	mov	r0, r5
    9a26:	add	sp, #20
    9a28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9a2c:	movs	r1, #10
    9a2e:	ldr	r0, [pc, #100]	; (9a94 <ExFatFile::remove()+0x1c0>)
    9a30:	and.w	r5, r3, #255	; 0xff
    9a34:	bl	fe48 <usb_serial_write>
    9a38:	movs	r1, #108	; 0x6c
    9a3a:	ldr	r0, [pc, #92]	; (9a98 <ExFatFile::remove()+0x1c4>)
    9a3c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9a40:	movs	r0, #46	; 0x2e
    9a42:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9a46:	movw	r1, #265	; 0x109
    9a4a:	ldr	r0, [pc, #80]	; (9a9c <ExFatFile::remove()+0x1c8>)
    9a4c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9a50:	ldr	r0, [pc, #72]	; (9a9c <ExFatFile::remove()+0x1c8>)
    9a52:	bl	11800 <Print::println()>
    9a56:	mov	r0, r5
    9a58:	add	sp, #20
    9a5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    9a5e:	bl	93bc <ExFatPartition::freeChain(unsigned long)>
    9a62:	mov	r5, r0
    9a64:	cmp	r0, #0
    9a66:	bne.w	98fe <ExFatFile::remove()+0x2a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9a6a:	movs	r1, #10
    9a6c:	ldr	r0, [pc, #36]	; (9a94 <ExFatFile::remove()+0x1c0>)
    9a6e:	bl	fe48 <usb_serial_write>
    9a72:	movs	r1, #108	; 0x6c
    9a74:	ldr	r0, [pc, #32]	; (9a98 <ExFatFile::remove()+0x1c4>)
    9a76:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9a7a:	movs	r0, #46	; 0x2e
    9a7c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9a80:	mov.w	r1, #278	; 0x116
    9a84:	ldr	r0, [pc, #20]	; (9a9c <ExFatFile::remove()+0x1c8>)
    9a86:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9a8a:	ldr	r0, [pc, #16]	; (9a9c <ExFatFile::remove()+0x1c8>)
    9a8c:	bl	11800 <Print::println()>
    9a90:	b.n	995e <ExFatFile::remove()+0x8a>
    9a92:	nop
    9a94:	.word	0x00016f6c
    9a98:	.word	0x00017134
    9a9c:	.word	0x1fff0b00

00009aa0 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    9aa0:	push	{r4, r5, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    9aa2:	ldrb.w	r3, [r0, #49]	; 0x31
    9aa6:	and.w	r3, r3, #16

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    9aaa:	sub	sp, #36	; 0x24
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    9aac:	cbz	r3, 9af2 <ExFatFile::rmdir()+0x52>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    9aae:	movs	r2, #0
    9ab0:	movs	r3, #0
    9ab2:	mov	r4, r0
    9ab4:	bl	83c0 <ExFatFile::seekSet(unsigned long long)>
    9ab8:	b.n	9ac8 <ExFatFile::rmdir()+0x28>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    9aba:	cmp	r0, #32
    9abc:	bne.n	9b1e <ExFatFile::rmdir()+0x7e>
    9abe:	ldrb.w	r3, [sp]
    9ac2:	lsls	r2, r3, #24
    9ac4:	bmi.n	9b1e <ExFatFile::rmdir()+0x7e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    9ac6:	cbz	r3, 9ad6 <ExFatFile::rmdir()+0x36>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    9ac8:	movs	r2, #32
    9aca:	mov	r1, sp
    9acc:	mov	r0, r4
    9ace:	bl	80ec <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    9ad2:	cmp	r0, #0
    9ad4:	bne.n	9aba <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    9ad6:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9ada:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    9adc:	orr.w	r3, r3, #2
    9ae0:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9ae4:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    9ae8:	mov	r0, r4
    9aea:	bl	98d4 <ExFatFile::remove()>

 fail:
  return false;
}
    9aee:	add	sp, #36	; 0x24
    9af0:	pop	{r4, r5, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9af2:	movs	r1, #10
    9af4:	ldr	r0, [pc, #68]	; (9b3c <ExFatFile::rmdir()+0x9c>)
    9af6:	bl	fe48 <usb_serial_write>
    9afa:	movs	r1, #108	; 0x6c
    9afc:	ldr	r0, [pc, #64]	; (9b40 <ExFatFile::rmdir()+0xa0>)
    9afe:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9b02:	movs	r0, #46	; 0x2e
    9b04:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9b08:	movw	r1, #353	; 0x161
    9b0c:	ldr	r0, [pc, #52]	; (9b44 <ExFatFile::rmdir()+0xa4>)
    9b0e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9b12:	ldr	r0, [pc, #48]	; (9b44 <ExFatFile::rmdir()+0xa4>)
    9b14:	bl	11800 <Print::println()>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9b18:	movs	r0, #0
}
    9b1a:	add	sp, #36	; 0x24
    9b1c:	pop	{r4, r5, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9b1e:	movs	r1, #10
    9b20:	ldr	r0, [pc, #24]	; (9b3c <ExFatFile::rmdir()+0x9c>)
    9b22:	bl	fe48 <usb_serial_write>
    9b26:	movs	r1, #108	; 0x6c
    9b28:	ldr	r0, [pc, #20]	; (9b40 <ExFatFile::rmdir()+0xa0>)
    9b2a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9b2e:	movs	r0, #46	; 0x2e
    9b30:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9b34:	movw	r1, #365	; 0x16d
    9b38:	b.n	9b0c <ExFatFile::rmdir()+0x6c>
    9b3a:	nop
    9b3c:	.word	0x00016f6c
    9b40:	.word	0x00017134
    9b44:	.word	0x1fff0b00

00009b48 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9b48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9b4c:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9b50:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9b52:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9b56:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9b58:	add.w	r8, sp, #12
    9b5c:	stmia.w	r8, {r0, r1, r2}
    9b60:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    9b62:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    9b64:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    9b66:	movs	r2, #0
    9b68:	mov	r1, r8
    9b6a:	ldr	r0, [r6, #32]
    9b6c:	bl	9248 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    9b70:	uxtb.w	r9, r7
    if (!cache) {
    9b74:	mov	r5, r0
    9b76:	cmp	r0, #0
    9b78:	beq.w	9ca2 <ExFatFile::syncDir()+0x15a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    9b7c:	ldrb	r3, [r0, #0]
    9b7e:	cmp	r3, #192	; 0xc0
    9b80:	beq.n	9bc6 <ExFatFile::syncDir()+0x7e>
    9b82:	cmp	r3, #193	; 0xc1
    9b84:	beq.w	9c9e <ExFatFile::syncDir()+0x156>
    9b88:	cmp	r3, #133	; 0x85
    9b8a:	beq.n	9c64 <ExFatFile::syncDir()+0x11c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9b8c:	movs	r1, #10
    9b8e:	ldr	r0, [pc, #448]	; (9d50 <ExFatFile::syncDir()+0x208>)
    9b90:	bl	fe48 <usb_serial_write>
    9b94:	movs	r1, #108	; 0x6c
    9b96:	ldr	r0, [pc, #444]	; (9d54 <ExFatFile::syncDir()+0x20c>)
    9b98:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9b9c:	movs	r0, #46	; 0x2e
    9b9e:	bl	ff50 <usb_serial_putchar>
    9ba2:	movw	r1, #451	; 0x1c3
    9ba6:	ldr	r0, [pc, #432]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9ba8:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9bac:	ldr	r0, [pc, #424]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9bae:	bl	11800 <Print::println()>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9bb2:	ldrb.w	r3, [r6, #50]	; 0x32
    9bb6:	orr.w	r3, r3, #1
    9bba:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    9bbe:	movs	r0, #0
}
    9bc0:	add	sp, #28
    9bc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    9bc6:	ldrb.w	r3, [r6, #51]	; 0x33
    9bca:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    9bce:	ldrb	r3, [r0, #1]
    9bd0:	ite	ne
    9bd2:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    9bd6:	biceq.w	r3, r3, #2
    9bda:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    9bdc:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    9be0:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    9be4:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    9be8:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    9bea:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    9bec:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    9bf0:	ldr	r2, [r6, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    9bf2:	ldrb.w	r3, [r2, #528]	; 0x210
    9bf6:	orr.w	r3, r3, #1
    9bfa:	strb.w	r3, [r2, #528]	; 0x210
    9bfe:	ldrb	r0, [r5, #0]
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9c00:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9c02:	ldrb	r2, [r5, r1]
    9c04:	lsls	r3, r4, #15
    9c06:	orr.w	r4, r3, r4, lsr #1
    9c0a:	uxtah	r4, r2, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9c0e:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9c10:	uxth	r4, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9c12:	add.w	r1, r1, #1
    9c16:	beq.n	9c5a <ExFatFile::syncDir()+0x112>
    9c18:	cmp	r1, #31
    9c1a:	bls.n	9c02 <ExFatFile::syncDir()+0xba>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    9c1c:	cmp	sl, r9
    9c1e:	beq.n	9cca <ExFatFile::syncDir()+0x182>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    9c20:	movs	r2, #32
    9c22:	mov	r1, r8
    9c24:	ldr	r0, [r6, #32]
    9c26:	bl	92f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9c2a:	cmp	r0, #1
    9c2c:	add.w	r7, r7, #1
    9c30:	beq.n	9b66 <ExFatFile::syncDir()+0x1e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9c32:	movs	r1, #10
    9c34:	ldr	r0, [pc, #280]	; (9d50 <ExFatFile::syncDir()+0x208>)
    9c36:	bl	fe48 <usb_serial_write>
    9c3a:	movs	r1, #108	; 0x6c
    9c3c:	ldr	r0, [pc, #276]	; (9d54 <ExFatFile::syncDir()+0x20c>)
    9c3e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9c42:	movs	r0, #46	; 0x2e
    9c44:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9c48:	mov.w	r1, #458	; 0x1ca
    9c4c:	ldr	r0, [pc, #264]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9c4e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9c52:	ldr	r0, [pc, #260]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9c54:	bl	11800 <Print::println()>
    9c58:	b.n	9bb2 <ExFatFile::syncDir()+0x6a>
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9c5a:	cmp	r0, #133	; 0x85
    9c5c:	ite	eq
    9c5e:	moveq	r1, #4
    9c60:	movne	r1, #2
    9c62:	b.n	9c02 <ExFatFile::syncDir()+0xba>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9c64:	ldr	r3, [pc, #244]	; (9d5c <ExFatFile::syncDir()+0x214>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9c66:	ldrb.w	r2, [r6, #49]	; 0x31
    9c6a:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    9c6c:	ldrb.w	sl, [r0, #1]
    9c70:	and.w	r2, r2, #55	; 0x37
    9c74:	strh	r2, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9c76:	cmp	r3, #0
    9c78:	beq.n	9bf0 <ExFatFile::syncDir()+0xa8>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    9c7a:	add.w	r2, sp, #7
    9c7e:	add.w	r1, sp, #10
    9c82:	add	r0, sp, #8
    9c84:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    9c86:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    9c8a:	ldrh.w	r3, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    9c8e:	ldrb.w	r1, [sp, #7]
    9c92:	strb	r1, [r5, #21]
    9c94:	strh	r2, [r5, #12]
    9c96:	strh	r2, [r5, #16]
    9c98:	strh	r3, [r5, #14]
    9c9a:	strh	r3, [r5, #18]
    9c9c:	b.n	9bf0 <ExFatFile::syncDir()+0xa8>
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    9c9e:	mov	r0, r3
    9ca0:	b.n	9c00 <ExFatFile::syncDir()+0xb8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9ca2:	movs	r1, #10
    9ca4:	ldr	r0, [pc, #168]	; (9d50 <ExFatFile::syncDir()+0x208>)
    9ca6:	bl	fe48 <usb_serial_write>
    9caa:	movs	r1, #108	; 0x6c
    9cac:	ldr	r0, [pc, #164]	; (9d54 <ExFatFile::syncDir()+0x20c>)
    9cae:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9cb2:	movs	r0, #46	; 0x2e
    9cb4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9cb8:	movw	r1, #413	; 0x19d
    9cbc:	ldr	r0, [pc, #152]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9cbe:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9cc2:	ldr	r0, [pc, #148]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9cc4:	bl	11800 <Print::println()>
    9cc8:	b.n	9bb2 <ExFatFile::syncDir()+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    9cca:	mov	r1, fp
    9ccc:	movs	r2, #1
    9cce:	ldr	r0, [r6, #32]
    9cd0:	bl	9248 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    9cd4:	cbz	r0, 9d0a <ExFatFile::syncDir()+0x1c2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    9cd6:	ldr	r5, [r6, #32]
    9cd8:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9cda:	mov	r0, r5
    9cdc:	bl	7c04 <FsCache::sync()>
    9ce0:	cbnz	r0, 9d32 <ExFatFile::syncDir()+0x1ea>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9ce2:	movs	r1, #10
    9ce4:	ldr	r0, [pc, #104]	; (9d50 <ExFatFile::syncDir()+0x208>)
    9ce6:	bl	fe48 <usb_serial_write>
    9cea:	movs	r1, #108	; 0x6c
    9cec:	ldr	r0, [pc, #100]	; (9d54 <ExFatFile::syncDir()+0x20c>)
    9cee:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9cf2:	movs	r0, #46	; 0x2e
    9cf4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9cf8:	mov.w	r1, #470	; 0x1d6
    9cfc:	ldr	r0, [pc, #88]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9cfe:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9d02:	ldr	r0, [pc, #84]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9d04:	bl	11800 <Print::println()>
    9d08:	b.n	9bb2 <ExFatFile::syncDir()+0x6a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9d0a:	movs	r1, #10
    9d0c:	ldr	r0, [pc, #64]	; (9d50 <ExFatFile::syncDir()+0x208>)
    9d0e:	bl	fe48 <usb_serial_write>
    9d12:	movs	r1, #108	; 0x6c
    9d14:	ldr	r0, [pc, #60]	; (9d54 <ExFatFile::syncDir()+0x20c>)
    9d16:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9d1a:	movs	r0, #46	; 0x2e
    9d1c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9d20:	movw	r1, #465	; 0x1d1
    9d24:	ldr	r0, [pc, #48]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9d26:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9d2a:	ldr	r0, [pc, #44]	; (9d58 <ExFatFile::syncDir()+0x210>)
    9d2c:	bl	11800 <Print::println()>
    9d30:	b.n	9bb2 <ExFatFile::syncDir()+0x6a>
    9d32:	add.w	r0, r5, #528	; 0x210
    9d36:	bl	7c04 <FsCache::sync()>
    9d3a:	cmp	r0, #0
    9d3c:	beq.n	9ce2 <ExFatFile::syncDir()+0x19a>
    9d3e:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9d42:	ldr	r3, [r0, #0]
    9d44:	ldr	r3, [r3, #24]
    9d46:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9d48:	cmp	r0, #0
    9d4a:	beq.n	9ce2 <ExFatFile::syncDir()+0x19a>
    9d4c:	b.n	9bc0 <ExFatFile::syncDir()+0x78>
    9d4e:	nop
    9d50:	.word	0x00016f6c
    9d54:	.word	0x00017134
    9d58:	.word	0x1fff0b00
    9d5c:	.word	0x1fff2448

00009d60 <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    9d60:	ldrb.w	r2, [r0, #49]	; 0x31
    9d64:	cbz	r2, 9db2 <ExFatFile::sync()+0x52>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    9d66:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    9d68:	ldrb.w	r2, [r0, #51]	; 0x33
    9d6c:	lsls	r1, r2, #24
    9d6e:	bmi.n	9db6 <ExFatFile::sync()+0x56>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    9d70:	ldr	r5, [r0, #32]
    9d72:	mov	r4, r0
    9d74:	mov	r0, r5
    9d76:	bl	7c04 <FsCache::sync()>
    9d7a:	cbnz	r0, 9dc6 <ExFatFile::sync()+0x66>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9d7c:	movs	r1, #10
    9d7e:	ldr	r0, [pc, #100]	; (9de4 <ExFatFile::sync()+0x84>)
    9d80:	bl	fe48 <usb_serial_write>
    9d84:	movs	r1, #108	; 0x6c
    9d86:	ldr	r0, [pc, #96]	; (9de8 <ExFatFile::sync()+0x88>)
    9d88:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9d8c:	movs	r0, #46	; 0x2e
    9d8e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9d92:	movw	r1, #391	; 0x187
    9d96:	ldr	r0, [pc, #84]	; (9dec <ExFatFile::sync()+0x8c>)
    9d98:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9d9c:	ldr	r0, [pc, #76]	; (9dec <ExFatFile::sync()+0x8c>)
    9d9e:	bl	11800 <Print::println()>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9da2:	ldrb.w	r3, [r4, #50]	; 0x32
    9da6:	orr.w	r3, r3, #1
    9daa:	strb.w	r3, [r4, #50]	; 0x32
    9dae:	movs	r0, #0
  return false;
}
    9db0:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    9db2:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    9db4:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    9db6:	and.w	r2, r2, #127	; 0x7f
    9dba:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    9dbe:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    9dc2:	b.w	9b48 <ExFatFile::syncDir()>
    9dc6:	add.w	r0, r5, #528	; 0x210
    9dca:	bl	7c04 <FsCache::sync()>
    9dce:	cmp	r0, #0
    9dd0:	beq.n	9d7c <ExFatFile::sync()+0x1c>
    9dd2:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9dd6:	ldr	r3, [r0, #0]
    9dd8:	ldr	r3, [r3, #24]
    9dda:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9ddc:	cmp	r0, #0
    9dde:	beq.n	9d7c <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    9de0:	movs	r0, #1
    9de2:	pop	{r3, r4, r5, pc}
    9de4:	.word	0x00016f6c
    9de8:	.word	0x00017134
    9dec:	.word	0x1fff0b00

00009df0 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    9df0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9df4:	ldrb.w	r3, [r0, #49]	; 0x31
    9df8:	lsls	r1, r3, #25

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    9dfa:	mov	r8, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9dfc:	bmi.w	9f0a <ExFatFile::addDirCluster()+0x11a>
    9e00:	ldr	r0, [r0, #8]
    9e02:	ldr.w	r3, [r8, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    9e06:	ldr.w	r3, [r3, #1084]	; 0x43c
    9e0a:	add	r0, r3
    9e0c:	cmp.w	r0, #67108864	; 0x4000000
    9e10:	bcs.n	9ee0 <ExFatFile::addDirCluster()+0xf0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    9e12:	mov	r0, r8
    9e14:	bl	976c <ExFatFile::addCluster()>
    9e18:	cmp	r0, #0
    9e1a:	beq.n	9eb6 <ExFatFile::addDirCluster()+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    9e1c:	ldr.w	r5, [r8, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    9e20:	ldrb.w	r3, [r5, #528]	; 0x210
    9e24:	lsls	r2, r3, #31
    9e26:	bmi.w	9f50 <ExFatFile::addDirCluster()+0x160>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    9e2a:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9e2e:	movs	r4, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    9e30:	add.w	r7, r5, #544	; 0x220
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    9e34:	str.w	r3, [r5, #540]	; 0x21c
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9e38:	strb.w	r4, [r5, #528]	; 0x210
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    9e3c:	mov	r1, r4
    9e3e:	mov.w	r2, #512	; 0x200
    9e42:	mov	r0, r7
    9e44:	bl	12f4c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    9e48:	ldr.w	r2, [r8, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    9e4c:	ldr.w	r3, [r8, #24]
    9e50:	ldrb.w	r0, [r2, #1093]	; 0x445
    9e54:	ldr.w	r1, [r2, #1068]	; 0x42c
    9e58:	subs	r3, #2
    9e5a:	lsls	r3, r0
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    9e5c:	movs	r5, #1
    9e5e:	adds	r6, r3, r1
    9e60:	lsls.w	r3, r5, r0
    9e64:	bne.n	9e78 <ExFatFile::addDirCluster()+0x88>
    9e66:	b.n	9f12 <ExFatFile::addDirCluster()+0x122>
    9e68:	ldr.w	r2, [r8, #32]
    9e6c:	ldrb.w	r3, [r2, #1093]	; 0x445
    9e70:	lsl.w	r3, r5, r3
    9e74:	cmp	r3, r4
    9e76:	bls.n	9f12 <ExFatFile::addDirCluster()+0x122>
    9e78:	ldr.w	r0, [r2, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    9e7c:	ldr	r3, [r0, #0]
    9e7e:	adds	r1, r6, r4
    9e80:	ldr	r3, [r3, #28]
    9e82:	mov	r2, r7
    9e84:	blx	r3
    9e86:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    9e88:	cmp	r0, #0
    9e8a:	bne.n	9e68 <ExFatFile::addDirCluster()+0x78>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9e8c:	movs	r1, #10
    9e8e:	ldr	r0, [pc, #244]	; (9f84 <ExFatFile::addDirCluster()+0x194>)
    9e90:	bl	fe48 <usb_serial_write>
    9e94:	movs	r1, #108	; 0x6c
    9e96:	ldr	r0, [pc, #240]	; (9f88 <ExFatFile::addDirCluster()+0x198>)
    9e98:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9e9c:	movs	r0, #46	; 0x2e
    9e9e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9ea2:	movs	r1, #144	; 0x90
    9ea4:	ldr	r0, [pc, #228]	; (9f8c <ExFatFile::addDirCluster()+0x19c>)
    9ea6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9eaa:	ldr	r0, [pc, #224]	; (9f8c <ExFatFile::addDirCluster()+0x19c>)
    9eac:	bl	11800 <Print::println()>
  }
  return sync();

 fail:
  return false;
}
    9eb0:	movs	r0, #0
    9eb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9eb6:	movs	r1, #10
    9eb8:	ldr	r0, [pc, #200]	; (9f84 <ExFatFile::addDirCluster()+0x194>)
    9eba:	bl	fe48 <usb_serial_write>
    9ebe:	movs	r1, #108	; 0x6c
    9ec0:	ldr	r0, [pc, #196]	; (9f88 <ExFatFile::addDirCluster()+0x198>)
    9ec2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9ec6:	movs	r0, #46	; 0x2e
    9ec8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9ecc:	movs	r1, #132	; 0x84
    9ece:	ldr	r0, [pc, #188]	; (9f8c <ExFatFile::addDirCluster()+0x19c>)
    9ed0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9ed4:	ldr	r0, [pc, #180]	; (9f8c <ExFatFile::addDirCluster()+0x19c>)
    9ed6:	bl	11800 <Print::println()>
    9eda:	movs	r0, #0
    9edc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9ee0:	movs	r1, #10
    9ee2:	ldr	r0, [pc, #160]	; (9f84 <ExFatFile::addDirCluster()+0x194>)
    9ee4:	bl	fe48 <usb_serial_write>
    9ee8:	movs	r1, #108	; 0x6c
    9eea:	ldr	r0, [pc, #156]	; (9f88 <ExFatFile::addDirCluster()+0x198>)
    9eec:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9ef0:	movs	r0, #46	; 0x2e
    9ef2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9ef6:	movs	r1, #128	; 0x80
    9ef8:	ldr	r0, [pc, #144]	; (9f8c <ExFatFile::addDirCluster()+0x19c>)
    9efa:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9efe:	ldr	r0, [pc, #140]	; (9f8c <ExFatFile::addDirCluster()+0x19c>)
    9f00:	bl	11800 <Print::println()>
    9f04:	movs	r0, #0
    9f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9f0a:	ldr	r0, [r0, #32]
    9f0c:	bl	969c <ExFatPartition::rootLength()>
    9f10:	b.n	9e02 <ExFatFile::addDirCluster()+0x12>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    9f12:	ldrb.w	r3, [r8, #49]	; 0x31
    9f16:	lsls	r3, r3, #25
    9f18:	bmi.n	9f46 <ExFatFile::addDirCluster()+0x156>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9f1a:	ldrb.w	r3, [r8, #51]	; 0x33
    9f1e:	orn	r3, r3, #127	; 0x7f
    9f22:	strb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    9f26:	ldr.w	r4, [r2, #1084]	; 0x43c
    9f2a:	ldrd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    9f2e:	ldrd	r0, r1, [r8, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    9f32:	adds	r2, r2, r4
    9f34:	mov.w	r5, #0
    9f38:	adcs	r3, r5
    m_validLength += m_vol->bytesPerCluster();
    9f3a:	adds	r0, r0, r4
    9f3c:	adcs	r1, r5
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    9f3e:	strd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    9f42:	strd	r0, r1, [r8, #16]
  }
  return sync();
    9f46:	mov	r0, r8

 fail:
  return false;
}
    9f48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    9f4c:	b.w	9d60 <ExFatFile::sync()>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    9f50:	add.w	r0, r5, #528	; 0x210
    9f54:	bl	7c04 <FsCache::sync()>
    9f58:	cmp	r0, #0
    9f5a:	bne.w	9e2a <ExFatFile::addDirCluster()+0x3a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9f5e:	movs	r1, #10
    9f60:	ldr	r0, [pc, #32]	; (9f84 <ExFatFile::addDirCluster()+0x194>)
    9f62:	bl	fe48 <usb_serial_write>
    9f66:	movs	r1, #108	; 0x6c
    9f68:	ldr	r0, [pc, #28]	; (9f88 <ExFatFile::addDirCluster()+0x198>)
    9f6a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9f6e:	movs	r0, #46	; 0x2e
    9f70:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9f74:	movs	r1, #137	; 0x89
    9f76:	ldr	r0, [pc, #20]	; (9f8c <ExFatFile::addDirCluster()+0x19c>)
    9f78:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9f7c:	ldr	r0, [pc, #12]	; (9f8c <ExFatFile::addDirCluster()+0x19c>)
    9f7e:	bl	11800 <Print::println()>
    9f82:	b.n	9eda <ExFatFile::addDirCluster()+0xea>
    9f84:	.word	0x00016f6c
    9f88:	.word	0x00017134
    9f8c:	.word	0x1fff0b00

00009f90 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    9f90:	push	{r4, r5, lr}
  if (!parent->isDir()) {
    9f92:	ldrb.w	r3, [r1, #49]	; 0x31
    9f96:	tst.w	r3, #80	; 0x50

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    9f9a:	sub	sp, #12
  if (!parent->isDir()) {
    9f9c:	beq.n	a00a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x7a>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    9f9e:	movw	r5, #2562	; 0xa02
    9fa2:	ldrb	r3, [r2, #0]
    9fa4:	ldr	r2, [r2, #4]
    9fa6:	str	r5, [sp, #0]
    9fa8:	mov	r4, r0
    9faa:	bl	8544 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    9fae:	cbz	r0, 9fe0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    9fb0:	movs	r3, #16
    9fb2:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    9fb6:	mov	r0, r4
    9fb8:	bl	9df0 <ExFatFile::addDirCluster()>
    9fbc:	cmp	r0, #0
    9fbe:	beq.n	a034 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    9fc0:	ldr	r3, [r4, #24]
    9fc2:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    9fc4:	movs	r2, #0
    9fc6:	movs	r3, #0
    9fc8:	mov	r0, r4
    9fca:	bl	83c0 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    9fce:	movs	r3, #193	; 0xc1
  return sync();
    9fd0:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    9fd2:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    9fd6:	add	sp, #12
    9fd8:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    9fdc:	b.w	9d60 <ExFatFile::sync()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9fe0:	movs	r1, #10
    9fe2:	ldr	r0, [pc, #124]	; (a060 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd0>)
    9fe4:	bl	fe48 <usb_serial_write>
    9fe8:	movs	r1, #108	; 0x6c
    9fea:	ldr	r0, [pc, #120]	; (a064 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd4>)
    9fec:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9ff0:	movs	r0, #46	; 0x2e
    9ff2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    9ff6:	movs	r1, #208	; 0xd0
    9ff8:	ldr	r0, [pc, #108]	; (a068 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd8>)
    9ffa:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    9ffe:	ldr	r0, [pc, #104]	; (a068 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd8>)
    a000:	bl	11800 <Print::println()>

 fail:
  return false;
}
    a004:	movs	r0, #0
    a006:	add	sp, #12
    a008:	pop	{r4, r5, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a00a:	movs	r1, #10
    a00c:	ldr	r0, [pc, #80]	; (a060 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd0>)
    a00e:	bl	fe48 <usb_serial_write>
    a012:	movs	r1, #108	; 0x6c
    a014:	ldr	r0, [pc, #76]	; (a064 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd4>)
    a016:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a01a:	movs	r0, #46	; 0x2e
    a01c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a020:	movs	r1, #203	; 0xcb
    a022:	ldr	r0, [pc, #68]	; (a068 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd8>)
    a024:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a028:	ldr	r0, [pc, #60]	; (a068 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd8>)
    a02a:	bl	11800 <Print::println()>
    a02e:	movs	r0, #0
    a030:	add	sp, #12
    a032:	pop	{r4, r5, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a034:	movs	r1, #10
    a036:	ldr	r0, [pc, #40]	; (a060 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd0>)
    a038:	bl	fe48 <usb_serial_write>
    a03c:	movs	r1, #108	; 0x6c
    a03e:	ldr	r0, [pc, #36]	; (a064 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd4>)
    a040:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a044:	movs	r0, #46	; 0x2e
    a046:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a04a:	movs	r1, #217	; 0xd9
    a04c:	ldr	r0, [pc, #24]	; (a068 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd8>)
    a04e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a052:	ldr	r0, [pc, #20]	; (a068 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xd8>)
    a054:	bl	11800 <Print::println()>
    a058:	movs	r0, #0
    a05a:	add	sp, #12
    a05c:	pop	{r4, r5, pc}
    a05e:	nop
    a060:	.word	0x00016f6c
    a064:	.word	0x00017134
    a068:	.word	0x1fff0b00

0000a06c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a06c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a070:	mov	r6, r0
    a072:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a074:	ldrb.w	r4, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a078:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a07a:	movs	r0, #0
    a07c:	strb.w	r0, [sp, #73]	; 0x49
    a080:	strb.w	r0, [sp, #74]	; 0x4a
    a084:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a088:	cmp	r4, #0
    a08a:	bne.n	a126 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    a08c:	mov	r9, r3
    a08e:	ldrb.w	r3, [r1, #49]	; 0x31
    a092:	tst.w	r3, #80	; 0x50
    a096:	mov	r5, r1
    a098:	beq.n	a126 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    a09a:	ldrb	r3, [r2, #0]
    a09c:	cmp	r3, #47	; 0x2f
    a09e:	mov	r1, r2
    a0a0:	beq.n	a108 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a0a2:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a0a6:	add	r3, sp, #12
    a0a8:	add	r2, sp, #16
    a0aa:	mov	r0, r6
    a0ac:	bl	7fa8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    a0b0:	mov	r4, r0
    a0b2:	cmp	r0, #0
    a0b4:	beq.n	a18e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x122>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a0b6:	ldr	r3, [sp, #12]
    a0b8:	ldrb	r3, [r3, #0]
    a0ba:	cmp	r3, #0
    a0bc:	beq.n	a1ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x14e>
    a0be:	ldrb.w	r3, [sp, #16]
    a0c2:	ldr	r2, [sp, #20]
    a0c4:	str.w	r8, [sp]
    a0c8:	mov	r1, r5
    a0ca:	mov	r0, r6
    a0cc:	bl	8544 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a0d0:	mov	r4, r0
    a0d2:	cmp	r0, #0
    a0d4:	bne.n	a162 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf6>
      if (!pFlag || !mkdir(parent, &fname)) {
    a0d6:	cmp.w	r9, #0
    a0da:	bne.n	a154 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a0dc:	movs	r1, #10
    a0de:	ldr	r0, [pc, #272]	; (a1f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x184>)
    a0e0:	bl	fe48 <usb_serial_write>
    a0e4:	movs	r1, #108	; 0x6c
    a0e6:	ldr	r0, [pc, #268]	; (a1f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x188>)
    a0e8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a0ec:	movs	r0, #46	; 0x2e
    a0ee:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a0f2:	movs	r1, #187	; 0xbb
    a0f4:	ldr	r0, [pc, #256]	; (a1f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18c>)
    a0f6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a0fa:	ldr	r0, [pc, #252]	; (a1f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18c>)
    a0fc:	bl	11800 <Print::println()>
  }
  return mkdir(parent, &fname);

 fail:
  return false;
}
    a100:	mov	r0, r4
    a102:	add	sp, #84	; 0x54
    a104:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    a108:	adds	r1, #1
    a10a:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    a10c:	ldrb	r3, [r1, #0]
    a10e:	cmp	r3, #47	; 0x2f
    a110:	beq.n	a108 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    a112:	ldr	r1, [r5, #32]
    a114:	add	r0, sp, #24
    a116:	bl	7f50 <ExFatFile::openRoot(ExFatVolume*)>
    a11a:	mov	r4, r0
    a11c:	cmp	r0, #0
    a11e:	beq.n	a1c8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x15c>
    a120:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    a122:	add	r5, sp, #24
    a124:	b.n	a0a2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a126:	movs	r1, #10
    a128:	ldr	r0, [pc, #196]	; (a1f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x184>)
    a12a:	bl	fe48 <usb_serial_write>
    a12e:	movs	r1, #108	; 0x6c
    a130:	ldr	r0, [pc, #192]	; (a1f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x188>)
    a132:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a136:	movs	r0, #46	; 0x2e
    a138:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a13c:	movs	r1, #164	; 0xa4
    a13e:	ldr	r0, [pc, #184]	; (a1f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18c>)
    a140:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a144:	ldr	r0, [pc, #176]	; (a1f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18c>)
    a146:	bl	11800 <Print::println()>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    a14a:	movs	r4, #0
}
    a14c:	mov	r0, r4
    a14e:	add	sp, #84	; 0x54
    a150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    a154:	mov	r1, r5
    a156:	add	r2, sp, #16
    a158:	mov	r0, r6
    a15a:	bl	9f90 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    a15e:	cmp	r0, #0
    a160:	beq.n	a0dc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x70>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a162:	mov	r4, r6
    a164:	add	r7, sp, #24
    a166:	add.w	lr, r6, #48	; 0x30
    a16a:	ldr	r0, [r4, #0]
    a16c:	ldr	r1, [r4, #4]
    a16e:	ldr	r2, [r4, #8]
    a170:	ldr	r3, [r4, #12]
    a172:	mov	r5, r7
    a174:	stmia	r5!, {r0, r1, r2, r3}
    a176:	adds	r4, #16
    a178:	cmp	r4, lr
    a17a:	mov	r7, r5
    a17c:	bne.n	a16a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xfe>
    a17e:	ldr	r0, [r4, #0]
    a180:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    a182:	mov	r0, r6
    a184:	bl	7db8 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    a188:	add	r5, sp, #24
    a18a:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    a18c:	b.n	a0a6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a18e:	movs	r1, #10
    a190:	ldr	r0, [pc, #92]	; (a1f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x184>)
    a192:	bl	fe48 <usb_serial_write>
    a196:	movs	r1, #108	; 0x6c
    a198:	ldr	r0, [pc, #88]	; (a1f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x188>)
    a19a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a19e:	movs	r0, #46	; 0x2e
    a1a0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a1a4:	movs	r1, #179	; 0xb3
    a1a6:	ldr	r0, [pc, #80]	; (a1f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18c>)
    a1a8:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a1ac:	ldr	r0, [pc, #72]	; (a1f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18c>)
    a1ae:	bl	11800 <Print::println()>
  }
  return mkdir(parent, &fname);

 fail:
  return false;
}
    a1b2:	mov	r0, r4
    a1b4:	add	sp, #84	; 0x54
    a1b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    a1ba:	add	r2, sp, #16
    a1bc:	mov	r1, r5
    a1be:	mov	r0, r6
    a1c0:	bl	9f90 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    a1c4:	mov	r4, r0
    a1c6:	b.n	a100 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x94>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a1c8:	movs	r1, #10
    a1ca:	ldr	r0, [pc, #36]	; (a1f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x184>)
    a1cc:	bl	fe48 <usb_serial_write>
    a1d0:	movs	r1, #108	; 0x6c
    a1d2:	ldr	r0, [pc, #32]	; (a1f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x188>)
    a1d4:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a1d8:	movs	r0, #46	; 0x2e
    a1da:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a1de:	movs	r1, #172	; 0xac
    a1e0:	ldr	r0, [pc, #20]	; (a1f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18c>)
    a1e2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a1e6:	ldr	r0, [pc, #16]	; (a1f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18c>)
    a1e8:	bl	11800 <Print::println()>
    a1ec:	b.n	a100 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x94>
    a1ee:	nop
    a1f0:	.word	0x00016f6c
    a1f4:	.word	0x00017134
    a1f8:	.word	0x1fff0b00

0000a1fc <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a1fc:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a1fe:	ldrb.w	r3, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a202:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a204:	movs	r4, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a206:	ands.w	r5, r3, #24
    a20a:	strb.w	r4, [sp, #49]	; 0x31
    a20e:	strb.w	r4, [sp, #50]	; 0x32
    a212:	strb.w	r4, [sp, #51]	; 0x33
    a216:	strb.w	r4, [sp, #105]	; 0x69
    a21a:	strb.w	r4, [sp, #106]	; 0x6a
    a21e:	strb.w	r4, [sp, #107]	; 0x6b
    a222:	bne.n	a252 <ExFatFile::rename(ExFatFile*, char const*)+0x56>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a224:	movs	r1, #10
    a226:	ldr	r0, [pc, #292]	; (a34c <ExFatFile::rename(ExFatFile*, char const*)+0x150>)
    a228:	bl	fe48 <usb_serial_write>
    a22c:	movs	r1, #108	; 0x6c
    a22e:	ldr	r0, [pc, #288]	; (a350 <ExFatFile::rename(ExFatFile*, char const*)+0x154>)
    a230:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a234:	movs	r0, #46	; 0x2e
    a236:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a23a:	mov.w	r1, #318	; 0x13e
    a23e:	ldr	r0, [pc, #276]	; (a354 <ExFatFile::rename(ExFatFile*, char const*)+0x158>)
    a240:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a244:	ldr	r0, [pc, #268]	; (a354 <ExFatFile::rename(ExFatFile*, char const*)+0x158>)
    a246:	bl	11800 <Print::println()>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    a24a:	mov	r4, r5
}
    a24c:	mov	r0, r4
    a24e:	add	sp, #116	; 0x74
    a250:	pop	{r4, r5, r6, r7, pc}
    a252:	mov	r6, r0
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    a254:	ldr	r3, [r1, #32]
    a256:	ldr	r0, [r6, #32]
    a258:	cmp	r0, r3
    a25a:	beq.n	a288 <ExFatFile::rename(ExFatFile*, char const*)+0x8c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a25c:	movs	r1, #10
    a25e:	ldr	r0, [pc, #236]	; (a34c <ExFatFile::rename(ExFatFile*, char const*)+0x150>)
    a260:	bl	fe48 <usb_serial_write>
    a264:	movs	r1, #108	; 0x6c
    a266:	ldr	r0, [pc, #232]	; (a350 <ExFatFile::rename(ExFatFile*, char const*)+0x154>)
    a268:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a26c:	movs	r0, #46	; 0x2e
    a26e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a272:	movw	r1, #323	; 0x143
    a276:	ldr	r0, [pc, #220]	; (a354 <ExFatFile::rename(ExFatFile*, char const*)+0x158>)
    a278:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a27c:	ldr	r0, [pc, #212]	; (a354 <ExFatFile::rename(ExFatFile*, char const*)+0x158>)
    a27e:	bl	11800 <Print::println()>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
}
    a282:	mov	r0, r4
    a284:	add	sp, #116	; 0x74
    a286:	pop	{r4, r5, r6, r7, pc}
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    a288:	movw	r3, #2561	; 0xa01
    a28c:	mov	r0, sp
    a28e:	bl	8b34 <ExFatFile::open(ExFatFile*, char const*, int)>
    a292:	mov	r4, r0
    a294:	cbz	r0, a2fc <ExFatFile::rename(ExFatFile*, char const*)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    a296:	add	r7, sp, #56	; 0x38
    a298:	mov	r4, r6
    a29a:	add.w	lr, r6, #48	; 0x30
    a29e:	ldr	r0, [r4, #0]
    a2a0:	ldr	r1, [r4, #4]
    a2a2:	ldr	r2, [r4, #8]
    a2a4:	ldr	r3, [r4, #12]
    a2a6:	mov	r5, r7
    a2a8:	stmia	r5!, {r0, r1, r2, r3}
    a2aa:	adds	r4, #16
    a2ac:	cmp	r4, lr
    a2ae:	mov	r7, r5
    a2b0:	bne.n	a29e <ExFatFile::rename(ExFatFile*, char const*)+0xa2>
    a2b2:	ldr	r0, [r4, #0]
    a2b4:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    a2b6:	add	r3, sp, #36	; 0x24
    a2b8:	ldmia.w	r3, {r0, r1, r2}
    a2bc:	add.w	r3, r6, #36	; 0x24
    a2c0:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a2c4:	ldrb.w	r3, [r6, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    a2c8:	ldrb.w	r2, [sp, #48]	; 0x30
    a2cc:	strb.w	r2, [r6, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a2d0:	orn	r3, r3, #127	; 0x7f
    a2d4:	strb.w	r3, [r6, #51]	; 0x33
  if (!sync()) {
    a2d8:	mov	r0, r6
    a2da:	bl	9d60 <ExFatFile::sync()>
    a2de:	mov	r4, r0
    a2e0:	cbz	r0, a324 <ExFatFile::rename(ExFatFile*, char const*)+0x128>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a2e2:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    a2e4:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    a2e6:	movs	r3, #8
  return oldFile.remove();
    a2e8:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a2ea:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    a2ec:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    a2f0:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    a2f4:	bl	98d4 <ExFatFile::remove()>
    a2f8:	mov	r4, r0
    a2fa:	b.n	a24c <ExFatFile::rename(ExFatFile*, char const*)+0x50>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a2fc:	movs	r1, #10
    a2fe:	ldr	r0, [pc, #76]	; (a34c <ExFatFile::rename(ExFatFile*, char const*)+0x150>)
    a300:	bl	fe48 <usb_serial_write>
    a304:	movs	r1, #108	; 0x6c
    a306:	ldr	r0, [pc, #72]	; (a350 <ExFatFile::rename(ExFatFile*, char const*)+0x154>)
    a308:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a30c:	movs	r0, #46	; 0x2e
    a30e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a312:	movw	r1, #327	; 0x147
    a316:	ldr	r0, [pc, #60]	; (a354 <ExFatFile::rename(ExFatFile*, char const*)+0x158>)
    a318:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a31c:	ldr	r0, [pc, #52]	; (a354 <ExFatFile::rename(ExFatFile*, char const*)+0x158>)
    a31e:	bl	11800 <Print::println()>
    a322:	b.n	a24c <ExFatFile::rename(ExFatFile*, char const*)+0x50>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a324:	movs	r1, #10
    a326:	ldr	r0, [pc, #36]	; (a34c <ExFatFile::rename(ExFatFile*, char const*)+0x150>)
    a328:	bl	fe48 <usb_serial_write>
    a32c:	movs	r1, #108	; 0x6c
    a32e:	ldr	r0, [pc, #32]	; (a350 <ExFatFile::rename(ExFatFile*, char const*)+0x154>)
    a330:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a334:	movs	r0, #46	; 0x2e
    a336:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a33a:	movw	r1, #335	; 0x14f
    a33e:	ldr	r0, [pc, #20]	; (a354 <ExFatFile::rename(ExFatFile*, char const*)+0x158>)
    a340:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a344:	ldr	r0, [pc, #12]	; (a354 <ExFatFile::rename(ExFatFile*, char const*)+0x158>)
    a346:	bl	11800 <Print::println()>
    a34a:	b.n	a24c <ExFatFile::rename(ExFatFile*, char const*)+0x50>
    a34c:	.word	0x00016f6c
    a350:	.word	0x00017134
    a354:	.word	0x1fff0b00

0000a358 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a358:	push	{r4, r5, r6, r7, lr}
    a35a:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    a35e:	and.w	r2, r3, #2

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a362:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    a364:	cmp	r2, #0
    a366:	beq.n	a436 <ExFatFile::truncate()+0xde>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a368:	ldr	r1, [r0, #28]
    a36a:	mov	r4, r0
    a36c:	cmp	r1, #0
    a36e:	beq.n	a3f2 <ExFatFile::truncate()+0x9a>
      return true;
  }
  if (isContiguous()) {
    a370:	and.w	r3, r3, #64	; 0x40
    a374:	and.w	r5, r3, #255	; 0xff
    a378:	cmp	r3, #0
    a37a:	beq.n	a3fa <ExFatFile::truncate()+0xa2>
    a37c:	ldr	r0, [r0, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    a37e:	ldr	r5, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    a380:	ldrb.w	r3, [r0, #1093]	; 0x445
    a384:	ldrd	r6, r7, [r4, #8]
    a388:	adds	r3, #9
    a38a:	uxtb	r3, r3
    a38c:	adds.w	r6, r6, #4294967295
    a390:	rsb	lr, r3, #32
    a394:	adc.w	r7, r7, #4294967295
    a398:	lsr.w	r2, r6, r3
    a39c:	lsl.w	lr, r7, lr
    a3a0:	subs	r3, #32
    a3a2:	orr.w	r2, r2, lr
    a3a6:	lsr.w	r3, r7, r3
    a3aa:	orrs	r2, r3
    a3ac:	adds	r2, #1
    if (m_curCluster) {
    a3ae:	cmp	r5, #0
    a3b0:	beq.n	a466 <ExFatFile::truncate()+0x10e>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    a3b2:	subs	r1, #1
    a3b4:	subs	r1, r1, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a3b6:	adds	r5, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    a3b8:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a3ba:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a3bc:	cbz	r2, a410 <ExFatFile::truncate()+0xb8>
    a3be:	movs	r3, #0
    a3c0:	ldr	r1, [sp, #4]
    a3c2:	bl	9138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    a3c6:	mov	r5, r0
    a3c8:	cbnz	r0, a410 <ExFatFile::truncate()+0xb8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a3ca:	movs	r1, #10
    a3cc:	ldr	r0, [pc, #324]	; (a514 <ExFatFile::truncate()+0x1bc>)
    a3ce:	bl	fe48 <usb_serial_write>
    a3d2:	movs	r1, #108	; 0x6c
    a3d4:	ldr	r0, [pc, #320]	; (a518 <ExFatFile::truncate()+0x1c0>)
    a3d6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a3da:	movs	r0, #46	; 0x2e
    a3dc:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a3e0:	movw	r1, #598	; 0x256
    a3e4:	ldr	r0, [pc, #308]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a3e6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a3ea:	ldr	r0, [pc, #304]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a3ec:	bl	11800 <Print::println()>
    a3f0:	b.n	a3f4 <ExFatFile::truncate()+0x9c>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a3f2:	movs	r5, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a3f4:	mov	r0, r5
    a3f6:	add	sp, #12
    a3f8:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    a3fa:	ldr	r3, [r0, #24]
    a3fc:	cmp	r3, #0
    a3fe:	bne.n	a46c <ExFatFile::truncate()+0x114>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    a400:	str	r1, [sp, #4]
      m_firstCluster = 0;
    a402:	str	r3, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    a404:	ldr	r0, [r4, #32]
    a406:	bl	93bc <ExFatPartition::freeChain(unsigned long)>
    a40a:	mov	r5, r0
    a40c:	cmp	r0, #0
    a40e:	beq.n	a4c4 <ExFatFile::truncate()+0x16c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a410:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a414:	ldrb.w	r3, [r4, #51]	; 0x33
    a418:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a41c:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    a420:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a424:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    a428:	mov	r0, r4
    a42a:	bl	9d60 <ExFatFile::sync()>
    a42e:	mov	r5, r0

 fail:
  return false;
}
    a430:	mov	r0, r5
    a432:	add	sp, #12
    a434:	pop	{r4, r5, r6, r7, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a436:	movs	r1, #10
    a438:	ldr	r0, [pc, #216]	; (a514 <ExFatFile::truncate()+0x1bc>)
    a43a:	and.w	r5, r2, #255	; 0xff
    a43e:	bl	fe48 <usb_serial_write>
    a442:	movs	r1, #108	; 0x6c
    a444:	ldr	r0, [pc, #208]	; (a518 <ExFatFile::truncate()+0x1c0>)
    a446:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a44a:	movs	r0, #46	; 0x2e
    a44c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a450:	movw	r1, #582	; 0x246
    a454:	ldr	r0, [pc, #196]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a456:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a45a:	ldr	r0, [pc, #192]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a45c:	bl	11800 <Print::println()>
    a460:	mov	r0, r5
    a462:	add	sp, #12
    a464:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    a466:	str	r1, [sp, #4]
      m_firstCluster = 0;
    a468:	str	r5, [r4, #28]
    a46a:	b.n	a3bc <ExFatFile::truncate()+0x64>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    a46c:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a46e:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    a470:	str.w	r5, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a474:	ldr	r0, [r0, #32]
    a476:	bl	927c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    a47a:	sxtb	r0, r0
      if (fg < 0) {
    a47c:	cmp	r0, #0
    a47e:	blt.n	a4ec <ExFatFile::truncate()+0x194>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    a480:	bne.n	a48a <ExFatFile::truncate()+0x132>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    a482:	ldr	r1, [sp, #4]
    a484:	cmp	r1, #0
    a486:	beq.n	a410 <ExFatFile::truncate()+0xb8>
    a488:	b.n	a404 <ExFatFile::truncate()+0xac>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    a48a:	mov.w	r2, #4294967295
    a48e:	ldr	r1, [r4, #24]
    a490:	ldr	r0, [r4, #32]
    a492:	bl	9338 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    a496:	mov	r5, r0
    a498:	cmp	r0, #0
    a49a:	bne.n	a482 <ExFatFile::truncate()+0x12a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a49c:	movs	r1, #10
    a49e:	ldr	r0, [pc, #116]	; (a514 <ExFatFile::truncate()+0x1bc>)
    a4a0:	bl	fe48 <usb_serial_write>
    a4a4:	movs	r1, #108	; 0x6c
    a4a6:	ldr	r0, [pc, #112]	; (a518 <ExFatFile::truncate()+0x1c0>)
    a4a8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a4ac:	movs	r0, #46	; 0x2e
    a4ae:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a4b2:	movw	r1, #613	; 0x265
    a4b6:	ldr	r0, [pc, #100]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a4b8:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a4bc:	ldr	r0, [pc, #92]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a4be:	bl	11800 <Print::println()>
    a4c2:	b.n	a3f4 <ExFatFile::truncate()+0x9c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a4c4:	movs	r1, #10
    a4c6:	ldr	r0, [pc, #76]	; (a514 <ExFatFile::truncate()+0x1bc>)
    a4c8:	bl	fe48 <usb_serial_write>
    a4cc:	movs	r1, #108	; 0x6c
    a4ce:	ldr	r0, [pc, #72]	; (a518 <ExFatFile::truncate()+0x1c0>)
    a4d0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a4d4:	movs	r0, #46	; 0x2e
    a4d6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a4da:	movw	r1, #623	; 0x26f
    a4de:	ldr	r0, [pc, #60]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a4e0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a4e4:	ldr	r0, [pc, #52]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a4e6:	bl	11800 <Print::println()>
    a4ea:	b.n	a3f4 <ExFatFile::truncate()+0x9c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a4ec:	movs	r1, #10
    a4ee:	ldr	r0, [pc, #36]	; (a514 <ExFatFile::truncate()+0x1bc>)
    a4f0:	bl	fe48 <usb_serial_write>
    a4f4:	movs	r1, #108	; 0x6c
    a4f6:	ldr	r0, [pc, #32]	; (a518 <ExFatFile::truncate()+0x1c0>)
    a4f8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a4fc:	movs	r0, #46	; 0x2e
    a4fe:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a502:	movw	r1, #607	; 0x25f
    a506:	ldr	r0, [pc, #20]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a508:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a50c:	ldr	r0, [pc, #12]	; (a51c <ExFatFile::truncate()+0x1c4>)
    a50e:	bl	11800 <Print::println()>
    a512:	b.n	a3f4 <ExFatFile::truncate()+0x9c>
    a514:	.word	0x00016f6c
    a518:	.word	0x00017134
    a51c:	.word	0x1fff0b00

0000a520 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a520:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a524:	ldrb.w	r3, [r0, #51]	; 0x33
    a528:	sub	sp, #12

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a52a:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a52c:	mov	r4, r0
    a52e:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a530:	bpl.w	a7c8 <ExFatFile::write(void const*, unsigned int)+0x2a8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    a534:	lsls	r2, r3, #28
    a536:	mov	r9, r1
    a538:	bmi.w	a804 <ExFatFile::write(void const*, unsigned int)+0x2e4>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a53c:	ldr	r3, [sp, #0]
    a53e:	cmp	r3, #0
    a540:	beq.w	a8ca <ExFatFile::write(void const*, unsigned int)+0x3aa>
    a544:	mov	r1, r4
    a546:	ldrd	r2, r3, [r1], #24
    a54a:	ldr.w	r8, [sp]
    a54e:	str	r1, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a550:	mov.w	fp, #1
    a554:	mov	sl, r9
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    a556:	ldr	r0, [r4, #32]
    a558:	ldr.w	r5, [r0, #1080]	; 0x438
    a55c:	ands	r5, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    a55e:	ubfx	r9, r5, #0, #9
    if (clusterOffset == 0) {
    a562:	cbnz	r5, a5b8 <ExFatFile::write(void const*, unsigned int)+0x98>
      // start of new cluster
      if (m_curCluster != 0) {
    a564:	ldr	r1, [r4, #24]
    a566:	cmp	r1, #0
    a568:	beq.w	a72e <ExFatFile::write(void const*, unsigned int)+0x20e>
        int fg;

        if (isContiguous()) {
    a56c:	ldrb.w	r3, [r4, #51]	; 0x33
    a570:	lsls	r3, r3, #25
    a572:	bpl.w	a760 <ExFatFile::write(void const*, unsigned int)+0x240>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a576:	ldrd	r6, r7, [r4, #8]
    a57a:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    a57e:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a580:	adds	r2, #9
    a582:	uxtb	r2, r2
    a584:	adds.w	r6, r6, #4294967295
    a588:	adc.w	r7, r7, #4294967295
    a58c:	rsb	lr, r2, #32
    a590:	lsrs	r6, r2
    a592:	lsl.w	lr, r7, lr
    a596:	subs	r2, #32
    a598:	orr.w	r6, r6, lr
    a59c:	lsr.w	r2, r7, r2
    a5a0:	orrs	r6, r2
    a5a2:	add	r3, r6
    a5a4:	cmp	r1, r3
    a5a6:	bcc.w	a75a <ExFatFile::write(void const*, unsigned int)+0x23a>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    a5aa:	mov	r0, r4
    a5ac:	bl	976c <ExFatFile::addCluster()>
    a5b0:	cmp	r0, #0
    a5b2:	beq.w	a87a <ExFatFile::write(void const*, unsigned int)+0x35a>
    a5b6:	ldr	r0, [r4, #32]
    a5b8:	ldr	r6, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    a5ba:	ldrb.w	lr, [r0, #1093]	; 0x445
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    a5be:	ldr.w	r7, [r0, #1068]	; 0x42c
    a5c2:	subs	r1, r6, #2
    a5c4:	lsrs	r5, r5, #9
    a5c6:	lsl.w	r6, r1, lr
    a5ca:	adds	r1, r5, r7
    a5cc:	add	r1, r6

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    a5ce:	cmp.w	r9, #0
    a5d2:	bne.w	a6ec <ExFatFile::write(void const*, unsigned int)+0x1cc>
    a5d6:	cmp.w	r8, #512	; 0x200
    a5da:	bcs.n	a680 <ExFatFile::write(void const*, unsigned int)+0x160>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    a5dc:	ldrd	r2, r3, [r4, #16]
    a5e0:	ldrd	r6, r7, [r4]
    a5e4:	cmp.w	r8, #512	; 0x200
    a5e8:	mov	r5, r8
    a5ea:	it	cs
    a5ec:	movcs.w	r5, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    a5f0:	cmp	r7, r3
    a5f2:	it	eq
    a5f4:	cmpeq	r6, r2
    a5f6:	ite	cc
    a5f8:	movcc	r2, #1
    a5fa:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    a5fc:	add.w	r0, r0, #528	; 0x210
    a600:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    a604:	cmp	r0, #0
    a606:	beq.n	a706 <ExFatFile::write(void const*, unsigned int)+0x1e6>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a608:	add	r0, r9
    a60a:	mov	r2, r5
    a60c:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a60e:	add	r9, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a610:	bl	fc48 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a614:	cmp.w	r9, #512	; 0x200
    a618:	beq.w	a790 <ExFatFile::write(void const*, unsigned int)+0x270>
    a61c:	mov	r0, r5
    a61e:	movs	r1, #0
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a620:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a624:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a628:	adds	r2, r2, r0
    a62a:	adcs	r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a62c:	cmp	r7, r3
    a62e:	it	eq
    a630:	cmpeq	r6, r2
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    a632:	add	sl, r5
    toWrite -= n;
    a634:	rsb	r8, r5, r8
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a638:	strd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a63c:	bcs.n	a64e <ExFatFile::write(void const*, unsigned int)+0x12e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a63e:	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    a642:	strd	r2, r3, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a646:	orn	r1, r1, #127	; 0x7f
    a64a:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a64e:	cmp.w	r8, #0
    a652:	bne.n	a556 <ExFatFile::write(void const*, unsigned int)+0x36>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    a654:	ldrd	r0, r1, [r4, #8]
    a658:	cmp	r1, r3
    a65a:	it	eq
    a65c:	cmpeq	r0, r2
    a65e:	bcc.w	a83a <ExFatFile::write(void const*, unsigned int)+0x31a>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    a662:	ldr	r3, [pc, #620]	; (a8d0 <ExFatFile::write(void const*, unsigned int)+0x3b0>)
    a664:	ldr	r3, [r3, #0]
    a666:	cmp	r3, #0
    a668:	beq.w	a876 <ExFatFile::write(void const*, unsigned int)+0x356>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a66c:	ldrb.w	r3, [r4, #51]	; 0x33
    a670:	ldr	r0, [sp, #0]
    a672:	orn	r3, r3, #127	; 0x7f
    a676:	strb.w	r3, [r4, #51]	; 0x33

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return -1;
}
    a67a:	add	sp, #12
    a67c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    a680:	cmp.w	r8, #1024	; 0x400
    a684:	bcc.n	a736 <ExFatFile::write(void const*, unsigned int)+0x216>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    a686:	lsl.w	r3, fp, lr
    a68a:	subs	r5, r3, r5
    a68c:	ldr.w	r2, [r0, #540]	; 0x21c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    a690:	mov.w	r3, r8, lsr #9
    a694:	cmp	r3, r5
    a696:	it	cs
    a698:	movcs	r3, r5
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    a69a:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    a69c:	mov.w	r5, r3, lsl #9
    a6a0:	bhi.n	a6b4 <ExFatFile::write(void const*, unsigned int)+0x194>
    a6a2:	adds	r6, r1, r3
    a6a4:	cmp	r2, r6
    a6a6:	bcs.n	a6b4 <ExFatFile::write(void const*, unsigned int)+0x194>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a6a8:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a6ac:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a6b0:	str.w	r2, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    a6b4:	ldr.w	r0, [r0, #532]	; 0x214
    a6b8:	ldr	r6, [r0, #0]
    a6ba:	mov	r2, sl
    a6bc:	ldr	r6, [r6, #32]
    a6be:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    a6c0:	cmp	r0, #0
    a6c2:	bne.n	a61c <ExFatFile::write(void const*, unsigned int)+0xfc>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a6c4:	movs	r1, #10
    a6c6:	ldr	r0, [pc, #524]	; (a8d4 <ExFatFile::write(void const*, unsigned int)+0x3b4>)
    a6c8:	bl	fe48 <usb_serial_write>
    a6cc:	movs	r1, #108	; 0x6c
    a6ce:	ldr	r0, [pc, #520]	; (a8d8 <ExFatFile::write(void const*, unsigned int)+0x3b8>)
    a6d0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a6d4:	movs	r0, #46	; 0x2e
    a6d6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a6da:	movw	r1, #751	; 0x2ef
    a6de:	ldr	r0, [pc, #508]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a6e0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a6e4:	ldr	r0, [pc, #500]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a6e6:	bl	11800 <Print::println()>
    a6ea:	b.n	a7ee <ExFatFile::write(void const*, unsigned int)+0x2ce>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a6ec:	rsb	r5, r9, #512	; 0x200
    a6f0:	cmp	r5, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a6f2:	mov.w	r2, #1
    a6f6:	add.w	r0, r0, #528	; 0x210
    a6fa:	it	cs
    a6fc:	movcs	r5, r8
    a6fe:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    a702:	cmp	r0, #0
    a704:	bne.n	a608 <ExFatFile::write(void const*, unsigned int)+0xe8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a706:	movs	r1, #10
    a708:	ldr	r0, [pc, #456]	; (a8d4 <ExFatFile::write(void const*, unsigned int)+0x3b4>)
    a70a:	bl	fe48 <usb_serial_write>
    a70e:	movs	r1, #108	; 0x6c
    a710:	ldr	r0, [pc, #452]	; (a8d8 <ExFatFile::write(void const*, unsigned int)+0x3b8>)
    a712:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a716:	movs	r0, #46	; 0x2e
    a718:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a71c:	movw	r1, #727	; 0x2d7
    a720:	ldr	r0, [pc, #440]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a722:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a726:	ldr	r0, [pc, #436]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a728:	bl	11800 <Print::println()>
    a72c:	b.n	a7ee <ExFatFile::write(void const*, unsigned int)+0x2ce>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    a72e:	ldr	r6, [r4, #28]
    a730:	cbz	r6, a76e <ExFatFile::write(void const*, unsigned int)+0x24e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    a732:	str	r6, [r4, #24]
    a734:	b.n	a5ba <ExFatFile::write(void const*, unsigned int)+0x9a>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    a736:	ldr.w	r3, [r0, #540]	; 0x21c
    a73a:	cmp	r1, r3
    a73c:	beq.n	a782 <ExFatFile::write(void const*, unsigned int)+0x262>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    a73e:	ldr.w	r0, [r0, #532]	; 0x214
    a742:	ldr	r3, [r0, #0]
    a744:	mov	r2, sl
    a746:	ldr	r3, [r3, #28]
    a748:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    a74a:	cmp	r0, #0
    a74c:	beq.n	a84e <ExFatFile::write(void const*, unsigned int)+0x32e>
    a74e:	mov.w	r0, #512	; 0x200
    a752:	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    a754:	mov.w	r5, #512	; 0x200
    a758:	b.n	a620 <ExFatFile::write(void const*, unsigned int)+0x100>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    a75a:	adds	r6, r1, #1
    a75c:	str	r6, [r4, #24]
    a75e:	b.n	a5ba <ExFatFile::write(void const*, unsigned int)+0x9a>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    a760:	ldr	r2, [sp, #4]
    a762:	bl	927c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    a766:	cmp	r0, #0
    a768:	bne.w	a5b6 <ExFatFile::write(void const*, unsigned int)+0x96>
    a76c:	b.n	a5aa <ExFatFile::write(void const*, unsigned int)+0x8a>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    a76e:	mov	r0, r4
    a770:	bl	976c <ExFatFile::addCluster()>
    a774:	cmp	r0, #0
    a776:	beq.w	a8a2 <ExFatFile::write(void const*, unsigned int)+0x382>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    a77a:	ldr	r6, [r4, #24]
    a77c:	str	r6, [r4, #28]
    a77e:	ldr	r0, [r4, #32]
    a780:	b.n	a5ba <ExFatFile::write(void const*, unsigned int)+0x9a>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a782:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a786:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a78a:	str.w	r3, [r0, #540]	; 0x21c
    a78e:	b.n	a73e <ExFatFile::write(void const*, unsigned int)+0x21e>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    a790:	ldr	r0, [r4, #32]
    a792:	add.w	r0, r0, #528	; 0x210
    a796:	bl	7c04 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    a79a:	cmp	r0, #0
    a79c:	bne.w	a61c <ExFatFile::write(void const*, unsigned int)+0xfc>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a7a0:	movs	r1, #10
    a7a2:	ldr	r0, [pc, #304]	; (a8d4 <ExFatFile::write(void const*, unsigned int)+0x3b4>)
    a7a4:	bl	fe48 <usb_serial_write>
    a7a8:	movs	r1, #108	; 0x6c
    a7aa:	ldr	r0, [pc, #300]	; (a8d8 <ExFatFile::write(void const*, unsigned int)+0x3b8>)
    a7ac:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a7b0:	movs	r0, #46	; 0x2e
    a7b2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a7b6:	movw	r1, #735	; 0x2df
    a7ba:	ldr	r0, [pc, #288]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a7bc:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a7c0:	ldr	r0, [pc, #280]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a7c2:	bl	11800 <Print::println()>
    a7c6:	b.n	a7ee <ExFatFile::write(void const*, unsigned int)+0x2ce>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a7c8:	movs	r1, #10
    a7ca:	ldr	r0, [pc, #264]	; (a8d4 <ExFatFile::write(void const*, unsigned int)+0x3b4>)
    a7cc:	bl	fe48 <usb_serial_write>
    a7d0:	movs	r1, #108	; 0x6c
    a7d2:	ldr	r0, [pc, #260]	; (a8d8 <ExFatFile::write(void const*, unsigned int)+0x3b8>)
    a7d4:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a7d8:	movs	r0, #46	; 0x2e
    a7da:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a7de:	movw	r1, #651	; 0x28b
    a7e2:	ldr	r0, [pc, #248]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a7e4:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a7e8:	ldr	r0, [pc, #240]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a7ea:	bl	11800 <Print::println()>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a7ee:	ldrb.w	r3, [r4, #50]	; 0x32
    a7f2:	orr.w	r3, r3, #1
    a7f6:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    a7fa:	mov.w	r0, #4294967295
}
    a7fe:	add	sp, #12
    a800:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    a804:	ldrd	r2, r3, [r0, #16]
    a808:	bl	83c0 <ExFatFile::seekSet(unsigned long long)>
    a80c:	cmp	r0, #0
    a80e:	bne.w	a53c <ExFatFile::write(void const*, unsigned int)+0x1c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a812:	movs	r1, #10
    a814:	ldr	r0, [pc, #188]	; (a8d4 <ExFatFile::write(void const*, unsigned int)+0x3b4>)
    a816:	bl	fe48 <usb_serial_write>
    a81a:	movs	r1, #108	; 0x6c
    a81c:	ldr	r0, [pc, #184]	; (a8d8 <ExFatFile::write(void const*, unsigned int)+0x3b8>)
    a81e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a822:	movs	r0, #46	; 0x2e
    a824:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a828:	movw	r1, #657	; 0x291
    a82c:	ldr	r0, [pc, #172]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a82e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a832:	ldr	r0, [pc, #168]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a834:	bl	11800 <Print::println()>
    a838:	b.n	a7ee <ExFatFile::write(void const*, unsigned int)+0x2ce>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a83a:	ldrb.w	r1, [r4, #51]	; 0x33
    a83e:	ldr	r0, [sp, #0]
    a840:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    a844:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a848:	strb.w	r1, [r4, #51]	; 0x33
    a84c:	b.n	a7fe <ExFatFile::write(void const*, unsigned int)+0x2de>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a84e:	movs	r1, #10
    a850:	ldr	r0, [pc, #128]	; (a8d4 <ExFatFile::write(void const*, unsigned int)+0x3b4>)
    a852:	bl	fe48 <usb_serial_write>
    a856:	movs	r1, #108	; 0x6c
    a858:	ldr	r0, [pc, #124]	; (a8d8 <ExFatFile::write(void const*, unsigned int)+0x3b8>)
    a85a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a85e:	movs	r0, #46	; 0x2e
    a860:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a864:	movw	r1, #758	; 0x2f6
    a868:	ldr	r0, [pc, #112]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a86a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a86e:	ldr	r0, [pc, #108]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a870:	bl	11800 <Print::println()>
    a874:	b.n	a7ee <ExFatFile::write(void const*, unsigned int)+0x2ce>
    a876:	ldr	r0, [sp, #0]
    a878:	b.n	a7fe <ExFatFile::write(void const*, unsigned int)+0x2de>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a87a:	movs	r1, #10
    a87c:	ldr	r0, [pc, #84]	; (a8d4 <ExFatFile::write(void const*, unsigned int)+0x3b4>)
    a87e:	bl	fe48 <usb_serial_write>
    a882:	movs	r1, #108	; 0x6c
    a884:	ldr	r0, [pc, #80]	; (a8d8 <ExFatFile::write(void const*, unsigned int)+0x3b8>)
    a886:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a88a:	movs	r0, #46	; 0x2e
    a88c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a890:	mov.w	r1, #688	; 0x2b0
    a894:	ldr	r0, [pc, #68]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a896:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a89a:	ldr	r0, [pc, #64]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a89c:	bl	11800 <Print::println()>
    a8a0:	b.n	a7ee <ExFatFile::write(void const*, unsigned int)+0x2ce>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a8a2:	movs	r1, #10
    a8a4:	ldr	r0, [pc, #44]	; (a8d4 <ExFatFile::write(void const*, unsigned int)+0x3b4>)
    a8a6:	bl	fe48 <usb_serial_write>
    a8aa:	movs	r1, #108	; 0x6c
    a8ac:	ldr	r0, [pc, #40]	; (a8d8 <ExFatFile::write(void const*, unsigned int)+0x3b8>)
    a8ae:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a8b2:	movs	r0, #46	; 0x2e
    a8b4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a8b8:	mov.w	r1, #696	; 0x2b8
    a8bc:	ldr	r0, [pc, #28]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a8be:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a8c2:	ldr	r0, [pc, #24]	; (a8dc <ExFatFile::write(void const*, unsigned int)+0x3bc>)
    a8c4:	bl	11800 <Print::println()>
    a8c8:	b.n	a7ee <ExFatFile::write(void const*, unsigned int)+0x2ce>
    a8ca:	ldrd	r2, r3, [r4]
    a8ce:	b.n	a654 <ExFatFile::write(void const*, unsigned int)+0x134>
    a8d0:	.word	0x1fff2448
    a8d4:	.word	0x00016f6c
    a8d8:	.word	0x00017134
    a8dc:	.word	0x1fff0b00

0000a8e0 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a8e0:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a8e2:	push	{r4, r5, r6, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a8e4:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a8e8:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    a8ea:	mov	r1, r5
    a8ec:	ldr	r0, [r0, #8]
    a8ee:	bl	c7f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    a8f2:	mov	r6, r0
    a8f4:	cbz	r0, a918 <FatFile::addCluster()+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    a8f6:	cbz	r5, a910 <FatFile::addCluster()+0x30>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    a8f8:	ldr	r3, [r4, #16]
    a8fa:	adds	r5, #1
    a8fc:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    a8fe:	ldrb	r3, [r4, #2]
    a900:	it	ne
    a902:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a906:	orn	r3, r3, #127	; 0x7f
    a90a:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    a90c:	mov	r0, r6
    a90e:	pop	{r4, r5, r6, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    a910:	ldrb	r3, [r4, #2]
    a912:	orr.w	r3, r3, #64	; 0x40
    a916:	b.n	a906 <FatFile::addCluster()+0x26>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a918:	movs	r1, #10
    a91a:	ldr	r0, [pc, #36]	; (a940 <FatFile::addCluster()+0x60>)
    a91c:	bl	fe48 <usb_serial_write>
    a920:	movs	r1, #99	; 0x63
    a922:	ldr	r0, [pc, #32]	; (a944 <FatFile::addCluster()+0x64>)
    a924:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a928:	movs	r0, #46	; 0x2e
    a92a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a92e:	movs	r1, #35	; 0x23
    a930:	ldr	r0, [pc, #20]	; (a948 <FatFile::addCluster()+0x68>)
    a932:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a936:	ldr	r0, [pc, #16]	; (a948 <FatFile::addCluster()+0x68>)
    a938:	bl	11800 <Print::println()>
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    a93c:	mov	r0, r6
    a93e:	pop	{r4, r5, r6, pc}
    a940:	.word	0x00016f6c
    a944:	.word	0x000171a4
    a948:	.word	0x1fff0b00

0000a94c <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    a94c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    a950:	ldrb	r3, [r0, #0]
    a952:	and.w	r3, r3, #32
    a956:	cmp	r3, #0
    a958:	bne.n	aa26 <FatFile::addDirCluster()+0xda>
    a95a:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    a95e:	ldr	r2, [r0, #20]
    a960:	ldr	r3, [pc, #352]	; (aac4 <FatFile::addDirCluster()+0x178>)
    a962:	cmp	r2, r3
    a964:	mov	r9, r0
    a966:	bhi.n	a9fa <FatFile::addDirCluster()+0xae>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a968:	bl	a8e0 <FatFile::addCluster()>
    a96c:	mov	r8, r0
    a96e:	cmp	r0, #0
    a970:	beq.n	aa54 <FatFile::addDirCluster()+0x108>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    a972:	ldr.w	r0, [r9, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    a976:	ldr.w	r3, [r9, #16]
    a97a:	ldrb	r6, [r0, #6]
    a97c:	ldr	r2, [r0, #20]
    a97e:	subs	r3, #2
    a980:	lsls	r3, r6
    a982:	adds	r6, r3, r2
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a984:	adds	r0, #36	; 0x24
    a986:	mov	r1, r6
    a988:	movs	r2, #5
    a98a:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    a98e:	mov	r7, r0
    a990:	cmp	r0, #0
    a992:	beq.w	aa9a <FatFile::addDirCluster()+0x14e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    a996:	mov.w	r2, #512	; 0x200
    a99a:	mov	r1, r4
    a99c:	bl	12f4c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    a9a0:	ldr.w	r3, [r9, #8]
    a9a4:	ldrb	r2, [r3, #4]
    a9a6:	cmp	r2, #1
    a9a8:	bls.n	aa7e <FatFile::addDirCluster()+0x132>
    a9aa:	movs	r4, #1
    a9ac:	b.n	a9b8 <FatFile::addDirCluster()+0x6c>
    a9ae:	ldr.w	r3, [r9, #8]
    a9b2:	ldrb	r2, [r3, #4]
    a9b4:	cmp	r2, r4
    a9b6:	bls.n	aa7e <FatFile::addDirCluster()+0x132>
    a9b8:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a9ba:	ldr	r3, [r0, #0]
    a9bc:	adds	r1, r4, r6
    a9be:	ldr	r3, [r3, #28]
    a9c0:	mov	r2, r7
    a9c2:	blx	r3
    a9c4:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, pc->data)) {
    a9c6:	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    a9c8:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    a9ca:	cmp	r0, #0
    a9cc:	bne.n	a9ae <FatFile::addDirCluster()+0x62>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a9ce:	movs	r1, #10
    a9d0:	ldr	r0, [pc, #244]	; (aac8 <FatFile::addDirCluster()+0x17c>)
    a9d2:	bl	fe48 <usb_serial_write>
    a9d6:	movs	r1, #99	; 0x63
    a9d8:	ldr	r0, [pc, #240]	; (aacc <FatFile::addDirCluster()+0x180>)
    a9da:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a9de:	movs	r0, #46	; 0x2e
    a9e0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    a9e4:	movs	r1, #83	; 0x53
    a9e6:	ldr	r0, [pc, #232]	; (aad0 <FatFile::addDirCluster()+0x184>)
    a9e8:	bl	118cc <Print::print(long)>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    a9ec:	mov	r8, r5
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    a9ee:	ldr	r0, [pc, #224]	; (aad0 <FatFile::addDirCluster()+0x184>)
    a9f0:	bl	11800 <Print::println()>
}
    a9f4:	mov	r0, r8
    a9f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a9fa:	movs	r1, #10
    a9fc:	ldr	r0, [pc, #200]	; (aac8 <FatFile::addDirCluster()+0x17c>)
    a9fe:	bl	fe48 <usb_serial_write>
    aa02:	movs	r1, #99	; 0x63
    aa04:	ldr	r0, [pc, #196]	; (aacc <FatFile::addDirCluster()+0x180>)
    aa06:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    aa0a:	movs	r0, #46	; 0x2e
    aa0c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    aa10:	movs	r1, #66	; 0x42
    aa12:	ldr	r0, [pc, #188]	; (aad0 <FatFile::addDirCluster()+0x184>)
    aa14:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    aa18:	ldr	r0, [pc, #180]	; (aad0 <FatFile::addDirCluster()+0x184>)
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    aa1a:	mov	r8, r4
    aa1c:	bl	11800 <Print::println()>
}
    aa20:	mov	r0, r8
    aa22:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    aa26:	movs	r1, #10
    aa28:	ldr	r0, [pc, #156]	; (aac8 <FatFile::addDirCluster()+0x17c>)
    aa2a:	bl	fe48 <usb_serial_write>
    aa2e:	movs	r1, #99	; 0x63
    aa30:	ldr	r0, [pc, #152]	; (aacc <FatFile::addDirCluster()+0x180>)
    aa32:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    aa36:	movs	r0, #46	; 0x2e
    aa38:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    aa3c:	movs	r1, #61	; 0x3d
    aa3e:	ldr	r0, [pc, #144]	; (aad0 <FatFile::addDirCluster()+0x184>)
    aa40:	bl	118cc <Print::print(long)>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    aa44:	mov.w	r8, #0
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    aa48:	ldr	r0, [pc, #132]	; (aad0 <FatFile::addDirCluster()+0x184>)
    aa4a:	bl	11800 <Print::println()>
}
    aa4e:	mov	r0, r8
    aa50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    aa54:	movs	r1, #10
    aa56:	ldr	r0, [pc, #112]	; (aac8 <FatFile::addDirCluster()+0x17c>)
    aa58:	bl	fe48 <usb_serial_write>
    aa5c:	movs	r1, #99	; 0x63
    aa5e:	ldr	r0, [pc, #108]	; (aacc <FatFile::addDirCluster()+0x180>)
    aa60:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    aa64:	movs	r0, #46	; 0x2e
    aa66:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    aa6a:	movs	r1, #70	; 0x46
    aa6c:	ldr	r0, [pc, #96]	; (aad0 <FatFile::addDirCluster()+0x184>)
    aa6e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    aa72:	ldr	r0, [pc, #92]	; (aad0 <FatFile::addDirCluster()+0x184>)
    aa74:	bl	11800 <Print::println()>
    aa78:	mov	r0, r8
    aa7a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    aa7e:	ldrb	r3, [r3, #6]
    aa80:	ldr.w	r1, [r9, #20]
    aa84:	mov.w	r2, #512	; 0x200
    aa88:	lsl.w	r3, r2, r3
    aa8c:	uxtah	r3, r1, r3
    aa90:	str.w	r3, [r9, #20]
  return true;

 fail:
  return false;
}
    aa94:	mov	r0, r8
    aa96:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    aa9a:	movs	r1, #10
    aa9c:	ldr	r0, [pc, #40]	; (aac8 <FatFile::addDirCluster()+0x17c>)
    aa9e:	bl	fe48 <usb_serial_write>
    aaa2:	movs	r1, #99	; 0x63
    aaa4:	ldr	r0, [pc, #36]	; (aacc <FatFile::addDirCluster()+0x180>)
    aaa6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    aaaa:	movs	r0, #46	; 0x2e
    aaac:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    aab0:	movs	r1, #76	; 0x4c
    aab2:	ldr	r0, [pc, #28]	; (aad0 <FatFile::addDirCluster()+0x184>)
    aab4:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    aab8:	ldr	r0, [pc, #20]	; (aad0 <FatFile::addDirCluster()+0x184>)
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    aaba:	mov	r8, r7
    aabc:	bl	11800 <Print::println()>
    aac0:	b.n	aa20 <FatFile::addDirCluster()+0xd4>
    aac2:	nop
    aac4:	.word	0x001ffdff
    aac8:	.word	0x00016f6c
    aacc:	.word	0x000171a4
    aad0:	.word	0x1fff0b00

0000aad4 <FatFile::cacheDirEntry(unsigned char)>:
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    aad4:	push	{r3, r4, r5, lr}
    aad6:	mov	r5, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    aad8:	ldr	r0, [r0, #8]
    aada:	mov	r2, r1
    aadc:	adds	r0, #36	; 0x24
    aade:	ldr	r1, [r5, #24]
    aae0:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    aae4:	mov	r4, r0
    aae6:	cbz	r0, aaf4 <FatFile::cacheDirEntry(unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    aae8:	ldrh	r0, [r5, #4]
    aaea:	and.w	r0, r0, #15
    aaee:	add.w	r0, r4, r0, lsl #5

 fail:
  return nullptr;
}
    aaf2:	pop	{r3, r4, r5, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    aaf4:	movs	r1, #10
    aaf6:	ldr	r0, [pc, #36]	; (ab1c <FatFile::cacheDirEntry(unsigned char)+0x48>)
    aaf8:	bl	fe48 <usb_serial_write>
    aafc:	movs	r1, #99	; 0x63
    aafe:	ldr	r0, [pc, #32]	; (ab20 <FatFile::cacheDirEntry(unsigned char)+0x4c>)
    ab00:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ab04:	movs	r0, #46	; 0x2e
    ab06:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ab0a:	movs	r1, #101	; 0x65
    ab0c:	ldr	r0, [pc, #20]	; (ab24 <FatFile::cacheDirEntry(unsigned char)+0x50>)
    ab0e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ab12:	ldr	r0, [pc, #16]	; (ab24 <FatFile::cacheDirEntry(unsigned char)+0x50>)
    ab14:	bl	11800 <Print::println()>
    ab18:	mov	r0, r4
    ab1a:	pop	{r3, r4, r5, pc}
    ab1c:	.word	0x00016f6c
    ab20:	.word	0x000171a4
    ab24:	.word	0x1fff0b00

0000ab28 <FatFile::sync() [clone .part.42]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    ab28:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    ab2a:	ldrsb.w	r3, [r0, #2]
    ab2e:	cmp	r3, #0
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    ab30:	sub	sp, #8
    ab32:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    ab34:	blt.n	ab90 <FatFile::sync() [clone .part.42]+0x68>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    ab36:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    ab38:	add.w	r0, r5, #36	; 0x24
    ab3c:	bl	7c04 <FsCache::sync()>
    ab40:	cbnz	r0, ab76 <FatFile::sync() [clone .part.42]+0x4e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ab42:	movs	r1, #10
    ab44:	ldr	r0, [pc, #188]	; (ac04 <FatFile::sync() [clone .part.42]+0xdc>)
    ab46:	bl	fe48 <usb_serial_write>
    ab4a:	movs	r1, #99	; 0x63
    ab4c:	ldr	r0, [pc, #184]	; (ac08 <FatFile::sync() [clone .part.42]+0xe0>)
    ab4e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ab52:	movs	r0, #46	; 0x2e
    ab54:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ab58:	movw	r1, #1226	; 0x4ca
    ab5c:	ldr	r0, [pc, #172]	; (ac0c <FatFile::sync() [clone .part.42]+0xe4>)
    ab5e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ab62:	ldr	r0, [pc, #168]	; (ac0c <FatFile::sync() [clone .part.42]+0xe4>)
    ab64:	bl	11800 <Print::println()>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    ab68:	ldrb	r3, [r4, #1]
    ab6a:	orr.w	r3, r3, #1
    ab6e:	strb	r3, [r4, #1]
  return false;
    ab70:	movs	r0, #0
}
    ab72:	add	sp, #8
    ab74:	pop	{r4, r5, r6, pc}
    ab76:	add.w	r0, r5, #564	; 0x234
    ab7a:	bl	7c04 <FsCache::sync()>
    ab7e:	cmp	r0, #0
    ab80:	beq.n	ab42 <FatFile::sync() [clone .part.42]+0x1a>
    ab82:	ldr	r0, [r5, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    ab84:	ldr	r3, [r0, #0]
    ab86:	ldr	r3, [r3, #24]
    ab88:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    ab8a:	cmp	r0, #0
    ab8c:	beq.n	ab42 <FatFile::sync() [clone .part.42]+0x1a>
    ab8e:	b.n	ab72 <FatFile::sync() [clone .part.42]+0x4a>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    ab90:	movs	r1, #1
    ab92:	bl	aad4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    ab96:	mov	r5, r0
    ab98:	cbz	r0, abdc <FatFile::sync() [clone .part.42]+0xb4>
    ab9a:	ldrb	r3, [r0, #0]
    ab9c:	cmp	r3, #229	; 0xe5
    ab9e:	beq.n	abdc <FatFile::sync() [clone .part.42]+0xb4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    aba0:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    aba2:	ldr	r2, [pc, #108]	; (ac10 <FatFile::sync() [clone .part.42]+0xe8>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    aba4:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    aba6:	itt	mi
    aba8:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    abaa:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    abac:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    abae:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    abb0:	strh	r3, [r0, #26]
    abb2:	lsrs	r3, r3, #16
    abb4:	strh	r3, [r0, #20]
    abb6:	cbz	r6, abd2 <FatFile::sync() [clone .part.42]+0xaa>
      FsDateTime::callback(&date, &time, &ms10);
    abb8:	add.w	r2, sp, #3
    abbc:	add.w	r1, sp, #6
    abc0:	add	r0, sp, #4
    abc2:	blx	r6
      setLe16(dir->modifyDate, date);
    abc4:	ldrh.w	r3, [sp, #4]
    abc8:	ldrh.w	r2, [sp, #6]
    abcc:	strh	r3, [r5, #24]
    abce:	strh	r3, [r5, #18]
    abd0:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    abd2:	ldrb	r3, [r4, #2]
    abd4:	and.w	r3, r3, #127	; 0x7f
    abd8:	strb	r3, [r4, #2]
    abda:	b.n	ab36 <FatFile::sync() [clone .part.42]+0xe>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    abdc:	movs	r1, #10
    abde:	ldr	r0, [pc, #36]	; (ac04 <FatFile::sync() [clone .part.42]+0xdc>)
    abe0:	bl	fe48 <usb_serial_write>
    abe4:	movs	r1, #99	; 0x63
    abe6:	ldr	r0, [pc, #32]	; (ac08 <FatFile::sync() [clone .part.42]+0xe0>)
    abe8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    abec:	movs	r0, #46	; 0x2e
    abee:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    abf2:	movw	r1, #1201	; 0x4b1
    abf6:	ldr	r0, [pc, #20]	; (ac0c <FatFile::sync() [clone .part.42]+0xe4>)
    abf8:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    abfc:	ldr	r0, [pc, #12]	; (ac0c <FatFile::sync() [clone .part.42]+0xe4>)
    abfe:	bl	11800 <Print::println()>
    ac02:	b.n	ab68 <FatFile::sync() [clone .part.42]+0x40>
    ac04:	.word	0x00016f6c
    ac08:	.word	0x000171a4
    ac0c:	.word	0x1fff0b00
    ac10:	.word	0x1fff2448

0000ac14 <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    ac14:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ac16:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    ac18:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ac1a:	cbnz	r3, ac26 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    ac1c:	movs	r3, #0
    ac1e:	strb	r3, [r4, #0]
  m_flags = 0;
    ac20:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    ac22:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    ac24:	pop	{r4, pc}
    ac26:	bl	ab28 <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    ac2a:	movs	r3, #0
    ac2c:	strb	r3, [r4, #0]
  m_flags = 0;
    ac2e:	strb	r3, [r4, #2]
  return rtn;
}
    ac30:	pop	{r4, pc}
    ac32:	nop

0000ac34 <FatFile::dirEntry(DirFat_t*)>:
  close();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    ac34:	push	{r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ac36:	ldrb	r3, [r0, #0]
  close();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    ac38:	mov	r6, r0
    ac3a:	mov	r5, r1
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ac3c:	cbnz	r3, ac70 <FatFile::dirEntry(DirFat_t*)+0x3c>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    ac3e:	mov	r0, r6
    ac40:	movs	r1, #0
    ac42:	bl	aad4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    ac46:	mov	r4, r0
    ac48:	cbz	r0, aca2 <FatFile::dirEntry(DirFat_t*)+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
    ac4a:	ldr	r1, [r0, #0]
    ac4c:	ldr	r2, [r0, #4]
    ac4e:	ldr	r3, [r0, #8]
    ac50:	ldr	r0, [r0, #12]
    ac52:	str	r0, [r5, #12]
    ac54:	str	r1, [r5, #0]
    ac56:	str	r2, [r5, #4]
    ac58:	str	r3, [r5, #8]
    ac5a:	ldr	r1, [r4, #16]
    ac5c:	ldr	r2, [r4, #20]
    ac5e:	ldr	r3, [r4, #24]
    ac60:	ldr	r0, [r4, #28]
    ac62:	str	r0, [r5, #28]
    ac64:	str	r1, [r5, #16]
    ac66:	str	r2, [r5, #20]
    ac68:	str	r3, [r5, #24]
  return true;
    ac6a:	movs	r4, #1

 fail:
  return false;
}
    ac6c:	mov	r0, r4
    ac6e:	pop	{r4, r5, r6, pc}
    ac70:	bl	ab28 <FatFile::sync() [clone .part.42]>
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
  DirFat_t* dir;
  // Make sure fields on device are correct.
  if (!sync()) {
    ac74:	mov	r4, r0
    ac76:	cmp	r0, #0
    ac78:	bne.n	ac3e <FatFile::dirEntry(DirFat_t*)+0xa>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ac7a:	movs	r1, #10
    ac7c:	ldr	r0, [pc, #72]	; (acc8 <FatFile::dirEntry(DirFat_t*)+0x94>)
    ac7e:	bl	fe48 <usb_serial_write>
    ac82:	movs	r1, #99	; 0x63
    ac84:	ldr	r0, [pc, #68]	; (accc <FatFile::dirEntry(DirFat_t*)+0x98>)
    ac86:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ac8a:	movs	r0, #46	; 0x2e
    ac8c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ac90:	movs	r1, #186	; 0xba
    ac92:	ldr	r0, [pc, #60]	; (acd0 <FatFile::dirEntry(DirFat_t*)+0x9c>)
    ac94:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ac98:	ldr	r0, [pc, #52]	; (acd0 <FatFile::dirEntry(DirFat_t*)+0x9c>)
    ac9a:	bl	11800 <Print::println()>
  memcpy(dst, dir, sizeof(DirFat_t));
  return true;

 fail:
  return false;
}
    ac9e:	mov	r0, r4
    aca0:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    aca2:	movs	r1, #10
    aca4:	ldr	r0, [pc, #32]	; (acc8 <FatFile::dirEntry(DirFat_t*)+0x94>)
    aca6:	bl	fe48 <usb_serial_write>
    acaa:	movs	r1, #99	; 0x63
    acac:	ldr	r0, [pc, #28]	; (accc <FatFile::dirEntry(DirFat_t*)+0x98>)
    acae:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    acb2:	movs	r0, #46	; 0x2e
    acb4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    acb8:	movs	r1, #192	; 0xc0
    acba:	ldr	r0, [pc, #20]	; (acd0 <FatFile::dirEntry(DirFat_t*)+0x9c>)
    acbc:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    acc0:	ldr	r0, [pc, #12]	; (acd0 <FatFile::dirEntry(DirFat_t*)+0x9c>)
    acc2:	bl	11800 <Print::println()>
    acc6:	b.n	ac6c <FatFile::dirEntry(DirFat_t*)+0x38>
    acc8:	.word	0x00016f6c
    accc:	.word	0x000171a4
    acd0:	.word	0x1fff0b00

0000acd4 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    acd4:	push	{r4, r5, r6, lr}
    acd6:	sub	sp, #32
    acd8:	mov	r6, r1
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    acda:	mov	r1, sp

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    acdc:	mov	r5, r2
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    acde:	bl	ac34 <FatFile::dirEntry(DirFat_t*)>
    ace2:	mov	r4, r0
    ace4:	cbz	r0, acf8 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.modifyDate);
    ace6:	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    acea:	ldrh.w	r3, [sp, #22]
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.modifyDate);
    acee:	strh	r2, [r6, #0]
  *ptime = getLe16(dir.modifyTime);
  return true;

 fail:
  return false;
}
    acf0:	mov	r0, r4
  if (!dirEntry(&dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.modifyDate);
  *ptime = getLe16(dir.modifyTime);
    acf2:	strh	r3, [r5, #0]
  return true;

 fail:
  return false;
}
    acf4:	add	sp, #32
    acf6:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    acf8:	movs	r1, #10
    acfa:	ldr	r0, [pc, #40]	; (ad24 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x50>)
    acfc:	bl	fe48 <usb_serial_write>
    ad00:	movs	r1, #99	; 0x63
    ad02:	ldr	r0, [pc, #36]	; (ad28 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x54>)
    ad04:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ad08:	movs	r0, #46	; 0x2e
    ad0a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ad0e:	movw	r1, #295	; 0x127
    ad12:	ldr	r0, [pc, #24]	; (ad2c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x58>)
    ad14:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ad18:	ldr	r0, [pc, #16]	; (ad2c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x58>)
    ad1a:	bl	11800 <Print::println()>
    ad1e:	mov	r0, r4
    ad20:	add	sp, #32
    ad22:	pop	{r4, r5, r6, pc}
    ad24:	.word	0x00016f6c
    ad28:	.word	0x000171a4
    ad2c:	.word	0x1fff0b00

0000ad30 <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    ad30:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    ad32:	ldrb	r4, [r0, #0]
    ad34:	cbnz	r4, ad62 <FatFile::openRoot(FatVolume*)+0x32>
    ad36:	mov	r5, r0
    ad38:	mov	r6, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    ad3a:	movs	r2, #36	; 0x24
    ad3c:	mov	r1, r4
    ad3e:	bl	12f4c <memset>

  m_vol = vol;
    ad42:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    ad44:	ldrb	r3, [r6, #7]
    ad46:	cmp	r3, #16
    ad48:	beq.n	ad58 <FatFile::openRoot(FatVolume*)+0x28>
    ad4a:	cmp	r3, #32
    ad4c:	bne.n	ad8c <FatFile::openRoot(FatVolume*)+0x5c>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    ad4e:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    ad50:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    ad52:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    ad54:	strb	r0, [r5, #2]
  return true;

 fail:
  return false;
}
    ad56:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    ad58:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    ad5a:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    ad5c:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    ad5e:	strb	r0, [r5, #2]
  return true;

 fail:
  return false;
}
    ad60:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ad62:	movs	r1, #10
    ad64:	ldr	r0, [pc, #64]	; (ada8 <FatFile::openRoot(FatVolume*)+0x78>)
    ad66:	bl	fe48 <usb_serial_write>
    ad6a:	movs	r1, #99	; 0x63
    ad6c:	ldr	r0, [pc, #60]	; (adac <FatFile::openRoot(FatVolume*)+0x7c>)
    ad6e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ad72:	movs	r0, #46	; 0x2e
    ad74:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ad78:	movw	r1, #657	; 0x291
    ad7c:	ldr	r0, [pc, #48]	; (adb0 <FatFile::openRoot(FatVolume*)+0x80>)
    ad7e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ad82:	ldr	r0, [pc, #44]	; (adb0 <FatFile::openRoot(FatVolume*)+0x80>)
    ad84:	bl	11800 <Print::println()>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    ad88:	movs	r0, #0
    ad8a:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ad8c:	movs	r1, #10
    ad8e:	ldr	r0, [pc, #24]	; (ada8 <FatFile::openRoot(FatVolume*)+0x78>)
    ad90:	bl	fe48 <usb_serial_write>
    ad94:	movs	r1, #99	; 0x63
    ad96:	ldr	r0, [pc, #20]	; (adac <FatFile::openRoot(FatVolume*)+0x7c>)
    ad98:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ad9c:	movs	r0, #46	; 0x2e
    ad9e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ada2:	mov.w	r1, #676	; 0x2a4
    ada6:	b.n	ad7c <FatFile::openRoot(FatVolume*)+0x4c>
    ada8:	.word	0x00016f6c
    adac:	.word	0x000171a4
    adb0:	.word	0x1fff0b00

0000adb4 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    adb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    adb8:	mov	r6, r0
    adba:	sub	sp, #76	; 0x4c
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    adbc:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    adbe:	str	r2, [sp, #4]
    adc0:	movs	r0, #0
    adc2:	strb.w	r0, [sp, #36]	; 0x24
    adc6:	strb.w	r0, [sp, #37]	; 0x25
    adca:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    adce:	cmp	r4, #0
    add0:	bne.n	ae60 <FatFile::open(FatFile*, char const*, int)+0xac>
    add2:	mov	r9, r3
    add4:	ldrb	r3, [r1, #0]
    add6:	tst.w	r3, #112	; 0x70
    adda:	mov	r5, r1
    addc:	beq.n	ae60 <FatFile::open(FatFile*, char const*, int)+0xac>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    adde:	ldrb	r3, [r2, #0]
    ade0:	cmp	r3, #47	; 0x2f
    ade2:	mov	r0, r2
    ade4:	beq.n	ae3e <FatFile::open(FatFile*, char const*, int)+0x8a>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ade6:	mov.w	r8, #0
    adea:	b.n	adf8 <FatFile::open(FatFile*, char const*, int)+0x44>
    adec:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    adee:	strb.w	r8, [r6]
  m_flags = 0;
    adf2:	strb.w	r8, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    adf6:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    adf8:	add	r2, sp, #4
    adfa:	add	r1, sp, #12
    adfc:	bl	cf64 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ae00:	add	r2, sp, #12
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ae02:	mov	r7, r0
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ae04:	mov	r1, r5
    ae06:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ae08:	cmp	r0, #0
    ae0a:	beq.n	ae90 <FatFile::open(FatFile*, char const*, int)+0xdc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    ae0c:	ldr	r4, [sp, #4]
    ae0e:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ae10:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    ae12:	cmp	r4, #0
    ae14:	beq.n	aebe <FatFile::open(FatFile*, char const*, int)+0x10a>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ae16:	bl	d72c <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ae1a:	mov	r5, r6
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ae1c:	mov	r7, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ae1e:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ae20:	cmp	r0, #0
    ae22:	beq.n	aed4 <FatFile::open(FatFile*, char const*, int)+0x120>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ae24:	ldmia	r5!, {r0, r1, r2, r3}
    ae26:	stmia	r4!, {r0, r1, r2, r3}
    ae28:	ldmia	r5!, {r0, r1, r2, r3}
    ae2a:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ae2c:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ae2e:	ldr	r2, [r5, #0]
    ae30:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ae32:	cmp	r3, #0
    ae34:	beq.n	adec <FatFile::open(FatFile*, char const*, int)+0x38>
    ae36:	mov	r0, r6
    ae38:	bl	ab28 <FatFile::sync() [clone .part.42]>
    ae3c:	b.n	adec <FatFile::open(FatFile*, char const*, int)+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    ae3e:	adds	r0, #1
    ae40:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    ae42:	ldrb	r3, [r0, #0]
    ae44:	cmp	r3, #47	; 0x2f
    ae46:	beq.n	ae3e <FatFile::open(FatFile*, char const*, int)+0x8a>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    ae48:	ldr	r1, [r5, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    ae4a:	cmp	r3, #0
    ae4c:	beq.n	af02 <FatFile::open(FatFile*, char const*, int)+0x14e>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    ae4e:	add	r0, sp, #36	; 0x24
    ae50:	bl	ad30 <FatFile::openRoot(FatVolume*)>
    ae54:	mov	r7, r0
    ae56:	cmp	r0, #0
    ae58:	beq.n	af0c <FatFile::open(FatFile*, char const*, int)+0x158>
    ae5a:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    ae5c:	add	r5, sp, #36	; 0x24
    ae5e:	b.n	ade6 <FatFile::open(FatFile*, char const*, int)+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ae60:	movs	r1, #10
    ae62:	ldr	r0, [pc, #208]	; (af34 <FatFile::open(FatFile*, char const*, int)+0x180>)
    ae64:	bl	fe48 <usb_serial_write>
    ae68:	movs	r1, #99	; 0x63
    ae6a:	ldr	r0, [pc, #204]	; (af38 <FatFile::open(FatFile*, char const*, int)+0x184>)
    ae6c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ae70:	movs	r0, #46	; 0x2e
    ae72:	bl	ff50 <usb_serial_putchar>
    ae76:	mov.w	r1, #436	; 0x1b4
    ae7a:	ldr	r0, [pc, #192]	; (af3c <FatFile::open(FatFile*, char const*, int)+0x188>)
    ae7c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ae80:	ldr	r0, [pc, #184]	; (af3c <FatFile::open(FatFile*, char const*, int)+0x188>)
    ae82:	bl	11800 <Print::println()>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    ae86:	movs	r7, #0
}
    ae88:	mov	r0, r7
    ae8a:	add	sp, #76	; 0x4c
    ae8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ae90:	movs	r1, #10
    ae92:	ldr	r0, [pc, #160]	; (af34 <FatFile::open(FatFile*, char const*, int)+0x180>)
    ae94:	bl	fe48 <usb_serial_write>
    ae98:	movs	r1, #99	; 0x63
    ae9a:	ldr	r0, [pc, #156]	; (af38 <FatFile::open(FatFile*, char const*, int)+0x184>)
    ae9c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    aea0:	movs	r0, #46	; 0x2e
    aea2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    aea6:	mov.w	r1, #454	; 0x1c6
    aeaa:	ldr	r0, [pc, #144]	; (af3c <FatFile::open(FatFile*, char const*, int)+0x188>)
    aeac:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    aeb0:	ldr	r0, [pc, #136]	; (af3c <FatFile::open(FatFile*, char const*, int)+0x188>)
    aeb2:	bl	11800 <Print::println()>
    aeb6:	mov	r0, r7
    aeb8:	add	sp, #76	; 0x4c
    aeba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    aebe:	mov	r3, r9
    aec0:	add	r2, sp, #12
    aec2:	mov	r1, r5
    aec4:	mov	r0, r6
    aec6:	bl	d72c <FatFile::open(FatFile*, fname_t*, int)>
    aeca:	mov	r7, r0

 fail:
  return false;
}
    aecc:	mov	r0, r7
    aece:	add	sp, #76	; 0x4c
    aed0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    aed4:	movs	r1, #10
    aed6:	ldr	r0, [pc, #92]	; (af34 <FatFile::open(FatFile*, char const*, int)+0x180>)
    aed8:	bl	fe48 <usb_serial_write>
    aedc:	movs	r1, #99	; 0x63
    aede:	ldr	r0, [pc, #88]	; (af38 <FatFile::open(FatFile*, char const*, int)+0x184>)
    aee0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    aee4:	movs	r0, #46	; 0x2e
    aee6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    aeea:	movw	r1, #461	; 0x1cd
    aeee:	ldr	r0, [pc, #76]	; (af3c <FatFile::open(FatFile*, char const*, int)+0x188>)
    aef0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    aef4:	ldr	r0, [pc, #68]	; (af3c <FatFile::open(FatFile*, char const*, int)+0x188>)
    aef6:	bl	11800 <Print::println()>
    aefa:	mov	r0, r7
    aefc:	add	sp, #76	; 0x4c
    aefe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    af02:	mov	r0, r6
    af04:	bl	ad30 <FatFile::openRoot(FatVolume*)>
    af08:	mov	r7, r0
    af0a:	b.n	ae88 <FatFile::open(FatFile*, char const*, int)+0xd4>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    af0c:	movs	r1, #10
    af0e:	ldr	r0, [pc, #36]	; (af34 <FatFile::open(FatFile*, char const*, int)+0x180>)
    af10:	bl	fe48 <usb_serial_write>
    af14:	movs	r1, #99	; 0x63
    af16:	ldr	r0, [pc, #32]	; (af38 <FatFile::open(FatFile*, char const*, int)+0x184>)
    af18:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    af1c:	movs	r0, #46	; 0x2e
    af1e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    af22:	movw	r1, #447	; 0x1bf
    af26:	ldr	r0, [pc, #20]	; (af3c <FatFile::open(FatFile*, char const*, int)+0x188>)
    af28:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    af2c:	ldr	r0, [pc, #12]	; (af3c <FatFile::open(FatFile*, char const*, int)+0x188>)
    af2e:	bl	11800 <Print::println()>
    af32:	b.n	ae88 <FatFile::open(FatFile*, char const*, int)+0xd4>
    af34:	.word	0x00016f6c
    af38:	.word	0x000171a4
    af3c:	.word	0x1fff0b00

0000af40 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    af40:	cbz	r1, af4a <FatFile::open(FatVolume*, char const*, int)+0xa>
    af42:	addw	r1, r1, #1092	; 0x444
    af46:	b.w	adb4 <FatFile::open(FatFile*, char const*, int)>
}
    af4a:	mov	r0, r1
    af4c:	bx	lr
    af4e:	nop

0000af50 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    af50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    af54:	ldrb	r3, [r0, #2]
    af56:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    af58:	sub	sp, #12
    af5a:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    af5c:	bpl.w	b156 <FatFile::read(void*, unsigned int)+0x206>
    af60:	mov	r7, r1
    af62:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    af64:	lsls	r6, r1, #28
    af66:	mov	r9, r2
    af68:	bmi.n	b030 <FatFile::read(void*, unsigned int)+0xe0>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    af6a:	lsls	r4, r1, #26
    af6c:	bpl.n	af80 <FatFile::read(void*, unsigned int)+0x30>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    af6e:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    af70:	ldr	r3, [r0, #20]
    af72:	ldrh	r2, [r2, #8]
    af74:	rsb	r3, r3, r2, lsl #5
    af78:	uxth	r3, r3
    af7a:	cmp	r9, r3
    af7c:	it	cs
    af7e:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    af80:	cmp.w	r9, #0
    af84:	beq.w	b0fa <FatFile::read(void*, unsigned int)+0x1aa>
    af88:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    af8a:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    af8c:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    af8e:	mov	r6, r9
    af90:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    af94:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    af98:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    af9c:	bpl.n	b07a <FatFile::read(void*, unsigned int)+0x12a>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    af9e:	ldr	r1, [r2, #32]
    afa0:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    afa4:	cmp.w	fp, #0
    afa8:	bne.n	b03e <FatFile::read(void*, unsigned int)+0xee>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    afaa:	cmp.w	r6, #512	; 0x200
    afae:	bcc.n	b03e <FatFile::read(void*, unsigned int)+0xee>
    afb0:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    afb2:	cmp	r1, r3
    afb4:	beq.n	b03e <FatFile::read(void*, unsigned int)+0xee>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    afb6:	cmp.w	r6, #1024	; 0x400
    afba:	bcc.w	b0c2 <FatFile::read(void*, unsigned int)+0x172>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    afbe:	ldrb	r0, [r5, #0]
    afc0:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    afc2:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    afc6:	bmi.n	afd4 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    afc8:	ldrb	r0, [r2, #4]
    afca:	rsb	r0, r8, r0
    afce:	cmp	fp, r0
    afd0:	it	cs
    afd2:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    afd4:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    afd6:	mov.w	r4, fp, lsl #9
    afda:	bhi.n	b0ae <FatFile::read(void*, unsigned int)+0x15e>
    afdc:	add.w	r0, r1, fp
    afe0:	cmp	r3, r0
    afe2:	bcs.n	b0ae <FatFile::read(void*, unsigned int)+0x15e>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    afe4:	add.w	r0, r2, #36	; 0x24
    afe8:	str	r1, [sp, #4]
    afea:	str	r2, [sp, #0]
    afec:	bl	7c04 <FsCache::sync()>
    aff0:	ldr	r2, [sp, #0]
    aff2:	ldr	r1, [sp, #4]
    aff4:	cmp	r0, #0
    aff6:	bne.n	b0ae <FatFile::read(void*, unsigned int)+0x15e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    aff8:	movs	r1, #10
    affa:	ldr	r0, [pc, #476]	; (b1d8 <FatFile::read(void*, unsigned int)+0x288>)
    affc:	bl	fe48 <usb_serial_write>
    b000:	movs	r1, #99	; 0x63
    b002:	ldr	r0, [pc, #472]	; (b1dc <FatFile::read(void*, unsigned int)+0x28c>)
    b004:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b008:	movs	r0, #46	; 0x2e
    b00a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b00e:	movw	r1, #811	; 0x32b
    b012:	ldr	r0, [pc, #460]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b014:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b018:	ldr	r0, [pc, #452]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b01a:	bl	11800 <Print::println()>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    b01e:	ldrb	r3, [r5, #1]
  return -1;
    b020:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    b024:	orr.w	r3, r3, #2
    b028:	strb	r3, [r5, #1]
  return -1;
}
    b02a:	add	sp, #12
    b02c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    b030:	ldr	r3, [r0, #28]
    b032:	ldr	r2, [r0, #20]
    b034:	subs	r3, r3, r2
    b036:	cmp	r9, r3
    b038:	it	cs
    b03a:	movcs	r9, r3
    b03c:	b.n	af80 <FatFile::read(void*, unsigned int)+0x30>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b03e:	add.w	r0, r2, #36	; 0x24
    b042:	movs	r2, #0
    b044:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    b048:	cmp	r0, #0
    b04a:	beq.n	b106 <FatFile::read(void*, unsigned int)+0x1b6>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    b04c:	rsb	r4, fp, #512	; 0x200
    b050:	cmp	r4, r6
    b052:	it	cs
    b054:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    b056:	add.w	r1, r0, fp
    b05a:	mov	r2, r4
    b05c:	mov	r0, r7
    b05e:	bl	fc48 <memcpy>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    b062:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    b064:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    b066:	add	r3, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    b068:	add	r7, r4
    m_curPosition += n;
    b06a:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    b06c:	beq.n	b0fa <FatFile::read(void*, unsigned int)+0x1aa>
    b06e:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    b070:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    b072:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    b074:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    b078:	bmi.n	af9e <FatFile::read(void*, unsigned int)+0x4e>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    b07a:	ldrb.w	r8, [r2, #5]
    b07e:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    b082:	cmp.w	fp, #0
    b086:	bne.n	b0aa <FatFile::read(void*, unsigned int)+0x15a>
    b088:	cmp.w	r8, #0
    b08c:	bne.n	b0aa <FatFile::read(void*, unsigned int)+0x15a>
        // start of new cluster
        if (m_curPosition == 0) {
    b08e:	cbnz	r3, b0d4 <FatFile::read(void*, unsigned int)+0x184>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    b090:	lsls	r1, r1, #25
    b092:	ite	mi
    b094:	ldrmi	r4, [r2, #32]
    b096:	ldrpl	r4, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    b098:	str	r4, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    b09a:	ldrb	r1, [r2, #6]
    b09c:	ldr	r0, [r2, #20]
    b09e:	subs	r4, #2
    b0a0:	lsls	r4, r1
    b0a2:	add.w	r1, r8, r0
    b0a6:	add	r1, r4
    b0a8:	b.n	afa4 <FatFile::read(void*, unsigned int)+0x54>
    b0aa:	ldr	r4, [r5, #16]
    b0ac:	b.n	b09a <FatFile::read(void*, unsigned int)+0x14a>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    b0ae:	ldr	r0, [r2, #40]	; 0x28
    b0b0:	ldr	r2, [r0, #0]
    b0b2:	mov	r3, fp
    b0b4:	ldr.w	fp, [r2, #16]
    b0b8:	mov	r2, r7
    b0ba:	blx	fp
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    b0bc:	cmp	r0, #0
    b0be:	bne.n	b062 <FatFile::read(void*, unsigned int)+0x112>
    b0c0:	b.n	aff8 <FatFile::read(void*, unsigned int)+0xa8>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    b0c2:	ldr	r0, [r2, #40]	; 0x28
    b0c4:	ldr	r3, [r0, #0]
    b0c6:	mov	r2, r7
    b0c8:	ldr	r3, [r3, #12]
    b0ca:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    b0cc:	cbz	r0, b12e <FatFile::read(void*, unsigned int)+0x1de>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    b0ce:	mov.w	r4, #512	; 0x200
    b0d2:	b.n	b062 <FatFile::read(void*, unsigned int)+0x112>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    b0d4:	lsls	r3, r1, #28
    b0d6:	bpl.n	b0e4 <FatFile::read(void*, unsigned int)+0x194>
    b0d8:	ldrb	r3, [r5, #2]
    b0da:	lsls	r4, r3, #25
    b0dc:	bpl.n	b0e4 <FatFile::read(void*, unsigned int)+0x194>
          m_curCluster++;
    b0de:	ldr	r4, [r5, #16]
    b0e0:	adds	r4, #1
    b0e2:	b.n	b098 <FatFile::read(void*, unsigned int)+0x148>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    b0e4:	mov	r0, r2
    b0e6:	ldr	r1, [r5, #16]
    b0e8:	mov	r2, sl
    b0ea:	bl	c618 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    b0ee:	cmp	r0, #0
    b0f0:	blt.n	b17e <FatFile::read(void*, unsigned int)+0x22e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    b0f2:	beq.n	b1a6 <FatFile::read(void*, unsigned int)+0x256>
    b0f4:	ldr	r2, [r5, #8]
    b0f6:	ldr	r4, [r5, #16]
    b0f8:	b.n	b09a <FatFile::read(void*, unsigned int)+0x14a>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    b0fa:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    b0fc:	rsb	r0, r6, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    b100:	add	sp, #12
    b102:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b106:	movs	r1, #10
    b108:	ldr	r0, [pc, #204]	; (b1d8 <FatFile::read(void*, unsigned int)+0x288>)
    b10a:	bl	fe48 <usb_serial_write>
    b10e:	movs	r1, #99	; 0x63
    b110:	ldr	r0, [pc, #200]	; (b1dc <FatFile::read(void*, unsigned int)+0x28c>)
    b112:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b116:	movs	r0, #46	; 0x2e
    b118:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b11c:	movw	r1, #795	; 0x31b
    b120:	ldr	r0, [pc, #188]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b122:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b126:	ldr	r0, [pc, #184]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b128:	bl	11800 <Print::println()>
    b12c:	b.n	b01e <FatFile::read(void*, unsigned int)+0xce>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b12e:	movs	r1, #10
    b130:	ldr	r0, [pc, #164]	; (b1d8 <FatFile::read(void*, unsigned int)+0x288>)
    b132:	bl	fe48 <usb_serial_write>
    b136:	movs	r1, #99	; 0x63
    b138:	ldr	r0, [pc, #160]	; (b1dc <FatFile::read(void*, unsigned int)+0x28c>)
    b13a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b13e:	movs	r0, #46	; 0x2e
    b140:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b144:	movw	r1, #819	; 0x333
    b148:	ldr	r0, [pc, #148]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b14a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b14e:	ldr	r0, [pc, #144]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b150:	bl	11800 <Print::println()>
    b154:	b.n	b01e <FatFile::read(void*, unsigned int)+0xce>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b156:	movs	r1, #10
    b158:	ldr	r0, [pc, #124]	; (b1d8 <FatFile::read(void*, unsigned int)+0x288>)
    b15a:	bl	fe48 <usb_serial_write>
    b15e:	movs	r1, #99	; 0x63
    b160:	ldr	r0, [pc, #120]	; (b1dc <FatFile::read(void*, unsigned int)+0x28c>)
    b162:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b166:	movs	r0, #46	; 0x2e
    b168:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b16c:	movw	r1, #734	; 0x2de
    b170:	ldr	r0, [pc, #108]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b172:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b176:	ldr	r0, [pc, #104]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b178:	bl	11800 <Print::println()>
    b17c:	b.n	b01e <FatFile::read(void*, unsigned int)+0xce>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b17e:	movs	r1, #10
    b180:	ldr	r0, [pc, #84]	; (b1d8 <FatFile::read(void*, unsigned int)+0x288>)
    b182:	bl	fe48 <usb_serial_write>
    b186:	movs	r1, #99	; 0x63
    b188:	ldr	r0, [pc, #80]	; (b1dc <FatFile::read(void*, unsigned int)+0x28c>)
    b18a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b18e:	movs	r0, #46	; 0x2e
    b190:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b194:	movw	r1, #771	; 0x303
    b198:	ldr	r0, [pc, #68]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b19a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b19e:	ldr	r0, [pc, #64]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b1a0:	bl	11800 <Print::println()>
    b1a4:	b.n	b01e <FatFile::read(void*, unsigned int)+0xce>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    b1a6:	ldrb	r3, [r5, #0]
    b1a8:	tst.w	r3, #112	; 0x70
    b1ac:	bne.n	b0fc <FatFile::read(void*, unsigned int)+0x1ac>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    b1ae:	ldr	r1, [pc, #40]	; (b1d8 <FatFile::read(void*, unsigned int)+0x288>)
    b1b0:	ldr	r0, [pc, #44]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b1b2:	bl	7d88 <Print::write(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    b1b6:	ldr	r1, [pc, #36]	; (b1dc <FatFile::read(void*, unsigned int)+0x28c>)
    b1b8:	ldr	r0, [pc, #36]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b1ba:	bl	7d88 <Print::write(char const*)>
    b1be:	movs	r0, #46	; 0x2e
    b1c0:	bl	ff50 <usb_serial_putchar>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b1c4:	movw	r1, #778	; 0x30a
    b1c8:	ldr	r0, [pc, #20]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b1ca:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b1ce:	ldr	r0, [pc, #16]	; (b1e0 <FatFile::read(void*, unsigned int)+0x290>)
    b1d0:	bl	11800 <Print::println()>
    b1d4:	b.n	b01e <FatFile::read(void*, unsigned int)+0xce>
    b1d6:	nop
    b1d8:	.word	0x00016f6c
    b1dc:	.word	0x000171a4
    b1e0:	.word	0x1fff0b00

0000b1e4 <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    b1e4:	push	{r4, r5, r6, lr}
    b1e6:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    b1e8:	movs	r2, #1
    b1ea:	add.w	r1, sp, #7
    b1ee:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    b1f0:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    b1f2:	ldr	r5, [r0, #16]
    b1f4:	bl	af50 <FatFile::read(void*, unsigned int)>
    b1f8:	cmp	r0, #1
    b1fa:	it	eq
    b1fc:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    b200:	str	r6, [r4, #20]
    b202:	it	ne
    b204:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    b208:	str	r5, [r4, #16]
  return c;
}
    b20a:	add	sp, #8
    b20c:	pop	{r4, r5, r6, pc}
    b20e:	nop

0000b210 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    b210:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    b212:	ldr	r3, [r0, #20]
    b214:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    b218:	sub	sp, #12
    b21a:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    b21c:	cbz	r5, b220 <FatFile::readDirCache(bool)+0x10>
    b21e:	cbnz	r1, b248 <FatFile::readDirCache(bool)+0x38>
    int8_t n = read(&n, 1);
    b220:	movs	r2, #1
    b222:	add.w	r1, sp, #7
    b226:	mov	r0, r4
    b228:	bl	af50 <FatFile::read(void*, unsigned int)>
    b22c:	sxtb	r0, r0
    if  (n != 1) {
    b22e:	cmp	r0, #1
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    b230:	strb.w	r0, [sp, #7]
    if  (n != 1) {
    b234:	bne.n	b24e <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    b236:	ldr	r3, [r4, #20]
    b238:	adds	r3, #31
    b23a:	str	r3, [r4, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    b23c:	ldr	r0, [r4, #8]
    b23e:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    b240:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    b244:	add	sp, #12
    b246:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    b248:	adds	r3, #32
    b24a:	str	r3, [r0, #20]
    b24c:	b.n	b23c <FatFile::readDirCache(bool)+0x2c>
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
    b24e:	cbz	r0, b276 <FatFile::readDirCache(bool)+0x66>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b250:	movs	r1, #10
    b252:	ldr	r0, [pc, #40]	; (b27c <FatFile::readDirCache(bool)+0x6c>)
    b254:	bl	fe48 <usb_serial_write>
    b258:	movs	r1, #99	; 0x63
    b25a:	ldr	r0, [pc, #36]	; (b280 <FatFile::readDirCache(bool)+0x70>)
    b25c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b260:	movs	r0, #46	; 0x2e
    b262:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b266:	movw	r1, #870	; 0x366
    b26a:	ldr	r0, [pc, #24]	; (b284 <FatFile::readDirCache(bool)+0x74>)
    b26c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b270:	ldr	r0, [pc, #16]	; (b284 <FatFile::readDirCache(bool)+0x74>)
    b272:	bl	11800 <Print::println()>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    b276:	movs	r0, #0
}
    b278:	add	sp, #12
    b27a:	pop	{r4, r5, pc}
    b27c:	.word	0x00016f6c
    b280:	.word	0x000171a4
    b284:	.word	0x1fff0b00

0000b288 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    b288:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b28c:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    b28e:	ldr	r7, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    b290:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    b292:	cbz	r3, b2de <FatFile::seekSet(unsigned long)+0x56>
    b294:	mov	r6, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    b296:	ldr	r1, [r0, #20]
    b298:	cmp	r1, r6
    b29a:	beq.n	b31e <FatFile::seekSet(unsigned long)+0x96>
    return true;
  }
  if (pos == 0) {
    b29c:	cbnz	r6, b2b0 <FatFile::seekSet(unsigned long)+0x28>
    b29e:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    b2a0:	str	r6, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    b2a2:	bic.w	r3, r3, #32
    b2a6:	strb	r3, [r4, #2]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    b2a8:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    b2aa:	movs	r0, #1
    b2ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    b2b0:	lsls	r0, r3, #28
    b2b2:	bpl.n	b30c <FatFile::seekSet(unsigned long)+0x84>
    if (pos > m_fileSize) {
    b2b4:	ldr	r2, [r4, #28]
    b2b6:	cmp	r6, r2
    b2b8:	bhi.n	b3b0 <FatFile::seekSet(unsigned long)+0x128>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    b2ba:	ldr.w	lr, [r4, #8]
    b2be:	ldrb	r2, [r4, #2]
    b2c0:	ldrb.w	r0, [lr, #6]
    b2c4:	adds	r0, #9
    b2c6:	uxtb	r0, r0
    b2c8:	subs	r5, r6, #1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    b2ca:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    b2ce:	lsr.w	r5, r5, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    b2d2:	beq.n	b324 <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = m_firstCluster + nNew;
    b2d4:	ldr	r3, [r4, #32]
    b2d6:	add	r5, r3
    b2d8:	str	r5, [r4, #16]
    goto done;
    b2da:	mov	r3, r2
    b2dc:	b.n	b2a2 <FatFile::seekSet(unsigned long)+0x1a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b2de:	movs	r1, #10
    b2e0:	ldr	r0, [pc, #244]	; (b3d8 <FatFile::seekSet(unsigned long)+0x150>)
    b2e2:	bl	fe48 <usb_serial_write>
    b2e6:	movs	r1, #99	; 0x63
    b2e8:	ldr	r0, [pc, #240]	; (b3dc <FatFile::seekSet(unsigned long)+0x154>)
    b2ea:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b2ee:	movs	r0, #46	; 0x2e
    b2f0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b2f4:	movw	r1, #1132	; 0x46c
    b2f8:	ldr	r0, [pc, #228]	; (b3e0 <FatFile::seekSet(unsigned long)+0x158>)
    b2fa:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b2fe:	ldr	r0, [pc, #224]	; (b3e0 <FatFile::seekSet(unsigned long)+0x158>)
    b300:	bl	11800 <Print::println()>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    b304:	str	r7, [r4, #16]
  return false;
    b306:	movs	r0, #0
    b308:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    b30c:	lsls	r2, r3, #26
    b30e:	bpl.n	b2ba <FatFile::seekSet(unsigned long)+0x32>
    b310:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    b312:	ldrh	r3, [r3, #8]
    b314:	cmp.w	r6, r3, lsl #5
    b318:	bhi.n	b360 <FatFile::seekSet(unsigned long)+0xd8>
    b31a:	ldrb	r3, [r4, #2]
    b31c:	b.n	b2a2 <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    b31e:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    b320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    b324:	subs	r2, r1, #1
    b326:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    b32a:	cmp	r5, r0
    b32c:	bcs.n	b358 <FatFile::seekSet(unsigned long)+0xd0>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    b32e:	lsls	r3, r3, #25
    b330:	ite	mi
    b332:	ldrmi.w	r3, [lr, #32]
    b336:	ldrpl	r3, [r4, #32]
    b338:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    b33a:	add.w	r8, r4, #16
    b33e:	b.n	b350 <FatFile::seekSet(unsigned long)+0xc8>
    b340:	ldr	r1, [r4, #16]
    b342:	ldr	r0, [r4, #8]
    b344:	bl	c618 <FatPartition::fatGet(unsigned long, unsigned long*)>
    b348:	cmp	r0, #0
    b34a:	add.w	r5, r5, #4294967295
    b34e:	ble.n	b388 <FatFile::seekSet(unsigned long)+0x100>
    b350:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    b352:	cmp	r5, #0
    b354:	bne.n	b340 <FatFile::seekSet(unsigned long)+0xb8>
    b356:	b.n	b31a <FatFile::seekSet(unsigned long)+0x92>
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    b358:	cmp	r1, #0
    b35a:	beq.n	b32e <FatFile::seekSet(unsigned long)+0xa6>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    b35c:	subs	r5, r5, r0
    b35e:	b.n	b33a <FatFile::seekSet(unsigned long)+0xb2>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b360:	movs	r1, #10
    b362:	ldr	r0, [pc, #116]	; (b3d8 <FatFile::seekSet(unsigned long)+0x150>)
    b364:	bl	fe48 <usb_serial_write>
    b368:	movs	r1, #99	; 0x63
    b36a:	ldr	r0, [pc, #112]	; (b3dc <FatFile::seekSet(unsigned long)+0x154>)
    b36c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b370:	movs	r0, #46	; 0x2e
    b372:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b376:	movw	r1, #1153	; 0x481
    b37a:	ldr	r0, [pc, #100]	; (b3e0 <FatFile::seekSet(unsigned long)+0x158>)
    b37c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b380:	ldr	r0, [pc, #92]	; (b3e0 <FatFile::seekSet(unsigned long)+0x158>)
    b382:	bl	11800 <Print::println()>
    b386:	b.n	b304 <FatFile::seekSet(unsigned long)+0x7c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b388:	movs	r1, #10
    b38a:	ldr	r0, [pc, #76]	; (b3d8 <FatFile::seekSet(unsigned long)+0x150>)
    b38c:	bl	fe48 <usb_serial_write>
    b390:	movs	r1, #99	; 0x63
    b392:	ldr	r0, [pc, #72]	; (b3dc <FatFile::seekSet(unsigned long)+0x154>)
    b394:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b398:	movs	r0, #46	; 0x2e
    b39a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b39e:	mov.w	r1, #1176	; 0x498
    b3a2:	ldr	r0, [pc, #60]	; (b3e0 <FatFile::seekSet(unsigned long)+0x158>)
    b3a4:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b3a8:	ldr	r0, [pc, #52]	; (b3e0 <FatFile::seekSet(unsigned long)+0x158>)
    b3aa:	bl	11800 <Print::println()>
    b3ae:	b.n	b304 <FatFile::seekSet(unsigned long)+0x7c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b3b0:	movs	r1, #10
    b3b2:	ldr	r0, [pc, #36]	; (b3d8 <FatFile::seekSet(unsigned long)+0x150>)
    b3b4:	bl	fe48 <usb_serial_write>
    b3b8:	movs	r1, #99	; 0x63
    b3ba:	ldr	r0, [pc, #32]	; (b3dc <FatFile::seekSet(unsigned long)+0x154>)
    b3bc:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b3c0:	movs	r0, #46	; 0x2e
    b3c2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b3c6:	movw	r1, #1146	; 0x47a
    b3ca:	ldr	r0, [pc, #20]	; (b3e0 <FatFile::seekSet(unsigned long)+0x158>)
    b3cc:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b3d0:	ldr	r0, [pc, #12]	; (b3e0 <FatFile::seekSet(unsigned long)+0x158>)
    b3d2:	bl	11800 <Print::println()>
    b3d6:	b.n	b304 <FatFile::seekSet(unsigned long)+0x7c>
    b3d8:	.word	0x00016f6c
    b3dc:	.word	0x000171a4
    b3e0:	.word	0x1fff0b00

0000b3e4 <FatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    b3e4:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    b3e6:	ldrb	r3, [r0, #0]
    b3e8:	lsls	r2, r3, #27
    b3ea:	bmi.n	b416 <FatFile::rmdir()+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b3ec:	movs	r1, #10
    b3ee:	ldr	r0, [pc, #184]	; (b4a8 <FatFile::rmdir()+0xc4>)
    b3f0:	bl	fe48 <usb_serial_write>
    b3f4:	movs	r1, #99	; 0x63
    b3f6:	ldr	r0, [pc, #180]	; (b4ac <FatFile::rmdir()+0xc8>)
    b3f8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b3fc:	movs	r0, #46	; 0x2e
    b3fe:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b402:	mov.w	r1, #1012	; 0x3f4
    b406:	ldr	r0, [pc, #168]	; (b4b0 <FatFile::rmdir()+0xcc>)
    b408:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b40c:	ldr	r0, [pc, #160]	; (b4b0 <FatFile::rmdir()+0xcc>)
    b40e:	bl	11800 <Print::println()>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    b412:	movs	r0, #0
    b414:	pop	{r4, pc}
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    b416:	movs	r1, #0
    b418:	mov	r4, r0
    b41a:	bl	b288 <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    b41e:	movs	r1, #1
    b420:	mov	r0, r4
    b422:	bl	b210 <FatFile::readDirCache(bool)>
    if (!dir) {
    b426:	cbz	r0, b464 <FatFile::rmdir()+0x80>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    b428:	ldrb	r3, [r0, #0]
    b42a:	cbz	r3, b468 <FatFile::rmdir()+0x84>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    b42c:	cmp	r3, #229	; 0xe5
    b42e:	beq.n	b41e <FatFile::rmdir()+0x3a>
    b430:	cmp	r3, #46	; 0x2e
    b432:	beq.n	b41e <FatFile::rmdir()+0x3a>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    b434:	ldrb	r3, [r0, #11]
    b436:	lsls	r3, r3, #28
    b438:	bmi.n	b41e <FatFile::rmdir()+0x3a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b43a:	movs	r1, #10
    b43c:	ldr	r0, [pc, #104]	; (b4a8 <FatFile::rmdir()+0xc4>)
    b43e:	bl	fe48 <usb_serial_write>
    b442:	movs	r1, #99	; 0x63
    b444:	ldr	r0, [pc, #100]	; (b4ac <FatFile::rmdir()+0xc8>)
    b446:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b44a:	movs	r0, #46	; 0x2e
    b44c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b450:	movw	r1, #1038	; 0x40e
    b454:	ldr	r0, [pc, #88]	; (b4b0 <FatFile::rmdir()+0xcc>)
    b456:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b45a:	ldr	r0, [pc, #84]	; (b4b0 <FatFile::rmdir()+0xcc>)
    b45c:	bl	11800 <Print::println()>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    b460:	movs	r0, #0
    b462:	pop	{r4, pc}
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    b464:	ldrb	r3, [r4, #1]
    b466:	cbnz	r3, b47e <FatFile::rmdir()+0x9a>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    b468:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    b46a:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    b46c:	orr.w	r3, r3, #2
    b470:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    b472:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    b474:	mov	r0, r4

 fail:
  return false;
}
    b476:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    b47a:	b.w	d384 <FatFile::remove()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b47e:	movs	r1, #10
    b480:	ldr	r0, [pc, #36]	; (b4a8 <FatFile::rmdir()+0xc4>)
    b482:	bl	fe48 <usb_serial_write>
    b486:	movs	r1, #99	; 0x63
    b488:	ldr	r0, [pc, #32]	; (b4ac <FatFile::rmdir()+0xc8>)
    b48a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b48e:	movs	r0, #46	; 0x2e
    b490:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b494:	movw	r1, #1025	; 0x401
    b498:	ldr	r0, [pc, #20]	; (b4b0 <FatFile::rmdir()+0xcc>)
    b49a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b49e:	ldr	r0, [pc, #16]	; (b4b0 <FatFile::rmdir()+0xcc>)
    b4a0:	bl	11800 <Print::println()>
    b4a4:	b.n	b412 <FatFile::rmdir()+0x2e>
    b4a6:	nop
    b4a8:	.word	0x00016f6c
    b4ac:	.word	0x000171a4
    b4b0:	.word	0x1fff0b00

0000b4b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    b4b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4b8:	mov	r8, r1
    b4ba:	mov	r7, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    b4bc:	movs	r1, #0
    b4be:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    b4c0:	mov	r4, r0
    b4c2:	mov	r6, r3
    b4c4:	ldrb.w	r5, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    b4c8:	bl	12f4c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    b4cc:	ldr.w	r0, [r8, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    b4d0:	ldr.w	r3, [r8, #32]
    b4d4:	str	r3, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    b4d6:	and.w	r2, r7, #15
    b4da:	add.w	r3, r0, #52	; 0x34
    b4de:	add.w	r2, r3, r2, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    b4e2:	strh	r7, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    b4e4:	str	r0, [r4, #8]
    b4e6:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    b4e8:	lsls	r7, r1, #28
    b4ea:	bmi.n	b546 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    b4ec:	and.w	r1, r1, #23
    b4f0:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    b4f2:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    b4f4:	strb	r5, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    b4f6:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    b4fa:	it	eq
    b4fc:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b500:	and.w	r3, r6, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    b504:	it	eq
    b506:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b508:	cmp	r3, #1
    b50a:	beq.w	b630 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x17c>
    b50e:	cmp	r3, #2
    b510:	beq.n	b576 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc2>
    b512:	cmp	r3, #0
    b514:	beq.n	b5b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xfe>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b516:	movs	r1, #10
    b518:	ldr	r0, [pc, #388]	; (b6a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1ec>)
    b51a:	bl	fe48 <usb_serial_write>
    b51e:	movs	r1, #99	; 0x63
    b520:	ldr	r0, [pc, #384]	; (b6a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f0>)
    b522:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b526:	movs	r0, #46	; 0x2e
    b528:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b52c:	movw	r1, #559	; 0x22f
    b530:	ldr	r0, [pc, #372]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b532:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b536:	ldr	r0, [pc, #368]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b538:	bl	11800 <Print::println()>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    b53c:	movs	r0, #0
    b53e:	strb	r0, [r4, #0]
  m_flags = 0;
    b540:	strb	r0, [r4, #2]
  return false;
    b542:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b546:	movs	r1, #10
    b548:	ldr	r0, [pc, #340]	; (b6a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1ec>)
    b54a:	bl	fe48 <usb_serial_write>
    b54e:	movs	r1, #99	; 0x63
    b550:	ldr	r0, [pc, #336]	; (b6a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f0>)
    b552:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b556:	movs	r0, #46	; 0x2e
    b558:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b55c:	mov.w	r1, #532	; 0x214
    b560:	ldr	r0, [pc, #324]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b562:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b566:	ldr	r0, [pc, #320]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b568:	bl	11800 <Print::println()>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    b56c:	movs	r0, #0
    b56e:	strb	r0, [r4, #0]
  m_flags = 0;
    b570:	strb	r0, [r4, #2]
  return false;
    b572:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b576:	ldrb	r3, [r4, #0]
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    b578:	movs	r5, #3
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b57a:	tst.w	r3, #17
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    b57e:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b580:	beq.n	b63c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x188>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b582:	movs	r1, #10
    b584:	ldr	r0, [pc, #280]	; (b6a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1ec>)
    b586:	bl	fe48 <usb_serial_write>
    b58a:	movs	r1, #99	; 0x63
    b58c:	ldr	r0, [pc, #276]	; (b6a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f0>)
    b58e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b592:	movs	r0, #46	; 0x2e
    b594:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b598:	movw	r1, #565	; 0x235
    b59c:	ldr	r0, [pc, #264]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b59e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b5a2:	ldr	r0, [pc, #260]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b5a4:	bl	11800 <Print::println()>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    b5a8:	movs	r0, #0
    b5aa:	strb	r0, [r4, #0]
  m_flags = 0;
    b5ac:	strb	r0, [r4, #2]
  return false;
    b5ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    b5b2:	ands.w	lr, r6, #1024	; 0x400
    b5b6:	bne.n	b672 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1be>
    b5b8:	movs	r5, #1
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    b5ba:	and.w	r3, r6, #8
    b5be:	orrs	r5, r3
    b5c0:	uxtb	r5, r5
    b5c2:	strb	r5, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b5c4:	ldrh	r1, [r2, #20]
    b5c6:	ldrh	r3, [r2, #26]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    b5c8:	ldr	r7, [r0, #48]	; 0x30
    b5ca:	str	r7, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b5cc:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    b5d0:	cmp.w	lr, #0
    b5d4:	beq.n	b5ea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x136>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b5d6:	cmp	r1, #0
    b5d8:	bne.n	b644 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x190>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b5da:	orn	r5, r5, #127	; 0x7f
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b5de:	lsls	r3, r6, #17
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b5e0:	strb	r5, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b5e2:	bmi.n	b5f4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x140>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    b5e4:	movs	r0, #1
    b5e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    b5ea:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b5ec:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    b5ee:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b5f0:	lsls	r3, r6, #17
    b5f2:	bpl.n	b5e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x130>
    b5f4:	ldr	r1, [r4, #28]
    b5f6:	mov	r0, r4
    b5f8:	bl	b288 <FatFile::seekSet(unsigned long)>
    b5fc:	cmp	r0, #0
    b5fe:	bne.n	b5e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x130>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b600:	movs	r1, #10
    b602:	ldr	r0, [pc, #156]	; (b6a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1ec>)
    b604:	bl	fe48 <usb_serial_write>
    b608:	movs	r1, #99	; 0x63
    b60a:	ldr	r0, [pc, #152]	; (b6a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f0>)
    b60c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b610:	movs	r0, #46	; 0x2e
    b612:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b616:	movw	r1, #590	; 0x24e
    b61a:	ldr	r0, [pc, #140]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b61c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b620:	ldr	r0, [pc, #132]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b622:	bl	11800 <Print::println()>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    b626:	movs	r0, #0
    b628:	strb	r0, [r4, #0]
  m_flags = 0;
    b62a:	strb	r0, [r4, #2]
  return false;
    b62c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b630:	ldrb	r3, [r4, #0]
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    b632:	movs	r5, #2
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b634:	tst.w	r3, #17
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    b638:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b63a:	bne.n	b582 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xce>
    b63c:	sxtb	r5, r5
    b63e:	and.w	lr, r6, #1024	; 0x400
    b642:	b.n	b5ba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x106>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b644:	bl	c950 <FatPartition::freeChain(unsigned long)>
    b648:	cbnz	r0, b69a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1e6>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b64a:	movs	r1, #10
    b64c:	ldr	r0, [pc, #80]	; (b6a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1ec>)
    b64e:	bl	fe48 <usb_serial_write>
    b652:	movs	r1, #99	; 0x63
    b654:	ldr	r0, [pc, #76]	; (b6a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f0>)
    b656:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b65a:	movs	r0, #46	; 0x2e
    b65c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b660:	movw	r1, #579	; 0x243
    b664:	ldr	r0, [pc, #64]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b666:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b66a:	ldr	r0, [pc, #60]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b66c:	bl	11800 <Print::println()>
    b670:	b.n	b53c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x88>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b672:	movs	r1, #10
    b674:	ldr	r0, [pc, #40]	; (b6a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1ec>)
    b676:	bl	fe48 <usb_serial_write>
    b67a:	movs	r1, #99	; 0x63
    b67c:	ldr	r0, [pc, #36]	; (b6a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f0>)
    b67e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b682:	movs	r0, #46	; 0x2e
    b684:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b688:	mov.w	r1, #544	; 0x220
    b68c:	ldr	r0, [pc, #24]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b68e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b692:	ldr	r0, [pc, #20]	; (b6a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x1f4>)
    b694:	bl	11800 <Print::println()>
    b698:	b.n	b53c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x88>
    b69a:	ldrb	r5, [r4, #2]
    b69c:	b.n	b5da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x126>
    b69e:	nop
    b6a0:	.word	0x00016f6c
    b6a4:	.word	0x000171a4
    b6a8:	.word	0x1fff0b00

0000b6ac <FatFile::openNext(FatFile*, int)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b6ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b6b0:	ldrb	r3, [r0, #0]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b6b2:	sub	sp, #12
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b6b4:	cbnz	r3, b6c0 <FatFile::openNext(FatFile*, int)+0x14>
    b6b6:	ldrb	r3, [r1, #0]
    b6b8:	tst.w	r3, #112	; 0x70
    b6bc:	mov	r5, r1
    b6be:	bne.n	b6f0 <FatFile::openNext(FatFile*, int)+0x44>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b6c0:	movs	r1, #10
    b6c2:	ldr	r0, [pc, #280]	; (b7dc <FatFile::openNext(FatFile*, int)+0x130>)
    b6c4:	bl	fe48 <usb_serial_write>
    b6c8:	movs	r1, #99	; 0x63
    b6ca:	ldr	r0, [pc, #276]	; (b7e0 <FatFile::openNext(FatFile*, int)+0x134>)
    b6cc:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b6d0:	movs	r0, #46	; 0x2e
    b6d2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b6d6:	movw	r1, #609	; 0x261
    b6da:	ldr	r0, [pc, #264]	; (b7e4 <FatFile::openNext(FatFile*, int)+0x138>)
    b6dc:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b6e0:	ldr	r0, [pc, #256]	; (b7e4 <FatFile::openNext(FatFile*, int)+0x138>)
    b6e2:	bl	11800 <Print::println()>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b6e6:	movs	r4, #0
}
    b6e8:	mov	r0, r4
    b6ea:	add	sp, #12
    b6ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6f0:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b6f2:	ands.w	r7, r6, #31
    b6f6:	bne.n	b6c0 <FatFile::openNext(FatFile*, int)+0x14>
    b6f8:	mov	r8, r0
    b6fa:	mov	r9, r2
    b6fc:	mov	sl, r7
    b6fe:	b.n	b704 <FatFile::openNext(FatFile*, int)+0x58>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    b700:	movs	r7, #0
    b702:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    b704:	movs	r1, #0
    b706:	mov	r0, r5
    b708:	bl	b210 <FatFile::readDirCache(bool)>
    if (!dir) {
    b70c:	mov	r4, r0
    b70e:	cbz	r0, b73c <FatFile::openNext(FatFile*, int)+0x90>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    b710:	ldrb	r3, [r0, #0]
    b712:	cmp	r3, #0
    b714:	beq.n	b6e6 <FatFile::openNext(FatFile*, int)+0x3a>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    b716:	cmp	r3, #46	; 0x2e
    b718:	beq.n	b700 <FatFile::openNext(FatFile*, int)+0x54>
    b71a:	cmp	r3, #229	; 0xe5
    b71c:	beq.n	b700 <FatFile::openNext(FatFile*, int)+0x54>
    b71e:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    b720:	and.w	r2, r1, #8
    b724:	and.w	fp, r2, #255	; 0xff
    b728:	cbz	r2, b76a <FatFile::openNext(FatFile*, int)+0xbe>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    b72a:	cmp	r1, #15
    b72c:	bne.n	b700 <FatFile::openNext(FatFile*, int)+0x54>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b72e:	lsls	r2, r3, #25
    b730:	bpl.n	b702 <FatFile::openNext(FatFile*, int)+0x56>
        lfnOrd = ldir->order & 0X1F;
    b732:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    b736:	ldrb.w	sl, [r0, #13]
    b73a:	b.n	b702 <FatFile::openNext(FatFile*, int)+0x56>
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    b73c:	ldrb	r3, [r5, #1]
    b73e:	cmp	r3, #0
    b740:	beq.n	b6e6 <FatFile::openNext(FatFile*, int)+0x3a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b742:	movs	r1, #10
    b744:	ldr	r0, [pc, #148]	; (b7dc <FatFile::openNext(FatFile*, int)+0x130>)
    b746:	bl	fe48 <usb_serial_write>
    b74a:	movs	r1, #99	; 0x63
    b74c:	ldr	r0, [pc, #144]	; (b7e0 <FatFile::openNext(FatFile*, int)+0x134>)
    b74e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b752:	movs	r0, #46	; 0x2e
    b754:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b758:	movw	r1, #618	; 0x26a
    b75c:	ldr	r0, [pc, #132]	; (b7e4 <FatFile::openNext(FatFile*, int)+0x138>)
    b75e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b762:	ldr	r0, [pc, #128]	; (b7e4 <FatFile::openNext(FatFile*, int)+0x138>)
    b764:	bl	11800 <Print::println()>
    b768:	b.n	b6e8 <FatFile::openNext(FatFile*, int)+0x3c>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b76a:	cbnz	r7, b7aa <FatFile::openNext(FatFile*, int)+0xfe>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    b76c:	str	r7, [sp, #0]
    b76e:	mov	r3, r9
    b770:	ubfx	r2, r6, #5, #16
    b774:	mov	r1, r5
    b776:	mov	r0, r8
    b778:	bl	b4b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    b77c:	mov	r4, r0
    b77e:	cmp	r0, #0
    b780:	bne.n	b6e8 <FatFile::openNext(FatFile*, int)+0x3c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b782:	movs	r1, #10
    b784:	ldr	r0, [pc, #84]	; (b7dc <FatFile::openNext(FatFile*, int)+0x130>)
    b786:	bl	fe48 <usb_serial_write>
    b78a:	movs	r1, #99	; 0x63
    b78c:	ldr	r0, [pc, #80]	; (b7e0 <FatFile::openNext(FatFile*, int)+0x134>)
    b78e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b792:	movs	r0, #46	; 0x2e
    b794:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b798:	movw	r1, #635	; 0x27b
    b79c:	ldr	r0, [pc, #68]	; (b7e4 <FatFile::openNext(FatFile*, int)+0x138>)
    b79e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b7a2:	ldr	r0, [pc, #64]	; (b7e4 <FatFile::openNext(FatFile*, int)+0x138>)
    b7a4:	bl	11800 <Print::println()>
    b7a8:	b.n	b6e8 <FatFile::openNext(FatFile*, int)+0x3c>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b7aa:	bl	cce0 <FatFile::lfnChecksum(unsigned char*)>
    b7ae:	cmp	sl, r0
    b7b0:	beq.n	b76c <FatFile::openNext(FatFile*, int)+0xc0>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b7b2:	movs	r1, #10
    b7b4:	ldr	r0, [pc, #36]	; (b7dc <FatFile::openNext(FatFile*, int)+0x130>)
    b7b6:	bl	fe48 <usb_serial_write>
    b7ba:	movs	r1, #99	; 0x63
    b7bc:	ldr	r0, [pc, #32]	; (b7e0 <FatFile::openNext(FatFile*, int)+0x134>)
    b7be:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b7c2:	movs	r0, #46	; 0x2e
    b7c4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b7c8:	movw	r1, #631	; 0x277
    b7cc:	ldr	r0, [pc, #20]	; (b7e4 <FatFile::openNext(FatFile*, int)+0x138>)
    b7ce:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b7d2:	ldr	r0, [pc, #16]	; (b7e4 <FatFile::openNext(FatFile*, int)+0x138>)
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b7d4:	mov	r4, fp
    b7d6:	bl	11800 <Print::println()>
    b7da:	b.n	b6e8 <FatFile::openNext(FatFile*, int)+0x3c>
    b7dc:	.word	0x00016f6c
    b7e0:	.word	0x000171a4
    b7e4:	.word	0x1fff0b00

0000b7e8 <FatFile::mkdir(FatFile*, fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    b7e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    b7ec:	ldrb	r3, [r1, #0]
    b7ee:	tst.w	r3, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    b7f2:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    b7f4:	beq.w	b946 <FatFile::mkdir(FatFile*, fname_t*)+0x15e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    b7f8:	movw	r3, #2562	; 0xa02
    b7fc:	mov	r6, r1
    b7fe:	mov	r4, r0
    b800:	bl	d72c <FatFile::open(FatFile*, fname_t*, int)>
    b804:	cmp	r0, #0
    b806:	beq.w	b918 <FatFile::mkdir(FatFile*, fname_t*)+0x130>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    b80a:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    b80c:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    b80e:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    b810:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    b812:	mov	r0, r4
    b814:	bl	a94c <FatFile::addDirCluster()>
    b818:	cmp	r0, #0
    b81a:	beq.w	b9a8 <FatFile::mkdir(FatFile*, fname_t*)+0x1c0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    b81e:	ldr	r3, [r4, #16]
    b820:	str	r3, [r4, #32]
    b822:	movs	r1, #0
    b824:	mov	r0, r4
    b826:	bl	b288 <FatFile::seekSet(unsigned long)>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b82a:	ldrb	r3, [r4, #0]
    b82c:	cmp	r3, #0
    b82e:	bne.w	b974 <FatFile::mkdir(FatFile*, fname_t*)+0x18c>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    b832:	movs	r1, #1
    b834:	mov	r0, r4
    b836:	bl	aad4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    b83a:	mov	r5, r0
    b83c:	cmp	r0, #0
    b83e:	beq.w	b9fe <FatFile::mkdir(FatFile*, fname_t*)+0x216>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    b842:	movs	r3, #16
    b844:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    b846:	ldr	r2, [r0, #8]
    b848:	ldr	r1, [r5, #4]
    b84a:	ldr	r3, [r5, #12]
    b84c:	ldr	r0, [r0, #0]
    b84e:	ldrh.w	r8, [r5, #20]
    b852:	ldrh.w	r9, [r5, #26]
    b856:	mov	r7, sp
    b858:	stmia	r7!, {r0, r1, r2, r3}
    b85a:	ldr	r1, [r5, #20]
    b85c:	ldr	r2, [r5, #24]
    b85e:	ldr	r3, [r5, #28]
    b860:	ldr	r0, [r5, #16]
  dot.name[0] = '.';
    b862:	add	r5, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    b864:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    b866:	movs	r3, #46	; 0x2e
    b868:	strb.w	r3, [r5, #-32]!
    b86c:	add.w	r1, sp, #10
    b870:	mov	r3, r5
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    b872:	movs	r2, #32
    b874:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    b878:	cmp	r1, r3
    b87a:	bne.n	b874 <FatFile::mkdir(FatFile*, fname_t*)+0x8c>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    b87c:	ldr	r0, [r4, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b87e:	ldr	r3, [r4, #32]
    b880:	ldrb	r2, [r0, #6]
    b882:	ldr	r1, [r0, #20]
    b884:	subs	r3, #2
    b886:	lsls	r3, r2
    b888:	add	r1, r3
    b88a:	adds	r0, #36	; 0x24
    b88c:	movs	r2, #1
    b88e:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    b892:	mov	lr, r0
    b894:	cmp	r0, #0
    b896:	beq.w	b9d6 <FatFile::mkdir(FatFile*, fname_t*)+0x1ee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    b89a:	strh.w	r8, [sp, #20]
    b89e:	strh.w	r9, [sp, #26]
    b8a2:	mov	r7, r5
    b8a4:	ldmia	r7!, {r0, r1, r2, r3}
    b8a6:	str.w	r0, [lr]
    b8aa:	str.w	r1, [lr, #4]
    b8ae:	str.w	r2, [lr, #8]
    b8b2:	str.w	r3, [lr, #12]
    b8b6:	ldmia	r7!, {r0, r1, r2, r3}
    b8b8:	str.w	r0, [lr, #16]
    b8bc:	str.w	r1, [lr, #20]
    b8c0:	str.w	r2, [lr, #24]
    b8c4:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    b8c8:	ldr	r3, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    b8ca:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    b8ce:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    b8d0:	lsrs	r3, r3, #16
    b8d2:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    b8d6:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    b8da:	ldmia	r5!, {r0, r1, r2, r3}
    b8dc:	add.w	r6, lr, #32
    b8e0:	str.w	r0, [lr, #32]
    b8e4:	str	r1, [r6, #4]
    b8e6:	str	r2, [r6, #8]
    b8e8:	str	r3, [r6, #12]
    b8ea:	ldmia	r5!, {r0, r1, r2, r3}
    b8ec:	str	r0, [r6, #16]
    b8ee:	str	r1, [r6, #20]
    b8f0:	str	r2, [r6, #24]
    b8f2:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    b8f4:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    b8f6:	add.w	r0, r4, #36	; 0x24
    b8fa:	bl	7c04 <FsCache::sync()>
    b8fe:	cbz	r0, b93e <FatFile::mkdir(FatFile*, fname_t*)+0x156>
    b900:	add.w	r0, r4, #564	; 0x234
    b904:	bl	7c04 <FsCache::sync()>
    b908:	cbz	r0, b93e <FatFile::mkdir(FatFile*, fname_t*)+0x156>
    b90a:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    b90c:	ldr	r3, [r0, #0]
    b90e:	ldr	r3, [r3, #24]

 fail:
  return false;
}
    b910:	add	sp, #36	; 0x24
    b912:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b916:	bx	r3
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b918:	movs	r1, #10
    b91a:	ldr	r0, [pc, #268]	; (ba28 <FatFile::mkdir(FatFile*, fname_t*)+0x240>)
    b91c:	bl	fe48 <usb_serial_write>
    b920:	movs	r1, #99	; 0x63
    b922:	ldr	r0, [pc, #264]	; (ba2c <FatFile::mkdir(FatFile*, fname_t*)+0x244>)
    b924:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b928:	movs	r0, #46	; 0x2e
    b92a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b92e:	mov.w	r1, #364	; 0x16c
    b932:	ldr	r0, [pc, #252]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b934:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b938:	ldr	r0, [pc, #244]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b93a:	bl	11800 <Print::println()>
    b93e:	movs	r0, #0
    b940:	add	sp, #36	; 0x24
    b942:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b946:	movs	r1, #10
    b948:	ldr	r0, [pc, #220]	; (ba28 <FatFile::mkdir(FatFile*, fname_t*)+0x240>)
    b94a:	bl	fe48 <usb_serial_write>
    b94e:	movs	r1, #99	; 0x63
    b950:	ldr	r0, [pc, #216]	; (ba2c <FatFile::mkdir(FatFile*, fname_t*)+0x244>)
    b952:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b956:	movs	r0, #46	; 0x2e
    b958:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b95c:	movw	r1, #359	; 0x167
    b960:	ldr	r0, [pc, #204]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b962:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b966:	ldr	r0, [pc, #200]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b968:	bl	11800 <Print::println()>
    b96c:	movs	r0, #0
    b96e:	add	sp, #36	; 0x24
    b970:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b974:	mov	r0, r4
    b976:	bl	ab28 <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    b97a:	cmp	r0, #0
    b97c:	bne.w	b832 <FatFile::mkdir(FatFile*, fname_t*)+0x4a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b980:	movs	r1, #10
    b982:	ldr	r0, [pc, #164]	; (ba28 <FatFile::mkdir(FatFile*, fname_t*)+0x240>)
    b984:	bl	fe48 <usb_serial_write>
    b988:	movs	r1, #99	; 0x63
    b98a:	ldr	r0, [pc, #160]	; (ba2c <FatFile::mkdir(FatFile*, fname_t*)+0x244>)
    b98c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b990:	movs	r0, #46	; 0x2e
    b992:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b996:	movw	r1, #381	; 0x17d
    b99a:	ldr	r0, [pc, #148]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b99c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b9a0:	ldr	r0, [pc, #140]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b9a2:	bl	11800 <Print::println()>
    b9a6:	b.n	b93e <FatFile::mkdir(FatFile*, fname_t*)+0x156>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b9a8:	movs	r1, #10
    b9aa:	ldr	r0, [pc, #124]	; (ba28 <FatFile::mkdir(FatFile*, fname_t*)+0x240>)
    b9ac:	bl	fe48 <usb_serial_write>
    b9b0:	movs	r1, #99	; 0x63
    b9b2:	ldr	r0, [pc, #120]	; (ba2c <FatFile::mkdir(FatFile*, fname_t*)+0x244>)
    b9b4:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b9b8:	movs	r0, #46	; 0x2e
    b9ba:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b9be:	movw	r1, #373	; 0x175
    b9c2:	ldr	r0, [pc, #108]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b9c4:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b9c8:	ldr	r0, [pc, #100]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b9ca:	bl	11800 <Print::println()>
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
}
    b9ce:	movs	r0, #0
    b9d0:	add	sp, #36	; 0x24
    b9d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b9d6:	movs	r1, #10
    b9d8:	ldr	r0, [pc, #76]	; (ba28 <FatFile::mkdir(FatFile*, fname_t*)+0x240>)
    b9da:	bl	fe48 <usb_serial_write>
    b9de:	movs	r1, #99	; 0x63
    b9e0:	ldr	r0, [pc, #72]	; (ba2c <FatFile::mkdir(FatFile*, fname_t*)+0x244>)
    b9e2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b9e6:	movs	r0, #46	; 0x2e
    b9e8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    b9ec:	mov.w	r1, #404	; 0x194
    b9f0:	ldr	r0, [pc, #60]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b9f2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    b9f6:	ldr	r0, [pc, #56]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    b9f8:	bl	11800 <Print::println()>
    b9fc:	b.n	b93e <FatFile::mkdir(FatFile*, fname_t*)+0x156>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b9fe:	movs	r1, #10
    ba00:	ldr	r0, [pc, #36]	; (ba28 <FatFile::mkdir(FatFile*, fname_t*)+0x240>)
    ba02:	bl	fe48 <usb_serial_write>
    ba06:	movs	r1, #99	; 0x63
    ba08:	ldr	r0, [pc, #32]	; (ba2c <FatFile::mkdir(FatFile*, fname_t*)+0x244>)
    ba0a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ba0e:	movs	r0, #46	; 0x2e
    ba10:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ba14:	movw	r1, #387	; 0x183
    ba18:	ldr	r0, [pc, #20]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    ba1a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ba1e:	ldr	r0, [pc, #16]	; (ba30 <FatFile::mkdir(FatFile*, fname_t*)+0x248>)
    ba20:	bl	11800 <Print::println()>
    ba24:	b.n	b93e <FatFile::mkdir(FatFile*, fname_t*)+0x156>
    ba26:	nop
    ba28:	.word	0x00016f6c
    ba2c:	.word	0x000171a4
    ba30:	.word	0x1fff0b00

0000ba34 <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    ba34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba38:	mov	r6, r0
    ba3a:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    ba3c:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    ba3e:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    ba40:	movs	r0, #0
    ba42:	strb.w	r0, [sp, #36]	; 0x24
    ba46:	strb.w	r0, [sp, #37]	; 0x25
    ba4a:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    ba4e:	cmp	r4, #0
    ba50:	bne.n	bae2 <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
    ba52:	mov	r8, r3
    ba54:	ldrb	r3, [r1, #0]
    ba56:	tst.w	r3, #112	; 0x70
    ba5a:	mov	r5, r1
    ba5c:	beq.n	bae2 <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    ba5e:	ldrb	r3, [r2, #0]
    ba60:	cmp	r3, #47	; 0x2f
    ba62:	mov	r0, r2
    ba64:	beq.n	bac4 <FatFile::mkdir(FatFile*, char const*, bool)+0x90>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    ba66:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ba68:	add	r2, sp, #4
    ba6a:	add	r1, sp, #12
    ba6c:	bl	cf64 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    ba70:	add	r2, sp, #12
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ba72:	mov	r4, r0
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    ba74:	mov	r1, r5
    ba76:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ba78:	cmp	r0, #0
    ba7a:	beq.n	bb46 <FatFile::mkdir(FatFile*, char const*, bool)+0x112>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    ba7c:	ldr	r4, [sp, #4]
    ba7e:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    ba80:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    ba82:	cmp	r4, #0
    ba84:	beq.n	bb74 <FatFile::mkdir(FatFile*, char const*, bool)+0x140>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    ba86:	bl	d72c <FatFile::open(FatFile*, fname_t*, int)>
    ba8a:	mov	r4, r0
    ba8c:	cmp	r0, #0
    ba8e:	bne.n	bb20 <FatFile::mkdir(FatFile*, char const*, bool)+0xec>
      if (!pFlag || !mkdir(parent, &fname)) {
    ba90:	cmp.w	r8, #0
    ba94:	bne.n	bb12 <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ba96:	movs	r1, #10
    ba98:	ldr	r0, [pc, #272]	; (bbac <FatFile::mkdir(FatFile*, char const*, bool)+0x178>)
    ba9a:	bl	fe48 <usb_serial_write>
    ba9e:	movs	r1, #99	; 0x63
    baa0:	ldr	r0, [pc, #268]	; (bbb0 <FatFile::mkdir(FatFile*, char const*, bool)+0x17c>)
    baa2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    baa6:	movs	r0, #46	; 0x2e
    baa8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    baac:	mov.w	r1, #338	; 0x152
    bab0:	ldr	r0, [pc, #256]	; (bbb4 <FatFile::mkdir(FatFile*, char const*, bool)+0x180>)
    bab2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bab6:	ldr	r0, [pc, #252]	; (bbb4 <FatFile::mkdir(FatFile*, char const*, bool)+0x180>)
    bab8:	bl	11800 <Print::println()>
  }
  return mkdir(parent, &fname);

 fail:
  return false;
}
    babc:	mov	r0, r4
    babe:	add	sp, #72	; 0x48
    bac0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    bac4:	adds	r0, #1
    bac6:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    bac8:	ldrb	r3, [r0, #0]
    baca:	cmp	r3, #47	; 0x2f
    bacc:	beq.n	bac4 <FatFile::mkdir(FatFile*, char const*, bool)+0x90>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    bace:	ldr	r1, [r5, #8]
    bad0:	add	r0, sp, #36	; 0x24
    bad2:	bl	ad30 <FatFile::openRoot(FatVolume*)>
    bad6:	mov	r4, r0
    bad8:	cmp	r0, #0
    bada:	beq.n	bb82 <FatFile::mkdir(FatFile*, char const*, bool)+0x14e>
    badc:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    bade:	add	r5, sp, #36	; 0x24
    bae0:	b.n	ba66 <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bae2:	movs	r1, #10
    bae4:	ldr	r0, [pc, #196]	; (bbac <FatFile::mkdir(FatFile*, char const*, bool)+0x178>)
    bae6:	bl	fe48 <usb_serial_write>
    baea:	movs	r1, #99	; 0x63
    baec:	ldr	r0, [pc, #192]	; (bbb0 <FatFile::mkdir(FatFile*, char const*, bool)+0x17c>)
    baee:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    baf2:	movs	r0, #46	; 0x2e
    baf4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    baf8:	movw	r1, #315	; 0x13b
    bafc:	ldr	r0, [pc, #180]	; (bbb4 <FatFile::mkdir(FatFile*, char const*, bool)+0x180>)
    bafe:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bb02:	ldr	r0, [pc, #176]	; (bbb4 <FatFile::mkdir(FatFile*, char const*, bool)+0x180>)
    bb04:	bl	11800 <Print::println()>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    bb08:	movs	r4, #0
}
    bb0a:	mov	r0, r4
    bb0c:	add	sp, #72	; 0x48
    bb0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    bb12:	mov	r1, r5
    bb14:	add	r2, sp, #12
    bb16:	mov	r0, r6
    bb18:	bl	b7e8 <FatFile::mkdir(FatFile*, fname_t*)>
    bb1c:	cmp	r0, #0
    bb1e:	beq.n	ba96 <FatFile::mkdir(FatFile*, char const*, bool)+0x62>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    bb20:	mov	r5, r6
    bb22:	ldmia	r5!, {r0, r1, r2, r3}
    bb24:	add	r4, sp, #36	; 0x24
    bb26:	stmia	r4!, {r0, r1, r2, r3}
    bb28:	ldmia	r5!, {r0, r1, r2, r3}
    bb2a:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    bb2c:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    bb2e:	ldr	r2, [r5, #0]
    bb30:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    bb32:	cbnz	r3, bb3e <FatFile::mkdir(FatFile*, char const*, bool)+0x10a>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    bb34:	strb	r7, [r6, #0]
  m_flags = 0;
    bb36:	strb	r7, [r6, #2]
    bb38:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    bb3a:	add	r5, sp, #36	; 0x24
    bb3c:	b.n	ba68 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    bb3e:	mov	r0, r6
    bb40:	bl	ab28 <FatFile::sync() [clone .part.42]>
    bb44:	b.n	bb34 <FatFile::mkdir(FatFile*, char const*, bool)+0x100>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bb46:	movs	r1, #10
    bb48:	ldr	r0, [pc, #96]	; (bbac <FatFile::mkdir(FatFile*, char const*, bool)+0x178>)
    bb4a:	bl	fe48 <usb_serial_write>
    bb4e:	movs	r1, #99	; 0x63
    bb50:	ldr	r0, [pc, #92]	; (bbb0 <FatFile::mkdir(FatFile*, char const*, bool)+0x17c>)
    bb52:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bb56:	movs	r0, #46	; 0x2e
    bb58:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bb5c:	mov.w	r1, #330	; 0x14a
    bb60:	ldr	r0, [pc, #80]	; (bbb4 <FatFile::mkdir(FatFile*, char const*, bool)+0x180>)
    bb62:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bb66:	ldr	r0, [pc, #76]	; (bbb4 <FatFile::mkdir(FatFile*, char const*, bool)+0x180>)
    bb68:	bl	11800 <Print::println()>
  }
  return mkdir(parent, &fname);

 fail:
  return false;
}
    bb6c:	mov	r0, r4
    bb6e:	add	sp, #72	; 0x48
    bb70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    bb74:	add	r2, sp, #12
    bb76:	mov	r1, r5
    bb78:	mov	r0, r6
    bb7a:	bl	b7e8 <FatFile::mkdir(FatFile*, fname_t*)>
    bb7e:	mov	r4, r0
    bb80:	b.n	babc <FatFile::mkdir(FatFile*, char const*, bool)+0x88>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bb82:	movs	r1, #10
    bb84:	ldr	r0, [pc, #36]	; (bbac <FatFile::mkdir(FatFile*, char const*, bool)+0x178>)
    bb86:	bl	fe48 <usb_serial_write>
    bb8a:	movs	r1, #99	; 0x63
    bb8c:	ldr	r0, [pc, #32]	; (bbb0 <FatFile::mkdir(FatFile*, char const*, bool)+0x17c>)
    bb8e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bb92:	movs	r0, #46	; 0x2e
    bb94:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bb98:	movw	r1, #323	; 0x143
    bb9c:	ldr	r0, [pc, #20]	; (bbb4 <FatFile::mkdir(FatFile*, char const*, bool)+0x180>)
    bb9e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bba2:	ldr	r0, [pc, #16]	; (bbb4 <FatFile::mkdir(FatFile*, char const*, bool)+0x180>)
    bba4:	bl	11800 <Print::println()>
    bba8:	b.n	babc <FatFile::mkdir(FatFile*, char const*, bool)+0x88>
    bbaa:	nop
    bbac:	.word	0x00016f6c
    bbb0:	.word	0x000171a4
    bbb4:	.word	0x1fff0b00

0000bbb8 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    bbb8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    bbbc:	ldrb	r4, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    bbbe:	sub	sp, #104	; 0x68
    bbc0:	movs	r6, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    bbc2:	ands.w	r4, r4, #24
    bbc6:	strb.w	r6, [sp, #32]
    bbca:	strb.w	r6, [sp, #33]	; 0x21
    bbce:	strb.w	r6, [sp, #34]	; 0x22
    bbd2:	strb.w	r6, [sp, #68]	; 0x44
    bbd6:	strb.w	r6, [sp, #69]	; 0x45
    bbda:	strb.w	r6, [sp, #70]	; 0x46
    bbde:	bne.n	bc0e <FatFile::rename(FatFile*, char const*)+0x56>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bbe0:	movs	r1, #10
    bbe2:	ldr	r0, [pc, #788]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    bbe4:	bl	fe48 <usb_serial_write>
    bbe8:	movs	r1, #99	; 0x63
    bbea:	ldr	r0, [pc, #784]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    bbec:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bbf0:	movs	r0, #46	; 0x2e
    bbf2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bbf6:	movw	r1, #911	; 0x38f
    bbfa:	ldr	r0, [pc, #772]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bbfc:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bc00:	ldr	r0, [pc, #764]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bc02:	bl	11800 <Print::println()>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
    bc06:	mov	r0, r4
    bc08:	add	sp, #104	; 0x68
    bc0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc0e:	mov	r8, r2
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    bc10:	ldr	r3, [r1, #8]
    bc12:	ldr	r2, [r0, #8]
    bc14:	cmp	r2, r3
    bc16:	mov	r5, r0
    bc18:	mov	r7, r1
    bc1a:	beq.n	bc4c <FatFile::rename(FatFile*, char const*)+0x94>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bc1c:	movs	r1, #10
    bc1e:	ldr	r0, [pc, #728]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    bc20:	bl	fe48 <usb_serial_write>
    bc24:	movs	r1, #99	; 0x63
    bc26:	ldr	r0, [pc, #724]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    bc28:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bc2c:	movs	r0, #46	; 0x2e
    bc2e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bc32:	movw	r1, #921	; 0x399
    bc36:	ldr	r0, [pc, #712]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bc38:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bc3c:	ldr	r0, [pc, #704]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bc3e:	bl	11800 <Print::println()>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    bc42:	mov	r4, r6
}
    bc44:	mov	r0, r4
    bc46:	add	sp, #104	; 0x68
    bc48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc4c:	bl	ab28 <FatFile::sync() [clone .part.42]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    bc50:	mov	lr, r5
    bc52:	ldmia.w	lr!, {r0, r1, r2, r3}
    bc56:	add	r4, sp, #68	; 0x44
    bc58:	stmia	r4!, {r0, r1, r2, r3}
    bc5a:	ldmia.w	lr!, {r0, r1, r2, r3}
    bc5e:	stmia	r4!, {r0, r1, r2, r3}
    bc60:	ldr.w	r3, [lr]
    bc64:	str	r3, [r4, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    bc66:	mov	r1, r6
    bc68:	mov	r0, r5
    bc6a:	bl	aad4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    bc6e:	mov	r4, r0
    bc70:	cmp	r0, #0
    bc72:	beq.w	bea6 <FatFile::rename(FatFile*, char const*)+0x2ee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    bc76:	ldr	r1, [r4, #4]
    bc78:	ldr	r2, [r4, #8]
    bc7a:	ldr	r3, [r4, #12]
    bc7c:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    bc7e:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    bc82:	mov	lr, sp
    bc84:	stmia.w	lr!, {r0, r1, r2, r3}
    bc88:	ldr	r1, [r4, #20]
    bc8a:	ldr	r2, [r4, #24]
    bc8c:	ldr	r3, [r4, #28]
    bc8e:	ldr	r0, [r4, #16]
  // make directory entry for new path
  if (isFile()) {
    bc90:	and.w	r4, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    bc94:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    bc98:	and.w	r3, r4, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    bc9c:	mov	r2, r8
    bc9e:	mov	r1, r7
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    bca0:	cmp	r4, #0
    bca2:	bne.w	bdb4 <FatFile::rename(FatFile*, char const*)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    bca6:	add	r0, sp, #32
    bca8:	bl	ba34 <FatFile::mkdir(FatFile*, char const*, bool)>
    bcac:	mov	r4, r0
    bcae:	cmp	r0, #0
    bcb0:	beq.w	be56 <FatFile::rename(FatFile*, char const*)+0x29e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    bcb4:	ldr	r6, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    bcb6:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    bcb8:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    bcbc:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    bcc0:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    bcc2:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
    bcc4:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    bcc6:	movs	r7, #0
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    bcc8:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    bcca:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    bccc:	movs	r1, #1
    bcce:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    bcd0:	strb.w	r7, [sp, #32]
  file.m_flags = 0;
    bcd4:	strb.w	r7, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    bcd8:	bl	aad4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    bcdc:	mov	r4, r0
    bcde:	cmp	r0, #0
    bce0:	beq.w	be7e <FatFile::rename(FatFile*, char const*)+0x2c6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    bce4:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    bce6:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    bcea:	ldr.w	r0, [r3, #-91]!
    bcee:	str.w	r0, [r4, #13]
    bcf2:	ldr	r0, [r3, #4]
    bcf4:	str.w	r0, [r4, #17]
    bcf8:	ldr	r0, [r3, #8]
    bcfa:	str.w	r0, [r4, #21]
    bcfe:	ldr	r0, [r3, #12]
    bd00:	str.w	r0, [r4, #25]
    bd04:	ldrh	r0, [r3, #16]
    bd06:	ldrb	r3, [r3, #18]
    bd08:	strh.w	r0, [r4, #29]
    bd0c:	strb	r3, [r4, #31]
  dir->attributes = entry.attributes;
    bd0e:	strb	r2, [r4, #11]

  // update dot dot if directory
  if (dirCluster) {
    bd10:	cmp	r6, #0
    bd12:	beq.n	bd8a <FatFile::rename(FatFile*, char const*)+0x1d2>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    bd14:	ldr	r0, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    bd16:	ldrb	r2, [r0, #6]
    bd18:	ldr	r1, [r0, #20]
    bd1a:	subs	r3, r6, #2
    bd1c:	lsls	r3, r2
    bd1e:	add	r1, r3
    bd20:	mov	r2, r7
    bd22:	adds	r0, #36	; 0x24
    bd24:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    bd28:	mov	r4, r0
    bd2a:	cmp	r0, #0
    bd2c:	beq.w	bece <FatFile::rename(FatFile*, char const*)+0x316>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    bd30:	ldr.w	r0, [r4, #32]!
    bd34:	ldr	r1, [r4, #4]
    bd36:	ldr	r2, [r4, #8]
    bd38:	ldr	r3, [r4, #12]
    bd3a:	mov	r7, sp
    bd3c:	stmia	r7!, {r0, r1, r2, r3}
    bd3e:	ldr	r0, [r4, #16]
    bd40:	ldr	r1, [r4, #20]
    bd42:	ldr	r2, [r4, #24]
    bd44:	ldr	r3, [r4, #28]
    bd46:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    bd48:	mov	r1, r6
    bd4a:	ldr	r0, [r5, #8]
    bd4c:	bl	c950 <FatPartition::freeChain(unsigned long)>
    bd50:	mov	r4, r0
    bd52:	cmp	r0, #0
    bd54:	beq.n	be2e <FatFile::rename(FatFile*, char const*)+0x276>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    bd56:	ldr	r0, [r5, #8]
    bd58:	ldr	r3, [r5, #32]
    bd5a:	ldrb	r2, [r0, #6]
    bd5c:	ldr	r1, [r0, #20]
    bd5e:	subs	r3, #2
    bd60:	lsls	r3, r2
    bd62:	add	r1, r3
    bd64:	adds	r0, #36	; 0x24
    bd66:	movs	r2, #1
    bd68:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    bd6c:	mov	r4, r0
    bd6e:	cmp	r0, #0
    bd70:	beq.w	bf04 <FatFile::rename(FatFile*, char const*)+0x34c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    bd74:	mov	r6, sp
    bd76:	ldmia	r6!, {r0, r1, r2, r3}
    bd78:	str	r0, [r4, #32]
    bd7a:	str	r1, [r4, #36]	; 0x24
    bd7c:	str	r2, [r4, #40]	; 0x28
    bd7e:	str	r3, [r4, #44]	; 0x2c
    bd80:	ldmia	r6!, {r0, r1, r2, r3}
    bd82:	str	r0, [r4, #48]	; 0x30
    bd84:	str	r1, [r4, #52]	; 0x34
    bd86:	str	r2, [r4, #56]	; 0x38
    bd88:	str	r3, [r4, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    bd8a:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    bd8c:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    bd8e:	movs	r3, #8
  if (!oldFile.remove()) {
    bd90:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    bd92:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    bd94:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    bd98:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    bd9c:	bl	d384 <FatFile::remove()>
    bda0:	mov	r4, r0
    bda2:	cbz	r0, bdee <FatFile::rename(FatFile*, char const*)+0x236>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    bda4:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bda6:	add.w	r0, r4, #36	; 0x24
    bdaa:	bl	7c04 <FsCache::sync()>
    bdae:	cbnz	r0, be16 <FatFile::rename(FatFile*, char const*)+0x25e>
    bdb0:	movs	r4, #0
    bdb2:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    bdb4:	movw	r3, #2561	; 0xa01
    bdb8:	add	r0, sp, #32
    bdba:	bl	adb4 <FatFile::open(FatFile*, char const*, int)>
    bdbe:	mov	r4, r0
    bdc0:	cmp	r0, #0
    bdc2:	bne.w	bcb6 <FatFile::rename(FatFile*, char const*)+0xfe>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bdc6:	movs	r1, #10
    bdc8:	ldr	r0, [pc, #300]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    bdca:	bl	fe48 <usb_serial_write>
    bdce:	movs	r1, #99	; 0x63
    bdd0:	ldr	r0, [pc, #296]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    bdd2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bdd6:	movs	r0, #46	; 0x2e
    bdd8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bddc:	movw	r1, #937	; 0x3a9
    bde0:	ldr	r0, [pc, #284]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bde2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bde6:	ldr	r0, [pc, #280]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bde8:	bl	11800 <Print::println()>
    bdec:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bdee:	movs	r1, #10
    bdf0:	ldr	r0, [pc, #260]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    bdf2:	bl	fe48 <usb_serial_write>
    bdf6:	movs	r1, #99	; 0x63
    bdf8:	ldr	r0, [pc, #256]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    bdfa:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bdfe:	movs	r0, #46	; 0x2e
    be00:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    be04:	mov.w	r1, #1000	; 0x3e8
    be08:	ldr	r0, [pc, #244]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    be0a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    be0e:	ldr	r0, [pc, #240]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    be10:	bl	11800 <Print::println()>
    be14:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
    be16:	add.w	r0, r4, #564	; 0x234
    be1a:	bl	7c04 <FsCache::sync()>
    be1e:	cmp	r0, #0
    be20:	beq.n	bdb0 <FatFile::rename(FatFile*, char const*)+0x1f8>
    be22:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    be24:	ldr	r3, [r0, #0]
    be26:	ldr	r3, [r3, #24]
    be28:	blx	r3
    be2a:	mov	r4, r0
    be2c:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    be2e:	movs	r1, #10
    be30:	ldr	r0, [pc, #196]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    be32:	bl	fe48 <usb_serial_write>
    be36:	movs	r1, #99	; 0x63
    be38:	ldr	r0, [pc, #192]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    be3a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    be3e:	movs	r0, #46	; 0x2e
    be40:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    be44:	movw	r1, #983	; 0x3d7
    be48:	ldr	r0, [pc, #180]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    be4a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    be4e:	ldr	r0, [pc, #176]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    be50:	bl	11800 <Print::println()>
    be54:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    be56:	movs	r1, #10
    be58:	ldr	r0, [pc, #156]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    be5a:	bl	fe48 <usb_serial_write>
    be5e:	movs	r1, #99	; 0x63
    be60:	ldr	r0, [pc, #152]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    be62:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    be66:	movs	r0, #46	; 0x2e
    be68:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    be6c:	movw	r1, #943	; 0x3af
    be70:	ldr	r0, [pc, #140]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    be72:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    be76:	ldr	r0, [pc, #136]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    be78:	bl	11800 <Print::println()>
    be7c:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    be7e:	movs	r1, #10
    be80:	ldr	r0, [pc, #116]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    be82:	bl	fe48 <usb_serial_write>
    be86:	movs	r1, #99	; 0x63
    be88:	ldr	r0, [pc, #112]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    be8a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    be8e:	movs	r0, #46	; 0x2e
    be90:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    be94:	movw	r1, #962	; 0x3c2
    be98:	ldr	r0, [pc, #100]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    be9a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    be9e:	ldr	r0, [pc, #96]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bea0:	bl	11800 <Print::println()>
    bea4:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bea6:	movs	r1, #10
    bea8:	ldr	r0, [pc, #76]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    beaa:	bl	fe48 <usb_serial_write>
    beae:	movs	r1, #99	; 0x63
    beb0:	ldr	r0, [pc, #72]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    beb2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    beb6:	movs	r0, #46	; 0x2e
    beb8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bebc:	movw	r1, #929	; 0x3a1
    bec0:	ldr	r0, [pc, #60]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bec2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bec6:	ldr	r0, [pc, #56]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bec8:	bl	11800 <Print::println()>
    becc:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bece:	movs	r1, #10
    bed0:	ldr	r0, [pc, #36]	; (bef8 <FatFile::rename(FatFile*, char const*)+0x340>)
    bed2:	bl	fe48 <usb_serial_write>
    bed6:	movs	r1, #99	; 0x63
    bed8:	ldr	r0, [pc, #32]	; (befc <FatFile::rename(FatFile*, char const*)+0x344>)
    beda:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bede:	movs	r0, #46	; 0x2e
    bee0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bee4:	mov.w	r1, #976	; 0x3d0
    bee8:	ldr	r0, [pc, #20]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    beea:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    beee:	ldr	r0, [pc, #16]	; (bf00 <FatFile::rename(FatFile*, char const*)+0x348>)
    bef0:	bl	11800 <Print::println()>
    bef4:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
    bef6:	nop
    bef8:	.word	0x00016f6c
    befc:	.word	0x000171a4
    bf00:	.word	0x1fff0b00
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bf04:	movs	r1, #10
    bf06:	ldr	r0, [pc, #36]	; (bf2c <FatFile::rename(FatFile*, char const*)+0x374>)
    bf08:	bl	fe48 <usb_serial_write>
    bf0c:	movs	r1, #99	; 0x63
    bf0e:	ldr	r0, [pc, #32]	; (bf30 <FatFile::rename(FatFile*, char const*)+0x378>)
    bf10:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bf14:	movs	r0, #46	; 0x2e
    bf16:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bf1a:	movw	r1, #990	; 0x3de
    bf1e:	ldr	r0, [pc, #20]	; (bf34 <FatFile::rename(FatFile*, char const*)+0x37c>)
    bf20:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bf24:	ldr	r0, [pc, #12]	; (bf34 <FatFile::rename(FatFile*, char const*)+0x37c>)
    bf26:	bl	11800 <Print::println()>
    bf2a:	b.n	bc06 <FatFile::rename(FatFile*, char const*)+0x4e>
    bf2c:	.word	0x00016f6c
    bf30:	.word	0x000171a4
    bf34:	.word	0x1fff0b00

0000bf38 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    bf38:	ldrb	r3, [r0, #0]
    bf3a:	cbz	r3, bf40 <FatFile::sync()+0x8>
    bf3c:	b.w	ab28 <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    bf40:	movs	r0, #1
    bf42:	bx	lr

0000bf44 <FatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    bf44:	push	{r4, r5, lr}
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    bf46:	ldrb	r3, [r0, #2]
    bf48:	and.w	r3, r3, #2

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    bf4c:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    bf4e:	cbz	r3, bf86 <FatFile::truncate()+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    bf50:	ldr	r3, [r0, #32]
    bf52:	mov	r4, r0
    bf54:	cbz	r3, bf7e <FatFile::truncate()+0x3a>
      return true;
  }
  if (m_curCluster) {
    bf56:	ldr	r1, [r0, #16]
    bf58:	cmp	r1, #0
    bf5a:	bne.n	bfee <FatFile::truncate()+0xaa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    bf5c:	str	r3, [sp, #4]
    m_firstCluster = 0;
    bf5e:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    bf60:	mov	r1, r3
    bf62:	ldr	r0, [r4, #8]
    bf64:	bl	c950 <FatPartition::freeChain(unsigned long)>
    bf68:	mov	r5, r0
    bf6a:	cmp	r0, #0
    bf6c:	beq.n	c00a <FatFile::truncate()+0xc6>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    bf6e:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    bf70:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    bf72:	ldr	r1, [r4, #20]
    bf74:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    bf76:	orn	r3, r3, #127	; 0x7f
    bf7a:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    bf7c:	cbnz	r2, bfb6 <FatFile::truncate()+0x72>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    bf7e:	movs	r5, #1
  }
  return true;

 fail:
  return false;
}
    bf80:	mov	r0, r5
    bf82:	add	sp, #12
    bf84:	pop	{r4, r5, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bf86:	movs	r1, #10
    bf88:	ldr	r0, [pc, #264]	; (c094 <FatFile::truncate()+0x150>)
    bf8a:	and.w	r5, r3, #255	; 0xff
    bf8e:	bl	fe48 <usb_serial_write>
    bf92:	movs	r1, #99	; 0x63
    bf94:	ldr	r0, [pc, #256]	; (c098 <FatFile::truncate()+0x154>)
    bf96:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bf9a:	movs	r0, #46	; 0x2e
    bf9c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bfa0:	movw	r1, #1287	; 0x507
    bfa4:	ldr	r0, [pc, #244]	; (c09c <FatFile::truncate()+0x158>)
    bfa6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bfaa:	ldr	r0, [pc, #240]	; (c09c <FatFile::truncate()+0x158>)
    bfac:	bl	11800 <Print::println()>
    bfb0:	mov	r0, r5
    bfb2:	add	sp, #12
    bfb4:	pop	{r4, r5, pc}
    bfb6:	mov	r0, r4
    bfb8:	bl	ab28 <FatFile::sync() [clone .part.42]>
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;

  if (!sync()) {
    bfbc:	mov	r5, r0
    bfbe:	cmp	r0, #0
    bfc0:	bne.n	bf7e <FatFile::truncate()+0x3a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bfc2:	movs	r1, #10
    bfc4:	ldr	r0, [pc, #204]	; (c094 <FatFile::truncate()+0x150>)
    bfc6:	bl	fe48 <usb_serial_write>
    bfca:	movs	r1, #99	; 0x63
    bfcc:	ldr	r0, [pc, #200]	; (c098 <FatFile::truncate()+0x154>)
    bfce:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bfd2:	movs	r0, #46	; 0x2e
    bfd4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    bfd8:	movw	r1, #1323	; 0x52b
    bfdc:	ldr	r0, [pc, #188]	; (c09c <FatFile::truncate()+0x158>)
    bfde:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    bfe2:	ldr	r0, [pc, #184]	; (c09c <FatFile::truncate()+0x158>)
    bfe4:	bl	11800 <Print::println()>
  }
  return true;

 fail:
  return false;
}
    bfe8:	mov	r0, r5
    bfea:	add	sp, #12
    bfec:	pop	{r4, r5, pc}
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    bfee:	add	r2, sp, #8
    bff0:	movs	r5, #0
    bff2:	str.w	r5, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    bff6:	ldr	r0, [r0, #8]
    bff8:	bl	c618 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    bffc:	cmp	r0, r5
    bffe:	blt.n	c06c <FatFile::truncate()+0x128>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    c000:	bne.n	c032 <FatFile::truncate()+0xee>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    c002:	ldr	r3, [sp, #4]
    c004:	cmp	r3, #0
    c006:	beq.n	bf6e <FatFile::truncate()+0x2a>
    c008:	b.n	bf60 <FatFile::truncate()+0x1c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c00a:	movs	r1, #10
    c00c:	ldr	r0, [pc, #132]	; (c094 <FatFile::truncate()+0x150>)
    c00e:	bl	fe48 <usb_serial_write>
    c012:	movs	r1, #99	; 0x63
    c014:	ldr	r0, [pc, #128]	; (c098 <FatFile::truncate()+0x154>)
    c016:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c01a:	movs	r0, #46	; 0x2e
    c01c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c020:	movw	r1, #1313	; 0x521
    c024:	ldr	r0, [pc, #116]	; (c09c <FatFile::truncate()+0x158>)
    c026:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c02a:	ldr	r0, [pc, #112]	; (c09c <FatFile::truncate()+0x158>)
    c02c:	bl	11800 <Print::println()>
    c030:	b.n	bf80 <FatFile::truncate()+0x3c>
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    c032:	mvn.w	r2, #4026531840	; 0xf0000000
    c036:	ldr	r1, [r4, #16]
    c038:	ldr	r0, [r4, #8]
    c03a:	bl	c708 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    c03e:	mov	r5, r0
    c040:	cmp	r0, #0
    c042:	bne.n	c002 <FatFile::truncate()+0xbe>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c044:	movs	r1, #10
    c046:	ldr	r0, [pc, #76]	; (c094 <FatFile::truncate()+0x150>)
    c048:	bl	fe48 <usb_serial_write>
    c04c:	movs	r1, #99	; 0x63
    c04e:	ldr	r0, [pc, #72]	; (c098 <FatFile::truncate()+0x154>)
    c050:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c054:	movs	r0, #46	; 0x2e
    c056:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c05a:	movw	r1, #1303	; 0x517
    c05e:	ldr	r0, [pc, #60]	; (c09c <FatFile::truncate()+0x158>)
    c060:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c064:	ldr	r0, [pc, #52]	; (c09c <FatFile::truncate()+0x158>)
    c066:	bl	11800 <Print::println()>
    c06a:	b.n	bf80 <FatFile::truncate()+0x3c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c06c:	movs	r1, #10
    c06e:	ldr	r0, [pc, #36]	; (c094 <FatFile::truncate()+0x150>)
    c070:	bl	fe48 <usb_serial_write>
    c074:	movs	r1, #99	; 0x63
    c076:	ldr	r0, [pc, #32]	; (c098 <FatFile::truncate()+0x154>)
    c078:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c07c:	movs	r0, #46	; 0x2e
    c07e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c082:	movw	r1, #1297	; 0x511
    c086:	ldr	r0, [pc, #20]	; (c09c <FatFile::truncate()+0x158>)
    c088:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c08c:	ldr	r0, [pc, #12]	; (c09c <FatFile::truncate()+0x158>)
    c08e:	bl	11800 <Print::println()>
    c092:	b.n	bf80 <FatFile::truncate()+0x3c>
    c094:	.word	0x00016f6c
    c098:	.word	0x000171a4
    c09c:	.word	0x1fff0b00

0000c0a0 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    c0a0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c0a4:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    c0a6:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    c0a8:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    c0aa:	bpl.w	c27a <FatFile::write(void const*, unsigned int)+0x1da>
    c0ae:	mov	r8, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    c0b0:	lsls	r2, r3, #28
    c0b2:	mov	r7, r1
    c0b4:	bmi.w	c32e <FatFile::write(void const*, unsigned int)+0x28e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    c0b8:	ldr	r2, [r5, #20]
    c0ba:	mvns	r3, r2
    c0bc:	cmp	r8, r3
    c0be:	bhi.w	c2f4 <FatFile::write(void const*, unsigned int)+0x254>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    c0c2:	cmp.w	r8, #0
    c0c6:	beq.n	c168 <FatFile::write(void const*, unsigned int)+0xc8>
    c0c8:	mov	r6, r8
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    c0ca:	ldr	r0, [r5, #8]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    c0cc:	ldrb	r3, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    c0ce:	ands.w	r4, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    c0d2:	ubfx	r9, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    c0d6:	bne.n	c1b6 <FatFile::write(void const*, unsigned int)+0x116>
    c0d8:	cmp.w	r9, #0
    c0dc:	bne.w	c244 <FatFile::write(void const*, unsigned int)+0x1a4>
      // start of new cluster
      if (m_curCluster != 0) {
    c0e0:	ldr	r1, [r5, #16]
    c0e2:	cmp	r1, #0
    c0e4:	beq.w	c270 <FatFile::write(void const*, unsigned int)+0x1d0>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    c0e8:	ldrb	r3, [r5, #2]
    c0ea:	lsls	r3, r3, #25
    c0ec:	bpl.n	c0f4 <FatFile::write(void const*, unsigned int)+0x54>
    c0ee:	ldr	r3, [r5, #28]
    c0f0:	cmp	r3, r2
    c0f2:	bhi.n	c188 <FatFile::write(void const*, unsigned int)+0xe8>
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    c0f4:	add.w	r2, r5, #16
    c0f8:	bl	c618 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    c0fc:	cmp	r0, #0
    c0fe:	blt.w	c418 <FatFile::write(void const*, unsigned int)+0x378>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    c102:	bne.n	c110 <FatFile::write(void const*, unsigned int)+0x70>
          // add cluster if at end of chain
          if (!addCluster()) {
    c104:	mov	r0, r5
    c106:	bl	a8e0 <FatFile::addCluster()>
    c10a:	cmp	r0, #0
    c10c:	beq.w	c3c8 <FatFile::write(void const*, unsigned int)+0x328>
    c110:	ldr	r3, [r5, #16]
    c112:	ldr	r0, [r5, #8]
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    c114:	ldrb	r1, [r0, #6]
    c116:	ldr	r2, [r0, #20]
    c118:	subs	r3, #2
    c11a:	lsl.w	r1, r3, r1
    c11e:	add	r1, r2
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    c120:	cmp.w	r6, #512	; 0x200
    c124:	bcs.n	c1da <FatFile::write(void const*, unsigned int)+0x13a>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    c126:	ldr	r2, [r5, #28]
    c128:	ldr	r3, [r5, #20]
    c12a:	cmp.w	r6, #512	; 0x200
    c12e:	mov	r4, r6
    c130:	it	cs
    c132:	movcs.w	r4, #512	; 0x200
    c136:	cmp	r2, r3
    c138:	bhi.n	c1a8 <FatFile::write(void const*, unsigned int)+0x108>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    c13a:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    c13c:	adds	r0, #36	; 0x24
    c13e:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    c142:	cmp	r0, #0
    c144:	beq.w	c362 <FatFile::write(void const*, unsigned int)+0x2c2>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    c148:	add	r0, r9
    c14a:	mov	r2, r4
    c14c:	mov	r1, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    c14e:	add	r9, r4
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    c150:	bl	fc48 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    c154:	cmp.w	r9, #512	; 0x200
    c158:	beq.w	c2be <FatFile::write(void const*, unsigned int)+0x21e>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    c15c:	ldr	r2, [r5, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    c15e:	subs	r6, r6, r4
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    c160:	add	r2, r4
    src += n;
    c162:	add	r7, r4
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    c164:	str	r2, [r5, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    c166:	bne.n	c0ca <FatFile::write(void const*, unsigned int)+0x2a>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    c168:	ldr	r3, [r5, #28]
    c16a:	cmp	r3, r2
    c16c:	bcc.w	c38a <FatFile::write(void const*, unsigned int)+0x2ea>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    c170:	ldr	r3, [pc, #716]	; (c440 <FatFile::write(void const*, unsigned int)+0x3a0>)
    c172:	ldr	r3, [r3, #0]
    c174:	cmp	r3, #0
    c176:	beq.w	c3c2 <FatFile::write(void const*, unsigned int)+0x322>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    c17a:	ldrb	r3, [r5, #2]
    c17c:	orn	r3, r3, #127	; 0x7f
    c180:	strb	r3, [r5, #2]
    c182:	mov	r0, r8
    c184:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      // start of new cluster
      if (m_curCluster != 0) {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
    c188:	adds	r3, r1, #1
    c18a:	str	r3, [r5, #16]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    c18c:	ldrb	r2, [r0, #6]
    c18e:	ldr	r3, [r0, #20]
    c190:	subs	r1, #1
    c192:	lsls	r1, r2
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    c194:	cmp.w	r6, #512	; 0x200
    c198:	add	r1, r3
    c19a:	bcs.n	c1da <FatFile::write(void const*, unsigned int)+0x13a>
    c19c:	cmp.w	r6, #512	; 0x200
    c1a0:	mov	r4, r6
    c1a2:	it	cs
    c1a4:	movcs.w	r4, #512	; 0x200
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    c1a8:	ldrb	r3, [r5, #2]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    c1aa:	tst.w	r3, #32
    c1ae:	ite	eq
    c1b0:	moveq	r2, #1
    c1b2:	movne	r2, #5
    c1b4:	b.n	c13c <FatFile::write(void const*, unsigned int)+0x9c>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    c1b6:	ldr	r3, [r5, #16]
    c1b8:	ldrb	r1, [r0, #6]
    c1ba:	ldr	r2, [r0, #20]
    c1bc:	subs	r3, #2
    c1be:	lsl.w	r1, r3, r1
    c1c2:	add	r1, r2
    c1c4:	add	r1, r4

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    c1c6:	cmp.w	r9, #0
    c1ca:	beq.n	c120 <FatFile::write(void const*, unsigned int)+0x80>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    c1cc:	rsb	r4, r9, #512	; 0x200
    c1d0:	cmp	r4, r6
    c1d2:	it	cs
    c1d4:	movcs	r4, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    c1d6:	movs	r2, #1
    c1d8:	b.n	c13c <FatFile::write(void const*, unsigned int)+0x9c>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    c1da:	cmp.w	r6, #1024	; 0x400
    c1de:	bcc.n	c254 <FatFile::write(void const*, unsigned int)+0x1b4>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    c1e0:	ldrb	r3, [r0, #4]
    c1e2:	ldr.w	lr, [r0, #48]	; 0x30
    c1e6:	subs	r3, r3, r4
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    c1e8:	lsrs	r2, r6, #9
    c1ea:	cmp	r3, r2
    c1ec:	it	cs
    c1ee:	movcs	r3, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    c1f0:	cmp	r1, lr
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    c1f2:	mov.w	r4, r3, lsl #9
    c1f6:	bhi.n	c20c <FatFile::write(void const*, unsigned int)+0x16c>
    c1f8:	adds	r2, r1, r3
    c1fa:	cmp	lr, r2
    c1fc:	bcs.n	c20c <FatFile::write(void const*, unsigned int)+0x16c>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    c1fe:	mov.w	lr, #0
    m_sector = 0XFFFFFFFF;
    c202:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    c206:	strb.w	lr, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    c20a:	str	r2, [r0, #48]	; 0x30
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    c20c:	ldr	r0, [r0, #40]	; 0x28
    c20e:	ldr	r2, [r0, #0]
    c210:	ldr.w	r9, [r2, #32]
    c214:	mov	r2, r7
    c216:	blx	r9
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    c218:	cmp	r0, #0
    c21a:	bne.n	c15c <FatFile::write(void const*, unsigned int)+0xbc>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c21c:	movs	r1, #10
    c21e:	ldr	r0, [pc, #548]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c220:	bl	fe48 <usb_serial_write>
    c224:	movs	r1, #99	; 0x63
    c226:	ldr	r0, [pc, #544]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c228:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c22c:	movs	r0, #46	; 0x2e
    c22e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c232:	movw	r1, #1447	; 0x5a7
    c236:	ldr	r0, [pc, #532]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c238:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c23c:	ldr	r0, [pc, #524]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c23e:	bl	11800 <Print::println()>
    c242:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
    c244:	ldr	r3, [r5, #16]
    c246:	ldrb	r1, [r0, #6]
    c248:	ldr	r2, [r0, #20]
    c24a:	subs	r3, #2
    c24c:	lsl.w	r1, r3, r1
    c250:	add	r1, r2
    c252:	b.n	c1cc <FatFile::write(void const*, unsigned int)+0x12c>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    c254:	ldr	r3, [r0, #48]	; 0x30
    c256:	cmp	r1, r3
    c258:	beq.n	c2b0 <FatFile::write(void const*, unsigned int)+0x210>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    c25a:	ldr	r0, [r0, #40]	; 0x28
    c25c:	ldr	r3, [r0, #0]
    c25e:	mov	r2, r7
    c260:	ldr	r3, [r3, #28]
    c262:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    c264:	cmp	r0, #0
    c266:	beq.w	c39a <FatFile::write(void const*, unsigned int)+0x2fa>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    c26a:	mov.w	r4, #512	; 0x200
    c26e:	b.n	c15c <FatFile::write(void const*, unsigned int)+0xbc>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    c270:	ldr	r3, [r5, #32]
    c272:	cmp	r3, #0
    c274:	beq.n	c31c <FatFile::write(void const*, unsigned int)+0x27c>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    c276:	str	r3, [r5, #16]
    c278:	b.n	c114 <FatFile::write(void const*, unsigned int)+0x74>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c27a:	movs	r1, #10
    c27c:	ldr	r0, [pc, #452]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c27e:	bl	fe48 <usb_serial_write>
    c282:	movs	r1, #99	; 0x63
    c284:	ldr	r0, [pc, #448]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c286:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c28a:	movs	r0, #46	; 0x2e
    c28c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c290:	movw	r1, #1342	; 0x53e
    c294:	ldr	r0, [pc, #436]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c296:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c29a:	ldr	r0, [pc, #432]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c29c:	bl	11800 <Print::println()>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    c2a0:	ldrb	r3, [r5, #1]
    c2a2:	orr.w	r3, r3, #1
    c2a6:	strb	r3, [r5, #1]
  return -1;
    c2a8:	mov.w	r0, #4294967295
    c2ac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    c2b0:	movs	r2, #0
    m_sector = 0XFFFFFFFF;
    c2b2:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    c2b6:	strb.w	r2, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    c2ba:	str	r3, [r0, #48]	; 0x30
    c2bc:	b.n	c25a <FatFile::write(void const*, unsigned int)+0x1ba>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    c2be:	ldr	r0, [r5, #8]
    c2c0:	adds	r0, #36	; 0x24
    c2c2:	bl	7c04 <FsCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    c2c6:	cmp	r0, #0
    c2c8:	bne.w	c15c <FatFile::write(void const*, unsigned int)+0xbc>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c2cc:	movs	r1, #10
    c2ce:	ldr	r0, [pc, #372]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c2d0:	bl	fe48 <usb_serial_write>
    c2d4:	movs	r1, #99	; 0x63
    c2d6:	ldr	r0, [pc, #368]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c2d8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c2dc:	movs	r0, #46	; 0x2e
    c2de:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c2e2:	movw	r1, #1433	; 0x599
    c2e6:	ldr	r0, [pc, #356]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c2e8:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c2ec:	ldr	r0, [pc, #348]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c2ee:	bl	11800 <Print::println()>
    c2f2:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c2f4:	movs	r1, #10
    c2f6:	ldr	r0, [pc, #332]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c2f8:	bl	fe48 <usb_serial_write>
    c2fc:	movs	r1, #99	; 0x63
    c2fe:	ldr	r0, [pc, #328]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c300:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c304:	movs	r0, #46	; 0x2e
    c306:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c30a:	movw	r1, #1354	; 0x54a
    c30e:	ldr	r0, [pc, #316]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c310:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c314:	ldr	r0, [pc, #308]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c316:	bl	11800 <Print::println()>
    c31a:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    c31c:	mov	r0, r5
    c31e:	bl	a8e0 <FatFile::addCluster()>
    c322:	cmp	r0, #0
    c324:	beq.n	c3f0 <FatFile::write(void const*, unsigned int)+0x350>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    c326:	ldr	r3, [r5, #16]
    c328:	str	r3, [r5, #32]
    c32a:	ldr	r0, [r5, #8]
    c32c:	b.n	c114 <FatFile::write(void const*, unsigned int)+0x74>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    c32e:	ldr	r1, [r0, #28]
    c330:	bl	b288 <FatFile::seekSet(unsigned long)>
    c334:	cmp	r0, #0
    c336:	bne.w	c0b8 <FatFile::write(void const*, unsigned int)+0x18>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c33a:	movs	r1, #10
    c33c:	ldr	r0, [pc, #260]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c33e:	bl	fe48 <usb_serial_write>
    c342:	movs	r1, #99	; 0x63
    c344:	ldr	r0, [pc, #256]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c346:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c34a:	movs	r0, #46	; 0x2e
    c34c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c350:	movw	r1, #1348	; 0x544
    c354:	ldr	r0, [pc, #244]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c356:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c35a:	ldr	r0, [pc, #240]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c35c:	bl	11800 <Print::println()>
    c360:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c362:	movs	r1, #10
    c364:	ldr	r0, [pc, #220]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c366:	bl	fe48 <usb_serial_write>
    c36a:	movs	r1, #99	; 0x63
    c36c:	ldr	r0, [pc, #216]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c36e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c372:	movs	r0, #46	; 0x2e
    c374:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c378:	movw	r1, #1425	; 0x591
    c37c:	ldr	r0, [pc, #204]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c37e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c382:	ldr	r0, [pc, #200]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c384:	bl	11800 <Print::println()>
    c388:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    c38a:	ldrb	r3, [r5, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    c38c:	str	r2, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    c38e:	orn	r3, r3, #127	; 0x7f
    c392:	strb	r3, [r5, #2]
    c394:	mov	r0, r8
    c396:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c39a:	movs	r1, #10
    c39c:	ldr	r0, [pc, #164]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c39e:	bl	fe48 <usb_serial_write>
    c3a2:	movs	r1, #99	; 0x63
    c3a4:	ldr	r0, [pc, #160]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c3a6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c3aa:	movs	r0, #46	; 0x2e
    c3ac:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c3b0:	movw	r1, #1455	; 0x5af
    c3b4:	ldr	r0, [pc, #148]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c3b6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c3ba:	ldr	r0, [pc, #144]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c3bc:	bl	11800 <Print::println()>
    c3c0:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
    c3c2:	mov	r0, r8
    c3c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c3c8:	movs	r1, #10
    c3ca:	ldr	r0, [pc, #120]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c3cc:	bl	fe48 <usb_serial_write>
    c3d0:	movs	r1, #99	; 0x63
    c3d2:	ldr	r0, [pc, #116]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c3d4:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c3d8:	movs	r0, #46	; 0x2e
    c3da:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c3de:	movw	r1, #1385	; 0x569
    c3e2:	ldr	r0, [pc, #104]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c3e4:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c3e8:	ldr	r0, [pc, #96]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c3ea:	bl	11800 <Print::println()>
    c3ee:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c3f0:	movs	r1, #10
    c3f2:	ldr	r0, [pc, #80]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c3f4:	bl	fe48 <usb_serial_write>
    c3f8:	movs	r1, #99	; 0x63
    c3fa:	ldr	r0, [pc, #76]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c3fc:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c400:	movs	r0, #46	; 0x2e
    c402:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c406:	movw	r1, #1393	; 0x571
    c40a:	ldr	r0, [pc, #64]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c40c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c410:	ldr	r0, [pc, #56]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c412:	bl	11800 <Print::println()>
    c416:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c418:	movs	r1, #10
    c41a:	ldr	r0, [pc, #40]	; (c444 <FatFile::write(void const*, unsigned int)+0x3a4>)
    c41c:	bl	fe48 <usb_serial_write>
    c420:	movs	r1, #99	; 0x63
    c422:	ldr	r0, [pc, #36]	; (c448 <FatFile::write(void const*, unsigned int)+0x3a8>)
    c424:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c428:	movs	r0, #46	; 0x2e
    c42a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c42e:	movw	r1, #1371	; 0x55b
    c432:	ldr	r0, [pc, #24]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c434:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c438:	ldr	r0, [pc, #16]	; (c44c <FatFile::write(void const*, unsigned int)+0x3ac>)
    c43a:	bl	11800 <Print::println()>
    c43e:	b.n	c2a0 <FatFile::write(void const*, unsigned int)+0x200>
    c440:	.word	0x1fff2448
    c444:	.word	0x00016f6c
    c448:	.word	0x000171a4
    c44c:	.word	0x1fff0b00

0000c450 <FatFile::printModifyDateTime(Print*)>:
    return fsPrintDateTime(pr, date, time);
  }
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printModifyDateTime(print_t* pr) {
    c450:	push	{r4, lr}
    c452:	sub	sp, #8
    c454:	mov	r4, r1
  uint16_t date;
  uint16_t time;
  if (getModifyDateTime(&date, &time)) {
    c456:	add.w	r2, sp, #6
    c45a:	add	r1, sp, #4
    c45c:	bl	acd4 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    c460:	cbz	r0, c470 <FatFile::printModifyDateTime(Print*)+0x20>
    return fsPrintDateTime(pr, date, time);
    c462:	mov	r0, r4
    c464:	ldrh.w	r2, [sp, #6]
    c468:	ldrh.w	r1, [sp, #4]
    c46c:	bl	7d44 <fsPrintDateTime(Print*, unsigned short, unsigned short)>
  }
  return 0;
}
    c470:	add	sp, #8
    c472:	pop	{r4, pc}

0000c474 <FatFile::printFileSize(Print*)>:
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
    c474:	push	{r4, r5, lr}
    c476:	sub	sp, #20
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
    c478:	movs	r3, #0
    return fsPrintDateTime(pr, date, time);
  }
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
    c47a:	mov	r5, r1
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
    c47c:	ldr	r1, [r0, #28]
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
    c47e:	strb.w	r3, [sp, #14]
  ptr = fmtBase10(ptr, fileSize());
    c482:	add.w	r0, sp, #14
    c486:	bl	7c68 <fmtBase10(char*, unsigned long)>
    c48a:	add	r4, sp, #4
  while (ptr > buf) {
    c48c:	cmp	r0, r4
    *--ptr = ' ';
    c48e:	it	hi
    c490:	movhi	r3, #32
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
  while (ptr > buf) {
    c492:	bls.n	c49c <FatFile::printFileSize(Print*)+0x28>
    *--ptr = ' ';
    c494:	strb.w	r3, [r0, #-1]!
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
  while (ptr > buf) {
    c498:	cmp	r0, r4
    c49a:	bne.n	c494 <FatFile::printFileSize(Print*)+0x20>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    c49c:	mov	r0, r4
    c49e:	bl	13580 <strlen>
    c4a2:	ldr	r3, [r5, #0]
    c4a4:	mov	r2, r0
    c4a6:	mov	r1, r4
    c4a8:	ldr	r3, [r3, #4]
    c4aa:	mov	r0, r5
    c4ac:	blx	r3
    *--ptr = ' ';
  }
  return pr->write(buf);
}
    c4ae:	add	sp, #20
    c4b0:	pop	{r4, r5, pc}
    c4b2:	nop

0000c4b4 <FatFile::ls(Print*, unsigned char, unsigned char)>:
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    c4b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile file;
  if (!isDir()) {
    c4b8:	ldrb	r4, [r0, #0]
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    c4ba:	sub	sp, #44	; 0x2c
    c4bc:	mov.w	lr, #0
  FatFile file;
  if (!isDir()) {
    c4c0:	ands.w	r4, r4, #112	; 0x70
    c4c4:	strb.w	lr, [sp, #4]
    c4c8:	strb.w	lr, [sp, #5]
    c4cc:	strb.w	lr, [sp, #6]
    c4d0:	beq.w	c5e0 <FatFile::ls(Print*, unsigned char, unsigned char)+0x12c>
    c4d4:	mov	r5, r1
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    c4d6:	mov	r1, lr
    c4d8:	mov	r7, r2
    c4da:	mov	r8, r0
    c4dc:	mov	r6, r3
    c4de:	bl	b288 <FatFile::seekSet(unsigned long)>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    c4e2:	and.w	r9, r7, #2
    c4e6:	uxtb.w	r9, r9
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    c4ea:	movs	r2, #0
    c4ec:	mov	r1, r8
    c4ee:	add	r0, sp, #4
    c4f0:	bl	b6ac <FatFile::openNext(FatFile*, int)>
    c4f4:	mov	r4, r0
    c4f6:	cmp	r0, #0
    c4f8:	beq.n	c5a4 <FatFile::ls(Print*, unsigned char, unsigned char)+0xf0>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
    c4fa:	ldrb.w	r3, [sp, #4]
    c4fe:	lsls	r0, r3, #30
    c500:	bpl.n	c506 <FatFile::ls(Print*, unsigned char, unsigned char)+0x52>
    c502:	lsls	r1, r7, #31
    c504:	bpl.n	c568 <FatFile::ls(Print*, unsigned char, unsigned char)+0xb4>
      for (uint8_t i = 0; i < indent; i++) {
    c506:	movs	r4, #0
    c508:	cbz	r6, c51c <FatFile::ls(Print*, unsigned char, unsigned char)+0x68>
        pr->write(' ');
    c50a:	ldr	r3, [r5, #0]
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    c50c:	adds	r4, #1
        pr->write(' ');
    c50e:	movs	r1, #32
    c510:	ldr	r3, [r3, #0]
    c512:	mov	r0, r5
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    c514:	uxtb	r4, r4
        pr->write(' ');
    c516:	blx	r3
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    c518:	cmp	r6, r4
    c51a:	bne.n	c50a <FatFile::ls(Print*, unsigned char, unsigned char)+0x56>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    c51c:	cmp.w	r9, #0
    c520:	bne.n	c590 <FatFile::ls(Print*, unsigned char, unsigned char)+0xdc>
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
    c522:	lsls	r2, r7, #29
    c524:	bmi.n	c57c <FatFile::ls(Print*, unsigned char, unsigned char)+0xc8>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
    c526:	mov	r1, r5
    c528:	add	r0, sp, #4
    c52a:	bl	d20c <FatFile::printName(Print*)>
      if (file.isDir()) {
    c52e:	ldrb.w	r3, [sp, #4]
    c532:	tst.w	r3, #112	; 0x70
    c536:	bne.n	c570 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
        pr->write('/');
      }
      pr->write('\r');
    c538:	ldr	r3, [r5, #0]
    c53a:	movs	r1, #13
    c53c:	ldr	r3, [r3, #0]
    c53e:	mov	r0, r5
    c540:	blx	r3
      pr->write('\n');
    c542:	ldr	r3, [r5, #0]
    c544:	movs	r1, #10
    c546:	ldr	r3, [r3, #0]
    c548:	mov	r0, r5
    c54a:	blx	r3
      if ((flags & LS_R) && file.isDir()) {
    c54c:	lsls	r3, r7, #28
    c54e:	bpl.n	c568 <FatFile::ls(Print*, unsigned char, unsigned char)+0xb4>
    c550:	ldrb.w	r3, [sp, #4]
    c554:	tst.w	r3, #112	; 0x70
    c558:	beq.n	c568 <FatFile::ls(Print*, unsigned char, unsigned char)+0xb4>
        file.ls(pr, flags, indent + 2);
    c55a:	adds	r3, r6, #2
    c55c:	uxtb	r3, r3
    c55e:	mov	r2, r7
    c560:	mov	r1, r5
    c562:	add	r0, sp, #4
    c564:	bl	c4b4 <FatFile::ls(Print*, unsigned char, unsigned char)>
      }
    }
    file.close();
    c568:	add	r0, sp, #4
    c56a:	bl	ac14 <FatFile::close()>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    c56e:	b.n	c4ea <FatFile::ls(Print*, unsigned char, unsigned char)+0x36>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
      if (file.isDir()) {
        pr->write('/');
    c570:	ldr	r3, [r5, #0]
    c572:	movs	r1, #47	; 0x2f
    c574:	ldr	r3, [r3, #0]
    c576:	mov	r0, r5
    c578:	blx	r3
    c57a:	b.n	c538 <FatFile::ls(Print*, unsigned char, unsigned char)+0x84>
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
        file.printFileSize(pr);
    c57c:	mov	r1, r5
    c57e:	add	r0, sp, #4
    c580:	bl	c474 <FatFile::printFileSize(Print*)>
        pr->write(' ');
    c584:	ldr	r3, [r5, #0]
    c586:	movs	r1, #32
    c588:	ldr	r3, [r3, #0]
    c58a:	mov	r0, r5
    c58c:	blx	r3
    c58e:	b.n	c526 <FatFile::ls(Print*, unsigned char, unsigned char)+0x72>
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
    c590:	mov	r1, r5
    c592:	add	r0, sp, #4
    c594:	bl	c450 <FatFile::printModifyDateTime(Print*)>
        pr->write(' ');
    c598:	ldr	r3, [r5, #0]
    c59a:	movs	r1, #32
    c59c:	ldr	r3, [r3, #0]
    c59e:	mov	r0, r5
    c5a0:	blx	r3
    c5a2:	b.n	c522 <FatFile::ls(Print*, unsigned char, unsigned char)+0x6e>
        file.ls(pr, flags, indent + 2);
      }
    }
    file.close();
  }
  if (getError()) {
    c5a4:	ldrb.w	r3, [r8, #1]
    c5a8:	cbnz	r3, c5b4 <FatFile::ls(Print*, unsigned char, unsigned char)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    c5aa:	movs	r4, #1

 fail:
  return false;
}
    c5ac:	mov	r0, r4
    c5ae:	add	sp, #44	; 0x2c
    c5b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c5b4:	movs	r1, #10
    c5b6:	ldr	r0, [pc, #84]	; (c60c <FatFile::ls(Print*, unsigned char, unsigned char)+0x158>)
    c5b8:	bl	fe48 <usb_serial_write>
    c5bc:	movs	r1, #104	; 0x68
    c5be:	ldr	r0, [pc, #80]	; (c610 <FatFile::ls(Print*, unsigned char, unsigned char)+0x15c>)
    c5c0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c5c4:	movs	r0, #46	; 0x2e
    c5c6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c5ca:	movs	r1, #114	; 0x72
    c5cc:	ldr	r0, [pc, #68]	; (c614 <FatFile::ls(Print*, unsigned char, unsigned char)+0x160>)
    c5ce:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c5d2:	ldr	r0, [pc, #64]	; (c614 <FatFile::ls(Print*, unsigned char, unsigned char)+0x160>)
    c5d4:	bl	11800 <Print::println()>
    c5d8:	mov	r0, r4
    c5da:	add	sp, #44	; 0x2c
    c5dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c5e0:	movs	r1, #10
    c5e2:	ldr	r0, [pc, #40]	; (c60c <FatFile::ls(Print*, unsigned char, unsigned char)+0x158>)
    c5e4:	bl	fe48 <usb_serial_write>
    c5e8:	movs	r1, #104	; 0x68
    c5ea:	ldr	r0, [pc, #36]	; (c610 <FatFile::ls(Print*, unsigned char, unsigned char)+0x15c>)
    c5ec:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c5f0:	movs	r0, #46	; 0x2e
    c5f2:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c5f6:	movs	r1, #83	; 0x53
    c5f8:	ldr	r0, [pc, #24]	; (c614 <FatFile::ls(Print*, unsigned char, unsigned char)+0x160>)
    c5fa:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c5fe:	ldr	r0, [pc, #20]	; (c614 <FatFile::ls(Print*, unsigned char, unsigned char)+0x160>)
    c600:	bl	11800 <Print::println()>
    c604:	mov	r0, r4
    c606:	add	sp, #44	; 0x2c
    c608:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c60c:	.word	0x00016f6c
    c610:	.word	0x00017208
    c614:	.word	0x1fff0b00

0000c618 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    c618:	cmp	r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    c61a:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    c61c:	bls.n	c6a4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x8c>
    c61e:	ldr	r3, [r0, #28]
    c620:	cmp	r1, r3
    c622:	mov	r4, r1
    c624:	mov	r5, r0
    c626:	bhi.n	c6a4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x8c>
    c628:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    c62a:	cmp	r3, #32
    c62c:	mov	r6, r2
    c62e:	beq.n	c65e <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    c630:	cmp	r3, #16
    c632:	bne.n	c67a <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    c634:	ldr	r3, [r0, #24]
    c636:	ubfx	r1, r1, #8, #8
    c63a:	add	r1, r3
    c63c:	movs	r2, #2
    c63e:	add.w	r0, r0, #564	; 0x234
    c642:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    c646:	cmp	r0, #0
    c648:	beq.n	c6be <FatPartition::fatGet(unsigned long, unsigned long*)+0xa6>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    c64a:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    c64c:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    c650:	ldr	r2, [r5, #28]
    c652:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    c654:	itte	ls
    c656:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    c658:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    c65a:	movhi	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    c65c:	pop	{r4, r5, r6, pc}
    c65e:	ldr	r1, [r0, #24]
    c660:	movs	r2, #2
    c662:	add.w	r1, r1, r4, lsr #7
    c666:	add.w	r0, r0, #564	; 0x234
    c66a:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    c66e:	cbz	r0, c6d8 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc0>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    c670:	and.w	r4, r4, #127	; 0x7f
    c674:	ldr.w	r3, [r0, r4, lsl #2]
    c678:	b.n	c650 <FatPartition::fatGet(unsigned long, unsigned long*)+0x38>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c67a:	movs	r1, #10
    c67c:	ldr	r0, [pc, #124]	; (c6fc <FatPartition::fatGet(unsigned long, unsigned long*)+0xe4>)
    c67e:	bl	fe48 <usb_serial_write>
    c682:	movs	r1, #104	; 0x68
    c684:	ldr	r0, [pc, #120]	; (c700 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe8>)
    c686:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c68a:	movs	r0, #46	; 0x2e
    c68c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c690:	movs	r1, #211	; 0xd3
    c692:	ldr	r0, [pc, #112]	; (c704 <FatPartition::fatGet(unsigned long, unsigned long*)+0xec>)
    c694:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c698:	ldr	r0, [pc, #104]	; (c704 <FatPartition::fatGet(unsigned long, unsigned long*)+0xec>)
    c69a:	bl	11800 <Print::println()>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    c69e:	mov.w	r0, #4294967295
    c6a2:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c6a4:	movs	r1, #10
    c6a6:	ldr	r0, [pc, #84]	; (c6fc <FatPartition::fatGet(unsigned long, unsigned long*)+0xe4>)
    c6a8:	bl	fe48 <usb_serial_write>
    c6ac:	movs	r1, #104	; 0x68
    c6ae:	ldr	r0, [pc, #80]	; (c700 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe8>)
    c6b0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c6b4:	movs	r0, #46	; 0x2e
    c6b6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c6ba:	movs	r1, #165	; 0xa5
    c6bc:	b.n	c692 <FatPartition::fatGet(unsigned long, unsigned long*)+0x7a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c6be:	movs	r1, #10
    c6c0:	ldr	r0, [pc, #56]	; (c6fc <FatPartition::fatGet(unsigned long, unsigned long*)+0xe4>)
    c6c2:	bl	fe48 <usb_serial_write>
    c6c6:	movs	r1, #104	; 0x68
    c6c8:	ldr	r0, [pc, #52]	; (c700 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe8>)
    c6ca:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c6ce:	movs	r0, #46	; 0x2e
    c6d0:	bl	ff50 <usb_serial_putchar>
    c6d4:	movs	r1, #183	; 0xb7
    c6d6:	b.n	c692 <FatPartition::fatGet(unsigned long, unsigned long*)+0x7a>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    c6d8:	ldr	r1, [pc, #32]	; (c6fc <FatPartition::fatGet(unsigned long, unsigned long*)+0xe4>)
    c6da:	ldr	r0, [pc, #40]	; (c704 <FatPartition::fatGet(unsigned long, unsigned long*)+0xec>)
    c6dc:	bl	7d88 <Print::write(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    c6e0:	ldr	r1, [pc, #28]	; (c700 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe8>)
    c6e2:	ldr	r0, [pc, #32]	; (c704 <FatPartition::fatGet(unsigned long, unsigned long*)+0xec>)
    c6e4:	bl	7d88 <Print::write(char const*)>
    c6e8:	movs	r0, #46	; 0x2e
    c6ea:	bl	ff50 <usb_serial_putchar>

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    c6ee:	movs	r1, #173	; 0xad
    c6f0:	ldr	r0, [pc, #16]	; (c704 <FatPartition::fatGet(unsigned long, unsigned long*)+0xec>)
    c6f2:	bl	7da4 <Print::println(int)>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    c6f6:	mov.w	r0, #4294967295
  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    c6fa:	pop	{r4, r5, r6, pc}
    c6fc:	.word	0x00016f6c
    c700:	.word	0x00017274
    c704:	.word	0x1fff0b00

0000c708 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    c708:	cmp	r1, #1
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    c70a:	push	{r4, r5, r6, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    c70c:	bls.n	c74c <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    c70e:	ldr	r3, [r0, #28]
    c710:	cmp	r1, r3
    c712:	mov	r4, r1
    c714:	bhi.n	c74c <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    c716:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    c718:	cmp	r3, #32
    c71a:	mov	r5, r2
    c71c:	beq.n	c766 <FatPartition::fatPut(unsigned long, unsigned long)+0x5e>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    c71e:	cmp	r3, #16
    c720:	beq.n	c786 <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c722:	movs	r1, #10
    c724:	ldr	r0, [pc, #192]	; (c7e8 <FatPartition::fatPut(unsigned long, unsigned long)+0xe0>)
    c726:	bl	fe48 <usb_serial_write>
    c72a:	movs	r1, #104	; 0x68
    c72c:	ldr	r0, [pc, #188]	; (c7ec <FatPartition::fatPut(unsigned long, unsigned long)+0xe4>)
    c72e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c732:	movs	r0, #46	; 0x2e
    c734:	bl	ff50 <usb_serial_putchar>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c738:	movw	r1, #293	; 0x125
    c73c:	ldr	r0, [pc, #176]	; (c7f0 <FatPartition::fatPut(unsigned long, unsigned long)+0xe8>)
    c73e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c742:	ldr	r0, [pc, #172]	; (c7f0 <FatPartition::fatPut(unsigned long, unsigned long)+0xe8>)
    c744:	bl	11800 <Print::println()>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    c748:	movs	r0, #0
}
    c74a:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c74c:	movs	r1, #10
    c74e:	ldr	r0, [pc, #152]	; (c7e8 <FatPartition::fatPut(unsigned long, unsigned long)+0xe0>)
    c750:	bl	fe48 <usb_serial_write>
    c754:	movs	r1, #104	; 0x68
    c756:	ldr	r0, [pc, #148]	; (c7ec <FatPartition::fatPut(unsigned long, unsigned long)+0xe4>)
    c758:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c75c:	movs	r0, #46	; 0x2e
    c75e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c762:	movs	r1, #231	; 0xe7
    c764:	b.n	c73c <FatPartition::fatPut(unsigned long, unsigned long)+0x34>
    c766:	ldr	r1, [r0, #24]
    c768:	movs	r2, #3
    c76a:	add.w	r0, r0, #564	; 0x234
    c76e:	add.w	r1, r1, r4, lsr #7
    c772:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    c776:	mov	r6, r0
    c778:	cbz	r0, c7ce <FatPartition::fatPut(unsigned long, unsigned long)+0xc6>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    c77a:	and.w	r4, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    c77e:	movs	r0, #1
    c780:	str.w	r5, [r6, r4, lsl #2]
    c784:	pop	{r4, r5, r6, pc}
    c786:	ldr	r3, [r0, #24]
    c788:	ubfx	r1, r1, #8, #8
    c78c:	add.w	r0, r0, #564	; 0x234
    c790:	add	r1, r3
    c792:	movs	r2, #3
    c794:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    c798:	mov	r6, r0
    c79a:	cbz	r0, c7a6 <FatPartition::fatPut(unsigned long, unsigned long)+0x9e>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    c79c:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    c79e:	movs	r0, #1
    c7a0:	strh.w	r5, [r6, r4, lsl #1]
    c7a4:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c7a6:	movs	r1, #10
    c7a8:	ldr	r0, [pc, #60]	; (c7e8 <FatPartition::fatPut(unsigned long, unsigned long)+0xe0>)
    c7aa:	bl	fe48 <usb_serial_write>
    c7ae:	movs	r1, #104	; 0x68
    c7b0:	ldr	r0, [pc, #56]	; (c7ec <FatPartition::fatPut(unsigned long, unsigned long)+0xe4>)
    c7b2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c7b6:	movs	r0, #46	; 0x2e
    c7b8:	bl	ff50 <usb_serial_putchar>
    c7bc:	movs	r1, #252	; 0xfc
    c7be:	ldr	r0, [pc, #48]	; (c7f0 <FatPartition::fatPut(unsigned long, unsigned long)+0xe8>)
    c7c0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c7c4:	ldr	r0, [pc, #40]	; (c7f0 <FatPartition::fatPut(unsigned long, unsigned long)+0xe8>)
    c7c6:	bl	11800 <Print::println()>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    c7ca:	mov	r0, r6
    c7cc:	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c7ce:	movs	r1, #10
    c7d0:	ldr	r0, [pc, #20]	; (c7e8 <FatPartition::fatPut(unsigned long, unsigned long)+0xe0>)
    c7d2:	bl	fe48 <usb_serial_write>
    c7d6:	movs	r1, #104	; 0x68
    c7d8:	ldr	r0, [pc, #16]	; (c7ec <FatPartition::fatPut(unsigned long, unsigned long)+0xe4>)
    c7da:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c7de:	movs	r0, #46	; 0x2e
    c7e0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c7e4:	movs	r1, #239	; 0xef
    c7e6:	b.n	c7be <FatPartition::fatPut(unsigned long, unsigned long)+0xb6>
    c7e8:	.word	0x00016f6c
    c7ec:	.word	0x00017274
    c7f0:	.word	0x1fff0b00

0000c7f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    c7f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    c7f8:	ldr	r4, [r0, #12]
    c7fa:	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    c7fc:	sub	sp, #8
    c7fe:	mov	r5, r0
    c800:	mov	r7, r1
    c802:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    c804:	itte	cc
    c806:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    c808:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    c80a:	movcs	r6, #1
    c80c:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    c80e:	adds	r4, #1
    if (find > m_lastCluster) {
    c810:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    c812:	add	r2, sp, #4
    c814:	mov	r0, r5
    c816:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    c818:	bls.n	c830 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3c>
      if (setStart) {
    c81a:	cmp	r6, #0
    c81c:	bne.n	c898 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xa4>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    c81e:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    c820:	adds	r4, #1
    if (find > m_lastCluster) {
    c822:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    c824:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    c828:	add	r2, sp, #4
    c82a:	mov	r0, r5
    c82c:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    c82e:	bhi.n	c81a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    c830:	cmp	r7, r4
    c832:	beq.n	c86a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    c834:	bl	c618 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    c838:	cmp	r0, #0
    c83a:	blt.n	c8be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    c83c:	beq.n	c80c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    c83e:	ldr	r3, [sp, #4]
    c840:	cmp	r3, #0
    c842:	bne.n	c80c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    c844:	cbz	r6, c848 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    m_allocSearchStart = find;
    c846:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    c848:	mvn.w	r2, #4026531840	; 0xf0000000
    c84c:	mov	r1, r4
    c84e:	mov	r0, r5
    c850:	bl	c708 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    c854:	mov	r6, r0
    c856:	cmp	r0, #0
    c858:	beq.n	c91c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x128>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    c85a:	cmp	r7, #0
    c85c:	bne.n	c8e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xf0>
  *next = find;
  return true;

 fail:
  return false;
}
    c85e:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    c860:	str.w	r4, [r8]
  return true;

 fail:
  return false;
}
    c864:	add	sp, #8
    c866:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c86a:	movs	r1, #10
    c86c:	ldr	r0, [pc, #212]	; (c944 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x150>)
    c86e:	bl	fe48 <usb_serial_write>
    c872:	movs	r1, #104	; 0x68
    c874:	ldr	r0, [pc, #208]	; (c948 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x154>)
    c876:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c87a:	movs	r0, #46	; 0x2e
    c87c:	bl	ff50 <usb_serial_putchar>
    c880:	movs	r1, #56	; 0x38
    c882:	ldr	r0, [pc, #200]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c884:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c888:	ldr	r0, [pc, #192]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c88a:	bl	11800 <Print::println()>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    c88e:	movs	r6, #0
}
    c890:	mov	r0, r6
    c892:	add	sp, #8
    c894:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c898:	movs	r1, #10
    c89a:	ldr	r0, [pc, #168]	; (c944 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x150>)
    c89c:	bl	fe48 <usb_serial_write>
    c8a0:	movs	r1, #104	; 0x68
    c8a2:	ldr	r0, [pc, #164]	; (c948 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x154>)
    c8a4:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c8a8:	movs	r0, #46	; 0x2e
    c8aa:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c8ae:	movs	r1, #47	; 0x2f
    c8b0:	ldr	r0, [pc, #152]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c8b2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c8b6:	ldr	r0, [pc, #148]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c8b8:	bl	11800 <Print::println()>
    c8bc:	b.n	c88e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c8be:	movs	r1, #10
    c8c0:	ldr	r0, [pc, #128]	; (c944 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x150>)
    c8c2:	bl	fe48 <usb_serial_write>
    c8c6:	movs	r1, #104	; 0x68
    c8c8:	ldr	r0, [pc, #124]	; (c948 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x154>)
    c8ca:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c8ce:	movs	r0, #46	; 0x2e
    c8d0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c8d4:	movs	r1, #62	; 0x3e
    c8d6:	ldr	r0, [pc, #116]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c8d8:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c8dc:	ldr	r0, [pc, #108]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c8de:	bl	11800 <Print::println()>
    c8e2:	b.n	c88e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    c8e4:	mov	r0, r5
    c8e6:	mov	r1, r7
    c8e8:	mov	r2, r4
    c8ea:	bl	c708 <FatPartition::fatPut(unsigned long, unsigned long)>
    c8ee:	mov	r5, r0
    c8f0:	cmp	r0, #0
    c8f2:	bne.n	c85e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c8f4:	movs	r1, #10
    c8f6:	ldr	r0, [pc, #76]	; (c944 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x150>)
    c8f8:	bl	fe48 <usb_serial_write>
    c8fc:	movs	r1, #104	; 0x68
    c8fe:	ldr	r0, [pc, #72]	; (c948 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x154>)
    c900:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c904:	movs	r0, #46	; 0x2e
    c906:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c90a:	movs	r1, #80	; 0x50
    c90c:	ldr	r0, [pc, #60]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c90e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c912:	ldr	r0, [pc, #56]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    c914:	mov	r6, r5
    c916:	bl	11800 <Print::println()>
    c91a:	b.n	c890 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c91c:	movs	r1, #10
    c91e:	ldr	r0, [pc, #36]	; (c944 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x150>)
    c920:	bl	fe48 <usb_serial_write>
    c924:	movs	r1, #104	; 0x68
    c926:	ldr	r0, [pc, #32]	; (c948 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x154>)
    c928:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c92c:	movs	r0, #46	; 0x2e
    c92e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c932:	movs	r1, #74	; 0x4a
    c934:	ldr	r0, [pc, #20]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c936:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c93a:	ldr	r0, [pc, #16]	; (c94c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x158>)
    c93c:	bl	11800 <Print::println()>
    c940:	b.n	c890 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9c>
    c942:	nop
    c944:	.word	0x00016f6c
    c948:	.word	0x00017274
    c94c:	.word	0x1fff0b00

0000c950 <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    c950:	push	{r4, r5, r6, r7, lr}
    c952:	mov	r5, r0
    c954:	sub	sp, #12
    c956:	mov	r4, r1
    c958:	b.n	c972 <FatPartition::freeChain(unsigned long)+0x22>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    c95a:	bl	c708 <FatPartition::fatPut(unsigned long, unsigned long)>
    c95e:	mov	r6, r0
    c960:	cbz	r0, c9b6 <FatPartition::freeChain(unsigned long)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    c962:	ldr	r3, [r5, #12]
    c964:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    c966:	itt	cc
    c968:	addcc.w	r4, r4, #4294967295
    c96c:	strcc	r4, [r5, #12]
    }
    cluster = next;
    c96e:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    c970:	cbz	r7, c9b0 <FatPartition::freeChain(unsigned long)+0x60>
    fg = fatGet(cluster, &next);
    c972:	add	r2, sp, #4
    c974:	mov	r1, r4
    c976:	mov	r0, r5
    c978:	bl	c618 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    c97c:	subs	r7, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    c97e:	mov	r1, r4
    c980:	mov.w	r2, #0
    c984:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    c986:	bge.n	c95a <FatPartition::freeChain(unsigned long)+0xa>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c988:	movs	r1, #10
    c98a:	ldr	r0, [pc, #88]	; (c9e4 <FatPartition::freeChain(unsigned long)+0x94>)
    c98c:	bl	fe48 <usb_serial_write>
    c990:	movs	r1, #104	; 0x68
    c992:	ldr	r0, [pc, #84]	; (c9e8 <FatPartition::freeChain(unsigned long)+0x98>)
    c994:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c998:	movs	r0, #46	; 0x2e
    c99a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c99e:	mov.w	r1, #308	; 0x134
    c9a2:	ldr	r0, [pc, #72]	; (c9ec <FatPartition::freeChain(unsigned long)+0x9c>)
    c9a4:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c9a8:	ldr	r0, [pc, #64]	; (c9ec <FatPartition::freeChain(unsigned long)+0x9c>)
    c9aa:	bl	11800 <Print::println()>
  } while (fg);

  return true;

 fail:
  return false;
    c9ae:	movs	r6, #0
}
    c9b0:	mov	r0, r6
    c9b2:	add	sp, #12
    c9b4:	pop	{r4, r5, r6, r7, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c9b6:	movs	r1, #10
    c9b8:	ldr	r0, [pc, #40]	; (c9e4 <FatPartition::freeChain(unsigned long)+0x94>)
    c9ba:	bl	fe48 <usb_serial_write>
    c9be:	movs	r1, #104	; 0x68
    c9c0:	ldr	r0, [pc, #36]	; (c9e8 <FatPartition::freeChain(unsigned long)+0x98>)
    c9c2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c9c6:	movs	r0, #46	; 0x2e
    c9c8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    c9cc:	movw	r1, #313	; 0x139
    c9d0:	ldr	r0, [pc, #24]	; (c9ec <FatPartition::freeChain(unsigned long)+0x9c>)
    c9d2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    c9d6:	ldr	r0, [pc, #20]	; (c9ec <FatPartition::freeChain(unsigned long)+0x9c>)
    c9d8:	bl	11800 <Print::println()>
    c9dc:	mov	r0, r6
    c9de:	add	sp, #12
    c9e0:	pop	{r4, r5, r6, r7, pc}
    c9e2:	nop
    c9e4:	.word	0x00016f6c
    c9e8:	.word	0x00017274
    c9ec:	.word	0x1fff0b00

0000c9f0 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    c9f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9f4:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    c9f6:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    c9f8:	cmp	r3, #16

 fail:
  return false;
}
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    c9fa:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    c9fc:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    ca00:	beq.n	ca2e <FatPartition::freeClusterCount()+0x3e>
    ca02:	cmp	r3, #32
    ca04:	beq.n	ca2e <FatPartition::freeClusterCount()+0x3e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    ca06:	ldr	r1, [pc, #228]	; (caec <FatPartition::freeClusterCount()+0xfc>)
    ca08:	ldr	r0, [pc, #228]	; (caf0 <FatPartition::freeClusterCount()+0x100>)
    ca0a:	bl	7d88 <Print::write(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    ca0e:	ldr	r1, [pc, #228]	; (caf4 <FatPartition::freeClusterCount()+0x104>)
    ca10:	ldr	r0, [pc, #220]	; (caf0 <FatPartition::freeClusterCount()+0x100>)
    ca12:	bl	7d88 <Print::write(char const*)>
    ca16:	movs	r0, #46	; 0x2e
    ca18:	bl	ff50 <usb_serial_putchar>
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    ca1c:	mov.w	r1, #382	; 0x17e
    ca20:	ldr	r0, [pc, #204]	; (caf0 <FatPartition::freeClusterCount()+0x100>)
    ca22:	bl	7da4 <Print::println(int)>
  }
  setFreeClusterCount(free);
  return free;

 fail:
  return -1;
    ca26:	mov.w	r0, #4294967295
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
    ca2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    ca2e:	ldr	r5, [r6, #24]
    while (todo) {
    ca30:	cmp.w	r8, #0
    ca34:	beq.n	cade <FatPartition::freeClusterCount()+0xee>
    ca36:	add.w	r7, r6, #564	; 0x234
    ca3a:	movs	r4, #0
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    ca3c:	mov	r1, r5
    ca3e:	movs	r2, #2
    ca40:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
    ca42:	adds	r5, #1
    ca44:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
      if (!pc) {
    ca48:	cbz	r0, cab0 <FatPartition::freeClusterCount()+0xc0>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    ca4a:	ldrb	r3, [r6, #7]
    ca4c:	cmp	r3, #16
    ca4e:	beq.n	ca7e <FatPartition::freeClusterCount()+0x8e>
      if (todo < n) {
    ca50:	cmp.w	r8, #127	; 0x7f
    ca54:	bhi.n	caa8 <FatPartition::freeClusterCount()+0xb8>
        n = todo;
    ca56:	uxth.w	r1, r8
    ca5a:	mov	lr, r8
    ca5c:	subs	r1, #1
    ca5e:	uxth	r1, r1
    ca60:	add.w	r1, r0, r1, lsl #2
    ca64:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    ca66:	ldr.w	r2, [r3, #4]!
    ca6a:	cbnz	r2, ca6e <FatPartition::freeClusterCount()+0x7e>
            free++;
    ca6c:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    ca6e:	cmp	r3, r1
    ca70:	bne.n	ca66 <FatPartition::freeClusterCount()+0x76>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    ca72:	subs.w	r8, r8, lr
    ca76:	bne.n	ca3c <FatPartition::freeClusterCount()+0x4c>
    ca78:	mov	r0, r4
    ca7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    ca7e:	cmp.w	r8, #255	; 0xff
    ca82:	bls.n	cae4 <FatPartition::freeClusterCount()+0xf4>
    ca84:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    ca88:	mov	r3, lr
    ca8a:	subs	r1, r3, #1
    ca8c:	uxth	r1, r1
    ca8e:	add.w	r1, r0, r1, lsl #1
    ca92:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    ca94:	ldrh.w	r2, [r3, #2]!
    ca98:	cbnz	r2, ca9c <FatPartition::freeClusterCount()+0xac>
            free++;
    ca9a:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    ca9c:	cmp	r1, r3
    ca9e:	bne.n	ca94 <FatPartition::freeClusterCount()+0xa4>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    caa0:	subs.w	r8, r8, lr
    caa4:	bne.n	ca3c <FatPartition::freeClusterCount()+0x4c>
    caa6:	b.n	ca78 <FatPartition::freeClusterCount()+0x88>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    caa8:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    caac:	mov	r1, lr
    caae:	b.n	ca5c <FatPartition::freeClusterCount()+0x6c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cab0:	movs	r1, #10
    cab2:	ldr	r0, [pc, #56]	; (caec <FatPartition::freeClusterCount()+0xfc>)
    cab4:	bl	fe48 <usb_serial_write>
    cab8:	movs	r1, #104	; 0x68
    caba:	ldr	r0, [pc, #56]	; (caf4 <FatPartition::freeClusterCount()+0x104>)
    cabc:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cac0:	movs	r0, #46	; 0x2e
    cac2:	bl	ff50 <usb_serial_putchar>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    cac6:	mov.w	r1, #358	; 0x166
    caca:	ldr	r0, [pc, #36]	; (caf0 <FatPartition::freeClusterCount()+0x100>)
    cacc:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    cad0:	ldr	r0, [pc, #28]	; (caf0 <FatPartition::freeClusterCount()+0x100>)
    cad2:	bl	11800 <Print::println()>
  }
  setFreeClusterCount(free);
  return free;

 fail:
  return -1;
    cad6:	mov.w	r0, #4294967295
    cada:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    cade:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    cae0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    cae4:	uxth.w	r3, r8
    cae8:	mov	lr, r8
    caea:	b.n	ca8a <FatPartition::freeClusterCount()+0x9a>
    caec:	.word	0x00016f6c
    caf0:	.word	0x1fff0b00
    caf4:	.word	0x00017274

0000caf8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

 fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    caf8:	push	{r3, r4, r5, r6, r7, lr}
    cafa:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    cafc:	movs	r5, #0
    cafe:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    cb02:	movs	r0, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    cb04:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    cb06:	str	r1, [r4, #40]	; 0x28
    cb08:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    cb0c:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    cb0e:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    cb10:	strb.w	r5, [r4, #36]	; 0x24
    cb14:	strb.w	r5, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    cb18:	str	r3, [r4, #48]	; 0x30
    cb1a:	str.w	r3, [r4, #576]	; 0x240
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    cb1e:	mov	r6, r2
    cb20:	cmp	r2, #0
    cb22:	beq.n	cba4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
    if (part > 4) {
    cb24:	cmp	r2, #4
    cb26:	bhi.n	cb7a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x82>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    cb28:	add.w	r7, r4, #36	; 0x24
    cb2c:	mov	r2, r5
    cb2e:	mov	r0, r7
    cb30:	mov	r1, r5
    cb32:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    cb36:	add.w	r6, r6, #268435456	; 0x10000000
    cb3a:	subs	r6, #1
    cb3c:	lsls	r6, r6, #4
    cb3e:	add.w	r3, r0, #446	; 0x1be
    cb42:	adds	r2, r3, r6

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    cb44:	cbz	r0, cb50 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x58>
    cb46:	ldrb	r1, [r2, #4]
    cb48:	cbz	r1, cb50 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x58>
    cb4a:	ldrb	r3, [r3, r6]
    cb4c:	lsls	r3, r3, #25
    cb4e:	beq.n	cbd6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xde>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cb50:	movs	r1, #10
    cb52:	ldr	r0, [pc, #344]	; (ccac <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b4>)
    cb54:	bl	fe48 <usb_serial_write>
    cb58:	movs	r1, #104	; 0x68
    cb5a:	ldr	r0, [pc, #340]	; (ccb0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b8>)
    cb5c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cb60:	movs	r0, #46	; 0x2e
    cb62:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    cb66:	movw	r1, #419	; 0x1a3
    cb6a:	ldr	r0, [pc, #328]	; (ccb4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1bc>)
    cb6c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    cb70:	ldr	r0, [pc, #320]	; (ccb4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1bc>)
    cb72:	bl	11800 <Print::println()>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    cb76:	movs	r0, #0
    cb78:	pop	{r3, r4, r5, r6, r7, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cb7a:	movs	r1, #10
    cb7c:	ldr	r0, [pc, #300]	; (ccac <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b4>)
    cb7e:	bl	fe48 <usb_serial_write>
    cb82:	movs	r1, #104	; 0x68
    cb84:	ldr	r0, [pc, #296]	; (ccb0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b8>)
    cb86:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cb8a:	movs	r0, #46	; 0x2e
    cb8c:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    cb90:	movw	r1, #411	; 0x19b
    cb94:	ldr	r0, [pc, #284]	; (ccb4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1bc>)
    cb96:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    cb9a:	ldr	r0, [pc, #280]	; (ccb4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1bc>)
    cb9c:	bl	11800 <Print::println()>
    cba0:	mov	r0, r5
    cba2:	pop	{r3, r4, r5, r6, r7, pc}
    cba4:	add.w	r7, r4, #36	; 0x24
    cba8:	mov	r0, r7
    cbaa:	movs	r2, #0
    cbac:	mov	r1, r6
    cbae:	bl	7b30 <FsCache::get(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    cbb2:	cbz	r0, cbba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xc2>
    cbb4:	ldrb	r3, [r0, #16]
    cbb6:	cmp	r3, #2
    cbb8:	beq.n	cbda <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe2>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cbba:	movs	r1, #10
    cbbc:	ldr	r0, [pc, #236]	; (ccac <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b4>)
    cbbe:	bl	fe48 <usb_serial_write>
    cbc2:	movs	r1, #104	; 0x68
    cbc4:	ldr	r0, [pc, #232]	; (ccb0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b8>)
    cbc6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cbca:	movs	r0, #46	; 0x2e
    cbcc:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    cbd0:	mov.w	r1, #428	; 0x1ac
    cbd4:	b.n	cb6a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    cbd6:	ldr	r6, [r2, #8]
    cbd8:	b.n	cba8 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb0>
    cbda:	ldrh.w	r3, [r0, #11]
    cbde:	cmp.w	r3, #512	; 0x200
    cbe2:	bne.n	cbba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    cbe4:	ldrb	r5, [r0, #13]
    cbe6:	strb	r5, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    cbe8:	subs	r3, r5, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    cbea:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    cbec:	cmp	r5, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    cbee:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    cbf0:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    cbf2:	beq.n	cc2c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x134>
    cbf4:	movs	r2, #1
    cbf6:	mov	r1, r2
    cbf8:	b.n	cbfc <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x104>
    cbfa:	mov	r2, r3
    cbfc:	lsls	r1, r1, #1
    cbfe:	uxtb	r1, r1
    cc00:	adds	r3, r2, #1
    cc02:	cmp	r5, r1
    cc04:	uxtb	r3, r3
    cc06:	beq.n	cc2a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x132>
    if (tmp == 0) {
    cc08:	cmp	r3, #9
    cc0a:	bne.n	cbfa <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x102>
    cc0c:	strb	r2, [r4, #6]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cc0e:	movs	r1, #10
    cc10:	ldr	r0, [pc, #152]	; (ccac <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b4>)
    cc12:	bl	fe48 <usb_serial_write>
    cc16:	movs	r1, #104	; 0x68
    cc18:	ldr	r0, [pc, #148]	; (ccb0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b8>)
    cc1a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cc1e:	movs	r0, #46	; 0x2e
    cc20:	bl	ff50 <usb_serial_putchar>
    cc24:	movw	r1, #437	; 0x1b5
    cc28:	b.n	cb6a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
    cc2a:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    cc2c:	ldrh	r5, [r0, #22]
    cc2e:	str	r5, [r4, #16]
  if (m_sectorsPerFat == 0) {
    cc30:	cbnz	r5, cc36 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x13e>
    cc32:	ldr	r5, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    cc34:	str	r5, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    cc36:	ldrh	r1, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    cc38:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    cc3c:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    cc3e:	add	r1, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    cc40:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    cc42:	add.w	r7, r1, r5, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    cc46:	addw	r3, r3, #511	; 0x1ff
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    cc4a:	str	r1, [r4, #24]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    cc4c:	ldrh.w	r1, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    cc50:	str	r7, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    cc52:	add.w	r3, r7, r3, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    cc56:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    cc58:	cbnz	r1, cc5c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x164>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    cc5a:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    cc5c:	subs	r6, r6, r3
    cc5e:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    cc60:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    cc64:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    cc68:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    cc6a:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    cc6c:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    cc6e:	bls.n	cc8c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x194>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    cc70:	movw	r3, #65524	; 0xfff4
    cc74:	cmp	r2, r3
    cc76:	ittet	hi
    cc78:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    cc7a:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    cc7c:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    cc7e:	movhi	r3, #32
    cc80:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    cc82:	str	r5, [r4, #44]	; 0x2c
    cc84:	str.w	r5, [r4, #572]	; 0x23c
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    cc88:	movs	r0, #1
    cc8a:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    cc8c:	movs	r3, #12
    cc8e:	strb	r3, [r4, #7]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cc90:	movs	r1, #10
    cc92:	ldr	r0, [pc, #24]	; (ccac <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b4>)
    cc94:	bl	fe48 <usb_serial_write>
    cc98:	movs	r1, #104	; 0x68
    cc9a:	ldr	r0, [pc, #20]	; (ccb0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x1b8>)
    cc9c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cca0:	movs	r0, #46	; 0x2e
    cca2:	bl	ff50 <usb_serial_putchar>
    cca6:	movw	r1, #475	; 0x1db
    ccaa:	b.n	cb6a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
    ccac:	.word	0x00016f6c
    ccb0:	.word	0x00017274
    ccb4:	.word	0x1fff0b00

0000ccb8 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    ccb8:	cmp	r1, #4
    ccba:	bls.n	ccd6 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    ccbc:	cmp	r1, #10
    ccbe:	bls.n	ccce <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    ccc0:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    ccc2:	itte	ls
    ccc4:	addls.w	r1, r0, r1, lsl #1
    ccc8:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    ccca:	movhi	r0, #0
}
    cccc:	bx	lr
    ccce:	add.w	r1, r0, r1, lsl #1
    ccd2:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    ccd4:	bx	lr
    ccd6:	add.w	r1, r0, r1, lsl #1
    ccda:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    ccde:	bx	lr

0000cce0 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    cce0:	push	{r4}
    cce2:	subs	r2, r0, #1
    cce4:	add.w	r4, r0, #10
  uint8_t sum = 0;
    cce8:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    ccea:	ldrb.w	r1, [r2, #1]!
    ccee:	lsrs	r3, r0, #1
    ccf0:	orr.w	r0, r3, r0, lsl #7
    ccf4:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    ccf8:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    ccfa:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    ccfc:	bne.n	ccea <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    ccfe:	ldr.w	r4, [sp], #4
    cd02:	bx	lr

0000cd04 <FatFile::openCluster(FatFile*)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    cd04:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    cd06:	ldr	r3, [r1, #12]
    cd08:	cbz	r3, cd28 <FatFile::openCluster(FatFile*)+0x24>
    cd0a:	mov	r5, r0
    cd0c:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    cd0e:	movs	r2, #36	; 0x24
    cd10:	movs	r1, #0
    cd12:	bl	12f4c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    cd16:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    cd18:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    cd1a:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    cd1c:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    cd1e:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    cd20:	ldr	r3, [r4, #12]
    cd22:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    cd24:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    cd26:	pop	{r3, r4, r5, pc}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    cd28:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    cd2a:	ldmia.w	sp!, {r3, r4, r5, lr}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    cd2e:	b.w	ad30 <FatFile::openRoot(FatVolume*)>
    cd32:	nop

0000cd34 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    cd34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd38:	sub	sp, #44	; 0x2c
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    cd3a:	ldrb	r3, [r0, #0]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    cd3c:	mov.w	r9, #0
    cd40:	strb.w	r9, [sp, #4]
    cd44:	strb.w	r9, [sp, #5]
    cd48:	strb.w	r9, [sp, #6]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    cd4c:	mov	sl, r1
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    cd4e:	cbz	r3, cd56 <FatFile::getName(char*, unsigned int)+0x22>
    cd50:	cmp	r2, #12
    cd52:	mov	r6, r2
    cd54:	bhi.n	cd86 <FatFile::getName(char*, unsigned int)+0x52>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cd56:	movs	r1, #10
    cd58:	ldr	r0, [pc, #508]	; (cf58 <FatFile::getName(char*, unsigned int)+0x224>)
    cd5a:	bl	fe48 <usb_serial_write>
    cd5e:	movs	r1, #102	; 0x66
    cd60:	ldr	r0, [pc, #504]	; (cf5c <FatFile::getName(char*, unsigned int)+0x228>)
    cd62:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cd66:	movs	r0, #46	; 0x2e
    cd68:	bl	ff50 <usb_serial_putchar>
    cd6c:	movs	r1, #128	; 0x80
    cd6e:	ldr	r0, [pc, #496]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cd70:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    cd74:	ldr	r0, [pc, #488]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cd76:	bl	11800 <Print::println()>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
    cd7a:	movs	r0, #0
    cd7c:	strb.w	r0, [sl]
  return 0;
}
    cd80:	add	sp, #44	; 0x2c
    cd82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    cd86:	ldrb	r3, [r0, #3]
    cd88:	mov	r8, r0
    cd8a:	cmp	r3, #0
    cd8c:	beq.n	ce5a <FatFile::getName(char*, unsigned int)+0x126>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    cd8e:	add	r0, sp, #4
    cd90:	mov	r1, r8
    cd92:	bl	cd04 <FatFile::openCluster(FatFile*)>
    cd96:	cmp	r0, #0
    cd98:	beq.n	ce70 <FatFile::getName(char*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    cd9a:	ldrb.w	r3, [r8, #3]
    cd9e:	cmp	r3, #0
    cda0:	beq.n	ce34 <FatFile::getName(char*, unsigned int)+0x100>
    cda2:	subs	r6, #1
    cda4:	movs	r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    cda6:	ldrh.w	r1, [r8, #4]
    cdaa:	subs	r1, r1, r7
    cdac:	lsls	r1, r1, #5
    cdae:	add	r0, sp, #4
    cdb0:	bl	b288 <FatFile::seekSet(unsigned long)>
    cdb4:	cmp	r0, #0
    cdb6:	beq.n	ce96 <FatFile::getName(char*, unsigned int)+0x162>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    cdb8:	movs	r1, #0
    cdba:	add	r0, sp, #4
    cdbc:	bl	b210 <FatFile::readDirCache(bool)>
    if (!ldir) {
    cdc0:	mov	r2, r0
    cdc2:	cmp	r0, #0
    cdc4:	beq.n	cebc <FatFile::getName(char*, unsigned int)+0x188>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    cdc6:	ldrb	r3, [r0, #11]
    cdc8:	cmp	r3, #15
    cdca:	bne.w	cee2 <FatFile::getName(char*, unsigned int)+0x1ae>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    cdce:	ldrb	r3, [r0, #0]
    cdd0:	and.w	r3, r3, #31
    cdd4:	cmp	r7, r3
    cdd6:	bne.w	cf08 <FatFile::getName(char*, unsigned int)+0x1d4>
  return 0;
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    cdda:	subs	r3, r7, #1
    cddc:	add.w	r4, r3, r3, lsl #1
    cde0:	add.w	r4, r3, r4, lsl #2
    cde4:	mov	r3, r4
    cde6:	add.w	r5, sl, r4
    cdea:	add.w	fp, r4, #13
    cdee:	subs	r1, r3, r4
  for (i = 0; i < 13; i++) {
    if (k >= (n - 1)) {
    cdf0:	cmp	r6, r3
      k = n - 1;
      break;
    }
    uint16_t c = lfnGetChar(ldir, i);
    cdf2:	mov	r0, r2
    cdf4:	uxtb	r1, r1
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    if (k >= (n - 1)) {
    cdf6:	bls.n	ce64 <FatFile::getName(char*, unsigned int)+0x130>
      k = n - 1;
      break;
    }
    uint16_t c = lfnGetChar(ldir, i);
    cdf8:	bl	ccb8 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0) break; // https://github.com/greiman/SdFat-beta/issues/67
    cdfc:	cmp	r0, #0
    cdfe:	beq.n	ce6c <FatFile::getName(char*, unsigned int)+0x138>
    name[k++] = c >= 0X7F ? '?' : c;
    ce00:	cmp	r0, #126	; 0x7e
    ce02:	add.w	r3, r3, #1
    ce06:	ite	ls
    ce08:	uxtbls	r0, r0
    ce0a:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    ce0c:	cmp	fp, r3
      k = n - 1;
      break;
    }
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0) break; // https://github.com/greiman/SdFat-beta/issues/67
    name[k++] = c >= 0X7F ? '?' : c;
    ce0e:	strb.w	r0, [r5], #1
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    ce12:	bne.n	cdee <FatFile::getName(char*, unsigned int)+0xba>
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0) break; // https://github.com/greiman/SdFat-beta/issues/67
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  name[k] = '\0';
    ce14:	strb.w	r9, [sl, fp]
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    n = lfnGetName(ldir, name, size);
    if (n == 0) {
    ce18:	cmp.w	fp, #0
    ce1c:	beq.w	cf2e <FatFile::getName(char*, unsigned int)+0x1fa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    ce20:	ldrb	r3, [r2, #0]
    ce22:	lsls	r3, r3, #25
    ce24:	bmi.w	cf54 <FatFile::getName(char*, unsigned int)+0x220>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    ce28:	adds	r7, #1
    ce2a:	ldrb.w	r3, [r8, #3]
    ce2e:	uxtb	r7, r7
    ce30:	cmp	r3, r7
    ce32:	bcs.n	cda6 <FatFile::getName(char*, unsigned int)+0x72>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ce34:	movs	r1, #10
    ce36:	ldr	r0, [pc, #288]	; (cf58 <FatFile::getName(char*, unsigned int)+0x224>)
    ce38:	bl	fe48 <usb_serial_write>
    ce3c:	movs	r1, #102	; 0x66
    ce3e:	ldr	r0, [pc, #284]	; (cf5c <FatFile::getName(char*, unsigned int)+0x228>)
    ce40:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ce44:	movs	r0, #46	; 0x2e
    ce46:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ce4a:	movs	r1, #166	; 0xa6
    ce4c:	ldr	r0, [pc, #272]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    ce4e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ce52:	ldr	r0, [pc, #268]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    ce54:	bl	11800 <Print::println()>
    ce58:	b.n	cd7a <FatFile::getName(char*, unsigned int)+0x46>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    ce5a:	bl	dc78 <FatFile::getSFN(char*)>
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
  return 0;
}
    ce5e:	add	sp, #44	; 0x2c
    ce60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0) break; // https://github.com/greiman/SdFat-beta/issues/67
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  name[k] = '\0';
    ce64:	strb.w	r9, [sl, r6]
    ce68:	mov	fp, r6
    ce6a:	b.n	ce20 <FatFile::getName(char*, unsigned int)+0xec>
    if (k >= (n - 1)) {
      k = n - 1;
      break;
    }
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0) break; // https://github.com/greiman/SdFat-beta/issues/67
    ce6c:	mov	fp, r3
    ce6e:	b.n	ce14 <FatFile::getName(char*, unsigned int)+0xe0>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ce70:	movs	r1, #10
    ce72:	ldr	r0, [pc, #228]	; (cf58 <FatFile::getName(char*, unsigned int)+0x224>)
    ce74:	bl	fe48 <usb_serial_write>
    ce78:	movs	r1, #102	; 0x66
    ce7a:	ldr	r0, [pc, #224]	; (cf5c <FatFile::getName(char*, unsigned int)+0x228>)
    ce7c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ce80:	movs	r0, #46	; 0x2e
    ce82:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ce86:	movs	r1, #135	; 0x87
    ce88:	ldr	r0, [pc, #212]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    ce8a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ce8e:	ldr	r0, [pc, #208]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    ce90:	bl	11800 <Print::println()>
    ce94:	b.n	cd7a <FatFile::getName(char*, unsigned int)+0x46>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ce96:	movs	r1, #10
    ce98:	ldr	r0, [pc, #188]	; (cf58 <FatFile::getName(char*, unsigned int)+0x224>)
    ce9a:	bl	fe48 <usb_serial_write>
    ce9e:	movs	r1, #102	; 0x66
    cea0:	ldr	r0, [pc, #184]	; (cf5c <FatFile::getName(char*, unsigned int)+0x228>)
    cea2:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cea6:	movs	r0, #46	; 0x2e
    cea8:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ceac:	movs	r1, #140	; 0x8c
    ceae:	ldr	r0, [pc, #176]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    ceb0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ceb4:	ldr	r0, [pc, #168]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    ceb6:	bl	11800 <Print::println()>
    ceba:	b.n	cd7a <FatFile::getName(char*, unsigned int)+0x46>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cebc:	movs	r1, #10
    cebe:	ldr	r0, [pc, #152]	; (cf58 <FatFile::getName(char*, unsigned int)+0x224>)
    cec0:	bl	fe48 <usb_serial_write>
    cec4:	movs	r1, #102	; 0x66
    cec6:	ldr	r0, [pc, #148]	; (cf5c <FatFile::getName(char*, unsigned int)+0x228>)
    cec8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cecc:	movs	r0, #46	; 0x2e
    cece:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    ced2:	movs	r1, #145	; 0x91
    ced4:	ldr	r0, [pc, #136]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    ced6:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    ceda:	ldr	r0, [pc, #132]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cedc:	bl	11800 <Print::println()>
    cee0:	b.n	cd7a <FatFile::getName(char*, unsigned int)+0x46>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cee2:	movs	r1, #10
    cee4:	ldr	r0, [pc, #112]	; (cf58 <FatFile::getName(char*, unsigned int)+0x224>)
    cee6:	bl	fe48 <usb_serial_write>
    ceea:	movs	r1, #102	; 0x66
    ceec:	ldr	r0, [pc, #108]	; (cf5c <FatFile::getName(char*, unsigned int)+0x228>)
    ceee:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cef2:	movs	r0, #46	; 0x2e
    cef4:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    cef8:	movs	r1, #149	; 0x95
    cefa:	ldr	r0, [pc, #100]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cefc:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    cf00:	ldr	r0, [pc, #92]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cf02:	bl	11800 <Print::println()>
    cf06:	b.n	cd7a <FatFile::getName(char*, unsigned int)+0x46>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cf08:	movs	r1, #10
    cf0a:	ldr	r0, [pc, #76]	; (cf58 <FatFile::getName(char*, unsigned int)+0x224>)
    cf0c:	bl	fe48 <usb_serial_write>
    cf10:	movs	r1, #102	; 0x66
    cf12:	ldr	r0, [pc, #72]	; (cf5c <FatFile::getName(char*, unsigned int)+0x228>)
    cf14:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cf18:	movs	r0, #46	; 0x2e
    cf1a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    cf1e:	movs	r1, #153	; 0x99
    cf20:	ldr	r0, [pc, #60]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cf22:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    cf26:	ldr	r0, [pc, #56]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cf28:	bl	11800 <Print::println()>
    cf2c:	b.n	cd7a <FatFile::getName(char*, unsigned int)+0x46>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cf2e:	movs	r1, #10
    cf30:	ldr	r0, [pc, #36]	; (cf58 <FatFile::getName(char*, unsigned int)+0x224>)
    cf32:	bl	fe48 <usb_serial_write>
    cf36:	movs	r1, #102	; 0x66
    cf38:	ldr	r0, [pc, #32]	; (cf5c <FatFile::getName(char*, unsigned int)+0x228>)
    cf3a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cf3e:	movs	r0, #46	; 0x2e
    cf40:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    cf44:	movs	r1, #158	; 0x9e
    cf46:	ldr	r0, [pc, #24]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cf48:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    cf4c:	ldr	r0, [pc, #16]	; (cf60 <FatFile::getName(char*, unsigned int)+0x22c>)
    cf4e:	bl	11800 <Print::println()>
    cf52:	b.n	cd7a <FatFile::getName(char*, unsigned int)+0x46>
    cf54:	mov	r0, fp
    cf56:	b.n	cd80 <FatFile::getName(char*, unsigned int)+0x4c>
    cf58:	.word	0x00016f6c
    cf5c:	.word	0x000172e0
    cf60:	.word	0x1fff0b00

0000cf64 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    cf64:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    cf68:	ldrb	r3, [r0, #0]
    cf6a:	cmp	r3, #32
    cf6c:	bne.n	cf76 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    cf6e:	ldrb.w	r3, [r0, #1]!
    cf72:	cmp	r3, #32
    cf74:	beq.n	cf6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    cf76:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    cf78:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    cf7a:	cmp	r3, #0
    cf7c:	beq.w	d1de <FatFile::parsePathName(char const*, fname_t*, char const**)+0x27a>
    cf80:	cmp	r3, #47	; 0x2f
    cf82:	beq.n	d004 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    cf84:	cmp	r3, #92	; 0x5c
    cf86:	beq.n	cfce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    cf88:	sub.w	r4, r3, #34	; 0x22
    cf8c:	uxtb	r4, r4
    cf8e:	cmp	r4, #29
    cf90:	bls.n	cff8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x94>
    cf92:	ldr.w	lr, [pc, #628]	; d208 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2a4>
    cf96:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    cf98:	movs	r4, #0
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    cf9a:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    cf9c:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    cfa0:	mov	r7, r6
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    cfa2:	beq.n	cfce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    cfa4:	cmp	r5, #94	; 0x5e
    cfa6:	bhi.n	cfce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    cfa8:	ldrb.w	r3, [r6], #1
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    cfac:	sub.w	r5, r3, #34	; 0x22
    cfb0:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    cfb2:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    cfb4:	cmp	r3, #0
    cfb6:	beq.w	d17e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
    cfba:	cmp	r3, #47	; 0x2f
    cfbc:	beq.n	d006 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    cfbe:	cmp	r3, #92	; 0x5c
    cfc0:	lsr.w	r7, lr, r5
    cfc4:	beq.n	cfce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    cfc6:	cmp	r5, #29
    cfc8:	bhi.n	cf9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    cfca:	lsls	r7, r7, #31
    cfcc:	bpl.n	cf9a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cfce:	movs	r1, #10
    cfd0:	ldr	r0, [pc, #552]	; (d1fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x298>)
    cfd2:	bl	fe48 <usb_serial_write>
    cfd6:	movs	r1, #102	; 0x66
    cfd8:	ldr	r0, [pc, #548]	; (d200 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x29c>)
    cfda:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cfde:	movs	r0, #46	; 0x2e
    cfe0:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    cfe4:	movs	r1, #211	; 0xd3
    cfe6:	ldr	r0, [pc, #540]	; (d204 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2a0>)
    cfe8:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    cfec:	ldr	r0, [pc, #532]	; (d204 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2a0>)
    cfee:	bl	11800 <Print::println()>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    cff2:	movs	r0, #0
    cff4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    cff8:	ldr	r5, [pc, #524]	; (d208 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2a4>)
    cffa:	lsr.w	r4, r5, r4
    cffe:	lsls	r4, r4, #31
    d000:	bpl.n	cf92 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    d002:	b.n	cfce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    d004:	movs	r4, #0
    d006:	adds	r7, r0, r4
    d008:	mov	r6, r7
    d00a:	mov	r5, r4
    d00c:	movs	r3, #47	; 0x2f
    d00e:	b.n	d016 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
    d010:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    d014:	adds	r5, #1
    d016:	cmp	r3, #32
    d018:	beq.n	d010 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
    d01a:	cmp	r3, #47	; 0x2f
    d01c:	beq.n	d010 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
  *ptr = &path[end];
    d01e:	add	r5, r0
    d020:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    d022:	cbz	r4, d038 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    d024:	mov	r2, r7
    c = path[len - 1];
    d026:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    d02a:	cmp	r3, #46	; 0x2e
    d02c:	beq.n	d034 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd0>
    d02e:	cmp	r3, #32
    d030:	bne.w	d184 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x220>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    d034:	subs	r4, #1
    d036:	bne.n	d026 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc2>
    d038:	mov.w	r5, #4294967295
    d03c:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    d03e:	str	r3, [r1, #4]
    d040:	add.w	r6, r1, #23
    d044:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    d048:	movs	r2, #32
    d04a:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    d04e:	cmp	r3, r6
    d050:	bne.n	d04a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
    d052:	subs	r6, r0, #1
    d054:	movs	r2, #0
    d056:	b.n	d05a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    d058:	adds	r2, #1
    d05a:	ldrb.w	r3, [r6, #1]!
    d05e:	cmp	r3, #46	; 0x2e
    d060:	beq.n	d058 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf4>
    d062:	cmp	r3, #32
    d064:	beq.n	d058 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    d066:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    d06a:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    d06c:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    d070:	beq.n	d08c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x128>
    d072:	ldrb	r7, [r0, r5]
    d074:	cmp	r7, #46	; 0x2e
    d076:	add.w	r6, r0, r5
    d07a:	bne.n	d086 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x122>
    d07c:	b.n	d08c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x128>
    d07e:	ldrb.w	r7, [r6, #-1]!
    d082:	cmp	r7, #46	; 0x2e
    d084:	beq.n	d08c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x128>
    d086:	adds.w	r5, r5, #4294967295
    d08a:	bcs.n	d07e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11a>
  for (; si < len; si++) {
    d08c:	cmp	r2, r4
    d08e:	mov.w	r9, #0
    d092:	bge.w	d1e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x284>
    d096:	mov	r6, r9
    d098:	mov	sl, r9
    d09a:	movs	r7, #7
    d09c:	mov.w	r8, #8
    d0a0:	b.n	d0ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x18a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    d0a2:	cmp	r3, #46	; 0x2e
    d0a4:	beq.n	d134 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d0>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    d0a6:	cmp	r3, #34	; 0x22
    d0a8:	beq.n	d0c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15e>
    d0aa:	cmp	r3, #124	; 0x7c
    d0ac:	beq.n	d0c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    d0ae:	sub.w	lr, r3, #42	; 0x2a
    d0b2:	cmp.w	lr, #5
    d0b6:	bls.n	d148 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1e4>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    d0b8:	sub.w	lr, r3, #58	; 0x3a
    d0bc:	cmp.w	lr, #5
    d0c0:	bhi.n	d172 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    d0c2:	cmp	r5, r2
    d0c4:	beq.n	d138 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d4>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    d0c6:	cmp	r6, r7
    d0c8:	bhi.n	d11c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b8>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    d0ca:	mov.w	ip, #0
      c = '_';
    d0ce:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    d0d0:	add.w	lr, r6, #1
    d0d4:	add.w	fp, r1, r6
    d0d8:	uxtb.w	r6, lr
      if (i < 7) {
    d0dc:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    d0de:	strb.w	r3, [fp, #13]
      if (i < 7) {
    d0e2:	bhi.n	d0e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x182>
        fname->seqPos = i;
    d0e4:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    d0e6:	adds	r2, #1
    d0e8:	cmp	r4, r2
    d0ea:	ble.n	d0fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x198>
    d0ec:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    d0ee:	cmp	r3, #32
    d0f0:	bne.n	d0a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    d0f2:	adds	r2, #1
    d0f4:	cmp	r4, r2
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    d0f6:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    d0fa:	bgt.n	d0ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    d0fc:	ldrb	r3, [r1, #13]
    d0fe:	cmp	r3, #32
    d100:	beq.n	d1bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x258>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    d102:	cmp.w	ip, #0
    d106:	beq.n	d1a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x23e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    d108:	tst.w	r9, sl
    d10c:	it	ne
    d10e:	movne.w	r9, #2
    d112:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    d116:	movs	r0, #1
    d118:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    d11c:	cmp	r7, #10
    d11e:	beq.n	d1b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x252>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    d120:	cmp	r5, r2
    d122:	blt.n	d1b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x252>
    d124:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    d126:	movs	r7, #10
      i = 8;    // Place for extension.
    d128:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    d12a:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    d12e:	mov.w	ip, #0
    d132:	b.n	d0e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x182>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    d134:	cmp	r5, r2
    d136:	bne.n	d0f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x18e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    d138:	cmp	r7, #10
    d13a:	beq.n	d1b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x252>
    d13c:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    d13e:	movs	r7, #10
      i = 8;    // Place for extension.
    d140:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    d142:	mov.w	r8, #16
    d146:	b.n	d0e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x182>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    d148:	cmp	r3, #45	; 0x2d
    d14a:	bne.n	d0c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    d14c:	sub.w	lr, r3, #33	; 0x21
    d150:	cmp.w	lr, #93	; 0x5d
    d154:	bhi.n	d0c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    d156:	cmp	r5, r2
    d158:	beq.n	d138 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d4>
    d15a:	cmp	r6, r7
    d15c:	bhi.n	d11c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b8>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    d15e:	sub.w	lr, r3, #97	; 0x61
    d162:	cmp.w	lr, #25
    d166:	bhi.n	d1ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x288>
        c += 'A' - 'a';
    d168:	subs	r3, #32
    d16a:	uxtb	r3, r3
        lc |= bit;
    d16c:	orr.w	r9, r9, r8
    d170:	b.n	d0d0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    d172:	sub.w	lr, r3, #91	; 0x5b
    d176:	cmp.w	lr, #2
    d17a:	bls.n	d0c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15e>
    d17c:	b.n	d14c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1e8>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    d17e:	str	r7, [r2, #0]
    d180:	adds	r7, r0, r4
    d182:	b.n	d024 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    d184:	cmp	r4, #255	; 0xff
    d186:	ble.n	d1d8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x274>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d188:	movs	r1, #10
    d18a:	ldr	r0, [pc, #112]	; (d1fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x298>)
    d18c:	bl	fe48 <usb_serial_write>
    d190:	movs	r1, #102	; 0x66
    d192:	ldr	r0, [pc, #108]	; (d200 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x29c>)
    d194:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d198:	movs	r0, #46	; 0x2e
    d19a:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d19e:	movs	r1, #229	; 0xe5
    d1a0:	b.n	cfe6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    d1a2:	ldrb	r3, [r1, #12]
    d1a4:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    d1a6:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    d1a8:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    d1aa:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    d1ac:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    d1ae:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    d1b0:	strb	r2, [r3, #14]
    d1b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    d1b6:	ldrb	r3, [r1, #13]
    d1b8:	cmp	r3, #32
    d1ba:	bne.n	d1a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x23e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d1bc:	movs	r1, #10
    d1be:	ldr	r0, [pc, #60]	; (d1fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x298>)
    d1c0:	bl	fe48 <usb_serial_write>
    d1c4:	movs	r1, #102	; 0x66
    d1c6:	ldr	r0, [pc, #56]	; (d200 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x29c>)
    d1c8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d1cc:	movs	r0, #46	; 0x2e
    d1ce:	bl	ff50 <usb_serial_putchar>
    d1d2:	movw	r1, #285	; 0x11d
    d1d6:	b.n	cfe6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
    d1d8:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    d1da:	mov	r3, r4
    d1dc:	b.n	d03e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xda>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    d1de:	str	r0, [r2, #0]
    d1e0:	mov	r4, r3
    d1e2:	mov.w	r5, #4294967295
    d1e6:	b.n	d03e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xda>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    d1e8:	mov	sl, r9
    d1ea:	b.n	d0fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x198>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    d1ec:	sub.w	lr, r3, #65	; 0x41
    d1f0:	cmp.w	lr, #25
        uc |= bit;
    d1f4:	it	ls
    d1f6:	orrls.w	sl, r8, sl
    d1fa:	b.n	d0d0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16c>
    d1fc:	.word	0x00016f6c
    d200:	.word	0x000172e0
    d204:	.word	0x1fff0b00
    d208:	.word	0x35000101

0000d20c <FatFile::printName(Print*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printName(print_t* pr) {
    d20c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d210:	sub	sp, #56	; 0x38
  size_t n = 0;
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
    d212:	ldrb	r3, [r0, #3]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    d214:	movs	r7, #0
    d216:	strb.w	r7, [sp, #20]
    d21a:	strb.w	r7, [sp, #21]
    d21e:	strb.w	r7, [sp, #22]
    d222:	cmp	r3, #0
    d224:	beq.n	d2c6 <FatFile::printName(Print*)+0xba>
    d226:	mov	r5, r0
    d228:	mov	r6, r1
    return printSFN(pr);
  }
  if (!dirFile.openCluster(this)) {
    d22a:	add	r0, sp, #20
    d22c:	mov	r1, r5
    d22e:	bl	cd04 <FatFile::openCluster(FatFile*)>
    d232:	mov	r4, r0
    d234:	cmp	r0, #0
    d236:	beq.n	d2d0 <FatFile::printName(Print*)+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    d238:	ldrb	r4, [r5, #3]
    d23a:	cmp	r4, #0
    d23c:	beq.n	d2ba <FatFile::printName(Print*)+0xae>
    d23e:	mov.w	r8, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    d242:	ldrh	r1, [r5, #4]
    d244:	rsb	r1, r8, r1
    d248:	lsls	r1, r1, #5
    d24a:	add	r0, sp, #20
    d24c:	bl	b288 <FatFile::seekSet(unsigned long)>
    d250:	mov	r4, r0
    d252:	cmp	r0, #0
    d254:	beq.n	d32c <FatFile::printName(Print*)+0x120>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    d256:	movs	r1, #0
    d258:	add	r0, sp, #20
    d25a:	bl	b210 <FatFile::readDirCache(bool)>
    if (!ldir) {
    d25e:	mov	r9, r0
    d260:	cmp	r0, #0
    d262:	beq.n	d348 <FatFile::printName(Print*)+0x13c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    d264:	ldrb	r3, [r0, #11]
    d266:	cmp	r3, #15
    d268:	bne.n	d2fe <FatFile::printName(Print*)+0xf2>
    d26a:	ldrb	r3, [r0, #0]
    d26c:	and.w	r3, r3, #31
    d270:	cmp	r8, r3
    d272:	bne.n	d2fe <FatFile::printName(Print*)+0xf2>
    d274:	add	r3, sp, #4
    d276:	add.w	sl, r7, #13
    d27a:	mov	r4, r7
    d27c:	subs	r2, r4, r7
    d27e:	uxtb	r2, r2
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
    d280:	mov	r1, r2
    d282:	mov	r0, r9
    d284:	bl	ccb8 <lfnGetChar(DirLfn_t*, unsigned char)>
      if (u == 0) {
    d288:	cbz	r0, d2c2 <FatFile::printName(Print*)+0xb6>
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    d28a:	cmp	r0, #126	; 0x7e
      n++;
    d28c:	add.w	r4, r4, #1
      u = lfnGetChar(ldir, i);
      if (u == 0) {
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    d290:	ite	ls
    d292:	uxtbls	r0, r0
    d294:	movhi	r0, #63	; 0x3f
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
    d296:	cmp	r4, sl
      u = lfnGetChar(ldir, i);
      if (u == 0) {
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    d298:	strb.w	r0, [r3], #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
    d29c:	bne.n	d27c <FatFile::printName(Print*)+0x70>
    d29e:	mov	r7, r4
    d2a0:	movs	r2, #13
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
      n++;
    }
    pr->write(buf, i);
    d2a2:	ldr	r3, [r6, #0]
    d2a4:	add	r1, sp, #4
    d2a6:	ldr	r3, [r3, #4]
    d2a8:	mov	r0, r6
    d2aa:	blx	r3
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    d2ac:	add.w	r8, r8, #1
    d2b0:	ldrb	r3, [r5, #3]
    d2b2:	uxtb.w	r8, r8
    d2b6:	cmp	r3, r8
    d2b8:	bcs.n	d242 <FatFile::printName(Print*)+0x36>
    d2ba:	mov	r0, r4
  }
  return n;

 fail:
  return 0;
}
    d2bc:	add	sp, #56	; 0x38
    d2be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
      if (u == 0) {
    d2c2:	mov	r7, r4
    d2c4:	b.n	d2a2 <FatFile::printName(Print*)+0x96>
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
    return printSFN(pr);
    d2c6:	bl	dd44 <FatFile::printSFN(Print*)>
  }
  return n;

 fail:
  return 0;
}
    d2ca:	add	sp, #56	; 0x38
    d2cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d2d0:	movs	r1, #10
    d2d2:	ldr	r0, [pc, #164]	; (d378 <FatFile::printName(Print*)+0x16c>)
    d2d4:	bl	fe48 <usb_serial_write>
    d2d8:	movs	r1, #102	; 0x66
    d2da:	ldr	r0, [pc, #160]	; (d37c <FatFile::printName(Print*)+0x170>)
    d2dc:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d2e0:	movs	r0, #46	; 0x2e
    d2e2:	bl	ff50 <usb_serial_putchar>
    d2e6:	movw	r1, #530	; 0x212
    d2ea:	ldr	r0, [pc, #148]	; (d380 <FatFile::printName(Print*)+0x174>)
    d2ec:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d2f0:	ldr	r0, [pc, #140]	; (d380 <FatFile::printName(Print*)+0x174>)
    d2f2:	bl	11800 <Print::println()>
    pr->write(buf, i);
  }
  return n;

 fail:
  return 0;
    d2f6:	mov	r0, r4
}
    d2f8:	add	sp, #56	; 0x38
    d2fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d2fe:	movs	r1, #10
    d300:	ldr	r0, [pc, #116]	; (d378 <FatFile::printName(Print*)+0x16c>)
    d302:	bl	fe48 <usb_serial_write>
    d306:	movs	r1, #102	; 0x66
    d308:	ldr	r0, [pc, #112]	; (d37c <FatFile::printName(Print*)+0x170>)
    d30a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d30e:	movs	r0, #46	; 0x2e
    d310:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d314:	movw	r1, #545	; 0x221
    d318:	ldr	r0, [pc, #100]	; (d380 <FatFile::printName(Print*)+0x174>)
    d31a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d31e:	ldr	r0, [pc, #96]	; (d380 <FatFile::printName(Print*)+0x174>)
    d320:	bl	11800 <Print::println()>
    pr->write(buf, i);
  }
  return n;

 fail:
  return 0;
    d324:	movs	r0, #0
}
    d326:	add	sp, #56	; 0x38
    d328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d32c:	movs	r1, #10
    d32e:	ldr	r0, [pc, #72]	; (d378 <FatFile::printName(Print*)+0x16c>)
    d330:	bl	fe48 <usb_serial_write>
    d334:	movs	r1, #102	; 0x66
    d336:	ldr	r0, [pc, #68]	; (d37c <FatFile::printName(Print*)+0x170>)
    d338:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d33c:	movs	r0, #46	; 0x2e
    d33e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d342:	movw	r1, #535	; 0x217
    d346:	b.n	d2ea <FatFile::printName(Print*)+0xde>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d348:	movs	r1, #10
    d34a:	ldr	r0, [pc, #44]	; (d378 <FatFile::printName(Print*)+0x16c>)
    d34c:	bl	fe48 <usb_serial_write>
    d350:	movs	r1, #102	; 0x66
    d352:	ldr	r0, [pc, #40]	; (d37c <FatFile::printName(Print*)+0x170>)
    d354:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d358:	movs	r0, #46	; 0x2e
    d35a:	bl	ff50 <usb_serial_putchar>
    d35e:	mov.w	r1, #540	; 0x21c
    d362:	ldr	r0, [pc, #28]	; (d380 <FatFile::printName(Print*)+0x174>)
    d364:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d368:	ldr	r0, [pc, #20]	; (d380 <FatFile::printName(Print*)+0x174>)
    d36a:	bl	11800 <Print::println()>
    pr->write(buf, i);
  }
  return n;

 fail:
  return 0;
    d36e:	mov	r0, r9
}
    d370:	add	sp, #56	; 0x38
    d372:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d376:	nop
    d378:	.word	0x00016f6c
    d37c:	.word	0x000172e0
    d380:	.word	0x1fff0b00

0000d384 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    d384:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    d388:	ldrb	r3, [r0, #2]

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    d38a:	sub	sp, #44	; 0x2c
    d38c:	movs	r2, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    d38e:	and.w	r3, r3, #2
    d392:	strb.w	r2, [sp, #4]
    d396:	strb.w	r2, [sp, #5]
    d39a:	strb.w	r2, [sp, #6]
    d39e:	cmp	r3, #0
    d3a0:	beq.n	d45c <FatFile::remove()+0xd8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    d3a2:	ldr	r1, [r0, #32]
    d3a4:	mov	r6, r0
    d3a6:	cmp	r1, #0
    d3a8:	bne.n	d422 <FatFile::remove()+0x9e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    d3aa:	movs	r1, #1
    d3ac:	mov	r0, r6
    d3ae:	bl	aad4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    d3b2:	mov	r7, r0
    d3b4:	cmp	r0, #0
    d3b6:	beq.w	d584 <FatFile::remove()+0x200>
    d3ba:	subs	r1, r7, #1
    d3bc:	add.w	r0, r7, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    d3c0:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    d3c2:	lsrs	r2, r4, #1
    d3c4:	ldrb.w	r5, [r1, #1]!
    d3c8:	orr.w	r3, r2, r4, lsl #7
    d3cc:	uxtab	r3, r5, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    d3d0:	cmp	r1, r0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    d3d2:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    d3d4:	bne.n	d3c2 <FatFile::remove()+0x3e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    d3d6:	mov.w	r9, #229	; 0xe5
    d3da:	strb.w	r9, [r7]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    d3de:	ldr	r5, [r6, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    d3e0:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    d3e2:	add.w	r0, r5, #36	; 0x24
    d3e6:	strb	r3, [r6, #0]
  m_flags = 0;
    d3e8:	strb	r3, [r6, #2]
    d3ea:	bl	7c04 <FsCache::sync()>
    d3ee:	cmp	r0, #0
    d3f0:	bne.n	d48e <FatFile::remove()+0x10a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d3f2:	movs	r1, #10
    d3f4:	ldr	r0, [pc, #548]	; (d61c <FatFile::remove()+0x298>)
    d3f6:	bl	fe48 <usb_serial_write>
    d3fa:	movs	r1, #102	; 0x66
    d3fc:	ldr	r0, [pc, #544]	; (d620 <FatFile::remove()+0x29c>)
    d3fe:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d402:	movs	r0, #46	; 0x2e
    d404:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d408:	movw	r1, #599	; 0x257
    d40c:	ldr	r0, [pc, #532]	; (d624 <FatFile::remove()+0x2a0>)
    d40e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d412:	ldr	r0, [pc, #528]	; (d624 <FatFile::remove()+0x2a0>)
    d414:	bl	11800 <Print::println()>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    d418:	movs	r5, #0
}
    d41a:	mov	r0, r5
    d41c:	add	sp, #44	; 0x2c
    d41e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    d422:	ldr	r0, [r0, #8]
    d424:	bl	c950 <FatPartition::freeChain(unsigned long)>
    d428:	mov	r5, r0
    d42a:	cmp	r0, #0
    d42c:	bne.n	d3aa <FatFile::remove()+0x26>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d42e:	movs	r1, #10
    d430:	ldr	r0, [pc, #488]	; (d61c <FatFile::remove()+0x298>)
    d432:	bl	fe48 <usb_serial_write>
    d436:	movs	r1, #102	; 0x66
    d438:	ldr	r0, [pc, #484]	; (d620 <FatFile::remove()+0x29c>)
    d43a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d43e:	movs	r0, #46	; 0x2e
    d440:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d444:	movw	r1, #579	; 0x243
    d448:	ldr	r0, [pc, #472]	; (d624 <FatFile::remove()+0x2a0>)
    d44a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d44e:	ldr	r0, [pc, #468]	; (d624 <FatFile::remove()+0x2a0>)
    d450:	bl	11800 <Print::println()>
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
}
    d454:	mov	r0, r5
    d456:	add	sp, #44	; 0x2c
    d458:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d45c:	movs	r1, #10
    d45e:	ldr	r0, [pc, #444]	; (d61c <FatFile::remove()+0x298>)
    d460:	and.w	r5, r3, #255	; 0xff
    d464:	bl	fe48 <usb_serial_write>
    d468:	movs	r1, #102	; 0x66
    d46a:	ldr	r0, [pc, #436]	; (d620 <FatFile::remove()+0x29c>)
    d46c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d470:	movs	r0, #46	; 0x2e
    d472:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d476:	movw	r1, #574	; 0x23e
    d47a:	ldr	r0, [pc, #424]	; (d624 <FatFile::remove()+0x2a0>)
    d47c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d480:	ldr	r0, [pc, #416]	; (d624 <FatFile::remove()+0x2a0>)
    d482:	bl	11800 <Print::println()>
    d486:	mov	r0, r5
    d488:	add	sp, #44	; 0x2c
    d48a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d48e:	add.w	r0, r5, #564	; 0x234
    d492:	bl	7c04 <FsCache::sync()>
    d496:	cmp	r0, #0
    d498:	beq.n	d3f2 <FatFile::remove()+0x6e>
    d49a:	ldr	r0, [r5, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    d49c:	ldr	r3, [r0, #0]
    d49e:	ldr	r3, [r3, #24]
    d4a0:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    d4a2:	mov	r5, r0
    d4a4:	cmp	r0, #0
    d4a6:	beq.n	d3f2 <FatFile::remove()+0x6e>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    d4a8:	ldrb	r3, [r6, #3]
    d4aa:	cmp	r3, #0
    d4ac:	beq.n	d41a <FatFile::remove()+0x96>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    d4ae:	add	r0, sp, #4
    d4b0:	mov	r1, r6
    d4b2:	bl	cd04 <FatFile::openCluster(FatFile*)>
    d4b6:	mov	r7, r0
    d4b8:	cmp	r0, #0
    d4ba:	beq.n	d568 <FatFile::remove()+0x1e4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    d4bc:	ldrb	r3, [r6, #3]
    d4be:	mov.w	r8, #1
    d4c2:	cbnz	r3, d50c <FatFile::remove()+0x188>
    d4c4:	b.n	d5a0 <FatFile::remove()+0x21c>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    d4c6:	add	r0, sp, #4
    d4c8:	bl	b210 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    d4cc:	add.w	r3, r8, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    d4d0:	mov	r7, r0
    d4d2:	cmp	r0, #0
    d4d4:	beq.n	d5bc <FatFile::remove()+0x238>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    d4d6:	ldrb	r2, [r0, #11]
    d4d8:	cmp	r2, #15
    d4da:	bne.n	d54c <FatFile::remove()+0x1c8>
        order != (ldir->order & 0X1F) ||
    d4dc:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    d4de:	and.w	r1, r2, #31
    d4e2:	cmp	r8, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    d4e4:	uxtb.w	r8, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    d4e8:	bne.n	d54c <FatFile::remove()+0x1c8>
        order != (ldir->order & 0X1F) ||
    d4ea:	ldrb	r3, [r0, #13]
    d4ec:	cmp	r3, r4
    d4ee:	bne.n	d54c <FatFile::remove()+0x1c8>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    d4f0:	strb.w	r9, [r0]
    m_vol->cacheDirty();
    d4f4:	ldr	r1, [r6, #8]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    d4f6:	ldrb.w	r3, [r1, #36]	; 0x24
    d4fa:	orr.w	r3, r3, #1
    d4fe:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    d502:	lsls	r3, r2, #25
    d504:	bmi.n	d5d8 <FatFile::remove()+0x254>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    d506:	ldrb	r3, [r6, #3]
    d508:	cmp	r3, r8
    d50a:	bcc.n	d5a0 <FatFile::remove()+0x21c>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    d50c:	ldrh	r1, [r6, #4]
    d50e:	rsb	r1, r8, r1
    d512:	lsls	r1, r1, #5
    d514:	add	r0, sp, #4
    d516:	bl	b288 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    d51a:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    d51c:	mov	r7, r0
    d51e:	cmp	r0, #0
    d520:	bne.n	d4c6 <FatFile::remove()+0x142>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d522:	movs	r1, #10
    d524:	ldr	r0, [pc, #244]	; (d61c <FatFile::remove()+0x298>)
    d526:	bl	fe48 <usb_serial_write>
    d52a:	movs	r1, #102	; 0x66
    d52c:	ldr	r0, [pc, #240]	; (d620 <FatFile::remove()+0x29c>)
    d52e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d532:	movs	r0, #46	; 0x2e
    d534:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d538:	mov.w	r1, #612	; 0x264
    d53c:	ldr	r0, [pc, #228]	; (d624 <FatFile::remove()+0x2a0>)
    d53e:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d542:	ldr	r0, [pc, #224]	; (d624 <FatFile::remove()+0x2a0>)
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    d544:	mov	r5, r7
    d546:	bl	11800 <Print::println()>
    d54a:	b.n	d41a <FatFile::remove()+0x96>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d54c:	movs	r1, #10
    d54e:	ldr	r0, [pc, #204]	; (d61c <FatFile::remove()+0x298>)
    d550:	bl	fe48 <usb_serial_write>
    d554:	movs	r1, #102	; 0x66
    d556:	ldr	r0, [pc, #200]	; (d620 <FatFile::remove()+0x29c>)
    d558:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d55c:	movs	r0, #46	; 0x2e
    d55e:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d562:	movw	r1, #623	; 0x26f
    d566:	b.n	d40c <FatFile::remove()+0x88>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d568:	movs	r1, #10
    d56a:	ldr	r0, [pc, #176]	; (d61c <FatFile::remove()+0x298>)
    d56c:	bl	fe48 <usb_serial_write>
    d570:	movs	r1, #102	; 0x66
    d572:	ldr	r0, [pc, #172]	; (d620 <FatFile::remove()+0x29c>)
    d574:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d578:	movs	r0, #46	; 0x2e
    d57a:	bl	ff50 <usb_serial_putchar>
    d57e:	movw	r1, #607	; 0x25f
    d582:	b.n	d53c <FatFile::remove()+0x1b8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d584:	movs	r1, #10
    d586:	ldr	r0, [pc, #148]	; (d61c <FatFile::remove()+0x298>)
    d588:	bl	fe48 <usb_serial_write>
    d58c:	movs	r1, #102	; 0x66
    d58e:	ldr	r0, [pc, #144]	; (d620 <FatFile::remove()+0x29c>)
    d590:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d594:	movs	r0, #46	; 0x2e
    d596:	bl	ff50 <usb_serial_putchar>
    d59a:	movw	r1, #585	; 0x249
    d59e:	b.n	d53c <FatFile::remove()+0x1b8>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d5a0:	movs	r1, #10
    d5a2:	ldr	r0, [pc, #120]	; (d61c <FatFile::remove()+0x298>)
    d5a4:	bl	fe48 <usb_serial_write>
    d5a8:	movs	r1, #102	; 0x66
    d5aa:	ldr	r0, [pc, #116]	; (d620 <FatFile::remove()+0x29c>)
    d5ac:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d5b0:	movs	r0, #46	; 0x2e
    d5b2:	bl	ff50 <usb_serial_putchar>
    d5b6:	movw	r1, #638	; 0x27e
    d5ba:	b.n	d40c <FatFile::remove()+0x88>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d5bc:	movs	r1, #10
    d5be:	ldr	r0, [pc, #92]	; (d61c <FatFile::remove()+0x298>)
    d5c0:	bl	fe48 <usb_serial_write>
    d5c4:	movs	r1, #102	; 0x66
    d5c6:	ldr	r0, [pc, #88]	; (d620 <FatFile::remove()+0x29c>)
    d5c8:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d5cc:	movs	r0, #46	; 0x2e
    d5ce:	bl	ff50 <usb_serial_putchar>
    d5d2:	movw	r1, #617	; 0x269
    d5d6:	b.n	d53c <FatFile::remove()+0x1b8>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    d5d8:	ldr	r4, [r6, #8]
    d5da:	add.w	r0, r4, #36	; 0x24
    d5de:	bl	7c04 <FsCache::sync()>
    d5e2:	cbnz	r0, d600 <FatFile::remove()+0x27c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d5e4:	movs	r1, #10
    d5e6:	ldr	r0, [pc, #52]	; (d61c <FatFile::remove()+0x298>)
    d5e8:	bl	fe48 <usb_serial_write>
    d5ec:	movs	r1, #102	; 0x66
    d5ee:	ldr	r0, [pc, #48]	; (d620 <FatFile::remove()+0x29c>)
    d5f0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d5f4:	movs	r0, #46	; 0x2e
    d5f6:	bl	ff50 <usb_serial_putchar>
    d5fa:	movw	r1, #631	; 0x277
    d5fe:	b.n	d40c <FatFile::remove()+0x88>
    d600:	add.w	r0, r4, #564	; 0x234
    d604:	bl	7c04 <FsCache::sync()>
    d608:	cmp	r0, #0
    d60a:	beq.n	d5e4 <FatFile::remove()+0x260>
    d60c:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    d60e:	ldr	r3, [r0, #0]
    d610:	ldr	r3, [r3, #24]
    d612:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    d614:	cmp	r0, #0
    d616:	beq.n	d5e4 <FatFile::remove()+0x260>
    d618:	b.n	d41a <FatFile::remove()+0x96>
    d61a:	nop
    d61c:	.word	0x00016f6c
    d620:	.word	0x000172e0
    d624:	.word	0x1fff0b00

0000d628 <FatFile::lfnUniqueSfn(fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    d628:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    d62c:	ldrb.w	r8, [r1, #12]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    d630:	mov	r7, r1
    d632:	mov	r5, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    d634:	add.w	r6, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    d638:	mov.w	r9, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    d63c:	mov.w	sl, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    d640:	ldr	r0, [r7, #4]
    d642:	ldr	r1, [r7, #8]
    d644:	add.w	r3, r9, r0
    d648:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    d64a:	cbz	r0, d65e <FatFile::lfnUniqueSfn(fname_t*)+0x36>
    d64c:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    d64e:	ldrb.w	r2, [r1], #1
    d652:	add.w	r3, r3, r3, lsl #5
    d656:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    d658:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    d65a:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    d65c:	bne.n	d64e <FatFile::lfnUniqueSfn(fname_t*)+0x26>
    d65e:	cmp.w	r8, #3
    d662:	it	cs
    d664:	movcs.w	r8, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    d668:	add.w	r2, r8, #4
    d66c:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    d66e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    d672:	adds	r0, r7, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    d674:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    d676:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    d678:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    d67a:	ite	ls
    d67c:	addls	r1, #48	; 0x30
    d67e:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    d680:	cmp	r2, r8
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    d682:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    d686:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    d688:	bhi.n	d66e <FatFile::lfnUniqueSfn(fname_t*)+0x46>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    d68a:	add.w	r3, r7, r8
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    d68e:	movs	r1, #0
    d690:	strb.w	sl, [r3, #13]
    d694:	mov	r0, r5
    d696:	bl	b288 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    d69a:	movs	r1, #1
    d69c:	mov	r0, r5
    d69e:	bl	b210 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    d6a2:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    d6a4:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    d6a6:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    d6a8:	cbz	r0, d6ea <FatFile::lfnUniqueSfn(fname_t*)+0xc2>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    d6aa:	ldrb	r3, [r4, #0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    d6ac:	mov	r0, r6
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    d6ae:	cbz	r3, d6ee <FatFile::lfnUniqueSfn(fname_t*)+0xc6>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    d6b0:	ldrb	r3, [r4, #11]
    d6b2:	lsls	r3, r3, #28
    d6b4:	bmi.n	d69a <FatFile::lfnUniqueSfn(fname_t*)+0x72>
    d6b6:	bl	12e20 <memcmp>
    d6ba:	mov	r4, r0
    d6bc:	cmp	r0, #0
    d6be:	bne.n	d69a <FatFile::lfnUniqueSfn(fname_t*)+0x72>
    d6c0:	add.w	r9, r9, #1
    d6c4:	uxth.w	r9, r9
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    d6c8:	cmp.w	r9, #100	; 0x64
    d6cc:	bne.n	d640 <FatFile::lfnUniqueSfn(fname_t*)+0x18>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d6ce:	movs	r1, #10
    d6d0:	ldr	r0, [pc, #76]	; (d720 <FatFile::lfnUniqueSfn(fname_t*)+0xf8>)
    d6d2:	bl	fe48 <usb_serial_write>
    d6d6:	movs	r1, #102	; 0x66
    d6d8:	ldr	r0, [pc, #72]	; (d724 <FatFile::lfnUniqueSfn(fname_t*)+0xfc>)
    d6da:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d6de:	movs	r0, #46	; 0x2e
    d6e0:	bl	ff50 <usb_serial_putchar>
    d6e4:	movw	r1, #691	; 0x2b3
    d6e8:	b.n	d70e <FatFile::lfnUniqueSfn(fname_t*)+0xe6>
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    d6ea:	ldrb	r3, [r5, #1]
    d6ec:	cbnz	r3, d6f4 <FatFile::lfnUniqueSfn(fname_t*)+0xcc>

 fail:
  return false;

 done:
  return true;
    d6ee:	movs	r0, #1
    d6f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d6f4:	movs	r1, #10
    d6f6:	ldr	r0, [pc, #40]	; (d720 <FatFile::lfnUniqueSfn(fname_t*)+0xf8>)
    d6f8:	bl	fe48 <usb_serial_write>
    d6fc:	movs	r1, #102	; 0x66
    d6fe:	ldr	r0, [pc, #36]	; (d724 <FatFile::lfnUniqueSfn(fname_t*)+0xfc>)
    d700:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d704:	movs	r0, #46	; 0x2e
    d706:	bl	ff50 <usb_serial_putchar>
    d70a:	movw	r1, #678	; 0x2a6
    d70e:	ldr	r0, [pc, #24]	; (d728 <FatFile::lfnUniqueSfn(fname_t*)+0x100>)
    d710:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d714:	ldr	r0, [pc, #16]	; (d728 <FatFile::lfnUniqueSfn(fname_t*)+0x100>)
    d716:	bl	11800 <Print::println()>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    d71a:	mov	r0, r4
    d71c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d720:	.word	0x00016f6c
    d724:	.word	0x000172e0
    d728:	.word	0x1fff0b00

0000d72c <FatFile::open(FatFile*, fname_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    d72c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d730:	mov	r7, r1
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    d732:	ldrb	r1, [r1, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    d734:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    d736:	tst.w	r1, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    d73a:	str	r0, [sp, #36]	; 0x24
    d73c:	str	r2, [sp, #12]
    d73e:	str	r3, [sp, #28]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    d740:	beq.n	d746 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    d742:	ldrb	r3, [r0, #0]
    d744:	cbz	r3, d776 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d746:	movs	r1, #10
    d748:	ldr	r0, [pc, #596]	; (d9a0 <FatFile::open(FatFile*, fname_t*, int)+0x274>)
    d74a:	bl	fe48 <usb_serial_write>
    d74e:	movs	r1, #102	; 0x66
    d750:	ldr	r0, [pc, #592]	; (d9a4 <FatFile::open(FatFile*, fname_t*, int)+0x278>)
    d752:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d756:	movs	r0, #46	; 0x2e
    d758:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d75c:	movw	r1, #319	; 0x13f
    d760:	ldr	r0, [pc, #580]	; (d9a8 <FatFile::open(FatFile*, fname_t*, int)+0x27c>)
    d762:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d766:	ldr	r0, [pc, #576]	; (d9a8 <FatFile::open(FatFile*, fname_t*, int)+0x27c>)
    d768:	bl	11800 <Print::println()>
    goto fail;
  }
  return true;

 fail:
  return false;
    d76c:	movs	r4, #0
}
    d76e:	mov	r0, r4
    d770:	add	sp, #52	; 0x34
    d772:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    d776:	ldr	r2, [sp, #12]
    d778:	ldrb	r3, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    d77a:	ldr.w	r9, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    d77e:	lsls	r3, r3, #30
    d780:	bne.n	d806 <FatFile::open(FatFile*, fname_t*, int)+0xda>
    d782:	mov.w	r8, #1
    d786:	movs	r1, #0
    d788:	mov	r0, r7
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    d78a:	mov	sl, r1
    d78c:	bl	b288 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    d790:	ldr	r3, [sp, #12]
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    d792:	str.w	sl, [sp, #32]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    d796:	adds	r3, #13
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    d798:	str.w	sl, [sp, #16]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    d79c:	mov	r5, sl
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    d79e:	mov	fp, sl
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    d7a0:	str.w	sl, [sp, #24]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    d7a4:	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    d7a6:	movs	r1, #1
    d7a8:	mov	r0, r7
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    d7aa:	ldr	r6, [r7, #20]
    dir = dirFile->readDirCache(true);
    d7ac:	bl	b210 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    d7b0:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    d7b4:	mov	r4, r0
    d7b6:	cmp	r0, #0
    d7b8:	beq.w	d8d0 <FatFile::open(FatFile*, fname_t*, int)+0x1a4>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    d7bc:	ldrb	r3, [r0, #0]
    d7be:	cmp	r3, #229	; 0xe5
    d7c0:	beq.n	d838 <FatFile::open(FatFile*, fname_t*, int)+0x10c>
    d7c2:	cmp	r3, #0
    d7c4:	beq.n	d838 <FatFile::open(FatFile*, fname_t*, int)+0x10c>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    d7c6:	cmp	r5, r8
    d7c8:	it	cc
    d7ca:	movcc	r5, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    d7cc:	cmp	r3, #46	; 0x2e
    d7ce:	beq.n	d832 <FatFile::open(FatFile*, fname_t*, int)+0x106>
    d7d0:	ldrb	r2, [r4, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    d7d2:	cmp	r2, #15
    d7d4:	beq.n	d854 <FatFile::open(FatFile*, fname_t*, int)+0x128>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    d7d6:	and.w	r2, r2, #8
    d7da:	and.w	r3, r2, #255	; 0xff
    d7de:	cbnz	r2, d832 <FatFile::open(FatFile*, fname_t*, int)+0x106>
      if (lfnOrd) {
    d7e0:	cmp.w	fp, #0
    d7e4:	bne.w	dbea <FatFile::open(FatFile*, fname_t*, int)+0x4be>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    d7e8:	mov	r0, r4
    d7ea:	movs	r2, #11
    d7ec:	ldr	r1, [sp, #20]
    d7ee:	bl	12e20 <memcmp>
    d7f2:	cmp	r0, #0
    d7f4:	bne.n	d7a6 <FatFile::open(FatFile*, fname_t*, int)+0x7a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    d7f6:	ldr	r3, [sp, #12]
    d7f8:	ldrb	r3, [r3, #0]
    d7fa:	lsls	r0, r3, #31
    d7fc:	bpl.w	db9e <FatFile::open(FatFile*, fname_t*, int)+0x472>
          goto found;
        }
        fnameFound = true;
    d800:	movs	r3, #1
    d802:	str	r3, [sp, #24]
    d804:	b.n	d7a6 <FatFile::open(FatFile*, fname_t*, int)+0x7a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    d806:	ldr	r2, [pc, #420]	; (d9ac <FatFile::open(FatFile*, fname_t*, int)+0x280>)
    d808:	add.w	r3, r9, #12
    d80c:	umull	r3, r8, r2, r3
    d810:	mov.w	r8, r8, lsr #2
    d814:	add.w	r8, r8, #1
    d818:	uxtb.w	r8, r8
    d81c:	b.n	d786 <FatFile::open(FatFile*, fname_t*, int)+0x5a>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    d81e:	ldr	r2, [sp, #16]
    d820:	subs	r2, #1
    d822:	uxtb	r2, r2
    d824:	cmp	r3, r2
    d826:	str	r2, [sp, #16]
    d828:	bne.n	d832 <FatFile::open(FatFile*, fname_t*, int)+0x106>
    d82a:	ldrb	r3, [r4, #13]
    d82c:	ldr	r2, [sp, #32]
    d82e:	cmp	r2, r3
    d830:	beq.n	d86a <FatFile::open(FatFile*, fname_t*, int)+0x13e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    d832:	mov.w	fp, #0
    d836:	b.n	d7a6 <FatFile::open(FatFile*, fname_t*, int)+0x7a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    d838:	cmp	r5, #0
    d83a:	it	eq
    d83c:	moveq	sl, r6
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    d83e:	cmp	r5, r8
        freeFound++;
    d840:	itt	cc
    d842:	addcc	r5, #1
    d844:	uxtbcc	r5, r5
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    d846:	cmp	r3, #0
    d848:	beq.n	d8d8 <FatFile::open(FatFile*, fname_t*, int)+0x1ac>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    d84a:	cmp	r3, #229	; 0xe5
    d84c:	bne.n	d7cc <FatFile::open(FatFile*, fname_t*, int)+0xa0>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    d84e:	mov.w	fp, #0
    d852:	b.n	d7a6 <FatFile::open(FatFile*, fname_t*, int)+0x7a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    d854:	cmp.w	fp, #0
    d858:	bne.n	d81e <FatFile::open(FatFile*, fname_t*, int)+0xf2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    d85a:	lsls	r6, r3, #25
    d85c:	bpl.n	d7a6 <FatFile::open(FatFile*, fname_t*, int)+0x7a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    d85e:	and.w	fp, r3, #31
        checksum = ldir->checksum;
    d862:	ldrb	r3, [r4, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    d864:	str.w	fp, [sp, #16]
        checksum = ldir->checksum;
    d868:	str	r3, [sp, #32]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    d86a:	ldr	r3, [sp, #16]
    d86c:	subs	r3, #1
    d86e:	add.w	r2, r3, r3, lsl #1
    d872:	add.w	r2, r3, r2, lsl #2
      if (k >= len) {
    d876:	cmp	r9, r2
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    d878:	mov	r3, r2
      if (k >= len) {
    d87a:	bls.n	d832 <FatFile::open(FatFile*, fname_t*, int)+0x106>
    d87c:	add.w	r6, r2, #13
    d880:	b.n	d8ac <FatFile::open(FatFile*, fname_t*, int)+0x180>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    d882:	ldr	r0, [sp, #12]
    d884:	ldr	r0, [r0, #8]
    d886:	ldrb	r3, [r0, r3]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    d888:	cmp.w	ip, #25
    d88c:	it	ls
    d88e:	addls	r1, #32
    d890:	sub.w	r0, r3, #65	; 0x41
    d894:	it	ls
    d896:	uxtbls	r1, r1
    d898:	cmp	r0, #25
    d89a:	itt	ls
    d89c:	addls	r3, #32
    d89e:	uxtbls	r3, r3
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    d8a0:	cmp	r3, r1
    d8a2:	bne.n	d832 <FatFile::open(FatFile*, fname_t*, int)+0x106>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    d8a4:	cmp	lr, r6
    d8a6:	beq.w	d7a6 <FatFile::open(FatFile*, fname_t*, int)+0x7a>
    d8aa:	mov	r3, lr
        uint16_t u = lfnGetChar(ldir, i);
    d8ac:	subs	r1, r3, r2
    d8ae:	uxtb	r1, r1
    d8b0:	mov	r0, r4
    d8b2:	bl	ccb8 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    d8b6:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    d8b8:	cmp	r9, r3
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    d8ba:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    d8be:	add.w	lr, r3, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    d8c2:	beq.w	db76 <FatFile::open(FatFile*, fname_t*, int)+0x44a>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    d8c6:	cmp	r0, #255	; 0xff
    d8c8:	bls.n	d882 <FatFile::open(FatFile*, fname_t*, int)+0x156>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    d8ca:	mov.w	fp, #0
    d8ce:	b.n	d7a6 <FatFile::open(FatFile*, fname_t*, int)+0x7a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    d8d0:	ldrb	r3, [r7, #1]
    d8d2:	cmp	r3, #0
    d8d4:	bne.w	da94 <FatFile::open(FatFile*, fname_t*, int)+0x368>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    d8d8:	ldr	r2, [sp, #28]
    d8da:	mov	r3, r2
    d8dc:	lsls	r2, r3, #22
    d8de:	bpl.n	d8ea <FatFile::open(FatFile*, fname_t*, int)+0x1be>
    d8e0:	and.w	r3, r3, #3
    d8e4:	subs	r3, #1
    d8e6:	cmp	r3, #1
    d8e8:	bls.n	d906 <FatFile::open(FatFile*, fname_t*, int)+0x1da>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d8ea:	movs	r1, #10
    d8ec:	ldr	r0, [pc, #176]	; (d9a0 <FatFile::open(FatFile*, fname_t*, int)+0x274>)
    d8ee:	bl	fe48 <usb_serial_write>
    d8f2:	movs	r1, #102	; 0x66
    d8f4:	ldr	r0, [pc, #172]	; (d9a4 <FatFile::open(FatFile*, fname_t*, int)+0x278>)
    d8f6:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d8fa:	movs	r0, #46	; 0x2e
    d8fc:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d900:	mov.w	r1, #418	; 0x1a2
    d904:	b.n	d760 <FatFile::open(FatFile*, fname_t*, int)+0x34>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    d906:	cmp	r5, #0
    d908:	it	eq
    d90a:	moveq	sl, r6
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    d90c:	cmp	r5, r8
    d90e:	bcc.n	d918 <FatFile::open(FatFile*, fname_t*, int)+0x1ec>
    d910:	b.n	d9b0 <FatFile::open(FatFile*, fname_t*, int)+0x284>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    d912:	uxtb	r5, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    d914:	cmp	r8, r5
    d916:	bls.n	d9b0 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    dir = dirFile->readDirCache();
    d918:	movs	r1, #0
    d91a:	mov	r0, r7
    d91c:	bl	b210 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    d920:	adds	r3, r5, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    d922:	cmp	r0, #0
    d924:	bne.n	d912 <FatFile::open(FatFile*, fname_t*, int)+0x1e6>
      if (dirFile->getError()) {
    d926:	ldrb	r3, [r7, #1]
    d928:	mov	r4, r0
    d92a:	cbz	r3, d95c <FatFile::open(FatFile*, fname_t*, int)+0x230>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d92c:	movs	r1, #10
    d92e:	ldr	r0, [pc, #112]	; (d9a0 <FatFile::open(FatFile*, fname_t*, int)+0x274>)
    d930:	bl	fe48 <usb_serial_write>
    d934:	movs	r1, #102	; 0x66
    d936:	ldr	r0, [pc, #108]	; (d9a4 <FatFile::open(FatFile*, fname_t*, int)+0x278>)
    d938:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d93c:	movs	r0, #46	; 0x2e
    d93e:	bl	ff50 <usb_serial_putchar>
    d942:	mov.w	r1, #430	; 0x1ae
    d946:	ldr	r0, [pc, #96]	; (d9a8 <FatFile::open(FatFile*, fname_t*, int)+0x27c>)
    d948:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d94c:	ldr	r0, [pc, #88]	; (d9a8 <FatFile::open(FatFile*, fname_t*, int)+0x27c>)
    d94e:	bl	11800 <Print::println()>
    d952:	b.n	d76e <FatFile::open(FatFile*, fname_t*, int)+0x42>
    d954:	ldr	r3, [r7, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    d956:	ldrb	r3, [r3, #4]
    d958:	cmp	r3, #1
    d95a:	bhi.n	d9b0 <FatFile::open(FatFile*, fname_t*, int)+0x284>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    d95c:	cmp	r8, r5
    d95e:	bls.n	d9b0 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    d960:	mov	r0, r7
    d962:	bl	a94c <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    d966:	adds	r5, #16
    d968:	uxtb	r5, r5
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    d96a:	cmp	r0, #0
    d96c:	bne.n	d954 <FatFile::open(FatFile*, fname_t*, int)+0x228>
    d96e:	mov	r4, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    d970:	movs	r1, #10
    d972:	ldr	r0, [pc, #44]	; (d9a0 <FatFile::open(FatFile*, fname_t*, int)+0x274>)
    d974:	bl	fe48 <usb_serial_write>
    d978:	movs	r1, #102	; 0x66
    d97a:	ldr	r0, [pc, #40]	; (d9a4 <FatFile::open(FatFile*, fname_t*, int)+0x278>)
    d97c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d980:	movs	r0, #46	; 0x2e
    d982:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    d986:	movw	r1, #441	; 0x1b9
    d98a:	ldr	r0, [pc, #28]	; (d9a8 <FatFile::open(FatFile*, fname_t*, int)+0x27c>)
    d98c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    d990:	ldr	r0, [pc, #20]	; (d9a8 <FatFile::open(FatFile*, fname_t*, int)+0x27c>)
    d992:	bl	11800 <Print::println()>
  }
  return true;

 fail:
  return false;
}
    d996:	mov	r0, r4
    d998:	add	sp, #52	; 0x34
    d99a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d99e:	nop
    d9a0:	.word	0x00016f6c
    d9a4:	.word	0x000172e0
    d9a8:	.word	0x1fff0b00
    d9ac:	.word	0x4ec4ec4f
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    d9b0:	ldr	r3, [sp, #24]
    d9b2:	cbz	r3, d9c4 <FatFile::open(FatFile*, fname_t*, int)+0x298>
    if (!dirFile->lfnUniqueSfn(fname)) {
    d9b4:	ldr	r1, [sp, #12]
    d9b6:	mov	r0, r7
    d9b8:	bl	d628 <FatFile::lfnUniqueSfn(fname_t*)>
    d9bc:	mov	r4, r0
    d9be:	cmp	r0, #0
    d9c0:	beq.w	d76e <FatFile::open(FatFile*, fname_t*, int)+0x42>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    d9c4:	mov.w	r1, sl, lsl #5
    d9c8:	mov	r0, r7
    d9ca:	bl	b288 <FatFile::seekSet(unsigned long)>
    d9ce:	mov	r4, r0
    d9d0:	cmp	r0, #0
    d9d2:	beq.w	dc0c <FatFile::open(FatFile*, fname_t*, int)+0x4e0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    d9d6:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    d9da:	ands.w	fp, r8, #255	; 0xff
    d9de:	beq.n	dac4 <FatFile::open(FatFile*, fname_t*, int)+0x398>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    d9e0:	orr.w	r5, fp, #64	; 0x40
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    d9e4:	ldr.w	sl, [sp, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    d9e8:	uxtb	r5, r5
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    d9ea:	mov	r6, fp
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    d9ec:	mov.w	r8, #0
    d9f0:	movs	r1, #0
    d9f2:	mov	r0, r7
    d9f4:	bl	b210 <FatFile::readDirCache(bool)>
    if (!ldir) {
    d9f8:	cmp	r0, #0
    d9fa:	beq.w	dbc0 <FatFile::open(FatFile*, fname_t*, int)+0x494>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    d9fe:	ldr	r2, [r7, #8]
    da00:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    da04:	cmp	fp, r6
    da06:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    da0a:	mov.w	lr, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    da0e:	ite	ne
    da10:	movne	r1, r6
    da12:	moveq	r1, r5
    da14:	strb.w	r3, [r2, #36]	; 0x24
    da18:	add.w	r4, sl, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    da1c:	strb.w	lr, [r0, #11]
    ldir->mustBeZero1 = 0;
    da20:	strb.w	r8, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    da24:	strb	r1, [r0, #0]
    da26:	add.w	lr, sl, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    da2a:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    da2c:	ldrb.w	ip, [r4, #1]!
    da30:	lsrs	r2, r3, #1
    da32:	orr.w	r3, r2, r3, lsl #7
    da36:	uxtab	r3, ip, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    da3a:	cmp	r4, lr
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    da3c:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    da3e:	bne.n	da2c <FatFile::open(FatFile*, fname_t*, int)+0x300>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    da40:	and.w	r1, r1, #31
    da44:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    da46:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    da48:	add.w	r3, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    da4c:	ldr.w	r2, [sl, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    da50:	strh.w	r8, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    da54:	add.w	r1, r1, r3, lsl #2
    da58:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    da5a:	movs	r3, #0
    da5c:	b.n	da7c <FatFile::open(FatFile*, fname_t*, int)+0x350>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    da5e:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    da60:	ldrb	r4, [r2, r1]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    da62:	bls.n	da8e <FatFile::open(FatFile*, fname_t*, int)+0x362>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    da64:	cmp	r3, #10
    da66:	ite	ls
    da68:	strhls	r4, [r0, #0]
    da6a:	strhhi	r4, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    da6c:	adds	r3, #1
    da6e:	uxtb	r3, r3
    da70:	cmp	r3, #13
    da72:	add.w	r1, r1, #1
    da76:	add.w	r0, r0, #2
    da7a:	beq.n	dabc <FatFile::open(FatFile*, fname_t*, int)+0x390>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    da7c:	cmp	r9, r1
    da7e:	bhi.n	da5e <FatFile::open(FatFile*, fname_t*, int)+0x332>
    da80:	ite	ne
    da82:	movne.w	r4, #4294967295
    da86:	moveq	r4, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    da88:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    da8a:	uxth	r4, r4
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    da8c:	bhi.n	da64 <FatFile::open(FatFile*, fname_t*, int)+0x338>
    da8e:	strh.w	r4, [r0, #-3]
    da92:	b.n	da6c <FatFile::open(FatFile*, fname_t*, int)+0x340>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    da94:	movs	r1, #10
    da96:	ldr	r0, [pc, #464]	; (dc68 <FatFile::open(FatFile*, fname_t*, int)+0x53c>)
    da98:	bl	fe48 <usb_serial_write>
    da9c:	movs	r1, #102	; 0x66
    da9e:	ldr	r0, [pc, #460]	; (dc6c <FatFile::open(FatFile*, fname_t*, int)+0x540>)
    daa0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    daa4:	movs	r0, #46	; 0x2e
    daa6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    daaa:	movw	r1, #331	; 0x14b
    daae:	ldr	r0, [pc, #448]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    dab0:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    dab4:	ldr	r0, [pc, #440]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    dab6:	bl	11800 <Print::println()>
    daba:	b.n	d76e <FatFile::open(FatFile*, fname_t*, int)+0x42>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    dabc:	subs	r6, #1
    dabe:	ands.w	r6, r6, #255	; 0xff
    dac2:	bne.n	d9f0 <FatFile::open(FatFile*, fname_t*, int)+0x2c4>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    dac4:	movs	r1, #0
    dac6:	mov	r0, r7
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    dac8:	ldr	r6, [r7, #20]
  dir = dirFile->readDirCache();
    daca:	bl	b210 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    dace:	ubfx	r6, r6, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    dad2:	mov	r4, r0
    dad4:	cmp	r0, #0
    dad6:	beq.w	dc40 <FatFile::open(FatFile*, fname_t*, int)+0x514>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    dada:	movs	r2, #32
    dadc:	movs	r1, #0
    dade:	bl	12f4c <memset>
  memcpy(dir->name, fname->sfn, 11);
    dae2:	ldr	r5, [sp, #12]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    dae4:	ldr	r2, [pc, #396]	; (dc74 <FatFile::open(FatFile*, fname_t*, int)+0x548>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    dae6:	mov	r3, r5
    dae8:	ldr.w	r1, [r3, #13]!
    daec:	ldr	r0, [r3, #4]
    daee:	str	r0, [r4, #4]
    daf0:	str	r1, [r4, #0]
    daf2:	ldrh	r1, [r3, #8]
    daf4:	ldrb	r3, [r3, #10]
    daf6:	strb	r3, [r4, #10]
    daf8:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    dafa:	ldrb	r3, [r5, #0]

  // Set timestamps.
  if (FsDateTime::callback) {
    dafc:	ldr	r5, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    dafe:	and.w	r3, r3, #24
    db02:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    db04:	cmp	r5, #0
    db06:	beq.w	dc34 <FatFile::open(FatFile*, fname_t*, int)+0x508>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    db0a:	add.w	r2, sp, #43	; 0x2b
    db0e:	add.w	r1, sp, #46	; 0x2e
    db12:	add	r0, sp, #44	; 0x2c
    db14:	blx	r5
    db16:	ldrh.w	r1, [sp, #44]	; 0x2c
    db1a:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    db1e:	ldrb.w	r3, [sp, #43]	; 0x2b
    db22:	strh	r1, [r4, #16]
    db24:	strh	r2, [r4, #14]
    db26:	strb	r3, [r4, #13]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    db28:	ldr	r2, [r7, #8]
    db2a:	ldrb.w	r3, [r2, #36]	; 0x24
    db2e:	orr.w	r3, r3, #1
    db32:	strb.w	r3, [r2, #36]	; 0x24

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    db36:	str.w	fp, [sp]
    db3a:	ldr	r3, [sp, #28]
    db3c:	ldr	r0, [sp, #36]	; 0x24
    db3e:	mov	r2, r6
    db40:	mov	r1, r7
    db42:	bl	b4b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    db46:	mov	r4, r0
    db48:	cmp	r0, #0
    db4a:	bne.w	d76e <FatFile::open(FatFile*, fname_t*, int)+0x42>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    db4e:	movs	r1, #10
    db50:	ldr	r0, [pc, #276]	; (dc68 <FatFile::open(FatFile*, fname_t*, int)+0x53c>)
    db52:	bl	fe48 <usb_serial_write>
    db56:	movs	r1, #102	; 0x66
    db58:	ldr	r0, [pc, #272]	; (dc6c <FatFile::open(FatFile*, fname_t*, int)+0x540>)
    db5a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    db5e:	movs	r0, #46	; 0x2e
    db60:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    db64:	movw	r1, #509	; 0x1fd
    db68:	ldr	r0, [pc, #260]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    db6a:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    db6e:	ldr	r0, [pc, #256]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    db70:	bl	11800 <Print::println()>
    db74:	b.n	d76e <FatFile::open(FatFile*, fname_t*, int)+0x42>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    db76:	cmp	r0, #0
    db78:	it	ne
    db7a:	movne.w	fp, #0
    db7e:	b.n	d7a6 <FatFile::open(FatFile*, fname_t*, int)+0x7a>
    db80:	subs	r0, r4, #1
    db82:	adds	r4, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    db84:	ldrb.w	r1, [r0, #1]!
    db88:	lsrs	r2, r3, #1
    db8a:	orr.w	r3, r2, r3, lsl #7
    db8e:	uxtab	r3, r1, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    db92:	cmp	r0, r4
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    db94:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    db96:	bne.n	db84 <FatFile::open(FatFile*, fname_t*, int)+0x458>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    db98:	ldr	r2, [sp, #32]
    db9a:	cmp	r2, r3
    db9c:	bne.n	dbf0 <FatFile::open(FatFile*, fname_t*, int)+0x4c4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    db9e:	ldr	r3, [sp, #28]
    dba0:	lsls	r1, r3, #20
    dba2:	bpl.n	db36 <FatFile::open(FatFile*, fname_t*, int)+0x40a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dba4:	movs	r1, #10
    dba6:	ldr	r0, [pc, #192]	; (dc68 <FatFile::open(FatFile*, fname_t*, int)+0x53c>)
    dba8:	bl	fe48 <usb_serial_write>
    dbac:	movs	r1, #102	; 0x66
    dbae:	ldr	r0, [pc, #188]	; (dc6c <FatFile::open(FatFile*, fname_t*, int)+0x540>)
    dbb0:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dbb4:	movs	r0, #46	; 0x2e
    dbb6:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    dbba:	mov.w	r1, #410	; 0x19a
    dbbe:	b.n	d760 <FatFile::open(FatFile*, fname_t*, int)+0x34>
    dbc0:	mov	r4, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dbc2:	movs	r1, #10
    dbc4:	ldr	r0, [pc, #160]	; (dc68 <FatFile::open(FatFile*, fname_t*, int)+0x53c>)
    dbc6:	bl	fe48 <usb_serial_write>
    dbca:	movs	r1, #102	; 0x66
    dbcc:	ldr	r0, [pc, #156]	; (dc6c <FatFile::open(FatFile*, fname_t*, int)+0x540>)
    dbce:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dbd2:	movs	r0, #46	; 0x2e
    dbd4:	bl	ff50 <usb_serial_putchar>
    dbd8:	movw	r1, #463	; 0x1cf
    dbdc:	ldr	r0, [pc, #144]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    dbde:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    dbe2:	ldr	r0, [pc, #140]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    dbe4:	bl	11800 <Print::println()>
    dbe8:	b.n	d76e <FatFile::open(FatFile*, fname_t*, int)+0x42>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    dbea:	ldr	r2, [sp, #16]
    dbec:	cmp	r2, #1
    dbee:	beq.n	db80 <FatFile::open(FatFile*, fname_t*, int)+0x454>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dbf0:	movs	r1, #10
    dbf2:	ldr	r0, [pc, #116]	; (dc68 <FatFile::open(FatFile*, fname_t*, int)+0x53c>)
    dbf4:	bl	fe48 <usb_serial_write>
    dbf8:	movs	r1, #102	; 0x66
    dbfa:	ldr	r0, [pc, #112]	; (dc6c <FatFile::open(FatFile*, fname_t*, int)+0x540>)
    dbfc:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dc00:	movs	r0, #46	; 0x2e
    dc02:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    dc06:	movw	r1, #393	; 0x189
    dc0a:	b.n	d760 <FatFile::open(FatFile*, fname_t*, int)+0x34>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dc0c:	movs	r1, #10
    dc0e:	ldr	r0, [pc, #88]	; (dc68 <FatFile::open(FatFile*, fname_t*, int)+0x53c>)
    dc10:	bl	fe48 <usb_serial_write>
    dc14:	movs	r1, #102	; 0x66
    dc16:	ldr	r0, [pc, #84]	; (dc6c <FatFile::open(FatFile*, fname_t*, int)+0x540>)
    dc18:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dc1c:	movs	r0, #46	; 0x2e
    dc1e:	bl	ff50 <usb_serial_putchar>
    dc22:	mov.w	r1, #456	; 0x1c8
    dc26:	ldr	r0, [pc, #72]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    dc28:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    dc2c:	ldr	r0, [pc, #64]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    dc2e:	bl	11800 <Print::println()>
    dc32:	b.n	d76e <FatFile::open(FatFile*, fname_t*, int)+0x42>
    dc34:	movw	r3, #21025	; 0x5221
    dc38:	strh	r3, [r4, #16]
    dc3a:	strh	r3, [r4, #24]
    dc3c:	strh	r3, [r4, #18]
    dc3e:	b.n	db28 <FatFile::open(FatFile*, fname_t*, int)+0x3fc>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dc40:	movs	r1, #10
    dc42:	ldr	r0, [pc, #36]	; (dc68 <FatFile::open(FatFile*, fname_t*, int)+0x53c>)
    dc44:	bl	fe48 <usb_serial_write>
    dc48:	movs	r1, #102	; 0x66
    dc4a:	ldr	r0, [pc, #32]	; (dc6c <FatFile::open(FatFile*, fname_t*, int)+0x540>)
    dc4c:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dc50:	movs	r0, #46	; 0x2e
    dc52:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    dc56:	movw	r1, #477	; 0x1dd
    dc5a:	ldr	r0, [pc, #20]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    dc5c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    dc60:	ldr	r0, [pc, #12]	; (dc70 <FatFile::open(FatFile*, fname_t*, int)+0x544>)
    dc62:	bl	11800 <Print::println()>
    dc66:	b.n	d76e <FatFile::open(FatFile*, fname_t*, int)+0x42>
    dc68:	.word	0x00016f6c
    dc6c:	.word	0x000172e0
    dc70:	.word	0x1fff0b00
    dc74:	.word	0x1fff2448

0000dc78 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name) {
    dc78:	push	{r3, r4, r5, r6, r7, lr}
    dc7a:	ldrb	r3, [r0, #0]
    dc7c:	mov	r5, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t* dir;

  if (!isOpen()) {
    dc7e:	cbz	r3, dcd8 <FatFile::getSFN(char*)+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    dc80:	ands.w	r4, r3, #96	; 0x60
    dc84:	beq.n	dc92 <FatFile::getSFN(char*)+0x1a>
    name[0] = '/';
    dc86:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    dc88:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    dc8a:	strb	r2, [r1, #0]
    name[1] = '\0';
    dc8c:	strb	r3, [r1, #1]
    return 1;
    dc8e:	movs	r0, #1
    dc90:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FsCache::CACHE_FOR_READ));
    dc92:	mov	r1, r4
    dc94:	bl	aad4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    dc98:	cbz	r0, dd02 <FatFile::getSFN(char*)+0x8a>
    dc9a:	mov	r1, r4
    dc9c:	mov	r2, r4
    dc9e:	movs	r7, #8
    dca0:	subs	r4, r0, #1
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    dca2:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    dca6:	ldrb.w	r3, [r4, #1]!
    dcaa:	cmp	r3, #32
    dcac:	beq.n	dcca <FatFile::getSFN(char*)+0x52>
      continue;
    }
    if (i == 8) {
    dcae:	cmp	r1, #8
    dcb0:	beq.n	dd28 <FatFile::getSFN(char*)+0xb0>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    dcb2:	sub.w	r6, r3, #65	; 0x41
    dcb6:	cmp	r6, #25
    dcb8:	bhi.n	dcc4 <FatFile::getSFN(char*)+0x4c>
    dcba:	ldrb	r6, [r0, #12]
    dcbc:	tst	r7, r6
      c += 'a' - 'A';
    dcbe:	itt	ne
    dcc0:	addne	r3, #32
    dcc2:	uxtbne	r3, r3
    }
    name[j++] = c;
    dcc4:	strb	r3, [r5, r2]
    dcc6:	adds	r2, #1
    dcc8:	uxtb	r2, r2
    dcca:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    dccc:	cmp	r1, #11
    dcce:	bne.n	dca6 <FatFile::getSFN(char*)+0x2e>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = '\0';
    dcd0:	movs	r3, #0
    dcd2:	strb	r3, [r5, r2]
  return j;
    dcd4:	mov	r0, r2
    dcd6:	pop	{r3, r4, r5, r6, r7, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dcd8:	movs	r1, #10
    dcda:	ldr	r0, [pc, #92]	; (dd38 <FatFile::getSFN(char*)+0xc0>)
    dcdc:	bl	fe48 <usb_serial_write>
    dce0:	movs	r1, #102	; 0x66
    dce2:	ldr	r0, [pc, #88]	; (dd3c <FatFile::getSFN(char*)+0xc4>)
    dce4:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dce8:	movs	r0, #46	; 0x2e
    dcea:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    dcee:	movs	r1, #37	; 0x25
    dcf0:	ldr	r0, [pc, #76]	; (dd40 <FatFile::getSFN(char*)+0xc8>)
    dcf2:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    dcf6:	ldr	r0, [pc, #72]	; (dd40 <FatFile::getSFN(char*)+0xc8>)
    dcf8:	bl	11800 <Print::println()>

 fail:
  name[0] = '\0';
    dcfc:	movs	r0, #0
    dcfe:	strb	r0, [r5, #0]
  return 0;
}
    dd00:	pop	{r3, r4, r5, r6, r7, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dd02:	movs	r1, #10
    dd04:	ldr	r0, [pc, #48]	; (dd38 <FatFile::getSFN(char*)+0xc0>)
    dd06:	bl	fe48 <usb_serial_write>
    dd0a:	movs	r1, #102	; 0x66
    dd0c:	ldr	r0, [pc, #44]	; (dd3c <FatFile::getSFN(char*)+0xc4>)
    dd0e:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dd12:	movs	r0, #46	; 0x2e
    dd14:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    dd18:	movs	r1, #48	; 0x30
    dd1a:	ldr	r0, [pc, #36]	; (dd40 <FatFile::getSFN(char*)+0xc8>)
    dd1c:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    dd20:	ldr	r0, [pc, #28]	; (dd40 <FatFile::getSFN(char*)+0xc8>)
    dd22:	bl	11800 <Print::println()>
    dd26:	b.n	dcfc <FatFile::getSFN(char*)+0x84>
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    dd28:	strb.w	lr, [r5, r2]
    dd2c:	adds	r2, #1
    dd2e:	uxtb	r2, r2
    dd30:	ldrb	r3, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    dd32:	movs	r7, #16
    dd34:	b.n	dcb2 <FatFile::getSFN(char*)+0x3a>
    dd36:	nop
    dd38:	.word	0x00016f6c
    dd3c:	.word	0x00017348
    dd40:	.word	0x1fff0b00

0000dd44 <FatFile::printSFN(Print*)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    dd44:	push	{r4, r5, lr}
    dd46:	sub	sp, #20
    dd48:	mov	r5, r1
  char name[13];
  if (!getSFN(name)) {
    dd4a:	mov	r1, sp
    dd4c:	bl	dc78 <FatFile::getSFN(char*)>
    dd50:	cbz	r0, dd6c <FatFile::printSFN(Print*)+0x28>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    dd52:	mov	r0, sp
    dd54:	bl	13580 <strlen>
    dd58:	ldr	r3, [r5, #0]
    dd5a:	mov	r2, r0
    dd5c:	mov	r1, sp
    dd5e:	ldr	r3, [r3, #4]
    dd60:	mov	r0, r5
    dd62:	blx	r3
    dd64:	mov	r4, r0
  }
  return pr->write(name);

 fail:
  return 0;
}
    dd66:	mov	r0, r4
    dd68:	add	sp, #20
    dd6a:	pop	{r4, r5, pc}
    dd6c:	mov	r4, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dd6e:	movs	r1, #10
    dd70:	ldr	r0, [pc, #36]	; (dd98 <FatFile::printSFN(Print*)+0x54>)
    dd72:	bl	fe48 <usb_serial_write>
    dd76:	movs	r1, #102	; 0x66
    dd78:	ldr	r0, [pc, #32]	; (dd9c <FatFile::printSFN(Print*)+0x58>)
    dd7a:	bl	fe48 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dd7e:	movs	r0, #46	; 0x2e
    dd80:	bl	ff50 <usb_serial_putchar>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    dd84:	movs	r1, #78	; 0x4e
    dd86:	ldr	r0, [pc, #24]	; (dda0 <FatFile::printSFN(Print*)+0x5c>)
    dd88:	bl	118cc <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    dd8c:	ldr	r0, [pc, #16]	; (dda0 <FatFile::printSFN(Print*)+0x5c>)
    dd8e:	bl	11800 <Print::println()>
    dd92:	mov	r0, r4
    dd94:	add	sp, #20
    dd96:	pop	{r4, r5, pc}
    dd98:	.word	0x00016f6c
    dd9c:	.word	0x00017348
    dda0:	.word	0x1fff0b00

0000dda4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    dda4:	push	{r3, r4, r5, r6, r7, lr}
    dda6:	movs	r5, #0
    dda8:	str	r5, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    ddaa:	ldr	r4, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    ddac:	str	r5, [r0, #60]	; 0x3c
    ddae:	mov	r6, r0
    ddb0:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    ddb2:	cbz	r4, ddd8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    ddb4:	mov	r1, r0
    ddb6:	movs	r0, #36	; 0x24
    ddb8:	bl	e014 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    ddbc:	strb	r5, [r0, #0]
    ddbe:	strb	r5, [r0, #1]
    ddc0:	strb	r5, [r0, #2]
    ddc2:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    ddc4:	ldr	r5, [r7, #56]	; 0x38
    ddc6:	mov	r4, r0
    ddc8:	ldmia	r5!, {r0, r1, r2, r3}
    ddca:	stmia	r4!, {r0, r1, r2, r3}
    ddcc:	ldmia	r5!, {r0, r1, r2, r3}
    ddce:	stmia	r4!, {r0, r1, r2, r3}
    ddd0:	ldr	r3, [r5, #0]
    ddd2:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    ddd4:	mov	r0, r6
    ddd6:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    ddd8:	ldr	r3, [r1, #60]	; 0x3c
    ddda:	cmp	r3, #0
    dddc:	beq.n	ddd4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    ddde:	mov	r1, r0
    dde0:	movs	r0, #56	; 0x38
    dde2:	bl	e014 <operator new(unsigned int, unsigned long*)>
    dde6:	strb.w	r4, [r0, #49]	; 0x31
    ddea:	strb.w	r4, [r0, #50]	; 0x32
    ddee:	strb.w	r4, [r0, #51]	; 0x33
    ddf2:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    ddf4:	ldr	r3, [r7, #60]	; 0x3c
    ddf6:	mov	r2, r0
    ddf8:	add.w	r1, r3, #48	; 0x30
    ddfc:	ldr	r5, [r3, #0]
    ddfe:	ldr	r4, [r3, #4]
    de00:	ldr	r0, [r3, #8]
    de02:	ldr	r7, [r3, #12]
    de04:	str	r7, [r2, #12]
    de06:	adds	r3, #16
    de08:	cmp	r3, r1
    de0a:	str	r5, [r2, #0]
    de0c:	str	r4, [r2, #4]
    de0e:	str	r0, [r2, #8]
    de10:	add.w	r2, r2, #16
    de14:	bne.n	ddfc <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    de16:	ldr	r3, [r3, #0]
    de18:	str	r3, [r2, #0]
    de1a:	b.n	ddd4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000de1c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    de1c:	push	{r4, lr}
    de1e:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    de20:	ldr	r0, [r0, #56]	; 0x38
    de22:	cbz	r0, de30 <FsBaseFile::close()+0x14>
    de24:	bl	ac14 <FatFile::close()>
    de28:	cbz	r0, de30 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    de2a:	movs	r3, #0
    de2c:	str	r3, [r4, #56]	; 0x38
    return true;
    de2e:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    de30:	ldr	r0, [r4, #60]	; 0x3c
    de32:	cbz	r0, de40 <FsBaseFile::close()+0x24>
    de34:	bl	7db8 <ExFatFile::close()>
    de38:	cbz	r0, de40 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    de3a:	movs	r3, #0
    de3c:	str	r3, [r4, #60]	; 0x3c
    de3e:	pop	{r4, pc}
    return true;
  }
  return false;
    de40:	movs	r0, #0
}
    de42:	pop	{r4, pc}

0000de44 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    de44:	cbz	r1, deba <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    de46:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de4a:	mov	r4, r1
    de4c:	mov	r5, r0
    de4e:	mov	r8, r3
    de50:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    de52:	bl	de1c <FsBaseFile::close()>
  if (vol->m_fVol) {
    de56:	ldr.w	r6, [r4, #1152]	; 0x480
    de5a:	cbz	r6, de88 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    de5c:	mov	r1, r5
    de5e:	movs	r0, #36	; 0x24
    de60:	bl	e014 <operator new(unsigned int, unsigned long*)>
    de64:	movs	r1, #0
    de66:	strb	r1, [r0, #0]
    de68:	strb	r1, [r0, #1]
    de6a:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    de6c:	ldr.w	r1, [r4, #1152]	; 0x480
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    de70:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    de72:	mov	r3, r8
    de74:	mov	r2, r7
    de76:	bl	af40 <FatFile::open(FatVolume*, char const*, int)>
    de7a:	cbz	r0, de82 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    de7c:	movs	r0, #1
    de7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    de82:	str	r0, [r5, #56]	; 0x38
    de84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    de88:	ldr.w	r3, [r4, #1156]	; 0x484
    de8c:	cbz	r3, debe <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    de8e:	mov	r1, r5
    de90:	movs	r0, #56	; 0x38
    de92:	bl	e014 <operator new(unsigned int, unsigned long*)>
    de96:	strb.w	r6, [r0, #49]	; 0x31
    de9a:	strb.w	r6, [r0, #50]	; 0x32
    de9e:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    dea2:	ldr.w	r1, [r4, #1156]	; 0x484
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    dea6:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    dea8:	mov	r3, r8
    deaa:	mov	r2, r7
    deac:	bl	8cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    deb0:	cmp	r0, #0
    deb2:	bne.n	de7c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    deb4:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    deb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    deba:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    debc:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    debe:	movs	r0, #0
    dec0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dec4 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    dec4:	push	{r3, r4, r5, r6, r7, lr}
    dec6:	mov	r5, r1
    dec8:	mov	r7, r2
    deca:	mov	r4, r0
  close();
    decc:	bl	de1c <FsBaseFile::close()>
  if (dir->m_fFile) {
    ded0:	ldr	r6, [r5, #56]	; 0x38
    ded2:	cbz	r6, def8 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    ded4:	mov	r1, r4
    ded6:	movs	r0, #36	; 0x24
    ded8:	bl	e014 <operator new(unsigned int, unsigned long*)>
    dedc:	movs	r2, #0
    dede:	strb	r2, [r0, #0]
    dee0:	strb	r2, [r0, #1]
    dee2:	strb	r2, [r0, #2]
    dee4:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    dee6:	mov	r2, r7
    dee8:	ldr	r1, [r5, #56]	; 0x38
    deea:	bl	b6ac <FatFile::openNext(FatFile*, int)>
    deee:	cbz	r0, def4 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    def0:	movs	r0, #1
    def2:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    def4:	str	r0, [r4, #56]	; 0x38
    def6:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    def8:	ldr	r0, [r5, #60]	; 0x3c
    defa:	cbz	r0, df20 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    defc:	mov	r1, r4
    defe:	movs	r0, #56	; 0x38
    df00:	bl	e014 <operator new(unsigned int, unsigned long*)>
    df04:	strb.w	r6, [r0, #49]	; 0x31
    df08:	strb.w	r6, [r0, #50]	; 0x32
    df0c:	strb.w	r6, [r0, #51]	; 0x33
    df10:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    df12:	mov	r2, r7
    df14:	ldr	r1, [r5, #60]	; 0x3c
    df16:	bl	8d04 <ExFatFile::openNext(ExFatFile*, int)>
    df1a:	cmp	r0, #0
    df1c:	bne.n	def0 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    df1e:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    df20:	pop	{r3, r4, r5, r6, r7, pc}
    df22:	nop

0000df24 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    df24:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    df26:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    df28:	mov	r4, r0
  m_blockDev = blockDev;
    df2a:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    df2e:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    df32:	mov	r1, r0
    df34:	mov.w	r0, #1152	; 0x480
    df38:	bl	e014 <operator new(unsigned int, unsigned long*)>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    df3c:	strb.w	r6, [r0, #1092]	; 0x444
    df40:	strb.w	r6, [r0, #1145]	; 0x479
    df44:	strb.w	r6, [r0, #1146]	; 0x47a
    df48:	strb.w	r6, [r0, #1147]	; 0x47b
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    df4c:	movs	r2, #1
    df4e:	ldr.w	r1, [r4, #1160]	; 0x488
    df52:	str.w	r0, [r4, #1156]	; 0x484
    df56:	mov	r5, r0
    df58:	bl	9518 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    df5c:	cbnz	r0, df9a <FsVolume::begin(BlockDeviceInterface*)+0x76>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    df5e:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    df60:	mov	r1, r4
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    df62:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    df66:	mov.w	r0, #1128	; 0x468
    df6a:	bl	e014 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    df6e:	strb	r6, [r0, #7]
    df70:	strb.w	r6, [r0, #1092]	; 0x444
    df74:	strb.w	r6, [r0, #1093]	; 0x445
    df78:	strb.w	r6, [r0, #1094]	; 0x446
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    df7c:	movs	r2, #1
    df7e:	ldr.w	r1, [r4, #1160]	; 0x488
    df82:	str.w	r0, [r4, #1152]	; 0x480
    df86:	mov	r5, r0
    df88:	bl	caf8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    df8c:	cbnz	r0, dfbe <FsVolume::begin(BlockDeviceInterface*)+0x9a>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    df8e:	ldr	r3, [pc, #80]	; (dfe0 <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
    df90:	movs	r0, #0
    df92:	str	r0, [r3, #0]
  m_fVol = nullptr;
    df94:	str.w	r0, [r4, #1152]	; 0x480
  return false;

 done:
  m_cwv = this;
  return true;
}
    df98:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    df9a:	add.w	r6, r5, #1096	; 0x448
    df9e:	mov	r0, r6
    dfa0:	bl	7db8 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    dfa4:	mov	r1, r5
    dfa6:	mov	r0, r6
    dfa8:	bl	7f50 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    dfac:	cmp	r0, #0
    dfae:	beq.n	df5e <FsVolume::begin(BlockDeviceInterface*)+0x3a>
      return false;
    }
    if (setCwv || !m_cwv) {
    dfb0:	ldr	r3, [pc, #48]	; (dfe4 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    dfb2:	ldr	r2, [r3, #0]
    dfb4:	cbz	r2, dfdc <FsVolume::begin(BlockDeviceInterface*)+0xb8>
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    dfb6:	ldr	r3, [pc, #40]	; (dfe0 <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
  return true;
    dfb8:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    dfba:	str	r4, [r3, #0]
  return true;
    dfbc:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    dfbe:	addw	r6, r5, #1092	; 0x444
    dfc2:	mov	r0, r6
    dfc4:	bl	ac14 <FatFile::close()>
    return m_vwd.openRoot(this);
    dfc8:	mov	r1, r5
    dfca:	mov	r0, r6
    dfcc:	bl	ad30 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    dfd0:	cmp	r0, #0
    dfd2:	beq.n	df8e <FsVolume::begin(BlockDeviceInterface*)+0x6a>
      return false;
    }
    if (setCwv || !m_cwv) {
    dfd4:	ldr	r3, [pc, #16]	; (dfe8 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
    dfd6:	ldr	r2, [r3, #0]
    dfd8:	cmp	r2, #0
    dfda:	bne.n	dfb6 <FsVolume::begin(BlockDeviceInterface*)+0x92>
      m_cwv = this;
    dfdc:	str	r5, [r3, #0]
    dfde:	b.n	dfb6 <FsVolume::begin(BlockDeviceInterface*)+0x92>
    dfe0:	.word	0x1fff2454
    dfe4:	.word	0x1fff244c
    dfe8:	.word	0x1fff2450

0000dfec <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    dfec:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    dfee:	movs	r5, #0
    dff0:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    dff4:	ldr	r6, [pc, #24]	; (e010 <FsVolume::open(char const*, int)+0x24>)
    dff6:	str	r7, [r0, #8]
    dff8:	mov	r4, r0
    dffa:	strb	r5, [r0, #4]
    dffc:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    dffe:	str	r5, [r0, #72]	; 0x48
    e000:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    e002:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    e006:	bl	de44 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    e00a:	mov	r0, r4
    e00c:	pop	{r3, r4, r5, r6, r7, pc}
    e00e:	nop
    e010:	.word	0x00016a38

0000e014 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    e014:	mov	r0, r1
    e016:	bx	lr

0000e018 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    e018:	ldrb	r0, [r0, #19]
    e01a:	bx	lr

0000e01c <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    e01c:	ldrb	r0, [r0, #21]
    e01e:	bx	lr

0000e020 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    e020:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    e022:	ldr	r4, [r0, #0]
    e024:	ldr	r4, [r4, #16]
    e026:	movs	r3, #1
    e028:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    e02a:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    e02e:	bx	ip

0000e030 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    e030:	ldrb	r0, [r0, #22]
    e032:	bx	lr

0000e034 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    e034:	bx	lr
    e036:	nop

0000e038 <SdSpiCard::~SdSpiCard()>:
    e038:	push	{r4, lr}
    e03a:	movs	r1, #24
    e03c:	mov	r4, r0
    e03e:	bl	119b0 <operator delete(void*, unsigned int)>
    e042:	mov	r0, r4
    e044:	pop	{r4, pc}
    e046:	nop

0000e048 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    e048:	push	{r4, lr}
    e04a:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    e04c:	adds	r0, #4
    e04e:	bl	fa6c <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    e052:	ldrb	r0, [r4, #18]
    e054:	movs	r1, #0
    e056:	bl	fc44 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    e05a:	movs	r3, #1
    e05c:	strb	r3, [r4, #20]
    e05e:	pop	{r4, pc}

0000e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    e060:	push	{r3, r4, r5, lr}
    e062:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    e064:	movs	r1, #1
    e066:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    e068:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    e06a:	bl	fc44 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    e06e:	mov	r0, r5
    e070:	movs	r1, #255	; 0xff
    e072:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    e076:	mov	r0, r5
    e078:	bl	fb4c <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    e07c:	movs	r3, #0
    e07e:	strb	r3, [r4, #20]
    e080:	pop	{r3, r4, r5, pc}
    e082:	nop

0000e084 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    e084:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e088:	mov	r6, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    e08a:	ldrb	r1, [r0, #16]
    e08c:	cmp	r1, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    e08e:	mov	r5, r0
    e090:	mov	r4, r2
    e092:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    e094:	beq.n	e0da <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    if (!writeStart(sector)) {
    e096:	ldr	r3, [r5, #0]
    e098:	mov	r1, r6
    e09a:	ldr	r3, [r3, #72]	; 0x48
    e09c:	mov	r0, r5
    e09e:	blx	r3
    e0a0:	cbz	r0, e0c6 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    e0a2:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    e0a4:	str	r6, [r5, #12]
    m_curState = WRITE_STATE;
    e0a6:	strb	r3, [r5, #16]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    e0a8:	movs	r6, #0
    e0aa:	cbnz	r7, e0b2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    e0ac:	b.n	e0e2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    e0ae:	cmp	r7, r6
    e0b0:	beq.n	e0e2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    if (!writeData(src)) {
    e0b2:	ldr	r3, [r5, #0]
    e0b4:	mov	r1, r4
    e0b6:	ldr	r3, [r3, #68]	; 0x44
    e0b8:	mov	r0, r5
    e0ba:	blx	r3
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    e0bc:	adds	r6, #1
    e0be:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    e0c2:	cmp	r0, #0
    e0c4:	bne.n	e0ae <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e0c6:	ldrb	r0, [r5, #20]
    e0c8:	cbnz	r0, e0ce <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    e0ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0ce:	mov	r0, r5
    e0d0:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
    e0d4:	movs	r0, #0
}
    e0d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    e0da:	ldr	r3, [r0, #12]
    e0dc:	cmp	r3, r6
    e0de:	bne.n	e096 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    e0e0:	b.n	e0a8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    e0e2:	ldr	r3, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    e0e4:	ldrb	r2, [r5, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    e0e6:	add	r7, r3
    e0e8:	str	r7, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    e0ea:	cbnz	r2, e0f2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6e>
    e0ec:	movs	r0, #1
    e0ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0f2:	ldr	r3, [r5, #0]
    e0f4:	mov	r0, r5
    e0f6:	ldr	r3, [r3, #24]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    e0f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    e0fc:	bx	r3
    e0fe:	nop

0000e100 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    e100:	push	{r3, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    e102:	ldrb	r3, [r0, #16]
    e104:	cmp	r3, #1
    e106:	beq.n	e14a <SdSpiCard::isBusy()+0x4a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
  bool spiActive = m_spiActive;
    e108:	ldrb	r7, [r0, #20]
    e10a:	mov	r5, r0
  if (!spiActive) {
    e10c:	cbz	r7, e13a <SdSpiCard::isBusy()+0x3a>
    e10e:	adds	r6, r5, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    e110:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    e112:	mov	r0, r6
    e114:	bl	fb94 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    e118:	cmp	r0, #255	; 0xff
    e11a:	add.w	r3, r4, #4294967295
    e11e:	beq.n	e132 <SdSpiCard::isBusy()+0x32>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    e120:	ands.w	r4, r3, #255	; 0xff
    e124:	bne.n	e112 <SdSpiCard::isBusy()+0x12>
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
    e126:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    e128:	cbnz	r7, e12e <SdSpiCard::isBusy()+0x2e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e12a:	ldrb	r3, [r5, #20]
    e12c:	cbnz	r3, e140 <SdSpiCard::isBusy()+0x40>
    }
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    e12e:	mov	r0, r4
}
    e130:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    e132:	movs	r4, #0
      break;
    }
  }
  if (!spiActive) {
    e134:	cmp	r7, #0
    e136:	beq.n	e12a <SdSpiCard::isBusy()+0x2a>
    e138:	b.n	e12e <SdSpiCard::isBusy()+0x2e>
    e13a:	bl	e048 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    e13e:	b.n	e10e <SdSpiCard::isBusy()+0xe>
    e140:	mov	r0, r5
    e142:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    spiStop();
  }
  return rtn;
    e146:	mov	r0, r4
    e148:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    e14a:	movs	r0, #0
    e14c:	pop	{r3, r4, r5, r6, r7, pc}
    e14e:	nop

0000e150 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    e150:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    e154:	ldr	r6, [pc, #116]	; (e1cc <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    e156:	sub	sp, #12
    e158:	ldr	r3, [r6, #0]
    e15a:	str	r3, [sp, #0]
	return ret;
    e15c:	ldr	r5, [sp, #0]
    e15e:	mov	r4, r0
    e160:	mov	r8, r1
    e162:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    e164:	uxth	r5, r5
    e166:	adds	r7, r0, #4
    e168:	b.n	e17a <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    e16a:	ldr	r3, [r6, #0]
    e16c:	str	r3, [sp, #4]
	return ret;
    e16e:	ldr	r3, [sp, #4]
    e170:	uxth	r3, r3
    e172:	subs	r3, r3, r5
    e174:	cmp.w	r3, #300	; 0x12c
    e178:	bgt.n	e1a0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    e17a:	mov	r0, r7
    e17c:	bl	fb94 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    e180:	cmp	r0, #255	; 0xff
    e182:	strb	r0, [r4, #21]
    e184:	beq.n	e16a <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    e186:	cmp	r0, #254	; 0xfe
    e188:	beq.n	e1a6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e18a:	movs	r3, #24
    e18c:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e18e:	ldrb	r0, [r4, #20]
    e190:	cbz	r0, e19a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    e192:	mov	r0, r4
    e194:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    e198:	movs	r0, #0
}
    e19a:	add	sp, #12
    e19c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e1a0:	movs	r3, #29
    e1a2:	strb	r3, [r4, #19]
    e1a4:	b.n	e18e <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    e1a6:	mov	r2, r9
    e1a8:	mov	r1, r8
    e1aa:	mov	r0, r7
    e1ac:	bl	fbb0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    e1b0:	strb	r0, [r4, #21]
    e1b2:	cbz	r0, e1ba <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e1b4:	movs	r3, #37	; 0x25
    e1b6:	strb	r3, [r4, #19]
    e1b8:	b.n	e18e <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    e1ba:	mov	r0, r7
    e1bc:	bl	fb94 <SdSpiArduinoDriver::receive()>
    e1c0:	mov	r0, r7
    e1c2:	bl	fb94 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    e1c6:	movs	r0, #1
    e1c8:	b.n	e19a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    e1ca:	nop
    e1cc:	.word	0x1fff24b8

0000e1d0 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    e1d0:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    e1d2:	ldr	r5, [pc, #52]	; (e208 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    e1d4:	sub	sp, #12
    e1d6:	ldr	r3, [r5, #0]
    e1d8:	str	r3, [sp, #0]
	return ret;
    e1da:	ldr	r4, [sp, #0]
    e1dc:	mov	r7, r1
    e1de:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    e1e0:	uxth	r4, r4
    e1e2:	b.n	e1f2 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    e1e4:	ldr	r3, [r5, #0]
    e1e6:	str	r3, [sp, #4]
	return ret;
    e1e8:	ldr	r3, [sp, #4]
    e1ea:	uxth	r3, r3
    e1ec:	subs	r3, r3, r4
    e1ee:	cmp	r3, r7
    e1f0:	bgt.n	e202 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    e1f2:	mov	r0, r6
    e1f4:	bl	fb94 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    e1f8:	cmp	r0, #255	; 0xff
    e1fa:	bne.n	e1e4 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    e1fc:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    e1fe:	add	sp, #12
    e200:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    e202:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    e204:	add	sp, #12
    e206:	pop	{r4, r5, r6, r7, pc}
    e208:	.word	0x1fff24b8

0000e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    e20c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e210:	sub	sp, #8
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    e212:	ldrb	r3, [r0, #16]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    e214:	str	r2, [sp, #4]
    e216:	mov	r4, r0
    e218:	mov	r7, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    e21a:	cbnz	r3, e27c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
    return 0XFF;
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    e21c:	ldrb	r3, [r4, #20]
    e21e:	cmp	r3, #0
    e220:	beq.n	e29a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    e222:	cmp	r7, #0
    e224:	bne.n	e28e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x82>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    e226:	adds	r5, r4, #4
    e228:	mov	r0, r5
    e22a:	orr.w	r1, r7, #64	; 0x40
    e22e:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
    e232:	add.w	r8, sp, #4
    e236:	add	r6, sp, #8
    e238:	ldrb.w	r1, [r6, #-1]!
    e23c:	mov	r0, r5
    e23e:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    e242:	cmp	r8, r6
    e244:	bne.n	e238 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    e246:	cmp	r7, #0
    e248:	ite	eq
    e24a:	moveq	r1, #149	; 0x95
    e24c:	movne	r1, #135	; 0x87
    e24e:	mov	r0, r5
    e250:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    e254:	mov	r0, r5
    e256:	bl	fb94 <SdSpiArduinoDriver::receive()>
    e25a:	movs	r6, #11
    e25c:	mov	r0, r5
    e25e:	bl	fb94 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    e262:	lsls	r3, r0, #24
    e264:	strb	r0, [r4, #21]
    e266:	bmi.n	e26e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    e268:	add	sp, #8
    e26a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e26e:	subs	r3, r6, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    e270:	ands.w	r6, r3, #255	; 0xff
    e274:	bne.n	e25c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    e276:	add	sp, #8
    e278:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    e27c:	ldr	r3, [r0, #0]
    e27e:	ldr	r3, [r3, #24]
    e280:	blx	r3
    e282:	cmp	r0, #0
    e284:	bne.n	e21c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x10>
    return 0XFF;
    e286:	movs	r0, #255	; 0xff

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
  }
  return m_status;
}
    e288:	add	sp, #8
    e28a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    e28e:	mov.w	r1, #300	; 0x12c
    e292:	mov	r0, r4
    e294:	bl	e1d0 <SdSpiCard::waitNotBusy(unsigned short)>
    e298:	b.n	e226 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    e29a:	mov	r0, r4
    e29c:	bl	e048 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    e2a0:	b.n	e222 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    e2a2:	nop

0000e2a4 <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    e2a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2a8:	sub	sp, #40	; 0x28
    e2aa:	add	r5, sp, #4
    e2ac:	stmia.w	r5, {r1, r2, r3}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    e2b0:	ldr	r7, [pc, #492]	; (e4a0 <SdSpiCard::begin(SdSpiConfig)+0x1fc>)
    e2b2:	ldrb.w	r3, [sp, #4]
    e2b6:	ldr	r2, [r7, #0]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    e2b8:	strb	r3, [r0, #18]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    e2ba:	mov	r6, r0
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    e2bc:	mov.w	sl, #0
    e2c0:	str	r2, [sp, #20]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    e2c2:	mov	r0, r3
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    e2c4:	strb.w	sl, [r6, #20]
  m_errorCode = SD_CARD_ERROR_NONE;
    e2c8:	strb.w	sl, [r6, #19]
  m_type = 0;
    e2cc:	strb.w	sl, [r6, #22]
    e2d0:	ldrb.w	r4, [sp, #5]
	return ret;
    e2d4:	ldr.w	r8, [sp, #20]
    e2d8:	ldr.w	r9, [sp, #8]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    e2dc:	bl	fc3c <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    e2e0:	ldrb	r0, [r6, #18]
    e2e2:	movs	r1, #1
    e2e4:	bl	fc44 <sdCsWrite(unsigned char, bool)>
    e2e8:	ldmia.w	r5, {r0, r1, r2}
    e2ec:	add	r3, sp, #28
    e2ee:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    e2f2:	adds	r5, r6, #4
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    e2f4:	ldr	r2, [pc, #428]	; (e4a4 <SdSpiCard::begin(SdSpiConfig)+0x200>)
    e2f6:	str	r2, [r6, #8]
    e2f8:	mov	r0, r5
    e2fa:	ldmia	r3, {r1, r2, r3}
    e2fc:	bl	fafc <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
  m_sharedSpi = spiOptionShared(spiConfig.options);
    e300:	and.w	r3, r4, #1
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    e304:	ldrb	r2, [r6, #20]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
    e306:	strb.w	sl, [r6, #16]
  m_sharedSpi = spiOptionShared(spiConfig.options);
    e30a:	eor.w	r3, r3, #1
    e30e:	strb	r3, [r6, #17]
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    e310:	cmp	r2, #0
    e312:	beq.w	e42c <SdSpiCard::begin(SdSpiConfig)+0x188>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    e316:	movs	r1, #1
    e318:	ldrb	r0, [r6, #18]
    e31a:	bl	fc44 <sdCsWrite(unsigned char, bool)>
    e31e:	movs	r4, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    e320:	movs	r1, #255	; 0xff
    e322:	mov	r0, r5
    e324:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
    e328:	subs	r3, r4, #1
#endif  // ENABLE_DEDICATED_SPI
  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    e32a:	ands.w	r4, r3, #255	; 0xff
    e32e:	bne.n	e320 <SdSpiCard::begin(SdSpiConfig)+0x7c>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    e330:	mov	r1, r4
    e332:	ldrb	r0, [r6, #18]
    e334:	bl	fc44 <sdCsWrite(unsigned char, bool)>
    e338:	mov.w	sl, #10
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    e33c:	movs	r2, #0
    e33e:	mov	r1, r2
    e340:	mov	r0, r6
    e342:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e346:	cmp	r0, #1
    e348:	mov	r4, r0
    e34a:	beq.n	e38a <SdSpiCard::begin(SdSpiConfig)+0xe6>
    e34c:	add.w	r3, sl, #4294967295
      break;
    }
    if (i == SD_CMD0_RETRY) {
    e350:	ands.w	sl, r3, #255	; 0xff
    e354:	beq.n	e36e <SdSpiCard::begin(SdSpiConfig)+0xca>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    e356:	movs	r1, #253	; 0xfd
    e358:	mov	r0, r5
    e35a:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
    e35e:	mov.w	r4, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    e362:	mov	r0, r5
    e364:	bl	fb94 <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    e368:	subs	r4, #1
    e36a:	bne.n	e362 <SdSpiCard::begin(SdSpiConfig)+0xbe>
    e36c:	b.n	e33c <SdSpiCard::begin(SdSpiConfig)+0x98>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e36e:	movs	r3, #1
    e370:	strb	r3, [r6, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e372:	ldrb	r0, [r6, #20]
    e374:	cbnz	r0, e37c <SdSpiCard::begin(SdSpiConfig)+0xd8>
  return true;

 fail:
  spiStop();
  return false;
}
    e376:	add	sp, #40	; 0x28
    e378:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e37c:	mov	r0, r6
    e37e:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

 fail:
  spiStop();
  return false;
    e382:	movs	r0, #0
}
    e384:	add	sp, #40	; 0x28
    e386:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    e38a:	mov.w	r2, #426	; 0x1aa
    e38e:	movs	r1, #8
    e390:	mov	r0, r6
    e392:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e396:	lsls	r3, r0, #29
    e398:	bpl.n	e434 <SdSpiCard::begin(SdSpiConfig)+0x190>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    e39a:	strb	r4, [r6, #22]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    e39c:	ldr	r3, [r6, #0]
    e39e:	ldr.w	sl, [pc, #276]	; e4b4 <SdSpiCard::begin(SdSpiConfig)+0x210>
    e3a2:	ldr	r3, [r3, #64]	; 0x40
    e3a4:	cmp	r3, sl
    e3a6:	bne.n	e45a <SdSpiCard::begin(SdSpiConfig)+0x1b6>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    e3a8:	ldrb	r0, [r6, #22]
    e3aa:	cmp	r0, #2
    e3ac:	ite	eq
    e3ae:	moveq.w	r4, #1073741824	; 0x40000000
    e3b2:	movne	r4, #0
    e3b4:	b.n	e3c6 <SdSpiCard::begin(SdSpiConfig)+0x122>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    e3b6:	ldr	r3, [r7, #0]
    e3b8:	str	r3, [sp, #24]
	return ret;
    e3ba:	ldr	r3, [sp, #24]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    e3bc:	uxth	r3, r3
    e3be:	subs	r3, r3, r2
    e3c0:	cmp.w	r3, #2000	; 0x7d0
    e3c4:	bgt.n	e454 <SdSpiCard::begin(SdSpiConfig)+0x1b0>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    e3c6:	movs	r2, #0
    e3c8:	movs	r1, #55	; 0x37
    e3ca:	mov	r0, r6
    e3cc:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    e3d0:	mov	r2, r4
    e3d2:	movs	r1, #41	; 0x29
    e3d4:	mov	r0, r6
    e3d6:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e3da:	uxth.w	r2, r8
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    e3de:	cmp	r0, #0
    e3e0:	bne.n	e3b6 <SdSpiCard::begin(SdSpiConfig)+0x112>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    e3e2:	ldr	r3, [r6, #0]
    e3e4:	ldr	r3, [r3, #64]	; 0x40
    e3e6:	cmp	r3, sl
    e3e8:	bne.n	e460 <SdSpiCard::begin(SdSpiConfig)+0x1bc>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    e3ea:	ldrb	r0, [r6, #22]
    e3ec:	cmp	r0, #2
    e3ee:	beq.n	e466 <SdSpiCard::begin(SdSpiConfig)+0x1c2>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e3f0:	ldrb	r3, [r6, #20]
    e3f2:	cbz	r3, e3fa <SdSpiCard::begin(SdSpiConfig)+0x156>
    e3f4:	mov	r0, r6
    e3f6:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e3fa:	ldr	r1, [pc, #172]	; (e4a8 <SdSpiCard::begin(SdSpiConfig)+0x204>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    e3fc:	ldr	r4, [pc, #172]	; (e4ac <SdSpiCard::begin(SdSpiConfig)+0x208>)
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    e3fe:	movs	r3, #0
    e400:	b.n	e408 <SdSpiCard::begin(SdSpiConfig)+0x164>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    e402:	cmp	r0, #23
    e404:	beq.n	e418 <SdSpiCard::begin(SdSpiConfig)+0x174>
    e406:	mov	r3, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    e408:	ldrh.w	r2, [r1, #2]!
    e40c:	sdiv	r2, r4, r2
    e410:	cmp	r9, r2
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    e412:	add.w	r0, r3, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    e416:	bcc.n	e402 <SdSpiCard::begin(SdSpiConfig)+0x15e>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    e418:	ldr	r2, [pc, #148]	; (e4b0 <SdSpiCard::begin(SdSpiConfig)+0x20c>)
    e41a:	ldr.w	r3, [r2, r3, lsl #2]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    e41e:	movs	r0, #1
    e420:	orr.w	r3, r3, #939524096	; 0x38000000
    e424:	str	r3, [r6, #8]

 fail:
  spiStop();
  return false;
}
    e426:	add	sp, #40	; 0x28
    e428:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e42c:	mov	r0, r6
    e42e:	bl	e048 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    e432:	b.n	e316 <SdSpiCard::begin(SdSpiConfig)+0x72>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    e434:	movs	r3, #2
    e436:	strb	r3, [r6, #22]
    e438:	movs	r4, #4
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    e43a:	mov	r0, r5
    e43c:	bl	fb94 <SdSpiArduinoDriver::receive()>
    e440:	subs	r4, #1
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    e442:	ands.w	r4, r4, #255	; 0xff
      m_status = spiReceive();
    e446:	strb	r0, [r6, #21]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    e448:	bne.n	e43a <SdSpiCard::begin(SdSpiConfig)+0x196>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    e44a:	cmp	r0, #170	; 0xaa
    e44c:	beq.n	e39c <SdSpiCard::begin(SdSpiConfig)+0xf8>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e44e:	movs	r3, #6
    e450:	strb	r3, [r6, #19]
    e452:	b.n	e372 <SdSpiCard::begin(SdSpiConfig)+0xce>
    e454:	movs	r3, #23
    e456:	strb	r3, [r6, #19]
    e458:	b.n	e372 <SdSpiCard::begin(SdSpiConfig)+0xce>
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    e45a:	mov	r0, r6
    e45c:	blx	r3
    e45e:	b.n	e3aa <SdSpiCard::begin(SdSpiConfig)+0x106>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    e460:	mov	r0, r6
    e462:	blx	r3
    e464:	b.n	e3ec <SdSpiCard::begin(SdSpiConfig)+0x148>
    if (cardCommand(CMD58, 0)) {
    e466:	movs	r2, #0
    e468:	movs	r1, #58	; 0x3a
    e46a:	mov	r0, r6
    e46c:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e470:	cbz	r0, e478 <SdSpiCard::begin(SdSpiConfig)+0x1d4>
    e472:	movs	r3, #18
    e474:	strb	r3, [r6, #19]
    e476:	b.n	e372 <SdSpiCard::begin(SdSpiConfig)+0xce>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    e478:	mov	r0, r5
    e47a:	bl	fb94 <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    e47e:	and.w	r0, r0, #192	; 0xc0
    e482:	cmp	r0, #192	; 0xc0
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    e484:	itt	eq
    e486:	moveq	r3, #3
    e488:	strbeq	r3, [r6, #22]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    e48a:	mov	r0, r5
    e48c:	bl	fb94 <SdSpiArduinoDriver::receive()>
    e490:	mov	r0, r5
    e492:	bl	fb94 <SdSpiArduinoDriver::receive()>
    e496:	mov	r0, r5
    e498:	bl	fb94 <SdSpiArduinoDriver::receive()>
    e49c:	b.n	e3f0 <SdSpiCard::begin(SdSpiConfig)+0x14c>
    e49e:	nop
    e4a0:	.word	0x1fff24b8
    e4a4:	.word	0x38005006
    e4a8:	.word	0x00016e3e
    e4ac:	.word	0x02dc6c00
    e4b0:	.word	0x00016f04
    e4b4:	.word	0x0000e031

0000e4b8 <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    e4b8:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    e4ba:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    e4bc:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    e4be:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    e4c0:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    e4c2:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e4c6:	cbnz	r0, e4e4 <SdSpiCard::readOCR(unsigned long*)+0x2c>
    e4c8:	adds	r7, r6, #4
    e4ca:	adds	r4, r5, #4
    e4cc:	mov	r0, r7
    e4ce:	bl	fb94 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    e4d2:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    e4d6:	cmp	r5, r4
    e4d8:	bne.n	e4cc <SdSpiCard::readOCR(unsigned long*)+0x14>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e4da:	ldrb	r4, [r6, #20]
    e4dc:	cbnz	r4, e4fa <SdSpiCard::readOCR(unsigned long*)+0x42>
    e4de:	movs	r4, #1
  return true;

 fail:
  spiStop();
  return false;
}
    e4e0:	mov	r0, r4
    e4e2:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e4e4:	ldrb	r4, [r6, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e4e6:	movs	r3, #18
    e4e8:	strb	r3, [r6, #19]
    e4ea:	cmp	r4, #0
    e4ec:	beq.n	e4e0 <SdSpiCard::readOCR(unsigned long*)+0x28>
    e4ee:	mov	r0, r6
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    e4f0:	movs	r4, #0
    e4f2:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    e4f6:	mov	r0, r4
    e4f8:	pop	{r3, r4, r5, r6, r7, pc}
    e4fa:	mov	r0, r6
    e4fc:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e500:	mov	r0, r4
    e502:	pop	{r3, r4, r5, r6, r7, pc}

0000e504 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    e504:	push	{r3, r4, r5, lr}
    e506:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    e508:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    e50a:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    e50c:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e510:	cbz	r0, e524 <SdSpiCard::readRegister(unsigned char, void*)+0x20>
    e512:	movs	r3, #27
    e514:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e516:	ldrb	r0, [r4, #20]
    e518:	cbz	r0, e522 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    e51a:	mov	r0, r4
    e51c:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    e520:	movs	r0, #0
}
    e522:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    e524:	mov	r1, r5
    e526:	movs	r2, #16
    e528:	mov	r0, r4
    e52a:	bl	e150 <SdSpiCard::readData(unsigned char*, unsigned int)>
    e52e:	cmp	r0, #0
    e530:	beq.n	e516 <SdSpiCard::readRegister(unsigned char, void*)+0x12>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e532:	ldrb	r5, [r4, #20]
    e534:	cmp	r5, #0
    e536:	beq.n	e522 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    e538:	mov	r0, r4
    e53a:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e53e:	mov	r0, r5
    e540:	pop	{r3, r4, r5, pc}
    e542:	nop

0000e544 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    e544:	mov	r2, r1
    e546:	movs	r1, #9
    e548:	b.w	e504 <SdSpiCard::readRegister(unsigned char, void*)>

0000e54c <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    e54c:	mov	r2, r1
    e54e:	movs	r1, #10
    e550:	b.w	e504 <SdSpiCard::readRegister(unsigned char, void*)>

0000e554 <SdSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    e554:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    e556:	ldr	r3, [r0, #0]
    e558:	ldr	r2, [pc, #140]	; (e5e8 <SdSpiCard::sectorCount()+0x94>)
    e55a:	ldr	r3, [r3, #52]	; 0x34
    e55c:	cmp	r3, r2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    e55e:	sub	sp, #20
    e560:	bne.n	e5c2 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    e562:	mov	r2, sp
    e564:	movs	r1, #9
    e566:	bl	e504 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    e56a:	cbz	r0, e57c <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    e56c:	ldrb.w	r3, [sp]
    e570:	ands.w	r3, r3, #192	; 0xc0
    e574:	beq.n	e580 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    e576:	cmp	r3, #64	; 0x40
    e578:	beq.n	e5c8 <SdSpiCard::sectorCount()+0x74>
    e57a:	movs	r0, #0
}
    e57c:	add	sp, #20
    e57e:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    e580:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    e584:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    e588:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    e58c:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    e590:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    e594:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    e598:	and.w	r4, r4, #3
    e59c:	lsls	r4, r4, #1
    e59e:	lsls	r2, r2, #2
    e5a0:	and.w	r3, r3, #3
    e5a4:	orr.w	r0, r4, r0, lsr #7
    e5a8:	and.w	r1, r1, #15
    e5ac:	orr.w	r3, r2, r3, lsl #10
    e5b0:	add	r0, r1
    e5b2:	orr.w	r3, r3, r5, lsr #6
    e5b6:	adds	r3, #1
    e5b8:	subs	r0, #7
    e5ba:	lsl.w	r0, r3, r0
    e5be:	add	sp, #20
    e5c0:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    e5c2:	mov	r1, sp
    e5c4:	blx	r3
    e5c6:	b.n	e56a <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    e5c8:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    e5cc:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    e5d0:	ldrb.w	r0, [sp, #8]
    e5d4:	adds	r2, r3, #1
    e5d6:	and.w	r3, r1, #63	; 0x3f
    e5da:	add.w	r3, r2, r3, lsl #16
    e5de:	add.w	r0, r3, r0, lsl #8
    e5e2:	lsls	r0, r0, #10
}
    e5e4:	add	sp, #20
    e5e6:	pop	{r4, r5, pc}
    e5e8:	.word	0x0000e545

0000e5ec <SdSpiCard::readStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    e5ec:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    e5ee:	ldr	r3, [r0, #0]
    e5f0:	ldr	r5, [pc, #68]	; (e638 <SdSpiCard::readStart(unsigned long)+0x4c>)
    e5f2:	ldr	r3, [r3, #64]	; 0x40
    e5f4:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    e5f6:	sub	sp, #12
    e5f8:	mov	r4, r0
    e5fa:	mov	r2, r1
    e5fc:	bne.n	e62e <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    e5fe:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    e600:	cmp	r0, #3
    sector <<= 9;
    e602:	it	ne
    e604:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    e606:	movs	r1, #18
    e608:	mov	r0, r4
    e60a:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e60e:	cbz	r0, e628 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e610:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e612:	movs	r3, #12
    e614:	strb	r3, [r4, #19]
    e616:	cbnz	r0, e61c <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    e618:	add	sp, #12
    e61a:	pop	{r4, r5, pc}
    e61c:	mov	r0, r4
    e61e:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e622:	movs	r0, #0
    e624:	add	sp, #12
    e626:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    e628:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    e62a:	add	sp, #12
    e62c:	pop	{r4, r5, pc}
    e62e:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    e630:	blx	r3
    e632:	ldr	r2, [sp, #4]
    e634:	b.n	e600 <SdSpiCard::readStart(unsigned long)+0x14>
    e636:	nop
    e638:	.word	0x0000e031

0000e63c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    e63c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e640:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    e642:	ldrb	r1, [r0, #16]
    e644:	cmp	r1, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    e646:	mov	r6, r0
    e648:	mov	r4, r2
    e64a:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    e64c:	beq.n	e684 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    if (!readStart(sector)) {
    e64e:	mov	r1, r5
    e650:	mov	r0, r6
    e652:	bl	e5ec <SdSpiCard::readStart(unsigned long)>
    e656:	cbz	r0, e67e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    e658:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    e65a:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    e65c:	strb	r3, [r6, #16]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    e65e:	movs	r5, #0
    e660:	cbnz	r7, e668 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    e662:	b.n	e68c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    e664:	cmp	r7, r5
    e666:	beq.n	e68c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    if (!readData(dst, 512)) {
    e668:	mov	r1, r4
    e66a:	mov.w	r2, #512	; 0x200
    e66e:	mov	r0, r6
    e670:	bl	e150 <SdSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    e674:	adds	r5, #1
    e676:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    e67a:	cmp	r0, #0
    e67c:	bne.n	e664 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    e67e:	movs	r0, #0
    e680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    e684:	ldr	r3, [r0, #12]
    e686:	cmp	r3, r5
    e688:	bne.n	e64e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    e68a:	b.n	e65e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    e68c:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    e68e:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    e690:	add	r7, r3
    e692:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    e694:	cbnz	r2, e69c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x60>
    e696:	movs	r0, #1
    e698:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e69c:	ldr	r3, [r6, #0]
    e69e:	mov	r0, r6
    e6a0:	ldr	r3, [r3, #24]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    e6a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    e6a6:	bx	r3

0000e6a8 <SdSpiCard::readStop()>:
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    e6a8:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    e6aa:	movs	r2, #0
    e6ac:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    e6ae:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    e6b0:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e6b4:	ldrb	r4, [r5, #20]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    e6b6:	cbz	r0, e6c2 <SdSpiCard::readStop()+0x1a>
    e6b8:	movs	r3, #9
    e6ba:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e6bc:	cbnz	r4, e6d4 <SdSpiCard::readStop()+0x2c>
  return true;

 fail:
  spiStop();
  return false;
}
    e6be:	mov	r0, r4
    e6c0:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e6c2:	cbnz	r4, e6ca <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    e6c4:	movs	r4, #1

 fail:
  spiStop();
  return false;
}
    e6c6:	mov	r0, r4
    e6c8:	pop	{r3, r4, r5, pc}
    e6ca:	mov	r0, r5
    e6cc:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e6d0:	mov	r0, r4
    e6d2:	pop	{r3, r4, r5, pc}
    e6d4:	mov	r0, r5
    e6d6:	movs	r4, #0
    e6d8:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e6dc:	mov	r0, r4
    e6de:	pop	{r3, r4, r5, pc}

0000e6e0 <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    e6e0:	ldrb	r2, [r0, #16]
  m_curState = IDLE_STATE;
    e6e2:	movs	r1, #0
  if (state == WRITE_STATE) {
    e6e4:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    e6e6:	strb	r1, [r0, #16]
  if (state == WRITE_STATE) {
    e6e8:	beq.n	e6f6 <SdSpiCard::syncDevice()+0x16>
    return writeStop();
  }
  if (state == READ_STATE) {
    e6ea:	cmp	r2, #1
    e6ec:	beq.n	e6f2 <SdSpiCard::syncDevice()+0x12>
    return readStop();
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    e6ee:	movs	r0, #1
    e6f0:	bx	lr
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
  }
  if (state == READ_STATE) {
    return readStop();
    e6f2:	b.w	e6a8 <SdSpiCard::readStop()>
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
    e6f6:	ldr	r3, [r0, #0]
    e6f8:	ldr	r3, [r3, #76]	; 0x4c
    e6fa:	bx	r3

0000e6fc <SdSpiCard::writeStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    e6fc:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    e6fe:	ldr	r3, [r0, #0]
    e700:	ldr	r5, [pc, #68]	; (e748 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    e702:	ldr	r3, [r3, #64]	; 0x40
    e704:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    e706:	sub	sp, #12
    e708:	mov	r4, r0
    e70a:	mov	r2, r1
    e70c:	bne.n	e73e <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    e70e:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    e710:	cmp	r0, #3
    sector <<= 9;
    e712:	it	ne
    e714:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    e716:	movs	r1, #25
    e718:	mov	r0, r4
    e71a:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e71e:	cbz	r0, e738 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e720:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e722:	movs	r3, #14
    e724:	strb	r3, [r4, #19]
    e726:	cbnz	r0, e72c <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    e728:	add	sp, #12
    e72a:	pop	{r4, r5, pc}
    e72c:	mov	r0, r4
    e72e:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e732:	movs	r0, #0
    e734:	add	sp, #12
    e736:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    e738:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    e73a:	add	sp, #12
    e73c:	pop	{r4, r5, pc}
    e73e:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    e740:	blx	r3
    e742:	ldr	r2, [sp, #4]
    e744:	b.n	e710 <SdSpiCard::writeStart(unsigned long)+0x14>
    e746:	nop
    e748:	.word	0x0000e031

0000e74c <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    e74c:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    e74e:	ldr	r3, [r0, #0]
    e750:	ldr	r7, [pc, #172]	; (e800 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    e752:	ldr	r3, [r3, #52]	; 0x34
    e754:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    e756:	sub	sp, #20
    e758:	mov	r4, r0
    e75a:	mov	r5, r1
    e75c:	mov	r6, r2
    e75e:	bne.n	e7bc <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    e760:	mov	r2, sp
    e762:	movs	r1, #9
    e764:	bl	e504 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    e768:	cbz	r0, e790 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    e76a:	ldrb.w	r3, [sp, #10]
    e76e:	lsls	r2, r3, #25
    e770:	bpl.n	e7a0 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    e772:	ldrb	r3, [r4, #22]
    e774:	cmp	r3, #3
    firstSector <<= 9;
    e776:	it	ne
    e778:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    e77a:	mov	r2, r5
    e77c:	mov.w	r1, #32
    e780:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    e782:	it	ne
    e784:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    e786:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    e78a:	cbz	r0, e7c2 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e78c:	movs	r3, #38	; 0x26
    e78e:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e790:	ldrb	r0, [r4, #20]
    e792:	cbz	r0, e79c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    e794:	mov	r0, r4
    e796:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    e79a:	movs	r0, #0
}
    e79c:	add	sp, #20
    e79e:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    e7a0:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    e7a4:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    e7a8:	lsls	r3, r3, #1
    e7aa:	adds	r2, r6, #1
    e7ac:	orr.w	r3, r3, r1, lsr #7
    e7b0:	orrs	r2, r5
    e7b2:	tst	r3, r2
    e7b4:	beq.n	e772 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    e7b6:	movs	r3, #39	; 0x27
    e7b8:	strb	r3, [r4, #19]
    e7ba:	b.n	e790 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    e7bc:	mov	r1, sp
    e7be:	blx	r3
    e7c0:	b.n	e768 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    e7c2:	mov	r2, r6
    e7c4:	movs	r1, #33	; 0x21
    e7c6:	mov	r0, r4
    e7c8:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e7cc:	cmp	r0, #0
    e7ce:	bne.n	e78c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    e7d0:	mov	r2, r0
    e7d2:	movs	r1, #38	; 0x26
    e7d4:	mov	r0, r4
    e7d6:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e7da:	cmp	r0, #0
    e7dc:	bne.n	e78c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    e7de:	movw	r1, #10000	; 0x2710
    e7e2:	mov	r0, r4
    e7e4:	bl	e1d0 <SdSpiCard::waitNotBusy(unsigned short)>
    e7e8:	cbnz	r0, e7f0 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    e7ea:	movs	r3, #40	; 0x28
    e7ec:	strb	r3, [r4, #19]
    e7ee:	b.n	e790 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e7f0:	ldrb	r5, [r4, #20]
    e7f2:	cmp	r5, #0
    e7f4:	beq.n	e79c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    e7f6:	mov	r0, r4
    e7f8:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    e7fc:	mov	r0, r5
    e7fe:	b.n	e79c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    e800:	.word	0x0000e545

0000e804 <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    e804:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    e806:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    e80a:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    e80c:	bl	e1d0 <SdSpiCard::waitNotBusy(unsigned short)>
    e810:	mov	r6, r0
    e812:	cbnz	r0, e82c <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e814:	ldrb	r4, [r5, #20]
    e816:	movs	r3, #30
    e818:	strb	r3, [r5, #19]
    e81a:	cbnz	r4, e820 <SdSpiCard::writeStop()+0x1c>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    e81c:	mov	r0, r4
    e81e:	pop	{r4, r5, r6, pc}
    e820:	mov	r0, r5
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    e822:	mov	r4, r6
    e824:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    e828:	mov	r0, r4
    e82a:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    e82c:	movs	r1, #253	; 0xfd
    e82e:	adds	r0, r5, #4
    e830:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e834:	ldrb	r4, [r5, #20]
    e836:	cbnz	r4, e83e <SdSpiCard::writeStop()+0x3a>
    e838:	mov	r4, r6

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    e83a:	mov	r0, r4
    e83c:	pop	{r4, r5, r6, pc}
    e83e:	mov	r0, r5
    e840:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e844:	b.n	e81c <SdSpiCard::writeStop()+0x18>
    e846:	nop

0000e848 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    e848:	push	{r4, r5, r6, lr}
    e84a:	adds	r4, r0, #4
    e84c:	mov	r6, r2
    e84e:	mov	r5, r0
    e850:	mov	r0, r4
    e852:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    e856:	mov.w	r2, #512	; 0x200
    e85a:	mov	r1, r6
    e85c:	mov	r0, r4
    e85e:	bl	fbe8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    e862:	mov	r0, r4
    e864:	movs	r1, #255	; 0xff
    e866:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
    e86a:	mov	r0, r4
    e86c:	movs	r1, #255	; 0xff
    e86e:	bl	fbd0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    e872:	mov	r0, r4
    e874:	bl	fb94 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    e878:	and.w	r3, r0, #31
    e87c:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    e87e:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    e880:	beq.n	e896 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e882:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e884:	movs	r3, #32
    e886:	strb	r3, [r5, #19]
    e888:	cbnz	r0, e88c <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    e88a:	pop	{r4, r5, r6, pc}
    e88c:	mov	r0, r5
    e88e:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    e892:	movs	r0, #0
    e894:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    e896:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    e898:	pop	{r4, r5, r6, pc}
    e89a:	nop

0000e89c <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    e89c:	push	{r3, r4, r5, lr}
    e89e:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    e8a0:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    e8a4:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    e8a6:	bl	e1d0 <SdSpiCard::waitNotBusy(unsigned short)>
    e8aa:	cbnz	r0, e8be <SdSpiCard::writeData(unsigned char const*)+0x22>
    e8ac:	movs	r3, #36	; 0x24
    e8ae:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e8b0:	ldrb	r0, [r4, #20]
    e8b2:	cbz	r0, e8bc <SdSpiCard::writeData(unsigned char const*)+0x20>
    e8b4:	mov	r0, r4
    e8b6:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    e8ba:	movs	r0, #0
}
    e8bc:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    e8be:	mov	r2, r5
    e8c0:	movs	r1, #252	; 0xfc
    e8c2:	mov	r0, r4
    e8c4:	bl	e848 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    e8c8:	cmp	r0, #0
    e8ca:	beq.n	e8b0 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

 fail:
  spiStop();
  return false;
}
    e8cc:	pop	{r3, r4, r5, pc}
    e8ce:	nop

0000e8d0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    e8d0:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    e8d2:	ldr	r3, [r0, #0]
    e8d4:	ldr	r5, [pc, #88]	; (e930 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x60>)
    e8d6:	ldr	r3, [r3, #64]	; 0x40
    e8d8:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    e8da:	sub	sp, #8
    e8dc:	mov	r4, r0
    e8de:	mov	r6, r2
    e8e0:	bne.n	e928 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x58>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    e8e2:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    e8e4:	cmp	r0, #3
    sector <<= 9;
    e8e6:	it	ne
    e8e8:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    e8ea:	mov	r2, r1
    e8ec:	mov	r0, r4
    e8ee:	movs	r1, #24
    e8f0:	bl	e20c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    e8f4:	cbz	r0, e90a <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    e8f6:	movs	r3, #13
    e8f8:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e8fa:	ldrb	r0, [r4, #20]
    e8fc:	cbz	r0, e906 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    e8fe:	mov	r0, r4
    e900:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    e904:	movs	r0, #0
}
    e906:	add	sp, #8
    e908:	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    e90a:	mov	r2, r6
    e90c:	movs	r1, #254	; 0xfe
    e90e:	mov	r0, r4
    e910:	bl	e848 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    e914:	cmp	r0, #0
    e916:	beq.n	e8fa <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    e918:	ldrb	r5, [r4, #20]
    e91a:	cmp	r5, #0
    e91c:	beq.n	e906 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    e91e:	mov	r0, r4
    e920:	bl	e060 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    e924:	mov	r0, r5
    e926:	b.n	e906 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    e928:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    e92a:	blx	r3
    e92c:	ldr	r1, [sp, #4]
    e92e:	b.n	e8e4 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x14>
    e930:	.word	0x0000e031

0000e934 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    e934:	push	{r4}
    if (m_sharedSpi) {
    e936:	ldrb	r4, [r0, #17]
    e938:	cbnz	r4, e948 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    e93a:	ldr	r4, [r0, #0]
    e93c:	ldr	r4, [r4, #32]
    e93e:	movs	r3, #1
    e940:	mov	ip, r4
    }
  }
    e942:	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    e946:	bx	ip
    }
  }
    e948:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    e94c:	b.w	e8d0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>

0000e950 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    e950:	push	{r4}
  SDHC_IRQSIGEN = 0;
    e952:	ldr	r4, [pc, #28]	; (e970 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    e954:	ldr	r2, [pc, #28]	; (e974 <sdIrs()+0x24>)
    e956:	ldr	r1, [pc, #32]	; (e978 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    e958:	ldr	r0, [pc, #32]	; (e97c <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    e95a:	movs	r3, #0
    e95c:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    e95e:	ldr	r4, [r2, #0]
    e960:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    e962:	ldr	r1, [r1, #0]
    e964:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    e966:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    e96a:	strb	r3, [r0, #0]
}
    e96c:	bx	lr
    e96e:	nop
    e970:	.word	0x400b1038
    e974:	.word	0x400b1030
    e978:	.word	0x1fff2480
    e97c:	.word	0x1fff2498

0000e980 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    e980:	ldr	r3, [pc, #12]	; (e990 <isBusyCommandComplete()+0x10>)
    e982:	ldr	r0, [pc, #16]	; (e994 <isBusyCommandComplete()+0x14>)
    e984:	ldr	r3, [r3, #0]
    e986:	ands	r0, r3
}
    e988:	clz	r0, r0
    e98c:	lsrs	r0, r0, #5
    e98e:	bx	lr
    e990:	.word	0x400b1030
    e994:	.word	0x000f0001

0000e998 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    e998:	ldr	r3, [pc, #8]	; (e9a4 <isBusyCommandInhibit()+0xc>)
    e99a:	ldr	r0, [r3, #0]
}
    e99c:	and.w	r0, r0, #1
    e9a0:	bx	lr
    e9a2:	nop
    e9a4:	.word	0x400b1024

0000e9a8 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    e9a8:	ldr	r3, [pc, #12]	; (e9b8 <isBusyDat()+0x10>)
    e9aa:	ldr	r0, [r3, #0]
    e9ac:	eor.w	r0, r0, #16777216	; 0x1000000
}
    e9b0:	ubfx	r0, r0, #24, #1
    e9b4:	bx	lr
    e9b6:	nop
    e9b8:	.word	0x400b1024

0000e9bc <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    e9bc:	ldr	r3, [pc, #4]	; (e9c4 <isBusyDMA()+0x8>)
    e9be:	ldrb	r0, [r3, #0]
}
    e9c0:	bx	lr
    e9c2:	nop
    e9c4:	.word	0x1fff2498

0000e9c8 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    e9c8:	ldr	r3, [pc, #12]	; (e9d8 <isBusyFifoRead()+0x10>)
    e9ca:	ldr	r0, [r3, #0]
    e9cc:	eor.w	r0, r0, #2048	; 0x800
}
    e9d0:	ubfx	r0, r0, #11, #1
    e9d4:	bx	lr
    e9d6:	nop
    e9d8:	.word	0x400b1024

0000e9dc <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    e9dc:	ldr	r3, [pc, #12]	; (e9ec <isBusyFifoWrite()+0x10>)
    e9de:	ldr	r0, [r3, #0]
    e9e0:	eor.w	r0, r0, #1024	; 0x400
}
    e9e4:	ubfx	r0, r0, #10, #1
    e9e8:	bx	lr
    e9ea:	nop
    e9ec:	.word	0x400b1024

0000e9f0 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    e9f0:	ldr	r3, [pc, #12]	; (ea00 <isBusyTransferComplete()+0x10>)
    e9f2:	ldr	r0, [pc, #16]	; (ea04 <isBusyTransferComplete()+0x14>)
    e9f4:	ldr	r3, [r3, #0]
    e9f6:	ands	r0, r3
}
    e9f8:	clz	r0, r0
    e9fc:	lsrs	r0, r0, #5
    e9fe:	bx	lr
    ea00:	.word	0x400b1030
    ea04:	.word	0x117f0002

0000ea08 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    ea08:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    ea0c:	ldr	r3, [pc, #176]	; (eac0 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    ea0e:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    ea12:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    ea14:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    ea16:	bhi.n	eab0 <setSdclk(unsigned long)+0xa8>
    ea18:	ldr	r5, [pc, #168]	; (eac4 <setSdclk(unsigned long)+0xbc>)
    ea1a:	movs	r2, #8
    ea1c:	movs	r1, #1
    sdclkfs <<= 1;
    ea1e:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    ea20:	lsls	r3, r1, #4
    ea22:	udiv	r3, r5, r3
    ea26:	cmp	r0, r3
    ea28:	ldr	r4, [pc, #152]	; (eac4 <setSdclk(unsigned long)+0xbc>)
    ea2a:	bcs.n	eaa8 <setSdclk(unsigned long)+0xa0>
    ea2c:	subs	r2, #1
    ea2e:	bne.n	ea1e <setSdclk(unsigned long)+0x16>
    ea30:	udiv	r4, r4, r1
    ea34:	lsrs	r3, r1, #1
    ea36:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ea38:	cmp	r0, r4
    ea3a:	bcs.n	eab8 <setSdclk(unsigned long)+0xb0>
    ea3c:	ldr	r6, [pc, #132]	; (eac4 <setSdclk(unsigned long)+0xbc>)
    ea3e:	lsls	r3, r1, #1
    ea40:	movs	r2, #1
    ea42:	b.n	ea46 <setSdclk(unsigned long)+0x3e>
    ea44:	mov	r3, r4
    ea46:	udiv	r4, r6, r3
    ea4a:	cmp	r0, r4
    dvs++;
    ea4c:	add.w	r5, r2, #1
    ea50:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ea54:	bcs.n	eaa4 <setSdclk(unsigned long)+0x9c>
    ea56:	cmp	r5, #16
    ea58:	mov	r2, r5
    ea5a:	bne.n	ea44 <setSdclk(unsigned long)+0x3c>
    ea5c:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    ea5e:	ldr	r6, [pc, #104]	; (eac8 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    ea60:	ldr	r4, [pc, #104]	; (eacc <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    ea62:	ldr	r0, [pc, #96]	; (eac4 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    ea64:	ldr	r1, [pc, #104]	; (ead0 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    ea66:	mov.w	r5, #1000	; 0x3e8
    ea6a:	mul.w	r3, r5, r3
    ea6e:	udiv	r3, r0, r3
    ea72:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    ea74:	ldr	r3, [r4, #0]
    ea76:	bic.w	r3, r3, #8
    ea7a:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    ea7c:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    ea7e:	bic.w	r3, r0, #1044480	; 0xff000
    ea82:	bic.w	r3, r3, #4080	; 0xff0
    ea86:	orr.w	r3, r3, #917504	; 0xe0000
    ea8a:	orrs	r3, r7
    ea8c:	orrs	r2, r3
    ea8e:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    ea90:	ldr	r3, [r1, #0]
    ea92:	lsls	r3, r3, #28
    ea94:	bpl.n	ea90 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    ea96:	ldr	r2, [pc, #52]	; (eacc <setSdclk(unsigned long)+0xc4>)
    ea98:	ldr	r3, [r2, #0]
    ea9a:	orr.w	r3, r3, #8
    ea9e:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    eaa0:	pop	{r4, r5, r6, r7}
    eaa2:	bx	lr
    eaa4:	lsls	r2, r2, #4
    eaa6:	b.n	ea5e <setSdclk(unsigned long)+0x56>
    eaa8:	udiv	r4, r4, r1
    eaac:	lsls	r7, r1, #7
    eaae:	b.n	ea38 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    eab0:	ldr	r4, [pc, #16]	; (eac4 <setSdclk(unsigned long)+0xbc>)
    eab2:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    eab4:	movs	r1, #1
    eab6:	b.n	ea38 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    eab8:	mov	r3, r1
    eaba:	movs	r2, #0
    eabc:	b.n	ea5e <setSdclk(unsigned long)+0x56>
    eabe:	nop
    eac0:	.word	0x005b8d7f
    eac4:	.word	0x05b8d800
    eac8:	.word	0x1fff249c
    eacc:	.word	0x400b102c
    ead0:	.word	0x400b1024

0000ead4 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    ead4:	ldr	r3, [pc, #4]	; (eadc <SdioCard::errorCode() const+0x8>)
}
    ead6:	ldrb	r0, [r3, #0]
    ead8:	bx	lr
    eada:	nop
    eadc:	.word	0x1fff0a04

0000eae0 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    eae0:	ldr	r3, [pc, #4]	; (eae8 <SdioCard::errorData() const+0x8>)
    eae2:	ldr	r0, [r3, #0]
}
    eae4:	bx	lr
    eae6:	nop
    eae8:	.word	0x1fff2480

0000eaec <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    eaec:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    eaee:	ldr	r4, [pc, #20]	; (eb04 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    eaf0:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    eaf2:	ldmia	r4!, {r0, r1, r2, r3}
    eaf4:	str	r0, [r5, #0]
    eaf6:	str	r1, [r5, #4]
    eaf8:	str	r2, [r5, #8]
    eafa:	str	r3, [r5, #12]
  return true;
}
    eafc:	movs	r0, #1
    eafe:	pop	{r4, r5}
    eb00:	bx	lr
    eb02:	nop
    eb04:	.word	0x1fff245c

0000eb08 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    eb08:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    eb0a:	ldr	r4, [pc, #20]	; (eb20 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    eb0c:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    eb0e:	ldmia	r4!, {r0, r1, r2, r3}
    eb10:	str	r0, [r5, #0]
    eb12:	str	r1, [r5, #4]
    eb14:	str	r2, [r5, #8]
    eb16:	str	r3, [r5, #12]
  return true;
}
    eb18:	movs	r0, #1
    eb1a:	pop	{r4, r5}
    eb1c:	bx	lr
    eb1e:	nop
    eb20:	.word	0x1fff2488

0000eb24 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    eb24:	ldr	r3, [pc, #8]	; (eb30 <SdioCard::readOCR(unsigned long*)+0xc>)
    eb26:	ldr	r3, [r3, #0]
    eb28:	str	r3, [r1, #0]
  return true;
}
    eb2a:	movs	r0, #1
    eb2c:	bx	lr
    eb2e:	nop
    eb30:	.word	0x1fff2474

0000eb34 <SdioCard::~SdioCard()>:
    eb34:	bx	lr
    eb36:	nop

0000eb38 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    eb38:	push	{r3, r4, r5, r6, r7, lr}
    eb3a:	mov	r5, r0
  uint32_t m = micros();
    eb3c:	bl	1060c <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    eb40:	ldr	r7, [pc, #24]	; (eb5c <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    eb42:	mov	r6, r0
    eb44:	b.n	eb50 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    eb46:	bl	1060c <micros>
    eb4a:	subs	r0, r0, r6
    eb4c:	cmp	r0, r7
    eb4e:	bhi.n	eb58 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    eb50:	blx	r5
    eb52:	mov	r4, r0
    eb54:	cmp	r0, #0
    eb56:	bne.n	eb46 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    eb58:	mov	r0, r4
    eb5a:	pop	{r3, r4, r5, r6, r7, pc}
    eb5c:	.word	0x000f4240

0000eb60 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    eb60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    eb64:	ldr.w	r8, [pc, #64]	; eba8 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    eb68:	ldr	r7, [pc, #56]	; (eba4 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    eb6a:	str.w	r0, [r8]
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    eb6e:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    eb70:	bl	1060c <micros>
    eb74:	mov	r6, r0
    eb76:	b.n	eb86 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    eb78:	bl	1060c <micros>
    eb7c:	subs	r0, r0, r6
    eb7e:	cmp	r0, r7
    eb80:	bhi.n	eb98 <yieldTimeout(bool (*)())+0x38>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    eb82:	bl	115e8 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    eb86:	blx	r5
    eb88:	mov	r4, r0
    eb8a:	cmp	r0, #0
    eb8c:	bne.n	eb78 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    eb8e:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    eb92:	mov	r0, r4
    eb94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    eb98:	movs	r3, #0
    eb9a:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    eb9e:	mov	r0, r4
    eba0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eba4:	.word	0x000f4240
    eba8:	.word	0x1fff246c

0000ebac <SdioCard::~SdioCard()>:
    ebac:	push	{r4, lr}
    ebae:	movs	r1, #12
    ebb0:	mov	r4, r0
    ebb2:	bl	119b0 <operator delete(void*, unsigned int)>
    ebb6:	mov	r0, r4
    ebb8:	pop	{r4, pc}
    ebba:	nop

0000ebbc <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    ebbc:	ldr	r3, [pc, #20]	; (ebd4 <SdioCard::type() const+0x18>)
    ebbe:	ldrb	r3, [r3, #0]
    ebc0:	cbz	r3, ebd0 <SdioCard::type() const+0x14>
    ebc2:	ldr	r3, [pc, #20]	; (ebd8 <SdioCard::type() const+0x1c>)
    ebc4:	ldrb	r3, [r3, #0]
    ebc6:	cmp	r3, #0
    ebc8:	ite	ne
    ebca:	movne	r0, #3
    ebcc:	moveq	r0, #2
    ebce:	bx	lr
    ebd0:	movs	r0, #1
}
    ebd2:	bx	lr
    ebd4:	.word	0x1fff2458
    ebd8:	.word	0x1fff2470

0000ebdc <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    ebdc:	push	{r3, r4, r5, lr}
    ebde:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    ebe0:	ldr	r0, [pc, #60]	; (ec20 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    ebe2:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    ebe4:	bl	eb38 <waitTimeout(bool (*)())>
    ebe8:	cbz	r0, ebee <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ebea:	movs	r0, #0
    ebec:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    ebee:	ldr	r2, [pc, #52]	; (ec24 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    ebf0:	ldr	r3, [pc, #52]	; (ec28 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    ebf2:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    ebf4:	ldr	r0, [pc, #52]	; (ec2c <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    ebf6:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    ebf8:	bl	eb38 <waitTimeout(bool (*)())>
    ebfc:	cmp	r0, #0
    ebfe:	bne.n	ebea <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    ec00:	ldr	r2, [pc, #44]	; (ec30 <cardCommand(unsigned long, unsigned long)+0x54>)
    ec02:	ldr	r3, [pc, #48]	; (ec34 <cardCommand(unsigned long, unsigned long)+0x58>)
    ec04:	ldr	r1, [r2, #0]
    ec06:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ec08:	ldr	r1, [r3, #0]
    ec0a:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ec0c:	ldr	r2, [r3, #0]
    ec0e:	lsls	r2, r2, #31
    ec10:	bpl.n	ebea <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    ec12:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ec14:	tst.w	r3, #983040	; 0xf0000
    ec18:	bne.n	ebea <cardCommand(unsigned long, unsigned long)+0xe>
    ec1a:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    ec1c:	pop	{r3, r4, r5, pc}
    ec1e:	nop
    ec20:	.word	0x0000e999
    ec24:	.word	0x400b1008
    ec28:	.word	0x400b100c
    ec2c:	.word	0x0000e981
    ec30:	.word	0x400b1030
    ec34:	.word	0x1fff2480

0000ec38 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    ec38:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ec3a:	ldr	r3, [pc, #28]	; (ec58 <isBusyCMD13()+0x20>)
    ec3c:	ldr	r0, [pc, #28]	; (ec5c <isBusyCMD13()+0x24>)
    ec3e:	ldr	r1, [r3, #0]
    ec40:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    ec44:	cbz	r0, ec54 <isBusyCMD13()+0x1c>
    ec46:	ldr	r3, [pc, #24]	; (ec60 <isBusyCMD13()+0x28>)
    ec48:	ldr	r0, [r3, #0]
    ec4a:	eor.w	r0, r0, #256	; 0x100
    ec4e:	ubfx	r0, r0, #8, #1
    ec52:	pop	{r3, pc}
    ec54:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    ec56:	pop	{r3, pc}
    ec58:	.word	0x1fff2478
    ec5c:	.word	0x0d1a0000
    ec60:	.word	0x400b1010

0000ec64 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    ec64:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ec66:	ldr	r3, [pc, #16]	; (ec78 <SdioCard::status()+0x14>)
    ec68:	ldr	r0, [pc, #16]	; (ec7c <SdioCard::status()+0x18>)
    ec6a:	ldr	r1, [r3, #0]
    ec6c:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    ec70:	cbz	r0, ec76 <SdioCard::status()+0x12>
    ec72:	ldr	r3, [pc, #12]	; (ec80 <SdioCard::status()+0x1c>)
    ec74:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    ec76:	pop	{r3, pc}
    ec78:	.word	0x1fff2478
    ec7c:	.word	0x0d1a0000
    ec80:	.word	0x400b1010

0000ec84 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    ec84:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    ec86:	ldr	r3, [pc, #84]	; (ecdc <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    ec88:	sub	sp, #20
    ec8a:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    ec8c:	ldr	r1, [r3, #0]
    ec8e:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    ec92:	cbz	r0, ecd6 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    ec94:	ldr	r2, [pc, #72]	; (ece0 <readReg16(unsigned long, void*)+0x5c>)
    ec96:	ldr	r3, [pc, #76]	; (ece4 <readReg16(unsigned long, void*)+0x60>)
    ec98:	ldr	r2, [r2, #0]
    ec9a:	str	r2, [sp, #0]
    ec9c:	ldr	r1, [r3, #0]
    ec9e:	str	r1, [sp, #4]
    eca0:	ldr	r1, [r3, #4]
    eca2:	str	r1, [sp, #8]
    eca4:	adds	r3, #8
    eca6:	add.w	r4, r5, #15
    ecaa:	ldr	r3, [r3, #0]
    ecac:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    ecae:	movs	r3, #0
    ecb0:	b.n	ecb6 <readReg16(unsigned long, void*)+0x32>
    ecb2:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ecb6:	and.w	r1, r3, #3
    ecba:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    ecbc:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ecbe:	lsrs	r2, r1
    ecc0:	add.w	lr, sp, #16
    ecc4:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    ecc8:	cmp	r3, #15
    ecca:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    eccc:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    ecd0:	bne.n	ecb2 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    ecd2:	movs	r3, #0
    ecd4:	strb	r3, [r5, #15]
  return true;
}
    ecd6:	add	sp, #20
    ecd8:	pop	{r4, r5, pc}
    ecda:	nop
    ecdc:	.word	0x1fff2478
    ece0:	.word	0x400b1010
    ece4:	.word	0x400b1014

0000ece8 <waitDmaStatus() [clone .part.4]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    ece8:	ldr	r3, [pc, #20]	; (ed00 <waitDmaStatus() [clone .part.4]+0x18>)
    ecea:	ldr	r0, [r3, #0]
    ecec:	ands.w	r0, r0, #2
    ecf0:	beq.n	ecfe <waitDmaStatus() [clone .part.4]+0x16>
    ecf2:	ldr	r3, [r3, #0]
    ecf4:	ldr	r0, [pc, #12]	; (ed04 <waitDmaStatus() [clone .part.4]+0x1c>)
    ecf6:	ands	r0, r3
    ecf8:	clz	r0, r0
    ecfc:	lsrs	r0, r0, #5
}
    ecfe:	bx	lr
    ed00:	.word	0x1fff2480
    ed04:	.word	0x117f0000

0000ed08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    ed08:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    ed0a:	lsls	r4, r2, #30
    ed0c:	bne.n	ed10 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    ed0e:	cbnz	r3, ed22 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ed10:	ldr	r1, [pc, #124]	; (ed90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    ed12:	ldr	r3, [pc, #128]	; (ed94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ed14:	movs	r0, #37	; 0x25
  m_errorLine = line;
    ed16:	movw	r2, #503	; 0x1f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ed1a:	strb	r0, [r1, #0]
  m_errorLine = line;
    ed1c:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    ed1e:	movs	r0, #0
    ed20:	pop	{r3, r4, r5, r6, r7, pc}
    ed22:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    ed24:	ldr	r0, [pc, #112]	; (ed98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    ed26:	mov	r4, r3
    ed28:	mov	r7, r1
    ed2a:	mov	r5, r2
    ed2c:	bl	eb60 <yieldTimeout(bool (*)())>
    ed30:	cbnz	r0, ed7a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    ed32:	ldr	r1, [pc, #104]	; (ed9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    ed34:	ldr	r2, [pc, #104]	; (eda0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    ed36:	ldr.w	lr, [pc, #128]	; edb8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    ed3a:	mov.w	ip, #1
    ed3e:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    ed42:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    ed44:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    ed46:	ldr	r4, [pc, #92]	; (eda4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    ed48:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    ed4a:	ldr	r2, [pc, #92]	; (eda8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    ed4c:	ldr	r1, [pc, #92]	; (edac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    ed4e:	ldr	r0, [pc, #96]	; (edb0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    ed50:	orr.w	r3, r3, #512	; 0x200
    ed54:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    ed56:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    ed58:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    ed5a:	cbnz	r3, ed8a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    ed5c:	lsls	r1, r7, #9
    ed5e:	mov	r0, r6
    ed60:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    ed64:	cmp	r0, #0
    ed66:	beq.n	ed1e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    ed68:	ldr	r0, [pc, #72]	; (edb4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    ed6a:	bl	eb60 <yieldTimeout(bool (*)())>
    ed6e:	cmp	r0, #0
    ed70:	bne.n	ed1e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    ed72:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ed76:	b.w	ece8 <waitDmaStatus() [clone .part.4]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ed7a:	ldr	r1, [pc, #20]	; (ed90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    ed7c:	ldr	r3, [pc, #20]	; (ed94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ed7e:	movs	r0, #10
  m_errorLine = line;
    ed80:	mov.w	r2, #506	; 0x1fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ed84:	strb	r0, [r1, #0]
  m_errorLine = line;
    ed86:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    ed88:	b.n	ed1e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    ed8a:	mov	r1, r7
    ed8c:	b.n	ed5e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    ed8e:	nop
    ed90:	.word	0x1fff0a04
    ed94:	.word	0x1fff24a0
    ed98:	.word	0x0000ec39
    ed9c:	.word	0x1fff2480
    eda0:	.word	0x400b1000
    eda4:	.word	0x400b1004
    eda8:	.word	0x1fff2470
    edac:	.word	0x400b1038
    edb0:	.word	0x117f0002
    edb4:	.word	0x0000e9bd
    edb8:	.word	0x1fff2498

0000edbc <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    edbc:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    edbe:	ldr	r1, [pc, #100]	; (ee24 <SdioCard::sectorCount()+0x68>)
    edc0:	ldrb	r3, [r1, #0]
    edc2:	ands.w	r3, r3, #192	; 0xc0
    edc6:	beq.n	edec <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    edc8:	cmp	r3, #64	; 0x40
    edca:	beq.n	edd2 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    edcc:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    edce:	pop	{r4, r5, r6}
    edd0:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    edd2:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    edd4:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    edd6:	ldrb	r0, [r1, #8]
    edd8:	adds	r2, r3, #1
    edda:	and.w	r3, r4, #63	; 0x3f
    edde:	add.w	r3, r2, r3, lsl #16
    ede2:	add.w	r0, r3, r0, lsl #8
    ede6:	lsls	r0, r0, #10
    ede8:	pop	{r4, r5, r6}
    edea:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    edec:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    edee:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    edf0:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    edf2:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    edf4:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    edf6:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    edf8:	and.w	r1, r5, #3
    edfc:	lsls	r1, r1, #1
    edfe:	and.w	r3, r3, #3
    ee02:	lsls	r2, r2, #2
    ee04:	orr.w	r0, r1, r0, lsr #7
    ee08:	orr.w	r3, r2, r3, lsl #10
    ee0c:	and.w	r1, r4, #15
    ee10:	orr.w	r3, r3, r6, lsr #6
    ee14:	add	r0, r1
    ee16:	subs	r0, #7
    ee18:	adds	r3, #1
    ee1a:	lsl.w	r0, r3, r0
    ee1e:	pop	{r4, r5, r6}
    ee20:	bx	lr
    ee22:	nop
    ee24:	.word	0x1fff2488

0000ee28 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    ee28:	push	{r4, r5, r6, lr}
    ee2a:	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    ee2c:	ldrb	r1, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    ee2e:	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    ee30:	cbnz	r1, ee8e <SdioCard::erase(unsigned long, unsigned long)+0x66>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    ee32:	ldr	r2, [pc, #192]	; (eef4 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    ee34:	ldrb	r3, [r2, #10]
    ee36:	and.w	r0, r3, #64	; 0x40
    ee3a:	and.w	r4, r0, #255	; 0xff
    ee3e:	cbz	r0, ee68 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    ee40:	ldr	r3, [pc, #180]	; (eef8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    ee42:	ldrb	r3, [r3, #0]
    ee44:	cbnz	r3, ee4a <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    ee46:	lsls	r5, r5, #9
    lastSector <<= 9;
    ee48:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    ee4a:	mov	r1, r5
    ee4c:	ldr	r0, [pc, #172]	; (eefc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    ee4e:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    ee52:	mov	r4, r0
    ee54:	cbnz	r0, ee9e <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ee56:	ldr	r1, [pc, #168]	; (ef00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    ee58:	ldr	r3, [pc, #168]	; (ef04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ee5a:	movs	r0, #15
  m_errorLine = line;
    ee5c:	mov.w	r2, #752	; 0x2f0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ee60:	strb	r0, [r1, #0]
  m_errorLine = line;
    ee62:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    ee64:	mov	r0, r4
    ee66:	pop	{r4, r5, r6, pc}
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    ee68:	ldrb	r1, [r2, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    ee6a:	and.w	r3, r3, #63	; 0x3f
    ee6e:	lsls	r3, r3, #1
    ee70:	adds	r2, r6, #1
    ee72:	orr.w	r3, r3, r1, lsr #7
    ee76:	orrs	r2, r5
    ee78:	tst	r3, r2
    ee7a:	beq.n	ee40 <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ee7c:	ldr	r1, [pc, #128]	; (ef00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    ee7e:	ldr	r3, [pc, #132]	; (ef04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ee80:	movs	r0, #39	; 0x27
  m_errorLine = line;
    ee82:	mov.w	r2, #744	; 0x2e8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ee86:	strb	r0, [r1, #0]
  m_errorLine = line;
    ee88:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    ee8a:	mov	r0, r4
    ee8c:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    ee8e:	ldr	r3, [r0, #0]
    ee90:	ldr	r3, [r3, #24]
    ee92:	blx	r3
    ee94:	mov	r4, r0
    ee96:	cmp	r0, #0
    ee98:	bne.n	ee32 <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    ee9a:	mov	r0, r4
    ee9c:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    ee9e:	mov	r1, r6
    eea0:	ldr	r0, [pc, #100]	; (ef08 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    eea2:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    eea6:	mov	r4, r0
    eea8:	cbnz	r0, eeba <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eeaa:	ldr	r1, [pc, #84]	; (ef00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    eeac:	ldr	r3, [pc, #84]	; (ef04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eeae:	movs	r0, #16
  m_errorLine = line;
    eeb0:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eeb4:	strb	r0, [r1, #0]
  m_errorLine = line;
    eeb6:	str	r2, [r3, #0]
    eeb8:	b.n	ee64 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    eeba:	movs	r1, #0
    eebc:	ldr	r0, [pc, #76]	; (ef0c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    eebe:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    eec2:	mov	r4, r0
    eec4:	cbnz	r0, eed6 <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eec6:	ldr	r1, [pc, #56]	; (ef00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    eec8:	ldr	r3, [pc, #56]	; (ef04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eeca:	movs	r0, #17
  m_errorLine = line;
    eecc:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eed0:	strb	r0, [r1, #0]
  m_errorLine = line;
    eed2:	str	r2, [r3, #0]
    eed4:	b.n	ee64 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    eed6:	ldr	r0, [pc, #56]	; (ef10 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    eed8:	bl	eb38 <waitTimeout(bool (*)())>
    eedc:	cmp	r0, #0
    eede:	beq.n	ee64 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eee0:	ldr	r1, [pc, #28]	; (ef00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    eee2:	ldr	r3, [pc, #32]	; (ef04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eee4:	movs	r0, #40	; 0x28
  m_errorLine = line;
    eee6:	movw	r2, #761	; 0x2f9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    eeea:	strb	r0, [r1, #0]
  m_errorLine = line;
    eeec:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    eeee:	movs	r4, #0
    eef0:	b.n	ee64 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    eef2:	nop
    eef4:	.word	0x1fff2488
    eef8:	.word	0x1fff2470
    eefc:	.word	0x201a0000
    ef00:	.word	0x1fff0a04
    ef04:	.word	0x1fff24a0
    ef08:	.word	0x211a0000
    ef0c:	.word	0x261b0000
    ef10:	.word	0x0000ec39

0000ef14 <waitTransferComplete() [clone .part.8]>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    ef14:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    ef16:	ldr	r0, [pc, #56]	; (ef50 <waitTransferComplete() [clone .part.8]+0x3c>)
    ef18:	bl	eb38 <waitTimeout(bool (*)())>
  m_transferActive = false;
    ef1c:	ldr	r1, [pc, #52]	; (ef54 <waitTransferComplete() [clone .part.8]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    ef1e:	ldr	r2, [pc, #56]	; (ef58 <waitTransferComplete() [clone .part.8]+0x44>)
    ef20:	ldr	r3, [pc, #56]	; (ef5c <waitTransferComplete() [clone .part.8]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    ef22:	movs	r4, #0
    ef24:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    ef26:	ldr	r1, [r2, #0]
    ef28:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ef2a:	ldr	r1, [r3, #0]
    ef2c:	str	r1, [r2, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ef2e:	cbnz	r0, ef38 <waitTransferComplete() [clone .part.8]+0x24>
    ef30:	ldr	r2, [r3, #0]
    ef32:	ldr	r3, [pc, #44]	; (ef60 <waitTransferComplete() [clone .part.8]+0x4c>)
    ef34:	ands	r3, r2
    ef36:	cbz	r3, ef4a <waitTransferComplete() [clone .part.8]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ef38:	ldr	r1, [pc, #40]	; (ef64 <waitTransferComplete() [clone .part.8]+0x50>)
  m_errorLine = line;
    ef3a:	ldr	r3, [pc, #44]	; (ef68 <waitTransferComplete() [clone .part.8]+0x54>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ef3c:	movs	r0, #31
  m_errorLine = line;
    ef3e:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ef42:	strb	r0, [r1, #0]
  m_errorLine = line;
    ef44:	str	r2, [r3, #0]
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    ef46:	movs	r0, #0
  }
  return true;
}
    ef48:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    ef4a:	movs	r0, #1
    ef4c:	pop	{r4, pc}
    ef4e:	nop
    ef50:	.word	0x0000e9f1
    ef54:	.word	0x1fff247c
    ef58:	.word	0x400b1030
    ef5c:	.word	0x1fff2480
    ef60:	.word	0x117f0000
    ef64:	.word	0x1fff0a04
    ef68:	.word	0x1fff24a0

0000ef6c <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    ef6c:	push	{r4, r5, r6, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ef6e:	ldr	r4, [pc, #104]	; (efd8 <SdioCard::readStop()+0x6c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ef70:	ldr	r0, [pc, #104]	; (efdc <SdioCard::readStop()+0x70>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ef72:	ldr	r3, [r4, #0]
    ef74:	bic.w	r3, r3, #65536	; 0x10000
    ef78:	str	r3, [r4, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ef7a:	movs	r1, #0
    ef7c:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    ef80:	mov	r5, r0
    ef82:	cbnz	r0, ef96 <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ef84:	ldr	r1, [pc, #88]	; (efe0 <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    ef86:	ldr	r3, [pc, #92]	; (efe4 <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ef88:	movs	r0, #9
  m_errorLine = line;
    ef8a:	movw	r2, #575	; 0x23f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ef8e:	strb	r0, [r1, #0]
  m_errorLine = line;
    ef90:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    ef92:	mov	r0, r5
    ef94:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    ef96:	ldr	r0, [pc, #80]	; (efe8 <SdioCard::readStop()+0x7c>)
    ef98:	bl	eb60 <yieldTimeout(bool (*)())>
    ef9c:	cbnz	r0, efc2 <SdioCard::readStop()+0x56>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    ef9e:	ldr	r3, [pc, #76]	; (efec <SdioCard::readStop()+0x80>)
    efa0:	ldr	r3, [r3, #0]
    efa2:	lsls	r3, r3, #30
    efa4:	bpl.n	ef92 <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    efa6:	ldr	r1, [pc, #72]	; (eff0 <SdioCard::readStop()+0x84>)
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    efa8:	ldr	r0, [pc, #72]	; (eff4 <SdioCard::readStop()+0x88>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    efaa:	ldr	r6, [r1, #0]
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    efac:	ldr	r3, [r4, #0]
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    efae:	ldr	r2, [r0, #0]
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    efb0:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    efb4:	orr.w	r2, r2, #67108864	; 0x4000000
    efb8:	str	r2, [r0, #0]
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    efba:	str	r6, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    efbc:	mov	r0, r5
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    SDHC_PROCTL = proctl;
    efbe:	str	r3, [r4, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    efc0:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    efc2:	ldr	r1, [pc, #28]	; (efe0 <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    efc4:	ldr	r3, [pc, #28]	; (efe4 <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    efc6:	movs	r0, #10
  m_errorLine = line;
    efc8:	movw	r2, #579	; 0x243
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    efcc:	strb	r0, [r1, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    efce:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    efd0:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    efd2:	mov	r0, r5
    efd4:	pop	{r4, r5, r6, pc}
    efd6:	nop
    efd8:	.word	0x400b1028
    efdc:	.word	0x0cdb0000
    efe0:	.word	0x1fff0a04
    efe4:	.word	0x1fff24a0
    efe8:	.word	0x0000e9a9
    efec:	.word	0x400b1024
    eff0:	.word	0x400b1034
    eff4:	.word	0x400b102c

0000eff8 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    eff8:	push	{r4, r5, r6, lr}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    effa:	ldr	r6, [pc, #124]	; (f078 <SdioCard::writeData(unsigned char const*)+0x80>)
    effc:	ldrb	r3, [r6, #0]
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    effe:	mov	r5, r1
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    f000:	cmp	r3, #0
    f002:	bne.n	f06c <SdioCard::writeData(unsigned char const*)+0x74>
  if (!waitTransferComplete()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    f004:	ldr	r3, [pc, #116]	; (f07c <SdioCard::writeData(unsigned char const*)+0x84>)
    f006:	ldr	r3, [r3, #0]
    f008:	lsls	r1, r3, #23
    f00a:	bmi.n	f01e <SdioCard::writeData(unsigned char const*)+0x26>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f00c:	ldr	r3, [pc, #112]	; (f080 <SdioCard::writeData(unsigned char const*)+0x88>)
    f00e:	ldr	r2, [r3, #0]
    f010:	bic.w	r2, r2, #65536	; 0x10000
    f014:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    f016:	ldr	r2, [r3, #0]
    f018:	orr.w	r2, r2, #131072	; 0x20000
    f01c:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    f01e:	ldr	r2, [pc, #96]	; (f080 <SdioCard::writeData(unsigned char const*)+0x88>)
  if (waitTimeout(isBusyFifoWrite)) {
    f020:	ldr	r0, [pc, #96]	; (f084 <SdioCard::writeData(unsigned char const*)+0x8c>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    f022:	ldr	r3, [r2, #0]
    f024:	orr.w	r3, r3, #65536	; 0x10000
    f028:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    f02a:	bl	eb38 <waitTimeout(bool (*)())>
    f02e:	cbnz	r0, f05a <SdioCard::writeData(unsigned char const*)+0x62>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    f030:	ldr	r4, [pc, #72]	; (f07c <SdioCard::writeData(unsigned char const*)+0x84>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    f032:	ldr	r0, [pc, #84]	; (f088 <SdioCard::writeData(unsigned char const*)+0x90>)
    f034:	subs	r3, r5, #4
    f036:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    f03a:	ldr	r2, [r4, #0]
    f03c:	lsls	r2, r2, #21
    f03e:	bpl.n	f03a <SdioCard::writeData(unsigned char const*)+0x42>
    f040:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    f044:	ldr.w	r2, [r3, #4]!
    f048:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    f04a:	cmp	r1, r3
    f04c:	bne.n	f044 <SdioCard::writeData(unsigned char const*)+0x4c>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    f04e:	cmp	r5, r1
    f050:	mov	r3, r1
    f052:	bne.n	f03a <SdioCard::writeData(unsigned char const*)+0x42>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    f054:	movs	r0, #1
    f056:	strb	r0, [r6, #0]
    f058:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f05a:	ldr	r1, [pc, #48]	; (f08c <SdioCard::writeData(unsigned char const*)+0x94>)
  m_errorLine = line;
    f05c:	ldr	r3, [pc, #48]	; (f090 <SdioCard::writeData(unsigned char const*)+0x98>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f05e:	movs	r0, #33	; 0x21
  m_errorLine = line;
    f060:	mov.w	r2, #1012	; 0x3f4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f064:	strb	r0, [r1, #0]
  m_errorLine = line;
    f066:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    f068:	movs	r0, #0
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    f06a:	pop	{r4, r5, r6, pc}
    f06c:	bl	ef14 <waitTransferComplete() [clone .part.8]>
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    f070:	cmp	r0, #0
    f072:	bne.n	f004 <SdioCard::writeData(unsigned char const*)+0xc>
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    f074:	pop	{r4, r5, r6, pc}
    f076:	nop
    f078:	.word	0x1fff247c
    f07c:	.word	0x400b1024
    f080:	.word	0x400b1028
    f084:	.word	0x0000e9dd
    f088:	.word	0x400b1020
    f08c:	.word	0x1fff0a04
    f090:	.word	0x1fff24a0

0000f094 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    f094:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    f096:	ldr	r0, [pc, #80]	; (f0e8 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    f098:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    f09a:	bl	eb60 <yieldTimeout(bool (*)())>
    f09e:	cbnz	r0, f0d4 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f0a0:	ldr	r2, [pc, #72]	; (f0ec <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    f0a2:	ldr	r1, [pc, #76]	; (f0f0 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f0a4:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    f0a6:	ldr	r0, [pc, #76]	; (f0f4 <SdioCard::writeStart(unsigned long)+0x60>)
    f0a8:	ldr	r5, [pc, #76]	; (f0f8 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f0aa:	bic.w	r3, r3, #65536	; 0x10000
    f0ae:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    f0b0:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    f0b2:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    f0b4:	cbnz	r3, f0d0 <SdioCard::writeStart(unsigned long)+0x3c>
    f0b6:	lsls	r1, r4, #9
    f0b8:	ldr	r0, [pc, #64]	; (f0fc <SdioCard::writeStart(unsigned long)+0x68>)
    f0ba:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f0be:	cbnz	r0, f0ce <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f0c0:	ldr	r1, [pc, #60]	; (f100 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    f0c2:	ldr	r3, [pc, #64]	; (f104 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f0c4:	movs	r4, #14
  m_errorLine = line;
    f0c6:	mov.w	r2, #1128	; 0x468
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f0ca:	strb	r4, [r1, #0]
  m_errorLine = line;
    f0cc:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    f0ce:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    f0d0:	mov	r1, r4
    f0d2:	b.n	f0b8 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f0d4:	ldr	r1, [pc, #40]	; (f100 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    f0d6:	ldr	r3, [pc, #44]	; (f104 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f0d8:	movs	r0, #10
  m_errorLine = line;
    f0da:	movw	r2, #1116	; 0x45c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f0de:	strb	r0, [r1, #0]
  m_errorLine = line;
    f0e0:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    f0e2:	movs	r0, #0
    f0e4:	pop	{r3, r4, r5, pc}
    f0e6:	nop
    f0e8:	.word	0x0000ec39
    f0ec:	.word	0x400b1028
    f0f0:	.word	0x1fff2470
    f0f4:	.word	0x400b1004
    f0f8:	.word	0xffff0200
    f0fc:	.word	0x193a0022
    f100:	.word	0x1fff0a04
    f104:	.word	0x1fff24a0

0000f108 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    f108:	push	{r3, r4, r5, r6, r7, lr}
    f10a:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    f10c:	ldrb	r0, [r0, #8]
    f10e:	lsls	r0, r0, #31
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    f110:	mov	r4, r1
    f112:	mov	r5, r2
    f114:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    f116:	bmi.n	f140 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    f118:	cbz	r3, f13c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    f11a:	add	r7, r1
    f11c:	b.n	f122 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    f11e:	cmp	r4, r7
    f120:	beq.n	f13c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    f122:	ldr	r3, [r6, #0]
    f124:	mov	r2, r5
    f126:	mov	r1, r4
    f128:	ldr	r3, [r3, #28]
    f12a:	mov	r0, r6
    f12c:	blx	r3
    f12e:	adds	r4, #1
    f130:	add.w	r5, r5, #512	; 0x200
    f134:	cmp	r0, #0
    f136:	bne.n	f11e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    f138:	movs	r0, #0
    f13a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    f13c:	movs	r0, #1
    f13e:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    f140:	lsls	r0, r2, #30
    f142:	beq.n	f16a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    f144:	cmp	r3, #0
    f146:	beq.n	f13c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    f148:	add	r7, r1
    f14a:	b.n	f150 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    f14c:	cmp	r7, r4
    f14e:	beq.n	f13c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    f150:	ldr	r3, [r6, #0]
    f152:	mov	r2, r5
    f154:	mov	r1, r4
    f156:	ldr	r3, [r3, #28]
    f158:	mov	r0, r6
    f15a:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    f15c:	adds	r4, #1
    f15e:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    f162:	cmp	r0, #0
    f164:	bne.n	f14c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    f166:	movs	r0, #0
    f168:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    f16a:	ldr	r0, [pc, #24]	; (f184 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    f16c:	bl	ed08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    f170:	cmp	r0, #0
    f172:	bne.n	f13c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f174:	ldr	r1, [pc, #16]	; (f188 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    f176:	ldr	r3, [pc, #20]	; (f18c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f178:	movs	r4, #14
  m_errorLine = line;
    f17a:	movw	r2, #1102	; 0x44e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f17e:	strb	r4, [r1, #0]
  m_errorLine = line;
    f180:	str	r2, [r3, #0]
    f182:	pop	{r3, r4, r5, r6, r7, pc}
    f184:	.word	0x193a0027
    f188:	.word	0x1fff0a04
    f18c:	.word	0x1fff24a0

0000f190 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    f190:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    f192:	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    f194:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    f196:	lsls	r2, r3, #31
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    f198:	sub.w	sp, sp, #512	; 0x200
    f19c:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    f19e:	bpl.n	f1d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    f1a0:	lsls	r3, r5, #30
    f1a2:	beq.n	f1b2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    f1a4:	mov	r1, r5
    f1a6:	mov	r0, sp
    f1a8:	mov.w	r2, #512	; 0x200
    f1ac:	bl	fc48 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    f1b0:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    f1b2:	mov	r2, r5
    f1b4:	mov	r1, r6
    f1b6:	movs	r3, #1
    f1b8:	ldr	r0, [pc, #144]	; (f24c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    f1ba:	bl	ed08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    f1be:	cbnz	r0, f1ce <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f1c0:	ldr	r1, [pc, #140]	; (f250 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc0>)
  m_errorLine = line;
    f1c2:	ldr	r3, [pc, #144]	; (f254 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f1c4:	movs	r4, #13
  m_errorLine = line;
    f1c6:	movw	r2, #1046	; 0x416
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f1ca:	strb	r4, [r1, #0]
  m_errorLine = line;
    f1cc:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    f1ce:	add.w	sp, sp, #512	; 0x200
    f1d2:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    f1d4:	ldr	r3, [pc, #128]	; (f258 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    f1d6:	ldrb	r3, [r3, #0]
    f1d8:	mov	r4, r0
    f1da:	cbnz	r3, f1fe <SdioCard::writeSector(unsigned long, unsigned char const*)+0x6e>
    if (!waitTransferComplete()) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    f1dc:	ldr	r3, [pc, #124]	; (f25c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
    f1de:	ldr	r3, [r3, #0]
    f1e0:	lsrs	r3, r3, #16
    f1e2:	lsls	r3, r3, #16
    f1e4:	cbz	r3, f23c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    f1e6:	ldrb	r3, [r4, #9]
    f1e8:	cmp	r3, #2
    f1ea:	beq.n	f20a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7a>
      if (!syncDevice()) {
    f1ec:	ldr	r3, [r4, #0]
    f1ee:	mov	r0, r4
    f1f0:	ldr	r3, [r3, #24]
    f1f2:	blx	r3
    f1f4:	cbnz	r0, f212 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    f1f6:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    f1f8:	add.w	sp, sp, #512	; 0x200
    f1fc:	pop	{r4, r5, r6, pc}
    f1fe:	bl	ef14 <waitTransferComplete() [clone .part.8]>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    f202:	cmp	r0, #0
    f204:	bne.n	f1dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    f206:	movs	r0, #0
    f208:	b.n	f1f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x68>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    f20a:	ldr	r3, [r4, #4]
    f20c:	cmp	r6, r3
    f20e:	bne.n	f1ec <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    f210:	b.n	f226 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x96>
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    f212:	ldr	r3, [r4, #0]
    f214:	mov	r1, r6
    f216:	ldr	r3, [r3, #72]	; 0x48
    f218:	mov	r0, r4
    f21a:	blx	r3
    f21c:	cmp	r0, #0
    f21e:	beq.n	f1f6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    f220:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    f222:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    f224:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    f226:	ldr	r3, [r4, #0]
    f228:	mov	r1, r5
    f22a:	ldr	r3, [r3, #68]	; 0x44
    f22c:	mov	r0, r4
    f22e:	blx	r3
    f230:	cmp	r0, #0
    f232:	beq.n	f1f6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
      return false;
    }
    m_curSector++;
    f234:	ldr	r3, [r4, #4]
    f236:	adds	r3, #1
    f238:	str	r3, [r4, #4]
    f23a:	b.n	f1ce <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    f23c:	ldr	r3, [r4, #0]
    f23e:	mov	r0, r4
    f240:	ldr	r3, [r3, #24]
    f242:	blx	r3
    f244:	cmp	r0, #0
    f246:	bne.n	f1e6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
    f248:	b.n	f1f6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
    f24a:	nop
    f24c:	.word	0x183a0001
    f250:	.word	0x1fff0a04
    f254:	.word	0x1fff24a0
    f258:	.word	0x1fff247c
    f25c:	.word	0x400b1004

0000f260 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    f260:	push	{r3, r4, r5, r6, r7, lr}
    f262:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    f264:	ldrb	r0, [r0, #8]
    f266:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    f268:	mov	r4, r1
    f26a:	mov	r5, r2
    f26c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    f26e:	bmi.n	f298 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    f270:	cbz	r3, f294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    f272:	add	r7, r1
    f274:	b.n	f27a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    f276:	cmp	r4, r7
    f278:	beq.n	f294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    f27a:	ldr	r3, [r6, #0]
    f27c:	mov	r2, r5
    f27e:	mov	r1, r4
    f280:	ldr	r3, [r3, #12]
    f282:	mov	r0, r6
    f284:	blx	r3
    f286:	adds	r4, #1
    f288:	add.w	r5, r5, #512	; 0x200
    f28c:	cmp	r0, #0
    f28e:	bne.n	f276 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    f290:	movs	r0, #0
    f292:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    f294:	movs	r0, #1
    f296:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    f298:	lsls	r0, r2, #30
    f29a:	beq.n	f2c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    f29c:	cmp	r3, #0
    f29e:	beq.n	f294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    f2a0:	add	r7, r1
    f2a2:	b.n	f2a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    f2a4:	cmp	r7, r4
    f2a6:	beq.n	f294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    f2a8:	ldr	r3, [r6, #0]
    f2aa:	mov	r2, r5
    f2ac:	mov	r1, r4
    f2ae:	ldr	r3, [r3, #12]
    f2b0:	mov	r0, r6
    f2b2:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    f2b4:	adds	r4, #1
    f2b6:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    f2ba:	cmp	r0, #0
    f2bc:	bne.n	f2a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    f2be:	movs	r0, #0
    f2c0:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    f2c2:	ldr	r0, [pc, #24]	; (f2dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    f2c4:	bl	ed08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    f2c8:	cmp	r0, #0
    f2ca:	bne.n	f294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f2cc:	ldr	r1, [pc, #16]	; (f2e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    f2ce:	ldr	r3, [pc, #20]	; (f2e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f2d0:	movs	r4, #12
  m_errorLine = line;
    f2d2:	movw	r2, #909	; 0x38d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f2d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    f2d8:	str	r2, [r3, #0]
    f2da:	pop	{r3, r4, r5, r6, r7, pc}
    f2dc:	.word	0x123a0037
    f2e0:	.word	0x1fff0a04
    f2e4:	.word	0x1fff24a0

0000f2e8 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    f2e8:	push	{r3, r4, r5, r6, r7, lr}
    f2ea:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    f2ec:	ldr	r0, [pc, #116]	; (f364 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    f2ee:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    f2f0:	bl	eb38 <waitTimeout(bool (*)())>
    f2f4:	cbz	r0, f308 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f2f6:	ldr	r1, [pc, #112]	; (f368 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    f2f8:	ldr	r3, [pc, #112]	; (f36c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f2fa:	movs	r0, #10
  m_errorLine = line;
    f2fc:	mov.w	r2, #410	; 0x19a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f300:	strb	r0, [r1, #0]
  m_errorLine = line;
    f302:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    f304:	movs	r0, #0
    f306:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    f308:	ldr	r2, [pc, #100]	; (f370 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    f30a:	ldr.w	lr, [pc, #132]	; f390 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    f30e:	ldr	r7, [pc, #100]	; (f374 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    f310:	ldr	r6, [pc, #100]	; (f378 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    f312:	ldr	r3, [pc, #104]	; (f37c <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    f314:	mov.w	ip, #1
    f318:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    f31c:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    f31e:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    f320:	ldr	r5, [pc, #92]	; (f380 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    f322:	ldr	r2, [pc, #96]	; (f384 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    f324:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    f326:	ldr	r0, [pc, #96]	; (f388 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    f328:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    f32a:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    f32c:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f330:	cbnz	r0, f342 <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f332:	ldr	r1, [pc, #52]	; (f368 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    f334:	ldr	r3, [pc, #52]	; (f36c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f336:	movs	r4, #4
  m_errorLine = line;
    f338:	movw	r2, #417	; 0x1a1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f33c:	strb	r4, [r1, #0]
  m_errorLine = line;
    f33e:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    f340:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    f342:	ldr	r0, [pc, #72]	; (f38c <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    f344:	bl	eb60 <yieldTimeout(bool (*)())>
    f348:	cbnz	r0, f352 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    f34a:	bl	ece8 <waitDmaStatus() [clone .part.4]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    f34e:	cbz	r0, f352 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    f350:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f352:	ldr	r1, [pc, #20]	; (f368 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    f354:	ldr	r3, [pc, #20]	; (f36c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f356:	movs	r0, #37	; 0x25
  m_errorLine = line;
    f358:	mov.w	r2, #420	; 0x1a4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f35c:	strb	r0, [r1, #0]
  m_errorLine = line;
    f35e:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    f360:	movs	r0, #0
    f362:	pop	{r3, r4, r5, r6, r7, pc}
    f364:	.word	0x0000ec39
    f368:	.word	0x1fff0a04
    f36c:	.word	0x1fff24a0
    f370:	.word	0x1fff2480
    f374:	.word	0x400b1000
    f378:	.word	0x400b1004
    f37c:	.word	0x400b1038
    f380:	.word	0x00010040
    f384:	.word	0x117f0002
    f388:	.word	0x063a0011
    f38c:	.word	0x0000e9bd
    f390:	.word	0x1fff2498

0000f394 <SdioCard::begin(SdioConfig)>:
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    f394:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    f398:	ldr	r5, [pc, #568]	; (f5d4 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    f39a:	ldr	r4, [pc, #572]	; (f5d8 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    f39c:	ldr.w	r8, [pc, #684]	; f64c <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    f3a0:	ldr	r7, [pc, #568]	; (f5dc <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    f3a2:	ldr	r6, [pc, #572]	; (f5e0 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    f3a4:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    f3a6:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    f3a8:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    f3aa:	strb	r3, [r0, #9]
  m_initDone = false;
    f3ac:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    f3b0:	strb	r3, [r7, #0]
  m_version2 = false;
    f3b2:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    f3b4:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    f3b6:	ldr	r2, [pc, #556]	; (f5e4 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f3b8:	ldr	r0, [pc, #556]	; (f5e8 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    f3ba:	ldr	r1, [pc, #560]	; (f5ec <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    f3bc:	ldr.w	lr, [pc, #656]	; f650 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    f3c0:	orr.w	r3, r3, #201326592	; 0xc000000
    f3c4:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    f3c6:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    f3c8:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    f3cc:	orr.w	r3, r3, #131072	; 0x20000
    f3d0:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    f3d2:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    f3d4:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f3d8:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    f3dc:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f3e0:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    f3e2:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    f3e6:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    f3e8:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    f3ea:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    f3ec:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    f3ee:	ldr	r3, [r2, #0]
    f3f0:	orr.w	r3, r3, #16777216	; 0x1000000
    f3f4:	orr.w	r3, r3, #32768	; 0x8000
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    f3f8:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    f3fa:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    f3fc:	ldr	r3, [r2, #0]
    f3fe:	ldr	r4, [pc, #496]	; (f5f0 <SdioCard::begin(SdioConfig)+0x25c>)
    f400:	lsls	r1, r3, #7
    f402:	bmi.n	f3fc <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    f404:	mov.w	r0, #400	; 0x190
    f408:	bl	ea08 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f40c:	ldr.w	ip, [pc, #472]	; f5e8 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    f410:	ldr.w	lr, [pc, #572]	; f650 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    f414:	ldr	r1, [pc, #468]	; (f5ec <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    f416:	ldr	r2, [pc, #476]	; (f5f4 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    f418:	ldr	r0, [pc, #476]	; (f5f8 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f41a:	movw	r3, #1091	; 0x443
    f41e:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    f422:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    f426:	mov.w	lr, #1088	; 0x440
    f42a:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    f42e:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    f430:	add.w	r2, r2, #409600	; 0x64000
    f434:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    f436:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    f438:	ldr	r0, [pc, #448]	; (f5fc <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    f43a:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    f43c:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    f43e:	ldr	r1, [pc, #448]	; (f600 <SdioCard::begin(SdioConfig)+0x26c>)
    f440:	movs	r0, #81	; 0x51
    f442:	bl	105c0 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    f446:	ldr	r3, [pc, #444]	; (f604 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    f448:	ldr	r1, [pc, #444]	; (f608 <SdioCard::begin(SdioConfig)+0x274>)
    f44a:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    f44c:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    f450:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    f452:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    f454:	ldr	r3, [r4, #0]
    f456:	orr.w	r3, r3, #134217728	; 0x8000000
    f45a:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    f45c:	ldr	r1, [r4, #0]
    f45e:	ands.w	r1, r1, #134217728	; 0x8000000
    f462:	bne.n	f45c <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    f464:	mov	r0, r1
    f466:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f46a:	mov	r4, r0
    f46c:	cmp	r0, #0
    f46e:	beq.n	f50e <SdioCard::begin(SdioConfig)+0x17a>
    f470:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    f472:	mov.w	r1, #426	; 0x1aa
    f476:	ldr	r0, [pc, #404]	; (f60c <SdioCard::begin(SdioConfig)+0x278>)
    f478:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f47c:	cmp	r0, #0
    f47e:	bne.n	f53c <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    f480:	subs	r4, #1
    f482:	bne.n	f472 <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    f484:	ldrb	r3, [r6, #0]
    f486:	ldr	r6, [pc, #392]	; (f610 <SdioCard::begin(SdioConfig)+0x27c>)
    f488:	cmp	r3, #0
    f48a:	it	eq
    f48c:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    f490:	bl	1060c <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    f494:	ldr	r4, [pc, #380]	; (f614 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    f496:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    f498:	movs	r1, #0
    f49a:	ldr	r0, [pc, #380]	; (f618 <SdioCard::begin(SdioConfig)+0x284>)
    f49c:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f4a0:	cbnz	r0, f4b8 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f4a2:	ldr	r2, [pc, #376]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f4a4:	mov.w	r1, #676	; 0x2a4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f4a8:	movs	r3, #23
  m_errorLine = line;
    f4aa:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f4ac:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    f4ae:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    f4b0:	mov	r0, r4
    f4b2:	add	sp, #68	; 0x44
    f4b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    f4b8:	mov	r1, r6
    f4ba:	ldr	r0, [pc, #356]	; (f620 <SdioCard::begin(SdioConfig)+0x28c>)
    f4bc:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f4c0:	cmp	r0, #0
    f4c2:	beq.n	f4a2 <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    f4c4:	bl	1060c <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    f4c8:	ldr	r3, [pc, #344]	; (f624 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    f4ca:	ldr	r2, [pc, #328]	; (f614 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    f4cc:	rsb	r0, r9, r0
    f4d0:	cmp	r0, r3
    f4d2:	bhi.n	f4a2 <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    f4d4:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    f4d6:	cmp	r3, #0
    f4d8:	bge.n	f498 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    f4da:	ldr	r3, [pc, #332]	; (f628 <SdioCard::begin(SdioConfig)+0x294>)
    f4dc:	ldr	r1, [r2, #0]
    f4de:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    f4e0:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    f4e2:	ldr	r0, [pc, #328]	; (f62c <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    f4e4:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    f4e6:	it	mi
    f4e8:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    f4ea:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    f4ee:	it	mi
    f4f0:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    f4f2:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f4f6:	mov	r4, r0
    f4f8:	cbnz	r0, f522 <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f4fa:	ldr	r2, [pc, #288]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f4fc:	movw	r1, #685	; 0x2ad
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f500:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    f502:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f504:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f506:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    f508:	add	sp, #68	; 0x44
    f50a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f50e:	ldr	r2, [pc, #268]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f510:	movw	r1, #659	; 0x293
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f514:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    f516:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f518:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f51a:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    f51c:	add	sp, #68	; 0x44
    f51e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    f522:	movs	r1, #0
    f524:	ldr	r0, [pc, #264]	; (f630 <SdioCard::begin(SdioConfig)+0x29c>)
    f526:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f52a:	mov	r4, r0
    f52c:	cbnz	r0, f55e <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f52e:	ldr	r2, [pc, #236]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f530:	mov.w	r1, #688	; 0x2b0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f534:	movs	r3, #3
  m_errorLine = line;
    f536:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f538:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    f53a:	b.n	f4b0 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    f53c:	ldr	r3, [pc, #212]	; (f614 <SdioCard::begin(SdioConfig)+0x280>)
    f53e:	ldr	r3, [r3, #0]
    f540:	cmp.w	r3, #426	; 0x1aa
    f544:	beq.n	f556 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f546:	ldr	r2, [pc, #212]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f548:	movw	r1, #665	; 0x299
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f54c:	movs	r3, #6
  m_errorLine = line;
    f54e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f550:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    f552:	movs	r4, #0
    f554:	b.n	f4b0 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    f556:	movs	r3, #1
    f558:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    f55a:	ldr	r6, [pc, #180]	; (f610 <SdioCard::begin(SdioConfig)+0x27c>)
    f55c:	b.n	f490 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    f55e:	ldr	r3, [pc, #180]	; (f614 <SdioCard::begin(SdioConfig)+0x280>)
    f560:	ldr	r6, [pc, #208]	; (f634 <SdioCard::begin(SdioConfig)+0x2a0>)
    f562:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    f564:	ldr	r1, [pc, #208]	; (f638 <SdioCard::begin(SdioConfig)+0x2a4>)
    f566:	ldr	r0, [pc, #212]	; (f63c <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    f568:	lsrs	r3, r3, #16
    f56a:	lsls	r3, r3, #16
    f56c:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    f56e:	bl	ec84 <readReg16(unsigned long, void*)>
    f572:	mov	r4, r0
    f574:	cbnz	r0, f584 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f576:	ldr	r2, [pc, #164]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f578:	movw	r1, #693	; 0x2b5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f57c:	movs	r3, #7
  m_errorLine = line;
    f57e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f580:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    f582:	b.n	f4b0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    f584:	ldr	r1, [pc, #184]	; (f640 <SdioCard::begin(SdioConfig)+0x2ac>)
    f586:	ldr	r0, [pc, #188]	; (f644 <SdioCard::begin(SdioConfig)+0x2b0>)
    f588:	bl	ec84 <readReg16(unsigned long, void*)>
    f58c:	mov	r4, r0
    f58e:	cbnz	r0, f59e <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f590:	ldr	r2, [pc, #136]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f592:	mov.w	r1, #696	; 0x2b8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f596:	movs	r3, #8
  m_errorLine = line;
    f598:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f59a:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    f59c:	b.n	f4b0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    f59e:	ldr	r1, [r6, #0]
    f5a0:	ldr	r0, [pc, #164]	; (f648 <SdioCard::begin(SdioConfig)+0x2b4>)
    f5a2:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f5a6:	mov	r4, r0
    f5a8:	cbnz	r0, f5b8 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f5aa:	ldr	r2, [pc, #112]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f5ac:	movw	r1, #699	; 0x2bb
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f5b0:	movs	r3, #5
  m_errorLine = line;
    f5b2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f5b4:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    f5b6:	b.n	f4b0 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    f5b8:	ldr	r1, [r6, #0]
    f5ba:	ldr	r0, [pc, #92]	; (f618 <SdioCard::begin(SdioConfig)+0x284>)
    f5bc:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f5c0:	cmp	r0, #0
    f5c2:	bne.n	f654 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    f5c4:	ldr	r2, [pc, #84]	; (f61c <SdioCard::begin(SdioConfig)+0x288>)
    f5c6:	movw	r1, #703	; 0x2bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f5ca:	movs	r3, #20
  m_errorLine = line;
    f5cc:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f5ce:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    f5d0:	movs	r4, #0
    f5d2:	b.n	f4b0 <SdioCard::begin(SdioConfig)+0x11c>
    f5d4:	.word	0x1fff0a04
    f5d8:	.word	0x4000d800
    f5dc:	.word	0x1fff2470
    f5e0:	.word	0x1fff2458
    f5e4:	.word	0x40048030
    f5e8:	.word	0x4004d000
    f5ec:	.word	0x4004d008
    f5f0:	.word	0x400b102c
    f5f4:	.word	0x4004d00c
    f5f8:	.word	0x4004d010
    f5fc:	.word	0x117f000b
    f600:	.word	0x0000e951
    f604:	.word	0xe000e108
    f608:	.word	0xe000e451
    f60c:	.word	0x081a0000
    f610:	.word	0x40300000
    f614:	.word	0x400b1010
    f618:	.word	0x371a0000
    f61c:	.word	0x1fff24a0
    f620:	.word	0x29020000
    f624:	.word	0x000f4240
    f628:	.word	0x1fff2474
    f62c:	.word	0x02090000
    f630:	.word	0x031a0000
    f634:	.word	0x1fff2478
    f638:	.word	0x1fff2488
    f63c:	.word	0x09090000
    f640:	.word	0x1fff245c
    f644:	.word	0x0a090000
    f648:	.word	0x071b0000
    f64c:	.word	0x1fff2484
    f650:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    f654:	movs	r1, #2
    f656:	ldr	r0, [pc, #168]	; (f700 <SdioCard::begin(SdioConfig)+0x36c>)
    f658:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f65c:	mov	r4, r0
    f65e:	cmp	r0, #0
    f660:	beq.n	f5c4 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    f662:	ldr	r3, [pc, #160]	; (f704 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    f664:	ldr	r0, [pc, #160]	; (f708 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    f666:	ldr	r2, [r3, #0]
    f668:	bic.w	r2, r2, #6
    f66c:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    f66e:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    f670:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    f674:	orr.w	r2, r2, #2
    f678:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    f67a:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    f67c:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    f67e:	mvn.w	r0, #4278190080	; 0xff000000
    f682:	bl	f2e8 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    f686:	cbz	r0, f690 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    f688:	ldrb.w	r3, [sp, #13]
    f68c:	lsls	r3, r3, #30
    f68e:	bmi.n	f6e2 <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    f690:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f694:	ldr.w	fp, [pc, #132]	; f71c <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    f698:	ldr.w	sl, [pc, #132]	; f720 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    f69c:	ldr.w	r9, [pc, #132]	; f724 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    f6a0:	ldr	r7, [pc, #104]	; (f70c <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    f6a2:	ldr	r6, [pc, #108]	; (f710 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    f6a4:	ldr	r5, [pc, #108]	; (f714 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f6a6:	movw	r3, #259	; 0x103
    f6aa:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    f6ae:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    f6b2:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    f6b6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    f6b8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    f6ba:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    f6bc:	bl	ea08 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f6c0:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    f6c4:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    f6c8:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    f6ca:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    f6ce:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    f6d2:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    f6d6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    f6d8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    f6da:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    f6dc:	strb.w	r2, [r8]
  return true;
    f6e0:	b.n	f4b0 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    f6e2:	mov	r1, sp
    f6e4:	ldr	r0, [pc, #48]	; (f718 <SdioCard::begin(SdioConfig)+0x384>)
    f6e6:	bl	f2e8 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    f6ea:	cmp	r0, #0
    f6ec:	beq.n	f690 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    f6ee:	ldrb.w	r3, [sp, #16]
    f6f2:	and.w	r3, r3, #15
    f6f6:	cmp	r3, #1
    f6f8:	bne.n	f690 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    f6fa:	movw	r0, #50000	; 0xc350
    f6fe:	b.n	f694 <SdioCard::begin(SdioConfig)+0x300>
    f700:	.word	0x061a0000
    f704:	.word	0x400b1028
    f708:	.word	0x400b1044
    f70c:	.word	0x4004d00c
    f710:	.word	0x4004d010
    f714:	.word	0x4004d014
    f718:	.word	0x80fffff1
    f71c:	.word	0x4004d000
    f720:	.word	0x4004d004
    f724:	.word	0x4004d008

0000f728 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    f728:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    f72a:	ldr	r3, [pc, #160]	; (f7cc <SdioCard::readData(unsigned char*)+0xa4>)
    f72c:	ldr	r3, [r3, #0]
    f72e:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    f730:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    f732:	bmi.n	f752 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f734:	ldr	r3, [pc, #152]	; (f7d0 <SdioCard::readData(unsigned char*)+0xa8>)
    f736:	ldr	r2, [r3, #0]
    f738:	bic.w	r2, r2, #65536	; 0x10000
    f73c:	str	r2, [r3, #0]
    noInterrupts();
    f73e:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    f740:	ldr	r2, [r3, #0]
    f742:	orr.w	r2, r2, #131072	; 0x20000
    f746:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    f748:	ldr	r2, [r3, #0]
    f74a:	orr.w	r2, r2, #65536	; 0x10000
    f74e:	str	r2, [r3, #0]
    interrupts();
    f750:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    f752:	ldr	r0, [pc, #128]	; (f7d4 <SdioCard::readData(unsigned char*)+0xac>)
    f754:	bl	eb38 <waitTimeout(bool (*)())>
    f758:	cmp	r0, #0
    f75a:	bne.n	f7ba <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    f75c:	ldr	r4, [pc, #108]	; (f7cc <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    f75e:	ldr	r0, [pc, #120]	; (f7d8 <SdioCard::readData(unsigned char*)+0xb0>)
    f760:	subs	r3, r5, #4
    f762:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    f766:	ldr	r2, [r4, #0]
    f768:	lsls	r1, r2, #20
    f76a:	bpl.n	f766 <SdioCard::readData(unsigned char*)+0x3e>
    f76c:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    f770:	ldr	r2, [r0, #0]
    f772:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    f776:	cmp	r1, r3
    f778:	bne.n	f770 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    f77a:	cmp	r5, r1
    f77c:	mov	r3, r1
    f77e:	bne.n	f766 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    f780:	ldr	r0, [pc, #88]	; (f7dc <SdioCard::readData(unsigned char*)+0xb4>)
    f782:	bl	eb38 <waitTimeout(bool (*)())>
    f786:	cbnz	r0, f7a8 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    f788:	ldr	r2, [pc, #84]	; (f7e0 <SdioCard::readData(unsigned char*)+0xb8>)
    f78a:	ldr	r3, [pc, #88]	; (f7e4 <SdioCard::readData(unsigned char*)+0xbc>)
    f78c:	ldr	r1, [r2, #0]
    f78e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    f790:	ldr	r1, [r3, #0]
    f792:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    f794:	ldr	r2, [r3, #0]
    f796:	lsls	r2, r2, #30
    f798:	bpl.n	f7ca <SdioCard::readData(unsigned char*)+0xa2>
    f79a:	ldr	r3, [r3, #0]
    f79c:	ldr	r0, [pc, #72]	; (f7e8 <SdioCard::readData(unsigned char*)+0xc0>)
    f79e:	ands	r0, r3
    f7a0:	clz	r0, r0
    f7a4:	lsrs	r0, r0, #5
    f7a6:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f7a8:	ldr	r1, [pc, #64]	; (f7ec <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    f7aa:	ldr	r3, [pc, #68]	; (f7f0 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f7ac:	movs	r0, #29
  m_errorLine = line;
    f7ae:	movw	r2, #843	; 0x34b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f7b2:	strb	r0, [r1, #0]
  m_errorLine = line;
    f7b4:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    f7b6:	movs	r0, #0
    f7b8:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f7ba:	ldr	r1, [pc, #48]	; (f7ec <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    f7bc:	ldr	r3, [pc, #48]	; (f7f0 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f7be:	movs	r0, #26
  m_errorLine = line;
    f7c0:	mov.w	r2, #832	; 0x340
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f7c4:	strb	r0, [r1, #0]
  m_errorLine = line;
    f7c6:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    f7c8:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    f7ca:	pop	{r3, r4, r5, pc}
    f7cc:	.word	0x400b1024
    f7d0:	.word	0x400b1028
    f7d4:	.word	0x0000e9c9
    f7d8:	.word	0x400b1020
    f7dc:	.word	0x0000e9f1
    f7e0:	.word	0x400b1030
    f7e4:	.word	0x1fff2480
    f7e8:	.word	0x117f0000
    f7ec:	.word	0x1fff0a04
    f7f0:	.word	0x1fff24a0

0000f7f4 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    f7f4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    f7f6:	ldr	r0, [pc, #80]	; (f848 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    f7f8:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    f7fa:	bl	eb60 <yieldTimeout(bool (*)())>
    f7fe:	cbnz	r0, f834 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    f800:	ldr	r2, [pc, #72]	; (f84c <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    f802:	ldr	r1, [pc, #76]	; (f850 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    f804:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    f806:	ldr	r0, [pc, #76]	; (f854 <SdioCard::readStart(unsigned long)+0x60>)
    f808:	ldr	r5, [pc, #76]	; (f858 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    f80a:	orr.w	r3, r3, #65536	; 0x10000
    f80e:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    f810:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    f812:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    f814:	cbnz	r3, f830 <SdioCard::readStart(unsigned long)+0x3c>
    f816:	lsls	r1, r4, #9
    f818:	ldr	r0, [pc, #64]	; (f85c <SdioCard::readStart(unsigned long)+0x68>)
    f81a:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f81e:	cbnz	r0, f82e <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f820:	ldr	r1, [pc, #60]	; (f860 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    f822:	ldr	r3, [pc, #64]	; (f864 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f824:	movs	r4, #12
  m_errorLine = line;
    f826:	movw	r2, #937	; 0x3a9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f82a:	strb	r4, [r1, #0]
  m_errorLine = line;
    f82c:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    f82e:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    f830:	mov	r1, r4
    f832:	b.n	f818 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f834:	ldr	r1, [pc, #40]	; (f860 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    f836:	ldr	r3, [pc, #44]	; (f864 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f838:	movs	r0, #10
  m_errorLine = line;
    f83a:	movw	r2, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f83e:	strb	r0, [r1, #0]
  m_errorLine = line;
    f840:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    f842:	movs	r0, #0
    f844:	pop	{r3, r4, r5, pc}
    f846:	nop
    f848:	.word	0x0000ec39
    f84c:	.word	0x400b1028
    f850:	.word	0x1fff2470
    f854:	.word	0x400b1004
    f858:	.word	0xffff0200
    f85c:	.word	0x123a0032
    f860:	.word	0x1fff0a04
    f864:	.word	0x1fff24a0

0000f868 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    f868:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    f86a:	ldrb	r3, [r0, #8]
    f86c:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    f86e:	sub.w	sp, sp, #512	; 0x200
    f872:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    f874:	bpl.n	f89c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    f876:	lsls	r3, r2, #30
    f878:	beq.n	f8c0 <SdioCard::readSector(unsigned long, unsigned char*)+0x58>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    f87a:	mov	r2, sp
    f87c:	movs	r3, #1
    f87e:	ldr	r0, [pc, #196]	; (f944 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    f880:	bl	ed08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    f884:	cbz	r0, f8cc <SdioCard::readSector(unsigned long, unsigned char*)+0x64>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    f886:	mov	r1, sp
    f888:	mov	r0, r5
    f88a:	mov.w	r2, #512	; 0x200
    f88e:	bl	fc48 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    f892:	movs	r5, #1
}
    f894:	mov	r0, r5
    f896:	add.w	sp, sp, #512	; 0x200
    f89a:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    f89c:	ldr	r3, [pc, #168]	; (f948 <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    f89e:	ldrb	r3, [r3, #0]
    f8a0:	mov	r4, r0
    f8a2:	mov	r6, r1
    f8a4:	cbnz	r3, f8f8 <SdioCard::readSector(unsigned long, unsigned char*)+0x90>
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    f8a6:	ldrb	r3, [r4, #9]
    f8a8:	cmp	r3, #1
    f8aa:	beq.n	f8e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    f8ac:	ldr	r3, [r4, #0]
    f8ae:	mov	r0, r4
    f8b0:	ldr	r3, [r3, #24]
    f8b2:	blx	r3
    f8b4:	cbnz	r0, f904 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    f8b6:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    f8b8:	mov	r0, r5
    f8ba:	add.w	sp, sp, #512	; 0x200
    f8be:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    f8c0:	movs	r3, #1
    f8c2:	ldr	r0, [pc, #128]	; (f944 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    f8c4:	bl	ed08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    f8c8:	cmp	r0, #0
    f8ca:	bne.n	f892 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f8cc:	ldr	r1, [pc, #124]	; (f94c <SdioCard::readSector(unsigned long, unsigned char*)+0xe4>)
  m_errorLine = line;
    f8ce:	ldr	r3, [pc, #128]	; (f950 <SdioCard::readSector(unsigned long, unsigned char*)+0xe8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f8d0:	movs	r0, #11
  m_errorLine = line;
    f8d2:	movw	r2, #862	; 0x35e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f8d6:	strb	r0, [r1, #0]
  m_errorLine = line;
    f8d8:	str	r2, [r3, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    f8da:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    f8dc:	mov	r0, r5
    f8de:	add.w	sp, sp, #512	; 0x200
    f8e2:	pop	{r4, r5, r6, pc}
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    f8e4:	ldr	r3, [r4, #4]
    f8e6:	cmp	r6, r3
    f8e8:	beq.n	f916 <SdioCard::readSector(unsigned long, unsigned char*)+0xae>
      if (!syncDevice()) {
    f8ea:	ldr	r3, [r4, #0]
    f8ec:	mov	r0, r4
    f8ee:	ldr	r3, [r3, #24]
    f8f0:	blx	r3
    f8f2:	cmp	r0, #0
    f8f4:	beq.n	f8b6 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    f8f6:	b.n	f904 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
    f8f8:	bl	ef14 <waitTransferComplete() [clone .part.8]>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    f8fc:	cmp	r0, #0
    f8fe:	bne.n	f8a6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
      return false;
    f900:	movs	r5, #0
    f902:	b.n	f8b8 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    f904:	mov	r1, r6
    f906:	mov	r0, r4
    f908:	bl	f7f4 <SdioCard::readStart(unsigned long)>
    f90c:	cmp	r0, #0
    f90e:	beq.n	f8b6 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    f910:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    f912:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    f914:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    f916:	mov	r1, r5
    f918:	mov	r0, r4
    f91a:	bl	f728 <SdioCard::readData(unsigned char*)>
    f91e:	mov	r5, r0
    f920:	cmp	r0, #0
    f922:	beq.n	f8b6 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    f924:	ldr	r3, [pc, #44]	; (f954 <SdioCard::readSector(unsigned long, unsigned char*)+0xec>)
    f926:	ldr	r3, [r3, #0]
    f928:	lsrs	r3, r3, #16
    f92a:	lsls	r3, r3, #16
    f92c:	cbz	r3, f936 <SdioCard::readSector(unsigned long, unsigned char*)+0xce>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    f92e:	ldr	r3, [r4, #4]
    f930:	adds	r3, #1
    f932:	str	r3, [r4, #4]
    f934:	b.n	f8dc <SdioCard::readSector(unsigned long, unsigned char*)+0x74>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    f936:	ldr	r3, [r4, #0]
    f938:	mov	r0, r4
    f93a:	ldr	r3, [r3, #24]
    f93c:	blx	r3
    f93e:	cmp	r0, #0
    f940:	bne.n	f92e <SdioCard::readSector(unsigned long, unsigned char*)+0xc6>
    f942:	b.n	f8b6 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    f944:	.word	0x113a0011
    f948:	.word	0x1fff247c
    f94c:	.word	0x1fff0a04
    f950:	.word	0x1fff24a0
    f954:	.word	0x400b1004

0000f958 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    f958:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f95a:	ldr	r2, [pc, #80]	; (f9ac <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    f95c:	movs	r5, #0
    f95e:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f960:	ldr	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    f962:	ldr	r0, [pc, #76]	; (f9b0 <SdioCard::stopTransmission(bool)+0x58>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f964:	bic.w	r3, r3, #65536	; 0x10000
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    f968:	mov	r6, r1
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    f96a:	str	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    f96c:	mov	r1, r5
    f96e:	bl	ebdc <cardCommand(unsigned long, unsigned long)>
    f972:	mov	r4, r0
    f974:	cbz	r0, f99a <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    f976:	cbnz	r6, f97c <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    f978:	mov	r0, r4
    f97a:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    f97c:	ldr	r0, [pc, #52]	; (f9b4 <SdioCard::stopTransmission(bool)+0x5c>)
    f97e:	bl	eb60 <yieldTimeout(bool (*)())>
    f982:	cmp	r0, #0
    f984:	beq.n	f978 <SdioCard::stopTransmission(bool)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f986:	ldr	r1, [pc, #48]	; (f9b8 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    f988:	ldr	r3, [pc, #48]	; (f9bc <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f98a:	movs	r0, #10
  m_errorLine = line;
    f98c:	movw	r2, #963	; 0x3c3
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    f990:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f992:	strb	r0, [r1, #0]
  m_errorLine = line;
    f994:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    f996:	mov	r0, r4
    f998:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f99a:	ldr	r1, [pc, #28]	; (f9b8 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    f99c:	ldr	r3, [pc, #28]	; (f9bc <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f99e:	movs	r0, #9
  m_errorLine = line;
    f9a0:	movw	r2, #959	; 0x3bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    f9a4:	strb	r0, [r1, #0]
  m_errorLine = line;
    f9a6:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    f9a8:	mov	r0, r4
    f9aa:	pop	{r4, r5, r6, pc}
    f9ac:	.word	0x400b1028
    f9b0:	.word	0x0cdb0000
    f9b4:	.word	0x0000e9a9
    f9b8:	.word	0x1fff0a04
    f9bc:	.word	0x1fff24a0

0000f9c0 <SdioCard::isBusy()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
    f9c0:	push	{r4, r5, r6, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    f9c2:	ldrb	r3, [r0, #8]
    f9c4:	ands.w	r3, r3, #1
    f9c8:	beq.n	f9d6 <SdioCard::isBusy()+0x16>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    f9ca:	ldr	r3, [pc, #88]	; (fa24 <SdioCard::isBusy()+0x64>)
    f9cc:	ldr	r3, [r3, #0]
    f9ce:	cbz	r3, fa08 <SdioCard::isBusy()+0x48>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    f9d0:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    f9d4:	bx	r3
  } else {
    if (m_transferActive) {
    f9d6:	ldr	r2, [pc, #80]	; (fa28 <SdioCard::isBusy()+0x68>)
    f9d8:	ldrb	r4, [r2, #0]
    f9da:	cbnz	r4, f9ec <SdioCard::isBusy()+0x2c>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    f9dc:	ldr	r3, [pc, #76]	; (fa2c <SdioCard::isBusy()+0x6c>)
    f9de:	ldr	r4, [r3, #0]
    f9e0:	eor.w	r4, r4, #16777216	; 0x1000000
    f9e4:	ubfx	r4, r4, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    f9e8:	mov	r0, r4
    f9ea:	pop	{r4, r5, r6, pc}
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    f9ec:	ldr	r5, [pc, #64]	; (fa30 <SdioCard::isBusy()+0x70>)
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    f9ee:	ldr	r1, [pc, #68]	; (fa34 <SdioCard::isBusy()+0x74>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    f9f0:	ldr	r5, [r5, #0]
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    f9f2:	ands	r1, r5
    f9f4:	cmp	r1, #0
    f9f6:	beq.n	f9e8 <SdioCard::isBusy()+0x28>
        return true;
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
    f9f8:	ldr	r1, [pc, #60]	; (fa38 <SdioCard::isBusy()+0x78>)
    f9fa:	ldr	r5, [r1, #0]
    f9fc:	lsrs	r5, r5, #16
    f9fe:	lsls	r5, r5, #16
    fa00:	cbz	r5, fa18 <SdioCard::isBusy()+0x58>
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    fa02:	mov	r4, r3
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    fa04:	mov	r0, r4
    fa06:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    fa08:	ldr	r3, [pc, #48]	; (fa3c <SdioCard::isBusy()+0x7c>)
    fa0a:	ldrb	r4, [r3, #0]
    fa0c:	cmp	r4, #0
    fa0e:	beq.n	f9e8 <SdioCard::isBusy()+0x28>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    fa10:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    fa14:	b.w	ec38 <isBusyCMD13()>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
      stopTransmission(false);
    fa18:	mov	r1, r5
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
    fa1a:	strb	r5, [r2, #0]
      stopTransmission(false);
    fa1c:	bl	f958 <SdioCard::stopTransmission(bool)>
    fa20:	b.n	f9e8 <SdioCard::isBusy()+0x28>
    fa22:	nop
    fa24:	.word	0x1fff246c
    fa28:	.word	0x1fff247c
    fa2c:	.word	0x400b1024
    fa30:	.word	0x400b1030
    fa34:	.word	0x117f0002
    fa38:	.word	0x400b1004
    fa3c:	.word	0x1fff2484

0000fa40 <SdioCard::syncDevice()>:
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    fa40:	ldr	r3, [pc, #36]	; (fa68 <SdioCard::syncDevice()+0x28>)
    fa42:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    fa44:	push	{r4, lr}
    fa46:	mov	r4, r0
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    fa48:	cbnz	r3, fa5e <SdioCard::syncDevice()+0x1e>
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    fa4a:	ldrb	r3, [r4, #9]
    fa4c:	cbnz	r3, fa52 <SdioCard::syncDevice()+0x12>
    if (!writeStop()) {
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
    fa4e:	movs	r0, #1
    fa50:	pop	{r4, pc}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    fa52:	mov	r0, r4
    fa54:	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    fa56:	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    fa5a:	b.w	f958 <SdioCard::stopTransmission(bool)>
    fa5e:	bl	ef14 <waitTransferComplete() [clone .part.8]>
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    fa62:	cmp	r0, #0
    fa64:	bne.n	fa4a <SdioCard::syncDevice()+0xa>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    fa66:	pop	{r4, pc}
    fa68:	.word	0x1fff247c

0000fa6c <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    fa6c:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    fa6e:	ldr	r3, [r0, #0]
    fa70:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    fa72:	ldrb	r1, [r3, #11]
    fa74:	cbz	r1, fab6 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    fa76:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    fa78:	ldrb	r1, [r3, #11]
    fa7a:	lsls	r0, r1, #31
    fa7c:	bpl.n	fa8c <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    fa7e:	ldr	r0, [pc, #100]	; (fae4 <SdSpiArduinoDriver::activate()+0x78>)
    fa80:	ldr	r1, [r3, #12]
    fa82:	ldr	r4, [r0, #0]
    fa84:	ands	r1, r4
    fa86:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    fa88:	str	r1, [r0, #0]
    fa8a:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    fa8c:	lsls	r4, r1, #30
    fa8e:	bpl.n	fa9e <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    fa90:	ldr	r0, [pc, #84]	; (fae8 <SdSpiArduinoDriver::activate()+0x7c>)
    fa92:	ldr	r1, [r3, #16]
    fa94:	ldr	r4, [r0, #0]
    fa96:	ands	r1, r4
    fa98:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    fa9a:	str	r1, [r0, #0]
    fa9c:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    fa9e:	lsls	r0, r1, #29
    faa0:	bpl.n	fab0 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    faa2:	ldr	r0, [pc, #72]	; (faec <SdSpiArduinoDriver::activate()+0x80>)
    faa4:	ldr	r1, [r3, #20]
    faa6:	ldr	r4, [r0, #0]
    faa8:	ands	r1, r4
    faaa:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    faac:	str	r1, [r0, #0]
    faae:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    fab0:	lsls	r1, r1, #28
    fab2:	bmi.n	fad4 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    fab4:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    fab6:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    fab8:	ldr	r1, [r3, #12]
    faba:	cmp	r1, r2
    fabc:	beq.n	face <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    fabe:	ldr	r0, [pc, #48]	; (faf0 <SdSpiArduinoDriver::activate()+0x84>)
    fac0:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    fac2:	ldr	r1, [pc, #48]	; (faf4 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    fac4:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    fac6:	orr.w	r0, r2, #1073741824	; 0x40000000
    faca:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    facc:	str	r1, [r3, #0]
}
    face:	ldr.w	r4, [sp], #4
    fad2:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    fad4:	ldr	r0, [pc, #32]	; (faf8 <SdSpiArduinoDriver::activate()+0x8c>)
    fad6:	ldr	r1, [r3, #24]
    fad8:	ldr	r4, [r0, #0]
    fada:	ands	r1, r4
    fadc:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    fade:	str	r1, [r0, #0]
    fae0:	b.n	fab4 <SdSpiArduinoDriver::activate()+0x48>
    fae2:	nop
    fae4:	.word	0xe000e180
    fae8:	.word	0xe000e184
    faec:	.word	0xe000e188
    faf0:	.word	0x003f4001
    faf4:	.word	0x803f0000
    faf8:	.word	0xe000e18c

0000fafc <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    fafc:	push	{r4, lr}
    fafe:	sub	sp, #16
    fb00:	add	r4, sp, #16
    fb02:	stmdb	r4, {r1, r2, r3}
    fb06:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    fb08:	cbz	r3, fb18 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1c>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    fb0a:	str	r3, [r0, #0]
    fb0c:	mov	r0, r3
  }
  m_spi->begin();
}
    fb0e:	add	sp, #16
    fb10:	ldmia.w	sp!, {r4, lr}
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    fb14:	b.w	7488 <SPIClass::begin()>
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    fb18:	ldrb.w	r3, [sp, #4]
    fb1c:	cmp	r3, #62	; 0x3e
    fb1e:	beq.n	fb24 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x28>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    fb20:	ldr	r3, [pc, #32]	; (fb44 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x48>)
    fb22:	b.n	fb0a <SdSpiArduinoDriver::begin(SdSpiConfig)+0xe>
    fb24:	mov	r4, r0
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    m_spi = &SDCARD_SPI;
    fb26:	ldr	r0, [pc, #32]	; (fb48 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x4c>)
    fb28:	str	r0, [r4, #0]
    m_spi->setMISO(SDCARD_MISO_PIN);
    fb2a:	movs	r1, #59	; 0x3b
    fb2c:	bl	75a8 <SPIClass::setMISO(unsigned char)>
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    fb30:	movs	r1, #61	; 0x3d
    fb32:	ldr	r0, [r4, #0]
    fb34:	bl	7504 <SPIClass::setMOSI(unsigned char)>
    m_spi->setSCK(SDCARD_SCK_PIN);
    fb38:	ldr	r0, [r4, #0]
    fb3a:	movs	r1, #60	; 0x3c
    fb3c:	bl	7648 <SPIClass::setSCK(unsigned char)>
    fb40:	ldr	r0, [r4, #0]
    fb42:	b.n	fb0e <SdSpiArduinoDriver::begin(SdSpiConfig)+0x12>
    fb44:	.word	0x1fff0980
    fb48:	.word	0x1fff09c0

0000fb4c <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    fb4c:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    fb4e:	ldrb	r3, [r2, #11]
    fb50:	cbz	r3, fb80 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    fb52:	lsls	r1, r3, #31
    fb54:	bpl.n	fb5e <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    fb56:	ldr	r3, [pc, #44]	; (fb84 <SdSpiArduinoDriver::deactivate()+0x38>)
    fb58:	ldr	r1, [r2, #28]
    fb5a:	str	r1, [r3, #0]
    fb5c:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    fb5e:	lsls	r0, r3, #30
    fb60:	bpl.n	fb6a <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    fb62:	ldr	r3, [pc, #36]	; (fb88 <SdSpiArduinoDriver::deactivate()+0x3c>)
    fb64:	ldr	r1, [r2, #32]
    fb66:	str	r1, [r3, #0]
    fb68:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    fb6a:	lsls	r1, r3, #29
    fb6c:	bpl.n	fb76 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    fb6e:	ldr	r3, [pc, #28]	; (fb8c <SdSpiArduinoDriver::deactivate()+0x40>)
    fb70:	ldr	r1, [r2, #36]	; 0x24
    fb72:	str	r1, [r3, #0]
    fb74:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    fb76:	lsls	r3, r3, #28
    fb78:	bpl.n	fb80 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    fb7a:	ldr	r3, [pc, #20]	; (fb90 <SdSpiArduinoDriver::deactivate()+0x44>)
    fb7c:	ldr	r2, [r2, #40]	; 0x28
    fb7e:	str	r2, [r3, #0]
    fb80:	bx	lr
    fb82:	nop
    fb84:	.word	0xe000e100
    fb88:	.word	0xe000e104
    fb8c:	.word	0xe000e108
    fb90:	.word	0xe000e10c

0000fb94 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    fb94:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    fb96:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    fb98:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    fb9c:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    fb9e:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    fba0:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    fba2:	ldr	r3, [r2, #44]	; 0x2c
    fba4:	cmp	r3, #0
    fba6:	bge.n	fba2 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    fba8:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    fbaa:	uxtb	r0, r0
    fbac:	bx	lr
    fbae:	nop

0000fbb0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    fbb0:	push	{r4, r5, r6, lr}
    fbb2:	mov	r5, r0
    fbb4:	mov	r4, r1
    fbb6:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    fbb8:	mov	r0, r1
    fbba:	movs	r1, #255	; 0xff
    fbbc:	bl	12f4c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    fbc0:	ldr	r0, [r5, #0]
    fbc2:	mov	r3, r6
    fbc4:	mov	r2, r4
    fbc6:	mov	r1, r4
    fbc8:	bl	76f8 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    fbcc:	movs	r0, #0
    fbce:	pop	{r4, r5, r6, pc}

0000fbd0 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    fbd0:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    fbd2:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    fbd4:	mov.w	r3, #2147483648	; 0x80000000
    fbd8:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    fbda:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    fbdc:	ldr	r3, [r2, #44]	; 0x2c
    fbde:	cmp	r3, #0
    fbe0:	bge.n	fbdc <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    fbe2:	ldr	r3, [r2, #56]	; 0x38
    fbe4:	bx	lr
    fbe6:	nop

0000fbe8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    fbe8:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    fbea:	subs	r5, r2, #1
    fbec:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    fbf0:	sub.w	sp, sp, #516	; 0x204
    fbf4:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    fbf6:	bcc.n	fc1e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    fbf8:	cbz	r2, fc18 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    fbfa:	ldr	r2, [r0, #0]
    fbfc:	ldr	r2, [r2, #0]
    fbfe:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    fc00:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    fc04:	ldrb.w	r3, [r1], #1
    fc08:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    fc0a:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    fc0c:	ldr	r3, [r2, #44]	; 0x2c
    fc0e:	cmp	r3, #0
    fc10:	bge.n	fc0c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    fc12:	cmp	r1, r0
		return port().POPR;
    fc14:	ldr	r3, [r2, #56]	; 0x38
    fc16:	bne.n	fc04 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    fc18:	add.w	sp, sp, #516	; 0x204
    fc1c:	pop	{r4, r5, pc}
    fc1e:	mov	r5, r0
    fc20:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    fc22:	mov	r0, sp
    fc24:	bl	fc48 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    fc28:	mov	r3, r4
    fc2a:	mov	r2, sp
    fc2c:	mov	r1, sp
    fc2e:	ldr	r0, [r5, #0]
    fc30:	bl	76f8 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    fc34:	add.w	sp, sp, #516	; 0x204
    fc38:	pop	{r4, r5, pc}
    fc3a:	nop

0000fc3c <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    fc3c:	movs	r1, #1
    fc3e:	b.w	10600 <pinMode>
    fc42:	nop

0000fc44 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    fc44:	b.w	105f4 <digitalWrite>

0000fc48 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    fc48:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    fc4a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    fc4e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    fc52:	bne.n	fd30 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    fc54:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    fc56:	bcc.n	fcdc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    fc58:	ldr.w	r3, [r1], #4
    fc5c:	str.w	r3, [r0], #4
    fc60:	ldr.w	r3, [r1], #4
    fc64:	str.w	r3, [r0], #4
    fc68:	ldr.w	r3, [r1], #4
    fc6c:	str.w	r3, [r0], #4
    fc70:	ldr.w	r3, [r1], #4
    fc74:	str.w	r3, [r0], #4
    fc78:	ldr.w	r3, [r1], #4
    fc7c:	str.w	r3, [r0], #4
    fc80:	ldr.w	r3, [r1], #4
    fc84:	str.w	r3, [r0], #4
    fc88:	ldr.w	r3, [r1], #4
    fc8c:	str.w	r3, [r0], #4
    fc90:	ldr.w	r3, [r1], #4
    fc94:	str.w	r3, [r0], #4
    fc98:	ldr.w	r3, [r1], #4
    fc9c:	str.w	r3, [r0], #4
    fca0:	ldr.w	r3, [r1], #4
    fca4:	str.w	r3, [r0], #4
    fca8:	ldr.w	r3, [r1], #4
    fcac:	str.w	r3, [r0], #4
    fcb0:	ldr.w	r3, [r1], #4
    fcb4:	str.w	r3, [r0], #4
    fcb8:	ldr.w	r3, [r1], #4
    fcbc:	str.w	r3, [r0], #4
    fcc0:	ldr.w	r3, [r1], #4
    fcc4:	str.w	r3, [r0], #4
    fcc8:	ldr.w	r3, [r1], #4
    fccc:	str.w	r3, [r0], #4
    fcd0:	ldr.w	r3, [r1], #4
    fcd4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    fcd8:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    fcda:	bcs.n	fc58 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    fcdc:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    fcde:	bcc.n	fd04 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    fce0:	ldr.w	r3, [r1], #4
    fce4:	str.w	r3, [r0], #4
    fce8:	ldr.w	r3, [r1], #4
    fcec:	str.w	r3, [r0], #4
    fcf0:	ldr.w	r3, [r1], #4
    fcf4:	str.w	r3, [r0], #4
    fcf8:	ldr.w	r3, [r1], #4
    fcfc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    fd00:	subs	r2, #16
	bhs	.Lmid_block_loop
    fd02:	bcs.n	fce0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    fd04:	adds	r2, #12
	blo	.Lcopy_less_than_4
    fd06:	bcc.n	fd14 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    fd08:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    fd0c:	str.w	r3, [r0], #4
	subs	r2, #4
    fd10:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    fd12:	bcs.n	fd08 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    fd14:	adds	r2, #4
	beq	.Ldone
    fd16:	beq.n	fd2a <memcpy+0xe2>

	lsls	r2, r2, #31
    fd18:	lsls	r2, r2, #31
	itt ne
    fd1a:	itt	ne
	ldrbne  r3, [r1], #1
    fd1c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    fd20:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    fd24:	bcc.n	fd2a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    fd26:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    fd28:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    fd2a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    fd2c:	bx	lr
    fd2e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    fd30:	cmp	r2, #8
	blo	.Lbyte_copy
    fd32:	bcc.n	fd5c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    fd34:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    fd36:	beq.n	fc54 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    fd38:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    fd3c:	beq.n	fc54 <memcpy+0xc>

	rsb	r3, #4
    fd3e:	rsb	r3, r3, #4
	subs	r2, r3
    fd42:	subs	r2, r2, r3

	lsls    r3, r3, #31
    fd44:	lsls	r3, r3, #31
	itt ne
    fd46:	itt	ne
	ldrbne  r3, [r1], #1
    fd48:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    fd4c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    fd50:	bcc.n	fc54 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    fd52:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    fd56:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    fd5a:	b.n	fc54 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    fd5c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    fd5e:	bcc.n	fd14 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    fd60:	subs	r2, #1
	ldrb    r3, [r1], #1
    fd62:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    fd66:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    fd6a:	bcs.n	fd60 <memcpy+0x118>

	ldrb	r3, [r1]
    fd6c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    fd6e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    fd70:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    fd72:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    fd74:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    fd76:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    fd78:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    fd7a:	bx	lr

0000fd7c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    fd7c:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    fd7e:	ldr	r5, [pc, #60]	; (fdbc <usb_serial_getchar+0x40>)
    fd80:	ldr	r0, [r5, #0]
    fd82:	cbz	r0, fda4 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    fd84:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    fd86:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    fd88:	adds	r1, r0, r3
    fd8a:	adds	r3, #1
	if (i >= rx_packet->len) {
    fd8c:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    fd8e:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    fd90:	bcs.n	fd98 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    fd92:	strh	r3, [r0, #2]
	}
	return c;
    fd94:	mov	r0, r4
}
    fd96:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    fd98:	bl	10898 <usb_free>
		rx_packet = NULL;
    fd9c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    fd9e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    fda0:	str	r3, [r5, #0]
    fda2:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    fda4:	ldr	r3, [pc, #24]	; (fdc0 <usb_serial_getchar+0x44>)
    fda6:	ldrb	r3, [r3, #0]
    fda8:	cbz	r3, fdb6 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    fdaa:	movs	r0, #2
    fdac:	bl	108e4 <usb_rx>
    fdb0:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    fdb2:	cmp	r0, #0
    fdb4:	bne.n	fd84 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    fdb6:	mov.w	r0, #4294967295
    fdba:	pop	{r3, r4, r5, pc}
    fdbc:	.word	0x1fff24b0
    fdc0:	.word	0x1fff25bc

0000fdc4 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    fdc4:	push	{r4, lr}
	if (!rx_packet) {
    fdc6:	ldr	r4, [pc, #36]	; (fdec <usb_serial_peekchar+0x28>)
    fdc8:	ldr	r0, [r4, #0]
    fdca:	cbz	r0, fdd4 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    fdcc:	ldrh	r3, [r0, #2]
    fdce:	add	r0, r3
    fdd0:	ldrb	r0, [r0, #8]
}
    fdd2:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    fdd4:	ldr	r3, [pc, #24]	; (fdf0 <usb_serial_peekchar+0x2c>)
    fdd6:	ldrb	r3, [r3, #0]
    fdd8:	cbz	r3, fde6 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    fdda:	movs	r0, #2
    fddc:	bl	108e4 <usb_rx>
    fde0:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    fde2:	cmp	r0, #0
    fde4:	bne.n	fdcc <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    fde6:	mov.w	r0, #4294967295
    fdea:	pop	{r4, pc}
    fdec:	.word	0x1fff24b0
    fdf0:	.word	0x1fff25bc

0000fdf4 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    fdf4:	ldr	r3, [pc, #16]	; (fe08 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    fdf6:	ldr	r2, [pc, #20]	; (fe0c <usb_serial_available+0x18>)
    fdf8:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    fdfa:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    fdfc:	cbz	r3, fe06 <usb_serial_available+0x12>
    fdfe:	ldrh	r2, [r3, #0]
    fe00:	ldrh	r3, [r3, #2]
    fe02:	subs	r3, r2, r3
    fe04:	add	r0, r3
	return count;
}
    fe06:	bx	lr
    fe08:	.word	0x1fff24b0
    fe0c:	.word	0x1fff2638

0000fe10 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    fe10:	ldr	r3, [pc, #44]	; (fe40 <usb_serial_flush_input+0x30>)
    fe12:	ldrb	r3, [r3, #0]
    fe14:	cbz	r3, fe3e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    fe16:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    fe18:	ldr	r4, [pc, #40]	; (fe44 <usb_serial_flush_input+0x34>)
    fe1a:	ldr	r0, [r4, #0]
    fe1c:	cbz	r0, fe32 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    fe1e:	bl	10898 <usb_free>
		rx_packet = NULL;
    fe22:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    fe24:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    fe26:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    fe28:	bl	108e4 <usb_rx>
		if (!rx) break;
    fe2c:	cbz	r0, fe3c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    fe2e:	bl	10898 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    fe32:	movs	r0, #2
    fe34:	bl	108e4 <usb_rx>
		if (!rx) break;
    fe38:	cmp	r0, #0
    fe3a:	bne.n	fe2e <usb_serial_flush_input+0x1e>
    fe3c:	pop	{r4, pc}
    fe3e:	bx	lr
    fe40:	.word	0x1fff25bc
    fe44:	.word	0x1fff24b0

0000fe48 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    fe48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    fe4c:	ldr.w	r9, [pc, #248]	; ff48 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    fe50:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    fe52:	movs	r2, #1
    fe54:	strb.w	r2, [r9]
	while (size > 0) {
    fe58:	str	r1, [sp, #4]
    fe5a:	cbz	r1, feb8 <usb_serial_write+0x70>
    fe5c:	ldr.w	r8, [pc, #236]	; ff4c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    fe60:	ldr	r7, [pc, #216]	; (ff3c <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    fe62:	ldr	r6, [sp, #4]
    fe64:	mov	fp, r0
		if (!tx_packet) {
    fe66:	ldr.w	r0, [r8]
    fe6a:	cbz	r0, feda <usb_serial_write+0x92>
    fe6c:	ldr	r5, [pc, #208]	; (ff40 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    fe6e:	ldrh	r4, [r0, #2]
    fe70:	rsb	r1, r4, #64	; 0x40
    fe74:	cmp	r1, r6
    fe76:	it	cs
    fe78:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    fe7a:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    fe7e:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    fe80:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    fe84:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    fe86:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    fe88:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    fe8c:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    fe90:	cbz	r1, fea8 <usb_serial_write+0x60>
    fe92:	subs	r4, #1
    fe94:	add	r2, r4
    fe96:	add	r1, fp
    fe98:	ldrb.w	r4, [fp], #1
    fe9c:	strb.w	r4, [r2, #1]!
    fea0:	cmp	fp, r1
    fea2:	bne.n	fe98 <usb_serial_write+0x50>
    fea4:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    fea8:	cmp.w	lr, #63	; 0x3f
    feac:	bhi.n	fec6 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    feae:	ldr	r2, [pc, #148]	; (ff44 <usb_serial_write+0xfc>)
    feb0:	movs	r1, #5
    feb2:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    feb4:	cmp	r6, #0
    feb6:	bne.n	fe66 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    feb8:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    feba:	movs	r3, #0
    febc:	strb.w	r3, [r9]
	return ret;
}
    fec0:	add	sp, #12
    fec2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    fec6:	movs	r2, #64	; 0x40
    fec8:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    feca:	mov	r1, r0
    fecc:	movs	r0, #3
    fece:	bl	10a54 <usb_tx>
			tx_packet = NULL;
    fed2:	movs	r2, #0
    fed4:	str.w	r2, [r8]
    fed8:	b.n	feae <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    feda:	ldrb	r2, [r7, #0]
    fedc:	cbz	r2, ff2a <usb_serial_write+0xe2>
    fede:	ldr	r5, [pc, #96]	; (ff40 <usb_serial_write+0xf8>)
    fee0:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    fee4:	mov.w	sl, #1
    fee8:	b.n	fefa <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    feea:	subs	r4, #1
    feec:	beq.n	ff1c <usb_serial_write+0xd4>
    feee:	ldrb	r2, [r5, #0]
    fef0:	cbnz	r2, ff1c <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    fef2:	bl	115e8 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    fef6:	ldrb	r2, [r7, #0]
    fef8:	cbz	r2, ff2a <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    fefa:	movs	r0, #3
    fefc:	bl	10920 <usb_tx_packet_count>
    ff00:	cmp	r0, #7
    ff02:	bhi.n	feea <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    ff04:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    ff08:	bl	10858 <usb_malloc>
    ff0c:	str.w	r0, [r8]
					if (tx_packet) break;
    ff10:	cmp	r0, #0
    ff12:	bne.n	fe6e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    ff14:	ldr	r3, [pc, #48]	; (ff48 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ff16:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    ff18:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ff1a:	bne.n	feee <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    ff1c:	movs	r3, #1
					return -1;
    ff1e:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    ff22:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    ff24:	add	sp, #12
    ff26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    ff2a:	movs	r3, #0
					return -1;
    ff2c:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    ff30:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    ff34:	add	sp, #12
    ff36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff3a:	nop
    ff3c:	.word	0x1fff25bc
    ff40:	.word	0x1fff24ac
    ff44:	.word	0x1fff24a4
    ff48:	.word	0x1fff24a5
    ff4c:	.word	0x1fff24a8

0000ff50 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ff50:	push	{lr}
    ff52:	sub	sp, #12
    ff54:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    ff56:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ff58:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    ff5c:	mov	r0, r3
    ff5e:	bl	fe48 <usb_serial_write>
}
    ff62:	add	sp, #12
    ff64:	ldr.w	pc, [sp], #4

0000ff68 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    ff68:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    ff6a:	ldr	r5, [pc, #56]	; (ffa4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    ff6c:	ldr	r4, [pc, #56]	; (ffa8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    ff6e:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    ff70:	movs	r3, #1
    ff72:	strb	r3, [r4, #0]
	if (!tx_packet) {
    ff74:	cbz	r0, ff82 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    ff76:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    ff78:	movs	r3, #0
    ff7a:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    ff7c:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    ff80:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    ff82:	ldr	r3, [pc, #40]	; (ffac <usb_serial_write_buffer_free+0x44>)
    ff84:	ldrb	r3, [r3, #0]
    ff86:	cbnz	r3, ff8e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    ff88:	movs	r0, #0
    ff8a:	strb	r0, [r4, #0]
			return 0;
    ff8c:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    ff8e:	movs	r0, #3
    ff90:	bl	10920 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    ff94:	cmp	r0, #7
    ff96:	bhi.n	ff88 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    ff98:	bl	10858 <usb_malloc>
    ff9c:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    ff9e:	cmp	r0, #0
    ffa0:	bne.n	ff76 <usb_serial_write_buffer_free+0xe>
    ffa2:	b.n	ff88 <usb_serial_write_buffer_free+0x20>
    ffa4:	.word	0x1fff24a8
    ffa8:	.word	0x1fff24a5
    ffac:	.word	0x1fff25bc

0000ffb0 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    ffb0:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    ffb2:	ldr	r3, [pc, #68]	; (fff8 <usb_serial_flush_output+0x48>)
    ffb4:	ldrb	r3, [r3, #0]
    ffb6:	cbz	r3, ffdc <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    ffb8:	ldr	r6, [pc, #64]	; (fffc <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    ffba:	ldr	r5, [pc, #68]	; (10000 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    ffbc:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    ffbe:	movs	r7, #1
    ffc0:	strb	r7, [r5, #0]
	if (tx_packet) {
    ffc2:	cbz	r4, ffde <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    ffc4:	ldr	r2, [pc, #60]	; (10004 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    ffc6:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    ffc8:	movs	r7, #0
    ffca:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    ffcc:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    ffce:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    ffd0:	movs	r0, #3
    ffd2:	bl	10a54 <usb_tx>
		tx_packet = NULL;
    ffd6:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    ffd8:	movs	r3, #0
    ffda:	strb	r3, [r5, #0]
    ffdc:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    ffde:	bl	10858 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    ffe2:	ldr	r3, [pc, #32]	; (10004 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    ffe4:	cbz	r0, fff2 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    ffe6:	mov	r1, r0
    ffe8:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    ffea:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    ffec:	bl	10a54 <usb_tx>
    fff0:	b.n	ffd8 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    fff2:	strb	r7, [r3, #0]
    fff4:	b.n	ffd8 <usb_serial_flush_output+0x28>
    fff6:	nop
    fff8:	.word	0x1fff25bc
    fffc:	.word	0x1fff24a8
   10000:	.word	0x1fff24a5
   10004:	.word	0x1fff24a4

00010008 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
   10008:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
   1000a:	ldr	r3, [pc, #56]	; (10044 <usb_serial_flush_callback+0x3c>)
   1000c:	ldrb	r3, [r3, #0]
   1000e:	cbnz	r3, 1002e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
   10010:	ldr	r4, [pc, #52]	; (10048 <usb_serial_flush_callback+0x40>)
   10012:	ldr	r1, [r4, #0]
   10014:	cbz	r1, 10030 <usb_serial_flush_callback+0x28>
   10016:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
   1001a:	ldrh	r3, [r1, #2]
   1001c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
   1001e:	movs	r0, #3
   10020:	bl	10a54 <usb_tx>
		tx_packet = NULL;
   10024:	str	r5, [r4, #0]
   10026:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
   10028:	ldr	r3, [pc, #32]	; (1004c <usb_serial_flush_callback+0x44>)
   1002a:	movs	r2, #1
   1002c:	strb	r2, [r3, #0]
   1002e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
   10030:	bl	10858 <usb_malloc>
		if (tx) {
   10034:	cmp	r0, #0
   10036:	beq.n	10028 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
   10038:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
   1003a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
   1003e:	movs	r0, #3
   10040:	b.w	10a54 <usb_tx>
   10044:	.word	0x1fff24a5
   10048:	.word	0x1fff24a8
   1004c:	.word	0x1fff24a4

00010050 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
   10050:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
   10052:	ldr	r4, [pc, #64]	; (10094 <fault_isr+0x44>)
   10054:	b.n	10068 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
   10056:	ldr	r3, [r4, #0]
   10058:	lsls	r1, r3, #21
   1005a:	bmi.n	10078 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
   1005c:	ldr	r3, [r4, #0]
   1005e:	lsls	r2, r3, #20
   10060:	bmi.n	10082 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
   10062:	ldr	r3, [r4, #0]
   10064:	lsls	r3, r3, #19
   10066:	bmi.n	1008c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
   10068:	ldr	r3, [r4, #0]
   1006a:	lsls	r0, r3, #13
   1006c:	bpl.n	10056 <fault_isr+0x6>
   1006e:	bl	10ad8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
   10072:	ldr	r3, [r4, #0]
   10074:	lsls	r1, r3, #21
   10076:	bpl.n	1005c <fault_isr+0xc>
   10078:	bl	10098 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
   1007c:	ldr	r3, [r4, #0]
   1007e:	lsls	r2, r3, #20
   10080:	bpl.n	10062 <fault_isr+0x12>
   10082:	bl	10098 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
   10086:	ldr	r3, [r4, #0]
   10088:	lsls	r3, r3, #19
   1008a:	bpl.n	10068 <fault_isr+0x18>
   1008c:	bl	10098 <unused_isr>
   10090:	b.n	10068 <fault_isr+0x18>
   10092:	nop
   10094:	.word	0x40048034

00010098 <unused_isr>:
	}
}

void unused_isr(void)
{
   10098:	push	{r3, lr}
	fault_isr();
   1009a:	bl	10050 <fault_isr>
   1009e:	nop

000100a0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
   100a0:	ldr	r3, [pc, #4]	; (100a8 <startup_early_hook+0x8>)
   100a2:	movs	r2, #16
   100a4:	strh	r2, [r3, #0]
   100a6:	bx	lr
   100a8:	.word	0x40052000

000100ac <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
   100ac:	bx	lr
   100ae:	nop

000100b0 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
   100b0:	ldr	r1, [pc, #36]	; (100d8 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
   100b2:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
   100b4:	ldr	r3, [r1, #0]
	if (incr != 0) {
   100b6:	cbz	r0, 100c6 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
   100b8:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
   100ba:	add	r0, r3
   100bc:	sub.w	r2, r2, #8192	; 0x2000
   100c0:	cmp	r0, r2
   100c2:	bcs.n	100ca <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
   100c4:	str	r0, [r1, #0]
	}
	return prev;
   100c6:	mov	r0, r3
}
   100c8:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
   100ca:	bl	12768 <__errno>
   100ce:	movs	r3, #12
   100d0:	str	r3, [r0, #0]
			return (void *)-1;
   100d2:	mov.w	r0, #4294967295
   100d6:	pop	{r3, pc}
   100d8:	.word	0x1fff0a08

000100dc <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
   100dc:	b.n	100dc <__cxa_pure_virtual>
   100de:	nop

000100e0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
   100e0:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
   100e2:	ldr	r2, [pc, #96]	; (10144 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   100e4:	ldr	r3, [pc, #96]	; (10148 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
   100e6:	ldr	r1, [pc, #100]	; (1014c <usb_init_serialnumber+0x6c>)
   100e8:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   100ea:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   100ec:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   100ee:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   100f0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   100f2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   100f4:	ldrb	r3, [r2, #0]
   100f6:	lsls	r3, r3, #24
   100f8:	bpl.n	100f4 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   100fa:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
   100fc:	ldr	r3, [pc, #80]	; (10150 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   100fe:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
   10100:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
   10102:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   10104:	ldr	r3, [pc, #76]	; (10154 <usb_init_serialnumber+0x74>)
   10106:	ldr	r4, [pc, #80]	; (10158 <usb_init_serialnumber+0x78>)
   10108:	cmp	r0, r3
   1010a:	it	ls
   1010c:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
   10110:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   10112:	it	ls
   10114:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
   10116:	movs	r2, #10
   10118:	bl	1015c <ultoa>
   1011c:	add	r1, sp, #4
   1011e:	mov	r0, r4
	for (i=0; i<10; i++) {
   10120:	movs	r3, #0
		char c = buf[i];
   10122:	ldrb.w	r2, [r1], #1
   10126:	adds	r3, #1
		if (!c) break;
   10128:	cbz	r2, 1013a <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   1012a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   1012c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   10130:	bne.n	10122 <usb_init_serialnumber+0x42>
   10132:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   10134:	strb	r3, [r4, #0]
}
   10136:	add	sp, #16
   10138:	pop	{r4, pc}
   1013a:	lsls	r3, r3, #1
   1013c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   1013e:	strb	r3, [r4, #0]
}
   10140:	add	sp, #16
   10142:	pop	{r4, pc}
   10144:	.word	0x40020004
   10148:	.word	0x40020000
   1014c:	.word	0x41070000
   10150:	.word	0x4002000c
   10154:	.word	0x0098967f
   10158:	.word	0x1fff0ae0

0001015c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   1015c:	push	{r4, r5, r6, r7}
   1015e:	subs	r5, r1, #1
   10160:	mov	r6, r5
	unsigned digit;
	int i=0, j;
   10162:	movs	r4, #0
   10164:	b.n	10168 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   10166:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
   10168:	udiv	r3, r0, r2
   1016c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   10170:	cmp	r0, #9
   10172:	add.w	r7, r0, #48	; 0x30
   10176:	itet	hi
   10178:	addhi	r0, #55	; 0x37
   1017a:	uxtbls	r0, r7
   1017c:	uxtbhi	r0, r0
   1017e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
   10182:	mov	r0, r3
   10184:	cmp	r3, #0
   10186:	bne.n	10166 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
   10188:	adds	r2, r1, r4
   1018a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
   1018c:	cbz	r4, 101a2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
   1018e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
   10190:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
   10194:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   10196:	adds	r3, #1
   10198:	subs	r0, r4, r3
   1019a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
   1019c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   101a0:	blt.n	1018e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
   101a2:	mov	r0, r1
   101a4:	pop	{r4, r5, r6, r7}
   101a6:	bx	lr

000101a8 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
   101a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101ac:	vpush	{d8}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
   101b0:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
   101b4:	eor.w	r3, r0, r0, asr #31
	if (isnanf(val)) {
   101b8:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
   101bc:	sub	sp, #16
   101be:	vmov.f32	s16, s0
   101c2:	mov	r5, r0
   101c4:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
   101c6:	sub.w	r3, r3, r0, asr #31
	if (isnanf(val)) {
   101ca:	bvs.w	10428 <dtostrf+0x280>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
   101ce:	vldr	s15, [pc, #800]	; 104f0 <dtostrf+0x348>
   101d2:	vabs.f32	s14, s0
   101d6:	vcmp.f32	s14, s15
   101da:	vmrs	APSR_nzcv, fpscr
   101de:	ble.n	10266 <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
   101e0:	vcmpe.f32	s0, #0.0
   101e4:	vmrs	APSR_nzcv, fpscr
   101e8:	ite	mi
   101ea:	movmi	r0, #4
   101ec:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   101ee:	cmp	r0, r3
   101f0:	blt.n	10236 <dtostrf+0x8e>
		if (width<0) {
   101f2:	cmp	r5, #0
   101f4:	blt.w	104de <dtostrf+0x336>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   101f8:	movs	r0, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
   101fa:	vcmpe.f32	s16, #0.0
   101fe:	vmrs	APSR_nzcv, fpscr
   10202:	it	mi
   10204:	movmi	r3, r4
   10206:	bmi.n	1025e <dtostrf+0xb6>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   10208:	movs	r1, #73	; 0x49
   1020a:	movs	r2, #78	; 0x4e
   1020c:	movs	r3, #70	; 0x46
   1020e:	strb	r1, [r4, #0]
   10210:	strb	r2, [r4, #1]
   10212:	strb	r3, [r4, #2]
   10214:	adds	r4, #3
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
   10216:	cmp	r0, #0
   10218:	beq.w	104e6 <dtostrf+0x33e>
   1021c:	add	r0, r4
			*buf++ = ' ';
   1021e:	movs	r3, #32
   10220:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
   10224:	cmp	r0, r4
   10226:	bne.n	10220 <dtostrf+0x78>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
   10228:	movs	r3, #0
   1022a:	strb	r3, [r0, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
   1022c:	add	sp, #16
   1022e:	vpop	{d8}
   10232:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
   10236:	cmp	r5, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   10238:	sub.w	r0, r3, r0
		if (width<0) {
   1023c:	bge.n	101fa <dtostrf+0x52>
			while (awidth) {
   1023e:	cmp	r0, #0
   10240:	beq.w	104de <dtostrf+0x336>
   10244:	adds	r3, r2, r0
				*buf++ = ' ';
   10246:	movs	r2, #32
   10248:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
   1024c:	cmp	r4, r3
   1024e:	bne.n	10248 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
   10250:	vcmpe.f32	s16, #0.0
   10254:	vmrs	APSR_nzcv, fpscr
   10258:	bpl.w	10494 <dtostrf+0x2ec>
   1025c:	movs	r0, #0
   1025e:	movs	r2, #45	; 0x2d
   10260:	strb	r2, [r3, #0]
   10262:	adds	r4, r3, #1
   10264:	b.n	10208 <dtostrf+0x60>
   10266:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
   10268:	add	r2, sp, #8
   1026a:	add	r1, sp, #4
   1026c:	mov	r0, r7
   1026e:	bl	12744 <fcvtf>
   10272:	mov	sl, r7
   10274:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
   10276:	ldr.w	r9, [sp, #4]
   1027a:	cmp	r7, #0
   1027c:	beq.n	10332 <dtostrf+0x18a>
   1027e:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
   10282:	cmp	r3, r7
   10284:	bgt.w	103b4 <dtostrf+0x20c>
   10288:	mov	r0, r8
   1028a:	bl	13580 <strlen>
   1028e:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
   10290:	cmp	r9, r6
   10292:	it	lt
   10294:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
   10296:	cmp.w	r9, #0
   1029a:	bne.w	103d2 <dtostrf+0x22a>
   1029e:	adds	r6, #1
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
   102a0:	ldr.w	lr, [sp, #8]
   102a4:	cmp.w	lr, #0
   102a8:	beq.n	10356 <dtostrf+0x1ae>
   102aa:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
   102ac:	subs	r0, r5, r6
	if (pad > 0) {
   102ae:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
   102b0:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
   102b4:	bgt.n	10362 <dtostrf+0x1ba>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
   102b6:	mov	r3, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
   102b8:	movs	r2, #45	; 0x2d
   102ba:	strb	r2, [r3, #0]
   102bc:	adds	r3, #1
	if (decpt == 0 && precision > 0) {
   102be:	cmp.w	r9, #0
   102c2:	bne.n	10390 <dtostrf+0x1e8>
   102c4:	cbz	r7, 102d4 <dtostrf+0x12c>
		*p++ = '0';
   102c6:	mov	r2, r3
   102c8:	movs	r0, #48	; 0x30
   102ca:	strb.w	r0, [r2], #2
		*p++ = '.';
   102ce:	movs	r0, #46	; 0x2e
   102d0:	strb	r0, [r3, #1]
   102d2:	mov	r3, r2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   102d4:	cmp	r3, r1
   102d6:	bcs.n	1031a <dtostrf+0x172>
		*p++ = *s++;
   102d8:	adds	r7, r3, #1
   102da:	ldrb.w	r2, [r8]
   102de:	strb	r2, [r3, #0]
		if (p == e) break;
   102e0:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
   102e2:	add.w	r8, r8, #1
		if (p == e) break;
   102e6:	beq.n	1031c <dtostrf+0x174>
   102e8:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
   102ea:	mov.w	lr, #46	; 0x2e
   102ee:	b.n	10308 <dtostrf+0x160>
   102f0:	strb.w	lr, [r3, #1]
   102f4:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   102f6:	cmp	r3, r1
		*p++ = *s++;
   102f8:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   102fc:	bcs.n	1031a <dtostrf+0x172>
		*p++ = *s++;
   102fe:	ldrb.w	r0, [r8], #1
   10302:	strb	r0, [r3, #0]
		if (p == e) break;
   10304:	cmp	r7, r1
   10306:	beq.n	1031c <dtostrf+0x174>
		if (--decpt == 0) *p++ = '.';
   10308:	subs	r2, #1
   1030a:	str	r2, [sp, #4]
   1030c:	cmp	r2, #0
   1030e:	beq.n	102f0 <dtostrf+0x148>
   10310:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   10312:	cmp	r3, r1
		*p++ = *s++;
   10314:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   10318:	bcc.n	102fe <dtostrf+0x156>
   1031a:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
   1031c:	cmp	r5, #0
   1031e:	blt.w	10468 <dtostrf+0x2c0>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
   10322:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
   10324:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
   10326:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
   10328:	add	sp, #16
   1032a:	vpop	{d8}
   1032e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
   10332:	cmp.w	r9, #0
   10336:	bne.n	1027e <dtostrf+0xd6>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
   10338:	ldrb.w	r8, [r0]
   1033c:	ldr	r1, [pc, #436]	; (104f4 <dtostrf+0x34c>)
   1033e:	ldr	r2, [pc, #440]	; (104f8 <dtostrf+0x350>)
		decpt++;
   10340:	movs	r3, #1
   10342:	str	r3, [sp, #4]
   10344:	mov	r9, r3
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
   10346:	cmp.w	r8, #52	; 0x34
   1034a:	ite	hi
   1034c:	movhi	r8, r1
   1034e:	movls	r8, r2
		decpt++;
   10350:	mov.w	r3, #4294967295
   10354:	b.n	10282 <dtostrf+0xda>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
   10356:	subs	r0, r5, r6
	if (pad > 0) {
   10358:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
   1035a:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
   1035e:	ble.w	104ea <dtostrf+0x342>
		e += pad;
   10362:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
   10364:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
   10366:	subs	r0, #1
   10368:	mov.w	ip, #32
   1036c:	strb.w	ip, [r2], #1
   10370:	rsb	r3, r2, #1
   10374:	add	r3, r0
   10376:	add	r3, r4
   10378:	cmp	r3, #0
   1037a:	bgt.n	1036c <dtostrf+0x1c4>
   1037c:	bic.w	r3, r0, r0, asr #31
   10380:	adds	r3, #1
   10382:	add	r3, r4
	}
	if (sign) *p++ = '-';
   10384:	cmp.w	lr, #0
   10388:	bne.n	102b8 <dtostrf+0x110>
	if (decpt == 0 && precision > 0) {
   1038a:	cmp.w	r9, #0
   1038e:	beq.n	102c4 <dtostrf+0x11c>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
   10390:	bge.n	102d4 <dtostrf+0x12c>
   10392:	cmp	r7, #0
   10394:	beq.n	102d4 <dtostrf+0x12c>
		*p++ = '0';
   10396:	mov	r2, r3
   10398:	movs	r0, #48	; 0x30
   1039a:	strb.w	r0, [r2], #2
		*p++ = '.';
   1039e:	movs	r7, #46	; 0x2e
   103a0:	strb	r7, [r3, #1]
   103a2:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
   103a6:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
   103aa:	cmp	r3, r2
   103ac:	bne.n	103a6 <dtostrf+0x1fe>
   103ae:	movs	r2, #0
   103b0:	str	r2, [sp, #4]
   103b2:	b.n	102d4 <dtostrf+0x12c>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
   103b4:	rsb	r9, r7, #0
   103b8:	movs	r6, #1
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
   103ba:	cmp	r9, r6
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
   103bc:	mov	r0, r6
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
   103be:	it	lt
   103c0:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
   103c2:	cmp.w	r9, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
   103c6:	ldr.w	r8, [pc, #304]	; 104f8 <dtostrf+0x350>
		decpt = -precision;
   103ca:	str.w	r9, [sp, #4]

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
   103ce:	beq.w	1029e <dtostrf+0xf6>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
   103d2:	bge.w	102a0 <dtostrf+0xf8>
   103d6:	cmp	r7, #0
   103d8:	beq.w	102a0 <dtostrf+0xf8>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
   103dc:	add.w	r3, r9, r7
   103e0:	cmp	r0, r3
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
   103e2:	add.w	r6, r7, #2

		if (strlen(s) > precision + decpt) {
   103e6:	bls.w	102a0 <dtostrf+0xf8>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
   103ea:	cmp	r7, #0
   103ec:	ble.n	103fc <dtostrf+0x254>
				val *= 10.0;
   103ee:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
   103f2:	subs.w	sl, sl, #1
				val *= 10.0;
   103f6:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
   103fa:	bne.n	103f2 <dtostrf+0x24a>
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   103fc:	add	r2, sp, #8
   103fe:	mov	r0, sl
   10400:	vmov.f32	s0, s16
   10404:	add	r1, sp, #12
   10406:	bl	12744 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   1040a:	ldr.w	r9, [sp, #4]
   1040e:	ldr	r2, [sp, #12]
   10410:	adds	r3, r7, #1
   10412:	rsb	r2, r9, r2
   10416:	cmp	r2, r3
   10418:	it	eq
   1041a:	addeq.w	r9, r9, #1
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   1041e:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   10420:	it	eq
   10422:	streq.w	r9, [sp, #4]
   10426:	b.n	102a0 <dtostrf+0xf8>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
   10428:	vcmpe.f32	s0, #0.0
   1042c:	vmrs	APSR_nzcv, fpscr
   10430:	ite	mi
   10432:	movmi	r0, #4
   10434:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   10436:	cmp	r0, r3
   10438:	bge.n	104a4 <dtostrf+0x2fc>
		if (width<0) {
   1043a:	cmp	r5, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1043c:	sub.w	r3, r3, r0
		if (width<0) {
   10440:	blt.n	104b6 <dtostrf+0x30e>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   10442:	vmov	r2, s16
   10446:	cmp	r2, #0
   10448:	blt.n	104ac <dtostrf+0x304>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1044a:	movs	r2, #78	; 0x4e
   1044c:	movs	r1, #65	; 0x41
   1044e:	strb	r2, [r4, #0]
   10450:	strb	r2, [r4, #2]
   10452:	strb	r1, [r4, #1]
   10454:	adds	r4, #3
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
   10456:	cmp	r3, #0
   10458:	beq.n	104e6 <dtostrf+0x33e>
   1045a:	adds	r0, r4, r3
			*buf++ = ' ';
   1045c:	movs	r3, #32
   1045e:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
   10462:	cmp	r4, r0
   10464:	bne.n	1045e <dtostrf+0x2b6>
   10466:	b.n	10228 <dtostrf+0x80>
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
   10468:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
   1046a:	negs	r3, r0
   1046c:	cmp	r3, #0
   1046e:	mvn.w	r0, r0
   10472:	ble.w	10322 <dtostrf+0x17a>
   10476:	mov	r2, r1
   10478:	movs	r5, #32
   1047a:	strb.w	r5, [r2], #1
   1047e:	rsb	r3, r2, #1
   10482:	add	r3, r0
   10484:	add	r3, r1
   10486:	cmp	r3, #0
   10488:	bgt.n	1047a <dtostrf+0x2d2>
   1048a:	bic.w	r3, r0, r0, asr #31
   1048e:	adds	r3, #1
   10490:	add	r1, r3
   10492:	b.n	10322 <dtostrf+0x17a>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   10494:	movs	r0, #73	; 0x49
   10496:	movs	r1, #78	; 0x4e
   10498:	movs	r2, #70	; 0x46
   1049a:	strb	r0, [r3, #0]
   1049c:	strb	r1, [r3, #1]
   1049e:	strb	r2, [r3, #2]
   104a0:	adds	r0, r3, #3
   104a2:	b.n	10228 <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
   104a4:	cmp	r5, #0
   104a6:	blt.n	104da <dtostrf+0x332>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   104a8:	movs	r3, #0
   104aa:	b.n	10442 <dtostrf+0x29a>
   104ac:	mov	r0, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   104ae:	movs	r2, #45	; 0x2d
   104b0:	strb	r2, [r0, #0]
   104b2:	adds	r4, r0, #1
   104b4:	b.n	1044a <dtostrf+0x2a2>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
   104b6:	cbz	r3, 104da <dtostrf+0x332>
   104b8:	adds	r0, r2, r3
				*buf++ = ' ';
   104ba:	movs	r3, #32
   104bc:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
   104c0:	cmp	r4, r0
   104c2:	bne.n	104bc <dtostrf+0x314>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   104c4:	vmov	r3, s16
   104c8:	cmp	r3, #0
   104ca:	blt.n	104e2 <dtostrf+0x33a>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   104cc:	movs	r3, #78	; 0x4e
   104ce:	movs	r2, #65	; 0x41
   104d0:	strb	r3, [r0, #0]
   104d2:	strb	r3, [r0, #2]
   104d4:	strb	r2, [r0, #1]
   104d6:	adds	r0, #3
   104d8:	b.n	10228 <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
   104da:	mov	r0, r4
   104dc:	b.n	104c4 <dtostrf+0x31c>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
   104de:	mov	r3, r4
   104e0:	b.n	10250 <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   104e2:	movs	r3, #0
   104e4:	b.n	104ae <dtostrf+0x306>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   104e6:	mov	r0, r4
   104e8:	b.n	10228 <dtostrf+0x80>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
   104ea:	mov	r3, r4
   104ec:	b.n	102be <dtostrf+0x116>
   104ee:	nop
   104f0:	.word	0x7f7fffff
   104f4:	.word	0x000174cc
   104f8:	.word	0x000174c8

000104fc <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
   104fc:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
   104fe:	ldr	r3, [pc, #68]	; (10544 <digitalWrite.part.1+0x48>)
   10500:	ldr.w	r2, [r3, r0, lsl #3]
   10504:	ldrb.w	r4, [r2, #640]	; 0x280
   10508:	cbz	r4, 10518 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
   1050a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
   1050c:	cbz	r1, 1052e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
   1050e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
   10512:	ldr.w	r4, [sp], #4
   10516:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
   10518:	add.w	r3, r3, r0, lsl #3
   1051c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
   1051e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
   10520:	cbnz	r1, 10538 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
   10522:	bic.w	r2, r2, #2
   10526:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
   10528:	ldr.w	r4, [sp], #4
   1052c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
   1052e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
   10532:	ldr.w	r4, [sp], #4
   10536:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
   10538:	orr.w	r2, r2, #3
   1053c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
   1053e:	ldr.w	r4, [sp], #4
   10542:	bx	lr
   10544:	.word	0x000174d0

00010548 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
   10548:	ldr	r2, [pc, #112]	; (105bc <pinMode.part.2+0x74>)
   1054a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   1054e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
   10550:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   10552:	beq.n	10578 <pinMode.part.2+0x30>
   10554:	cmp	r1, #4
   10556:	beq.n	10590 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
   10558:	ldr.w	r0, [r2, r0, lsl #3]
   1055c:	movs	r2, #0
   1055e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
   10562:	cbz	r1, 10570 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
   10564:	cmp	r1, #2
   10566:	beq.n	105aa <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
   10568:	cmp	r1, #3
   1056a:	beq.n	105b2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
   1056c:	str	r2, [r3, #0]
   1056e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
   10570:	mov.w	r2, #256	; 0x100
   10574:	str	r2, [r3, #0]
   10576:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
   10578:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
   1057c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
   10580:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
   10584:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
   10586:	ldr	r2, [r3, #0]
   10588:	bic.w	r2, r2, #32
   1058c:	str	r2, [r3, #0]
   1058e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
   10590:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
   10594:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
   10598:	movs	r0, #1
   1059a:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
   1059e:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
   105a0:	ldr	r2, [r3, #0]
   105a2:	orr.w	r2, r2, #32
   105a6:	str	r2, [r3, #0]
   105a8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
   105aa:	movw	r2, #259	; 0x103
   105ae:	str	r2, [r3, #0]
   105b0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
   105b2:	mov.w	r2, #258	; 0x102
   105b6:	str	r2, [r3, #0]
   105b8:	bx	lr
   105ba:	nop
   105bc:	.word	0x000174d0

000105c0 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
   105c0:	adds	r0, #16
   105c2:	ldr	r3, [pc, #8]	; (105cc <attachInterruptVector+0xc>)
   105c4:	str.w	r1, [r3, r0, lsl #2]
   105c8:	bx	lr
   105ca:	nop
   105cc:	.word	0x1fff0200

000105d0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
   105d0:	push	{r4, r5}
	RTC_SR = 0;
   105d2:	ldr	r3, [pc, #20]	; (105e8 <rtc_set+0x18>)
	RTC_TPR = 0;
   105d4:	ldr	r5, [pc, #20]	; (105ec <rtc_set+0x1c>)
	RTC_TSR = t;
   105d6:	ldr	r4, [pc, #24]	; (105f0 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
   105d8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
   105da:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
   105dc:	str	r2, [r3, #0]
	RTC_TPR = 0;
   105de:	str	r2, [r5, #0]
	RTC_TSR = t;
   105e0:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
   105e2:	str	r1, [r3, #0]
}
   105e4:	pop	{r4, r5}
   105e6:	bx	lr
   105e8:	.word	0x4003d014
   105ec:	.word	0x4003d004
   105f0:	.word	0x4003d000

000105f4 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
   105f4:	cmp	r0, #63	; 0x3f
   105f6:	bhi.n	105fc <digitalWrite+0x8>
   105f8:	b.w	104fc <digitalWrite.part.1>
   105fc:	bx	lr
   105fe:	nop

00010600 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
   10600:	cmp	r0, #63	; 0x3f
   10602:	bhi.n	10608 <pinMode+0x8>
   10604:	b.w	10548 <pinMode.part.2>
   10608:	bx	lr
   1060a:	nop

0001060c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
   1060c:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
   1060e:	ldr	r1, [pc, #48]	; (10640 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   10610:	ldr	r3, [pc, #48]	; (10644 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   10612:	ldr	r2, [pc, #52]	; (10648 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   10614:	ldr	r3, [r3, #0]
	count = systick_millis_count;
   10616:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   10618:	ldr	r2, [r2, #0]
	__enable_irq();
   1061a:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
   1061c:	lsls	r2, r2, #5
   1061e:	bpl.n	10626 <micros+0x1a>
   10620:	cmp	r3, #50	; 0x32
   10622:	it	hi
   10624:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
   10626:	ldr	r1, [pc, #36]	; (1064c <micros+0x40>)
   10628:	rsb	r3, r3, #95744	; 0x17600
   1062c:	mov.w	r2, #1000	; 0x3e8
   10630:	adds	r3, #255	; 0xff
   10632:	umull	r1, r3, r1, r3
   10636:	mul.w	r0, r2, r0
}
   1063a:	add.w	r0, r0, r3, lsr #6
   1063e:	bx	lr
   10640:	.word	0x1fff24b8
   10644:	.word	0xe000e018
   10648:	.word	0xe000ed04
   1064c:	.word	0xaaaaaaab

00010650 <delay>:

void delay(uint32_t ms)
{
   10650:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10654:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
   10656:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
   10658:	ldr	r7, [pc, #128]	; (106dc <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   1065a:	ldr	r3, [pc, #132]	; (106e0 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   1065c:	ldr	r2, [pc, #132]	; (106e4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   1065e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
   10660:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   10662:	ldr	r2, [r2, #0]
	__enable_irq();
   10664:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
   10666:	lsls	r2, r2, #5
   10668:	bpl.n	10670 <delay+0x20>
   1066a:	cmp	r3, #50	; 0x32
   1066c:	it	hi
   1066e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
   10670:	cbz	r5, 106d8 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
   10672:	rsb	r3, r3, #95744	; 0x17600
   10676:	ldr	r6, [pc, #112]	; (106e8 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   10678:	ldr.w	r9, [pc, #100]	; 106e0 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   1067c:	ldr.w	r8, [pc, #100]	; 106e4 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
   10680:	adds	r3, #255	; 0xff
   10682:	mov.w	r2, #1000	; 0x3e8
   10686:	umull	r1, r3, r6, r3
   1068a:	mul.w	r4, r2, r4
   1068e:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
   10692:	cpsid	i
	current = SYST_CVR;
   10694:	ldr.w	r1, [r9]
	count = systick_millis_count;
   10698:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   1069a:	ldr.w	lr, [r8]
	__enable_irq();
   1069e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
   106a0:	rsb	r3, r1, #95744	; 0x17600
   106a4:	adds	r3, #255	; 0xff
   106a6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
   106aa:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
   106ae:	rsb	r3, r4, r3, lsr #6
   106b2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
   106b6:	beq.n	106be <delay+0x6e>
   106b8:	cmp	r1, #50	; 0x32
   106ba:	it	hi
   106bc:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
   106be:	mla	r3, r0, r2, r3
   106c2:	cmp.w	r3, #1000	; 0x3e8
   106c6:	bcc.n	106d2 <delay+0x82>
				ms--;
				if (ms == 0) return;
   106c8:	subs	r5, #1
   106ca:	beq.n	106d8 <delay+0x88>
				start += 1000;
   106cc:	add.w	r4, r4, #1000	; 0x3e8
   106d0:	b.n	10692 <delay+0x42>
			}
			yield();
   106d2:	bl	115e8 <yield>
		}
   106d6:	b.n	10692 <delay+0x42>
   106d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   106dc:	.word	0x1fff24b8
   106e0:	.word	0xe000e018
   106e4:	.word	0xe000ed04
   106e8:	.word	0xaaaaaaab

000106ec <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
   106ec:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
   106ee:	ldr	r3, [pc, #312]	; (10828 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
   106f0:	ldr	r0, [pc, #312]	; (1082c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
   106f2:	ldr.w	ip, [pc, #348]	; 10850 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
   106f6:	ldr	r4, [pc, #312]	; (10830 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
   106f8:	ldr	r1, [pc, #312]	; (10834 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
   106fa:	ldr.w	lr, [pc, #344]	; 10854 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
   106fe:	ldr	r6, [pc, #312]	; (10838 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
   10700:	ldr	r5, [pc, #312]	; (1083c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
   10702:	ldr	r7, [pc, #316]	; (10840 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
   10704:	mov.w	r2, #134217728	; 0x8000000
   10708:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
   1070a:	mov.w	r2, #268435456	; 0x10000000
   1070e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
   10710:	mov.w	r2, #536870912	; 0x20000000
   10714:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
   10716:	mov.w	r2, #1073741824	; 0x40000000
   1071a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
   1071c:	mov.w	r2, #2147483648	; 0x80000000
   10720:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
   10722:	movs	r2, #0
   10724:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
   10726:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
   10728:	movw	r0, #49151	; 0xbfff
   1072c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
   10730:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
   10734:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
   10736:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
   1073a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
   1073c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
   1073e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
   10740:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
   10744:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
   10746:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
   1074a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
   1074c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
   10750:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
   10752:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
   10756:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
   1075a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
   1075e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
   10762:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
   10766:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
   10768:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
   1076c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
   1076e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
   10770:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
   10772:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
   10776:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
   10778:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
   1077a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   1077c:	ldr	r4, [pc, #196]	; (10844 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
   1077e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
   10780:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   10782:	movs	r1, #9
   10784:	str	r1, [r4, #0]
	FTM1_CNT = 0;
   10786:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
   1078a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
   1078e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
   10790:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
   10792:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
   10794:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
   10796:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
   10798:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   1079a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
   1079e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
   107a2:	add.w	r7, r7, #520192	; 0x7f000
   107a6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
   107a8:	addw	r4, r4, #2044	; 0x7fc
   107ac:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
   107ae:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
   107b0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
   107b2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   107b4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
   107b8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
   107ba:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
   107be:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
   107c2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
   107c4:	sub.w	r4, r4, #460800	; 0x70800
   107c8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
   107cc:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
   107ce:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   107d0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
   107d4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
   107d6:	ldr	r0, [pc, #112]	; (10848 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
   107d8:	orr.w	r1, r1, #512	; 0x200
   107dc:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
   107de:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
   107e0:	ldr	r4, [pc, #104]	; (1084c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
   107e2:	add.w	lr, lr, #65280	; 0xff00
   107e6:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
   107ea:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
   107ee:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
   107f2:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
   107f6:	orr.w	r1, r1, #33554432	; 0x2000000
   107fa:	str	r1, [r0, #0]
	TPM1_CNT = 0;
   107fc:	str.w	r2, [lr]
	TPM1_MOD = 32767;
   10800:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
   10804:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
   10806:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
   10808:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
   1080a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
   1080c:	str	r2, [r4, #0]
#endif
	analog_init();
   1080e:	bl	119b4 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
   10812:	movs	r0, #25
   10814:	bl	10650 <delay>
	usb_init();
   10818:	bl	11520 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
   1081c:	movw	r0, #275	; 0x113
}
   10820:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
   10824:	b.w	10650 <delay>
   10828:	.word	0xe000e104
   1082c:	.word	0x40038004
   10830:	.word	0x40038014
   10834:	.word	0x4003801c
   10838:	.word	0x40038024
   1083c:	.word	0x4003802c
   10840:	.word	0x40038034
   10844:	.word	0x40038000
   10848:	.word	0x40048004
   1084c:	.word	0x400c9000
   10850:	.word	0x40038008
   10854:	.word	0x4003800c

00010858 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
   10858:	cpsid	i
	avail = usb_buffer_available;
   1085a:	ldr	r0, [pc, #52]	; (10890 <usb_malloc+0x38>)
   1085c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
   1085e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
   10862:	cmp	r3, #19
   10864:	bgt.n	10888 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
   10866:	mov.w	r1, #2147483648	; 0x80000000
   1086a:	lsrs	r1, r3
   1086c:	bic.w	r2, r2, r1
   10870:	str	r2, [r0, #0]
	__enable_irq();
   10872:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
   10874:	ldr	r0, [pc, #28]	; (10894 <usb_malloc+0x3c>)
   10876:	add.w	r3, r3, r3, lsl #3
   1087a:	lsls	r3, r3, #3
   1087c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
   1087e:	movs	r1, #0
   10880:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
   10882:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
   10884:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
   10886:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
   10888:	cpsie	i
		return NULL;
   1088a:	movs	r0, #0
   1088c:	bx	lr
   1088e:	nop
   10890:	.word	0x1fff0af8
   10894:	.word	0x1fff03d0

00010898 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
   10898:	ldr	r3, [pc, #52]	; (108d0 <usb_free+0x38>)
   1089a:	ldr	r2, [pc, #56]	; (108d4 <usb_free+0x3c>)
   1089c:	subs	r3, r0, r3
   1089e:	umull	r2, r3, r2, r3
   108a2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
   108a4:	cmp	r3, #19
   108a6:	bhi.n	108c2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
   108a8:	ldr	r2, [pc, #44]	; (108d8 <usb_free+0x40>)
   108aa:	ldrb	r2, [r2, #0]
   108ac:	cbnz	r2, 108c4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
   108ae:	cpsid	i
	usb_buffer_available |= mask;
   108b0:	ldr	r0, [pc, #40]	; (108dc <usb_free+0x44>)
   108b2:	mov.w	r1, #2147483648	; 0x80000000
   108b6:	ldr	r2, [r0, #0]
   108b8:	lsr.w	r3, r1, r3
   108bc:	orrs	r2, r3
   108be:	str	r2, [r0, #0]
	__enable_irq();
   108c0:	cpsie	i
   108c2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
   108c4:	ldr	r2, [pc, #24]	; (108e0 <usb_free+0x48>)
   108c6:	ldrb	r2, [r2, #0]
   108c8:	cmp	r2, #0
   108ca:	beq.n	108ae <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
   108cc:	b.w	1094c <usb_rx_memory>
   108d0:	.word	0x1fff03d0
   108d4:	.word	0x38e38e39
   108d8:	.word	0x1fff25b1
   108dc:	.word	0x1fff0af8
   108e0:	.word	0x1fff25bc

000108e4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
   108e4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
   108e6:	cmp	r3, #5
   108e8:	bhi.n	10914 <usb_rx+0x30>
	__disable_irq();
   108ea:	cpsid	i
	ret = rx_first[endpoint];
   108ec:	ldr	r1, [pc, #40]	; (10918 <usb_rx+0x34>)
   108ee:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
   108f2:	cbz	r0, 10910 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
   108f4:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
   108f6:	ldr	r4, [pc, #36]	; (1091c <usb_rx+0x38>)
   108f8:	ldrh	r5, [r0, #0]
   108fa:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
   108fe:	ldr	r6, [r0, #4]
   10900:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
   10904:	subs	r2, r2, r5
   10906:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
   1090a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
   1090c:	pop	{r4, r5, r6}
   1090e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
   10910:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
   10912:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
   10914:	movs	r0, #0
   10916:	bx	lr
   10918:	.word	0x1fff251c
   1091c:	.word	0x1fff2638

00010920 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
   10920:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
   10922:	cmp	r0, #5
   10924:	bhi.n	1093e <usb_tx_packet_count+0x1e>
	__disable_irq();
   10926:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
   10928:	ldr	r3, [pc, #28]	; (10948 <usb_tx_packet_count+0x28>)
   1092a:	ldr.w	r3, [r3, r0, lsl #2]
   1092e:	cbz	r3, 10942 <usb_tx_packet_count+0x22>
   10930:	movs	r0, #0
   10932:	ldr	r3, [r3, #4]
   10934:	adds	r0, #1
   10936:	cmp	r3, #0
   10938:	bne.n	10932 <usb_tx_packet_count+0x12>
	__enable_irq();
   1093a:	cpsie	i
	return count;
   1093c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
   1093e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
   10940:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
   10942:	mov	r0, r3
   10944:	b.n	1093a <usb_tx_packet_count+0x1a>
   10946:	nop
   10948:	.word	0x1fff2578

0001094c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
   1094c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
   1094e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   10950:	ldr	r2, [pc, #236]	; (10a40 <usb_rx_memory+0xf4>)
   10952:	ldrb	r3, [r2, #0]
   10954:	lsls	r1, r3, #28
   10956:	bpl.n	10966 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
   10958:	ldr	r3, [pc, #232]	; (10a44 <usb_rx_memory+0xf8>)
   1095a:	ldr	r1, [r3, #32]
   1095c:	cmp	r1, #0
   1095e:	beq.n	10a00 <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   10960:	ldr	r1, [r3, #40]	; 0x28
   10962:	cmp	r1, #0
   10964:	beq.n	10a1c <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   10966:	ldrb	r3, [r2, #1]
   10968:	lsls	r3, r3, #28
   1096a:	bpl.n	1097a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
   1096c:	ldr	r3, [pc, #212]	; (10a44 <usb_rx_memory+0xf8>)
   1096e:	ldr	r1, [r3, #64]	; 0x40
   10970:	cmp	r1, #0
   10972:	beq.n	10a30 <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   10974:	ldr	r1, [r3, #72]	; 0x48
   10976:	cmp	r1, #0
   10978:	beq.n	10a20 <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   1097a:	ldrb	r3, [r2, #2]
   1097c:	lsls	r5, r3, #28
   1097e:	bpl.n	1098e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
   10980:	ldr	r3, [pc, #192]	; (10a44 <usb_rx_memory+0xf8>)
   10982:	ldr	r1, [r3, #96]	; 0x60
   10984:	cmp	r1, #0
   10986:	beq.n	10a2c <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   10988:	ldr	r1, [r3, #104]	; 0x68
   1098a:	cmp	r1, #0
   1098c:	beq.n	10a24 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   1098e:	ldrb	r3, [r2, #3]
   10990:	lsls	r4, r3, #28
   10992:	bpl.n	109a6 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
   10994:	ldr	r3, [pc, #172]	; (10a44 <usb_rx_memory+0xf8>)
   10996:	ldr.w	r1, [r3, #128]	; 0x80
   1099a:	cmp	r1, #0
   1099c:	beq.n	10a34 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   1099e:	ldr.w	r1, [r3, #136]	; 0x88
   109a2:	cmp	r1, #0
   109a4:	beq.n	10a28 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   109a6:	ldrb	r3, [r2, #4]
   109a8:	lsls	r1, r3, #28
   109aa:	bpl.n	109bc <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
   109ac:	ldr	r3, [pc, #148]	; (10a44 <usb_rx_memory+0xf8>)
   109ae:	ldr.w	r1, [r3, #160]	; 0xa0
   109b2:	cmp	r1, #0
   109b4:	beq.n	10a3c <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   109b6:	ldr.w	r1, [r3, #168]	; 0xa8
   109ba:	cbz	r1, 109e2 <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   109bc:	ldrb	r3, [r2, #5]
   109be:	lsls	r3, r3, #28
   109c0:	bpl.n	109d4 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
   109c2:	ldr	r3, [pc, #128]	; (10a44 <usb_rx_memory+0xf8>)
   109c4:	ldr.w	r2, [r3, #192]	; 0xc0
   109c8:	cmp	r2, #0
   109ca:	beq.n	10a38 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   109cc:	ldr.w	r2, [r3, #200]	; 0xc8
   109d0:	movs	r4, #25
   109d2:	cbz	r2, 109e4 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
   109d4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
   109d6:	ldr	r3, [pc, #112]	; (10a48 <usb_rx_memory+0xfc>)
   109d8:	movs	r2, #0
   109da:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
   109dc:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
   109de:	b.w	10898 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   109e2:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
   109e4:	ldr	r1, [pc, #96]	; (10a48 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   109e6:	ldr	r5, [pc, #100]	; (10a4c <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
   109e8:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   109ea:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
   109ee:	add.w	r3, r3, r4, lsl #3
   109f2:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
   109f4:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
   109f6:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
   109f8:	strb	r2, [r1, #0]
				__enable_irq();
   109fa:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
   109fc:	pop	{r4, r5}
   109fe:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
   10a00:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
   10a02:	ldr	r4, [pc, #68]	; (10a48 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   10a04:	ldr	r5, [pc, #72]	; (10a50 <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
   10a06:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   10a08:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
   10a0c:	add.w	r3, r3, r2, lsl #3
   10a10:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
   10a12:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
   10a14:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
   10a16:	strb	r2, [r4, #0]
				__enable_irq();
   10a18:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
   10a1a:	b.n	109fc <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   10a1c:	movs	r4, #5
   10a1e:	b.n	109e4 <usb_rx_memory+0x98>
   10a20:	movs	r4, #9
   10a22:	b.n	109e4 <usb_rx_memory+0x98>
   10a24:	movs	r4, #13
   10a26:	b.n	109e4 <usb_rx_memory+0x98>
   10a28:	movs	r4, #17
   10a2a:	b.n	109e4 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
   10a2c:	movs	r2, #12
   10a2e:	b.n	10a02 <usb_rx_memory+0xb6>
   10a30:	movs	r2, #8
   10a32:	b.n	10a02 <usb_rx_memory+0xb6>
   10a34:	movs	r2, #16
   10a36:	b.n	10a02 <usb_rx_memory+0xb6>
   10a38:	movs	r2, #24
   10a3a:	b.n	10a02 <usb_rx_memory+0xb6>
   10a3c:	movs	r2, #20
   10a3e:	b.n	10a02 <usb_rx_memory+0xb6>
   10a40:	.word	0x00017460
   10a44:	.word	0x1fff0000
   10a48:	.word	0x1fff25b1
   10a4c:	.word	0x004000c8
   10a50:	.word	0x00400088

00010a54 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
   10a54:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
   10a56:	cmp	r3, #5
   10a58:	bhi.n	10a96 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
   10a5a:	ldr	r2, [pc, #108]	; (10ac8 <usb_tx+0x74>)
   10a5c:	lsls	r0, r0, #5
   10a5e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
   10a62:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
   10a64:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
   10a66:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
   10a68:	ldr	r4, [pc, #96]	; (10acc <usb_tx+0x78>)
   10a6a:	ldrb	r2, [r4, r3]
   10a6c:	cmp	r2, #3
   10a6e:	bhi.n	10aa8 <usb_tx+0x54>
   10a70:	tbb	[pc, r2]
   10a74:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
   10a78:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   10a7a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
   10a7c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   10a7e:	tst.w	r0, #8
   10a82:	ite	ne
   10a84:	movne	r3, #200	; 0xc8
   10a86:	moveq	r3, #136	; 0x88
   10a88:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
   10a8c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   10a8e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
   10a90:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
   10a92:	cpsie	i
}
   10a94:	pop	{r4, r5}
   10a96:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
   10a98:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
   10a9a:	movs	r2, #2
		break;
   10a9c:	b.n	10a7a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
   10a9e:	movs	r2, #5
   10aa0:	b.n	10a7a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
   10aa2:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
   10aa4:	movs	r2, #4
		break;
   10aa6:	b.n	10a7a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
   10aa8:	ldr	r2, [pc, #36]	; (10ad0 <usb_tx+0x7c>)
   10aaa:	ldr.w	r0, [r2, r3, lsl #2]
   10aae:	cbz	r0, 10ac0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
   10ab0:	ldr	r2, [pc, #32]	; (10ad4 <usb_tx+0x80>)
   10ab2:	ldr.w	r0, [r2, r3, lsl #2]
   10ab6:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
   10ab8:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
   10abc:	cpsie	i
		return;
   10abe:	b.n	10a94 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
   10ac0:	str.w	r1, [r2, r3, lsl #2]
   10ac4:	ldr	r2, [pc, #12]	; (10ad4 <usb_tx+0x80>)
   10ac6:	b.n	10ab8 <usb_tx+0x64>
   10ac8:	.word	0x1fff0000
   10acc:	.word	0x1fff25c0
   10ad0:	.word	0x1fff2578
   10ad4:	.word	0x1fff2590

00010ad8 <usb_isr>:
}



void usb_isr(void)
{
   10ad8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
   10adc:	ldr.w	fp, [pc, #780]	; 10dec <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
   10ae0:	ldr.w	sl, [pc, #780]	; 10df0 <usb_isr+0x318>
}



void usb_isr(void)
{
   10ae4:	sub	sp, #28
   10ae6:	b.n	10b72 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
   10ae8:	ldr	r7, [pc, #692]	; (10da0 <usb_isr+0x2c8>)
   10aea:	mov.w	r8, r3, lsr #2
   10aee:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
   10af2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
   10af4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
   10af8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
   10afc:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
   10afe:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
   10b02:	and.w	r4, r3, #255	; 0xff
   10b06:	cmp	r3, #0
   10b08:	bne.w	10df4 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
   10b0c:	ldr.w	r3, [r7, r8, lsl #3]
   10b10:	lsrs	r3, r3, #16
   10b12:	uxth	r1, r3
   10b14:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
   10b18:	cmp	r3, #0
   10b1a:	beq.w	10d8c <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
   10b1e:	ldr	r3, [pc, #644]	; (10da4 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
   10b20:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
   10b24:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
   10b28:	ldr.w	r2, [r3, r6, lsl #2]
   10b2c:	cmp	r2, #0
   10b2e:	beq.w	10e90 <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
   10b32:	ldr	r5, [pc, #628]	; (10da8 <usb_isr+0x2d0>)
   10b34:	ldr.w	r3, [r5, r6, lsl #2]
   10b38:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
   10b3a:	ldr	r4, [pc, #624]	; (10dac <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
   10b3c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
   10b40:	ldrh.w	r3, [r4, r6, lsl #1]
   10b44:	add	r1, r3
   10b46:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
   10b4a:	bl	10858 <usb_malloc>
					if (packet) {
   10b4e:	cmp	r0, #0
   10b50:	beq.w	10e82 <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
   10b54:	ldr	r2, [pc, #600]	; (10db0 <usb_isr+0x2d8>)
   10b56:	ldr	r3, [pc, #604]	; (10db4 <usb_isr+0x2dc>)
   10b58:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
   10b5c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
   10b60:	it	ne
   10b62:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
   10b64:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
   10b68:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
   10b6c:	movs	r3, #8
   10b6e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
   10b72:	ldrb.w	r4, [fp]
   10b76:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
   10b78:	lsls	r5, r4, #29
   10b7a:	bpl.n	10bb4 <usb_isr+0xdc>
		if (usb_configuration) {
   10b7c:	ldr	r3, [pc, #568]	; (10db8 <usb_isr+0x2e0>)
   10b7e:	ldrb	r3, [r3, #0]
   10b80:	cbz	r3, 10bae <usb_isr+0xd6>
			t = usb_reboot_timer;
   10b82:	ldr	r1, [pc, #568]	; (10dbc <usb_isr+0x2e4>)
   10b84:	ldrb	r2, [r1, #0]
			if (t) {
   10b86:	and.w	r3, r2, #255	; 0xff
   10b8a:	cbz	r2, 10b98 <usb_isr+0xc0>
				usb_reboot_timer = --t;
   10b8c:	subs	r3, #1
   10b8e:	uxtb	r3, r3
   10b90:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
   10b92:	cmp	r3, #0
   10b94:	beq.w	11516 <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
   10b98:	ldr	r1, [pc, #548]	; (10dc0 <usb_isr+0x2e8>)
   10b9a:	ldrb	r2, [r1, #0]
			if (t) {
   10b9c:	and.w	r3, r2, #255	; 0xff
   10ba0:	cbz	r2, 10bae <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
   10ba2:	subs	r3, #1
   10ba4:	uxtb	r3, r3
   10ba6:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
   10ba8:	cmp	r3, #0
   10baa:	beq.w	10e7c <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
   10bae:	movs	r3, #4
   10bb0:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
   10bb4:	and.w	r3, r4, #8
   10bb8:	and.w	r2, r3, #255	; 0xff
   10bbc:	cmp	r3, #0
   10bbe:	beq.w	10e4e <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
   10bc2:	ldrb.w	r3, [sl]
   10bc6:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
   10bc8:	lsrs	r6, r3, #4
   10bca:	bne.n	10ae8 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
   10bcc:	lsrs	r0, r3, #2
   10bce:	ldr.w	r9, [pc, #464]	; 10da0 <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
   10bd2:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
   10bd6:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
   10bda:	ubfx	r2, r2, #2, #4
   10bde:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
   10be0:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
   10be2:	cmp	r2, #12
   10be4:	bhi.w	10d6e <usb_isr+0x296>
   10be8:	tbh	[pc, r2, lsl #1]
   10bec:	.word	0x00c500c5
   10bf0:	.word	0x00c100c1
   10bf4:	.word	0x00c100c1
   10bf8:	.word	0x00c100c1
   10bfc:	.word	0x00c1008b
   10c00:	.word	0x00c100c1
   10c04:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
   10c06:	ldr	r2, [r1, #0]
   10c08:	ldr	r5, [pc, #440]	; (10dc4 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
   10c0a:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
   10c0c:	ldr	r7, [pc, #440]	; (10dc8 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
   10c0e:	ldr	r6, [pc, #444]	; (10dcc <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
   10c10:	ldr	r4, [pc, #412]	; (10db0 <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
   10c12:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   10c14:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
   10c16:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
   10c1a:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
   10c1c:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
   10c1e:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   10c20:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
   10c24:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
   10c26:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
   10c2a:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
   10c2e:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   10c30:	beq.w	112d2 <usb_isr+0x7fa>
   10c34:	bls.w	10e98 <usb_isr+0x3c0>
   10c38:	movw	r4, #8993	; 0x2321
   10c3c:	cmp	r1, r4
   10c3e:	beq.w	112dc <usb_isr+0x804>
   10c42:	bhi.w	10fce <usb_isr+0x4f6>
   10c46:	movw	r4, #8225	; 0x2021
   10c4a:	cmp	r1, r4
   10c4c:	beq.w	10fe4 <usb_isr+0x50c>
   10c50:	movw	r4, #8737	; 0x2221
   10c54:	cmp	r1, r4
   10c56:	beq.w	1112e <usb_isr+0x656>
   10c5a:	cmp.w	r1, #2304	; 0x900
   10c5e:	bne.w	10fde <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
   10c62:	ldr	r2, [pc, #340]	; (10db8 <usb_isr+0x2e0>)
   10c64:	ldr	r4, [pc, #312]	; (10da0 <usb_isr+0x2c8>)
   10c66:	ldrb	r1, [r5, #2]
   10c68:	strb	r1, [r2, #0]
   10c6a:	add.w	r5, r4, #192	; 0xc0
   10c6e:	b.n	10c76 <usb_isr+0x19e>
   10c70:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
   10c72:	cmp	r5, r4
   10c74:	beq.n	10c8a <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
   10c76:	ldr	r3, [r4, #32]
   10c78:	lsls	r0, r3, #24
   10c7a:	bpl.n	10c70 <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
   10c7c:	ldr	r0, [r4, #36]	; 0x24
   10c7e:	adds	r4, #8
   10c80:	subs	r0, #8
   10c82:	bl	10898 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
   10c86:	cmp	r5, r4
   10c88:	bne.n	10c76 <usb_isr+0x19e>
   10c8a:	ldr	r4, [pc, #324]	; (10dd0 <usb_isr+0x2f8>)
   10c8c:	ldr	r2, [pc, #276]	; (10da4 <usb_isr+0x2cc>)
   10c8e:	ldr	r1, [pc, #324]	; (10dd4 <usb_isr+0x2fc>)
   10c90:	ldr	r0, [pc, #324]	; (10dd8 <usb_isr+0x300>)
   10c92:	ldr	r5, [pc, #276]	; (10da8 <usb_isr+0x2d0>)
   10c94:	str	r4, [sp, #4]
   10c96:	movs	r3, #0
   10c98:	ldr	r4, [pc, #272]	; (10dac <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
   10c9a:	str	r6, [sp, #20]
   10c9c:	str	r5, [sp, #8]
   10c9e:	str	r4, [sp, #12]
   10ca0:	mov	r8, r0
   10ca2:	str	r7, [sp, #16]
   10ca4:	mov	r6, r2
   10ca6:	mov	r5, r1
   10ca8:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
   10caa:	ldr	r0, [r6, #0]
			while (p) {
   10cac:	cbz	r0, 10cba <usb_isr+0x1e2>
				n = p->next;
   10cae:	ldr	r7, [r0, #4]
				usb_free(p);
   10cb0:	bl	10898 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
   10cb4:	mov	r0, r7
   10cb6:	cmp	r7, #0
   10cb8:	bne.n	10cae <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
   10cba:	movs	r3, #0
   10cbc:	str	r3, [r6, #0]
			rx_last[i] = NULL;
   10cbe:	ldr	r3, [sp, #8]
			p = tx_first[i];
   10cc0:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
   10cc2:	mov	r2, r3
   10cc4:	movs	r3, #0
   10cc6:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
   10cca:	cbz	r0, 10cd8 <usb_isr+0x200>
				n = p->next;
   10ccc:	ldr	r7, [r0, #4]
				usb_free(p);
   10cce:	bl	10898 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
   10cd2:	mov	r0, r7
   10cd4:	cmp	r7, #0
   10cd6:	bne.n	10ccc <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
   10cd8:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
   10cda:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
   10cdc:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
   10cde:	str	r2, [r5, #0]
			tx_last[i] = NULL;
   10ce0:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
   10ce4:	ldr	r2, [sp, #12]
   10ce6:	mov.w	r1, #0
			switch (tx_state[i]) {
   10cea:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
   10cec:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
   10cf0:	cmp	r3, #3
   10cf2:	bhi.w	11208 <usb_isr+0x730>
   10cf6:	tbh	[pc, r3, lsl #1]
   10cfa:	.short	0x02e7
   10cfc:	.word	0x02e70283
   10d00:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
   10d02:	ldr	r7, [pc, #196]	; (10dc8 <usb_isr+0x2f0>)
   10d04:	ldr	r2, [r7, #0]
		if (data) {
   10d06:	cbz	r2, 10d5a <usb_isr+0x282>
			size = ep0_tx_len;
   10d08:	ldr	r3, [pc, #208]	; (10ddc <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10d0a:	ldr	r6, [pc, #192]	; (10dcc <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10d0c:	ldr	r1, [pc, #208]	; (10de0 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
   10d0e:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10d10:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10d12:	ldrb	r5, [r1, #0]
   10d14:	cmp	r0, #64	; 0x40
   10d16:	mov	lr, r0
   10d18:	orr.w	r8, r5, #2
   10d1c:	it	cs
   10d1e:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10d22:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
   10d24:	eor.w	r4, r4, #1
   10d28:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
   10d2a:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10d2e:	ite	eq
   10d30:	moveq	r4, #136	; 0x88
   10d32:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10d34:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
   10d38:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   10d3a:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10d3e:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10d42:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
   10d44:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10d46:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
   10d4a:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   10d4c:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
   10d4e:	cbnz	r0, 10d58 <usb_isr+0x280>
   10d50:	cmp.w	lr, #64	; 0x40
   10d54:	it	ne
   10d56:	movne	r2, #0
   10d58:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
   10d5a:	ldr	r3, [pc, #104]	; (10dc4 <usb_isr+0x2ec>)
   10d5c:	ldrh	r2, [r3, #0]
   10d5e:	cmp.w	r2, #1280	; 0x500
   10d62:	bne.n	10d6e <usb_isr+0x296>
			setup.bRequest = 0;
   10d64:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
   10d66:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
   10d68:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
   10d6a:	ldr	r3, [pc, #120]	; (10de4 <usb_isr+0x30c>)
   10d6c:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   10d6e:	ldr	r2, [pc, #120]	; (10de8 <usb_isr+0x310>)
   10d70:	movs	r3, #1
   10d72:	strb	r3, [r2, #0]
   10d74:	b.n	10b6c <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
   10d76:	ldr	r2, [pc, #76]	; (10dc4 <usb_isr+0x2ec>)
   10d78:	ldrh	r5, [r2, #0]
   10d7a:	movw	r4, #8225	; 0x2021
   10d7e:	cmp	r5, r4
   10d80:	beq.w	10f78 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
   10d84:	ldr	r2, [pc, #40]	; (10db0 <usb_isr+0x2d8>)
   10d86:	str.w	r2, [r9, r0, lsl #3]
   10d8a:	b.n	10d6e <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
   10d8c:	ldr	r2, [pc, #32]	; (10db0 <usb_isr+0x2d8>)
   10d8e:	ldr	r3, [pc, #36]	; (10db4 <usb_isr+0x2dc>)
   10d90:	tst.w	r9, #8
   10d94:	it	ne
   10d96:	movne	r3, r2
   10d98:	str.w	r3, [r7, r8, lsl #3]
   10d9c:	b.n	10b6c <usb_isr+0x94>
   10d9e:	nop
   10da0:	.word	0x1fff0000
   10da4:	.word	0x1fff251c
   10da8:	.word	0x1fff24c0
   10dac:	.word	0x1fff2638
   10db0:	.word	0x004000c8
   10db4:	.word	0x00400088
   10db8:	.word	0x1fff25bc
   10dbc:	.word	0x1fff2535
   10dc0:	.word	0x1fff24a4
   10dc4:	.word	0x1fff25a8
   10dc8:	.word	0x1fff24bc
   10dcc:	.word	0x1fff2534
   10dd0:	.word	0x1fff25c0
   10dd4:	.word	0x1fff2578
   10dd8:	.word	0x1fff2590
   10ddc:	.word	0x1fff24d8
   10de0:	.word	0x1fff25b0
   10de4:	.word	0x40072098
   10de8:	.word	0x40072094
   10dec:	.word	0x40072080
   10df0:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
   10df4:	bl	10898 <usb_free>
				packet = tx_first[endpoint];
   10df8:	ldr	r2, [pc, #692]	; (110b0 <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
   10dfa:	ldr	r1, [pc, #696]	; (110b4 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
   10dfc:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
   10e00:	cmp	r3, #0
   10e02:	beq.w	10f58 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
   10e06:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
   10e08:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
   10e0a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
   10e0e:	add.w	r2, r3, #8
   10e12:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
   10e16:	cmp	r4, #3
   10e18:	bhi.n	10e26 <usb_isr+0x34e>
   10e1a:	tbb	[pc, r4]
   10e1e:	.short	0x0f12
   10e20:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
   10e22:	movs	r2, #4
   10e24:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
   10e26:	ldrh	r2, [r3, #0]
   10e28:	tst.w	r9, #8
   10e2c:	ite	eq
   10e2e:	moveq	r3, #136	; 0x88
   10e30:	movne	r3, #200	; 0xc8
   10e32:	orr.w	r3, r3, r2, lsl #16
   10e36:	str.w	r3, [r7, r8, lsl #3]
   10e3a:	b.n	10b6c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
   10e3c:	movs	r2, #2
   10e3e:	strb	r2, [r1, r6]
						break;
   10e40:	b.n	10e26 <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
   10e42:	movs	r2, #3
   10e44:	strb	r2, [r1, r6]
						break;
   10e46:	b.n	10e26 <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
   10e48:	movs	r2, #5
   10e4a:	strb	r2, [r1, r6]
						break;
   10e4c:	b.n	10e26 <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
   10e4e:	lsls	r0, r4, #31
   10e50:	bmi.w	10fec <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
   10e54:	lsls	r1, r4, #24
   10e56:	bmi.w	11088 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
   10e5a:	lsls	r2, r4, #30
   10e5c:	bpl.n	10e6c <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
   10e5e:	ldr	r2, [pc, #600]	; (110b8 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
   10e60:	ldr	r1, [pc, #600]	; (110bc <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
   10e62:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
   10e64:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
   10e66:	uxtb	r3, r3
		USB0_ERRSTAT = err;
   10e68:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
   10e6a:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
   10e6c:	lsls	r3, r4, #27
   10e6e:	bpl.n	10e76 <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
   10e70:	ldr	r3, [pc, #584]	; (110bc <usb_isr+0x5e4>)
   10e72:	movs	r2, #16
   10e74:	strb	r2, [r3, #0]
	}

}
   10e76:	add	sp, #28
   10e78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
   10e7c:	bl	10008 <usb_serial_flush_callback>
   10e80:	b.n	10bae <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
   10e82:	ldr	r2, [pc, #572]	; (110c0 <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
   10e84:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
   10e88:	ldrb	r3, [r2, #0]
   10e8a:	adds	r3, #1
   10e8c:	strb	r3, [r2, #0]
   10e8e:	b.n	10b6c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
   10e90:	str.w	r0, [r3, r6, lsl #2]
   10e94:	ldr	r5, [pc, #556]	; (110c4 <usb_isr+0x5ec>)
   10e96:	b.n	10b3a <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   10e98:	movw	r4, #770	; 0x302
   10e9c:	cmp	r1, r4
   10e9e:	beq.w	112e4 <usb_isr+0x80c>
   10ea2:	bhi.w	11046 <usb_isr+0x56e>
   10ea6:	cmp	r1, #130	; 0x82
   10ea8:	beq.w	111da <usb_isr+0x702>
   10eac:	cmp.w	r1, #258	; 0x102
   10eb0:	beq.w	11108 <usb_isr+0x630>
   10eb4:	cmp	r1, #128	; 0x80
   10eb6:	bne.w	10fde <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   10eba:	ldr	r4, [pc, #524]	; (110c8 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
   10ebc:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   10ebe:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
   10ec0:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   10ec2:	ldrh	r2, [r5, #6]
   10ec4:	cmp	r2, r0
   10ec6:	bcs.w	11466 <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10eca:	ldr	r1, [pc, #512]	; (110cc <usb_isr+0x5f4>)
   10ecc:	ldrb	r5, [r1, #0]
   10ece:	cmp	r2, #64	; 0x40
   10ed0:	mov	lr, r2
   10ed2:	orr.w	ip, r5, #2
   10ed6:	it	cs
   10ed8:	movcs.w	lr, #64	; 0x40
   10edc:	add.w	r3, r4, lr
   10ee0:	add.w	r0, r9, ip, lsl #3
   10ee4:	str	r3, [sp, #4]
   10ee6:	movs	r3, #1
   10ee8:	str	r4, [r0, #4]
   10eea:	mov.w	r8, lr, lsl #16
   10eee:	rsb	r0, lr, r2
   10ef2:	str	r3, [sp, #8]
   10ef4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10ef6:	movs	r4, #200	; 0xc8
   10ef8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   10efc:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10f00:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
   10f04:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
   10f06:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10f08:	ldr.w	ip, [pc, #472]	; 110e4 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
   10f0c:	ldr	r3, [pc, #448]	; (110d0 <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
   10f0e:	ldr.w	r8, [pc, #444]	; 110cc <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
   10f12:	cmp	r0, #0
   10f14:	bne.w	11170 <usb_isr+0x698>
   10f18:	cmp.w	lr, #64	; 0x40
   10f1c:	bne.n	10fe4 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10f1e:	orr.w	ip, r4, #2
   10f22:	add.w	r3, r9, ip, lsl #3
   10f26:	ldr	r4, [sp, #4]
   10f28:	ldr.w	lr, [pc, #440]	; 110e4 <usb_isr+0x60c>
   10f2c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10f2e:	cmp	r2, #0
   10f30:	bne.w	1119c <usb_isr+0x6c4>
   10f34:	lsls	r2, r0, #16
   10f36:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
   10f3a:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10f3e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   10f42:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   10f44:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
   10f46:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   10f48:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
   10f4a:	cmp	r0, #64	; 0x40
   10f4c:	bne.n	10fe4 <usb_isr+0x50c>
   10f4e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
   10f50:	ldr	r2, [pc, #384]	; (110d4 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
   10f52:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
   10f54:	strh	r0, [r2, #0]
   10f56:	b.n	10fe4 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
   10f58:	ldrb	r3, [r1, r6]
   10f5a:	cmp	r3, #3
   10f5c:	bhi.w	111cc <usb_isr+0x6f4>
   10f60:	add	r2, pc, #4	; (adr r2, 10f68 <usb_isr+0x490>)
   10f62:	ldr.w	pc, [r2, r3, lsl #2]
   10f66:	nop
   10f68:	.word	0x00010b6d
   10f6c:	.word	0x00010b6d
   10f70:	.word	0x00011041
   10f74:	.word	0x0001103b
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
   10f78:	ldrh	r2, [r2, #4]
   10f7a:	cbnz	r2, 10fa0 <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
   10f7c:	ldr	r2, [pc, #344]	; (110d8 <usb_isr+0x600>)
   10f7e:	ldrb	r5, [r1, #0]
   10f80:	ldrb	r4, [r1, #1]
   10f82:	strb	r5, [r2, #0]
   10f84:	strb	r4, [r2, #1]
   10f86:	ldrb	r5, [r1, #2]
   10f88:	ldrb	r4, [r1, #3]
   10f8a:	strb	r5, [r2, #2]
   10f8c:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   10f8e:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
   10f90:	ldrb	r5, [r1, #4]
   10f92:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   10f94:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
   10f96:	ldrb	r5, [r1, #5]
   10f98:	ldrb	r1, [r1, #6]
   10f9a:	strb	r5, [r2, #5]
   10f9c:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   10f9e:	beq.n	1109c <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10fa0:	ldr	r1, [pc, #296]	; (110cc <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10fa2:	ldr	r6, [pc, #300]	; (110d0 <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10fa4:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10fa6:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   10fa8:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10fac:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10fae:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   10fb2:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10fb4:	ite	eq
   10fb6:	moveq	r1, #136	; 0x88
   10fb8:	movne	r1, #200	; 0xc8
   10fba:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10fbe:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   10fc2:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10fc6:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   10fc8:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10fca:	str	r1, [r2, #4]
   10fcc:	b.n	10d84 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   10fce:	movw	r2, #26273	; 0x66a1
   10fd2:	cmp	r1, r2
   10fd4:	beq.n	10fde <usb_isr+0x506>
   10fd6:	movw	r2, #26529	; 0x67a1
   10fda:	cmp	r1, r2
   10fdc:	beq.n	110a4 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   10fde:	ldr	r2, [pc, #252]	; (110dc <usb_isr+0x604>)
   10fe0:	movs	r3, #15
   10fe2:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   10fe4:	ldr	r2, [pc, #248]	; (110e0 <usb_isr+0x608>)
   10fe6:	movs	r3, #1
   10fe8:	strb	r3, [r2, #0]
   10fea:	b.n	10d6e <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
   10fec:	ldr	r3, [pc, #244]	; (110e4 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
   10fee:	ldr	r0, [pc, #240]	; (110e0 <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
   10ff0:	ldr	r1, [pc, #216]	; (110cc <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
   10ff2:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
   10ff4:	mov.w	lr, #2
   10ff8:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   10ffc:	ldr	r7, [pc, #220]	; (110dc <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
   10ffe:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
   11000:	ldr	r1, [pc, #228]	; (110e8 <usb_isr+0x610>)
   11002:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
   11004:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
   11006:	ldr	r6, [pc, #176]	; (110b8 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
   11008:	ldr	r5, [pc, #176]	; (110bc <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
   1100a:	ldr	r4, [pc, #224]	; (110ec <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
   1100c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   1100e:	movs	r1, #13
   11010:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
   11012:	movs	r1, #255	; 0xff
   11014:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
   11016:	ldr.w	lr, [pc, #236]	; 11104 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
   1101a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
   1101c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
   1101e:	ldr	r5, [pc, #208]	; (110f0 <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
   11020:	ldr	r2, [pc, #208]	; (110f4 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
   11022:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
   11026:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
   11028:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
   1102a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
   1102e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
   11030:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
   11032:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
   11034:	add	sp, #28
   11036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
   1103a:	movs	r3, #1
   1103c:	strb	r3, [r1, r6]
						break;
   1103e:	b.n	10b6c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
   11040:	movs	r3, #0
   11042:	strb	r3, [r1, r6]
						break;
   11044:	b.n	10b6c <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   11046:	cmp.w	r1, #1280	; 0x500
   1104a:	beq.w	112dc <usb_isr+0x804>
   1104e:	bcc.n	10fde <usb_isr+0x506>
   11050:	sub.w	r1, r1, #1664	; 0x680
   11054:	cmp	r1, #1
   11056:	bhi.n	10fde <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
   11058:	ldr	r2, [pc, #156]	; (110f8 <usb_isr+0x620>)
   1105a:	ldr	r4, [r2, #4]
   1105c:	cmp	r4, #0
   1105e:	beq.n	10fde <usb_isr+0x506>
   11060:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   11062:	ldrh.w	lr, [r5, #4]
   11066:	b.n	11070 <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
   11068:	adds	r2, #12
			if (list->addr == NULL) break;
   1106a:	ldr	r4, [r2, #4]
   1106c:	cmp	r4, #0
   1106e:	beq.n	10fde <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   11070:	ldrh	r3, [r2, #0]
   11072:	cmp	r3, r0
   11074:	bne.n	11068 <usb_isr+0x590>
   11076:	ldrh	r3, [r2, #2]
   11078:	cmp	r3, lr
   1107a:	bne.n	11068 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
   1107c:	lsrs	r0, r0, #8
   1107e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
   11080:	ite	eq
   11082:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
   11084:	ldrhne	r0, [r2, #8]
   11086:	b.n	10ec2 <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   11088:	ldr	r1, [pc, #80]	; (110dc <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
   1108a:	ldr	r3, [pc, #48]	; (110bc <usb_isr+0x5e4>)
   1108c:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   1108e:	movs	r0, #13
   11090:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
   11092:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
   11094:	lsls	r2, r4, #30
   11096:	bpl.w	10e6c <usb_isr+0x394>
   1109a:	b.n	10e5e <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   1109c:	ldr	r2, [pc, #92]	; (110fc <usb_isr+0x624>)
   1109e:	movs	r1, #15
   110a0:	strb	r1, [r2, #0]
   110a2:	b.n	10fa0 <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
   110a4:	ldr	r4, [pc, #32]	; (110c8 <usb_isr+0x5f0>)
   110a6:	ldr	r3, [pc, #88]	; (11100 <usb_isr+0x628>)
   110a8:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
   110aa:	movs	r0, #4
   110ac:	b.n	10ec2 <usb_isr+0x3ea>
   110ae:	nop
   110b0:	.word	0x1fff2578
   110b4:	.word	0x1fff25c0
   110b8:	.word	0x40072088
   110bc:	.word	0x40072080
   110c0:	.word	0x1fff25b1
   110c4:	.word	0x1fff24c0
   110c8:	.word	0x1fff25b4
   110cc:	.word	0x1fff25b0
   110d0:	.word	0x1fff2534
   110d4:	.word	0x1fff24d8
   110d8:	.word	0x1fff262c
   110dc:	.word	0x400720c0
   110e0:	.word	0x40072094
   110e4:	.word	0x1fff0000
   110e8:	.word	0x00400088
   110ec:	.word	0x40072098
   110f0:	.word	0x1fff24dc
   110f4:	.word	0x1fff2538
   110f8:	.word	0x00017468
   110fc:	.word	0x1fff2535
   11100:	.word	0x20010004
   11104:	.word	0x4007208c
   11108:	ldrh	r1, [r5, #4]
   1110a:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   1110e:	cmp	r1, #6
   11110:	bhi.w	10fde <usb_isr+0x506>
   11114:	ldrh	r2, [r5, #2]
   11116:	cmp	r2, #0
   11118:	bne.w	10fde <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
   1111c:	ldr	r4, [pc, #724]	; (113f4 <usb_isr+0x91c>)
   1111e:	str	r0, [sp, #8]
   11120:	lsls	r1, r1, #2
   11122:	add	r4, r1
   11124:	ldrb	r1, [r4, #0]
   11126:	bic.w	r1, r1, #2
   1112a:	strb	r1, [r4, #0]
   1112c:	b.n	11148 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
   1112e:	ldrh	r1, [r5, #4]
   11130:	cmp	r1, #0
   11132:	bne.w	1130a <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   11136:	ldr	r3, [pc, #704]	; (113f8 <usb_isr+0x920>)
   11138:	ldr	r2, [pc, #704]	; (113fc <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
   1113a:	ldr	r4, [pc, #708]	; (11400 <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   1113c:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   1113e:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   11140:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   11142:	str	r0, [sp, #8]
   11144:	mov	r2, r1
   11146:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   11148:	movs	r0, #0
   1114a:	str	r0, [sp, #4]
   1114c:	mov	r8, r0
   1114e:	mov	lr, r0
   11150:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   11152:	ldr	r1, [pc, #688]	; (11404 <usb_isr+0x92c>)
   11154:	ldrb	r5, [r1, #0]
   11156:	orr.w	ip, r5, #2
   1115a:	add.w	r3, r9, ip, lsl #3
   1115e:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   11160:	ldr	r3, [sp, #8]
   11162:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   11164:	ldr	r3, [sp, #12]
   11166:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   11168:	ite	eq
   1116a:	moveq	r4, #136	; 0x88
   1116c:	movne	r4, #200	; 0xc8
   1116e:	b.n	10ef8 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
   11170:	cmp	r0, #64	; 0x40
   11172:	bls.w	10f1e <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   11176:	orr.w	r4, r4, #2
   1117a:	add.w	r1, ip, r4, lsl #3
   1117e:	ldr	r6, [sp, #4]
   11180:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   11182:	cbz	r2, 111b4 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
   11184:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   11188:	ldr	r2, [pc, #636]	; (11408 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
   1118a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   1118c:	mov	r3, r6
   1118e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   11190:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   11194:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   11196:	str.w	r2, [ip, r4, lsl #3]
   1119a:	b.n	10f50 <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
   1119c:	ldrb.w	r3, [sp, #8]
   111a0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   111a2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   111a4:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   111a6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   111a8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   111ac:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   111ae:	str.w	r2, [lr, ip, lsl #3]
   111b2:	b.n	10f4a <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
   111b4:	ldrb.w	r1, [sp, #8]
   111b8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   111ba:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   111bc:	ldr	r2, [pc, #588]	; (1140c <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   111be:	strb.w	r5, [r8]
   111c2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   111c4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   111c6:	str.w	r2, [ip, r4, lsl #3]
   111ca:	b.n	10f50 <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
   111cc:	tst.w	r9, #8
   111d0:	ite	eq
   111d2:	moveq	r3, #2
   111d4:	movne	r3, #3
   111d6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
   111d8:	b.n	10b6c <usb_isr+0x94>
   111da:	ldrh	r1, [r5, #4]
   111dc:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
   111e0:	cmp	r1, #6
   111e2:	bhi.w	10fde <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
   111e6:	ldr	r3, [pc, #524]	; (113f4 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
   111e8:	ldr	r4, [pc, #548]	; (11410 <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
   111ea:	lsls	r1, r1, #2
   111ec:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
   111ee:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
   111f0:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
   111f2:	ldrb	r2, [r3, #0]
   111f4:	lsls	r3, r2, #30
   111f6:	bpl.w	1130e <usb_isr+0x836>
   111fa:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
   111fc:	movs	r0, #2
   111fe:	b.n	10ec2 <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
   11200:	ldr	r3, [sp, #4]
   11202:	mov.w	r2, #1
   11206:	strb	r2, [r3, #0]
   11208:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
   1120a:	adds	r4, #1
   1120c:	adds	r3, #1
   1120e:	cmp	r4, #6
   11210:	add.w	r6, r6, #4
   11214:	add.w	r5, r5, #4
   11218:	str	r3, [sp, #4]
   1121a:	bne.w	10caa <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1121e:	ldr	r5, [pc, #500]	; (11414 <usb_isr+0x93c>)
			*reg = epconf;
   11220:	ldr	r1, [pc, #500]	; (11418 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   11222:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
   11224:	ldr	r4, [pc, #500]	; (1141c <usb_isr+0x944>)
   11226:	ldr	r7, [sp, #16]
   11228:	ldr	r6, [sp, #20]
   1122a:	movs	r0, #0
   1122c:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   1122e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   11230:	lsls	r1, r2, #28
   11232:	bmi.w	11340 <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   11236:	ldrb	r2, [r5, #1]
			*reg = epconf;
   11238:	ldr	r1, [pc, #484]	; (11420 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1123a:	ldr.w	r8, [pc, #504]	; 11434 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   1123e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   11240:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   11242:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   11244:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
   11248:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   1124c:	bmi.n	11312 <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1124e:	ldrb	r2, [r5, #2]
			*reg = epconf;
   11250:	ldr	r1, [pc, #464]	; (11424 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   11252:	ldr.w	r8, [pc, #480]	; 11434 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   11256:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   11258:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1125a:	mov.w	r1, #0
   1125e:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
   11262:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   11266:	bmi.w	1143c <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1126a:	ldrb	r2, [r5, #3]
			*reg = epconf;
   1126c:	ldr	r1, [pc, #440]	; (11428 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1126e:	ldr.w	r8, [pc, #452]	; 11434 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   11272:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   11274:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   11276:	mov.w	r1, #0
   1127a:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
   1127e:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   11282:	bmi.w	113ca <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   11286:	ldr	r1, [pc, #420]	; (1142c <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   11288:	ldrb	r2, [r5, #4]
			*reg = epconf;
   1128a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1128c:	movs	r1, #0
   1128e:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
   11292:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   11296:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   11298:	ldr.w	r8, [pc, #408]	; 11434 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   1129c:	bmi.n	1139c <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1129e:	ldrb	r2, [r5, #5]
			*reg = epconf;
   112a0:	ldr	r1, [pc, #396]	; (11430 <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   112a2:	ldr	r5, [pc, #400]	; (11434 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   112a4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   112a6:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   112a8:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   112aa:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
   112ae:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   112b2:	bmi.n	1136e <usb_isr+0x896>
   112b4:	ldrb	r3, [r6, #0]
   112b6:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   112b8:	movs	r1, #0
   112ba:	eor.w	r2, r3, #1
   112be:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
   112c2:	str.w	r1, [r9, #216]	; 0xd8
   112c6:	b.n	11148 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
   112c8:	ldr	r3, [sp, #4]
   112ca:	mov.w	r2, #0
   112ce:	strb	r2, [r3, #0]
   112d0:	b.n	11208 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   112d2:	ldr	r2, [pc, #356]	; (11438 <usb_isr+0x960>)
   112d4:	ldr	r4, [pc, #312]	; (11410 <usb_isr+0x938>)
   112d6:	ldrb	r2, [r2, #0]
   112d8:	strb	r2, [r4, #0]
   112da:	b.n	10ec2 <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   112dc:	movs	r3, #1
   112de:	movs	r2, #0
   112e0:	str	r3, [sp, #8]
   112e2:	b.n	11148 <usb_isr+0x670>
   112e4:	ldrh	r1, [r5, #4]
   112e6:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   112ea:	cmp	r1, #6
   112ec:	bhi.w	10fde <usb_isr+0x506>
   112f0:	ldrh	r2, [r5, #2]
   112f2:	cmp	r2, #0
   112f4:	bne.w	10fde <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
   112f8:	ldr	r4, [pc, #248]	; (113f4 <usb_isr+0x91c>)
   112fa:	str	r0, [sp, #8]
   112fc:	lsls	r1, r1, #2
   112fe:	add	r4, r1
   11300:	ldrb	r1, [r4, #0]
   11302:	orr.w	r1, r1, #2
   11306:	strb	r1, [r4, #0]
   11308:	b.n	11148 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
   1130a:	str	r0, [sp, #8]
   1130c:	b.n	11148 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
   1130e:	movs	r0, #2
   11310:	b.n	10ec2 <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   11312:	bl	10858 <usb_malloc>
				if (p) {
   11316:	cmp	r0, #0
   11318:	beq.w	114f2 <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
   1131c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1131e:	ldr	r2, [pc, #236]	; (1140c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   11320:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   11324:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   11328:	bl	10858 <usb_malloc>
				if (p) {
   1132c:	cmp	r0, #0
   1132e:	beq.w	114e6 <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
   11332:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   11334:	ldr	r2, [pc, #208]	; (11408 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   11336:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   1133a:	str.w	r2, [r9, #72]	; 0x48
   1133e:	b.n	1124e <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   11340:	bl	10858 <usb_malloc>
				if (p) {
   11344:	cmp	r0, #0
   11346:	beq.w	114c2 <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
   1134a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1134c:	ldr	r2, [pc, #188]	; (1140c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   1134e:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   11352:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   11356:	bl	10858 <usb_malloc>
				if (p) {
   1135a:	cmp	r0, #0
   1135c:	beq.w	114b6 <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
   11360:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   11362:	ldr	r2, [pc, #164]	; (11408 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   11364:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   11368:	str.w	r2, [r9, #40]	; 0x28
   1136c:	b.n	11236 <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   1136e:	bl	10858 <usb_malloc>
				if (p) {
   11372:	cmp	r0, #0
   11374:	beq.w	114aa <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
   11378:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1137a:	ldr	r2, [pc, #144]	; (1140c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   1137c:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   11380:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   11384:	bl	10858 <usb_malloc>
				if (p) {
   11388:	cmp	r0, #0
   1138a:	beq.w	1149e <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
   1138e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   11390:	ldr	r2, [pc, #116]	; (11408 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   11392:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   11396:	str.w	r2, [r9, #200]	; 0xc8
   1139a:	b.n	112b4 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   1139c:	bl	10858 <usb_malloc>
				if (p) {
   113a0:	cmp	r0, #0
   113a2:	beq.w	114da <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
   113a6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   113a8:	ldr	r2, [pc, #96]	; (1140c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   113aa:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   113ae:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   113b2:	bl	10858 <usb_malloc>
				if (p) {
   113b6:	cmp	r0, #0
   113b8:	beq.w	114ce <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
   113bc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   113be:	ldr	r2, [pc, #72]	; (11408 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   113c0:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   113c4:	str.w	r2, [r9, #168]	; 0xa8
   113c8:	b.n	1129e <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   113ca:	bl	10858 <usb_malloc>
				if (p) {
   113ce:	cmp	r0, #0
   113d0:	beq.n	11492 <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
   113d2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   113d4:	ldr	r2, [pc, #52]	; (1140c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   113d6:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   113da:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   113de:	bl	10858 <usb_malloc>
				if (p) {
   113e2:	cmp	r0, #0
   113e4:	beq.n	11486 <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
   113e6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   113e8:	ldr	r2, [pc, #28]	; (11408 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   113ea:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   113ee:	str.w	r2, [r9, #136]	; 0x88
   113f2:	b.n	11286 <usb_isr+0x7ae>
   113f4:	.word	0x400720c0
   113f8:	.word	0x1fff24b8
   113fc:	.word	0x1fff2634
   11400:	.word	0x1fff24b4
   11404:	.word	0x1fff25b0
   11408:	.word	0x004000c8
   1140c:	.word	0x00400088
   11410:	.word	0x1fff25b4
   11414:	.word	0x00017460
   11418:	.word	0x400720c4
   1141c:	.word	0x1fff25b1
   11420:	.word	0x400720c8
   11424:	.word	0x400720cc
   11428:	.word	0x400720d0
   1142c:	.word	0x400720d4
   11430:	.word	0x400720d8
   11434:	.word	0x1fff0000
   11438:	.word	0x1fff25bc
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   1143c:	bl	10858 <usb_malloc>
				if (p) {
   11440:	cmp	r0, #0
   11442:	beq.n	1150a <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
   11444:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   11446:	ldr	r2, [pc, #208]	; (11518 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   11448:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1144c:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   11450:	bl	10858 <usb_malloc>
				if (p) {
   11454:	cmp	r0, #0
   11456:	beq.n	114fe <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
   11458:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   1145a:	ldr	r2, [pc, #192]	; (1151c <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   1145c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   11460:	str.w	r2, [r9, #104]	; 0x68
   11464:	b.n	1126a <usb_isr+0x792>
   11466:	cmp	r0, #64	; 0x40
   11468:	mov	lr, r0
   1146a:	it	cs
   1146c:	movcs.w	lr, #64	; 0x40
   11470:	add.w	r3, r4, lr
   11474:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   11476:	movs	r3, #1
   11478:	rsb	r0, lr, r0
   1147c:	mov.w	r8, lr, lsl #16
   11480:	movs	r2, #0
   11482:	str	r3, [sp, #8]
   11484:	b.n	11152 <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   11486:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   11488:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
   1148c:	adds	r2, #1
   1148e:	strb	r2, [r4, #0]
   11490:	b.n	11286 <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   11492:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   11494:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
   11498:	adds	r2, #1
   1149a:	strb	r2, [r4, #0]
   1149c:	b.n	113de <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   1149e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   114a0:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
   114a4:	adds	r2, #1
   114a6:	strb	r2, [r4, #0]
   114a8:	b.n	112b4 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   114aa:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   114ac:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
   114b0:	adds	r2, #1
   114b2:	strb	r2, [r4, #0]
   114b4:	b.n	11384 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   114b6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   114b8:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
   114bc:	adds	r2, #1
   114be:	strb	r2, [r4, #0]
   114c0:	b.n	11236 <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   114c2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   114c4:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
   114c8:	adds	r2, #1
   114ca:	strb	r2, [r4, #0]
   114cc:	b.n	11356 <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   114ce:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   114d0:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
   114d4:	adds	r2, #1
   114d6:	strb	r2, [r4, #0]
   114d8:	b.n	1129e <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   114da:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   114dc:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
   114e0:	adds	r2, #1
   114e2:	strb	r2, [r4, #0]
   114e4:	b.n	113b2 <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   114e6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   114e8:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
   114ec:	adds	r2, #1
   114ee:	strb	r2, [r4, #0]
   114f0:	b.n	1124e <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   114f2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   114f4:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
   114f8:	adds	r2, #1
   114fa:	strb	r2, [r4, #0]
   114fc:	b.n	11328 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   114fe:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   11500:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
   11504:	adds	r2, #1
   11506:	strb	r2, [r4, #0]
   11508:	b.n	1126a <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   1150a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   1150c:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
   11510:	adds	r2, #1
   11512:	strb	r2, [r4, #0]
   11514:	b.n	11450 <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
   11516:	bkpt	0x0000
   11518:	.word	0x00400088
   1151c:	.word	0x004000c8

00011520 <usb_init>:
}



void usb_init(void)
{
   11520:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11524:	ldr	r4, [pc, #144]	; (115b8 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
   11526:	bl	100e0 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
   1152a:	movs	r2, #0
   1152c:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
   11530:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
   11532:	str	r2, [r3, #0]
		table[i].addr = 0;
   11534:	str	r2, [r3, #4]
   11536:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
   11538:	cmp	r3, r0
		table[i].desc = 0;
   1153a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
   1153e:	bne.n	11532 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   11540:	ldr	r0, [pc, #120]	; (115bc <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
   11542:	ldr	r2, [pc, #124]	; (115c0 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   11544:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   11546:	ldr.w	lr, [pc, #144]	; 115d8 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   1154a:	ldr	r7, [pc, #120]	; (115c4 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   1154c:	ldr	r5, [pc, #120]	; (115c8 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
   1154e:	ldr	r6, [pc, #124]	; (115cc <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
   11550:	ldr.w	r8, [pc, #136]	; 115dc <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
   11554:	ldr.w	ip, [pc, #136]	; 115e0 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
   11558:	ldr.w	r9, [pc, #136]	; 115e4 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   1155c:	orr.w	r3, r3, #262144	; 0x40000
   11560:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
   11562:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   11564:	ldr	r0, [pc, #104]	; (115d0 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
   11566:	orr.w	r3, r3, #50331648	; 0x3000000
   1156a:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   1156c:	ubfx	r3, r4, #8, #8
   11570:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   11574:	ubfx	r3, r4, #16, #8
   11578:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   1157a:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
   1157c:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   1157e:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   11582:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   11584:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
   11588:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   1158c:	ldr	r5, [pc, #68]	; (115d4 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
   1158e:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
   11592:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
   11594:	movs	r3, #1
   11596:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   1159a:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
   1159c:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   115a0:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   115a4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
   115a6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   115aa:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   115ac:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   115ae:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
   115b0:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   115b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   115b8:	.word	0x1fff0000
   115bc:	.word	0x40048034
   115c0:	.word	0x4000d800
   115c4:	.word	0x400720b0
   115c8:	.word	0x400720b4
   115cc:	.word	0x40072010
   115d0:	.word	0xe000e104
   115d4:	.word	0xe000e435
   115d8:	.word	0x4007209c
   115dc:	.word	0x40072080
   115e0:	.word	0x40072088
   115e4:	.word	0x40072094

000115e8 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
   115e8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
   115ec:	ldr	r6, [pc, #196]	; (116b4 <yield+0xcc>)
   115ee:	ldrb	r3, [r6, #0]
   115f0:	cbz	r3, 11618 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
   115f2:	ldr	r7, [pc, #196]	; (116b8 <yield+0xd0>)
   115f4:	ldrb	r2, [r7, #0]
   115f6:	cbnz	r2, 11618 <yield+0x30>
	running = 1;
   115f8:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   115fa:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
   115fc:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   115fe:	bmi.n	1166e <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   11600:	lsls	r2, r3, #30
   11602:	bmi.n	11638 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
   11604:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   11606:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
   11608:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   1160a:	bpl.n	11618 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
   1160c:	ldr	r3, [pc, #172]	; (116bc <yield+0xd4>)
   1160e:	ldr	r2, [r3, #0]
   11610:	cbz	r2, 11618 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   11612:	mrs	r2, IPSR
		if (ipsr != 0) return;
   11616:	cbz	r2, 1161c <yield+0x34>
   11618:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1161c:	mrs	r1, PRIMASK
		__disable_irq();
   11620:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
   11622:	ldr	r0, [r3, #0]
		if (first == nullptr) {
   11624:	cbz	r0, 1162e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
   11626:	ldr	r4, [pc, #152]	; (116c0 <yield+0xd8>)
   11628:	ldrb	r2, [r4, #0]
   1162a:	cmp	r2, #0
   1162c:	beq.n	1168c <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1162e:	cmp	r1, #0
   11630:	bne.n	11618 <yield+0x30>
   11632:	cpsie	i
   11634:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   11638:	ldr.w	r8, [pc, #144]	; 116cc <yield+0xe4>
   1163c:	ldrb.w	r2, [r8]
   11640:	cmp	r2, #0
   11642:	beq.n	11604 <yield+0x1c>
   11644:	ldr.w	r9, [pc, #136]	; 116d0 <yield+0xe8>
   11648:	movs	r4, #0
   1164a:	b.n	11658 <yield+0x70>
   1164c:	adds	r4, #1
   1164e:	ldrb.w	r3, [r8]
   11652:	uxtb	r4, r4
   11654:	cmp	r3, r4
   11656:	bls.n	1167e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
   11658:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
   1165c:	ldr	r3, [r5, #0]
   1165e:	mov	r0, r5
   11660:	ldr	r3, [r3, #16]
   11662:	blx	r3
   11664:	cmp	r0, #0
   11666:	beq.n	1164c <yield+0x64>
   11668:	ldr	r3, [r5, #16]
   1166a:	blx	r3
   1166c:	b.n	1164c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
   1166e:	bl	fdf4 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   11672:	cbnz	r0, 116a8 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
   11674:	ldr	r3, [pc, #76]	; (116c4 <yield+0xdc>)
   11676:	ldrb	r3, [r3, #0]
   11678:	cbnz	r3, 11682 <yield+0x9a>
   1167a:	ldrb	r3, [r6, #0]
   1167c:	b.n	11600 <yield+0x18>
   1167e:	ldrb	r3, [r6, #0]
   11680:	b.n	11604 <yield+0x1c>
   11682:	ldrb	r3, [r6, #0]
   11684:	and.w	r3, r3, #254	; 0xfe
   11688:	strb	r3, [r6, #0]
   1168a:	b.n	11600 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
   1168c:	ldr	r5, [r0, #20]
   1168e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   11690:	movs	r3, #1
   11692:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
   11694:	cbz	r5, 116ae <yield+0xc6>
			firstYield->_prev = nullptr;
   11696:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   11698:	cbnz	r1, 1169c <yield+0xb4>
   1169a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   1169c:	movs	r5, #0
   1169e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   116a0:	ldr	r3, [r0, #8]
   116a2:	blx	r3
		runningFromYield = false;
   116a4:	strb	r5, [r4, #0]
   116a6:	b.n	11618 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   116a8:	bl	119a8 <serialEvent()>
   116ac:	b.n	11674 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
   116ae:	ldr	r3, [pc, #24]	; (116c8 <yield+0xe0>)
   116b0:	str	r5, [r3, #0]
   116b2:	b.n	11698 <yield+0xb0>
   116b4:	.word	0x1fff0afc
   116b8:	.word	0x1fff25c6
   116bc:	.word	0x1fff25d4
   116c0:	.word	0x1fff25d8
   116c4:	.word	0x1fff0b10
   116c8:	.word	0x1fff25d0
   116cc:	.word	0x1fff25f4
   116d0:	.word	0x1fff25dc

000116d4 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
   116d4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   116d6:	mrs	r2, PRIMASK
		__disable_irq();
   116da:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
   116dc:	ldrb	r3, [r0, #29]
   116de:	cbnz	r3, 116ee <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
   116e0:	ldrb	r1, [r0, #28]
   116e2:	cmp	r1, #1
   116e4:	beq.n	116f8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
   116e6:	cmp	r1, #3
   116e8:	beq.n	1170c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
   116ea:	movs	r3, #1
   116ec:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   116ee:	cbnz	r2, 116f2 <EventResponder::triggerEventNotImmediate()+0x1e>
   116f0:	cpsie	i
	}
	enableInterrupts(irq);
}
   116f2:	ldr.w	r4, [sp], #4
   116f6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
   116f8:	ldr	r4, [pc, #68]	; (11740 <EventResponder::triggerEventNotImmediate()+0x6c>)
   116fa:	ldr	r1, [r4, #0]
   116fc:	cbz	r1, 11728 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
   116fe:	ldr	r1, [pc, #68]	; (11744 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
   11700:	str	r3, [r0, #20]
				_prev = lastYield;
   11702:	ldr	r3, [r1, #0]
   11704:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
   11706:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
   11708:	str	r0, [r3, #20]
   1170a:	b.n	116ea <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
   1170c:	ldr	r4, [pc, #56]	; (11748 <EventResponder::triggerEventNotImmediate()+0x74>)
   1170e:	ldr	r1, [r4, #0]
   11710:	cbz	r1, 11734 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
   11712:	ldr	r1, [pc, #56]	; (1174c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
   11714:	str	r3, [r0, #20]
				_prev = lastInterrupt;
   11716:	ldr	r3, [r1, #0]
   11718:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
   1171a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
   1171c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   1171e:	ldr	r3, [pc, #48]	; (11750 <EventResponder::triggerEventNotImmediate()+0x7c>)
   11720:	mov.w	r1, #268435456	; 0x10000000
   11724:	str	r1, [r3, #0]
   11726:	b.n	116ea <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
   11728:	ldr	r3, [pc, #24]	; (11744 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
   1172a:	str	r1, [r0, #20]
				_prev = nullptr;
   1172c:	str	r1, [r0, #24]
				firstYield = this;
   1172e:	str	r0, [r4, #0]
				lastYield = this;
   11730:	str	r0, [r3, #0]
   11732:	b.n	116ea <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
   11734:	ldr	r3, [pc, #20]	; (1174c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
   11736:	str	r1, [r0, #20]
				_prev = nullptr;
   11738:	str	r1, [r0, #24]
				firstInterrupt = this;
   1173a:	str	r0, [r4, #0]
				lastInterrupt = this;
   1173c:	str	r0, [r3, #0]
   1173e:	b.n	1171e <EventResponder::triggerEventNotImmediate()+0x4a>
   11740:	.word	0x1fff25d4
   11744:	.word	0x1fff25d0
   11748:	.word	0x1fff25c8
   1174c:	.word	0x1fff25cc
   11750:	.word	0xe000ed04

00011754 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
   11754:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   11756:	mrs	r2, PRIMASK
		__disable_irq();
   1175a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   1175c:	ldr	r4, [pc, #48]	; (11790 <EventResponder::runFromInterrupt()+0x3c>)
   1175e:	ldr	r0, [r4, #0]
		if (first) {
   11760:	cbz	r0, 11784 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   11762:	ldr	r6, [pc, #48]	; (11794 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
   11764:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
   11766:	ldr	r3, [r0, #20]
   11768:	str	r3, [r4, #0]
			if (firstInterrupt) {
   1176a:	cbz	r3, 1178a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
   1176c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1176e:	cbnz	r2, 11772 <EventResponder::runFromInterrupt()+0x1e>
   11770:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
   11772:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
   11774:	ldr	r3, [r0, #8]
   11776:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   11778:	mrs	r2, PRIMASK
		__disable_irq();
   1177c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   1177e:	ldr	r0, [r4, #0]
		if (first) {
   11780:	cmp	r0, #0
   11782:	bne.n	11766 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   11784:	cbnz	r2, 11788 <EventResponder::runFromInterrupt()+0x34>
   11786:	cpsie	i
   11788:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   1178a:	str	r3, [r6, #0]
   1178c:	b.n	1176e <EventResponder::runFromInterrupt()+0x1a>
   1178e:	nop
   11790:	.word	0x1fff25c8
   11794:	.word	0x1fff25cc

00011798 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
   11798:	b.w	11754 <EventResponder::runFromInterrupt()>

0001179c <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
   1179c:	ldr	r2, [pc, #8]	; (117a8 <systick_isr+0xc>)
   1179e:	ldr	r3, [r2, #0]
   117a0:	adds	r3, #1
   117a2:	str	r3, [r2, #0]
   117a4:	bx	lr
   117a6:	nop
   117a8:	.word	0x1fff24b8

000117ac <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
   117ac:	b.w	fe10 <usb_serial_flush_input>

000117b0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
   117b0:	b.w	fdc4 <usb_serial_peekchar>

000117b4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
   117b4:	b.w	fd7c <usb_serial_getchar>

000117b8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
   117b8:	b.w	fdf4 <usb_serial_available>

000117bc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   117bc:	b.w	ffb0 <usb_serial_flush_output>

000117c0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   117c0:	b.w	ff68 <usb_serial_write_buffer_free>

000117c4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   117c4:	mov	r0, r1
   117c6:	mov	r1, r2
   117c8:	b.w	fe48 <usb_serial_write>

000117cc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   117cc:	mov	r0, r1
   117ce:	b.w	ff50 <usb_serial_putchar>
   117d2:	nop

000117d4 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
   117d4:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
   117d6:	mov	r6, r1
   117d8:	cbz	r1, 117f8 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
   117da:	cbz	r2, 117fc <Print::write(unsigned char const*, unsigned int)+0x28>
   117dc:	mov	r7, r0
   117de:	mov	r4, r2
   117e0:	movs	r5, #0
   117e2:	ldr	r3, [r7, #0]
   117e4:	ldrb.w	r1, [r6], #1
   117e8:	ldr	r3, [r3, #0]
   117ea:	mov	r0, r7
   117ec:	blx	r3
   117ee:	subs	r4, #1
   117f0:	add	r5, r0
   117f2:	bne.n	117e2 <Print::write(unsigned char const*, unsigned int)+0xe>
   117f4:	mov	r0, r5
   117f6:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
   117f8:	mov	r0, r1
   117fa:	pop	{r3, r4, r5, r6, r7, pc}
   117fc:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
   117fe:	pop	{r3, r4, r5, r6, r7, pc}

00011800 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   11800:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
   11802:	ldr	r2, [pc, #24]	; (1181c <Print::println()+0x1c>)
	return write(buf, 2);
   11804:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   11806:	ldrh	r2, [r2, #0]
	return write(buf, 2);
   11808:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   1180a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
   1180c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   1180e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
   11812:	movs	r2, #2
   11814:	blx	r3
}
   11816:	add	sp, #12
   11818:	ldr.w	pc, [sp], #4
   1181c:	.word	0x000176f8

00011820 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
   11820:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
   11822:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
   11824:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
   11826:	ldr	r3, [r3, #4]
   11828:	blx	r3
	return len;
}
   1182a:	mov	r0, r4
   1182c:	pop	{r4, pc}
   1182e:	nop

00011830 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
   11830:	push	{r1, r2, r3}
   11832:	push	{lr}
   11834:	sub	sp, #8
   11836:	add	r2, sp, #12
   11838:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
   1183c:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
   1183e:	bl	14e30 <vdprintf>
#endif
}
   11842:	add	sp, #8
   11844:	ldr.w	lr, [sp], #4
   11848:	add	sp, #12
   1184a:	bx	lr

0001184c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
   1184c:	push	{r4, r5, r6, r7, lr}
   1184e:	mov	r7, r0
   11850:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
   11852:	cmp	r2, #0
   11854:	beq.n	118be <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
   11856:	cmp	r2, #1
   11858:	it	eq
   1185a:	moveq	r2, #10
	}


	if (n == 0) {
   1185c:	cbz	r1, 118b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
   1185e:	movs	r4, #33	; 0x21
   11860:	b.n	11864 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
   11862:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   11864:	udiv	r5, r1, r2
   11868:	mls	r1, r2, r5, r1
   1186c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1186e:	cmp	r1, #9
   11870:	add.w	r1, r0, #48	; 0x30
   11874:	it	ls
   11876:	uxtbls	r0, r1
   11878:	add	r1, sp, #40	; 0x28
   1187a:	it	hi
   1187c:	addhi	r0, #55	; 0x37
   1187e:	add	r1, r4
   11880:	it	hi
   11882:	uxtbhi	r0, r0
   11884:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
   11888:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
   1188a:	mov	r1, r5
   1188c:	cmp	r5, #0
   1188e:	bne.n	11862 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
   11890:	cbz	r3, 118a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
   11892:	subs	r4, #1
   11894:	uxtb	r4, r4
		buf[i] = '-';
   11896:	add	r3, sp, #40	; 0x28
   11898:	add	r3, r4
   1189a:	movs	r2, #45	; 0x2d
   1189c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
   118a0:	ldr	r3, [r7, #0]
   118a2:	add	r2, sp, #4
   118a4:	adds	r1, r2, r4
   118a6:	ldr	r3, [r3, #4]
   118a8:	mov	r0, r7
   118aa:	rsb	r2, r4, #34	; 0x22
   118ae:	blx	r3
}
   118b0:	add	sp, #44	; 0x2c
   118b2:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   118b4:	movs	r2, #48	; 0x30
   118b6:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
   118ba:	movs	r4, #33	; 0x21
   118bc:	b.n	11890 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
   118be:	ldr	r3, [r0, #0]
   118c0:	uxtb	r1, r1
   118c2:	ldr	r3, [r3, #0]
   118c4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   118c6:	add	sp, #44	; 0x2c
   118c8:	pop	{r4, r5, r6, r7, pc}
   118ca:	nop

000118cc <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
   118cc:	cmp	r1, #0
		sign = '-';
		n = -n;
   118ce:	itte	lt
   118d0:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
   118d2:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
   118d4:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
   118d6:	movs	r2, #10
   118d8:	b.w	1184c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000118dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
   118dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   118e0:	sub	sp, #72	; 0x48
   118e2:	ldrb.w	r6, [sp, #104]	; 0x68
   118e6:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
   118ea:	cmp	r6, #1
   118ec:	bls.n	1198e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb2>
   118ee:	mov	r4, r2
   118f0:	mov	r5, r3
	if (n == 0) {
   118f2:	orrs.w	r3, r4, r5
   118f6:	mov	r9, r0
   118f8:	beq.n	11982 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
   118fa:	uxtb	r6, r6
   118fc:	movs	r7, #0
   118fe:	mov.w	r8, #65	; 0x41
   11902:	b.n	11908 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
   11904:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   11908:	mov	r0, r4
   1190a:	mov	r1, r5
   1190c:	mov	r2, r6
   1190e:	mov	r3, r7
   11910:	bl	123c0 <__aeabi_uldivmod>
   11914:	mov	r1, r3
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   11916:	cmp	r1, #0
   11918:	it	eq
   1191a:	cmpeq	r2, #10
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   1191c:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
   1191e:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   11920:	add	r4, sp, #72	; 0x48
   11922:	add.w	lr, r3, #48	; 0x30
   11926:	add	r4, r8
   11928:	itte	cs
   1192a:	addcs	r3, #55	; 0x37
   1192c:	uxtbcs.w	lr, r3
   11930:	uxtbcc.w	lr, lr
			n /= base;
   11934:	mov	r3, r7
   11936:	mov	r1, r5
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   11938:	strb.w	lr, [r4, #-68]
			n /= base;
   1193c:	mov	r2, r6
   1193e:	bl	123c0 <__aeabi_uldivmod>
   11942:	mov	r4, r0
   11944:	mov	r5, r1
			if (n == 0) break;
   11946:	orrs.w	r3, r4, r5
			i--;
   1194a:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
   1194e:	bne.n	11904 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
   11950:	cmp.w	sl, #0
   11954:	beq.n	11968 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
   11956:	add.w	r8, r8, #4294967295
   1195a:	uxtb.w	r8, r8
		buf[i] = '-';
   1195e:	add	r3, sp, #72	; 0x48
   11960:	add	r3, r8
   11962:	movs	r2, #45	; 0x2d
   11964:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
   11968:	ldr.w	r3, [r9]
   1196c:	add	r2, sp, #4
   1196e:	add.w	r1, r2, r8
   11972:	ldr	r3, [r3, #4]
   11974:	mov	r0, r9
   11976:	rsb	r2, r8, #66	; 0x42
   1197a:	blx	r3
}
   1197c:	add	sp, #72	; 0x48
   1197e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   11982:	movs	r3, #48	; 0x30
   11984:	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
   11988:	mov.w	r8, #65	; 0x41
   1198c:	b.n	11950 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x74>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
   1198e:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   11990:	add	sp, #72	; 0x48
   11992:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11996:	nop

00011998 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   11998:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   1199a:	bl	132c <setup>
	while (1) {
		loop();
   1199e:	bl	158c <loop>
		yield();
   119a2:	bl	115e8 <yield>
   119a6:	b.n	1199e <main+0x6>

000119a8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
   119a8:	bx	lr
   119aa:	nop

000119ac <operator new(unsigned int)>:
   119ac:	b.w	127c4 <malloc>

000119b0 <operator delete(void*, unsigned int)>:
   119b0:	b.w	127d4 <free>

000119b4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
   119b4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   119b6:	ldr	r0, [pc, #164]	; (11a5c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   119b8:	ldr	r2, [pc, #164]	; (11a60 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
   119ba:	ldr	r3, [pc, #168]	; (11a64 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   119bc:	ldr	r5, [pc, #168]	; (11a68 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   119be:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   119c0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   119c2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   119c4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
   119c6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   119c8:	ldr	r4, [pc, #160]	; (11a6c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
   119ca:	cmp	r3, #8
   119cc:	beq.n	11a30 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
   119ce:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   119d0:	ldr	r0, [pc, #156]	; (11a70 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   119d2:	ldr	r1, [pc, #160]	; (11a74 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
   119d4:	beq.n	11a46 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
   119d6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
   119d8:	ite	eq
   119da:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   119dc:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   119de:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   119e0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   119e2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   119e4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   119e6:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   119e8:	ldr	r3, [pc, #140]	; (11a78 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   119ea:	ldr	r1, [pc, #144]	; (11a7c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   119ec:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   119ee:	ldr	r2, [pc, #144]	; (11a80 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   119f0:	cbz	r3, 11a22 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   119f2:	movs	r3, #1
   119f4:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   119f6:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
   119f8:	ldr	r3, [pc, #136]	; (11a84 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
   119fa:	ldr	r1, [pc, #140]	; (11a88 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
   119fc:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
   119fe:	ldr	r2, [pc, #140]	; (11a8c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
   11a00:	cmp	r3, #1
   11a02:	bls.n	11a52 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
   11a04:	cmp	r3, #4
   11a06:	bls.n	11a28 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
   11a08:	cmp	r3, #8
   11a0a:	bls.n	11a4a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
   11a0c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
   11a0e:	ite	ls
   11a10:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
   11a12:	movhi	r3, #135	; 0x87
   11a14:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
   11a16:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
   11a18:	ldr	r3, [pc, #116]	; (11a90 <analog_init+0xdc>)
   11a1a:	movs	r2, #1
   11a1c:	strb	r2, [r3, #0]
}
   11a1e:	pop	{r4, r5}
   11a20:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
   11a22:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
   11a24:	str	r3, [r2, #0]
   11a26:	b.n	119f8 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
   11a28:	movs	r3, #132	; 0x84
   11a2a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
   11a2c:	str	r3, [r2, #0]
   11a2e:	b.n	11a18 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   11a30:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   11a34:	ldr	r1, [pc, #60]	; (11a74 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   11a36:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   11a38:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   11a3a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   11a3c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   11a3e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   11a40:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   11a42:	str	r3, [r1, #0]
   11a44:	b.n	119e8 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   11a46:	movs	r2, #57	; 0x39
   11a48:	b.n	11a3a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
   11a4a:	movs	r3, #133	; 0x85
   11a4c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
   11a4e:	str	r3, [r2, #0]
   11a50:	b.n	11a18 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
   11a52:	movs	r3, #128	; 0x80
   11a54:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
   11a56:	str	r3, [r2, #0]
   11a58:	b.n	11a18 <analog_init+0x64>
   11a5a:	nop
   11a5c:	.word	0x40074000
   11a60:	.word	0x40074001
   11a64:	.word	0x1fff0b11
   11a68:	.word	0x4003b008
   11a6c:	.word	0x4003b00c
   11a70:	.word	0x400bb008
   11a74:	.word	0x400bb00c
   11a78:	.word	0x1fff25f6
   11a7c:	.word	0x4003b020
   11a80:	.word	0x400bb020
   11a84:	.word	0x1fff0b12
   11a88:	.word	0x4003b024
   11a8c:	.word	0x400bb024
   11a90:	.word	0x1fff25f5

00011a94 <__aeabi_atexit>:
   11a94:	mov	r3, r1
   11a96:	mov	r1, r0
   11a98:	mov	r0, r3
   11a9a:	b.w	12738 <__cxa_atexit>
   11a9e:	nop

00011aa0 <__aeabi_drsub>:
   11aa0:	eor.w	r1, r1, #2147483648	; 0x80000000
   11aa4:	b.n	11aac <__adddf3>
   11aa6:	nop

00011aa8 <__aeabi_dsub>:
   11aa8:	eor.w	r3, r3, #2147483648	; 0x80000000

00011aac <__adddf3>:
   11aac:	push	{r4, r5, lr}
   11aae:	mov.w	r4, r1, lsl #1
   11ab2:	mov.w	r5, r3, lsl #1
   11ab6:	teq	r4, r5
   11aba:	it	eq
   11abc:	teqeq	r0, r2
   11ac0:	itttt	ne
   11ac2:	orrsne.w	ip, r4, r0
   11ac6:	orrsne.w	ip, r5, r2
   11aca:	mvnsne.w	ip, r4, asr #21
   11ace:	mvnsne.w	ip, r5, asr #21
   11ad2:	beq.w	11c9a <__adddf3+0x1ee>
   11ad6:	mov.w	r4, r4, lsr #21
   11ada:	rsbs	r5, r4, r5, lsr #21
   11ade:	it	lt
   11ae0:	neglt	r5, r5
   11ae2:	ble.n	11afe <__adddf3+0x52>
   11ae4:	add	r4, r5
   11ae6:	eor.w	r2, r0, r2
   11aea:	eor.w	r3, r1, r3
   11aee:	eor.w	r0, r2, r0
   11af2:	eor.w	r1, r3, r1
   11af6:	eor.w	r2, r0, r2
   11afa:	eor.w	r3, r1, r3
   11afe:	cmp	r5, #54	; 0x36
   11b00:	it	hi
   11b02:	pophi	{r4, r5, pc}
   11b04:	tst.w	r1, #2147483648	; 0x80000000
   11b08:	mov.w	r1, r1, lsl #12
   11b0c:	mov.w	ip, #1048576	; 0x100000
   11b10:	orr.w	r1, ip, r1, lsr #12
   11b14:	beq.n	11b1c <__adddf3+0x70>
   11b16:	negs	r0, r0
   11b18:	sbc.w	r1, r1, r1, lsl #1
   11b1c:	tst.w	r3, #2147483648	; 0x80000000
   11b20:	mov.w	r3, r3, lsl #12
   11b24:	orr.w	r3, ip, r3, lsr #12
   11b28:	beq.n	11b30 <__adddf3+0x84>
   11b2a:	negs	r2, r2
   11b2c:	sbc.w	r3, r3, r3, lsl #1
   11b30:	teq	r4, r5
   11b34:	beq.w	11c86 <__adddf3+0x1da>
   11b38:	sub.w	r4, r4, #1
   11b3c:	rsbs	lr, r5, #32
   11b40:	blt.n	11b5e <__adddf3+0xb2>
   11b42:	lsl.w	ip, r2, lr
   11b46:	lsr.w	r2, r2, r5
   11b4a:	adds	r0, r0, r2
   11b4c:	adc.w	r1, r1, #0
   11b50:	lsl.w	r2, r3, lr
   11b54:	adds	r0, r0, r2
   11b56:	asr.w	r3, r3, r5
   11b5a:	adcs	r1, r3
   11b5c:	b.n	11b7c <__adddf3+0xd0>
   11b5e:	sub.w	r5, r5, #32
   11b62:	add.w	lr, lr, #32
   11b66:	cmp	r2, #1
   11b68:	lsl.w	ip, r3, lr
   11b6c:	it	cs
   11b6e:	orrcs.w	ip, ip, #2
   11b72:	asr.w	r3, r3, r5
   11b76:	adds	r0, r0, r3
   11b78:	adcs.w	r1, r1, r3, asr #31
   11b7c:	and.w	r5, r1, #2147483648	; 0x80000000
   11b80:	bpl.n	11b92 <__adddf3+0xe6>
   11b82:	mov.w	lr, #0
   11b86:	rsbs	ip, ip, #0
   11b8a:	sbcs.w	r0, lr, r0
   11b8e:	sbc.w	r1, lr, r1
   11b92:	cmp.w	r1, #1048576	; 0x100000
   11b96:	bcc.n	11bd0 <__adddf3+0x124>
   11b98:	cmp.w	r1, #2097152	; 0x200000
   11b9c:	bcc.n	11bb8 <__adddf3+0x10c>
   11b9e:	lsrs	r1, r1, #1
   11ba0:	movs.w	r0, r0, rrx
   11ba4:	mov.w	ip, ip, rrx
   11ba8:	add.w	r4, r4, #1
   11bac:	mov.w	r2, r4, lsl #21
   11bb0:	cmn.w	r2, #4194304	; 0x400000
   11bb4:	bcs.w	11cec <__adddf3+0x240>
   11bb8:	cmp.w	ip, #2147483648	; 0x80000000
   11bbc:	it	eq
   11bbe:	movseq.w	ip, r0, lsr #1
   11bc2:	adcs.w	r0, r0, #0
   11bc6:	adc.w	r1, r1, r4, lsl #20
   11bca:	orr.w	r1, r1, r5
   11bce:	pop	{r4, r5, pc}
   11bd0:	movs.w	ip, ip, lsl #1
   11bd4:	adcs	r0, r0
   11bd6:	adc.w	r1, r1, r1
   11bda:	tst.w	r1, #1048576	; 0x100000
   11bde:	sub.w	r4, r4, #1
   11be2:	bne.n	11bb8 <__adddf3+0x10c>
   11be4:	teq	r1, #0
   11be8:	itt	eq
   11bea:	moveq	r1, r0
   11bec:	moveq	r0, #0
   11bee:	clz	r3, r1
   11bf2:	it	eq
   11bf4:	addeq	r3, #32
   11bf6:	sub.w	r3, r3, #11
   11bfa:	subs.w	r2, r3, #32
   11bfe:	bge.n	11c1a <__adddf3+0x16e>
   11c00:	adds	r2, #12
   11c02:	ble.n	11c16 <__adddf3+0x16a>
   11c04:	add.w	ip, r2, #20
   11c08:	rsb	r2, r2, #12
   11c0c:	lsl.w	r0, r1, ip
   11c10:	lsr.w	r1, r1, r2
   11c14:	b.n	11c30 <__adddf3+0x184>
   11c16:	add.w	r2, r2, #20
   11c1a:	it	le
   11c1c:	rsble	ip, r2, #32
   11c20:	lsl.w	r1, r1, r2
   11c24:	lsr.w	ip, r0, ip
   11c28:	itt	le
   11c2a:	orrle.w	r1, r1, ip
   11c2e:	lslle	r0, r2
   11c30:	subs	r4, r4, r3
   11c32:	ittt	ge
   11c34:	addge.w	r1, r1, r4, lsl #20
   11c38:	orrge	r1, r5
   11c3a:	popge	{r4, r5, pc}
   11c3c:	mvn.w	r4, r4
   11c40:	subs	r4, #31
   11c42:	bge.n	11c7e <__adddf3+0x1d2>
   11c44:	adds	r4, #12
   11c46:	bgt.n	11c66 <__adddf3+0x1ba>
   11c48:	add.w	r4, r4, #20
   11c4c:	rsb	r2, r4, #32
   11c50:	lsr.w	r0, r0, r4
   11c54:	lsl.w	r3, r1, r2
   11c58:	orr.w	r0, r0, r3
   11c5c:	lsr.w	r3, r1, r4
   11c60:	orr.w	r1, r5, r3
   11c64:	pop	{r4, r5, pc}
   11c66:	rsb	r4, r4, #12
   11c6a:	rsb	r2, r4, #32
   11c6e:	lsr.w	r0, r0, r2
   11c72:	lsl.w	r3, r1, r4
   11c76:	orr.w	r0, r0, r3
   11c7a:	mov	r1, r5
   11c7c:	pop	{r4, r5, pc}
   11c7e:	lsr.w	r0, r1, r4
   11c82:	mov	r1, r5
   11c84:	pop	{r4, r5, pc}
   11c86:	teq	r4, #0
   11c8a:	eor.w	r3, r3, #1048576	; 0x100000
   11c8e:	itte	eq
   11c90:	eoreq.w	r1, r1, #1048576	; 0x100000
   11c94:	addeq	r4, #1
   11c96:	subne	r5, #1
   11c98:	b.n	11b38 <__adddf3+0x8c>
   11c9a:	mvns.w	ip, r4, asr #21
   11c9e:	it	ne
   11ca0:	mvnsne.w	ip, r5, asr #21
   11ca4:	beq.n	11cfa <__adddf3+0x24e>
   11ca6:	teq	r4, r5
   11caa:	it	eq
   11cac:	teqeq	r0, r2
   11cb0:	beq.n	11cbe <__adddf3+0x212>
   11cb2:	orrs.w	ip, r4, r0
   11cb6:	itt	eq
   11cb8:	moveq	r1, r3
   11cba:	moveq	r0, r2
   11cbc:	pop	{r4, r5, pc}
   11cbe:	teq	r1, r3
   11cc2:	ittt	ne
   11cc4:	movne	r1, #0
   11cc6:	movne	r0, #0
   11cc8:	popne	{r4, r5, pc}
   11cca:	movs.w	ip, r4, lsr #21
   11cce:	bne.n	11cdc <__adddf3+0x230>
   11cd0:	lsls	r0, r0, #1
   11cd2:	adcs	r1, r1
   11cd4:	it	cs
   11cd6:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   11cda:	pop	{r4, r5, pc}
   11cdc:	adds.w	r4, r4, #4194304	; 0x400000
   11ce0:	itt	cc
   11ce2:	addcc.w	r1, r1, #1048576	; 0x100000
   11ce6:	popcc	{r4, r5, pc}
   11ce8:	and.w	r5, r1, #2147483648	; 0x80000000
   11cec:	orr.w	r1, r5, #2130706432	; 0x7f000000
   11cf0:	orr.w	r1, r1, #15728640	; 0xf00000
   11cf4:	mov.w	r0, #0
   11cf8:	pop	{r4, r5, pc}
   11cfa:	mvns.w	ip, r4, asr #21
   11cfe:	itte	ne
   11d00:	movne	r1, r3
   11d02:	movne	r0, r2
   11d04:	mvnseq.w	ip, r5, asr #21
   11d08:	itt	ne
   11d0a:	movne	r3, r1
   11d0c:	movne	r2, r0
   11d0e:	orrs.w	r4, r0, r1, lsl #12
   11d12:	itte	eq
   11d14:	orrseq.w	r5, r2, r3, lsl #12
   11d18:	teqeq	r1, r3
   11d1c:	orrne.w	r1, r1, #524288	; 0x80000
   11d20:	pop	{r4, r5, pc}
   11d22:	nop

00011d24 <__aeabi_ui2d>:
   11d24:	teq	r0, #0
   11d28:	itt	eq
   11d2a:	moveq	r1, #0
   11d2c:	bxeq	lr
   11d2e:	push	{r4, r5, lr}
   11d30:	mov.w	r4, #1024	; 0x400
   11d34:	add.w	r4, r4, #50	; 0x32
   11d38:	mov.w	r5, #0
   11d3c:	mov.w	r1, #0
   11d40:	b.n	11be4 <__adddf3+0x138>
   11d42:	nop

00011d44 <__aeabi_i2d>:
   11d44:	teq	r0, #0
   11d48:	itt	eq
   11d4a:	moveq	r1, #0
   11d4c:	bxeq	lr
   11d4e:	push	{r4, r5, lr}
   11d50:	mov.w	r4, #1024	; 0x400
   11d54:	add.w	r4, r4, #50	; 0x32
   11d58:	ands.w	r5, r0, #2147483648	; 0x80000000
   11d5c:	it	mi
   11d5e:	negmi	r0, r0
   11d60:	mov.w	r1, #0
   11d64:	b.n	11be4 <__adddf3+0x138>
   11d66:	nop

00011d68 <__aeabi_f2d>:
   11d68:	lsls	r2, r0, #1
   11d6a:	mov.w	r1, r2, asr #3
   11d6e:	mov.w	r1, r1, rrx
   11d72:	mov.w	r0, r2, lsl #28
   11d76:	itttt	ne
   11d78:	andsne.w	r3, r2, #4278190080	; 0xff000000
   11d7c:	teqne	r3, #4278190080	; 0xff000000
   11d80:	eorne.w	r1, r1, #939524096	; 0x38000000
   11d84:	bxne	lr
   11d86:	teq	r2, #0
   11d8a:	ite	ne
   11d8c:	teqne	r3, #4278190080	; 0xff000000
   11d90:	bxeq	lr
   11d92:	push	{r4, r5, lr}
   11d94:	mov.w	r4, #896	; 0x380
   11d98:	and.w	r5, r1, #2147483648	; 0x80000000
   11d9c:	bic.w	r1, r1, #2147483648	; 0x80000000
   11da0:	b.n	11be4 <__adddf3+0x138>
   11da2:	nop

00011da4 <__aeabi_ul2d>:
   11da4:	orrs.w	r2, r0, r1
   11da8:	it	eq
   11daa:	bxeq	lr
   11dac:	push	{r4, r5, lr}
   11dae:	mov.w	r5, #0
   11db2:	b.n	11dca <__aeabi_l2d+0x16>

00011db4 <__aeabi_l2d>:
   11db4:	orrs.w	r2, r0, r1
   11db8:	it	eq
   11dba:	bxeq	lr
   11dbc:	push	{r4, r5, lr}
   11dbe:	ands.w	r5, r1, #2147483648	; 0x80000000
   11dc2:	bpl.n	11dca <__aeabi_l2d+0x16>
   11dc4:	negs	r0, r0
   11dc6:	sbc.w	r1, r1, r1, lsl #1
   11dca:	mov.w	r4, #1024	; 0x400
   11dce:	add.w	r4, r4, #50	; 0x32
   11dd2:	movs.w	ip, r1, lsr #22
   11dd6:	beq.w	11b92 <__adddf3+0xe6>
   11dda:	mov.w	r2, #3
   11dde:	movs.w	ip, ip, lsr #3
   11de2:	it	ne
   11de4:	addne	r2, #3
   11de6:	movs.w	ip, ip, lsr #3
   11dea:	it	ne
   11dec:	addne	r2, #3
   11dee:	add.w	r2, r2, ip, lsr #3
   11df2:	rsb	r3, r2, #32
   11df6:	lsl.w	ip, r0, r3
   11dfa:	lsr.w	r0, r0, r2
   11dfe:	lsl.w	lr, r1, r3
   11e02:	orr.w	r0, r0, lr
   11e06:	lsr.w	r1, r1, r2
   11e0a:	add	r4, r2
   11e0c:	b.n	11b92 <__adddf3+0xe6>
   11e0e:	nop

00011e10 <__aeabi_dmul>:
   11e10:	push	{r4, r5, r6, lr}
   11e12:	mov.w	ip, #255	; 0xff
   11e16:	orr.w	ip, ip, #1792	; 0x700
   11e1a:	ands.w	r4, ip, r1, lsr #20
   11e1e:	ittte	ne
   11e20:	andsne.w	r5, ip, r3, lsr #20
   11e24:	teqne	r4, ip
   11e28:	teqne	r5, ip
   11e2c:	bleq	11fec <__aeabi_dmul+0x1dc>
   11e30:	add	r4, r5
   11e32:	eor.w	r6, r1, r3
   11e36:	bic.w	r1, r1, ip, lsl #21
   11e3a:	bic.w	r3, r3, ip, lsl #21
   11e3e:	orrs.w	r5, r0, r1, lsl #12
   11e42:	it	ne
   11e44:	orrsne.w	r5, r2, r3, lsl #12
   11e48:	orr.w	r1, r1, #1048576	; 0x100000
   11e4c:	orr.w	r3, r3, #1048576	; 0x100000
   11e50:	beq.n	11ec4 <__aeabi_dmul+0xb4>
   11e52:	umull	ip, lr, r0, r2
   11e56:	mov.w	r5, #0
   11e5a:	umlal	lr, r5, r1, r2
   11e5e:	and.w	r2, r6, #2147483648	; 0x80000000
   11e62:	umlal	lr, r5, r0, r3
   11e66:	mov.w	r6, #0
   11e6a:	umlal	r5, r6, r1, r3
   11e6e:	teq	ip, #0
   11e72:	it	ne
   11e74:	orrne.w	lr, lr, #1
   11e78:	sub.w	r4, r4, #255	; 0xff
   11e7c:	cmp.w	r6, #512	; 0x200
   11e80:	sbc.w	r4, r4, #768	; 0x300
   11e84:	bcs.n	11e90 <__aeabi_dmul+0x80>
   11e86:	movs.w	lr, lr, lsl #1
   11e8a:	adcs	r5, r5
   11e8c:	adc.w	r6, r6, r6
   11e90:	orr.w	r1, r2, r6, lsl #11
   11e94:	orr.w	r1, r1, r5, lsr #21
   11e98:	mov.w	r0, r5, lsl #11
   11e9c:	orr.w	r0, r0, lr, lsr #21
   11ea0:	mov.w	lr, lr, lsl #11
   11ea4:	subs.w	ip, r4, #253	; 0xfd
   11ea8:	it	hi
   11eaa:	cmphi.w	ip, #1792	; 0x700
   11eae:	bhi.n	11eee <__aeabi_dmul+0xde>
   11eb0:	cmp.w	lr, #2147483648	; 0x80000000
   11eb4:	it	eq
   11eb6:	movseq.w	lr, r0, lsr #1
   11eba:	adcs.w	r0, r0, #0
   11ebe:	adc.w	r1, r1, r4, lsl #20
   11ec2:	pop	{r4, r5, r6, pc}
   11ec4:	and.w	r6, r6, #2147483648	; 0x80000000
   11ec8:	orr.w	r1, r6, r1
   11ecc:	orr.w	r0, r0, r2
   11ed0:	eor.w	r1, r1, r3
   11ed4:	subs.w	r4, r4, ip, lsr #1
   11ed8:	ittt	gt
   11eda:	rsbsgt	r5, r4, ip
   11ede:	orrgt.w	r1, r1, r4, lsl #20
   11ee2:	popgt	{r4, r5, r6, pc}
   11ee4:	orr.w	r1, r1, #1048576	; 0x100000
   11ee8:	mov.w	lr, #0
   11eec:	subs	r4, #1
   11eee:	bgt.w	12048 <__aeabi_dmul+0x238>
   11ef2:	cmn.w	r4, #54	; 0x36
   11ef6:	ittt	le
   11ef8:	movle	r0, #0
   11efa:	andle.w	r1, r1, #2147483648	; 0x80000000
   11efe:	pople	{r4, r5, r6, pc}
   11f00:	rsb	r4, r4, #0
   11f04:	subs	r4, #32
   11f06:	bge.n	11f74 <__aeabi_dmul+0x164>
   11f08:	adds	r4, #12
   11f0a:	bgt.n	11f44 <__aeabi_dmul+0x134>
   11f0c:	add.w	r4, r4, #20
   11f10:	rsb	r5, r4, #32
   11f14:	lsl.w	r3, r0, r5
   11f18:	lsr.w	r0, r0, r4
   11f1c:	lsl.w	r2, r1, r5
   11f20:	orr.w	r0, r0, r2
   11f24:	and.w	r2, r1, #2147483648	; 0x80000000
   11f28:	bic.w	r1, r1, #2147483648	; 0x80000000
   11f2c:	adds.w	r0, r0, r3, lsr #31
   11f30:	lsr.w	r6, r1, r4
   11f34:	adc.w	r1, r2, r6
   11f38:	orrs.w	lr, lr, r3, lsl #1
   11f3c:	it	eq
   11f3e:	biceq.w	r0, r0, r3, lsr #31
   11f42:	pop	{r4, r5, r6, pc}
   11f44:	rsb	r4, r4, #12
   11f48:	rsb	r5, r4, #32
   11f4c:	lsl.w	r3, r0, r4
   11f50:	lsr.w	r0, r0, r5
   11f54:	lsl.w	r2, r1, r4
   11f58:	orr.w	r0, r0, r2
   11f5c:	and.w	r1, r1, #2147483648	; 0x80000000
   11f60:	adds.w	r0, r0, r3, lsr #31
   11f64:	adc.w	r1, r1, #0
   11f68:	orrs.w	lr, lr, r3, lsl #1
   11f6c:	it	eq
   11f6e:	biceq.w	r0, r0, r3, lsr #31
   11f72:	pop	{r4, r5, r6, pc}
   11f74:	rsb	r5, r4, #32
   11f78:	lsl.w	r2, r0, r5
   11f7c:	orr.w	lr, lr, r2
   11f80:	lsr.w	r3, r0, r4
   11f84:	lsl.w	r2, r1, r5
   11f88:	orr.w	r3, r3, r2
   11f8c:	lsr.w	r0, r1, r4
   11f90:	and.w	r1, r1, #2147483648	; 0x80000000
   11f94:	lsr.w	r2, r1, r4
   11f98:	bic.w	r0, r0, r2
   11f9c:	add.w	r0, r0, r3, lsr #31
   11fa0:	orrs.w	lr, lr, r3, lsl #1
   11fa4:	it	eq
   11fa6:	biceq.w	r0, r0, r3, lsr #31
   11faa:	pop	{r4, r5, r6, pc}
   11fac:	teq	r4, #0
   11fb0:	bne.n	11fd2 <__aeabi_dmul+0x1c2>
   11fb2:	and.w	r6, r1, #2147483648	; 0x80000000
   11fb6:	lsls	r0, r0, #1
   11fb8:	adc.w	r1, r1, r1
   11fbc:	tst.w	r1, #1048576	; 0x100000
   11fc0:	it	eq
   11fc2:	subeq	r4, #1
   11fc4:	beq.n	11fb6 <__aeabi_dmul+0x1a6>
   11fc6:	orr.w	r1, r1, r6
   11fca:	teq	r5, #0
   11fce:	it	ne
   11fd0:	bxne	lr
   11fd2:	and.w	r6, r3, #2147483648	; 0x80000000
   11fd6:	lsls	r2, r2, #1
   11fd8:	adc.w	r3, r3, r3
   11fdc:	tst.w	r3, #1048576	; 0x100000
   11fe0:	it	eq
   11fe2:	subeq	r5, #1
   11fe4:	beq.n	11fd6 <__aeabi_dmul+0x1c6>
   11fe6:	orr.w	r3, r3, r6
   11fea:	bx	lr
   11fec:	teq	r4, ip
   11ff0:	and.w	r5, ip, r3, lsr #20
   11ff4:	it	ne
   11ff6:	teqne	r5, ip
   11ffa:	beq.n	12016 <__aeabi_dmul+0x206>
   11ffc:	orrs.w	r6, r0, r1, lsl #1
   12000:	it	ne
   12002:	orrsne.w	r6, r2, r3, lsl #1
   12006:	bne.n	11fac <__aeabi_dmul+0x19c>
   12008:	eor.w	r1, r1, r3
   1200c:	and.w	r1, r1, #2147483648	; 0x80000000
   12010:	mov.w	r0, #0
   12014:	pop	{r4, r5, r6, pc}
   12016:	orrs.w	r6, r0, r1, lsl #1
   1201a:	itte	eq
   1201c:	moveq	r0, r2
   1201e:	moveq	r1, r3
   12020:	orrsne.w	r6, r2, r3, lsl #1
   12024:	beq.n	1205a <__aeabi_dmul+0x24a>
   12026:	teq	r4, ip
   1202a:	bne.n	12032 <__aeabi_dmul+0x222>
   1202c:	orrs.w	r6, r0, r1, lsl #12
   12030:	bne.n	1205a <__aeabi_dmul+0x24a>
   12032:	teq	r5, ip
   12036:	bne.n	12044 <__aeabi_dmul+0x234>
   12038:	orrs.w	r6, r2, r3, lsl #12
   1203c:	itt	ne
   1203e:	movne	r0, r2
   12040:	movne	r1, r3
   12042:	bne.n	1205a <__aeabi_dmul+0x24a>
   12044:	eor.w	r1, r1, r3
   12048:	and.w	r1, r1, #2147483648	; 0x80000000
   1204c:	orr.w	r1, r1, #2130706432	; 0x7f000000
   12050:	orr.w	r1, r1, #15728640	; 0xf00000
   12054:	mov.w	r0, #0
   12058:	pop	{r4, r5, r6, pc}
   1205a:	orr.w	r1, r1, #2130706432	; 0x7f000000
   1205e:	orr.w	r1, r1, #16252928	; 0xf80000
   12062:	pop	{r4, r5, r6, pc}

00012064 <__aeabi_ddiv>:
   12064:	push	{r4, r5, r6, lr}
   12066:	mov.w	ip, #255	; 0xff
   1206a:	orr.w	ip, ip, #1792	; 0x700
   1206e:	ands.w	r4, ip, r1, lsr #20
   12072:	ittte	ne
   12074:	andsne.w	r5, ip, r3, lsr #20
   12078:	teqne	r4, ip
   1207c:	teqne	r5, ip
   12080:	bleq	121d2 <__aeabi_ddiv+0x16e>
   12084:	sub.w	r4, r4, r5
   12088:	eor.w	lr, r1, r3
   1208c:	orrs.w	r5, r2, r3, lsl #12
   12090:	mov.w	r1, r1, lsl #12
   12094:	beq.w	121a8 <__aeabi_ddiv+0x144>
   12098:	mov.w	r3, r3, lsl #12
   1209c:	mov.w	r5, #268435456	; 0x10000000
   120a0:	orr.w	r3, r5, r3, lsr #4
   120a4:	orr.w	r3, r3, r2, lsr #24
   120a8:	mov.w	r2, r2, lsl #8
   120ac:	orr.w	r5, r5, r1, lsr #4
   120b0:	orr.w	r5, r5, r0, lsr #24
   120b4:	mov.w	r6, r0, lsl #8
   120b8:	and.w	r1, lr, #2147483648	; 0x80000000
   120bc:	cmp	r5, r3
   120be:	it	eq
   120c0:	cmpeq	r6, r2
   120c2:	adc.w	r4, r4, #253	; 0xfd
   120c6:	add.w	r4, r4, #768	; 0x300
   120ca:	bcs.n	120d2 <__aeabi_ddiv+0x6e>
   120cc:	lsrs	r3, r3, #1
   120ce:	mov.w	r2, r2, rrx
   120d2:	subs	r6, r6, r2
   120d4:	sbc.w	r5, r5, r3
   120d8:	lsrs	r3, r3, #1
   120da:	mov.w	r2, r2, rrx
   120de:	mov.w	r0, #1048576	; 0x100000
   120e2:	mov.w	ip, #524288	; 0x80000
   120e6:	subs.w	lr, r6, r2
   120ea:	sbcs.w	lr, r5, r3
   120ee:	ittt	cs
   120f0:	subcs	r6, r6, r2
   120f2:	movcs	r5, lr
   120f4:	orrcs.w	r0, r0, ip
   120f8:	lsrs	r3, r3, #1
   120fa:	mov.w	r2, r2, rrx
   120fe:	subs.w	lr, r6, r2
   12102:	sbcs.w	lr, r5, r3
   12106:	ittt	cs
   12108:	subcs	r6, r6, r2
   1210a:	movcs	r5, lr
   1210c:	orrcs.w	r0, r0, ip, lsr #1
   12110:	lsrs	r3, r3, #1
   12112:	mov.w	r2, r2, rrx
   12116:	subs.w	lr, r6, r2
   1211a:	sbcs.w	lr, r5, r3
   1211e:	ittt	cs
   12120:	subcs	r6, r6, r2
   12122:	movcs	r5, lr
   12124:	orrcs.w	r0, r0, ip, lsr #2
   12128:	lsrs	r3, r3, #1
   1212a:	mov.w	r2, r2, rrx
   1212e:	subs.w	lr, r6, r2
   12132:	sbcs.w	lr, r5, r3
   12136:	ittt	cs
   12138:	subcs	r6, r6, r2
   1213a:	movcs	r5, lr
   1213c:	orrcs.w	r0, r0, ip, lsr #3
   12140:	orrs.w	lr, r5, r6
   12144:	beq.n	12178 <__aeabi_ddiv+0x114>
   12146:	mov.w	r5, r5, lsl #4
   1214a:	orr.w	r5, r5, r6, lsr #28
   1214e:	mov.w	r6, r6, lsl #4
   12152:	mov.w	r3, r3, lsl #3
   12156:	orr.w	r3, r3, r2, lsr #29
   1215a:	mov.w	r2, r2, lsl #3
   1215e:	movs.w	ip, ip, lsr #4
   12162:	bne.n	120e6 <__aeabi_ddiv+0x82>
   12164:	tst.w	r1, #1048576	; 0x100000
   12168:	bne.n	12182 <__aeabi_ddiv+0x11e>
   1216a:	orr.w	r1, r1, r0
   1216e:	mov.w	r0, #0
   12172:	mov.w	ip, #2147483648	; 0x80000000
   12176:	b.n	120e6 <__aeabi_ddiv+0x82>
   12178:	tst.w	r1, #1048576	; 0x100000
   1217c:	itt	eq
   1217e:	orreq	r1, r0
   12180:	moveq	r0, #0
   12182:	subs.w	ip, r4, #253	; 0xfd
   12186:	it	hi
   12188:	cmphi.w	ip, #1792	; 0x700
   1218c:	bhi.w	11eee <__aeabi_dmul+0xde>
   12190:	subs.w	ip, r5, r3
   12194:	itt	eq
   12196:	subseq.w	ip, r6, r2
   1219a:	movseq.w	ip, r0, lsr #1
   1219e:	adcs.w	r0, r0, #0
   121a2:	adc.w	r1, r1, r4, lsl #20
   121a6:	pop	{r4, r5, r6, pc}
   121a8:	and.w	lr, lr, #2147483648	; 0x80000000
   121ac:	orr.w	r1, lr, r1, lsr #12
   121b0:	adds.w	r4, r4, ip, lsr #1
   121b4:	ittt	gt
   121b6:	rsbsgt	r5, r4, ip
   121ba:	orrgt.w	r1, r1, r4, lsl #20
   121be:	popgt	{r4, r5, r6, pc}
   121c0:	orr.w	r1, r1, #1048576	; 0x100000
   121c4:	mov.w	lr, #0
   121c8:	subs	r4, #1
   121ca:	b.n	11eee <__aeabi_dmul+0xde>
   121cc:	orr.w	lr, r5, r6
   121d0:	b.n	11eee <__aeabi_dmul+0xde>
   121d2:	and.w	r5, ip, r3, lsr #20
   121d6:	teq	r4, ip
   121da:	it	eq
   121dc:	teqeq	r5, ip
   121e0:	beq.w	1205a <__aeabi_dmul+0x24a>
   121e4:	teq	r4, ip
   121e8:	bne.n	12200 <__aeabi_ddiv+0x19c>
   121ea:	orrs.w	r4, r0, r1, lsl #12
   121ee:	bne.w	1205a <__aeabi_dmul+0x24a>
   121f2:	teq	r5, ip
   121f6:	bne.w	12044 <__aeabi_dmul+0x234>
   121fa:	mov	r0, r2
   121fc:	mov	r1, r3
   121fe:	b.n	1205a <__aeabi_dmul+0x24a>
   12200:	teq	r5, ip
   12204:	bne.n	12214 <__aeabi_ddiv+0x1b0>
   12206:	orrs.w	r5, r2, r3, lsl #12
   1220a:	beq.w	12008 <__aeabi_dmul+0x1f8>
   1220e:	mov	r0, r2
   12210:	mov	r1, r3
   12212:	b.n	1205a <__aeabi_dmul+0x24a>
   12214:	orrs.w	r6, r0, r1, lsl #1
   12218:	it	ne
   1221a:	orrsne.w	r6, r2, r3, lsl #1
   1221e:	bne.w	11fac <__aeabi_dmul+0x19c>
   12222:	orrs.w	r4, r0, r1, lsl #1
   12226:	bne.w	12044 <__aeabi_dmul+0x234>
   1222a:	orrs.w	r5, r2, r3, lsl #1
   1222e:	bne.w	12008 <__aeabi_dmul+0x1f8>
   12232:	b.n	1205a <__aeabi_dmul+0x24a>

00012234 <__gedf2>:
   12234:	mov.w	ip, #4294967295
   12238:	b.n	12248 <__cmpdf2+0x4>
   1223a:	nop

0001223c <__ledf2>:
   1223c:	mov.w	ip, #1
   12240:	b.n	12248 <__cmpdf2+0x4>
   12242:	nop

00012244 <__cmpdf2>:
   12244:	mov.w	ip, #1
   12248:	str.w	ip, [sp, #-4]!
   1224c:	mov.w	ip, r1, lsl #1
   12250:	mvns.w	ip, ip, asr #21
   12254:	mov.w	ip, r3, lsl #1
   12258:	it	ne
   1225a:	mvnsne.w	ip, ip, asr #21
   1225e:	beq.n	12298 <__cmpdf2+0x54>
   12260:	add	sp, #4
   12262:	orrs.w	ip, r0, r1, lsl #1
   12266:	ite	eq
   12268:	orrseq.w	ip, r2, r3, lsl #1
   1226c:	teqne	r1, r3
   12270:	ittt	eq
   12272:	teqeq	r0, r2
   12276:	moveq	r0, #0
   12278:	bxeq	lr
   1227a:	cmn.w	r0, #0
   1227e:	teq	r1, r3
   12282:	it	pl
   12284:	cmppl	r1, r3
   12286:	it	eq
   12288:	cmpeq	r0, r2
   1228a:	ite	cs
   1228c:	asrcs	r0, r3, #31
   1228e:	mvncc.w	r0, r3, asr #31
   12292:	orr.w	r0, r0, #1
   12296:	bx	lr
   12298:	mov.w	ip, r1, lsl #1
   1229c:	mvns.w	ip, ip, asr #21
   122a0:	bne.n	122a8 <__cmpdf2+0x64>
   122a2:	orrs.w	ip, r0, r1, lsl #12
   122a6:	bne.n	122b8 <__cmpdf2+0x74>
   122a8:	mov.w	ip, r3, lsl #1
   122ac:	mvns.w	ip, ip, asr #21
   122b0:	bne.n	12260 <__cmpdf2+0x1c>
   122b2:	orrs.w	ip, r2, r3, lsl #12
   122b6:	beq.n	12260 <__cmpdf2+0x1c>
   122b8:	ldr.w	r0, [sp], #4
   122bc:	bx	lr
   122be:	nop

000122c0 <__aeabi_cdrcmple>:
   122c0:	mov	ip, r0
   122c2:	mov	r0, r2
   122c4:	mov	r2, ip
   122c6:	mov	ip, r1
   122c8:	mov	r1, r3
   122ca:	mov	r3, ip
   122cc:	b.n	122d0 <__aeabi_cdcmpeq>
   122ce:	nop

000122d0 <__aeabi_cdcmpeq>:
   122d0:	push	{r0, lr}
   122d2:	bl	12244 <__cmpdf2>
   122d6:	cmp	r0, #0
   122d8:	it	mi
   122da:	cmnmi.w	r0, #0
   122de:	pop	{r0, pc}

000122e0 <__aeabi_dcmpeq>:
   122e0:	str.w	lr, [sp, #-8]!
   122e4:	bl	122d0 <__aeabi_cdcmpeq>
   122e8:	ite	eq
   122ea:	moveq	r0, #1
   122ec:	movne	r0, #0
   122ee:	ldr.w	pc, [sp], #8
   122f2:	nop

000122f4 <__aeabi_dcmplt>:
   122f4:	str.w	lr, [sp, #-8]!
   122f8:	bl	122d0 <__aeabi_cdcmpeq>
   122fc:	ite	cc
   122fe:	movcc	r0, #1
   12300:	movcs	r0, #0
   12302:	ldr.w	pc, [sp], #8
   12306:	nop

00012308 <__aeabi_dcmple>:
   12308:	str.w	lr, [sp, #-8]!
   1230c:	bl	122d0 <__aeabi_cdcmpeq>
   12310:	ite	ls
   12312:	movls	r0, #1
   12314:	movhi	r0, #0
   12316:	ldr.w	pc, [sp], #8
   1231a:	nop

0001231c <__aeabi_dcmpge>:
   1231c:	str.w	lr, [sp, #-8]!
   12320:	bl	122c0 <__aeabi_cdrcmple>
   12324:	ite	ls
   12326:	movls	r0, #1
   12328:	movhi	r0, #0
   1232a:	ldr.w	pc, [sp], #8
   1232e:	nop

00012330 <__aeabi_dcmpgt>:
   12330:	str.w	lr, [sp, #-8]!
   12334:	bl	122c0 <__aeabi_cdrcmple>
   12338:	ite	cc
   1233a:	movcc	r0, #1
   1233c:	movcs	r0, #0
   1233e:	ldr.w	pc, [sp], #8
   12342:	nop

00012344 <__aeabi_dcmpun>:
   12344:	mov.w	ip, r1, lsl #1
   12348:	mvns.w	ip, ip, asr #21
   1234c:	bne.n	12354 <__aeabi_dcmpun+0x10>
   1234e:	orrs.w	ip, r0, r1, lsl #12
   12352:	bne.n	1236a <__aeabi_dcmpun+0x26>
   12354:	mov.w	ip, r3, lsl #1
   12358:	mvns.w	ip, ip, asr #21
   1235c:	bne.n	12364 <__aeabi_dcmpun+0x20>
   1235e:	orrs.w	ip, r2, r3, lsl #12
   12362:	bne.n	1236a <__aeabi_dcmpun+0x26>
   12364:	mov.w	r0, #0
   12368:	bx	lr
   1236a:	mov.w	r0, #1
   1236e:	bx	lr

00012370 <__aeabi_d2iz>:
   12370:	mov.w	r2, r1, lsl #1
   12374:	adds.w	r2, r2, #2097152	; 0x200000
   12378:	bcs.n	123a6 <__aeabi_d2iz+0x36>
   1237a:	bpl.n	123a0 <__aeabi_d2iz+0x30>
   1237c:	mvn.w	r3, #992	; 0x3e0
   12380:	subs.w	r2, r3, r2, asr #21
   12384:	bls.n	123ac <__aeabi_d2iz+0x3c>
   12386:	mov.w	r3, r1, lsl #11
   1238a:	orr.w	r3, r3, #2147483648	; 0x80000000
   1238e:	orr.w	r3, r3, r0, lsr #21
   12392:	tst.w	r1, #2147483648	; 0x80000000
   12396:	lsr.w	r0, r3, r2
   1239a:	it	ne
   1239c:	negne	r0, r0
   1239e:	bx	lr
   123a0:	mov.w	r0, #0
   123a4:	bx	lr
   123a6:	orrs.w	r0, r0, r1, lsl #12
   123aa:	bne.n	123b8 <__aeabi_d2iz+0x48>
   123ac:	ands.w	r0, r1, #2147483648	; 0x80000000
   123b0:	it	eq
   123b2:	mvneq.w	r0, #2147483648	; 0x80000000
   123b6:	bx	lr
   123b8:	mov.w	r0, #0
   123bc:	bx	lr
   123be:	nop

000123c0 <__aeabi_uldivmod>:
   123c0:	cbnz	r3, 123d8 <__aeabi_uldivmod+0x18>
   123c2:	cbnz	r2, 123d8 <__aeabi_uldivmod+0x18>
   123c4:	cmp	r1, #0
   123c6:	it	eq
   123c8:	cmpeq	r0, #0
   123ca:	itt	ne
   123cc:	movne.w	r1, #4294967295
   123d0:	movne.w	r0, #4294967295
   123d4:	b.w	126d4 <__aeabi_idiv0>
   123d8:	sub.w	ip, sp, #8
   123dc:	strd	ip, lr, [sp, #-16]!
   123e0:	bl	123f0 <__udivmoddi4>
   123e4:	ldr.w	lr, [sp, #4]
   123e8:	ldrd	r2, r3, [sp, #8]
   123ec:	add	sp, #16
   123ee:	bx	lr

000123f0 <__udivmoddi4>:
   123f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   123f4:	mov	ip, r1
   123f6:	mov	r6, r1
   123f8:	mov	r4, r0
   123fa:	ldr	r5, [sp, #32]
   123fc:	cmp	r3, #0
   123fe:	bne.n	124a2 <__udivmoddi4+0xb2>
   12400:	cmp	r2, r1
   12402:	mov	r7, r2
   12404:	bls.n	124e0 <__udivmoddi4+0xf0>
   12406:	clz	lr, r2
   1240a:	cmp.w	lr, #0
   1240e:	beq.n	12428 <__udivmoddi4+0x38>
   12410:	rsb	r4, lr, #32
   12414:	lsr.w	r4, r0, r4
   12418:	lsl.w	r6, r1, lr
   1241c:	orr.w	ip, r4, r6
   12420:	lsl.w	r7, r2, lr
   12424:	lsl.w	r4, r0, lr
   12428:	mov.w	r9, r7, lsr #16
   1242c:	lsrs	r2, r4, #16
   1242e:	udiv	r0, ip, r9
   12432:	uxth.w	r8, r7
   12436:	mls	r6, r9, r0, ip
   1243a:	orr.w	r6, r2, r6, lsl #16
   1243e:	mul.w	r3, r0, r8
   12442:	cmp	r3, r6
   12444:	bls.n	1245a <__udivmoddi4+0x6a>
   12446:	adds	r6, r6, r7
   12448:	add.w	r2, r0, #4294967295
   1244c:	bcs.w	12694 <__udivmoddi4+0x2a4>
   12450:	cmp	r3, r6
   12452:	bls.w	12694 <__udivmoddi4+0x2a4>
   12456:	subs	r0, #2
   12458:	add	r6, r7
   1245a:	subs	r6, r6, r3
   1245c:	uxth	r2, r4
   1245e:	udiv	r3, r6, r9
   12462:	mls	r6, r9, r3, r6
   12466:	orr.w	r4, r2, r6, lsl #16
   1246a:	mul.w	r8, r3, r8
   1246e:	cmp	r8, r4
   12470:	bls.n	12486 <__udivmoddi4+0x96>
   12472:	adds	r4, r4, r7
   12474:	add.w	r2, r3, #4294967295
   12478:	bcs.w	12690 <__udivmoddi4+0x2a0>
   1247c:	cmp	r8, r4
   1247e:	bls.w	12690 <__udivmoddi4+0x2a0>
   12482:	subs	r3, #2
   12484:	add	r4, r7
   12486:	rsb	r4, r8, r4
   1248a:	orr.w	r0, r3, r0, lsl #16
   1248e:	movs	r1, #0
   12490:	cmp	r5, #0
   12492:	beq.n	1255a <__udivmoddi4+0x16a>
   12494:	lsr.w	r4, r4, lr
   12498:	movs	r3, #0
   1249a:	str	r4, [r5, #0]
   1249c:	str	r3, [r5, #4]
   1249e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   124a2:	cmp	r3, r1
   124a4:	bls.n	124b6 <__udivmoddi4+0xc6>
   124a6:	cmp	r5, #0
   124a8:	beq.n	12556 <__udivmoddi4+0x166>
   124aa:	movs	r1, #0
   124ac:	stmia.w	r5, {r0, r6}
   124b0:	mov	r0, r1
   124b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   124b6:	clz	r1, r3
   124ba:	cmp	r1, #0
   124bc:	bne.w	125e0 <__udivmoddi4+0x1f0>
   124c0:	cmp	r3, r6
   124c2:	bcc.n	124ca <__udivmoddi4+0xda>
   124c4:	cmp	r2, r0
   124c6:	bhi.w	126ba <__udivmoddi4+0x2ca>
   124ca:	subs	r4, r0, r2
   124cc:	sbc.w	r6, r6, r3
   124d0:	movs	r0, #1
   124d2:	mov	ip, r6
   124d4:	cmp	r5, #0
   124d6:	beq.n	1255a <__udivmoddi4+0x16a>
   124d8:	stmia.w	r5, {r4, ip}
   124dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   124e0:	cbnz	r2, 124e8 <__udivmoddi4+0xf8>
   124e2:	movs	r7, #1
   124e4:	udiv	r7, r7, r2
   124e8:	clz	lr, r7
   124ec:	cmp.w	lr, #0
   124f0:	bne.n	1255e <__udivmoddi4+0x16e>
   124f2:	subs	r3, r6, r7
   124f4:	mov.w	r8, r7, lsr #16
   124f8:	uxth.w	ip, r7
   124fc:	movs	r1, #1
   124fe:	udiv	r0, r3, r8
   12502:	lsrs	r2, r4, #16
   12504:	mls	r6, r8, r0, r3
   12508:	orr.w	r6, r2, r6, lsl #16
   1250c:	mul.w	r3, ip, r0
   12510:	cmp	r3, r6
   12512:	bls.n	12524 <__udivmoddi4+0x134>
   12514:	adds	r6, r6, r7
   12516:	add.w	r2, r0, #4294967295
   1251a:	bcs.n	12522 <__udivmoddi4+0x132>
   1251c:	cmp	r3, r6
   1251e:	bhi.w	126be <__udivmoddi4+0x2ce>
   12522:	mov	r0, r2
   12524:	subs	r6, r6, r3
   12526:	uxth	r2, r4
   12528:	udiv	r3, r6, r8
   1252c:	mls	r6, r8, r3, r6
   12530:	orr.w	r4, r2, r6, lsl #16
   12534:	mul.w	ip, ip, r3
   12538:	cmp	ip, r4
   1253a:	bls.n	1254c <__udivmoddi4+0x15c>
   1253c:	adds	r4, r4, r7
   1253e:	add.w	r2, r3, #4294967295
   12542:	bcs.n	1254a <__udivmoddi4+0x15a>
   12544:	cmp	ip, r4
   12546:	bhi.w	126b4 <__udivmoddi4+0x2c4>
   1254a:	mov	r3, r2
   1254c:	rsb	r4, ip, r4
   12550:	orr.w	r0, r3, r0, lsl #16
   12554:	b.n	12490 <__udivmoddi4+0xa0>
   12556:	mov	r1, r5
   12558:	mov	r0, r5
   1255a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1255e:	rsb	r1, lr, #32
   12562:	lsl.w	r3, r6, lr
   12566:	lsl.w	r7, r7, lr
   1256a:	lsr.w	r9, r0, r1
   1256e:	mov.w	r8, r7, lsr #16
   12572:	lsrs	r6, r1
   12574:	orr.w	r9, r9, r3
   12578:	udiv	sl, r6, r8
   1257c:	mov.w	r4, r9, lsr #16
   12580:	mls	r6, r8, sl, r6
   12584:	uxth.w	ip, r7
   12588:	orr.w	r3, r4, r6, lsl #16
   1258c:	mul.w	r2, sl, ip
   12590:	cmp	r2, r3
   12592:	lsl.w	r4, r0, lr
   12596:	bls.n	125ae <__udivmoddi4+0x1be>
   12598:	adds	r3, r3, r7
   1259a:	add.w	r1, sl, #4294967295
   1259e:	bcs.w	126b0 <__udivmoddi4+0x2c0>
   125a2:	cmp	r2, r3
   125a4:	bls.w	126b0 <__udivmoddi4+0x2c0>
   125a8:	sub.w	sl, sl, #2
   125ac:	add	r3, r7
   125ae:	subs	r3, r3, r2
   125b0:	uxth.w	r9, r9
   125b4:	udiv	r1, r3, r8
   125b8:	mls	r3, r8, r1, r3
   125bc:	orr.w	r3, r9, r3, lsl #16
   125c0:	mul.w	r6, r1, ip
   125c4:	cmp	r6, r3
   125c6:	bls.n	125d8 <__udivmoddi4+0x1e8>
   125c8:	adds	r3, r3, r7
   125ca:	add.w	r2, r1, #4294967295
   125ce:	bcs.n	126a8 <__udivmoddi4+0x2b8>
   125d0:	cmp	r6, r3
   125d2:	bls.n	126a8 <__udivmoddi4+0x2b8>
   125d4:	subs	r1, #2
   125d6:	add	r3, r7
   125d8:	subs	r3, r3, r6
   125da:	orr.w	r1, r1, sl, lsl #16
   125de:	b.n	124fe <__udivmoddi4+0x10e>
   125e0:	rsb	lr, r1, #32
   125e4:	lsr.w	r4, r2, lr
   125e8:	lsls	r3, r1
   125ea:	orrs	r3, r4
   125ec:	lsr.w	r7, r0, lr
   125f0:	lsl.w	r4, r6, r1
   125f4:	mov.w	ip, r3, lsr #16
   125f8:	lsr.w	r6, r6, lr
   125fc:	orrs	r4, r7
   125fe:	udiv	r9, r6, ip
   12602:	lsrs	r7, r4, #16
   12604:	mls	r6, ip, r9, r6
   12608:	uxth.w	r8, r3
   1260c:	orr.w	r6, r7, r6, lsl #16
   12610:	mul.w	r7, r9, r8
   12614:	cmp	r7, r6
   12616:	lsl.w	r2, r2, r1
   1261a:	lsl.w	sl, r0, r1
   1261e:	bls.n	12632 <__udivmoddi4+0x242>
   12620:	adds	r6, r6, r3
   12622:	add.w	r0, r9, #4294967295
   12626:	bcs.n	126ac <__udivmoddi4+0x2bc>
   12628:	cmp	r7, r6
   1262a:	bls.n	126ac <__udivmoddi4+0x2bc>
   1262c:	sub.w	r9, r9, #2
   12630:	add	r6, r3
   12632:	subs	r6, r6, r7
   12634:	uxth	r0, r4
   12636:	udiv	r4, r6, ip
   1263a:	mls	r6, ip, r4, r6
   1263e:	orr.w	r7, r0, r6, lsl #16
   12642:	mul.w	r8, r4, r8
   12646:	cmp	r8, r7
   12648:	bls.n	1265a <__udivmoddi4+0x26a>
   1264a:	adds	r7, r7, r3
   1264c:	add.w	r0, r4, #4294967295
   12650:	bcs.n	126a4 <__udivmoddi4+0x2b4>
   12652:	cmp	r8, r7
   12654:	bls.n	126a4 <__udivmoddi4+0x2b4>
   12656:	subs	r4, #2
   12658:	add	r7, r3
   1265a:	orr.w	r0, r4, r9, lsl #16
   1265e:	rsb	r7, r8, r7
   12662:	umull	r8, r9, r0, r2
   12666:	cmp	r7, r9
   12668:	mov	r4, r8
   1266a:	mov	r6, r9
   1266c:	bcc.n	12698 <__udivmoddi4+0x2a8>
   1266e:	beq.n	126c4 <__udivmoddi4+0x2d4>
   12670:	cbz	r5, 126cc <__udivmoddi4+0x2dc>
   12672:	subs.w	r3, sl, r4
   12676:	sbc.w	r7, r7, r6
   1267a:	lsl.w	lr, r7, lr
   1267e:	lsrs	r3, r1
   12680:	lsrs	r7, r1
   12682:	orr.w	r3, lr, r3
   12686:	stmia.w	r5, {r3, r7}
   1268a:	movs	r1, #0
   1268c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12690:	mov	r3, r2
   12692:	b.n	12486 <__udivmoddi4+0x96>
   12694:	mov	r0, r2
   12696:	b.n	1245a <__udivmoddi4+0x6a>
   12698:	subs.w	r4, r8, r2
   1269c:	sbc.w	r6, r9, r3
   126a0:	subs	r0, #1
   126a2:	b.n	12670 <__udivmoddi4+0x280>
   126a4:	mov	r4, r0
   126a6:	b.n	1265a <__udivmoddi4+0x26a>
   126a8:	mov	r1, r2
   126aa:	b.n	125d8 <__udivmoddi4+0x1e8>
   126ac:	mov	r9, r0
   126ae:	b.n	12632 <__udivmoddi4+0x242>
   126b0:	mov	sl, r1
   126b2:	b.n	125ae <__udivmoddi4+0x1be>
   126b4:	subs	r3, #2
   126b6:	add	r4, r7
   126b8:	b.n	1254c <__udivmoddi4+0x15c>
   126ba:	mov	r0, r1
   126bc:	b.n	124d4 <__udivmoddi4+0xe4>
   126be:	subs	r0, #2
   126c0:	add	r6, r7
   126c2:	b.n	12524 <__udivmoddi4+0x134>
   126c4:	cmp	sl, r8
   126c6:	bcc.n	12698 <__udivmoddi4+0x2a8>
   126c8:	mov	r6, r7
   126ca:	b.n	12670 <__udivmoddi4+0x280>
   126cc:	mov	r1, r5
   126ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   126d2:	nop

000126d4 <__aeabi_idiv0>:
   126d4:	bx	lr
   126d6:	nop

000126d8 <_calloc_r>:
   126d8:	push	{r4, lr}
   126da:	mul.w	r1, r2, r1
   126de:	bl	127e4 <_malloc_r>
   126e2:	mov	r4, r0
   126e4:	cbz	r0, 1271e <_calloc_r+0x46>
   126e6:	ldr.w	r2, [r0, #-4]
   126ea:	bic.w	r2, r2, #3
   126ee:	subs	r2, #4
   126f0:	cmp	r2, #36	; 0x24
   126f2:	bhi.n	12726 <_calloc_r+0x4e>
   126f4:	cmp	r2, #19
   126f6:	bls.n	12722 <_calloc_r+0x4a>
   126f8:	movs	r3, #0
   126fa:	cmp	r2, #27
   126fc:	str	r3, [r0, #0]
   126fe:	str	r3, [r0, #4]
   12700:	bls.n	12730 <_calloc_r+0x58>
   12702:	cmp	r2, #36	; 0x24
   12704:	str	r3, [r0, #8]
   12706:	str	r3, [r0, #12]
   12708:	iteee	ne
   1270a:	addne.w	r2, r0, #16
   1270e:	streq	r3, [r0, #16]
   12710:	streq	r3, [r0, #20]
   12712:	addeq.w	r2, r0, #24
   12716:	movs	r3, #0
   12718:	str	r3, [r2, #0]
   1271a:	str	r3, [r2, #4]
   1271c:	str	r3, [r2, #8]
   1271e:	mov	r0, r4
   12720:	pop	{r4, pc}
   12722:	mov	r2, r0
   12724:	b.n	12716 <_calloc_r+0x3e>
   12726:	movs	r1, #0
   12728:	bl	12f4c <memset>
   1272c:	mov	r0, r4
   1272e:	pop	{r4, pc}
   12730:	add.w	r2, r0, #8
   12734:	b.n	12716 <_calloc_r+0x3e>
   12736:	nop

00012738 <__cxa_atexit>:
   12738:	mov	r3, r2
   1273a:	mov	r2, r1
   1273c:	mov	r1, r0
   1273e:	movs	r0, #2
   12740:	b.w	14e90 <__register_exitproc>

00012744 <fcvtf>:
   12744:	push	{r4, r5, r6, lr}
   12746:	mov	r4, r0
   12748:	vmov	r0, s0
   1274c:	mov	r5, r1
   1274e:	mov	r6, r2
   12750:	bl	11d68 <__aeabi_f2d>
   12754:	mov	r2, r6
   12756:	vmov	d0, r0, r1
   1275a:	movs	r3, #0
   1275c:	mov	r1, r5
   1275e:	mov	r0, r4
   12760:	ldmia.w	sp!, {r4, r5, r6, lr}
   12764:	b.w	15eb4 <fcvtbuf>

00012768 <__errno>:
   12768:	ldr	r3, [pc, #4]	; (12770 <__errno+0x8>)
   1276a:	ldr	r0, [r3, #0]
   1276c:	bx	lr
   1276e:	nop
   12770:	.word	0x1fff0f40

00012774 <__libc_init_array>:
   12774:	push	{r4, r5, r6, lr}
   12776:	ldr	r6, [pc, #60]	; (127b4 <__libc_init_array+0x40>)
   12778:	ldr	r5, [pc, #60]	; (127b8 <__libc_init_array+0x44>)
   1277a:	subs	r6, r6, r5
   1277c:	asrs	r6, r6, #2
   1277e:	it	ne
   12780:	movne	r4, #0
   12782:	beq.n	12790 <__libc_init_array+0x1c>
   12784:	adds	r4, #1
   12786:	ldr.w	r3, [r5], #4
   1278a:	blx	r3
   1278c:	cmp	r6, r4
   1278e:	bne.n	12784 <__libc_init_array+0x10>
   12790:	ldr	r6, [pc, #40]	; (127bc <__libc_init_array+0x48>)
   12792:	ldr	r5, [pc, #44]	; (127c0 <__libc_init_array+0x4c>)
   12794:	subs	r6, r6, r5
   12796:	bl	17984 <_init>
   1279a:	asrs	r6, r6, #2
   1279c:	it	ne
   1279e:	movne	r4, #0
   127a0:	beq.n	127b0 <__libc_init_array+0x3c>
   127a2:	adds	r4, #1
   127a4:	ldr.w	r3, [r5], #4
   127a8:	blx	r3
   127aa:	cmp	r6, r4
   127ac:	bne.n	127a2 <__libc_init_array+0x2e>
   127ae:	pop	{r4, r5, r6, pc}
   127b0:	pop	{r4, r5, r6, pc}
   127b2:	nop
   127b4:	.word	0x00017990
   127b8:	.word	0x00017990
   127bc:	.word	0x000179a0
   127c0:	.word	0x00017990

000127c4 <malloc>:
   127c4:	ldr	r3, [pc, #8]	; (127d0 <malloc+0xc>)
   127c6:	mov	r1, r0
   127c8:	ldr	r0, [r3, #0]
   127ca:	b.w	127e4 <_malloc_r>
   127ce:	nop
   127d0:	.word	0x1fff0f40

000127d4 <free>:
   127d4:	ldr	r3, [pc, #8]	; (127e0 <free+0xc>)
   127d6:	mov	r1, r0
   127d8:	ldr	r0, [r3, #0]
   127da:	b.w	16078 <_free_r>
   127de:	nop
   127e0:	.word	0x1fff0f40

000127e4 <_malloc_r>:
   127e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e8:	add.w	r5, r1, #11
   127ec:	cmp	r5, #22
   127ee:	sub	sp, #12
   127f0:	mov	r6, r0
   127f2:	bls.w	12934 <_malloc_r+0x150>
   127f6:	bics.w	r5, r5, #7
   127fa:	bmi.w	1297c <_malloc_r+0x198>
   127fe:	cmp	r1, r5
   12800:	bhi.w	1297c <_malloc_r+0x198>
   12804:	bl	12fe8 <__malloc_lock>
   12808:	cmp.w	r5, #504	; 0x1f8
   1280c:	bcc.w	12d48 <_malloc_r+0x564>
   12810:	lsrs	r3, r5, #9
   12812:	beq.w	1298a <_malloc_r+0x1a6>
   12816:	cmp	r3, #4
   12818:	bhi.w	12b22 <_malloc_r+0x33e>
   1281c:	lsrs	r0, r5, #6
   1281e:	add.w	lr, r0, #57	; 0x39
   12822:	mov.w	r3, lr, lsl #1
   12826:	adds	r0, #56	; 0x38
   12828:	ldr	r7, [pc, #784]	; (12b3c <_malloc_r+0x358>)
   1282a:	add.w	r3, r7, r3, lsl #2
   1282e:	sub.w	r1, r3, #8
   12832:	ldr	r4, [r3, #4]
   12834:	cmp	r1, r4
   12836:	bne.n	12848 <_malloc_r+0x64>
   12838:	b.n	12994 <_malloc_r+0x1b0>
   1283a:	cmp	r2, #0
   1283c:	bge.w	12998 <_malloc_r+0x1b4>
   12840:	ldr	r4, [r4, #12]
   12842:	cmp	r1, r4
   12844:	beq.w	12994 <_malloc_r+0x1b0>
   12848:	ldr	r3, [r4, #4]
   1284a:	bic.w	r3, r3, #3
   1284e:	subs	r2, r3, r5
   12850:	cmp	r2, #15
   12852:	ble.n	1283a <_malloc_r+0x56>
   12854:	ldr	r1, [pc, #740]	; (12b3c <_malloc_r+0x358>)
   12856:	ldr	r4, [r7, #16]
   12858:	add.w	lr, r1, #8
   1285c:	cmp	r4, lr
   1285e:	beq.w	12bc8 <_malloc_r+0x3e4>
   12862:	ldr	r3, [r4, #4]
   12864:	bic.w	r3, r3, #3
   12868:	subs	r2, r3, r5
   1286a:	cmp	r2, #15
   1286c:	bgt.w	12ba2 <_malloc_r+0x3be>
   12870:	cmp	r2, #0
   12872:	str.w	lr, [r1, #20]
   12876:	str.w	lr, [r1, #16]
   1287a:	bge.w	129ba <_malloc_r+0x1d6>
   1287e:	cmp.w	r3, #512	; 0x200
   12882:	bcs.w	12b54 <_malloc_r+0x370>
   12886:	lsrs	r3, r3, #3
   12888:	add.w	ip, r3, #1
   1288c:	movs	r2, #1
   1288e:	asrs	r3, r3, #2
   12890:	lsl.w	r3, r2, r3
   12894:	ldr	r2, [r1, #4]
   12896:	ldr.w	r8, [r1, ip, lsl #3]
   1289a:	str.w	r8, [r4, #8]
   1289e:	add.w	r9, r1, ip, lsl #3
   128a2:	orrs	r2, r3
   128a4:	sub.w	r3, r9, #8
   128a8:	str	r3, [r4, #12]
   128aa:	str	r2, [r1, #4]
   128ac:	str.w	r4, [r1, ip, lsl #3]
   128b0:	str.w	r4, [r8, #12]
   128b4:	asrs	r3, r0, #2
   128b6:	movs	r4, #1
   128b8:	lsls	r4, r3
   128ba:	cmp	r4, r2
   128bc:	bhi.w	129d4 <_malloc_r+0x1f0>
   128c0:	tst	r4, r2
   128c2:	bne.n	128d2 <_malloc_r+0xee>
   128c4:	bic.w	r0, r0, #3
   128c8:	lsls	r4, r4, #1
   128ca:	tst	r4, r2
   128cc:	add.w	r0, r0, #4
   128d0:	beq.n	128c8 <_malloc_r+0xe4>
   128d2:	add.w	r9, r7, r0, lsl #3
   128d6:	mov	ip, r9
   128d8:	mov	r8, r0
   128da:	ldr.w	r1, [ip, #12]
   128de:	cmp	ip, r1
   128e0:	bne.n	128f2 <_malloc_r+0x10e>
   128e2:	b.n	12bcc <_malloc_r+0x3e8>
   128e4:	cmp	r2, #0
   128e6:	bge.w	12bec <_malloc_r+0x408>
   128ea:	ldr	r1, [r1, #12]
   128ec:	cmp	ip, r1
   128ee:	beq.w	12bcc <_malloc_r+0x3e8>
   128f2:	ldr	r3, [r1, #4]
   128f4:	bic.w	r3, r3, #3
   128f8:	subs	r2, r3, r5
   128fa:	cmp	r2, #15
   128fc:	ble.n	128e4 <_malloc_r+0x100>
   128fe:	mov	r4, r1
   12900:	ldr.w	ip, [r1, #12]
   12904:	ldr.w	r8, [r4, #8]!
   12908:	adds	r3, r1, r5
   1290a:	orr.w	r5, r5, #1
   1290e:	str	r5, [r1, #4]
   12910:	orr.w	r1, r2, #1
   12914:	str.w	ip, [r8, #12]
   12918:	mov	r0, r6
   1291a:	str.w	r8, [ip, #8]
   1291e:	str	r3, [r7, #20]
   12920:	str	r3, [r7, #16]
   12922:	str.w	lr, [r3, #12]
   12926:	str.w	lr, [r3, #8]
   1292a:	str	r1, [r3, #4]
   1292c:	str	r2, [r3, r2]
   1292e:	bl	12fec <__malloc_unlock>
   12932:	b.n	12974 <_malloc_r+0x190>
   12934:	cmp	r1, #16
   12936:	bhi.n	1297c <_malloc_r+0x198>
   12938:	bl	12fe8 <__malloc_lock>
   1293c:	movs	r5, #16
   1293e:	movs	r3, #6
   12940:	movs	r0, #2
   12942:	ldr	r7, [pc, #504]	; (12b3c <_malloc_r+0x358>)
   12944:	add.w	r3, r7, r3, lsl #2
   12948:	sub.w	r2, r3, #8
   1294c:	ldr	r4, [r3, #4]
   1294e:	cmp	r4, r2
   12950:	beq.w	12bde <_malloc_r+0x3fa>
   12954:	ldr	r3, [r4, #4]
   12956:	ldr	r1, [r4, #12]
   12958:	ldr	r5, [r4, #8]
   1295a:	bic.w	r3, r3, #3
   1295e:	add	r3, r4
   12960:	mov	r0, r6
   12962:	ldr	r2, [r3, #4]
   12964:	str	r1, [r5, #12]
   12966:	orr.w	r2, r2, #1
   1296a:	str	r5, [r1, #8]
   1296c:	str	r2, [r3, #4]
   1296e:	bl	12fec <__malloc_unlock>
   12972:	adds	r4, #8
   12974:	mov	r0, r4
   12976:	add	sp, #12
   12978:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1297c:	movs	r4, #0
   1297e:	movs	r3, #12
   12980:	mov	r0, r4
   12982:	str	r3, [r6, #0]
   12984:	add	sp, #12
   12986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1298a:	movs	r3, #128	; 0x80
   1298c:	mov.w	lr, #64	; 0x40
   12990:	movs	r0, #63	; 0x3f
   12992:	b.n	12828 <_malloc_r+0x44>
   12994:	mov	r0, lr
   12996:	b.n	12854 <_malloc_r+0x70>
   12998:	add	r3, r4
   1299a:	ldr	r1, [r4, #12]
   1299c:	ldr	r2, [r3, #4]
   1299e:	ldr	r5, [r4, #8]
   129a0:	orr.w	r2, r2, #1
   129a4:	str	r1, [r5, #12]
   129a6:	mov	r0, r6
   129a8:	str	r5, [r1, #8]
   129aa:	str	r2, [r3, #4]
   129ac:	bl	12fec <__malloc_unlock>
   129b0:	adds	r4, #8
   129b2:	mov	r0, r4
   129b4:	add	sp, #12
   129b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ba:	add	r3, r4
   129bc:	mov	r0, r6
   129be:	ldr	r2, [r3, #4]
   129c0:	orr.w	r2, r2, #1
   129c4:	str	r2, [r3, #4]
   129c6:	bl	12fec <__malloc_unlock>
   129ca:	adds	r4, #8
   129cc:	mov	r0, r4
   129ce:	add	sp, #12
   129d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129d4:	ldr	r4, [r7, #8]
   129d6:	ldr	r3, [r4, #4]
   129d8:	bic.w	r8, r3, #3
   129dc:	cmp	r8, r5
   129de:	bcc.n	129ea <_malloc_r+0x206>
   129e0:	rsb	r3, r5, r8
   129e4:	cmp	r3, #15
   129e6:	bgt.w	12b02 <_malloc_r+0x31e>
   129ea:	ldr	r3, [pc, #340]	; (12b40 <_malloc_r+0x35c>)
   129ec:	ldr.w	r9, [pc, #352]	; 12b50 <_malloc_r+0x36c>
   129f0:	ldr	r2, [r3, #0]
   129f2:	ldr.w	r3, [r9]
   129f6:	adds	r3, #1
   129f8:	add	r2, r5
   129fa:	add.w	sl, r4, r8
   129fe:	beq.w	12cc2 <_malloc_r+0x4de>
   12a02:	add.w	r2, r2, #4096	; 0x1000
   12a06:	adds	r2, #15
   12a08:	bic.w	r2, r2, #4080	; 0xff0
   12a0c:	bic.w	r2, r2, #15
   12a10:	mov	r1, r2
   12a12:	mov	r0, r6
   12a14:	str	r2, [sp, #4]
   12a16:	bl	133d0 <_sbrk_r>
   12a1a:	cmp.w	r0, #4294967295
   12a1e:	mov	fp, r0
   12a20:	ldr	r2, [sp, #4]
   12a22:	beq.w	12cd6 <_malloc_r+0x4f2>
   12a26:	cmp	sl, r0
   12a28:	bhi.w	12c24 <_malloc_r+0x440>
   12a2c:	ldr	r3, [pc, #276]	; (12b44 <_malloc_r+0x360>)
   12a2e:	ldr	r1, [r3, #0]
   12a30:	cmp	sl, fp
   12a32:	add	r1, r2
   12a34:	str	r1, [r3, #0]
   12a36:	beq.w	12ce0 <_malloc_r+0x4fc>
   12a3a:	ldr.w	r0, [r9]
   12a3e:	ldr.w	lr, [pc, #272]	; 12b50 <_malloc_r+0x36c>
   12a42:	adds	r0, #1
   12a44:	ittet	ne
   12a46:	rsbne	sl, sl, fp
   12a4a:	addne	r1, sl
   12a4c:	streq.w	fp, [lr]
   12a50:	strne	r1, [r3, #0]
   12a52:	ands.w	r1, fp, #7
   12a56:	beq.w	12c88 <_malloc_r+0x4a4>
   12a5a:	rsb	r0, r1, #8
   12a5e:	rsb	r1, r1, #4096	; 0x1000
   12a62:	add	fp, r0
   12a64:	adds	r1, #8
   12a66:	add	r2, fp
   12a68:	ubfx	r2, r2, #0, #12
   12a6c:	rsb	r9, r2, r1
   12a70:	mov	r1, r9
   12a72:	mov	r0, r6
   12a74:	str	r3, [sp, #4]
   12a76:	bl	133d0 <_sbrk_r>
   12a7a:	adds	r3, r0, #1
   12a7c:	ldr	r3, [sp, #4]
   12a7e:	beq.w	12d00 <_malloc_r+0x51c>
   12a82:	rsb	r2, fp, r0
   12a86:	add	r2, r9
   12a88:	orr.w	r2, r2, #1
   12a8c:	ldr	r1, [r3, #0]
   12a8e:	str.w	fp, [r7, #8]
   12a92:	add	r1, r9
   12a94:	cmp	r4, r7
   12a96:	str.w	r2, [fp, #4]
   12a9a:	str	r1, [r3, #0]
   12a9c:	ldr.w	r9, [pc, #164]	; 12b44 <_malloc_r+0x360>
   12aa0:	beq.n	12ad0 <_malloc_r+0x2ec>
   12aa2:	cmp.w	r8, #15
   12aa6:	bls.w	12ca4 <_malloc_r+0x4c0>
   12aaa:	ldr	r2, [r4, #4]
   12aac:	sub.w	r3, r8, #12
   12ab0:	bic.w	r3, r3, #7
   12ab4:	adds	r0, r4, r3
   12ab6:	and.w	r2, r2, #1
   12aba:	mov.w	lr, #5
   12abe:	orrs	r2, r3
   12ac0:	cmp	r3, #15
   12ac2:	str	r2, [r4, #4]
   12ac4:	str.w	lr, [r0, #4]
   12ac8:	str.w	lr, [r0, #8]
   12acc:	bhi.w	12d08 <_malloc_r+0x524>
   12ad0:	ldr	r3, [pc, #116]	; (12b48 <_malloc_r+0x364>)
   12ad2:	ldr	r4, [r7, #8]
   12ad4:	ldr	r2, [r3, #0]
   12ad6:	cmp	r1, r2
   12ad8:	it	hi
   12ada:	strhi	r1, [r3, #0]
   12adc:	ldr	r3, [pc, #108]	; (12b4c <_malloc_r+0x368>)
   12ade:	ldr	r2, [r3, #0]
   12ae0:	cmp	r1, r2
   12ae2:	ldr	r2, [r4, #4]
   12ae4:	it	hi
   12ae6:	strhi	r1, [r3, #0]
   12ae8:	bic.w	r2, r2, #3
   12aec:	cmp	r5, r2
   12aee:	sub.w	r3, r2, r5
   12af2:	bhi.n	12af8 <_malloc_r+0x314>
   12af4:	cmp	r3, #15
   12af6:	bgt.n	12b02 <_malloc_r+0x31e>
   12af8:	mov	r0, r6
   12afa:	bl	12fec <__malloc_unlock>
   12afe:	movs	r4, #0
   12b00:	b.n	12974 <_malloc_r+0x190>
   12b02:	adds	r2, r4, r5
   12b04:	orr.w	r3, r3, #1
   12b08:	orr.w	r5, r5, #1
   12b0c:	str	r5, [r4, #4]
   12b0e:	mov	r0, r6
   12b10:	str	r2, [r7, #8]
   12b12:	str	r3, [r2, #4]
   12b14:	bl	12fec <__malloc_unlock>
   12b18:	adds	r4, #8
   12b1a:	mov	r0, r4
   12b1c:	add	sp, #12
   12b1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b22:	cmp	r3, #20
   12b24:	bls.n	12c0a <_malloc_r+0x426>
   12b26:	cmp	r3, #84	; 0x54
   12b28:	bhi.w	12c74 <_malloc_r+0x490>
   12b2c:	lsrs	r0, r5, #12
   12b2e:	add.w	lr, r0, #111	; 0x6f
   12b32:	mov.w	r3, lr, lsl #1
   12b36:	adds	r0, #110	; 0x6e
   12b38:	b.n	12828 <_malloc_r+0x44>
   12b3a:	nop
   12b3c:	.word	0x1fff10b0
   12b40:	.word	0x1fff2600
   12b44:	.word	0x1fff2604
   12b48:	.word	0x1fff25fc
   12b4c:	.word	0x1fff25f8
   12b50:	.word	0x1fff14bc
   12b54:	lsrs	r2, r3, #9
   12b56:	cmp	r2, #4
   12b58:	bls.n	12c18 <_malloc_r+0x434>
   12b5a:	cmp	r2, #20
   12b5c:	bhi.w	12cc6 <_malloc_r+0x4e2>
   12b60:	add.w	r1, r2, #92	; 0x5c
   12b64:	lsls	r1, r1, #1
   12b66:	adds	r2, #91	; 0x5b
   12b68:	add.w	ip, r7, r1, lsl #2
   12b6c:	ldr.w	r1, [r7, r1, lsl #2]
   12b70:	ldr.w	r8, [pc, #476]	; 12d50 <_malloc_r+0x56c>
   12b74:	sub.w	ip, ip, #8
   12b78:	cmp	ip, r1
   12b7a:	beq.w	12c8e <_malloc_r+0x4aa>
   12b7e:	ldr	r2, [r1, #4]
   12b80:	bic.w	r2, r2, #3
   12b84:	cmp	r3, r2
   12b86:	bcs.n	12b8e <_malloc_r+0x3aa>
   12b88:	ldr	r1, [r1, #8]
   12b8a:	cmp	ip, r1
   12b8c:	bne.n	12b7e <_malloc_r+0x39a>
   12b8e:	ldr.w	ip, [r1, #12]
   12b92:	ldr	r2, [r7, #4]
   12b94:	str.w	ip, [r4, #12]
   12b98:	str	r1, [r4, #8]
   12b9a:	str.w	r4, [ip, #8]
   12b9e:	str	r4, [r1, #12]
   12ba0:	b.n	128b4 <_malloc_r+0xd0>
   12ba2:	adds	r3, r4, r5
   12ba4:	orr.w	r7, r2, #1
   12ba8:	orr.w	r5, r5, #1
   12bac:	str	r5, [r4, #4]
   12bae:	mov	r0, r6
   12bb0:	str	r3, [r1, #20]
   12bb2:	str	r3, [r1, #16]
   12bb4:	str.w	lr, [r3, #12]
   12bb8:	str.w	lr, [r3, #8]
   12bbc:	str	r7, [r3, #4]
   12bbe:	str	r2, [r3, r2]
   12bc0:	adds	r4, #8
   12bc2:	bl	12fec <__malloc_unlock>
   12bc6:	b.n	12974 <_malloc_r+0x190>
   12bc8:	ldr	r2, [r1, #4]
   12bca:	b.n	128b4 <_malloc_r+0xd0>
   12bcc:	add.w	r8, r8, #1
   12bd0:	tst.w	r8, #3
   12bd4:	add.w	ip, ip, #8
   12bd8:	bne.w	128da <_malloc_r+0xf6>
   12bdc:	b.n	12c40 <_malloc_r+0x45c>
   12bde:	ldr	r4, [r3, #12]
   12be0:	cmp	r3, r4
   12be2:	it	eq
   12be4:	addeq	r0, #2
   12be6:	beq.w	12854 <_malloc_r+0x70>
   12bea:	b.n	12954 <_malloc_r+0x170>
   12bec:	add	r3, r1
   12bee:	mov	r4, r1
   12bf0:	ldr	r2, [r3, #4]
   12bf2:	ldr	r1, [r1, #12]
   12bf4:	ldr.w	r5, [r4, #8]!
   12bf8:	orr.w	r2, r2, #1
   12bfc:	str	r2, [r3, #4]
   12bfe:	mov	r0, r6
   12c00:	str	r1, [r5, #12]
   12c02:	str	r5, [r1, #8]
   12c04:	bl	12fec <__malloc_unlock>
   12c08:	b.n	12974 <_malloc_r+0x190>
   12c0a:	add.w	lr, r3, #92	; 0x5c
   12c0e:	add.w	r0, r3, #91	; 0x5b
   12c12:	mov.w	r3, lr, lsl #1
   12c16:	b.n	12828 <_malloc_r+0x44>
   12c18:	lsrs	r2, r3, #6
   12c1a:	add.w	r1, r2, #57	; 0x39
   12c1e:	lsls	r1, r1, #1
   12c20:	adds	r2, #56	; 0x38
   12c22:	b.n	12b68 <_malloc_r+0x384>
   12c24:	cmp	r4, r7
   12c26:	ldr	r3, [pc, #296]	; (12d50 <_malloc_r+0x56c>)
   12c28:	beq.w	12a2c <_malloc_r+0x248>
   12c2c:	ldr	r4, [r3, #8]
   12c2e:	ldr	r2, [r4, #4]
   12c30:	bic.w	r2, r2, #3
   12c34:	b.n	12aec <_malloc_r+0x308>
   12c36:	ldr.w	r3, [r9], #-8
   12c3a:	cmp	r9, r3
   12c3c:	bne.w	12d44 <_malloc_r+0x560>
   12c40:	tst.w	r0, #3
   12c44:	add.w	r0, r0, #4294967295
   12c48:	bne.n	12c36 <_malloc_r+0x452>
   12c4a:	ldr	r3, [r7, #4]
   12c4c:	bic.w	r3, r3, r4
   12c50:	str	r3, [r7, #4]
   12c52:	lsls	r4, r4, #1
   12c54:	cmp	r4, r3
   12c56:	bhi.w	129d4 <_malloc_r+0x1f0>
   12c5a:	cmp	r4, #0
   12c5c:	beq.w	129d4 <_malloc_r+0x1f0>
   12c60:	tst	r4, r3
   12c62:	mov	r0, r8
   12c64:	bne.w	128d2 <_malloc_r+0xee>
   12c68:	lsls	r4, r4, #1
   12c6a:	tst	r4, r3
   12c6c:	add.w	r0, r0, #4
   12c70:	beq.n	12c68 <_malloc_r+0x484>
   12c72:	b.n	128d2 <_malloc_r+0xee>
   12c74:	cmp.w	r3, #340	; 0x154
   12c78:	bhi.n	12cac <_malloc_r+0x4c8>
   12c7a:	lsrs	r0, r5, #15
   12c7c:	add.w	lr, r0, #120	; 0x78
   12c80:	mov.w	r3, lr, lsl #1
   12c84:	adds	r0, #119	; 0x77
   12c86:	b.n	12828 <_malloc_r+0x44>
   12c88:	mov.w	r1, #4096	; 0x1000
   12c8c:	b.n	12a66 <_malloc_r+0x282>
   12c8e:	movs	r1, #1
   12c90:	ldr.w	r3, [r8, #4]
   12c94:	asrs	r2, r2, #2
   12c96:	lsl.w	r2, r1, r2
   12c9a:	orrs	r2, r3
   12c9c:	str.w	r2, [r8, #4]
   12ca0:	mov	r1, ip
   12ca2:	b.n	12b94 <_malloc_r+0x3b0>
   12ca4:	movs	r3, #1
   12ca6:	str.w	r3, [fp, #4]
   12caa:	b.n	12af8 <_malloc_r+0x314>
   12cac:	movw	r2, #1364	; 0x554
   12cb0:	cmp	r3, r2
   12cb2:	bhi.n	12cf6 <_malloc_r+0x512>
   12cb4:	lsrs	r0, r5, #18
   12cb6:	add.w	lr, r0, #125	; 0x7d
   12cba:	mov.w	r3, lr, lsl #1
   12cbe:	adds	r0, #124	; 0x7c
   12cc0:	b.n	12828 <_malloc_r+0x44>
   12cc2:	adds	r2, #16
   12cc4:	b.n	12a10 <_malloc_r+0x22c>
   12cc6:	cmp	r2, #84	; 0x54
   12cc8:	bhi.n	12d18 <_malloc_r+0x534>
   12cca:	lsrs	r2, r3, #12
   12ccc:	add.w	r1, r2, #111	; 0x6f
   12cd0:	lsls	r1, r1, #1
   12cd2:	adds	r2, #110	; 0x6e
   12cd4:	b.n	12b68 <_malloc_r+0x384>
   12cd6:	ldr	r4, [r7, #8]
   12cd8:	ldr	r2, [r4, #4]
   12cda:	bic.w	r2, r2, #3
   12cde:	b.n	12aec <_malloc_r+0x308>
   12ce0:	ubfx	r0, sl, #0, #12
   12ce4:	cmp	r0, #0
   12ce6:	bne.w	12a3a <_malloc_r+0x256>
   12cea:	add	r2, r8
   12cec:	ldr	r3, [r7, #8]
   12cee:	orr.w	r2, r2, #1
   12cf2:	str	r2, [r3, #4]
   12cf4:	b.n	12ad0 <_malloc_r+0x2ec>
   12cf6:	movs	r3, #254	; 0xfe
   12cf8:	mov.w	lr, #127	; 0x7f
   12cfc:	movs	r0, #126	; 0x7e
   12cfe:	b.n	12828 <_malloc_r+0x44>
   12d00:	movs	r2, #1
   12d02:	mov.w	r9, #0
   12d06:	b.n	12a8c <_malloc_r+0x2a8>
   12d08:	add.w	r1, r4, #8
   12d0c:	mov	r0, r6
   12d0e:	bl	16078 <_free_r>
   12d12:	ldr.w	r1, [r9]
   12d16:	b.n	12ad0 <_malloc_r+0x2ec>
   12d18:	cmp.w	r2, #340	; 0x154
   12d1c:	bhi.n	12d2a <_malloc_r+0x546>
   12d1e:	lsrs	r2, r3, #15
   12d20:	add.w	r1, r2, #120	; 0x78
   12d24:	lsls	r1, r1, #1
   12d26:	adds	r2, #119	; 0x77
   12d28:	b.n	12b68 <_malloc_r+0x384>
   12d2a:	movw	r1, #1364	; 0x554
   12d2e:	cmp	r2, r1
   12d30:	bhi.n	12d3e <_malloc_r+0x55a>
   12d32:	lsrs	r2, r3, #18
   12d34:	add.w	r1, r2, #125	; 0x7d
   12d38:	lsls	r1, r1, #1
   12d3a:	adds	r2, #124	; 0x7c
   12d3c:	b.n	12b68 <_malloc_r+0x384>
   12d3e:	movs	r1, #254	; 0xfe
   12d40:	movs	r2, #126	; 0x7e
   12d42:	b.n	12b68 <_malloc_r+0x384>
   12d44:	ldr	r3, [r7, #4]
   12d46:	b.n	12c52 <_malloc_r+0x46e>
   12d48:	lsrs	r0, r5, #3
   12d4a:	adds	r3, r0, #1
   12d4c:	lsls	r3, r3, #1
   12d4e:	b.n	12942 <_malloc_r+0x15e>
   12d50:	.word	0x1fff10b0

00012d54 <__ascii_mbtowc>:
   12d54:	sub	sp, #8
   12d56:	cbz	r1, 12d6c <__ascii_mbtowc+0x18>
   12d58:	cbz	r2, 12d72 <__ascii_mbtowc+0x1e>
   12d5a:	cbz	r3, 12d78 <__ascii_mbtowc+0x24>
   12d5c:	ldrb	r3, [r2, #0]
   12d5e:	str	r3, [r1, #0]
   12d60:	ldrb	r2, [r2, #0]
   12d62:	adds	r0, r2, #0
   12d64:	it	ne
   12d66:	movne	r0, #1
   12d68:	add	sp, #8
   12d6a:	bx	lr
   12d6c:	add	r1, sp, #4
   12d6e:	cmp	r2, #0
   12d70:	bne.n	12d5a <__ascii_mbtowc+0x6>
   12d72:	mov	r0, r2
   12d74:	add	sp, #8
   12d76:	bx	lr
   12d78:	mvn.w	r0, #1
   12d7c:	b.n	12d68 <__ascii_mbtowc+0x14>
   12d7e:	nop

00012d80 <memchr>:
   12d80:	and.w	r1, r1, #255	; 0xff
   12d84:	cmp	r2, #16
   12d86:	blt.n	12de0 <memchr+0x60>
   12d88:	tst.w	r0, #7
   12d8c:	beq.n	12da0 <memchr+0x20>
   12d8e:	ldrb.w	r3, [r0], #1
   12d92:	subs	r2, #1
   12d94:	cmp	r3, r1
   12d96:	beq.n	12df4 <memchr+0x74>
   12d98:	tst.w	r0, #7
   12d9c:	cbz	r2, 12df0 <memchr+0x70>
   12d9e:	bne.n	12d8e <memchr+0xe>
   12da0:	push	{r4, r5, r6, r7}
   12da2:	orr.w	r1, r1, r1, lsl #8
   12da6:	orr.w	r1, r1, r1, lsl #16
   12daa:	bic.w	r4, r2, #7
   12dae:	mvns.w	r7, #0
   12db2:	movs	r3, #0
   12db4:	ldrd	r5, r6, [r0], #8
   12db8:	subs	r4, #8
   12dba:	eor.w	r5, r5, r1
   12dbe:	eor.w	r6, r6, r1
   12dc2:	uadd8	r5, r5, r7
   12dc6:	sel	r5, r3, r7
   12dca:	uadd8	r6, r6, r7
   12dce:	sel	r6, r5, r7
   12dd2:	cbnz	r6, 12df8 <memchr+0x78>
   12dd4:	bne.n	12db4 <memchr+0x34>
   12dd6:	pop	{r4, r5, r6, r7}
   12dd8:	and.w	r1, r1, #255	; 0xff
   12ddc:	and.w	r2, r2, #7
   12de0:	cbz	r2, 12df0 <memchr+0x70>
   12de2:	ldrb.w	r3, [r0], #1
   12de6:	subs	r2, #1
   12de8:	eor.w	r3, r3, r1
   12dec:	cbz	r3, 12df4 <memchr+0x74>
   12dee:	bne.n	12de2 <memchr+0x62>
   12df0:	movs	r0, #0
   12df2:	bx	lr
   12df4:	subs	r0, #1
   12df6:	bx	lr
   12df8:	cmp	r5, #0
   12dfa:	itte	eq
   12dfc:	moveq	r5, r6
   12dfe:	subeq	r0, #3
   12e00:	subne	r0, #7
   12e02:	tst.w	r5, #1
   12e06:	bne.n	12e18 <memchr+0x98>
   12e08:	adds	r0, #1
   12e0a:	tst.w	r5, #256	; 0x100
   12e0e:	ittt	eq
   12e10:	addeq	r0, #1
   12e12:	tsteq.w	r5, #98304	; 0x18000
   12e16:	addeq	r0, #1
   12e18:	pop	{r4, r5, r6, r7}
   12e1a:	subs	r0, #1
   12e1c:	bx	lr
   12e1e:	nop

00012e20 <memcmp>:
   12e20:	cmp	r2, #3
   12e22:	push	{r4, r5, r6}
   12e24:	bls.n	12e74 <memcmp+0x54>
   12e26:	orr.w	r3, r0, r1
   12e2a:	lsls	r3, r3, #30
   12e2c:	beq.n	12e52 <memcmp+0x32>
   12e2e:	ldrb	r4, [r0, #0]
   12e30:	ldrb	r5, [r1, #0]
   12e32:	cmp	r4, r5
   12e34:	bne.n	12e7c <memcmp+0x5c>
   12e36:	add	r2, r0
   12e38:	adds	r3, r0, #1
   12e3a:	b.n	12e48 <memcmp+0x28>
   12e3c:	ldrb.w	r4, [r3], #1
   12e40:	ldrb.w	r5, [r1, #1]!
   12e44:	cmp	r4, r5
   12e46:	bne.n	12e7c <memcmp+0x5c>
   12e48:	cmp	r3, r2
   12e4a:	bne.n	12e3c <memcmp+0x1c>
   12e4c:	movs	r0, #0
   12e4e:	pop	{r4, r5, r6}
   12e50:	bx	lr
   12e52:	mov	r4, r1
   12e54:	mov	r3, r0
   12e56:	ldr	r6, [r3, #0]
   12e58:	ldr	r5, [r4, #0]
   12e5a:	cmp	r6, r5
   12e5c:	mov	r0, r3
   12e5e:	mov	r1, r4
   12e60:	add.w	r3, r3, #4
   12e64:	add.w	r4, r4, #4
   12e68:	bne.n	12e2e <memcmp+0xe>
   12e6a:	subs	r2, #4
   12e6c:	cmp	r2, #3
   12e6e:	mov	r0, r3
   12e70:	mov	r1, r4
   12e72:	bhi.n	12e56 <memcmp+0x36>
   12e74:	cmp	r2, #0
   12e76:	bne.n	12e2e <memcmp+0xe>
   12e78:	mov	r0, r2
   12e7a:	b.n	12e4e <memcmp+0x2e>
   12e7c:	subs	r0, r4, r5
   12e7e:	pop	{r4, r5, r6}
   12e80:	bx	lr
   12e82:	nop

00012e84 <memmove>:
   12e84:	cmp	r0, r1
   12e86:	push	{r4, r5, r6, r7, lr}
   12e88:	bls.n	12ea6 <memmove+0x22>
   12e8a:	adds	r3, r1, r2
   12e8c:	cmp	r0, r3
   12e8e:	bcs.n	12ea6 <memmove+0x22>
   12e90:	adds	r1, r0, r2
   12e92:	cmp	r2, #0
   12e94:	beq.n	12f3a <memmove+0xb6>
   12e96:	subs	r2, r3, r2
   12e98:	ldrb.w	r4, [r3, #-1]!
   12e9c:	strb.w	r4, [r1, #-1]!
   12ea0:	cmp	r3, r2
   12ea2:	bne.n	12e98 <memmove+0x14>
   12ea4:	pop	{r4, r5, r6, r7, pc}
   12ea6:	cmp	r2, #15
   12ea8:	bls.n	12f3c <memmove+0xb8>
   12eaa:	orr.w	r3, r1, r0
   12eae:	lsls	r3, r3, #30
   12eb0:	bne.n	12f40 <memmove+0xbc>
   12eb2:	add.w	r4, r0, #16
   12eb6:	add.w	r3, r1, #16
   12eba:	mov	r5, r2
   12ebc:	ldr.w	r6, [r3, #-16]
   12ec0:	str.w	r6, [r4, #-16]
   12ec4:	ldr.w	r6, [r3, #-12]
   12ec8:	str.w	r6, [r4, #-12]
   12ecc:	ldr.w	r6, [r3, #-8]
   12ed0:	str.w	r6, [r4, #-8]
   12ed4:	subs	r5, #16
   12ed6:	ldr.w	r6, [r3, #-4]
   12eda:	str.w	r6, [r4, #-4]
   12ede:	cmp	r5, #15
   12ee0:	add.w	r3, r3, #16
   12ee4:	add.w	r4, r4, #16
   12ee8:	bhi.n	12ebc <memmove+0x38>
   12eea:	sub.w	r3, r2, #16
   12eee:	bic.w	r3, r3, #15
   12ef2:	and.w	lr, r2, #15
   12ef6:	adds	r3, #16
   12ef8:	cmp.w	lr, #3
   12efc:	add	r1, r3
   12efe:	add	r3, r0
   12f00:	bls.n	12f46 <memmove+0xc2>
   12f02:	subs	r6, r3, #4
   12f04:	mov	r5, r1
   12f06:	mov	r4, lr
   12f08:	subs	r4, #4
   12f0a:	ldr.w	r7, [r5], #4
   12f0e:	str.w	r7, [r6, #4]!
   12f12:	cmp	r4, #3
   12f14:	bhi.n	12f08 <memmove+0x84>
   12f16:	sub.w	r4, lr, #4
   12f1a:	bic.w	r4, r4, #3
   12f1e:	adds	r4, #4
   12f20:	add	r3, r4
   12f22:	add	r1, r4
   12f24:	and.w	r2, r2, #3
   12f28:	cbz	r2, 12f44 <memmove+0xc0>
   12f2a:	subs	r3, #1
   12f2c:	add	r2, r1
   12f2e:	ldrb.w	r4, [r1], #1
   12f32:	strb.w	r4, [r3, #1]!
   12f36:	cmp	r2, r1
   12f38:	bne.n	12f2e <memmove+0xaa>
   12f3a:	pop	{r4, r5, r6, r7, pc}
   12f3c:	mov	r3, r0
   12f3e:	b.n	12f28 <memmove+0xa4>
   12f40:	mov	r3, r0
   12f42:	b.n	12f2a <memmove+0xa6>
   12f44:	pop	{r4, r5, r6, r7, pc}
   12f46:	mov	r2, lr
   12f48:	b.n	12f28 <memmove+0xa4>
   12f4a:	nop

00012f4c <memset>:
   12f4c:	push	{r4, r5, r6}
   12f4e:	lsls	r4, r0, #30
   12f50:	beq.n	12fe0 <memset+0x94>
   12f52:	subs	r4, r2, #1
   12f54:	cmp	r2, #0
   12f56:	beq.n	12fdc <memset+0x90>
   12f58:	uxtb	r5, r1
   12f5a:	mov	r3, r0
   12f5c:	b.n	12f64 <memset+0x18>
   12f5e:	subs	r2, r4, #1
   12f60:	cbz	r4, 12fdc <memset+0x90>
   12f62:	mov	r4, r2
   12f64:	strb.w	r5, [r3], #1
   12f68:	lsls	r2, r3, #30
   12f6a:	bne.n	12f5e <memset+0x12>
   12f6c:	cmp	r4, #3
   12f6e:	bls.n	12fce <memset+0x82>
   12f70:	uxtb	r5, r1
   12f72:	orr.w	r5, r5, r5, lsl #8
   12f76:	cmp	r4, #15
   12f78:	orr.w	r5, r5, r5, lsl #16
   12f7c:	bls.n	12fb2 <memset+0x66>
   12f7e:	add.w	r2, r3, #16
   12f82:	mov	r6, r4
   12f84:	subs	r6, #16
   12f86:	cmp	r6, #15
   12f88:	str.w	r5, [r2, #-16]
   12f8c:	str.w	r5, [r2, #-12]
   12f90:	str.w	r5, [r2, #-8]
   12f94:	str.w	r5, [r2, #-4]
   12f98:	add.w	r2, r2, #16
   12f9c:	bhi.n	12f84 <memset+0x38>
   12f9e:	sub.w	r2, r4, #16
   12fa2:	bic.w	r2, r2, #15
   12fa6:	and.w	r4, r4, #15
   12faa:	adds	r2, #16
   12fac:	cmp	r4, #3
   12fae:	add	r3, r2
   12fb0:	bls.n	12fce <memset+0x82>
   12fb2:	mov	r6, r3
   12fb4:	mov	r2, r4
   12fb6:	subs	r2, #4
   12fb8:	cmp	r2, #3
   12fba:	str.w	r5, [r6], #4
   12fbe:	bhi.n	12fb6 <memset+0x6a>
   12fc0:	subs	r2, r4, #4
   12fc2:	bic.w	r2, r2, #3
   12fc6:	adds	r2, #4
   12fc8:	add	r3, r2
   12fca:	and.w	r4, r4, #3
   12fce:	cbz	r4, 12fdc <memset+0x90>
   12fd0:	uxtb	r1, r1
   12fd2:	add	r4, r3
   12fd4:	strb.w	r1, [r3], #1
   12fd8:	cmp	r3, r4
   12fda:	bne.n	12fd4 <memset+0x88>
   12fdc:	pop	{r4, r5, r6}
   12fde:	bx	lr
   12fe0:	mov	r4, r2
   12fe2:	mov	r3, r0
   12fe4:	b.n	12f6c <memset+0x20>
   12fe6:	nop

00012fe8 <__malloc_lock>:
   12fe8:	bx	lr
   12fea:	nop

00012fec <__malloc_unlock>:
   12fec:	bx	lr
   12fee:	nop

00012ff0 <_realloc_r>:
   12ff0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ff4:	mov	r7, r2
   12ff6:	sub	sp, #12
   12ff8:	cmp	r1, #0
   12ffa:	beq.w	13180 <_realloc_r+0x190>
   12ffe:	mov	r6, r1
   13000:	mov	r9, r0
   13002:	add.w	r5, r7, #11
   13006:	bl	12fe8 <__malloc_lock>
   1300a:	ldr.w	lr, [r6, #-4]
   1300e:	cmp	r5, #22
   13010:	bic.w	r4, lr, #3
   13014:	sub.w	r8, r6, #8
   13018:	bhi.n	1309c <_realloc_r+0xac>
   1301a:	movs	r2, #16
   1301c:	mov	r5, r2
   1301e:	cmp	r7, r5
   13020:	bhi.n	130a6 <_realloc_r+0xb6>
   13022:	cmp	r4, r2
   13024:	bge.n	13112 <_realloc_r+0x122>
   13026:	ldr	r3, [pc, #804]	; (1334c <_realloc_r+0x35c>)
   13028:	ldr	r1, [r3, #8]
   1302a:	add.w	r0, r8, r4
   1302e:	cmp	r0, r1
   13030:	ldr	r1, [r0, #4]
   13032:	beq.w	131e8 <_realloc_r+0x1f8>
   13036:	bic.w	r3, r1, #1
   1303a:	add	r3, r0
   1303c:	ldr	r3, [r3, #4]
   1303e:	lsls	r3, r3, #31
   13040:	bpl.n	1313e <_realloc_r+0x14e>
   13042:	tst.w	lr, #1
   13046:	beq.n	130b4 <_realloc_r+0xc4>
   13048:	mov	r1, r7
   1304a:	mov	r0, r9
   1304c:	bl	127e4 <_malloc_r>
   13050:	mov	r7, r0
   13052:	cbz	r0, 1308e <_realloc_r+0x9e>
   13054:	ldr.w	r3, [r6, #-4]
   13058:	bic.w	r3, r3, #1
   1305c:	add	r3, r8
   1305e:	sub.w	r2, r0, #8
   13062:	cmp	r2, r3
   13064:	beq.w	132f0 <_realloc_r+0x300>
   13068:	subs	r2, r4, #4
   1306a:	cmp	r2, #36	; 0x24
   1306c:	bhi.w	132d2 <_realloc_r+0x2e2>
   13070:	cmp	r2, #19
   13072:	bhi.w	1327e <_realloc_r+0x28e>
   13076:	mov	r3, r0
   13078:	mov	r2, r6
   1307a:	ldr	r1, [r2, #0]
   1307c:	str	r1, [r3, #0]
   1307e:	ldr	r1, [r2, #4]
   13080:	str	r1, [r3, #4]
   13082:	ldr	r2, [r2, #8]
   13084:	str	r2, [r3, #8]
   13086:	mov	r1, r6
   13088:	mov	r0, r9
   1308a:	bl	16078 <_free_r>
   1308e:	mov	r0, r9
   13090:	bl	12fec <__malloc_unlock>
   13094:	mov	r0, r7
   13096:	add	sp, #12
   13098:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1309c:	bic.w	r5, r5, #7
   130a0:	cmp	r5, #0
   130a2:	mov	r2, r5
   130a4:	bge.n	1301e <_realloc_r+0x2e>
   130a6:	movs	r3, #12
   130a8:	movs	r0, #0
   130aa:	str.w	r3, [r9]
   130ae:	add	sp, #12
   130b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130b4:	ldr.w	r3, [r6, #-8]
   130b8:	rsb	sl, r3, r8
   130bc:	ldr.w	r3, [sl, #4]
   130c0:	bic.w	ip, r3, #3
   130c4:	add.w	r3, r4, ip
   130c8:	cmp	r3, r2
   130ca:	blt.n	13048 <_realloc_r+0x58>
   130cc:	mov	r7, sl
   130ce:	ldr.w	r1, [sl, #12]
   130d2:	ldr.w	r0, [r7, #8]!
   130d6:	subs	r2, r4, #4
   130d8:	cmp	r2, #36	; 0x24
   130da:	str	r1, [r0, #12]
   130dc:	str	r0, [r1, #8]
   130de:	bhi.w	13310 <_realloc_r+0x320>
   130e2:	cmp	r2, #19
   130e4:	bls.w	1330c <_realloc_r+0x31c>
   130e8:	ldr	r1, [r6, #0]
   130ea:	str.w	r1, [sl, #8]
   130ee:	ldr	r1, [r6, #4]
   130f0:	str.w	r1, [sl, #12]
   130f4:	cmp	r2, #27
   130f6:	bhi.w	13350 <_realloc_r+0x360>
   130fa:	adds	r6, #8
   130fc:	add.w	r2, sl, #16
   13100:	ldr	r1, [r6, #0]
   13102:	str	r1, [r2, #0]
   13104:	ldr	r1, [r6, #4]
   13106:	str	r1, [r2, #4]
   13108:	ldr	r1, [r6, #8]
   1310a:	str	r1, [r2, #8]
   1310c:	mov	r6, r7
   1310e:	mov	r4, r3
   13110:	mov	r8, sl
   13112:	subs	r3, r4, r5
   13114:	cmp	r3, #15
   13116:	bhi.n	13154 <_realloc_r+0x164>
   13118:	ldr.w	r3, [r8, #4]
   1311c:	and.w	r3, r3, #1
   13120:	orrs	r3, r4
   13122:	add	r4, r8
   13124:	str.w	r3, [r8, #4]
   13128:	ldr	r3, [r4, #4]
   1312a:	orr.w	r3, r3, #1
   1312e:	str	r3, [r4, #4]
   13130:	mov	r0, r9
   13132:	bl	12fec <__malloc_unlock>
   13136:	mov	r0, r6
   13138:	add	sp, #12
   1313a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1313e:	bic.w	r1, r1, #3
   13142:	add	r1, r4
   13144:	cmp	r1, r2
   13146:	blt.n	1318c <_realloc_r+0x19c>
   13148:	ldr	r3, [r0, #12]
   1314a:	ldr	r2, [r0, #8]
   1314c:	mov	r4, r1
   1314e:	str	r3, [r2, #12]
   13150:	str	r2, [r3, #8]
   13152:	b.n	13112 <_realloc_r+0x122>
   13154:	ldr.w	r2, [r8, #4]
   13158:	add.w	r1, r8, r5
   1315c:	and.w	r2, r2, #1
   13160:	orrs	r5, r2
   13162:	orr.w	r2, r3, #1
   13166:	add	r3, r1
   13168:	str.w	r5, [r8, #4]
   1316c:	str	r2, [r1, #4]
   1316e:	ldr	r2, [r3, #4]
   13170:	orr.w	r2, r2, #1
   13174:	adds	r1, #8
   13176:	str	r2, [r3, #4]
   13178:	mov	r0, r9
   1317a:	bl	16078 <_free_r>
   1317e:	b.n	13130 <_realloc_r+0x140>
   13180:	mov	r1, r2
   13182:	add	sp, #12
   13184:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13188:	b.w	127e4 <_malloc_r>
   1318c:	tst.w	lr, #1
   13190:	bne.w	13048 <_realloc_r+0x58>
   13194:	ldr.w	r3, [r6, #-8]
   13198:	rsb	sl, r3, r8
   1319c:	ldr.w	r3, [sl, #4]
   131a0:	bic.w	ip, r3, #3
   131a4:	add.w	lr, r1, ip
   131a8:	cmp	lr, r2
   131aa:	blt.n	130c4 <_realloc_r+0xd4>
   131ac:	ldr	r3, [r0, #12]
   131ae:	ldr	r2, [r0, #8]
   131b0:	mov	r7, sl
   131b2:	str	r3, [r2, #12]
   131b4:	str	r2, [r3, #8]
   131b6:	ldr.w	r1, [r7, #8]!
   131ba:	ldr.w	r3, [sl, #12]
   131be:	str	r3, [r1, #12]
   131c0:	subs	r2, r4, #4
   131c2:	cmp	r2, #36	; 0x24
   131c4:	str	r1, [r3, #8]
   131c6:	bhi.w	132fc <_realloc_r+0x30c>
   131ca:	cmp	r2, #19
   131cc:	bls.n	13294 <_realloc_r+0x2a4>
   131ce:	ldr	r3, [r6, #0]
   131d0:	str.w	r3, [sl, #8]
   131d4:	ldr	r3, [r6, #4]
   131d6:	str.w	r3, [sl, #12]
   131da:	cmp	r2, #27
   131dc:	bhi.w	13320 <_realloc_r+0x330>
   131e0:	adds	r6, #8
   131e2:	add.w	r3, sl, #16
   131e6:	b.n	13296 <_realloc_r+0x2a6>
   131e8:	bic.w	fp, r1, #3
   131ec:	add	fp, r4
   131ee:	add.w	r0, r5, #16
   131f2:	cmp	fp, r0
   131f4:	bge.n	132aa <_realloc_r+0x2ba>
   131f6:	tst.w	lr, #1
   131fa:	bne.w	13048 <_realloc_r+0x58>
   131fe:	ldr.w	r1, [r6, #-8]
   13202:	rsb	sl, r1, r8
   13206:	ldr.w	r1, [sl, #4]
   1320a:	bic.w	ip, r1, #3
   1320e:	add	fp, ip
   13210:	cmp	r0, fp
   13212:	bgt.w	130c4 <_realloc_r+0xd4>
   13216:	mov	r7, sl
   13218:	ldr.w	r1, [sl, #12]
   1321c:	ldr.w	r0, [r7, #8]!
   13220:	subs	r2, r4, #4
   13222:	cmp	r2, #36	; 0x24
   13224:	str	r1, [r0, #12]
   13226:	str	r0, [r1, #8]
   13228:	bhi.w	13394 <_realloc_r+0x3a4>
   1322c:	cmp	r2, #19
   1322e:	bls.w	1337c <_realloc_r+0x38c>
   13232:	ldr	r1, [r6, #0]
   13234:	str.w	r1, [sl, #8]
   13238:	ldr	r1, [r6, #4]
   1323a:	str.w	r1, [sl, #12]
   1323e:	cmp	r2, #27
   13240:	bhi.w	133a2 <_realloc_r+0x3b2>
   13244:	adds	r6, #8
   13246:	add.w	r2, sl, #16
   1324a:	ldr	r1, [r6, #0]
   1324c:	str	r1, [r2, #0]
   1324e:	ldr	r1, [r6, #4]
   13250:	str	r1, [r2, #4]
   13252:	ldr	r1, [r6, #8]
   13254:	str	r1, [r2, #8]
   13256:	add.w	r1, sl, r5
   1325a:	rsb	r2, r5, fp
   1325e:	orr.w	r2, r2, #1
   13262:	str	r1, [r3, #8]
   13264:	str	r2, [r1, #4]
   13266:	ldr.w	r3, [sl, #4]
   1326a:	and.w	r3, r3, #1
   1326e:	orrs	r5, r3
   13270:	mov	r0, r9
   13272:	str.w	r5, [sl, #4]
   13276:	bl	12fec <__malloc_unlock>
   1327a:	mov	r0, r7
   1327c:	b.n	13138 <_realloc_r+0x148>
   1327e:	ldr	r3, [r6, #0]
   13280:	str	r3, [r0, #0]
   13282:	ldr	r3, [r6, #4]
   13284:	str	r3, [r0, #4]
   13286:	cmp	r2, #27
   13288:	bhi.n	132da <_realloc_r+0x2ea>
   1328a:	add.w	r3, r0, #8
   1328e:	add.w	r2, r6, #8
   13292:	b.n	1307a <_realloc_r+0x8a>
   13294:	mov	r3, r7
   13296:	ldr	r2, [r6, #0]
   13298:	str	r2, [r3, #0]
   1329a:	ldr	r2, [r6, #4]
   1329c:	str	r2, [r3, #4]
   1329e:	ldr	r2, [r6, #8]
   132a0:	str	r2, [r3, #8]
   132a2:	mov	r6, r7
   132a4:	mov	r4, lr
   132a6:	mov	r8, sl
   132a8:	b.n	13112 <_realloc_r+0x122>
   132aa:	add.w	r1, r8, r5
   132ae:	rsb	fp, r5, fp
   132b2:	orr.w	r2, fp, #1
   132b6:	str	r1, [r3, #8]
   132b8:	str	r2, [r1, #4]
   132ba:	ldr.w	r3, [r6, #-4]
   132be:	and.w	r3, r3, #1
   132c2:	orrs	r5, r3
   132c4:	mov	r0, r9
   132c6:	str.w	r5, [r6, #-4]
   132ca:	bl	12fec <__malloc_unlock>
   132ce:	mov	r0, r6
   132d0:	b.n	13138 <_realloc_r+0x148>
   132d2:	mov	r1, r6
   132d4:	bl	12e84 <memmove>
   132d8:	b.n	13086 <_realloc_r+0x96>
   132da:	ldr	r3, [r6, #8]
   132dc:	str	r3, [r0, #8]
   132de:	ldr	r3, [r6, #12]
   132e0:	str	r3, [r0, #12]
   132e2:	cmp	r2, #36	; 0x24
   132e4:	beq.n	13338 <_realloc_r+0x348>
   132e6:	add.w	r3, r0, #16
   132ea:	add.w	r2, r6, #16
   132ee:	b.n	1307a <_realloc_r+0x8a>
   132f0:	ldr.w	r3, [r0, #-4]
   132f4:	bic.w	r3, r3, #3
   132f8:	add	r4, r3
   132fa:	b.n	13112 <_realloc_r+0x122>
   132fc:	mov	r1, r6
   132fe:	mov	r0, r7
   13300:	mov	r4, lr
   13302:	mov	r8, sl
   13304:	bl	12e84 <memmove>
   13308:	mov	r6, r7
   1330a:	b.n	13112 <_realloc_r+0x122>
   1330c:	mov	r2, r7
   1330e:	b.n	13100 <_realloc_r+0x110>
   13310:	mov	r1, r6
   13312:	mov	r0, r7
   13314:	mov	r4, r3
   13316:	mov	r8, sl
   13318:	bl	12e84 <memmove>
   1331c:	mov	r6, r7
   1331e:	b.n	13112 <_realloc_r+0x122>
   13320:	ldr	r3, [r6, #8]
   13322:	str.w	r3, [sl, #16]
   13326:	ldr	r3, [r6, #12]
   13328:	str.w	r3, [sl, #20]
   1332c:	cmp	r2, #36	; 0x24
   1332e:	beq.n	13368 <_realloc_r+0x378>
   13330:	adds	r6, #16
   13332:	add.w	r3, sl, #24
   13336:	b.n	13296 <_realloc_r+0x2a6>
   13338:	ldr	r3, [r6, #16]
   1333a:	str	r3, [r0, #16]
   1333c:	ldr	r3, [r6, #20]
   1333e:	str	r3, [r0, #20]
   13340:	add.w	r2, r6, #24
   13344:	add.w	r3, r0, #24
   13348:	b.n	1307a <_realloc_r+0x8a>
   1334a:	nop
   1334c:	.word	0x1fff10b0
   13350:	ldr	r1, [r6, #8]
   13352:	str.w	r1, [sl, #16]
   13356:	ldr	r1, [r6, #12]
   13358:	str.w	r1, [sl, #20]
   1335c:	cmp	r2, #36	; 0x24
   1335e:	beq.n	13380 <_realloc_r+0x390>
   13360:	adds	r6, #16
   13362:	add.w	r2, sl, #24
   13366:	b.n	13100 <_realloc_r+0x110>
   13368:	ldr	r3, [r6, #16]
   1336a:	str.w	r3, [sl, #24]
   1336e:	ldr	r3, [r6, #20]
   13370:	str.w	r3, [sl, #28]
   13374:	adds	r6, #24
   13376:	add.w	r3, sl, #32
   1337a:	b.n	13296 <_realloc_r+0x2a6>
   1337c:	mov	r2, r7
   1337e:	b.n	1324a <_realloc_r+0x25a>
   13380:	ldr	r2, [r6, #16]
   13382:	str.w	r2, [sl, #24]
   13386:	ldr	r2, [r6, #20]
   13388:	str.w	r2, [sl, #28]
   1338c:	adds	r6, #24
   1338e:	add.w	r2, sl, #32
   13392:	b.n	13100 <_realloc_r+0x110>
   13394:	mov	r1, r6
   13396:	mov	r0, r7
   13398:	str	r3, [sp, #4]
   1339a:	bl	12e84 <memmove>
   1339e:	ldr	r3, [sp, #4]
   133a0:	b.n	13256 <_realloc_r+0x266>
   133a2:	ldr	r1, [r6, #8]
   133a4:	str.w	r1, [sl, #16]
   133a8:	ldr	r1, [r6, #12]
   133aa:	str.w	r1, [sl, #20]
   133ae:	cmp	r2, #36	; 0x24
   133b0:	beq.n	133ba <_realloc_r+0x3ca>
   133b2:	adds	r6, #16
   133b4:	add.w	r2, sl, #24
   133b8:	b.n	1324a <_realloc_r+0x25a>
   133ba:	ldr	r2, [r6, #16]
   133bc:	str.w	r2, [sl, #24]
   133c0:	ldr	r2, [r6, #20]
   133c2:	str.w	r2, [sl, #28]
   133c6:	adds	r6, #24
   133c8:	add.w	r2, sl, #32
   133cc:	b.n	1324a <_realloc_r+0x25a>
   133ce:	nop

000133d0 <_sbrk_r>:
   133d0:	push	{r3, r4, r5, lr}
   133d2:	ldr	r4, [pc, #28]	; (133f0 <_sbrk_r+0x20>)
   133d4:	movs	r3, #0
   133d6:	mov	r5, r0
   133d8:	mov	r0, r1
   133da:	str	r3, [r4, #0]
   133dc:	bl	100b0 <_sbrk>
   133e0:	adds	r3, r0, #1
   133e2:	beq.n	133e6 <_sbrk_r+0x16>
   133e4:	pop	{r3, r4, r5, pc}
   133e6:	ldr	r3, [r4, #0]
   133e8:	cmp	r3, #0
   133ea:	beq.n	133e4 <_sbrk_r+0x14>
   133ec:	str	r3, [r5, #0]
   133ee:	pop	{r3, r4, r5, pc}
   133f0:	.word	0x1fff2644

000133f4 <sprintf>:
   133f4:	push	{r1, r2, r3}
   133f6:	push	{r4, r5, r6, r7, lr}
   133f8:	sub	sp, #112	; 0x70
   133fa:	add	r3, sp, #132	; 0x84
   133fc:	ldr	r1, [pc, #60]	; (1343c <sprintf+0x48>)
   133fe:	ldr.w	r2, [r3], #4
   13402:	str	r3, [sp, #4]
   13404:	mov	r5, r0
   13406:	mvn.w	r4, #2147483648	; 0x80000000
   1340a:	ldr	r0, [r1, #0]
   1340c:	str	r5, [sp, #8]
   1340e:	mov.w	r7, #520	; 0x208
   13412:	movw	r6, #65535	; 0xffff
   13416:	add	r1, sp, #8
   13418:	str	r5, [sp, #24]
   1341a:	strh.w	r7, [sp, #20]
   1341e:	str	r4, [sp, #16]
   13420:	str	r4, [sp, #28]
   13422:	strh.w	r6, [sp, #22]
   13426:	bl	13700 <_svfprintf_r>
   1342a:	ldr	r3, [sp, #8]
   1342c:	movs	r2, #0
   1342e:	strb	r2, [r3, #0]
   13430:	add	sp, #112	; 0x70
   13432:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13436:	add	sp, #12
   13438:	bx	lr
   1343a:	nop
   1343c:	.word	0x1fff0f40

00013440 <strcpy>:
   13440:	eor.w	r2, r0, r1
   13444:	mov	ip, r0
   13446:	tst.w	r2, #3
   1344a:	bne.n	134ec <strcpy+0xac>
   1344c:	tst.w	r1, #3
   13450:	bne.n	134b8 <strcpy+0x78>
   13452:	str.w	r4, [sp, #-4]!
   13456:	tst.w	r1, #4
   1345a:	ldr.w	r3, [r1], #4
   1345e:	beq.n	13478 <strcpy+0x38>
   13460:	sub.w	r2, r3, #16843009	; 0x1010101
   13464:	bics	r2, r3
   13466:	tst.w	r2, #2155905152	; 0x80808080
   1346a:	itt	eq
   1346c:	streq.w	r3, [ip], #4
   13470:	ldreq.w	r3, [r1], #4
   13474:	bne.n	134a4 <strcpy+0x64>
   13476:	nop
   13478:	ldr.w	r4, [r1], #4
   1347c:	sub.w	r2, r3, #16843009	; 0x1010101
   13480:	bics	r2, r3
   13482:	tst.w	r2, #2155905152	; 0x80808080
   13486:	sub.w	r2, r4, #16843009	; 0x1010101
   1348a:	bne.n	134a4 <strcpy+0x64>
   1348c:	str.w	r3, [ip], #4
   13490:	bics	r2, r4
   13492:	tst.w	r2, #2155905152	; 0x80808080
   13496:	itt	eq
   13498:	ldreq.w	r3, [r1], #4
   1349c:	streq.w	r4, [ip], #4
   134a0:	beq.n	13478 <strcpy+0x38>
   134a2:	mov	r3, r4
   134a4:	strb.w	r3, [ip], #1
   134a8:	tst.w	r3, #255	; 0xff
   134ac:	mov.w	r3, r3, ror #8
   134b0:	bne.n	134a4 <strcpy+0x64>
   134b2:	ldr.w	r4, [sp], #4
   134b6:	bx	lr
   134b8:	tst.w	r1, #1
   134bc:	beq.n	134cc <strcpy+0x8c>
   134be:	ldrb.w	r2, [r1], #1
   134c2:	strb.w	r2, [ip], #1
   134c6:	cmp	r2, #0
   134c8:	it	eq
   134ca:	bxeq	lr
   134cc:	tst.w	r1, #2
   134d0:	beq.n	13452 <strcpy+0x12>
   134d2:	ldrh.w	r2, [r1], #2
   134d6:	tst.w	r2, #255	; 0xff
   134da:	itet	ne
   134dc:	strhne.w	r2, [ip], #2
   134e0:	strbeq.w	r2, [ip]
   134e4:	tstne.w	r2, #65280	; 0xff00
   134e8:	bne.n	13452 <strcpy+0x12>
   134ea:	bx	lr
   134ec:	ldrb.w	r2, [r1], #1
   134f0:	strb.w	r2, [ip], #1
   134f4:	cmp	r2, #0
   134f6:	bne.n	134ec <strcpy+0xac>
   134f8:	bx	lr
   134fa:	nop

000134fc <strlcat>:
   134fc:	push	{r4, r5, r6, lr}
   134fe:	cbz	r2, 1353e <strlcat+0x42>
   13500:	ldrb	r6, [r0, #0]
   13502:	cbz	r6, 1354a <strlcat+0x4e>
   13504:	adds	r3, r0, #1
   13506:	adds	r6, r0, r2
   13508:	b.n	13510 <strlcat+0x14>
   1350a:	ldrb	r5, [r3, #0]
   1350c:	adds	r3, #1
   1350e:	cbz	r5, 13516 <strlcat+0x1a>
   13510:	cmp	r6, r3
   13512:	mov	r4, r3
   13514:	bne.n	1350a <strlcat+0xe>
   13516:	subs	r6, r4, r0
   13518:	subs	r2, r2, r6
   1351a:	beq.n	13540 <strlcat+0x44>
   1351c:	ldrb	r3, [r1, #0]
   1351e:	mov	r5, r1
   13520:	cbz	r3, 13536 <strlcat+0x3a>
   13522:	cmp	r2, #1
   13524:	beq.n	1352c <strlcat+0x30>
   13526:	strb	r3, [r4, #0]
   13528:	subs	r2, #1
   1352a:	adds	r4, #1
   1352c:	ldrb.w	r3, [r5, #1]!
   13530:	cmp	r3, #0
   13532:	bne.n	13522 <strlcat+0x26>
   13534:	subs	r3, r5, r1
   13536:	movs	r2, #0
   13538:	strb	r2, [r4, #0]
   1353a:	adds	r0, r6, r3
   1353c:	pop	{r4, r5, r6, pc}
   1353e:	mov	r6, r2
   13540:	mov	r0, r1
   13542:	bl	13580 <strlen>
   13546:	add	r0, r6
   13548:	pop	{r4, r5, r6, pc}
   1354a:	mov	r4, r0
   1354c:	b.n	1351c <strlcat+0x20>
   1354e:	nop

00013550 <strlcpy>:
   13550:	push	{r4}
   13552:	mov	r3, r1
   13554:	cbz	r2, 1356a <strlcpy+0x1a>
   13556:	b.n	13562 <strlcpy+0x12>
   13558:	ldrb.w	r4, [r3], #1
   1355c:	strb.w	r4, [r0], #1
   13560:	cbz	r4, 13572 <strlcpy+0x22>
   13562:	subs	r2, #1
   13564:	bne.n	13558 <strlcpy+0x8>
   13566:	movs	r2, #0
   13568:	strb	r2, [r0, #0]
   1356a:	ldrb.w	r2, [r3], #1
   1356e:	cmp	r2, #0
   13570:	bne.n	1356a <strlcpy+0x1a>
   13572:	subs	r0, r3, r1
   13574:	subs	r0, #1
   13576:	ldr.w	r4, [sp], #4
   1357a:	bx	lr
   1357c:			; <UNDEFINED> instruction: 0xffffffff

00013580 <strlen>:
   13580:	pld	[r0]
   13584:	strd	r4, r5, [sp, #-8]!
   13588:	bic.w	r1, r0, #7
   1358c:	mvn.w	ip, #0
   13590:	ands.w	r4, r0, #7
   13594:	pld	[r1, #32]
   13598:	bne.w	1362e <strlen+0xae>
   1359c:	mov.w	r4, #0
   135a0:	mvn.w	r0, #7
   135a4:	ldrd	r2, r3, [r1]
   135a8:	pld	[r1, #64]	; 0x40
   135ac:	add.w	r0, r0, #8
   135b0:	uadd8	r2, r2, ip
   135b4:	sel	r2, r4, ip
   135b8:	uadd8	r3, r3, ip
   135bc:	sel	r3, r2, ip
   135c0:	cbnz	r3, 13616 <strlen+0x96>
   135c2:	ldrd	r2, r3, [r1, #8]
   135c6:	uadd8	r2, r2, ip
   135ca:	add.w	r0, r0, #8
   135ce:	sel	r2, r4, ip
   135d2:	uadd8	r3, r3, ip
   135d6:	sel	r3, r2, ip
   135da:	cbnz	r3, 13616 <strlen+0x96>
   135dc:	ldrd	r2, r3, [r1, #16]
   135e0:	uadd8	r2, r2, ip
   135e4:	add.w	r0, r0, #8
   135e8:	sel	r2, r4, ip
   135ec:	uadd8	r3, r3, ip
   135f0:	sel	r3, r2, ip
   135f4:	cbnz	r3, 13616 <strlen+0x96>
   135f6:	ldrd	r2, r3, [r1, #24]
   135fa:	add.w	r1, r1, #32
   135fe:	uadd8	r2, r2, ip
   13602:	add.w	r0, r0, #8
   13606:	sel	r2, r4, ip
   1360a:	uadd8	r3, r3, ip
   1360e:	sel	r3, r2, ip
   13612:	cmp	r3, #0
   13614:	beq.n	135a4 <strlen+0x24>
   13616:	cmp	r2, #0
   13618:	itt	eq
   1361a:	addeq	r0, #4
   1361c:	moveq	r2, r3
   1361e:	rev	r2, r2
   13620:	clz	r2, r2
   13624:	ldrd	r4, r5, [sp], #8
   13628:	add.w	r0, r0, r2, lsr #3
   1362c:	bx	lr
   1362e:	ldrd	r2, r3, [r1]
   13632:	and.w	r5, r4, #3
   13636:	rsb	r0, r4, #0
   1363a:	mov.w	r5, r5, lsl #3
   1363e:	tst.w	r4, #4
   13642:	pld	[r1, #64]	; 0x40
   13646:	lsl.w	r5, ip, r5
   1364a:	orn	r2, r2, r5
   1364e:	itt	ne
   13650:	ornne	r3, r3, r5
   13654:	movne	r2, ip
   13656:	mov.w	r4, #0
   1365a:	b.n	135b0 <strlen+0x30>

0001365c <strncmp>:
   1365c:	cmp	r2, #0
   1365e:	beq.n	136e4 <strncmp+0x88>
   13660:	orr.w	r3, r0, r1
   13664:	ands.w	r3, r3, #3
   13668:	push	{r4, r5, r6, r7}
   1366a:	bne.n	136b8 <strncmp+0x5c>
   1366c:	cmp	r2, #3
   1366e:	bls.n	136b8 <strncmp+0x5c>
   13670:	ldr	r4, [r0, #0]
   13672:	ldr	r5, [r1, #0]
   13674:	cmp	r4, r5
   13676:	bne.n	136b8 <strncmp+0x5c>
   13678:	subs	r2, #4
   1367a:	beq.n	136e8 <strncmp+0x8c>
   1367c:	sub.w	r5, r4, #16843009	; 0x1010101
   13680:	bic.w	r4, r5, r4
   13684:	tst.w	r4, #2155905152	; 0x80808080
   13688:	bne.n	136ee <strncmp+0x92>
   1368a:	adds	r7, r0, #4
   1368c:	adds	r5, r1, #4
   1368e:	b.n	136ac <strncmp+0x50>
   13690:	ldr.w	r3, [r7], #4
   13694:	ldr	r6, [r1, #0]
   13696:	sub.w	r4, r3, #16843009	; 0x1010101
   1369a:	cmp	r3, r6
   1369c:	bic.w	r4, r4, r3
   136a0:	bne.n	136b8 <strncmp+0x5c>
   136a2:	subs	r2, #4
   136a4:	beq.n	136e8 <strncmp+0x8c>
   136a6:	tst.w	r4, #2155905152	; 0x80808080
   136aa:	bne.n	136f4 <strncmp+0x98>
   136ac:	cmp	r2, #3
   136ae:	mov	r1, r5
   136b0:	mov	r0, r7
   136b2:	add.w	r5, r5, #4
   136b6:	bhi.n	13690 <strncmp+0x34>
   136b8:	ldrb	r3, [r0, #0]
   136ba:	ldrb	r4, [r1, #0]
   136bc:	cmp	r4, r3
   136be:	add.w	r2, r2, #4294967295
   136c2:	bne.n	136de <strncmp+0x82>
   136c4:	cbz	r2, 136e8 <strncmp+0x8c>
   136c6:	cbnz	r4, 136ce <strncmp+0x72>
   136c8:	b.n	136f8 <strncmp+0x9c>
   136ca:	cbz	r2, 136e8 <strncmp+0x8c>
   136cc:	cbz	r3, 136ee <strncmp+0x92>
   136ce:	ldrb.w	r3, [r0, #1]!
   136d2:	ldrb.w	r4, [r1, #1]!
   136d6:	cmp	r3, r4
   136d8:	add.w	r2, r2, #4294967295
   136dc:	beq.n	136ca <strncmp+0x6e>
   136de:	subs	r0, r3, r4
   136e0:	pop	{r4, r5, r6, r7}
   136e2:	bx	lr
   136e4:	mov	r0, r2
   136e6:	bx	lr
   136e8:	mov	r0, r2
   136ea:	pop	{r4, r5, r6, r7}
   136ec:	bx	lr
   136ee:	mov	r0, r3
   136f0:	pop	{r4, r5, r6, r7}
   136f2:	bx	lr
   136f4:	movs	r0, #0
   136f6:	b.n	136e0 <strncmp+0x84>
   136f8:	mov	r0, r4
   136fa:	b.n	136e0 <strncmp+0x84>
   136fc:			; <UNDEFINED> instruction: 0xffffffff

00013700 <_svfprintf_r>:
   13700:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13704:	sub	sp, #260	; 0x104
   13706:	mov	r4, r1
   13708:	str	r1, [sp, #20]
   1370a:	mov	r5, r2
   1370c:	str	r3, [sp, #40]	; 0x28
   1370e:	str	r0, [sp, #24]
   13710:	bl	16248 <_localeconv_r>
   13714:	ldr	r3, [r0, #0]
   13716:	str	r3, [sp, #76]	; 0x4c
   13718:	mov	r0, r3
   1371a:	bl	13580 <strlen>
   1371e:	ldrh	r3, [r4, #12]
   13720:	str	r0, [sp, #72]	; 0x48
   13722:	lsls	r6, r3, #24
   13724:	bpl.n	1372e <_svfprintf_r+0x2e>
   13726:	ldr	r3, [r4, #16]
   13728:	cmp	r3, #0
   1372a:	beq.w	14990 <_svfprintf_r+0x1290>
   1372e:	vldr	d7, [pc, #664]	; 139c8 <_svfprintf_r+0x2c8>
   13732:	movs	r3, #0
   13734:	vstr	d7, [sp, #64]	; 0x40
   13738:	str	r3, [sp, #56]	; 0x38
   1373a:	str	r3, [sp, #148]	; 0x94
   1373c:	str	r3, [sp, #144]	; 0x90
   1373e:	str	r3, [sp, #84]	; 0x54
   13740:	str	r3, [sp, #28]
   13742:	ldr.w	sl, [pc, #656]	; 139d4 <_svfprintf_r+0x2d4>
   13746:	add	r3, sp, #192	; 0xc0
   13748:	str	r3, [sp, #140]	; 0x8c
   1374a:	mov	r9, r3
   1374c:	mov	r8, r5
   1374e:	ldrb.w	r3, [r8]
   13752:	mov	r4, r8
   13754:	cbz	r3, 13792 <_svfprintf_r+0x92>
   13756:	cmp	r3, #37	; 0x25
   13758:	bne.n	13760 <_svfprintf_r+0x60>
   1375a:	b.n	13792 <_svfprintf_r+0x92>
   1375c:	cmp	r3, #37	; 0x25
   1375e:	beq.n	13768 <_svfprintf_r+0x68>
   13760:	ldrb.w	r3, [r4, #1]!
   13764:	cmp	r3, #0
   13766:	bne.n	1375c <_svfprintf_r+0x5c>
   13768:	rsb	r5, r8, r4
   1376c:	cbz	r5, 13792 <_svfprintf_r+0x92>
   1376e:	ldr	r3, [sp, #144]	; 0x90
   13770:	ldr	r2, [sp, #148]	; 0x94
   13772:	str.w	r8, [r9]
   13776:	adds	r3, #1
   13778:	add	r2, r5
   1377a:	cmp	r3, #7
   1377c:	str.w	r5, [r9, #4]
   13780:	str	r2, [sp, #148]	; 0x94
   13782:	str	r3, [sp, #144]	; 0x90
   13784:	bgt.w	138d4 <_svfprintf_r+0x1d4>
   13788:	add.w	r9, r9, #8
   1378c:	ldr	r3, [sp, #28]
   1378e:	add	r3, r5
   13790:	str	r3, [sp, #28]
   13792:	ldrb	r3, [r4, #0]
   13794:	cmp	r3, #0
   13796:	beq.w	138e6 <_svfprintf_r+0x1e6>
   1379a:	movs	r3, #0
   1379c:	mov	r2, r3
   1379e:	strb.w	r3, [sp, #111]	; 0x6f
   137a2:	mov	r1, r3
   137a4:	str	r3, [sp, #32]
   137a6:	str	r3, [sp, #12]
   137a8:	mov.w	fp, #4294967295
   137ac:	ldrb	r3, [r4, #1]
   137ae:	add.w	r8, r4, #1
   137b2:	mov	r5, fp
   137b4:	add.w	r8, r8, #1
   137b8:	sub.w	r0, r3, #32
   137bc:	cmp	r0, #88	; 0x58
   137be:	bhi.w	1402a <_svfprintf_r+0x92a>
   137c2:	tbh	[pc, r0, lsl #1]
   137c6:	.short	0x03a0
   137c8:	.word	0x04320432
   137cc:	.word	0x043203a8
   137d0:	.word	0x04320432
   137d4:	.word	0x04320432
   137d8:	.word	0x03af0432
   137dc:	.word	0x043203bd
   137e0:	.word	0x00e2005d
   137e4:	.word	0x01090432
   137e8:	.word	0x01100110
   137ec:	.word	0x01100110
   137f0:	.word	0x01100110
   137f4:	.word	0x01100110
   137f8:	.word	0x04320110
   137fc:	.word	0x04320432
   13800:	.word	0x04320432
   13804:	.word	0x04320432
   13808:	.word	0x04320432
   1380c:	.word	0x01200432
   13810:	.word	0x04320286
   13814:	.word	0x04320286
   13818:	.word	0x04320432
   1381c:	.word	0x02d40432
   13820:	.word	0x04320432
   13824:	.word	0x043202e5
   13828:	.word	0x04320432
   1382c:	.word	0x04320432
   13830:	.word	0x0432030f
   13834:	.word	0x033d0432
   13838:	.word	0x04320432
   1383c:	.word	0x04320432
   13840:	.word	0x04320432
   13844:	.word	0x04320432
   13848:	.word	0x04320432
   1384c:	.word	0x0391037e
   13850:	.word	0x02860286
   13854:	.word	0x03990286
   13858:	.word	0x04320391
   1385c:	.word	0x04070432
   13860:	.word	0x04120432
   13864:	.word	0x006400a3
   13868:	.word	0x043203c2
   1386c:	.word	0x043203c9
   13870:	.word	0x043203ea
   13874:	.word	0x03f20432
   13878:	ldr	r0, [sp, #32]
   1387a:	str	r3, [sp, #40]	; 0x28
   1387c:	negs	r0, r0
   1387e:	str	r0, [sp, #32]
   13880:	ldr	r3, [sp, #12]
   13882:	orr.w	r3, r3, #4
   13886:	str	r3, [sp, #12]
   13888:	ldrb.w	r3, [r8]
   1388c:	b.n	137b4 <_svfprintf_r+0xb4>
   1388e:	ldr	r0, [sp, #40]	; 0x28
   13890:	mov	fp, r5
   13892:	movs	r1, #0
   13894:	ldr	r4, [r0, #0]
   13896:	strb.w	r1, [sp, #111]	; 0x6f
   1389a:	adds	r7, r0, #4
   1389c:	ldr	r0, [sp, #12]
   1389e:	movs	r3, #48	; 0x30
   138a0:	movs	r2, #120	; 0x78
   138a2:	cmp	fp, r1
   138a4:	strb.w	r3, [sp, #112]	; 0x70
   138a8:	mov.w	r5, #0
   138ac:	strb.w	r2, [sp, #113]	; 0x71
   138b0:	orr.w	r3, r0, #2
   138b4:	blt.w	14064 <_svfprintf_r+0x964>
   138b8:	bic.w	r3, r0, #128	; 0x80
   138bc:	orr.w	r3, r3, #2
   138c0:	str	r3, [sp, #12]
   138c2:	orrs.w	r3, r4, r5
   138c6:	str	r7, [sp, #40]	; 0x28
   138c8:	beq.w	14010 <_svfprintf_r+0x910>
   138cc:	mov	r7, r1
   138ce:	str	r2, [sp, #52]	; 0x34
   138d0:	ldr	r0, [pc, #252]	; (139d0 <_svfprintf_r+0x2d0>)
   138d2:	b.n	13ea2 <_svfprintf_r+0x7a2>
   138d4:	add	r2, sp, #140	; 0x8c
   138d6:	ldr	r1, [sp, #20]
   138d8:	ldr	r0, [sp, #24]
   138da:	bl	16888 <__ssprint_r>
   138de:	cbnz	r0, 138f4 <_svfprintf_r+0x1f4>
   138e0:	add.w	r9, sp, #192	; 0xc0
   138e4:	b.n	1378c <_svfprintf_r+0x8c>
   138e6:	ldr	r3, [sp, #148]	; 0x94
   138e8:	cbz	r3, 138f4 <_svfprintf_r+0x1f4>
   138ea:	ldr	r0, [sp, #24]
   138ec:	ldr	r1, [sp, #20]
   138ee:	add	r2, sp, #140	; 0x8c
   138f0:	bl	16888 <__ssprint_r>
   138f4:	ldr	r3, [sp, #20]
   138f6:	ldrh	r3, [r3, #12]
   138f8:	tst.w	r3, #64	; 0x40
   138fc:	ldr	r3, [sp, #28]
   138fe:	it	ne
   13900:	movne.w	r3, #4294967295
   13904:	mov	r0, r3
   13906:	add	sp, #260	; 0x104
   13908:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1390c:	str	r3, [sp, #52]	; 0x34
   1390e:	mov	fp, r5
   13910:	cmp	r2, #0
   13912:	bne.w	14d7c <_svfprintf_r+0x167c>
   13916:	ldr	r2, [sp, #12]
   13918:	ands.w	r3, r2, #32
   1391c:	beq.w	13dac <_svfprintf_r+0x6ac>
   13920:	ldr	r7, [sp, #40]	; 0x28
   13922:	adds	r7, #7
   13924:	bic.w	r3, r7, #7
   13928:	movs	r7, #0
   1392a:	add.w	r1, r3, #8
   1392e:	cmp	fp, r7
   13930:	str	r1, [sp, #40]	; 0x28
   13932:	ldrd	r4, r5, [r3]
   13936:	strb.w	r7, [sp, #111]	; 0x6f
   1393a:	blt.w	14802 <_svfprintf_r+0x1102>
   1393e:	bic.w	r3, r2, #128	; 0x80
   13942:	str	r3, [sp, #12]
   13944:	orrs.w	r3, r4, r5
   13948:	beq.w	14054 <_svfprintf_r+0x954>
   1394c:	add	r6, sp, #192	; 0xc0
   1394e:	lsrs	r2, r4, #3
   13950:	orr.w	r2, r2, r5, lsl #29
   13954:	lsrs	r1, r5, #3
   13956:	and.w	r3, r4, #7
   1395a:	mov	r5, r1
   1395c:	mov	r4, r2
   1395e:	adds	r3, #48	; 0x30
   13960:	orrs.w	r2, r4, r5
   13964:	strb.w	r3, [r6, #-1]!
   13968:	bne.n	1394e <_svfprintf_r+0x24e>
   1396a:	ldr	r2, [sp, #12]
   1396c:	lsls	r1, r2, #31
   1396e:	bpl.w	13a90 <_svfprintf_r+0x390>
   13972:	cmp	r3, #48	; 0x30
   13974:	beq.w	13a90 <_svfprintf_r+0x390>
   13978:	movs	r2, #48	; 0x30
   1397a:	subs	r3, r6, #1
   1397c:	strb.w	r2, [r6, #-1]
   13980:	add	r2, sp, #192	; 0xc0
   13982:	subs	r2, r2, r3
   13984:	str	r2, [sp, #36]	; 0x24
   13986:	mov	r6, r3
   13988:	b.n	13a96 <_svfprintf_r+0x396>
   1398a:	ldrb.w	r3, [r8]
   1398e:	cmp	r3, #42	; 0x2a
   13990:	add.w	r4, r8, #1
   13994:	beq.w	14d60 <_svfprintf_r+0x1660>
   13998:	sub.w	r0, r3, #48	; 0x30
   1399c:	cmp	r0, #9
   1399e:	it	ls
   139a0:	movls	r5, #0
   139a2:	bhi.w	14cb2 <_svfprintf_r+0x15b2>
   139a6:	ldrb.w	r3, [r4], #1
   139aa:	add.w	r5, r5, r5, lsl #2
   139ae:	add.w	r5, r0, r5, lsl #1
   139b2:	sub.w	r0, r3, #48	; 0x30
   139b6:	cmp	r0, #9
   139b8:	bls.n	139a6 <_svfprintf_r+0x2a6>
   139ba:	orr.w	r5, r5, r5, asr #31
   139be:	mov	r8, r4
   139c0:	b.n	137b8 <_svfprintf_r+0xb8>
   139c2:	nop
   139c4:	nop.w
	...
   139d0:	.word	0x00017744
   139d4:	.word	0x00017710
   139d8:	ldr	r3, [sp, #12]
   139da:	orr.w	r3, r3, #128	; 0x80
   139de:	str	r3, [sp, #12]
   139e0:	ldrb.w	r3, [r8]
   139e4:	b.n	137b4 <_svfprintf_r+0xb4>
   139e6:	sub.w	r0, r3, #48	; 0x30
   139ea:	movs	r3, #0
   139ec:	mov	r4, r3
   139ee:	ldrb.w	r3, [r8], #1
   139f2:	add.w	r4, r4, r4, lsl #2
   139f6:	add.w	r4, r0, r4, lsl #1
   139fa:	sub.w	r0, r3, #48	; 0x30
   139fe:	cmp	r0, #9
   13a00:	bls.n	139ee <_svfprintf_r+0x2ee>
   13a02:	str	r4, [sp, #32]
   13a04:	b.n	137b8 <_svfprintf_r+0xb8>
   13a06:	str	r3, [sp, #52]	; 0x34
   13a08:	mov	fp, r5
   13a0a:	cmp	r2, #0
   13a0c:	bne.w	14d98 <_svfprintf_r+0x1698>
   13a10:	ldr	r3, [sp, #12]
   13a12:	orr.w	r3, r3, #16
   13a16:	str	r3, [sp, #12]
   13a18:	ldr	r3, [sp, #12]
   13a1a:	lsls	r4, r3, #26
   13a1c:	bpl.w	1448e <_svfprintf_r+0xd8e>
   13a20:	ldr	r7, [sp, #40]	; 0x28
   13a22:	adds	r7, #7
   13a24:	bic.w	r7, r7, #7
   13a28:	ldrd	r2, r3, [r7]
   13a2c:	add.w	r1, r7, #8
   13a30:	str	r1, [sp, #40]	; 0x28
   13a32:	mov	r4, r2
   13a34:	mov	r5, r3
   13a36:	cmp	r2, #0
   13a38:	sbcs.w	r3, r3, #0
   13a3c:	blt.w	14504 <_svfprintf_r+0xe04>
   13a40:	cmp.w	fp, #0
   13a44:	ldrb.w	r7, [sp, #111]	; 0x6f
   13a48:	blt.w	144ca <_svfprintf_r+0xdca>
   13a4c:	ldr	r3, [sp, #12]
   13a4e:	bic.w	r3, r3, #128	; 0x80
   13a52:	str	r3, [sp, #12]
   13a54:	orrs.w	r3, r4, r5
   13a58:	beq.w	13e2c <_svfprintf_r+0x72c>
   13a5c:	cmp	r5, #0
   13a5e:	it	eq
   13a60:	cmpeq	r4, #10
   13a62:	bcc.w	13e36 <_svfprintf_r+0x736>
   13a66:	add	r6, sp, #192	; 0xc0
   13a68:	mov	r0, r4
   13a6a:	mov	r1, r5
   13a6c:	movs	r2, #10
   13a6e:	movs	r3, #0
   13a70:	bl	123c0 <__aeabi_uldivmod>
   13a74:	adds	r2, #48	; 0x30
   13a76:	strb.w	r2, [r6, #-1]!
   13a7a:	mov	r0, r4
   13a7c:	mov	r1, r5
   13a7e:	movs	r3, #0
   13a80:	movs	r2, #10
   13a82:	bl	123c0 <__aeabi_uldivmod>
   13a86:	mov	r4, r0
   13a88:	mov	r5, r1
   13a8a:	orrs.w	r3, r4, r5
   13a8e:	bne.n	13a68 <_svfprintf_r+0x368>
   13a90:	add	r3, sp, #192	; 0xc0
   13a92:	subs	r3, r3, r6
   13a94:	str	r3, [sp, #36]	; 0x24
   13a96:	ldr	r3, [sp, #36]	; 0x24
   13a98:	cmp	r3, fp
   13a9a:	it	lt
   13a9c:	movlt	r3, fp
   13a9e:	str	r3, [sp, #16]
   13aa0:	movs	r3, #0
   13aa2:	str	r3, [sp, #60]	; 0x3c
   13aa4:	cbz	r7, 13aac <_svfprintf_r+0x3ac>
   13aa6:	ldr	r3, [sp, #16]
   13aa8:	adds	r3, #1
   13aaa:	str	r3, [sp, #16]
   13aac:	ldr	r3, [sp, #12]
   13aae:	ands.w	r3, r3, #2
   13ab2:	str	r3, [sp, #44]	; 0x2c
   13ab4:	beq.n	13abc <_svfprintf_r+0x3bc>
   13ab6:	ldr	r3, [sp, #16]
   13ab8:	adds	r3, #2
   13aba:	str	r3, [sp, #16]
   13abc:	ldr	r3, [sp, #12]
   13abe:	ands.w	r3, r3, #132	; 0x84
   13ac2:	str	r3, [sp, #48]	; 0x30
   13ac4:	bne.w	1407e <_svfprintf_r+0x97e>
   13ac8:	ldr	r3, [sp, #32]
   13aca:	ldr	r2, [sp, #16]
   13acc:	subs	r5, r3, r2
   13ace:	cmp	r5, #0
   13ad0:	ble.w	1407e <_svfprintf_r+0x97e>
   13ad4:	cmp	r5, #16
   13ad6:	ldr	r1, [sp, #148]	; 0x94
   13ad8:	ldr	r2, [sp, #144]	; 0x90
   13ada:	ldr	r7, [pc, #672]	; (13d7c <_svfprintf_r+0x67c>)
   13adc:	ble.n	13b2e <_svfprintf_r+0x42e>
   13ade:	str	r6, [sp, #80]	; 0x50
   13ae0:	mov	r0, r9
   13ae2:	movs	r4, #16
   13ae4:	mov	r9, r7
   13ae6:	ldr	r6, [sp, #20]
   13ae8:	mov	r7, r5
   13aea:	ldr	r5, [sp, #24]
   13aec:	b.n	13af8 <_svfprintf_r+0x3f8>
   13aee:	subs	r7, #16
   13af0:	cmp	r7, #16
   13af2:	add.w	r0, r0, #8
   13af6:	ble.n	13b26 <_svfprintf_r+0x426>
   13af8:	adds	r2, #1
   13afa:	ldr	r3, [pc, #640]	; (13d7c <_svfprintf_r+0x67c>)
   13afc:	str	r2, [sp, #144]	; 0x90
   13afe:	adds	r1, #16
   13b00:	cmp	r2, #7
   13b02:	str	r1, [sp, #148]	; 0x94
   13b04:	stmia.w	r0, {r3, r4}
   13b08:	ble.n	13aee <_svfprintf_r+0x3ee>
   13b0a:	add	r2, sp, #140	; 0x8c
   13b0c:	mov	r1, r6
   13b0e:	mov	r0, r5
   13b10:	bl	16888 <__ssprint_r>
   13b14:	cmp	r0, #0
   13b16:	bne.w	138f4 <_svfprintf_r+0x1f4>
   13b1a:	subs	r7, #16
   13b1c:	cmp	r7, #16
   13b1e:	ldr	r1, [sp, #148]	; 0x94
   13b20:	ldr	r2, [sp, #144]	; 0x90
   13b22:	add	r0, sp, #192	; 0xc0
   13b24:	bgt.n	13af8 <_svfprintf_r+0x3f8>
   13b26:	ldr	r6, [sp, #80]	; 0x50
   13b28:	mov	r5, r7
   13b2a:	mov	r7, r9
   13b2c:	mov	r9, r0
   13b2e:	adds	r2, #1
   13b30:	adds	r4, r5, r1
   13b32:	cmp	r2, #7
   13b34:	str	r4, [sp, #148]	; 0x94
   13b36:	str	r2, [sp, #144]	; 0x90
   13b38:	str.w	r7, [r9]
   13b3c:	str.w	r5, [r9, #4]
   13b40:	bgt.w	1439e <_svfprintf_r+0xc9e>
   13b44:	ldrb.w	r7, [sp, #111]	; 0x6f
   13b48:	add.w	r9, r9, #8
   13b4c:	cbz	r7, 13b6c <_svfprintf_r+0x46c>
   13b4e:	ldr	r3, [sp, #144]	; 0x90
   13b50:	adds	r3, #1
   13b52:	adds	r4, #1
   13b54:	add.w	r1, sp, #111	; 0x6f
   13b58:	movs	r2, #1
   13b5a:	cmp	r3, #7
   13b5c:	str	r4, [sp, #148]	; 0x94
   13b5e:	str	r3, [sp, #144]	; 0x90
   13b60:	stmia.w	r9, {r1, r2}
   13b64:	bgt.w	142b2 <_svfprintf_r+0xbb2>
   13b68:	add.w	r9, r9, #8
   13b6c:	ldr	r3, [sp, #44]	; 0x2c
   13b6e:	cbz	r3, 13b8c <_svfprintf_r+0x48c>
   13b70:	ldr	r3, [sp, #144]	; 0x90
   13b72:	adds	r3, #1
   13b74:	adds	r4, #2
   13b76:	add	r1, sp, #112	; 0x70
   13b78:	movs	r2, #2
   13b7a:	cmp	r3, #7
   13b7c:	str	r4, [sp, #148]	; 0x94
   13b7e:	str	r3, [sp, #144]	; 0x90
   13b80:	stmia.w	r9, {r1, r2}
   13b84:	bgt.w	142ca <_svfprintf_r+0xbca>
   13b88:	add.w	r9, r9, #8
   13b8c:	ldr	r3, [sp, #48]	; 0x30
   13b8e:	cmp	r3, #128	; 0x80
   13b90:	beq.w	14156 <_svfprintf_r+0xa56>
   13b94:	ldr	r3, [sp, #36]	; 0x24
   13b96:	rsb	r7, r3, fp
   13b9a:	cmp	r7, #0
   13b9c:	ble.n	13c06 <_svfprintf_r+0x506>
   13b9e:	ldr	r2, [pc, #480]	; (13d80 <_svfprintf_r+0x680>)
   13ba0:	ldr	r3, [sp, #144]	; 0x90
   13ba2:	str	r2, [sp, #44]	; 0x2c
   13ba4:	cmp	r7, #16
   13ba6:	ble.n	13bee <_svfprintf_r+0x4ee>
   13ba8:	mov	r2, r4
   13baa:	mov.w	fp, #16
   13bae:	ldr	r5, [sp, #24]
   13bb0:	ldr	r4, [sp, #20]
   13bb2:	b.n	13bbe <_svfprintf_r+0x4be>
   13bb4:	subs	r7, #16
   13bb6:	cmp	r7, #16
   13bb8:	add.w	r9, r9, #8
   13bbc:	ble.n	13bec <_svfprintf_r+0x4ec>
   13bbe:	adds	r3, #1
   13bc0:	adds	r2, #16
   13bc2:	cmp	r3, #7
   13bc4:	str	r2, [sp, #148]	; 0x94
   13bc6:	str	r3, [sp, #144]	; 0x90
   13bc8:	stmia.w	r9, {sl, fp}
   13bcc:	ble.n	13bb4 <_svfprintf_r+0x4b4>
   13bce:	add	r2, sp, #140	; 0x8c
   13bd0:	mov	r1, r4
   13bd2:	mov	r0, r5
   13bd4:	bl	16888 <__ssprint_r>
   13bd8:	cmp	r0, #0
   13bda:	bne.w	138f4 <_svfprintf_r+0x1f4>
   13bde:	subs	r7, #16
   13be0:	cmp	r7, #16
   13be2:	ldr	r2, [sp, #148]	; 0x94
   13be4:	ldr	r3, [sp, #144]	; 0x90
   13be6:	add.w	r9, sp, #192	; 0xc0
   13bea:	bgt.n	13bbe <_svfprintf_r+0x4be>
   13bec:	mov	r4, r2
   13bee:	adds	r3, #1
   13bf0:	ldr	r2, [sp, #44]	; 0x2c
   13bf2:	str	r3, [sp, #144]	; 0x90
   13bf4:	add	r4, r7
   13bf6:	cmp	r3, #7
   13bf8:	str	r4, [sp, #148]	; 0x94
   13bfa:	stmia.w	r9, {r2, r7}
   13bfe:	bgt.w	1429a <_svfprintf_r+0xb9a>
   13c02:	add.w	r9, r9, #8
   13c06:	ldr	r3, [sp, #12]
   13c08:	lsls	r2, r3, #23
   13c0a:	bmi.w	14082 <_svfprintf_r+0x982>
   13c0e:	ldr	r3, [sp, #144]	; 0x90
   13c10:	ldr	r1, [sp, #36]	; 0x24
   13c12:	str.w	r6, [r9]
   13c16:	adds	r3, #1
   13c18:	add	r4, r1
   13c1a:	cmp	r3, #7
   13c1c:	str	r4, [sp, #148]	; 0x94
   13c1e:	str.w	r1, [r9, #4]
   13c22:	str	r3, [sp, #144]	; 0x90
   13c24:	bgt.w	1426e <_svfprintf_r+0xb6e>
   13c28:	add.w	r9, r9, #8
   13c2c:	ldr	r3, [sp, #12]
   13c2e:	lsls	r1, r3, #29
   13c30:	bpl.n	13cb2 <_svfprintf_r+0x5b2>
   13c32:	ldr	r3, [sp, #32]
   13c34:	ldr	r2, [sp, #16]
   13c36:	subs	r5, r3, r2
   13c38:	cmp	r5, #0
   13c3a:	ble.n	13cb2 <_svfprintf_r+0x5b2>
   13c3c:	cmp	r5, #16
   13c3e:	ldr	r3, [sp, #144]	; 0x90
   13c40:	ldr	r7, [pc, #312]	; (13d7c <_svfprintf_r+0x67c>)
   13c42:	ble.n	13c8c <_svfprintf_r+0x58c>
   13c44:	mov	r2, r4
   13c46:	movs	r6, #16
   13c48:	ldr.w	fp, [sp, #24]
   13c4c:	ldr	r4, [sp, #20]
   13c4e:	b.n	13c5a <_svfprintf_r+0x55a>
   13c50:	subs	r5, #16
   13c52:	cmp	r5, #16
   13c54:	add.w	r9, r9, #8
   13c58:	ble.n	13c8a <_svfprintf_r+0x58a>
   13c5a:	adds	r3, #1
   13c5c:	ldr	r1, [pc, #284]	; (13d7c <_svfprintf_r+0x67c>)
   13c5e:	str	r3, [sp, #144]	; 0x90
   13c60:	adds	r2, #16
   13c62:	cmp	r3, #7
   13c64:	str	r2, [sp, #148]	; 0x94
   13c66:	stmia.w	r9, {r1, r6}
   13c6a:	ble.n	13c50 <_svfprintf_r+0x550>
   13c6c:	add	r2, sp, #140	; 0x8c
   13c6e:	mov	r1, r4
   13c70:	mov	r0, fp
   13c72:	bl	16888 <__ssprint_r>
   13c76:	cmp	r0, #0
   13c78:	bne.w	138f4 <_svfprintf_r+0x1f4>
   13c7c:	subs	r5, #16
   13c7e:	cmp	r5, #16
   13c80:	ldr	r2, [sp, #148]	; 0x94
   13c82:	ldr	r3, [sp, #144]	; 0x90
   13c84:	add.w	r9, sp, #192	; 0xc0
   13c88:	bgt.n	13c5a <_svfprintf_r+0x55a>
   13c8a:	mov	r4, r2
   13c8c:	adds	r3, #1
   13c8e:	add	r4, r5
   13c90:	cmp	r3, #7
   13c92:	str	r4, [sp, #148]	; 0x94
   13c94:	str	r3, [sp, #144]	; 0x90
   13c96:	str.w	r7, [r9]
   13c9a:	str.w	r5, [r9, #4]
   13c9e:	ble.n	13cb2 <_svfprintf_r+0x5b2>
   13ca0:	add	r2, sp, #140	; 0x8c
   13ca2:	ldr	r1, [sp, #20]
   13ca4:	ldr	r0, [sp, #24]
   13ca6:	bl	16888 <__ssprint_r>
   13caa:	cmp	r0, #0
   13cac:	bne.w	138f4 <_svfprintf_r+0x1f4>
   13cb0:	ldr	r4, [sp, #148]	; 0x94
   13cb2:	ldr	r3, [sp, #28]
   13cb4:	ldr	r2, [sp, #32]
   13cb6:	ldr	r1, [sp, #16]
   13cb8:	cmp	r2, r1
   13cba:	ite	ge
   13cbc:	addge	r3, r3, r2
   13cbe:	addlt	r3, r3, r1
   13cc0:	str	r3, [sp, #28]
   13cc2:	cmp	r4, #0
   13cc4:	bne.w	14286 <_svfprintf_r+0xb86>
   13cc8:	movs	r3, #0
   13cca:	str	r3, [sp, #144]	; 0x90
   13ccc:	add.w	r9, sp, #192	; 0xc0
   13cd0:	b.n	1374e <_svfprintf_r+0x4e>
   13cd2:	str	r3, [sp, #52]	; 0x34
   13cd4:	mov	fp, r5
   13cd6:	cmp	r2, #0
   13cd8:	bne.w	14da0 <_svfprintf_r+0x16a0>
   13cdc:	ldr	r3, [sp, #12]
   13cde:	ldr	r7, [sp, #40]	; 0x28
   13ce0:	lsls	r2, r3, #28
   13ce2:	add.w	r7, r7, #7
   13ce6:	bpl.w	147d2 <_svfprintf_r+0x10d2>
   13cea:	bic.w	r3, r7, #7
   13cee:	vldr	d7, [r3]
   13cf2:	vstr	d7, [sp, #64]	; 0x40
   13cf6:	add.w	r2, r3, #8
   13cfa:	str	r2, [sp, #40]	; 0x28
   13cfc:	ldrd	r1, r2, [sp, #64]	; 0x40
   13d00:	bic.w	r3, r2, #2147483648	; 0x80000000
   13d04:	str	r1, [sp, #88]	; 0x58
   13d06:	str	r3, [sp, #92]	; 0x5c
   13d08:	ldrd	r4, r5, [sp, #88]	; 0x58
   13d0c:	mov.w	r2, #4294967295
   13d10:	mov	r0, r4
   13d12:	mov	r1, r5
   13d14:	ldr	r3, [pc, #108]	; (13d84 <_svfprintf_r+0x684>)
   13d16:	bl	12344 <__aeabi_dcmpun>
   13d1a:	cmp	r0, #0
   13d1c:	bne.w	146d4 <_svfprintf_r+0xfd4>
   13d20:	mov.w	r2, #4294967295
   13d24:	ldr	r3, [pc, #92]	; (13d84 <_svfprintf_r+0x684>)
   13d26:	mov	r0, r4
   13d28:	mov	r1, r5
   13d2a:	bl	12308 <__aeabi_dcmple>
   13d2e:	cmp	r0, #0
   13d30:	bne.w	146d4 <_svfprintf_r+0xfd4>
   13d34:	movs	r2, #0
   13d36:	movs	r3, #0
   13d38:	ldrd	r0, r1, [sp, #64]	; 0x40
   13d3c:	bl	122f4 <__aeabi_dcmplt>
   13d40:	cmp	r0, #0
   13d42:	bne.w	14bea <_svfprintf_r+0x14ea>
   13d46:	ldrb.w	r7, [sp, #111]	; 0x6f
   13d4a:	ldr	r6, [pc, #60]	; (13d88 <_svfprintf_r+0x688>)
   13d4c:	ldr	r3, [pc, #60]	; (13d8c <_svfprintf_r+0x68c>)
   13d4e:	ldr	r1, [sp, #12]
   13d50:	bic.w	r1, r1, #128	; 0x80
   13d54:	str	r1, [sp, #12]
   13d56:	ldr	r1, [sp, #52]	; 0x34
   13d58:	movs	r2, #3
   13d5a:	mov.w	fp, #0
   13d5e:	str	r2, [sp, #16]
   13d60:	cmp	r1, #71	; 0x47
   13d62:	it	le
   13d64:	movle	r6, r3
   13d66:	str	r2, [sp, #36]	; 0x24
   13d68:	str.w	fp, [sp, #60]	; 0x3c
   13d6c:	b.n	13aa4 <_svfprintf_r+0x3a4>
   13d6e:	ldr	r3, [sp, #12]
   13d70:	orr.w	r3, r3, #8
   13d74:	str	r3, [sp, #12]
   13d76:	ldrb.w	r3, [r8]
   13d7a:	b.n	137b4 <_svfprintf_r+0xb4>
   13d7c:	.word	0x00017760
   13d80:	.word	0x00017710
   13d84:	.word	0x7fefffff
   13d88:	.word	0x00017724
   13d8c:	.word	0x00017720
   13d90:	str	r3, [sp, #52]	; 0x34
   13d92:	mov	fp, r5
   13d94:	cmp	r2, #0
   13d96:	bne.w	14db8 <_svfprintf_r+0x16b8>
   13d9a:	ldr	r3, [sp, #12]
   13d9c:	orr.w	r3, r3, #16
   13da0:	str	r3, [sp, #12]
   13da2:	ldr	r2, [sp, #12]
   13da4:	ands.w	r3, r2, #32
   13da8:	bne.w	13920 <_svfprintf_r+0x220>
   13dac:	ldr	r1, [sp, #12]
   13dae:	ands.w	r2, r1, #16
   13db2:	beq.w	1466c <_svfprintf_r+0xf6c>
   13db6:	ldr	r0, [sp, #40]	; 0x28
   13db8:	strb.w	r3, [sp, #111]	; 0x6f
   13dbc:	cmp.w	fp, #0
   13dc0:	ldr	r4, [r0, #0]
   13dc2:	add.w	r7, r0, #4
   13dc6:	mov.w	r5, #0
   13dca:	blt.w	14800 <_svfprintf_r+0x1100>
   13dce:	mov	r2, r1
   13dd0:	bic.w	r2, r2, #128	; 0x80
   13dd4:	str	r2, [sp, #12]
   13dd6:	orrs.w	r2, r4, r5
   13dda:	str	r7, [sp, #40]	; 0x28
   13ddc:	beq.w	14054 <_svfprintf_r+0x954>
   13de0:	mov	r7, r3
   13de2:	b.n	1394c <_svfprintf_r+0x24c>
   13de4:	str	r3, [sp, #52]	; 0x34
   13de6:	mov	fp, r5
   13de8:	cmp	r2, #0
   13dea:	bne.w	14db0 <_svfprintf_r+0x16b0>
   13dee:	ldr	r3, [sp, #12]
   13df0:	orr.w	r3, r3, #16
   13df4:	str	r3, [sp, #12]
   13df6:	ldr	r2, [sp, #12]
   13df8:	ands.w	r3, r2, #32
   13dfc:	beq.w	14458 <_svfprintf_r+0xd58>
   13e00:	ldr	r7, [sp, #40]	; 0x28
   13e02:	adds	r7, #7
   13e04:	bic.w	r3, r7, #7
   13e08:	movs	r7, #0
   13e0a:	add.w	r1, r3, #8
   13e0e:	cmp	fp, r7
   13e10:	str	r1, [sp, #40]	; 0x28
   13e12:	ldrd	r4, r5, [r3]
   13e16:	strb.w	r7, [sp, #111]	; 0x6f
   13e1a:	blt.w	144ca <_svfprintf_r+0xdca>
   13e1e:	bic.w	r3, r2, #128	; 0x80
   13e22:	str	r3, [sp, #12]
   13e24:	orrs.w	r3, r4, r5
   13e28:	bne.w	13a5c <_svfprintf_r+0x35c>
   13e2c:	cmp.w	fp, #0
   13e30:	beq.w	1401e <_svfprintf_r+0x91e>
   13e34:	movs	r4, #0
   13e36:	add	r6, sp, #256	; 0x100
   13e38:	adds	r4, #48	; 0x30
   13e3a:	strb.w	r4, [r6, #-65]!
   13e3e:	b.n	13a90 <_svfprintf_r+0x390>
   13e40:	str	r3, [sp, #52]	; 0x34
   13e42:	mov	fp, r5
   13e44:	cmp	r2, #0
   13e46:	bne.w	14da8 <_svfprintf_r+0x16a8>
   13e4a:	ldr	r3, [sp, #12]
   13e4c:	ldr	r0, [pc, #700]	; (1410c <_svfprintf_r+0xa0c>)
   13e4e:	lsls	r5, r3, #26
   13e50:	bpl.w	13fbe <_svfprintf_r+0x8be>
   13e54:	ldr	r7, [sp, #40]	; 0x28
   13e56:	adds	r7, #7
   13e58:	bic.w	r3, r7, #7
   13e5c:	ldrd	r4, r5, [r3]
   13e60:	add.w	r2, r3, #8
   13e64:	str	r2, [sp, #40]	; 0x28
   13e66:	ldr	r2, [sp, #12]
   13e68:	ands.w	r7, r2, #1
   13e6c:	beq.w	142e2 <_svfprintf_r+0xbe2>
   13e70:	orrs.w	r3, r4, r5
   13e74:	beq.w	1487c <_svfprintf_r+0x117c>
   13e78:	ldrb.w	r2, [sp, #52]	; 0x34
   13e7c:	strb.w	r2, [sp, #113]	; 0x71
   13e80:	movs	r7, #0
   13e82:	ldr	r2, [sp, #12]
   13e84:	strb.w	r7, [sp, #111]	; 0x6f
   13e88:	movs	r3, #48	; 0x30
   13e8a:	cmp	fp, r7
   13e8c:	strb.w	r3, [sp, #112]	; 0x70
   13e90:	orr.w	r3, r2, #2
   13e94:	blt.w	14bf4 <_svfprintf_r+0x14f4>
   13e98:	bic.w	r3, r2, #128	; 0x80
   13e9c:	orr.w	r3, r3, #2
   13ea0:	str	r3, [sp, #12]
   13ea2:	add	r6, sp, #192	; 0xc0
   13ea4:	lsrs	r3, r4, #4
   13ea6:	and.w	r1, r4, #15
   13eaa:	orr.w	r3, r3, r5, lsl #28
   13eae:	lsrs	r2, r5, #4
   13eb0:	mov	r4, r3
   13eb2:	mov	r5, r2
   13eb4:	ldrb	r3, [r0, r1]
   13eb6:	strb.w	r3, [r6, #-1]!
   13eba:	orrs.w	r3, r4, r5
   13ebe:	bne.n	13ea4 <_svfprintf_r+0x7a4>
   13ec0:	b.n	13a90 <_svfprintf_r+0x390>
   13ec2:	ldr	r1, [sp, #40]	; 0x28
   13ec4:	str	r3, [sp, #52]	; 0x34
   13ec6:	ldr	r2, [r1, #0]
   13ec8:	strb.w	r2, [sp, #152]	; 0x98
   13ecc:	movs	r3, #0
   13ece:	mov	r2, r1
   13ed0:	mov	r7, r3
   13ed2:	strb.w	r3, [sp, #111]	; 0x6f
   13ed6:	adds	r2, #4
   13ed8:	movs	r3, #1
   13eda:	str	r3, [sp, #16]
   13edc:	mov	fp, r7
   13ede:	str	r7, [sp, #60]	; 0x3c
   13ee0:	str	r2, [sp, #40]	; 0x28
   13ee2:	str	r3, [sp, #36]	; 0x24
   13ee4:	add	r6, sp, #152	; 0x98
   13ee6:	b.n	13aac <_svfprintf_r+0x3ac>
   13ee8:	str	r3, [sp, #52]	; 0x34
   13eea:	mov	fp, r5
   13eec:	cmp	r2, #0
   13eee:	beq.w	13a18 <_svfprintf_r+0x318>
   13ef2:	strb.w	r1, [sp, #111]	; 0x6f
   13ef6:	b.n	13a18 <_svfprintf_r+0x318>
   13ef8:	ldr	r3, [sp, #12]
   13efa:	orr.w	r3, r3, #64	; 0x40
   13efe:	str	r3, [sp, #12]
   13f00:	ldrb.w	r3, [r8]
   13f04:	b.n	137b4 <_svfprintf_r+0xb4>
   13f06:	ldrb.w	r3, [r8]
   13f0a:	cmp	r1, #0
   13f0c:	bne.w	137b4 <_svfprintf_r+0xb4>
   13f10:	movs	r2, #1
   13f12:	movs	r1, #32
   13f14:	b.n	137b4 <_svfprintf_r+0xb4>
   13f16:	ldr	r3, [sp, #12]
   13f18:	orr.w	r3, r3, #1
   13f1c:	str	r3, [sp, #12]
   13f1e:	ldrb.w	r3, [r8]
   13f22:	b.n	137b4 <_svfprintf_r+0xb4>
   13f24:	ldr	r4, [sp, #40]	; 0x28
   13f26:	ldr	r3, [r4, #0]
   13f28:	str	r3, [sp, #32]
   13f2a:	mov	r0, r3
   13f2c:	cmp	r0, #0
   13f2e:	mov	r3, r4
   13f30:	add.w	r3, r3, #4
   13f34:	blt.w	13878 <_svfprintf_r+0x178>
   13f38:	str	r3, [sp, #40]	; 0x28
   13f3a:	ldrb.w	r3, [r8]
   13f3e:	b.n	137b4 <_svfprintf_r+0xb4>
   13f40:	ldrb.w	r3, [r8]
   13f44:	movs	r2, #1
   13f46:	movs	r1, #43	; 0x2b
   13f48:	b.n	137b4 <_svfprintf_r+0xb4>
   13f4a:	ldr	r3, [sp, #12]
   13f4c:	orr.w	r3, r3, #32
   13f50:	str	r3, [sp, #12]
   13f52:	ldrb.w	r3, [r8]
   13f56:	b.n	137b4 <_svfprintf_r+0xb4>
   13f58:	ldr	r2, [sp, #40]	; 0x28
   13f5a:	str	r3, [sp, #52]	; 0x34
   13f5c:	ldr	r6, [r2, #0]
   13f5e:	movs	r4, #0
   13f60:	strb.w	r4, [sp, #111]	; 0x6f
   13f64:	adds	r7, r2, #4
   13f66:	cmp	r6, #0
   13f68:	beq.w	14ba4 <_svfprintf_r+0x14a4>
   13f6c:	cmp	r5, #0
   13f6e:	blt.w	14a34 <_svfprintf_r+0x1334>
   13f72:	mov	r2, r5
   13f74:	mov	r1, r4
   13f76:	mov	r0, r6
   13f78:	bl	12d80 <memchr>
   13f7c:	cmp	r0, #0
   13f7e:	beq.w	14c48 <_svfprintf_r+0x1548>
   13f82:	subs	r3, r0, r6
   13f84:	str	r3, [sp, #36]	; 0x24
   13f86:	mov	fp, r4
   13f88:	bic.w	r3, r3, r3, asr #31
   13f8c:	str	r7, [sp, #40]	; 0x28
   13f8e:	str	r3, [sp, #16]
   13f90:	str.w	fp, [sp, #60]	; 0x3c
   13f94:	ldrb.w	r7, [sp, #111]	; 0x6f
   13f98:	b.n	13aa4 <_svfprintf_r+0x3a4>
   13f9a:	str	r3, [sp, #52]	; 0x34
   13f9c:	mov	fp, r5
   13f9e:	cmp	r2, #0
   13fa0:	beq.w	13df6 <_svfprintf_r+0x6f6>
   13fa4:	strb.w	r1, [sp, #111]	; 0x6f
   13fa8:	b.n	13df6 <_svfprintf_r+0x6f6>
   13faa:	str	r3, [sp, #52]	; 0x34
   13fac:	mov	fp, r5
   13fae:	cmp	r2, #0
   13fb0:	bne.w	14dd0 <_svfprintf_r+0x16d0>
   13fb4:	ldr	r3, [sp, #12]
   13fb6:	ldr	r0, [pc, #344]	; (14110 <_svfprintf_r+0xa10>)
   13fb8:	lsls	r5, r3, #26
   13fba:	bmi.w	13e54 <_svfprintf_r+0x754>
   13fbe:	ldr	r3, [sp, #12]
   13fc0:	lsls	r4, r3, #27
   13fc2:	bpl.w	14842 <_svfprintf_r+0x1142>
   13fc6:	ldr	r2, [sp, #40]	; 0x28
   13fc8:	mov	r3, r2
   13fca:	adds	r3, #4
   13fcc:	ldr	r4, [r2, #0]
   13fce:	str	r3, [sp, #40]	; 0x28
   13fd0:	movs	r5, #0
   13fd2:	b.n	13e66 <_svfprintf_r+0x766>
   13fd4:	ldrb.w	r3, [r8]
   13fd8:	cmp	r3, #108	; 0x6c
   13fda:	beq.w	14962 <_svfprintf_r+0x1262>
   13fde:	ldr	r0, [sp, #12]
   13fe0:	orr.w	r0, r0, #16
   13fe4:	str	r0, [sp, #12]
   13fe6:	b.w	137b4 <_svfprintf_r+0xb4>
   13fea:	cmp	r2, #0
   13fec:	bne.w	14dc8 <_svfprintf_r+0x16c8>
   13ff0:	ldr	r3, [sp, #12]
   13ff2:	lsls	r3, r3, #26
   13ff4:	bpl.w	146a6 <_svfprintf_r+0xfa6>
   13ff8:	ldr	r2, [sp, #40]	; 0x28
   13ffa:	ldr	r1, [sp, #28]
   13ffc:	ldr	r3, [r2, #0]
   13ffe:	asrs	r5, r1, #31
   14000:	mov	r0, r1
   14002:	adds	r2, #4
   14004:	mov	r1, r5
   14006:	str	r2, [sp, #40]	; 0x28
   14008:	strd	r0, r1, [r3]
   1400c:	b.w	1374e <_svfprintf_r+0x4e>
   14010:	ldr	r0, [pc, #252]	; (14110 <_svfprintf_r+0xa10>)
   14012:	str	r2, [sp, #52]	; 0x34
   14014:	cmp.w	fp, #0
   14018:	bne.w	14304 <_svfprintf_r+0xc04>
   1401c:	mov	r7, fp
   1401e:	mov.w	fp, #0
   14022:	str.w	fp, [sp, #36]	; 0x24
   14026:	add	r6, sp, #192	; 0xc0
   14028:	b.n	13a96 <_svfprintf_r+0x396>
   1402a:	str	r3, [sp, #52]	; 0x34
   1402c:	cmp	r2, #0
   1402e:	bne.w	14dc0 <_svfprintf_r+0x16c0>
   14032:	ldr	r2, [sp, #52]	; 0x34
   14034:	cmp	r2, #0
   14036:	beq.w	138e6 <_svfprintf_r+0x1e6>
   1403a:	movs	r3, #0
   1403c:	movs	r1, #1
   1403e:	mov	r7, r3
   14040:	str	r1, [sp, #16]
   14042:	strb.w	r2, [sp, #152]	; 0x98
   14046:	strb.w	r3, [sp, #111]	; 0x6f
   1404a:	mov	fp, r3
   1404c:	str	r3, [sp, #60]	; 0x3c
   1404e:	str	r1, [sp, #36]	; 0x24
   14050:	add	r6, sp, #152	; 0x98
   14052:	b.n	13aac <_svfprintf_r+0x3ac>
   14054:	cmp.w	fp, #0
   14058:	beq.w	14c78 <_svfprintf_r+0x1578>
   1405c:	movs	r7, #0
   1405e:	movs	r4, #0
   14060:	movs	r5, #0
   14062:	b.n	1394c <_svfprintf_r+0x24c>
   14064:	ldr	r0, [pc, #168]	; (14110 <_svfprintf_r+0xa10>)
   14066:	str	r3, [sp, #12]
   14068:	str	r2, [sp, #52]	; 0x34
   1406a:	orrs.w	r3, r4, r5
   1406e:	str	r7, [sp, #40]	; 0x28
   14070:	mov.w	r7, #0
   14074:	bne.w	13ea2 <_svfprintf_r+0x7a2>
   14078:	movs	r4, #0
   1407a:	movs	r5, #0
   1407c:	b.n	13ea2 <_svfprintf_r+0x7a2>
   1407e:	ldr	r4, [sp, #148]	; 0x94
   14080:	b.n	13b4c <_svfprintf_r+0x44c>
   14082:	ldr	r3, [sp, #52]	; 0x34
   14084:	cmp	r3, #101	; 0x65
   14086:	ble.w	141de <_svfprintf_r+0xade>
   1408a:	movs	r2, #0
   1408c:	movs	r3, #0
   1408e:	ldrd	r0, r1, [sp, #64]	; 0x40
   14092:	bl	122e0 <__aeabi_dcmpeq>
   14096:	cmp	r0, #0
   14098:	beq.w	14308 <_svfprintf_r+0xc08>
   1409c:	ldr	r3, [sp, #144]	; 0x90
   1409e:	ldr	r2, [pc, #116]	; (14114 <_svfprintf_r+0xa14>)
   140a0:	str.w	r2, [r9]
   140a4:	adds	r3, #1
   140a6:	adds	r4, #1
   140a8:	movs	r2, #1
   140aa:	cmp	r3, #7
   140ac:	str	r4, [sp, #148]	; 0x94
   140ae:	str	r3, [sp, #144]	; 0x90
   140b0:	str.w	r2, [r9, #4]
   140b4:	bgt.w	14894 <_svfprintf_r+0x1194>
   140b8:	add.w	r9, r9, #8
   140bc:	ldr	r3, [sp, #116]	; 0x74
   140be:	ldr	r2, [sp, #56]	; 0x38
   140c0:	cmp	r3, r2
   140c2:	blt.n	140cc <_svfprintf_r+0x9cc>
   140c4:	ldr	r3, [sp, #12]
   140c6:	lsls	r3, r3, #31
   140c8:	bpl.w	13c2c <_svfprintf_r+0x52c>
   140cc:	ldr	r3, [sp, #144]	; 0x90
   140ce:	ldr	r1, [sp, #72]	; 0x48
   140d0:	ldr	r2, [sp, #76]	; 0x4c
   140d2:	str.w	r2, [r9]
   140d6:	adds	r3, #1
   140d8:	add	r4, r1
   140da:	cmp	r3, #7
   140dc:	str	r4, [sp, #148]	; 0x94
   140de:	str.w	r1, [r9, #4]
   140e2:	str	r3, [sp, #144]	; 0x90
   140e4:	bgt.w	14976 <_svfprintf_r+0x1276>
   140e8:	add.w	r9, r9, #8
   140ec:	ldr	r3, [sp, #56]	; 0x38
   140ee:	subs	r5, r3, #1
   140f0:	cmp	r5, #0
   140f2:	ble.w	13c2c <_svfprintf_r+0x52c>
   140f6:	ldr	r2, [pc, #32]	; (14118 <_svfprintf_r+0xa18>)
   140f8:	ldr	r3, [sp, #144]	; 0x90
   140fa:	str	r2, [sp, #44]	; 0x2c
   140fc:	cmp	r5, #16
   140fe:	ble.w	144d4 <_svfprintf_r+0xdd4>
   14102:	movs	r6, #16
   14104:	ldr	r7, [sp, #24]
   14106:	ldr.w	fp, [sp, #20]
   1410a:	b.n	14128 <_svfprintf_r+0xa28>
   1410c:	.word	0x00017730
   14110:	.word	0x00017744
   14114:	.word	0x000174c8
   14118:	.word	0x00017710
   1411c:	add.w	r9, r9, #8
   14120:	subs	r5, #16
   14122:	cmp	r5, #16
   14124:	ble.w	144d4 <_svfprintf_r+0xdd4>
   14128:	adds	r3, #1
   1412a:	adds	r4, #16
   1412c:	cmp	r3, #7
   1412e:	str	r4, [sp, #148]	; 0x94
   14130:	str	r3, [sp, #144]	; 0x90
   14132:	str.w	sl, [r9]
   14136:	str.w	r6, [r9, #4]
   1413a:	ble.n	1411c <_svfprintf_r+0xa1c>
   1413c:	add	r2, sp, #140	; 0x8c
   1413e:	mov	r1, fp
   14140:	mov	r0, r7
   14142:	bl	16888 <__ssprint_r>
   14146:	cmp	r0, #0
   14148:	bne.w	138f4 <_svfprintf_r+0x1f4>
   1414c:	ldr	r4, [sp, #148]	; 0x94
   1414e:	ldr	r3, [sp, #144]	; 0x90
   14150:	add.w	r9, sp, #192	; 0xc0
   14154:	b.n	14120 <_svfprintf_r+0xa20>
   14156:	ldr	r3, [sp, #32]
   14158:	ldr	r2, [sp, #16]
   1415a:	subs	r7, r3, r2
   1415c:	cmp	r7, #0
   1415e:	ble.w	13b94 <_svfprintf_r+0x494>
   14162:	ldr	r2, [pc, #752]	; (14454 <_svfprintf_r+0xd54>)
   14164:	ldr	r3, [sp, #144]	; 0x90
   14166:	str	r2, [sp, #44]	; 0x2c
   14168:	cmp	r7, #16
   1416a:	ble.n	141c4 <_svfprintf_r+0xac4>
   1416c:	mov	r2, r9
   1416e:	mov	r1, r4
   14170:	mov	r9, r7
   14172:	movs	r5, #16
   14174:	mov	r7, r6
   14176:	ldr	r4, [sp, #24]
   14178:	ldr	r6, [sp, #20]
   1417a:	b.n	1418a <_svfprintf_r+0xa8a>
   1417c:	sub.w	r9, r9, #16
   14180:	cmp.w	r9, #16
   14184:	add.w	r2, r2, #8
   14188:	ble.n	141bc <_svfprintf_r+0xabc>
   1418a:	adds	r3, #1
   1418c:	adds	r1, #16
   1418e:	cmp	r3, #7
   14190:	str	r1, [sp, #148]	; 0x94
   14192:	str	r3, [sp, #144]	; 0x90
   14194:	str.w	sl, [r2]
   14198:	str	r5, [r2, #4]
   1419a:	ble.n	1417c <_svfprintf_r+0xa7c>
   1419c:	add	r2, sp, #140	; 0x8c
   1419e:	mov	r1, r6
   141a0:	mov	r0, r4
   141a2:	bl	16888 <__ssprint_r>
   141a6:	cmp	r0, #0
   141a8:	bne.w	138f4 <_svfprintf_r+0x1f4>
   141ac:	sub.w	r9, r9, #16
   141b0:	cmp.w	r9, #16
   141b4:	ldr	r1, [sp, #148]	; 0x94
   141b6:	ldr	r3, [sp, #144]	; 0x90
   141b8:	add	r2, sp, #192	; 0xc0
   141ba:	bgt.n	1418a <_svfprintf_r+0xa8a>
   141bc:	mov	r6, r7
   141be:	mov	r4, r1
   141c0:	mov	r7, r9
   141c2:	mov	r9, r2
   141c4:	adds	r3, #1
   141c6:	ldr	r2, [sp, #44]	; 0x2c
   141c8:	str	r3, [sp, #144]	; 0x90
   141ca:	add	r4, r7
   141cc:	cmp	r3, #7
   141ce:	str	r4, [sp, #148]	; 0x94
   141d0:	stmia.w	r9, {r2, r7}
   141d4:	bgt.w	14652 <_svfprintf_r+0xf52>
   141d8:	add.w	r9, r9, #8
   141dc:	b.n	13b94 <_svfprintf_r+0x494>
   141de:	ldr	r3, [sp, #56]	; 0x38
   141e0:	ldr	r5, [sp, #144]	; 0x90
   141e2:	cmp	r3, #1
   141e4:	ble.w	145fc <_svfprintf_r+0xefc>
   141e8:	adds	r5, #1
   141ea:	adds	r4, #1
   141ec:	movs	r3, #1
   141ee:	cmp	r5, #7
   141f0:	str	r4, [sp, #148]	; 0x94
   141f2:	str	r5, [sp, #144]	; 0x90
   141f4:	str.w	r6, [r9]
   141f8:	str.w	r3, [r9, #4]
   141fc:	bgt.w	1461e <_svfprintf_r+0xf1e>
   14200:	add.w	r9, r9, #8
   14204:	ldr	r2, [sp, #72]	; 0x48
   14206:	ldr	r3, [sp, #76]	; 0x4c
   14208:	str.w	r3, [r9]
   1420c:	adds	r5, #1
   1420e:	add	r4, r2
   14210:	cmp	r5, #7
   14212:	str	r4, [sp, #148]	; 0x94
   14214:	str	r5, [sp, #144]	; 0x90
   14216:	str.w	r2, [r9, #4]
   1421a:	bgt.w	14638 <_svfprintf_r+0xf38>
   1421e:	add.w	r9, r9, #8
   14222:	movs	r3, #0
   14224:	movs	r2, #0
   14226:	ldrd	r0, r1, [sp, #64]	; 0x40
   1422a:	bl	122e0 <__aeabi_dcmpeq>
   1422e:	ldr	r3, [sp, #56]	; 0x38
   14230:	cmp	r0, #0
   14232:	bne.w	143bc <_svfprintf_r+0xcbc>
   14236:	subs	r3, #1
   14238:	adds	r5, #1
   1423a:	adds	r6, #1
   1423c:	add	r4, r3
   1423e:	cmp	r5, #7
   14240:	str	r5, [sp, #144]	; 0x90
   14242:	str	r4, [sp, #148]	; 0x94
   14244:	str.w	r6, [r9]
   14248:	str.w	r3, [r9, #4]
   1424c:	bgt.w	1443a <_svfprintf_r+0xd3a>
   14250:	add.w	r9, r9, #8
   14254:	ldr	r2, [sp, #84]	; 0x54
   14256:	str.w	r2, [r9, #4]
   1425a:	adds	r5, #1
   1425c:	add	r4, r2
   1425e:	add	r3, sp, #124	; 0x7c
   14260:	cmp	r5, #7
   14262:	str	r4, [sp, #148]	; 0x94
   14264:	str	r5, [sp, #144]	; 0x90
   14266:	str.w	r3, [r9]
   1426a:	ble.w	13c28 <_svfprintf_r+0x528>
   1426e:	add	r2, sp, #140	; 0x8c
   14270:	ldr	r1, [sp, #20]
   14272:	ldr	r0, [sp, #24]
   14274:	bl	16888 <__ssprint_r>
   14278:	cmp	r0, #0
   1427a:	bne.w	138f4 <_svfprintf_r+0x1f4>
   1427e:	ldr	r4, [sp, #148]	; 0x94
   14280:	add.w	r9, sp, #192	; 0xc0
   14284:	b.n	13c2c <_svfprintf_r+0x52c>
   14286:	add	r2, sp, #140	; 0x8c
   14288:	ldr	r1, [sp, #20]
   1428a:	ldr	r0, [sp, #24]
   1428c:	bl	16888 <__ssprint_r>
   14290:	cmp	r0, #0
   14292:	beq.w	13cc8 <_svfprintf_r+0x5c8>
   14296:	b.w	138f4 <_svfprintf_r+0x1f4>
   1429a:	add	r2, sp, #140	; 0x8c
   1429c:	ldr	r1, [sp, #20]
   1429e:	ldr	r0, [sp, #24]
   142a0:	bl	16888 <__ssprint_r>
   142a4:	cmp	r0, #0
   142a6:	bne.w	138f4 <_svfprintf_r+0x1f4>
   142aa:	ldr	r4, [sp, #148]	; 0x94
   142ac:	add.w	r9, sp, #192	; 0xc0
   142b0:	b.n	13c06 <_svfprintf_r+0x506>
   142b2:	add	r2, sp, #140	; 0x8c
   142b4:	ldr	r1, [sp, #20]
   142b6:	ldr	r0, [sp, #24]
   142b8:	bl	16888 <__ssprint_r>
   142bc:	cmp	r0, #0
   142be:	bne.w	138f4 <_svfprintf_r+0x1f4>
   142c2:	ldr	r4, [sp, #148]	; 0x94
   142c4:	add.w	r9, sp, #192	; 0xc0
   142c8:	b.n	13b6c <_svfprintf_r+0x46c>
   142ca:	add	r2, sp, #140	; 0x8c
   142cc:	ldr	r1, [sp, #20]
   142ce:	ldr	r0, [sp, #24]
   142d0:	bl	16888 <__ssprint_r>
   142d4:	cmp	r0, #0
   142d6:	bne.w	138f4 <_svfprintf_r+0x1f4>
   142da:	ldr	r4, [sp, #148]	; 0x94
   142dc:	add.w	r9, sp, #192	; 0xc0
   142e0:	b.n	13b8c <_svfprintf_r+0x48c>
   142e2:	cmp.w	fp, #0
   142e6:	strb.w	r7, [sp, #111]	; 0x6f
   142ea:	blt.w	148ac <_svfprintf_r+0x11ac>
   142ee:	bic.w	r3, r2, #128	; 0x80
   142f2:	str	r3, [sp, #12]
   142f4:	orrs.w	r3, r4, r5
   142f8:	bne.w	13ea2 <_svfprintf_r+0x7a2>
   142fc:	cmp.w	fp, #0
   14300:	beq.w	1401c <_svfprintf_r+0x91c>
   14304:	movs	r7, #0
   14306:	b.n	14078 <_svfprintf_r+0x978>
   14308:	ldr	r5, [sp, #116]	; 0x74
   1430a:	cmp	r5, #0
   1430c:	ble.w	148b2 <_svfprintf_r+0x11b2>
   14310:	ldr	r3, [sp, #60]	; 0x3c
   14312:	ldr	r2, [sp, #56]	; 0x38
   14314:	cmp	r3, r2
   14316:	it	ge
   14318:	movge	r3, r2
   1431a:	cmp	r3, #0
   1431c:	mov	r5, r3
   1431e:	ble.n	1433c <_svfprintf_r+0xc3c>
   14320:	ldr	r3, [sp, #144]	; 0x90
   14322:	str.w	r6, [r9]
   14326:	adds	r3, #1
   14328:	add	r4, r5
   1432a:	cmp	r3, #7
   1432c:	str	r4, [sp, #148]	; 0x94
   1432e:	str.w	r5, [r9, #4]
   14332:	str	r3, [sp, #144]	; 0x90
   14334:	bgt.w	14a8a <_svfprintf_r+0x138a>
   14338:	add.w	r9, r9, #8
   1433c:	ldr	r3, [sp, #60]	; 0x3c
   1433e:	cmp	r5, #0
   14340:	it	ge
   14342:	subge	r3, r3, r5
   14344:	cmp	r3, #0
   14346:	mov	r5, r3
   14348:	ble.w	1453c <_svfprintf_r+0xe3c>
   1434c:	ldr	r2, [pc, #260]	; (14454 <_svfprintf_r+0xd54>)
   1434e:	ldr	r3, [sp, #144]	; 0x90
   14350:	str	r2, [sp, #44]	; 0x2c
   14352:	cmp	r5, #16
   14354:	ble.w	1485e <_svfprintf_r+0x115e>
   14358:	mov	r2, r4
   1435a:	movs	r7, #16
   1435c:	ldr.w	fp, [sp, #24]
   14360:	ldr	r4, [sp, #20]
   14362:	b.n	14370 <_svfprintf_r+0xc70>
   14364:	add.w	r9, r9, #8
   14368:	subs	r5, #16
   1436a:	cmp	r5, #16
   1436c:	ble.w	1485c <_svfprintf_r+0x115c>
   14370:	adds	r3, #1
   14372:	adds	r2, #16
   14374:	cmp	r3, #7
   14376:	str	r2, [sp, #148]	; 0x94
   14378:	str	r3, [sp, #144]	; 0x90
   1437a:	str.w	sl, [r9]
   1437e:	str.w	r7, [r9, #4]
   14382:	ble.n	14364 <_svfprintf_r+0xc64>
   14384:	add	r2, sp, #140	; 0x8c
   14386:	mov	r1, r4
   14388:	mov	r0, fp
   1438a:	bl	16888 <__ssprint_r>
   1438e:	cmp	r0, #0
   14390:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14394:	ldr	r2, [sp, #148]	; 0x94
   14396:	ldr	r3, [sp, #144]	; 0x90
   14398:	add.w	r9, sp, #192	; 0xc0
   1439c:	b.n	14368 <_svfprintf_r+0xc68>
   1439e:	add	r2, sp, #140	; 0x8c
   143a0:	ldr	r1, [sp, #20]
   143a2:	ldr	r0, [sp, #24]
   143a4:	bl	16888 <__ssprint_r>
   143a8:	cmp	r0, #0
   143aa:	bne.w	138f4 <_svfprintf_r+0x1f4>
   143ae:	ldrb.w	r7, [sp, #111]	; 0x6f
   143b2:	ldr	r4, [sp, #148]	; 0x94
   143b4:	add.w	r9, sp, #192	; 0xc0
   143b8:	b.w	13b4c <_svfprintf_r+0x44c>
   143bc:	subs	r6, r3, #1
   143be:	cmp	r6, #0
   143c0:	ble.w	14254 <_svfprintf_r+0xb54>
   143c4:	ldr	r3, [pc, #140]	; (14454 <_svfprintf_r+0xd54>)
   143c6:	str	r3, [sp, #44]	; 0x2c
   143c8:	cmp	r6, #16
   143ca:	ble.n	14426 <_svfprintf_r+0xd26>
   143cc:	str.w	r8, [sp, #36]	; 0x24
   143d0:	movs	r7, #16
   143d2:	mov	r8, r6
   143d4:	ldr.w	fp, [sp, #24]
   143d8:	ldr	r6, [sp, #20]
   143da:	b.n	143ea <_svfprintf_r+0xcea>
   143dc:	sub.w	r8, r8, #16
   143e0:	cmp.w	r8, #16
   143e4:	add.w	r9, r9, #8
   143e8:	ble.n	14420 <_svfprintf_r+0xd20>
   143ea:	adds	r5, #1
   143ec:	adds	r4, #16
   143ee:	cmp	r5, #7
   143f0:	str	r4, [sp, #148]	; 0x94
   143f2:	str	r5, [sp, #144]	; 0x90
   143f4:	str.w	sl, [r9]
   143f8:	str.w	r7, [r9, #4]
   143fc:	ble.n	143dc <_svfprintf_r+0xcdc>
   143fe:	add	r2, sp, #140	; 0x8c
   14400:	mov	r1, r6
   14402:	mov	r0, fp
   14404:	bl	16888 <__ssprint_r>
   14408:	cmp	r0, #0
   1440a:	bne.w	138f4 <_svfprintf_r+0x1f4>
   1440e:	sub.w	r8, r8, #16
   14412:	cmp.w	r8, #16
   14416:	ldr	r4, [sp, #148]	; 0x94
   14418:	ldr	r5, [sp, #144]	; 0x90
   1441a:	add.w	r9, sp, #192	; 0xc0
   1441e:	bgt.n	143ea <_svfprintf_r+0xcea>
   14420:	mov	r6, r8
   14422:	ldr.w	r8, [sp, #36]	; 0x24
   14426:	ldr	r3, [sp, #44]	; 0x2c
   14428:	adds	r5, #1
   1442a:	add	r4, r6
   1442c:	cmp	r5, #7
   1442e:	str	r4, [sp, #148]	; 0x94
   14430:	str	r5, [sp, #144]	; 0x90
   14432:	stmia.w	r9, {r3, r6}
   14436:	ble.w	14250 <_svfprintf_r+0xb50>
   1443a:	add	r2, sp, #140	; 0x8c
   1443c:	ldr	r1, [sp, #20]
   1443e:	ldr	r0, [sp, #24]
   14440:	bl	16888 <__ssprint_r>
   14444:	cmp	r0, #0
   14446:	bne.w	138f4 <_svfprintf_r+0x1f4>
   1444a:	ldr	r4, [sp, #148]	; 0x94
   1444c:	ldr	r5, [sp, #144]	; 0x90
   1444e:	add.w	r9, sp, #192	; 0xc0
   14452:	b.n	14254 <_svfprintf_r+0xb54>
   14454:	.word	0x00017710
   14458:	ldr	r1, [sp, #12]
   1445a:	ands.w	r2, r1, #16
   1445e:	beq.w	14808 <_svfprintf_r+0x1108>
   14462:	ldr	r0, [sp, #40]	; 0x28
   14464:	strb.w	r3, [sp, #111]	; 0x6f
   14468:	cmp.w	fp, #0
   1446c:	ldr	r4, [r0, #0]
   1446e:	add.w	r7, r0, #4
   14472:	mov.w	r5, #0
   14476:	blt.n	144c6 <_svfprintf_r+0xdc6>
   14478:	mov	r2, r1
   1447a:	bic.w	r2, r2, #128	; 0x80
   1447e:	str	r2, [sp, #12]
   14480:	orrs.w	r2, r4, r5
   14484:	str	r7, [sp, #40]	; 0x28
   14486:	mov	r7, r3
   14488:	bne.w	13a5c <_svfprintf_r+0x35c>
   1448c:	b.n	13e2c <_svfprintf_r+0x72c>
   1448e:	ldr	r3, [sp, #12]
   14490:	lsls	r0, r3, #27
   14492:	bmi.n	144ea <_svfprintf_r+0xdea>
   14494:	ldr	r3, [sp, #12]
   14496:	lsls	r1, r3, #25
   14498:	bpl.n	144ea <_svfprintf_r+0xdea>
   1449a:	ldr	r1, [sp, #40]	; 0x28
   1449c:	ldrsh.w	r4, [r1]
   144a0:	adds	r1, #4
   144a2:	asrs	r5, r4, #31
   144a4:	mov	r2, r4
   144a6:	mov	r3, r5
   144a8:	str	r1, [sp, #40]	; 0x28
   144aa:	b.w	13a36 <_svfprintf_r+0x336>
   144ae:	ldr	r1, [sp, #40]	; 0x28
   144b0:	strb.w	r3, [sp, #111]	; 0x6f
   144b4:	cmp.w	fp, #0
   144b8:	ldr	r4, [r1, #0]
   144ba:	add.w	r7, r1, #4
   144be:	mov.w	r5, #0
   144c2:	bge.w	1495e <_svfprintf_r+0x125e>
   144c6:	str	r7, [sp, #40]	; 0x28
   144c8:	mov	r7, r3
   144ca:	orrs.w	r3, r4, r5
   144ce:	bne.w	13a5c <_svfprintf_r+0x35c>
   144d2:	b.n	13e36 <_svfprintf_r+0x736>
   144d4:	adds	r3, #1
   144d6:	ldr	r2, [sp, #44]	; 0x2c
   144d8:	str	r3, [sp, #144]	; 0x90
   144da:	add	r4, r5
   144dc:	cmp	r3, #7
   144de:	str	r4, [sp, #148]	; 0x94
   144e0:	stmia.w	r9, {r2, r5}
   144e4:	ble.w	13c28 <_svfprintf_r+0x528>
   144e8:	b.n	1426e <_svfprintf_r+0xb6e>
   144ea:	ldr	r2, [sp, #40]	; 0x28
   144ec:	ldr	r4, [r2, #0]
   144ee:	mov	r3, r2
   144f0:	adds	r3, #4
   144f2:	asrs	r5, r4, #31
   144f4:	mov	r2, r4
   144f6:	str	r3, [sp, #40]	; 0x28
   144f8:	cmp	r2, #0
   144fa:	mov	r3, r5
   144fc:	sbcs.w	r3, r3, #0
   14500:	bge.w	13a40 <_svfprintf_r+0x340>
   14504:	negs	r4, r4
   14506:	mov.w	r7, #45	; 0x2d
   1450a:	sbc.w	r5, r5, r5, lsl #1
   1450e:	cmp.w	fp, #0
   14512:	strb.w	r7, [sp, #111]	; 0x6f
   14516:	blt.w	13a5c <_svfprintf_r+0x35c>
   1451a:	ldr	r3, [sp, #12]
   1451c:	bic.w	r3, r3, #128	; 0x80
   14520:	str	r3, [sp, #12]
   14522:	b.w	13a5c <_svfprintf_r+0x35c>
   14526:	add	r2, sp, #140	; 0x8c
   14528:	ldr	r1, [sp, #20]
   1452a:	ldr	r0, [sp, #24]
   1452c:	bl	16888 <__ssprint_r>
   14530:	cmp	r0, #0
   14532:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14536:	ldr	r4, [sp, #148]	; 0x94
   14538:	add.w	r9, sp, #192	; 0xc0
   1453c:	ldr	r2, [sp, #60]	; 0x3c
   1453e:	ldr	r3, [sp, #116]	; 0x74
   14540:	add	r2, r6
   14542:	mov	r7, r2
   14544:	ldr	r2, [sp, #56]	; 0x38
   14546:	cmp	r3, r2
   14548:	blt.n	145da <_svfprintf_r+0xeda>
   1454a:	ldr	r2, [sp, #12]
   1454c:	lsls	r5, r2, #31
   1454e:	bmi.n	145da <_svfprintf_r+0xeda>
   14550:	ldr	r1, [sp, #56]	; 0x38
   14552:	add	r6, r1
   14554:	subs	r5, r6, r7
   14556:	subs	r3, r1, r3
   14558:	cmp	r5, r3
   1455a:	it	ge
   1455c:	movge	r5, r3
   1455e:	cmp	r5, #0
   14560:	mov	r6, r5
   14562:	ble.n	14580 <_svfprintf_r+0xe80>
   14564:	ldr	r2, [sp, #144]	; 0x90
   14566:	str.w	r7, [r9]
   1456a:	adds	r2, #1
   1456c:	add	r4, r5
   1456e:	cmp	r2, #7
   14570:	str	r4, [sp, #148]	; 0x94
   14572:	str.w	r5, [r9, #4]
   14576:	str	r2, [sp, #144]	; 0x90
   14578:	bgt.w	14b78 <_svfprintf_r+0x1478>
   1457c:	add.w	r9, r9, #8
   14580:	cmp	r6, #0
   14582:	ite	ge
   14584:	subge	r5, r3, r6
   14586:	movlt	r5, r3
   14588:	cmp	r5, #0
   1458a:	ble.w	13c2c <_svfprintf_r+0x52c>
   1458e:	ldr	r2, [pc, #744]	; (14878 <_svfprintf_r+0x1178>)
   14590:	ldr	r3, [sp, #144]	; 0x90
   14592:	str	r2, [sp, #44]	; 0x2c
   14594:	cmp	r5, #16
   14596:	ble.n	144d4 <_svfprintf_r+0xdd4>
   14598:	movs	r6, #16
   1459a:	ldr	r7, [sp, #24]
   1459c:	ldr.w	fp, [sp, #20]
   145a0:	b.n	145ac <_svfprintf_r+0xeac>
   145a2:	add.w	r9, r9, #8
   145a6:	subs	r5, #16
   145a8:	cmp	r5, #16
   145aa:	ble.n	144d4 <_svfprintf_r+0xdd4>
   145ac:	adds	r3, #1
   145ae:	adds	r4, #16
   145b0:	cmp	r3, #7
   145b2:	str	r4, [sp, #148]	; 0x94
   145b4:	str	r3, [sp, #144]	; 0x90
   145b6:	str.w	sl, [r9]
   145ba:	str.w	r6, [r9, #4]
   145be:	ble.n	145a2 <_svfprintf_r+0xea2>
   145c0:	add	r2, sp, #140	; 0x8c
   145c2:	mov	r1, fp
   145c4:	mov	r0, r7
   145c6:	bl	16888 <__ssprint_r>
   145ca:	cmp	r0, #0
   145cc:	bne.w	138f4 <_svfprintf_r+0x1f4>
   145d0:	ldr	r4, [sp, #148]	; 0x94
   145d2:	ldr	r3, [sp, #144]	; 0x90
   145d4:	add.w	r9, sp, #192	; 0xc0
   145d8:	b.n	145a6 <_svfprintf_r+0xea6>
   145da:	ldr	r2, [sp, #144]	; 0x90
   145dc:	ldr	r0, [sp, #72]	; 0x48
   145de:	ldr	r1, [sp, #76]	; 0x4c
   145e0:	str.w	r1, [r9]
   145e4:	adds	r2, #1
   145e6:	add	r4, r0
   145e8:	cmp	r2, #7
   145ea:	str	r4, [sp, #148]	; 0x94
   145ec:	str.w	r0, [r9, #4]
   145f0:	str	r2, [sp, #144]	; 0x90
   145f2:	bgt.w	14b5e <_svfprintf_r+0x145e>
   145f6:	add.w	r9, r9, #8
   145fa:	b.n	14550 <_svfprintf_r+0xe50>
   145fc:	ldr	r3, [sp, #12]
   145fe:	lsls	r0, r3, #31
   14600:	bmi.w	141e8 <_svfprintf_r+0xae8>
   14604:	adds	r5, #1
   14606:	adds	r4, #1
   14608:	movs	r3, #1
   1460a:	cmp	r5, #7
   1460c:	str	r4, [sp, #148]	; 0x94
   1460e:	str	r5, [sp, #144]	; 0x90
   14610:	str.w	r6, [r9]
   14614:	str.w	r3, [r9, #4]
   14618:	ble.w	14250 <_svfprintf_r+0xb50>
   1461c:	b.n	1443a <_svfprintf_r+0xd3a>
   1461e:	add	r2, sp, #140	; 0x8c
   14620:	ldr	r1, [sp, #20]
   14622:	ldr	r0, [sp, #24]
   14624:	bl	16888 <__ssprint_r>
   14628:	cmp	r0, #0
   1462a:	bne.w	138f4 <_svfprintf_r+0x1f4>
   1462e:	ldr	r4, [sp, #148]	; 0x94
   14630:	ldr	r5, [sp, #144]	; 0x90
   14632:	add.w	r9, sp, #192	; 0xc0
   14636:	b.n	14204 <_svfprintf_r+0xb04>
   14638:	add	r2, sp, #140	; 0x8c
   1463a:	ldr	r1, [sp, #20]
   1463c:	ldr	r0, [sp, #24]
   1463e:	bl	16888 <__ssprint_r>
   14642:	cmp	r0, #0
   14644:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14648:	ldr	r4, [sp, #148]	; 0x94
   1464a:	ldr	r5, [sp, #144]	; 0x90
   1464c:	add.w	r9, sp, #192	; 0xc0
   14650:	b.n	14222 <_svfprintf_r+0xb22>
   14652:	add	r2, sp, #140	; 0x8c
   14654:	ldr	r1, [sp, #20]
   14656:	ldr	r0, [sp, #24]
   14658:	bl	16888 <__ssprint_r>
   1465c:	cmp	r0, #0
   1465e:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14662:	ldr	r4, [sp, #148]	; 0x94
   14664:	add.w	r9, sp, #192	; 0xc0
   14668:	b.w	13b94 <_svfprintf_r+0x494>
   1466c:	ldr	r1, [sp, #12]
   1466e:	ands.w	r3, r1, #64	; 0x40
   14672:	beq.w	147e8 <_svfprintf_r+0x10e8>
   14676:	ldr	r0, [sp, #40]	; 0x28
   14678:	strb.w	r2, [sp, #111]	; 0x6f
   1467c:	mov	r3, r0
   1467e:	cmp.w	fp, #0
   14682:	add.w	r3, r3, #4
   14686:	ldrh	r4, [r0, #0]
   14688:	mov.w	r5, #0
   1468c:	blt.w	14a10 <_svfprintf_r+0x1310>
   14690:	bic.w	r1, r1, #128	; 0x80
   14694:	str	r1, [sp, #12]
   14696:	orrs.w	r1, r4, r5
   1469a:	str	r3, [sp, #40]	; 0x28
   1469c:	beq.w	14054 <_svfprintf_r+0x954>
   146a0:	mov	r7, r2
   146a2:	b.w	1394c <_svfprintf_r+0x24c>
   146a6:	ldr	r3, [sp, #12]
   146a8:	lsls	r7, r3, #27
   146aa:	bmi.n	146c4 <_svfprintf_r+0xfc4>
   146ac:	ldr	r3, [sp, #12]
   146ae:	lsls	r6, r3, #25
   146b0:	bpl.n	146c4 <_svfprintf_r+0xfc4>
   146b2:	ldr	r2, [sp, #40]	; 0x28
   146b4:	ldr	r3, [r2, #0]
   146b6:	adds	r2, #4
   146b8:	str	r2, [sp, #40]	; 0x28
   146ba:	ldrh.w	r2, [sp, #28]
   146be:	strh	r2, [r3, #0]
   146c0:	b.w	1374e <_svfprintf_r+0x4e>
   146c4:	ldr	r2, [sp, #40]	; 0x28
   146c6:	ldr	r3, [r2, #0]
   146c8:	adds	r2, #4
   146ca:	str	r2, [sp, #40]	; 0x28
   146cc:	ldr	r2, [sp, #28]
   146ce:	str	r2, [r3, #0]
   146d0:	b.w	1374e <_svfprintf_r+0x4e>
   146d4:	ldrd	r0, r1, [sp, #64]	; 0x40
   146d8:	mov	r2, r0
   146da:	mov	r3, r1
   146dc:	bl	12344 <__aeabi_dcmpun>
   146e0:	cmp	r0, #0
   146e2:	bne.w	14ce0 <_svfprintf_r+0x15e0>
   146e6:	ldr	r3, [sp, #52]	; 0x34
   146e8:	cmp.w	fp, #4294967295
   146ec:	bic.w	r7, r3, #32
   146f0:	beq.w	14bc2 <_svfprintf_r+0x14c2>
   146f4:	cmp	r7, #71	; 0x47
   146f6:	beq.w	149fe <_svfprintf_r+0x12fe>
   146fa:	ldr	r3, [sp, #68]	; 0x44
   146fc:	ldr	r2, [sp, #12]
   146fe:	cmp	r3, #0
   14700:	orr.w	r2, r2, #256	; 0x100
   14704:	str	r2, [sp, #44]	; 0x2c
   14706:	blt.w	14bfa <_svfprintf_r+0x14fa>
   1470a:	vldr	d7, [sp, #64]	; 0x40
   1470e:	vstr	d7, [sp, #96]	; 0x60
   14712:	movs	r3, #0
   14714:	str	r3, [sp, #16]
   14716:	ldr	r3, [sp, #52]	; 0x34
   14718:	cmp	r3, #102	; 0x66
   1471a:	beq.w	14bc8 <_svfprintf_r+0x14c8>
   1471e:	cmp	r3, #70	; 0x46
   14720:	beq.w	149ae <_svfprintf_r+0x12ae>
   14724:	cmp	r7, #69	; 0x45
   14726:	ite	eq
   14728:	addeq.w	r5, fp, #1
   1472c:	movne	r5, fp
   1472e:	add	r2, sp, #132	; 0x84
   14730:	add	r3, sp, #120	; 0x78
   14732:	str	r2, [sp, #4]
   14734:	str	r3, [sp, #0]
   14736:	mov	r2, r5
   14738:	add	r3, sp, #116	; 0x74
   1473a:	movs	r1, #2
   1473c:	vldr	d0, [sp, #96]	; 0x60
   14740:	ldr	r0, [sp, #24]
   14742:	bl	15080 <_dtoa_r>
   14746:	ldr	r3, [sp, #52]	; 0x34
   14748:	cmp	r3, #103	; 0x67
   1474a:	mov	r6, r0
   1474c:	bne.w	14c26 <_svfprintf_r+0x1526>
   14750:	ldr	r3, [sp, #12]
   14752:	lsls	r2, r3, #31
   14754:	bpl.w	14cca <_svfprintf_r+0x15ca>
   14758:	adds	r4, r6, r5
   1475a:	movs	r2, #0
   1475c:	movs	r3, #0
   1475e:	ldrd	r0, r1, [sp, #96]	; 0x60
   14762:	bl	122e0 <__aeabi_dcmpeq>
   14766:	cmp	r0, #0
   14768:	bne.w	14a86 <_svfprintf_r+0x1386>
   1476c:	ldr	r3, [sp, #132]	; 0x84
   1476e:	cmp	r4, r3
   14770:	bls.n	14780 <_svfprintf_r+0x1080>
   14772:	movs	r1, #48	; 0x30
   14774:	adds	r2, r3, #1
   14776:	str	r2, [sp, #132]	; 0x84
   14778:	strb	r1, [r3, #0]
   1477a:	ldr	r3, [sp, #132]	; 0x84
   1477c:	cmp	r4, r3
   1477e:	bhi.n	14774 <_svfprintf_r+0x1074>
   14780:	subs	r3, r3, r6
   14782:	cmp	r7, #71	; 0x47
   14784:	str	r3, [sp, #56]	; 0x38
   14786:	beq.w	14a78 <_svfprintf_r+0x1378>
   1478a:	ldr	r3, [sp, #52]	; 0x34
   1478c:	cmp	r3, #101	; 0x65
   1478e:	ble.w	14c44 <_svfprintf_r+0x1544>
   14792:	ldr	r3, [sp, #52]	; 0x34
   14794:	cmp	r3, #102	; 0x66
   14796:	ldr	r3, [sp, #116]	; 0x74
   14798:	str	r3, [sp, #60]	; 0x3c
   1479a:	beq.w	14c5e <_svfprintf_r+0x155e>
   1479e:	ldr	r2, [sp, #60]	; 0x3c
   147a0:	ldr	r1, [sp, #56]	; 0x38
   147a2:	cmp	r2, r1
   147a4:	blt.w	14c0c <_svfprintf_r+0x150c>
   147a8:	ldr	r3, [sp, #12]
   147aa:	lsls	r1, r3, #31
   147ac:	bmi.w	14cce <_svfprintf_r+0x15ce>
   147b0:	bic.w	r3, r2, r2, asr #31
   147b4:	str	r2, [sp, #36]	; 0x24
   147b6:	movs	r2, #103	; 0x67
   147b8:	str	r2, [sp, #52]	; 0x34
   147ba:	ldr	r2, [sp, #16]
   147bc:	cmp	r2, #0
   147be:	bne.w	14a20 <_svfprintf_r+0x1320>
   147c2:	str	r3, [sp, #16]
   147c4:	ldr	r3, [sp, #44]	; 0x2c
   147c6:	str	r3, [sp, #12]
   147c8:	mov	fp, r2
   147ca:	ldrb.w	r7, [sp, #111]	; 0x6f
   147ce:	b.w	13aa4 <_svfprintf_r+0x3a4>
   147d2:	bic.w	r7, r7, #7
   147d6:	vldr	d7, [r7]
   147da:	add.w	r3, r7, #8
   147de:	vstr	d7, [sp, #64]	; 0x40
   147e2:	str	r3, [sp, #40]	; 0x28
   147e4:	b.w	13cfc <_svfprintf_r+0x5fc>
   147e8:	ldr	r1, [sp, #40]	; 0x28
   147ea:	strb.w	r3, [sp, #111]	; 0x6f
   147ee:	cmp.w	fp, #0
   147f2:	ldr	r4, [r1, #0]
   147f4:	add.w	r7, r1, #4
   147f8:	mov.w	r5, #0
   147fc:	bge.w	14958 <_svfprintf_r+0x1258>
   14800:	str	r7, [sp, #40]	; 0x28
   14802:	movs	r7, #0
   14804:	b.w	1394c <_svfprintf_r+0x24c>
   14808:	ldr	r1, [sp, #12]
   1480a:	ands.w	r3, r1, #64	; 0x40
   1480e:	beq.w	144ae <_svfprintf_r+0xdae>
   14812:	ldr	r0, [sp, #40]	; 0x28
   14814:	strb.w	r2, [sp, #111]	; 0x6f
   14818:	mov	r3, r0
   1481a:	cmp.w	fp, #0
   1481e:	add.w	r3, r3, #4
   14822:	ldrh	r4, [r0, #0]
   14824:	mov.w	r5, #0
   14828:	blt.w	14a0a <_svfprintf_r+0x130a>
   1482c:	bic.w	r1, r1, #128	; 0x80
   14830:	str	r1, [sp, #12]
   14832:	orrs.w	r1, r4, r5
   14836:	str	r3, [sp, #40]	; 0x28
   14838:	mov	r7, r2
   1483a:	bne.w	13a5c <_svfprintf_r+0x35c>
   1483e:	b.w	13e2c <_svfprintf_r+0x72c>
   14842:	ldr	r3, [sp, #12]
   14844:	ldr	r2, [sp, #40]	; 0x28
   14846:	tst.w	r3, #64	; 0x40
   1484a:	mov	r3, r2
   1484c:	beq.w	14a14 <_svfprintf_r+0x1314>
   14850:	adds	r3, #4
   14852:	ldrh	r4, [r2, #0]
   14854:	str	r3, [sp, #40]	; 0x28
   14856:	movs	r5, #0
   14858:	b.w	13e66 <_svfprintf_r+0x766>
   1485c:	mov	r4, r2
   1485e:	adds	r3, #1
   14860:	ldr	r2, [sp, #44]	; 0x2c
   14862:	str	r3, [sp, #144]	; 0x90
   14864:	add	r4, r5
   14866:	cmp	r3, #7
   14868:	str	r4, [sp, #148]	; 0x94
   1486a:	stmia.w	r9, {r2, r5}
   1486e:	bgt.w	14526 <_svfprintf_r+0xe26>
   14872:	add.w	r9, r9, #8
   14876:	b.n	1453c <_svfprintf_r+0xe3c>
   14878:	.word	0x00017710
   1487c:	movs	r7, #0
   1487e:	cmp	fp, r7
   14880:	strb.w	r7, [sp, #111]	; 0x6f
   14884:	blt.w	14078 <_svfprintf_r+0x978>
   14888:	ldr	r3, [sp, #12]
   1488a:	bic.w	r3, r3, #128	; 0x80
   1488e:	str	r3, [sp, #12]
   14890:	b.w	14014 <_svfprintf_r+0x914>
   14894:	add	r2, sp, #140	; 0x8c
   14896:	ldr	r1, [sp, #20]
   14898:	ldr	r0, [sp, #24]
   1489a:	bl	16888 <__ssprint_r>
   1489e:	cmp	r0, #0
   148a0:	bne.w	138f4 <_svfprintf_r+0x1f4>
   148a4:	ldr	r4, [sp, #148]	; 0x94
   148a6:	add.w	r9, sp, #192	; 0xc0
   148aa:	b.n	140bc <_svfprintf_r+0x9bc>
   148ac:	ldr	r7, [sp, #40]	; 0x28
   148ae:	b.w	1406a <_svfprintf_r+0x96a>
   148b2:	ldr	r3, [sp, #144]	; 0x90
   148b4:	ldr	r2, [pc, #736]	; (14b98 <_svfprintf_r+0x1498>)
   148b6:	str.w	r2, [r9]
   148ba:	adds	r3, #1
   148bc:	adds	r4, #1
   148be:	movs	r2, #1
   148c0:	cmp	r3, #7
   148c2:	str	r4, [sp, #148]	; 0x94
   148c4:	str	r3, [sp, #144]	; 0x90
   148c6:	str.w	r2, [r9, #4]
   148ca:	bgt.w	149e4 <_svfprintf_r+0x12e4>
   148ce:	add.w	r9, r9, #8
   148d2:	cbnz	r5, 148e0 <_svfprintf_r+0x11e0>
   148d4:	ldr	r3, [sp, #56]	; 0x38
   148d6:	cbnz	r3, 148e0 <_svfprintf_r+0x11e0>
   148d8:	ldr	r3, [sp, #12]
   148da:	lsls	r7, r3, #31
   148dc:	bpl.w	13c2c <_svfprintf_r+0x52c>
   148e0:	ldr	r3, [sp, #144]	; 0x90
   148e2:	ldr	r1, [sp, #72]	; 0x48
   148e4:	ldr	r2, [sp, #76]	; 0x4c
   148e6:	str.w	r2, [r9]
   148ea:	adds	r3, #1
   148ec:	add	r4, r1
   148ee:	cmp	r3, #7
   148f0:	str	r4, [sp, #148]	; 0x94
   148f2:	str.w	r1, [r9, #4]
   148f6:	str	r3, [sp, #144]	; 0x90
   148f8:	bgt.w	14c96 <_svfprintf_r+0x1596>
   148fc:	add.w	r9, r9, #8
   14900:	negs	r5, r5
   14902:	cmp	r5, #0
   14904:	ble.w	14a5c <_svfprintf_r+0x135c>
   14908:	ldr	r2, [pc, #656]	; (14b9c <_svfprintf_r+0x149c>)
   1490a:	str	r2, [sp, #44]	; 0x2c
   1490c:	cmp	r5, #16
   1490e:	ble.w	14aa4 <_svfprintf_r+0x13a4>
   14912:	mov	r2, r4
   14914:	movs	r7, #16
   14916:	ldr.w	fp, [sp, #24]
   1491a:	ldr	r4, [sp, #20]
   1491c:	b.n	1492a <_svfprintf_r+0x122a>
   1491e:	add.w	r9, r9, #8
   14922:	subs	r5, #16
   14924:	cmp	r5, #16
   14926:	ble.w	14aa2 <_svfprintf_r+0x13a2>
   1492a:	adds	r3, #1
   1492c:	adds	r2, #16
   1492e:	cmp	r3, #7
   14930:	str	r2, [sp, #148]	; 0x94
   14932:	str	r3, [sp, #144]	; 0x90
   14934:	str.w	sl, [r9]
   14938:	str.w	r7, [r9, #4]
   1493c:	ble.n	1491e <_svfprintf_r+0x121e>
   1493e:	add	r2, sp, #140	; 0x8c
   14940:	mov	r1, r4
   14942:	mov	r0, fp
   14944:	bl	16888 <__ssprint_r>
   14948:	cmp	r0, #0
   1494a:	bne.w	138f4 <_svfprintf_r+0x1f4>
   1494e:	ldr	r2, [sp, #148]	; 0x94
   14950:	ldr	r3, [sp, #144]	; 0x90
   14952:	add.w	r9, sp, #192	; 0xc0
   14956:	b.n	14922 <_svfprintf_r+0x1222>
   14958:	ldr	r2, [sp, #12]
   1495a:	b.w	13dd0 <_svfprintf_r+0x6d0>
   1495e:	ldr	r2, [sp, #12]
   14960:	b.n	1447a <_svfprintf_r+0xd7a>
   14962:	ldr	r3, [sp, #12]
   14964:	orr.w	r3, r3, #32
   14968:	str	r3, [sp, #12]
   1496a:	add.w	r8, r8, #1
   1496e:	ldrb.w	r3, [r8]
   14972:	b.w	137b4 <_svfprintf_r+0xb4>
   14976:	add	r2, sp, #140	; 0x8c
   14978:	ldr	r1, [sp, #20]
   1497a:	ldr	r0, [sp, #24]
   1497c:	bl	16888 <__ssprint_r>
   14980:	cmp	r0, #0
   14982:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14986:	ldr	r4, [sp, #148]	; 0x94
   14988:	add.w	r9, sp, #192	; 0xc0
   1498c:	b.w	140ec <_svfprintf_r+0x9ec>
   14990:	movs	r1, #64	; 0x40
   14992:	ldr	r0, [sp, #24]
   14994:	bl	127e4 <_malloc_r>
   14998:	ldr	r2, [sp, #20]
   1499a:	str	r0, [r2, #0]
   1499c:	str	r0, [r2, #16]
   1499e:	cmp	r0, #0
   149a0:	beq.w	14d8a <_svfprintf_r+0x168a>
   149a4:	ldr	r2, [sp, #20]
   149a6:	movs	r3, #64	; 0x40
   149a8:	str	r3, [r2, #20]
   149aa:	b.w	1372e <_svfprintf_r+0x2e>
   149ae:	add	r2, sp, #132	; 0x84
   149b0:	add	r3, sp, #120	; 0x78
   149b2:	str	r2, [sp, #4]
   149b4:	str	r3, [sp, #0]
   149b6:	mov	r2, fp
   149b8:	add	r3, sp, #116	; 0x74
   149ba:	movs	r1, #3
   149bc:	vldr	d0, [sp, #96]	; 0x60
   149c0:	ldr	r0, [sp, #24]
   149c2:	bl	15080 <_dtoa_r>
   149c6:	mov	r5, fp
   149c8:	mov	r6, r0
   149ca:	ldr	r3, [sp, #52]	; 0x34
   149cc:	cmp	r3, #70	; 0x46
   149ce:	add.w	r4, r6, r5
   149d2:	bne.w	1475a <_svfprintf_r+0x105a>
   149d6:	ldrb	r3, [r6, #0]
   149d8:	cmp	r3, #48	; 0x30
   149da:	beq.w	14cec <_svfprintf_r+0x15ec>
   149de:	ldr	r5, [sp, #116]	; 0x74
   149e0:	add	r4, r5
   149e2:	b.n	1475a <_svfprintf_r+0x105a>
   149e4:	add	r2, sp, #140	; 0x8c
   149e6:	ldr	r1, [sp, #20]
   149e8:	ldr	r0, [sp, #24]
   149ea:	bl	16888 <__ssprint_r>
   149ee:	cmp	r0, #0
   149f0:	bne.w	138f4 <_svfprintf_r+0x1f4>
   149f4:	ldr	r5, [sp, #116]	; 0x74
   149f6:	ldr	r4, [sp, #148]	; 0x94
   149f8:	add.w	r9, sp, #192	; 0xc0
   149fc:	b.n	148d2 <_svfprintf_r+0x11d2>
   149fe:	cmp.w	fp, #0
   14a02:	it	eq
   14a04:	moveq.w	fp, #1
   14a08:	b.n	146fa <_svfprintf_r+0xffa>
   14a0a:	str	r3, [sp, #40]	; 0x28
   14a0c:	mov	r7, r2
   14a0e:	b.n	144ca <_svfprintf_r+0xdca>
   14a10:	str	r3, [sp, #40]	; 0x28
   14a12:	b.n	14802 <_svfprintf_r+0x1102>
   14a14:	adds	r3, #4
   14a16:	ldr	r4, [r2, #0]
   14a18:	str	r3, [sp, #40]	; 0x28
   14a1a:	movs	r5, #0
   14a1c:	b.w	13e66 <_svfprintf_r+0x766>
   14a20:	movs	r7, #45	; 0x2d
   14a22:	str	r3, [sp, #16]
   14a24:	ldr	r3, [sp, #44]	; 0x2c
   14a26:	str	r3, [sp, #12]
   14a28:	strb.w	r7, [sp, #111]	; 0x6f
   14a2c:	mov.w	fp, #0
   14a30:	b.w	13aa6 <_svfprintf_r+0x3a6>
   14a34:	mov	r0, r6
   14a36:	bl	13580 <strlen>
   14a3a:	mov	fp, r4
   14a3c:	mov	r3, r0
   14a3e:	str	r0, [sp, #36]	; 0x24
   14a40:	b.w	13f88 <_svfprintf_r+0x888>
   14a44:	add	r2, sp, #140	; 0x8c
   14a46:	ldr	r1, [sp, #20]
   14a48:	ldr	r0, [sp, #24]
   14a4a:	bl	16888 <__ssprint_r>
   14a4e:	cmp	r0, #0
   14a50:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14a54:	ldr	r4, [sp, #148]	; 0x94
   14a56:	ldr	r3, [sp, #144]	; 0x90
   14a58:	add.w	r9, sp, #192	; 0xc0
   14a5c:	ldr	r1, [sp, #56]	; 0x38
   14a5e:	str.w	r6, [r9]
   14a62:	adds	r3, #1
   14a64:	add	r4, r1
   14a66:	cmp	r3, #7
   14a68:	str	r4, [sp, #148]	; 0x94
   14a6a:	str	r3, [sp, #144]	; 0x90
   14a6c:	str.w	r1, [r9, #4]
   14a70:	ble.w	13c28 <_svfprintf_r+0x528>
   14a74:	b.w	1426e <_svfprintf_r+0xb6e>
   14a78:	ldr	r3, [sp, #116]	; 0x74
   14a7a:	adds	r5, r3, #3
   14a7c:	blt.n	14abc <_svfprintf_r+0x13bc>
   14a7e:	cmp	fp, r3
   14a80:	blt.n	14abc <_svfprintf_r+0x13bc>
   14a82:	str	r3, [sp, #60]	; 0x3c
   14a84:	b.n	1479e <_svfprintf_r+0x109e>
   14a86:	mov	r3, r4
   14a88:	b.n	14780 <_svfprintf_r+0x1080>
   14a8a:	add	r2, sp, #140	; 0x8c
   14a8c:	ldr	r1, [sp, #20]
   14a8e:	ldr	r0, [sp, #24]
   14a90:	bl	16888 <__ssprint_r>
   14a94:	cmp	r0, #0
   14a96:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14a9a:	ldr	r4, [sp, #148]	; 0x94
   14a9c:	add.w	r9, sp, #192	; 0xc0
   14aa0:	b.n	1433c <_svfprintf_r+0xc3c>
   14aa2:	mov	r4, r2
   14aa4:	adds	r3, #1
   14aa6:	ldr	r2, [sp, #44]	; 0x2c
   14aa8:	str	r3, [sp, #144]	; 0x90
   14aaa:	add	r4, r5
   14aac:	cmp	r3, #7
   14aae:	str	r4, [sp, #148]	; 0x94
   14ab0:	stmia.w	r9, {r2, r5}
   14ab4:	bgt.n	14a44 <_svfprintf_r+0x1344>
   14ab6:	add.w	r9, r9, #8
   14aba:	b.n	14a5c <_svfprintf_r+0x135c>
   14abc:	ldr	r2, [sp, #52]	; 0x34
   14abe:	subs	r2, #2
   14ac0:	str	r2, [sp, #52]	; 0x34
   14ac2:	subs	r3, #1
   14ac4:	cmp	r3, #0
   14ac6:	ldrb.w	r2, [sp, #52]	; 0x34
   14aca:	str	r3, [sp, #116]	; 0x74
   14acc:	it	lt
   14ace:	neglt	r3, r3
   14ad0:	strb.w	r2, [sp, #124]	; 0x7c
   14ad4:	ite	lt
   14ad6:	movlt	r2, #45	; 0x2d
   14ad8:	movge	r2, #43	; 0x2b
   14ada:	cmp	r3, #9
   14adc:	strb.w	r2, [sp, #125]	; 0x7d
   14ae0:	ble.w	14cba <_svfprintf_r+0x15ba>
   14ae4:	add.w	r0, sp, #139	; 0x8b
   14ae8:	mov	r4, r0
   14aea:	ldr	r2, [pc, #180]	; (14ba0 <_svfprintf_r+0x14a0>)
   14aec:	smull	r2, r1, r2, r3
   14af0:	asrs	r2, r3, #31
   14af2:	rsb	r2, r2, r1, asr #2
   14af6:	add.w	r1, r2, r2, lsl #2
   14afa:	sub.w	r3, r3, r1, lsl #1
   14afe:	add.w	r1, r3, #48	; 0x30
   14b02:	cmp	r2, #9
   14b04:	mov	r3, r2
   14b06:	strb.w	r1, [r4, #-1]!
   14b0a:	bgt.n	14aea <_svfprintf_r+0x13ea>
   14b0c:	mov	r1, r4
   14b0e:	adds	r3, #48	; 0x30
   14b10:	uxtb	r2, r3
   14b12:	strb.w	r2, [r1, #-1]!
   14b16:	cmp	r0, r1
   14b18:	bls.w	14d84 <_svfprintf_r+0x1684>
   14b1c:	add.w	r1, sp, #126	; 0x7e
   14b20:	mov	r3, r4
   14b22:	b.n	14b28 <_svfprintf_r+0x1428>
   14b24:	ldrb.w	r2, [r3], #1
   14b28:	strb.w	r2, [r1], #1
   14b2c:	cmp	r0, r3
   14b2e:	bne.n	14b24 <_svfprintf_r+0x1424>
   14b30:	adds	r3, r0, #1
   14b32:	subs	r3, r3, r4
   14b34:	add.w	r2, sp, #126	; 0x7e
   14b38:	add	r3, r2
   14b3a:	add	r2, sp, #124	; 0x7c
   14b3c:	subs	r3, r3, r2
   14b3e:	ldr	r2, [sp, #56]	; 0x38
   14b40:	str	r3, [sp, #84]	; 0x54
   14b42:	cmp	r2, #1
   14b44:	add	r3, r2
   14b46:	str	r3, [sp, #36]	; 0x24
   14b48:	ble.w	14d1a <_svfprintf_r+0x161a>
   14b4c:	ldr	r3, [sp, #36]	; 0x24
   14b4e:	ldr	r2, [sp, #72]	; 0x48
   14b50:	add	r3, r2
   14b52:	movs	r2, #0
   14b54:	str	r3, [sp, #36]	; 0x24
   14b56:	str	r2, [sp, #60]	; 0x3c
   14b58:	bic.w	r3, r3, r3, asr #31
   14b5c:	b.n	147ba <_svfprintf_r+0x10ba>
   14b5e:	add	r2, sp, #140	; 0x8c
   14b60:	ldr	r1, [sp, #20]
   14b62:	ldr	r0, [sp, #24]
   14b64:	bl	16888 <__ssprint_r>
   14b68:	cmp	r0, #0
   14b6a:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14b6e:	ldr	r3, [sp, #116]	; 0x74
   14b70:	ldr	r4, [sp, #148]	; 0x94
   14b72:	add.w	r9, sp, #192	; 0xc0
   14b76:	b.n	14550 <_svfprintf_r+0xe50>
   14b78:	add	r2, sp, #140	; 0x8c
   14b7a:	ldr	r1, [sp, #20]
   14b7c:	ldr	r0, [sp, #24]
   14b7e:	bl	16888 <__ssprint_r>
   14b82:	cmp	r0, #0
   14b84:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14b88:	ldr	r3, [sp, #116]	; 0x74
   14b8a:	ldr	r2, [sp, #56]	; 0x38
   14b8c:	ldr	r4, [sp, #148]	; 0x94
   14b8e:	subs	r3, r2, r3
   14b90:	add.w	r9, sp, #192	; 0xc0
   14b94:	b.n	14580 <_svfprintf_r+0xe80>
   14b96:	nop
   14b98:	.word	0x000174c8
   14b9c:	.word	0x00017710
   14ba0:	.word	0x66666667
   14ba4:	cmp	r5, #6
   14ba6:	mov	r3, r5
   14ba8:	it	cs
   14baa:	movcs	r3, #6
   14bac:	str	r3, [sp, #36]	; 0x24
   14bae:	bic.w	r3, r3, r3, asr #31
   14bb2:	mov	fp, r6
   14bb4:	str	r7, [sp, #40]	; 0x28
   14bb6:	str	r6, [sp, #60]	; 0x3c
   14bb8:	mov	r7, r6
   14bba:	str	r3, [sp, #16]
   14bbc:	ldr	r6, [pc, #536]	; (14dd8 <_svfprintf_r+0x16d8>)
   14bbe:	b.w	13aa4 <_svfprintf_r+0x3a4>
   14bc2:	mov.w	fp, #6
   14bc6:	b.n	146fa <_svfprintf_r+0xffa>
   14bc8:	add	r2, sp, #132	; 0x84
   14bca:	add	r3, sp, #120	; 0x78
   14bcc:	str	r2, [sp, #4]
   14bce:	str	r3, [sp, #0]
   14bd0:	mov	r2, fp
   14bd2:	add	r3, sp, #116	; 0x74
   14bd4:	movs	r1, #3
   14bd6:	vldr	d0, [sp, #96]	; 0x60
   14bda:	ldr	r0, [sp, #24]
   14bdc:	bl	15080 <_dtoa_r>
   14be0:	mov	r5, fp
   14be2:	mov	r6, r0
   14be4:	add.w	r4, r0, fp
   14be8:	b.n	149d6 <_svfprintf_r+0x12d6>
   14bea:	movs	r7, #45	; 0x2d
   14bec:	strb.w	r7, [sp, #111]	; 0x6f
   14bf0:	b.w	13d4a <_svfprintf_r+0x64a>
   14bf4:	str	r3, [sp, #12]
   14bf6:	b.w	13ea2 <_svfprintf_r+0x7a2>
   14bfa:	ldrd	r1, r2, [sp, #64]	; 0x40
   14bfe:	add.w	r3, r2, #2147483648	; 0x80000000
   14c02:	str	r3, [sp, #100]	; 0x64
   14c04:	movs	r3, #45	; 0x2d
   14c06:	str	r1, [sp, #96]	; 0x60
   14c08:	str	r3, [sp, #16]
   14c0a:	b.n	14716 <_svfprintf_r+0x1016>
   14c0c:	ldr	r2, [sp, #72]	; 0x48
   14c0e:	ldr	r3, [sp, #56]	; 0x38
   14c10:	add	r3, r2
   14c12:	ldr	r2, [sp, #60]	; 0x3c
   14c14:	str	r3, [sp, #36]	; 0x24
   14c16:	cmp	r2, #0
   14c18:	ble.w	14d2e <_svfprintf_r+0x162e>
   14c1c:	movs	r2, #103	; 0x67
   14c1e:	bic.w	r3, r3, r3, asr #31
   14c22:	str	r2, [sp, #52]	; 0x34
   14c24:	b.n	147ba <_svfprintf_r+0x10ba>
   14c26:	ldr	r3, [sp, #52]	; 0x34
   14c28:	cmp	r3, #71	; 0x47
   14c2a:	bne.w	14758 <_svfprintf_r+0x1058>
   14c2e:	ldr	r3, [sp, #12]
   14c30:	lsls	r3, r3, #31
   14c32:	bmi.w	149ca <_svfprintf_r+0x12ca>
   14c36:	ldr	r3, [sp, #132]	; 0x84
   14c38:	cmp	r7, #71	; 0x47
   14c3a:	sub.w	r3, r3, r6
   14c3e:	str	r3, [sp, #56]	; 0x38
   14c40:	beq.w	14a78 <_svfprintf_r+0x1378>
   14c44:	ldr	r3, [sp, #116]	; 0x74
   14c46:	b.n	14ac2 <_svfprintf_r+0x13c2>
   14c48:	bic.w	r3, r5, r5, asr #31
   14c4c:	str	r7, [sp, #40]	; 0x28
   14c4e:	str	r3, [sp, #16]
   14c50:	str	r5, [sp, #36]	; 0x24
   14c52:	mov	fp, r0
   14c54:	str	r0, [sp, #60]	; 0x3c
   14c56:	ldrb.w	r7, [sp, #111]	; 0x6f
   14c5a:	b.w	13aa4 <_svfprintf_r+0x3a4>
   14c5e:	cmp	r3, #0
   14c60:	ble.n	14d3e <_svfprintf_r+0x163e>
   14c62:	cmp.w	fp, #0
   14c66:	bne.n	14d08 <_svfprintf_r+0x1608>
   14c68:	ldr	r2, [sp, #12]
   14c6a:	lsls	r4, r2, #31
   14c6c:	bmi.n	14d08 <_svfprintf_r+0x1608>
   14c6e:	mov	r2, r3
   14c70:	str	r2, [sp, #36]	; 0x24
   14c72:	bic.w	r3, r3, r3, asr #31
   14c76:	b.n	147ba <_svfprintf_r+0x10ba>
   14c78:	ldr	r3, [sp, #12]
   14c7a:	lsls	r3, r3, #31
   14c7c:	mov	r7, fp
   14c7e:	bpl.n	14c8c <_svfprintf_r+0x158c>
   14c80:	add	r6, sp, #256	; 0x100
   14c82:	movs	r3, #48	; 0x30
   14c84:	strb.w	r3, [r6, #-65]!
   14c88:	b.w	13a90 <_svfprintf_r+0x390>
   14c8c:	str.w	fp, [sp, #36]	; 0x24
   14c90:	add	r6, sp, #192	; 0xc0
   14c92:	b.w	13a96 <_svfprintf_r+0x396>
   14c96:	add	r2, sp, #140	; 0x8c
   14c98:	ldr	r1, [sp, #20]
   14c9a:	ldr	r0, [sp, #24]
   14c9c:	bl	16888 <__ssprint_r>
   14ca0:	cmp	r0, #0
   14ca2:	bne.w	138f4 <_svfprintf_r+0x1f4>
   14ca6:	ldr	r5, [sp, #116]	; 0x74
   14ca8:	ldr	r4, [sp, #148]	; 0x94
   14caa:	ldr	r3, [sp, #144]	; 0x90
   14cac:	add.w	r9, sp, #192	; 0xc0
   14cb0:	b.n	14900 <_svfprintf_r+0x1200>
   14cb2:	mov	r8, r4
   14cb4:	movs	r5, #0
   14cb6:	b.w	137b8 <_svfprintf_r+0xb8>
   14cba:	adds	r3, #48	; 0x30
   14cbc:	movs	r2, #48	; 0x30
   14cbe:	strb.w	r3, [sp, #127]	; 0x7f
   14cc2:	strb.w	r2, [sp, #126]	; 0x7e
   14cc6:	add	r3, sp, #128	; 0x80
   14cc8:	b.n	14b3a <_svfprintf_r+0x143a>
   14cca:	ldr	r3, [sp, #132]	; 0x84
   14ccc:	b.n	14780 <_svfprintf_r+0x1080>
   14cce:	ldr	r2, [sp, #72]	; 0x48
   14cd0:	ldr	r3, [sp, #60]	; 0x3c
   14cd2:	add	r3, r2
   14cd4:	movs	r2, #103	; 0x67
   14cd6:	str	r3, [sp, #36]	; 0x24
   14cd8:	str	r2, [sp, #52]	; 0x34
   14cda:	bic.w	r3, r3, r3, asr #31
   14cde:	b.n	147ba <_svfprintf_r+0x10ba>
   14ce0:	ldr	r6, [pc, #248]	; (14ddc <_svfprintf_r+0x16dc>)
   14ce2:	ldr	r3, [pc, #252]	; (14de0 <_svfprintf_r+0x16e0>)
   14ce4:	ldrb.w	r7, [sp, #111]	; 0x6f
   14ce8:	b.w	13d4e <_svfprintf_r+0x64e>
   14cec:	movs	r2, #0
   14cee:	movs	r3, #0
   14cf0:	ldrd	r0, r1, [sp, #96]	; 0x60
   14cf4:	bl	122e0 <__aeabi_dcmpeq>
   14cf8:	cmp	r0, #0
   14cfa:	bne.w	149de <_svfprintf_r+0x12de>
   14cfe:	rsb	r5, r5, #1
   14d02:	str	r5, [sp, #116]	; 0x74
   14d04:	add	r4, r5
   14d06:	b.n	1475a <_svfprintf_r+0x105a>
   14d08:	ldr	r3, [sp, #60]	; 0x3c
   14d0a:	ldr	r2, [sp, #72]	; 0x48
   14d0c:	adds	r5, r3, r2
   14d0e:	add.w	r3, r5, fp
   14d12:	str	r3, [sp, #36]	; 0x24
   14d14:	bic.w	r3, r3, r3, asr #31
   14d18:	b.n	147ba <_svfprintf_r+0x10ba>
   14d1a:	ldr	r3, [sp, #12]
   14d1c:	ands.w	r3, r3, #1
   14d20:	bne.w	14b4c <_svfprintf_r+0x144c>
   14d24:	str	r3, [sp, #60]	; 0x3c
   14d26:	ldr	r3, [sp, #36]	; 0x24
   14d28:	bic.w	r3, r3, r3, asr #31
   14d2c:	b.n	147ba <_svfprintf_r+0x10ba>
   14d2e:	ldr	r3, [sp, #60]	; 0x3c
   14d30:	ldr	r2, [sp, #36]	; 0x24
   14d32:	rsb	r3, r3, #1
   14d36:	add	r2, r3
   14d38:	mov	r3, r2
   14d3a:	str	r2, [sp, #36]	; 0x24
   14d3c:	b.n	14c1c <_svfprintf_r+0x151c>
   14d3e:	cmp.w	fp, #0
   14d42:	bne.n	14d4a <_svfprintf_r+0x164a>
   14d44:	ldr	r3, [sp, #12]
   14d46:	lsls	r0, r3, #31
   14d48:	bpl.n	14d5a <_svfprintf_r+0x165a>
   14d4a:	ldr	r3, [sp, #72]	; 0x48
   14d4c:	adds	r5, r3, #1
   14d4e:	add.w	r3, r5, fp
   14d52:	str	r3, [sp, #36]	; 0x24
   14d54:	bic.w	r3, r3, r3, asr #31
   14d58:	b.n	147ba <_svfprintf_r+0x10ba>
   14d5a:	movs	r3, #1
   14d5c:	str	r3, [sp, #36]	; 0x24
   14d5e:	b.n	147ba <_svfprintf_r+0x10ba>
   14d60:	ldr	r0, [sp, #40]	; 0x28
   14d62:	ldrb.w	r3, [r8, #1]
   14d66:	ldr	r5, [r0, #0]
   14d68:	adds	r0, #4
   14d6a:	cmp	r5, #0
   14d6c:	str	r0, [sp, #40]	; 0x28
   14d6e:	mov	r8, r4
   14d70:	bge.w	137b4 <_svfprintf_r+0xb4>
   14d74:	mov.w	r5, #4294967295
   14d78:	b.w	137b4 <_svfprintf_r+0xb4>
   14d7c:	strb.w	r1, [sp, #111]	; 0x6f
   14d80:	b.w	13916 <_svfprintf_r+0x216>
   14d84:	add.w	r3, sp, #126	; 0x7e
   14d88:	b.n	14b3a <_svfprintf_r+0x143a>
   14d8a:	ldr	r2, [sp, #24]
   14d8c:	movs	r3, #12
   14d8e:	str	r3, [r2, #0]
   14d90:	mov.w	r0, #4294967295
   14d94:	b.w	13906 <_svfprintf_r+0x206>
   14d98:	strb.w	r1, [sp, #111]	; 0x6f
   14d9c:	b.w	13a10 <_svfprintf_r+0x310>
   14da0:	strb.w	r1, [sp, #111]	; 0x6f
   14da4:	b.w	13cdc <_svfprintf_r+0x5dc>
   14da8:	strb.w	r1, [sp, #111]	; 0x6f
   14dac:	b.w	13e4a <_svfprintf_r+0x74a>
   14db0:	strb.w	r1, [sp, #111]	; 0x6f
   14db4:	b.w	13dee <_svfprintf_r+0x6ee>
   14db8:	strb.w	r1, [sp, #111]	; 0x6f
   14dbc:	b.w	13d9a <_svfprintf_r+0x69a>
   14dc0:	strb.w	r1, [sp, #111]	; 0x6f
   14dc4:	b.w	14032 <_svfprintf_r+0x932>
   14dc8:	strb.w	r1, [sp, #111]	; 0x6f
   14dcc:	b.w	13ff0 <_svfprintf_r+0x8f0>
   14dd0:	strb.w	r1, [sp, #111]	; 0x6f
   14dd4:	b.w	13fb4 <_svfprintf_r+0x8b4>
   14dd8:	.word	0x00017758
   14ddc:	.word	0x0001772c
   14de0:	.word	0x00017728

00014de4 <_vdprintf_r>:
   14de4:	push	{r4, r5, r6, r7, lr}
   14de6:	sub.w	sp, sp, #532	; 0x214
   14dea:	add	r5, sp, #16
   14dec:	str	r3, [sp, #0]
   14dee:	mov	r7, r1
   14df0:	mov	r3, r2
   14df2:	mov.w	r4, #512	; 0x200
   14df6:	add	r2, sp, #12
   14df8:	mov	r1, r5
   14dfa:	str	r4, [sp, #12]
   14dfc:	mov	r6, r0
   14dfe:	bl	16988 <_vasnprintf_r>
   14e02:	cbz	r0, 14e28 <_vdprintf_r+0x44>
   14e04:	mov	r4, r0
   14e06:	mov	r2, r0
   14e08:	mov	r1, r7
   14e0a:	ldr	r3, [sp, #12]
   14e0c:	mov	r0, r6
   14e0e:	bl	14e64 <_write_r>
   14e12:	cmp	r4, r5
   14e14:	str	r0, [sp, #12]
   14e16:	beq.n	14e22 <_vdprintf_r+0x3e>
   14e18:	mov	r0, r6
   14e1a:	mov	r1, r4
   14e1c:	bl	16078 <_free_r>
   14e20:	ldr	r0, [sp, #12]
   14e22:	add.w	sp, sp, #532	; 0x214
   14e26:	pop	{r4, r5, r6, r7, pc}
   14e28:	mov.w	r0, #4294967295
   14e2c:	b.n	14e22 <_vdprintf_r+0x3e>
   14e2e:	nop

00014e30 <vdprintf>:
   14e30:	push	{r4}
   14e32:	ldr	r4, [pc, #16]	; (14e44 <vdprintf+0x14>)
   14e34:	mov	r3, r2
   14e36:	mov	r2, r1
   14e38:	mov	r1, r0
   14e3a:	ldr	r0, [r4, #0]
   14e3c:	ldr.w	r4, [sp], #4
   14e40:	b.w	14de4 <_vdprintf_r>
   14e44:	.word	0x1fff0f40

00014e48 <__ascii_wctomb>:
   14e48:	cbz	r1, 14e54 <__ascii_wctomb+0xc>
   14e4a:	cmp	r2, #255	; 0xff
   14e4c:	bhi.n	14e58 <__ascii_wctomb+0x10>
   14e4e:	strb	r2, [r1, #0]
   14e50:	movs	r0, #1
   14e52:	bx	lr
   14e54:	mov	r0, r1
   14e56:	bx	lr
   14e58:	movs	r3, #138	; 0x8a
   14e5a:	str	r3, [r0, #0]
   14e5c:	mov.w	r0, #4294967295
   14e60:	bx	lr
   14e62:	nop

00014e64 <_write_r>:
   14e64:	push	{r4, r5, r6, lr}
   14e66:	mov	r5, r1
   14e68:	ldr	r4, [pc, #32]	; (14e8c <_write_r+0x28>)
   14e6a:	mov	r1, r2
   14e6c:	mov	r6, r0
   14e6e:	mov	r2, r3
   14e70:	mov	r0, r5
   14e72:	movs	r3, #0
   14e74:	str	r3, [r4, #0]
   14e76:	bl	11820 <_write>
   14e7a:	adds	r3, r0, #1
   14e7c:	beq.n	14e80 <_write_r+0x1c>
   14e7e:	pop	{r4, r5, r6, pc}
   14e80:	ldr	r3, [r4, #0]
   14e82:	cmp	r3, #0
   14e84:	beq.n	14e7e <_write_r+0x1a>
   14e86:	str	r3, [r6, #0]
   14e88:	pop	{r4, r5, r6, pc}
   14e8a:	nop
   14e8c:	.word	0x1fff2644

00014e90 <__register_exitproc>:
   14e90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14e94:	ldr	r4, [pc, #148]	; (14f2c <__register_exitproc+0x9c>)
   14e96:	ldr	r5, [r4, #0]
   14e98:	ldr.w	r4, [r5, #328]	; 0x148
   14e9c:	mov	r6, r0
   14e9e:	mov	r8, r1
   14ea0:	mov	sl, r2
   14ea2:	mov	r9, r3
   14ea4:	cbz	r4, 14f18 <__register_exitproc+0x88>
   14ea6:	ldr	r0, [r4, #4]
   14ea8:	cmp	r0, #31
   14eaa:	bgt.n	14edc <__register_exitproc+0x4c>
   14eac:	adds	r3, r0, #1
   14eae:	cbz	r6, 14ece <__register_exitproc+0x3e>
   14eb0:	add.w	r5, r4, r0, lsl #2
   14eb4:	movs	r2, #1
   14eb6:	str.w	sl, [r5, #136]	; 0x88
   14eba:	ldr.w	r1, [r4, #392]	; 0x188
   14ebe:	lsls	r2, r0
   14ec0:	orrs	r1, r2
   14ec2:	cmp	r6, #2
   14ec4:	str.w	r1, [r4, #392]	; 0x188
   14ec8:	str.w	r9, [r5, #264]	; 0x108
   14ecc:	beq.n	14f0c <__register_exitproc+0x7c>
   14ece:	adds	r0, #2
   14ed0:	str	r3, [r4, #4]
   14ed2:	str.w	r8, [r4, r0, lsl #2]
   14ed6:	movs	r0, #0
   14ed8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14edc:	ldr	r3, [pc, #80]	; (14f30 <__register_exitproc+0xa0>)
   14ede:	cbz	r3, 14f22 <__register_exitproc+0x92>
   14ee0:	mov.w	r0, #400	; 0x190
   14ee4:	bl	127c4 <malloc>
   14ee8:	mov	r4, r0
   14eea:	cbz	r0, 14f22 <__register_exitproc+0x92>
   14eec:	ldr.w	r3, [r5, #328]	; 0x148
   14ef0:	movs	r7, #0
   14ef2:	stmia.w	r0, {r3, r7}
   14ef6:	str.w	r4, [r5, #328]	; 0x148
   14efa:	mov	r0, r7
   14efc:	movs	r3, #1
   14efe:	str.w	r7, [r4, #392]	; 0x188
   14f02:	str.w	r7, [r4, #396]	; 0x18c
   14f06:	cmp	r6, #0
   14f08:	beq.n	14ece <__register_exitproc+0x3e>
   14f0a:	b.n	14eb0 <__register_exitproc+0x20>
   14f0c:	ldr.w	r1, [r4, #396]	; 0x18c
   14f10:	orrs	r2, r1
   14f12:	str.w	r2, [r4, #396]	; 0x18c
   14f16:	b.n	14ece <__register_exitproc+0x3e>
   14f18:	add.w	r4, r5, #332	; 0x14c
   14f1c:	str.w	r4, [r5, #328]	; 0x148
   14f20:	b.n	14ea6 <__register_exitproc+0x16>
   14f22:	mov.w	r0, #4294967295
   14f26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14f2a:	nop
   14f2c:	.word	0x000176fc
   14f30:	.word	0x000127c5

00014f34 <register_fini>:
   14f34:	ldr	r3, [pc, #8]	; (14f40 <register_fini+0xc>)
   14f36:	cbz	r3, 14f3e <register_fini+0xa>
   14f38:	ldr	r0, [pc, #8]	; (14f44 <register_fini+0x10>)
   14f3a:	b.w	14f48 <atexit>
   14f3e:	bx	lr
   14f40:	.word	0x00000000
   14f44:	.word	0x00015fb5

00014f48 <atexit>:
   14f48:	movs	r3, #0
   14f4a:	mov	r1, r0
   14f4c:	mov	r2, r3
   14f4e:	mov	r0, r3
   14f50:	b.w	14e90 <__register_exitproc>

00014f54 <quorem>:
   14f54:	ldr	r2, [r0, #16]
   14f56:	ldr	r3, [r1, #16]
   14f58:	cmp	r3, r2
   14f5a:	bgt.w	15078 <quorem+0x124>
   14f5e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f62:	add.w	r8, r3, #4294967295
   14f66:	add.w	r7, r1, #20
   14f6a:	add.w	fp, r0, #20
   14f6e:	ldr.w	r2, [r7, r8, lsl #2]
   14f72:	ldr.w	r3, [fp, r8, lsl #2]
   14f76:	mov.w	r4, r8, lsl #2
   14f7a:	sub	sp, #12
   14f7c:	adds	r2, #1
   14f7e:	udiv	r9, r3, r2
   14f82:	add.w	r3, fp, r4
   14f86:	str	r4, [sp, #0]
   14f88:	add.w	sl, r7, r4
   14f8c:	str	r3, [sp, #4]
   14f8e:	cmp.w	r9, #0
   14f92:	beq.n	15008 <quorem+0xb4>
   14f94:	movs	r5, #0
   14f96:	mov	ip, r7
   14f98:	mov	lr, fp
   14f9a:	mov	r3, r5
   14f9c:	ldr.w	r6, [ip], #4
   14fa0:	ldr.w	r2, [lr]
   14fa4:	uxth	r4, r6
   14fa6:	mla	r5, r9, r4, r5
   14faa:	lsrs	r6, r6, #16
   14fac:	lsrs	r4, r5, #16
   14fae:	mla	r4, r9, r6, r4
   14fb2:	uxth	r5, r5
   14fb4:	subs	r3, r3, r5
   14fb6:	uxth	r6, r4
   14fb8:	uxtah	r3, r3, r2
   14fbc:	rsb	r6, r6, r2, lsr #16
   14fc0:	add.w	r6, r6, r3, asr #16
   14fc4:	uxth	r3, r3
   14fc6:	orr.w	r3, r3, r6, lsl #16
   14fca:	cmp	sl, ip
   14fcc:	str.w	r3, [lr], #4
   14fd0:	mov.w	r5, r4, lsr #16
   14fd4:	mov.w	r3, r6, asr #16
   14fd8:	bcs.n	14f9c <quorem+0x48>
   14fda:	ldr	r3, [sp, #0]
   14fdc:	ldr.w	r3, [fp, r3]
   14fe0:	cbnz	r3, 15008 <quorem+0xb4>
   14fe2:	ldr	r4, [sp, #4]
   14fe4:	subs	r3, r4, #4
   14fe6:	cmp	fp, r3
   14fe8:	bcs.n	15004 <quorem+0xb0>
   14fea:	ldr.w	r3, [r4, #-4]
   14fee:	cbnz	r3, 15004 <quorem+0xb0>
   14ff0:	sub.w	r3, r4, #8
   14ff4:	b.n	14ffc <quorem+0xa8>
   14ff6:	ldr	r2, [r3, #0]
   14ff8:	subs	r3, #4
   14ffa:	cbnz	r2, 15004 <quorem+0xb0>
   14ffc:	cmp	fp, r3
   14ffe:	add.w	r8, r8, #4294967295
   15002:	bcc.n	14ff6 <quorem+0xa2>
   15004:	str.w	r8, [r0, #16]
   15008:	mov	r4, r0
   1500a:	bl	16674 <__mcmp>
   1500e:	cmp	r0, #0
   15010:	blt.n	15070 <quorem+0x11c>
   15012:	add.w	r9, r9, #1
   15016:	mov	r5, fp
   15018:	movs	r3, #0
   1501a:	ldr.w	r1, [r7], #4
   1501e:	ldr	r0, [r5, #0]
   15020:	uxth	r2, r1
   15022:	subs	r2, r3, r2
   15024:	lsrs	r1, r1, #16
   15026:	uxtah	r2, r2, r0
   1502a:	rsb	r3, r1, r0, lsr #16
   1502e:	add.w	r3, r3, r2, asr #16
   15032:	uxth	r1, r2
   15034:	orr.w	r1, r1, r3, lsl #16
   15038:	cmp	sl, r7
   1503a:	str.w	r1, [r5], #4
   1503e:	mov.w	r3, r3, asr #16
   15042:	bcs.n	1501a <quorem+0xc6>
   15044:	ldr.w	r2, [fp, r8, lsl #2]
   15048:	add.w	r3, fp, r8, lsl #2
   1504c:	cbnz	r2, 15070 <quorem+0x11c>
   1504e:	subs	r2, r3, #4
   15050:	cmp	fp, r2
   15052:	bcs.n	1506c <quorem+0x118>
   15054:	ldr.w	r2, [r3, #-4]
   15058:	cbnz	r2, 1506c <quorem+0x118>
   1505a:	subs	r3, #8
   1505c:	b.n	15064 <quorem+0x110>
   1505e:	ldr	r2, [r3, #0]
   15060:	subs	r3, #4
   15062:	cbnz	r2, 1506c <quorem+0x118>
   15064:	cmp	fp, r3
   15066:	add.w	r8, r8, #4294967295
   1506a:	bcc.n	1505e <quorem+0x10a>
   1506c:	str.w	r8, [r4, #16]
   15070:	mov	r0, r9
   15072:	add	sp, #12
   15074:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15078:	movs	r0, #0
   1507a:	bx	lr
   1507c:			; <UNDEFINED> instruction: 0xffffffff

00015080 <_dtoa_r>:
   15080:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15084:	vmov	r6, r7, d0
   15088:	sub	sp, #108	; 0x6c
   1508a:	ldr	r4, [r0, #64]	; 0x40
   1508c:	ldr	r5, [sp, #144]	; 0x90
   1508e:	str	r1, [sp, #0]
   15090:	mov	r9, r0
   15092:	str	r2, [sp, #20]
   15094:	str	r3, [sp, #12]
   15096:	vmov	sl, s0
   1509a:	mov	fp, r7
   1509c:	cbz	r4, 150b4 <_dtoa_r+0x34>
   1509e:	ldr	r2, [r0, #68]	; 0x44
   150a0:	str	r2, [r4, #4]
   150a2:	movs	r3, #1
   150a4:	lsls	r3, r2
   150a6:	str	r3, [r4, #8]
   150a8:	mov	r1, r4
   150aa:	bl	162b0 <_Bfree>
   150ae:	movs	r3, #0
   150b0:	str.w	r3, [r9, #64]	; 0x40
   150b4:	cmp.w	fp, #0
   150b8:	mov	r4, fp
   150ba:	blt.n	15126 <_dtoa_r+0xa6>
   150bc:	movs	r3, #0
   150be:	str	r3, [r5, #0]
   150c0:	ldr	r3, [pc, #644]	; (15348 <_dtoa_r+0x2c8>)
   150c2:	mov	r2, r3
   150c4:	ands	r3, r4
   150c6:	cmp	r3, r2
   150c8:	beq.n	150f8 <_dtoa_r+0x78>
   150ca:	movs	r2, #0
   150cc:	movs	r3, #0
   150ce:	mov	r0, sl
   150d0:	mov	r1, fp
   150d2:	bl	122e0 <__aeabi_dcmpeq>
   150d6:	mov	r6, sl
   150d8:	mov	r7, fp
   150da:	mov	r8, r0
   150dc:	cbz	r0, 15132 <_dtoa_r+0xb2>
   150de:	ldr	r2, [sp, #12]
   150e0:	movs	r3, #1
   150e2:	str	r3, [r2, #0]
   150e4:	ldr	r3, [sp, #148]	; 0x94
   150e6:	cmp	r3, #0
   150e8:	beq.w	15268 <_dtoa_r+0x1e8>
   150ec:	ldr	r0, [pc, #604]	; (1534c <_dtoa_r+0x2cc>)
   150ee:	str	r0, [r3, #0]
   150f0:	subs	r0, #1
   150f2:	add	sp, #108	; 0x6c
   150f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f8:	ldr	r2, [sp, #12]
   150fa:	movw	r3, #9999	; 0x270f
   150fe:	str	r3, [r2, #0]
   15100:	cmp.w	sl, #0
   15104:	beq.w	1523c <_dtoa_r+0x1bc>
   15108:	ldr	r0, [pc, #580]	; (15350 <_dtoa_r+0x2d0>)
   1510a:	ldr	r3, [sp, #148]	; 0x94
   1510c:	cmp	r3, #0
   1510e:	beq.n	150f2 <_dtoa_r+0x72>
   15110:	ldrb	r3, [r0, #3]
   15112:	cmp	r3, #0
   15114:	beq.w	1526c <_dtoa_r+0x1ec>
   15118:	add.w	r3, r0, #8
   1511c:	ldr	r2, [sp, #148]	; 0x94
   1511e:	str	r3, [r2, #0]
   15120:	add	sp, #108	; 0x6c
   15122:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15126:	movs	r3, #1
   15128:	bic.w	r4, fp, #2147483648	; 0x80000000
   1512c:	str	r3, [r5, #0]
   1512e:	mov	fp, r4
   15130:	b.n	150c0 <_dtoa_r+0x40>
   15132:	add	r2, sp, #96	; 0x60
   15134:	add	r1, sp, #100	; 0x64
   15136:	vmov	d0, r6, r7
   1513a:	mov	r0, r9
   1513c:	bl	167cc <__d2b>
   15140:	lsrs	r5, r4, #20
   15142:	str	r0, [sp, #40]	; 0x28
   15144:	bne.w	1524e <_dtoa_r+0x1ce>
   15148:	ldr	r5, [sp, #96]	; 0x60
   1514a:	ldr	r6, [sp, #100]	; 0x64
   1514c:	add	r6, r5
   1514e:	addw	r3, r6, #1074	; 0x432
   15152:	cmp	r3, #32
   15154:	ble.w	15668 <_dtoa_r+0x5e8>
   15158:	rsb	r3, r3, #64	; 0x40
   1515c:	addw	r0, r6, #1042	; 0x412
   15160:	lsls	r4, r3
   15162:	lsr.w	r0, sl, r0
   15166:	orrs	r0, r4
   15168:	bl	11d24 <__aeabi_ui2d>
   1516c:	movs	r3, #1
   1516e:	subs	r4, r6, #1
   15170:	sub.w	r1, r1, #32505856	; 0x1f00000
   15174:	str	r3, [sp, #60]	; 0x3c
   15176:	movs	r2, #0
   15178:	ldr	r3, [pc, #472]	; (15354 <_dtoa_r+0x2d4>)
   1517a:	bl	11aa8 <__aeabi_dsub>
   1517e:	add	r3, pc, #432	; (adr r3, 15330 <_dtoa_r+0x2b0>)
   15180:	ldrd	r2, r3, [r3]
   15184:	bl	11e10 <__aeabi_dmul>
   15188:	add	r3, pc, #428	; (adr r3, 15338 <_dtoa_r+0x2b8>)
   1518a:	ldrd	r2, r3, [r3]
   1518e:	bl	11aac <__adddf3>
   15192:	mov	r6, r0
   15194:	mov	r0, r4
   15196:	mov	r7, r1
   15198:	bl	11d44 <__aeabi_i2d>
   1519c:	add	r3, pc, #416	; (adr r3, 15340 <_dtoa_r+0x2c0>)
   1519e:	ldrd	r2, r3, [r3]
   151a2:	bl	11e10 <__aeabi_dmul>
   151a6:	mov	r2, r0
   151a8:	mov	r3, r1
   151aa:	mov	r0, r6
   151ac:	mov	r1, r7
   151ae:	bl	11aac <__adddf3>
   151b2:	mov	r6, r0
   151b4:	mov	r7, r1
   151b6:	bl	12370 <__aeabi_d2iz>
   151ba:	movs	r2, #0
   151bc:	str	r0, [sp, #16]
   151be:	movs	r3, #0
   151c0:	mov	r0, r6
   151c2:	mov	r1, r7
   151c4:	bl	122f4 <__aeabi_dcmplt>
   151c8:	cmp	r0, #0
   151ca:	bne.w	1561e <_dtoa_r+0x59e>
   151ce:	ldr	r6, [sp, #16]
   151d0:	cmp	r6, #22
   151d2:	bhi.w	15618 <_dtoa_r+0x598>
   151d6:	ldr	r3, [pc, #384]	; (15358 <_dtoa_r+0x2d8>)
   151d8:	add.w	r3, r3, r6, lsl #3
   151dc:	ldrd	r0, r1, [r3]
   151e0:	mov	r2, sl
   151e2:	mov	r3, fp
   151e4:	bl	12330 <__aeabi_dcmpgt>
   151e8:	cmp	r0, #0
   151ea:	beq.w	15672 <_dtoa_r+0x5f2>
   151ee:	subs	r3, r6, #1
   151f0:	str	r3, [sp, #16]
   151f2:	movs	r3, #0
   151f4:	str	r3, [sp, #52]	; 0x34
   151f6:	subs	r5, r5, r4
   151f8:	subs.w	r8, r5, #1
   151fc:	bmi.w	15654 <_dtoa_r+0x5d4>
   15200:	movs	r3, #0
   15202:	str	r3, [sp, #28]
   15204:	ldr	r3, [sp, #16]
   15206:	cmp	r3, #0
   15208:	blt.w	15642 <_dtoa_r+0x5c2>
   1520c:	add	r8, r3
   1520e:	str	r3, [sp, #48]	; 0x30
   15210:	movs	r3, #0
   15212:	str	r3, [sp, #24]
   15214:	ldr	r3, [sp, #0]
   15216:	cmp	r3, #9
   15218:	bhi.n	15270 <_dtoa_r+0x1f0>
   1521a:	cmp	r3, #5
   1521c:	ble.w	15ea8 <_dtoa_r+0xe28>
   15220:	subs	r3, #4
   15222:	str	r3, [sp, #0]
   15224:	movs	r6, #0
   15226:	ldr	r3, [sp, #0]
   15228:	subs	r3, #2
   1522a:	cmp	r3, #3
   1522c:	bhi.w	15e76 <_dtoa_r+0xdf6>
   15230:	tbh	[pc, r3, lsl #1]
   15234:	.word	0x0224032b
   15238:	.word	0x04500336
   1523c:	ldr	r3, [pc, #272]	; (15350 <_dtoa_r+0x2d0>)
   1523e:	ldr	r2, [pc, #284]	; (1535c <_dtoa_r+0x2dc>)
   15240:	ubfx	r0, r4, #0, #20
   15244:	cmp	r0, #0
   15246:	ite	ne
   15248:	movne	r0, r3
   1524a:	moveq	r0, r2
   1524c:	b.n	1510a <_dtoa_r+0x8a>
   1524e:	ubfx	r3, fp, #0, #20
   15252:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   15256:	subw	r4, r5, #1023	; 0x3ff
   1525a:	mov	r0, sl
   1525c:	str.w	r8, [sp, #60]	; 0x3c
   15260:	orr.w	r1, r1, #3145728	; 0x300000
   15264:	ldr	r5, [sp, #96]	; 0x60
   15266:	b.n	15176 <_dtoa_r+0xf6>
   15268:	ldr	r0, [pc, #244]	; (15360 <_dtoa_r+0x2e0>)
   1526a:	b.n	150f2 <_dtoa_r+0x72>
   1526c:	adds	r3, r0, #3
   1526e:	b.n	1511c <_dtoa_r+0x9c>
   15270:	movs	r1, #0
   15272:	str.w	r1, [r9, #68]	; 0x44
   15276:	mov	r0, r9
   15278:	mov	r4, r1
   1527a:	str	r1, [sp, #0]
   1527c:	bl	16264 <_Balloc>
   15280:	mov.w	r3, #4294967295
   15284:	str	r3, [sp, #32]
   15286:	str	r3, [sp, #56]	; 0x38
   15288:	movs	r3, #1
   1528a:	str	r0, [sp, #36]	; 0x24
   1528c:	str.w	r0, [r9, #64]	; 0x40
   15290:	str	r4, [sp, #20]
   15292:	str	r3, [sp, #44]	; 0x2c
   15294:	ldr	r3, [sp, #100]	; 0x64
   15296:	cmp	r3, #0
   15298:	blt.w	1543c <_dtoa_r+0x3bc>
   1529c:	ldr	r2, [sp, #16]
   1529e:	cmp	r2, #14
   152a0:	bgt.w	1543c <_dtoa_r+0x3bc>
   152a4:	ldr	r3, [pc, #176]	; (15358 <_dtoa_r+0x2d8>)
   152a6:	add.w	r3, r3, r2, lsl #3
   152aa:	vldr	d7, [r3]
   152ae:	ldr	r3, [sp, #20]
   152b0:	cmp	r3, #0
   152b2:	vstr	d7, [sp]
   152b6:	blt.w	158b6 <_dtoa_r+0x836>
   152ba:	mov	r6, sl
   152bc:	mov	r7, fp
   152be:	ldrd	sl, fp, [sp]
   152c2:	mov	r0, r6
   152c4:	mov	r2, sl
   152c6:	mov	r3, fp
   152c8:	mov	r1, r7
   152ca:	bl	12064 <__aeabi_ddiv>
   152ce:	bl	12370 <__aeabi_d2iz>
   152d2:	mov	r4, r0
   152d4:	bl	11d44 <__aeabi_i2d>
   152d8:	mov	r2, sl
   152da:	mov	r3, fp
   152dc:	bl	11e10 <__aeabi_dmul>
   152e0:	mov	r3, r1
   152e2:	mov	r2, r0
   152e4:	mov	r1, r7
   152e6:	mov	r0, r6
   152e8:	bl	11aa8 <__aeabi_dsub>
   152ec:	ldr	r5, [sp, #36]	; 0x24
   152ee:	add.w	r3, r4, #48	; 0x30
   152f2:	strb	r3, [r5, #0]
   152f4:	ldr	r3, [sp, #32]
   152f6:	cmp	r3, #1
   152f8:	mov	r6, r0
   152fa:	mov	r7, r1
   152fc:	add.w	r5, r5, #1
   15300:	beq.n	153c6 <_dtoa_r+0x346>
   15302:	movs	r2, #0
   15304:	ldr	r3, [pc, #92]	; (15364 <_dtoa_r+0x2e4>)
   15306:	bl	11e10 <__aeabi_dmul>
   1530a:	movs	r2, #0
   1530c:	movs	r3, #0
   1530e:	mov	r6, r0
   15310:	mov	r7, r1
   15312:	bl	122e0 <__aeabi_dcmpeq>
   15316:	cmp	r0, #0
   15318:	bne.n	15416 <_dtoa_r+0x396>
   1531a:	str.w	r9, [sp, #20]
   1531e:	ldr.w	sl, [sp, #32]
   15322:	ldr.w	fp, [sp, #36]	; 0x24
   15326:	ldrd	r8, r9, [sp]
   1532a:	b.n	1537e <_dtoa_r+0x2fe>
   1532c:	nop.w
   15330:	.word	0x636f4361
   15334:	.word	0x3fd287a7
   15338:	.word	0x8b60c8b3
   1533c:	.word	0x3fc68a28
   15340:	.word	0x509f79fb
   15344:	.word	0x3fd34413
   15348:	.word	0x7ff00000
   1534c:	.word	0x000174c9
   15350:	.word	0x00017880
   15354:	.word	0x3ff80000
   15358:	.word	0x00017888
   1535c:	.word	0x00017874
   15360:	.word	0x000174c8
   15364:	.word	0x40240000
   15368:	bl	11e10 <__aeabi_dmul>
   1536c:	movs	r2, #0
   1536e:	movs	r3, #0
   15370:	mov	r6, r0
   15372:	mov	r7, r1
   15374:	bl	122e0 <__aeabi_dcmpeq>
   15378:	cmp	r0, #0
   1537a:	bne.w	15ada <_dtoa_r+0xa5a>
   1537e:	mov	r2, r8
   15380:	mov	r3, r9
   15382:	mov	r0, r6
   15384:	mov	r1, r7
   15386:	bl	12064 <__aeabi_ddiv>
   1538a:	bl	12370 <__aeabi_d2iz>
   1538e:	mov	r4, r0
   15390:	bl	11d44 <__aeabi_i2d>
   15394:	mov	r2, r8
   15396:	mov	r3, r9
   15398:	bl	11e10 <__aeabi_dmul>
   1539c:	mov	r2, r0
   1539e:	mov	r3, r1
   153a0:	mov	r0, r6
   153a2:	mov	r1, r7
   153a4:	bl	11aa8 <__aeabi_dsub>
   153a8:	add.w	lr, r4, #48	; 0x30
   153ac:	strb.w	lr, [r5], #1
   153b0:	rsb	lr, fp, r5
   153b4:	cmp	lr, sl
   153b6:	mov	r6, r0
   153b8:	mov	r7, r1
   153ba:	mov.w	r2, #0
   153be:	ldr	r3, [pc, #696]	; (15678 <_dtoa_r+0x5f8>)
   153c0:	bne.n	15368 <_dtoa_r+0x2e8>
   153c2:	ldr.w	r9, [sp, #20]
   153c6:	mov	r2, r6
   153c8:	mov	r3, r7
   153ca:	mov	r0, r6
   153cc:	mov	r1, r7
   153ce:	bl	11aac <__adddf3>
   153d2:	mov	r6, r0
   153d4:	mov	r7, r1
   153d6:	mov	r2, r0
   153d8:	mov	r3, r1
   153da:	ldrd	r0, r1, [sp]
   153de:	bl	122f4 <__aeabi_dcmplt>
   153e2:	cbnz	r0, 153f6 <_dtoa_r+0x376>
   153e4:	mov	r2, r6
   153e6:	mov	r3, r7
   153e8:	ldrd	r0, r1, [sp]
   153ec:	bl	122e0 <__aeabi_dcmpeq>
   153f0:	cbz	r0, 15416 <_dtoa_r+0x396>
   153f2:	lsls	r3, r4, #31
   153f4:	bpl.n	15416 <_dtoa_r+0x396>
   153f6:	ldrb.w	r4, [r5, #-1]
   153fa:	ldr	r2, [sp, #36]	; 0x24
   153fc:	subs	r3, r5, #1
   153fe:	b.n	1540a <_dtoa_r+0x38a>
   15400:	cmp	r2, r3
   15402:	beq.w	15bfe <_dtoa_r+0xb7e>
   15406:	ldrb.w	r4, [r3, #-1]!
   1540a:	cmp	r4, #57	; 0x39
   1540c:	add.w	r5, r3, #1
   15410:	beq.n	15400 <_dtoa_r+0x380>
   15412:	adds	r4, #1
   15414:	strb	r4, [r3, #0]
   15416:	ldr	r1, [sp, #40]	; 0x28
   15418:	mov	r0, r9
   1541a:	bl	162b0 <_Bfree>
   1541e:	movs	r2, #0
   15420:	ldr	r3, [sp, #16]
   15422:	strb	r2, [r5, #0]
   15424:	ldr	r2, [sp, #12]
   15426:	adds	r3, #1
   15428:	str	r3, [r2, #0]
   1542a:	ldr	r3, [sp, #148]	; 0x94
   1542c:	cmp	r3, #0
   1542e:	beq.w	15b68 <_dtoa_r+0xae8>
   15432:	ldr	r0, [sp, #36]	; 0x24
   15434:	str	r5, [r3, #0]
   15436:	add	sp, #108	; 0x6c
   15438:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1543c:	ldr	r2, [sp, #44]	; 0x2c
   1543e:	cmp	r2, #0
   15440:	beq.w	15660 <_dtoa_r+0x5e0>
   15444:	ldr	r2, [sp, #0]
   15446:	cmp	r2, #1
   15448:	ble.w	158fa <_dtoa_r+0x87a>
   1544c:	ldr	r3, [sp, #32]
   1544e:	ldr	r2, [sp, #24]
   15450:	subs	r7, r3, #1
   15452:	cmp	r2, r7
   15454:	blt.w	15b6e <_dtoa_r+0xaee>
   15458:	subs	r7, r2, r7
   1545a:	ldr	r3, [sp, #32]
   1545c:	cmp	r3, #0
   1545e:	blt.w	15d62 <_dtoa_r+0xce2>
   15462:	ldr	r5, [sp, #28]
   15464:	ldr	r3, [sp, #32]
   15466:	ldr	r2, [sp, #28]
   15468:	movs	r1, #1
   1546a:	add	r2, r3
   1546c:	mov	r0, r9
   1546e:	str	r2, [sp, #28]
   15470:	add	r8, r3
   15472:	bl	163e0 <__i2b>
   15476:	mov	r6, r0
   15478:	cbz	r5, 15494 <_dtoa_r+0x414>
   1547a:	cmp.w	r8, #0
   1547e:	ble.n	15494 <_dtoa_r+0x414>
   15480:	cmp	r5, r8
   15482:	ldr	r2, [sp, #28]
   15484:	mov	r3, r5
   15486:	it	ge
   15488:	movge	r3, r8
   1548a:	subs	r2, r2, r3
   1548c:	str	r2, [sp, #28]
   1548e:	subs	r5, r5, r3
   15490:	rsb	r8, r3, r8
   15494:	ldr	r3, [sp, #24]
   15496:	cmp	r3, #0
   15498:	ble.w	15a86 <_dtoa_r+0xa06>
   1549c:	ldr	r2, [sp, #44]	; 0x2c
   1549e:	cmp	r2, #0
   154a0:	beq.w	158a8 <_dtoa_r+0x828>
   154a4:	cmp	r7, #0
   154a6:	beq.w	158a8 <_dtoa_r+0x828>
   154aa:	mov	r1, r6
   154ac:	mov	r2, r7
   154ae:	mov	r0, r9
   154b0:	bl	16524 <__pow5mult>
   154b4:	ldr	r2, [sp, #40]	; 0x28
   154b6:	mov	r1, r0
   154b8:	mov	r6, r0
   154ba:	mov	r0, r9
   154bc:	bl	163f4 <__multiply>
   154c0:	ldr	r1, [sp, #40]	; 0x28
   154c2:	mov	r4, r0
   154c4:	mov	r0, r9
   154c6:	bl	162b0 <_Bfree>
   154ca:	ldr	r3, [sp, #24]
   154cc:	subs	r3, r3, r7
   154ce:	str	r3, [sp, #24]
   154d0:	bne.w	158a6 <_dtoa_r+0x826>
   154d4:	movs	r1, #1
   154d6:	mov	r0, r9
   154d8:	bl	163e0 <__i2b>
   154dc:	ldr	r3, [sp, #48]	; 0x30
   154de:	str	r0, [sp, #24]
   154e0:	cmp	r3, #0
   154e2:	beq.w	15910 <_dtoa_r+0x890>
   154e6:	mov	r1, r0
   154e8:	mov	r2, r3
   154ea:	mov	r0, r9
   154ec:	bl	16524 <__pow5mult>
   154f0:	ldr	r3, [sp, #0]
   154f2:	str	r0, [sp, #24]
   154f4:	cmp	r3, #1
   154f6:	ble.w	15ae0 <_dtoa_r+0xa60>
   154fa:	movs	r7, #0
   154fc:	ldr	r2, [sp, #24]
   154fe:	ldr	r3, [r2, #16]
   15500:	add.w	r3, r2, r3, lsl #2
   15504:	ldr	r0, [r3, #16]
   15506:	bl	16344 <__hi0bits>
   1550a:	rsb	r0, r0, #32
   1550e:	add	r0, r8
   15510:	ands.w	r0, r0, #31
   15514:	beq.w	1590c <_dtoa_r+0x88c>
   15518:	rsb	r3, r0, #32
   1551c:	cmp	r3, #4
   1551e:	ble.w	15e9c <_dtoa_r+0xe1c>
   15522:	rsb	r0, r0, #28
   15526:	ldr	r3, [sp, #28]
   15528:	add	r3, r0
   1552a:	str	r3, [sp, #28]
   1552c:	add	r5, r0
   1552e:	add	r8, r0
   15530:	ldr	r3, [sp, #28]
   15532:	cmp	r3, #0
   15534:	ble.n	15542 <_dtoa_r+0x4c2>
   15536:	mov	r1, r4
   15538:	mov	r2, r3
   1553a:	mov	r0, r9
   1553c:	bl	165c4 <__lshift>
   15540:	mov	r4, r0
   15542:	cmp.w	r8, #0
   15546:	ble.n	15554 <_dtoa_r+0x4d4>
   15548:	mov	r2, r8
   1554a:	ldr	r1, [sp, #24]
   1554c:	mov	r0, r9
   1554e:	bl	165c4 <__lshift>
   15552:	str	r0, [sp, #24]
   15554:	ldr	r3, [sp, #52]	; 0x34
   15556:	cmp	r3, #0
   15558:	bne.w	15a50 <_dtoa_r+0x9d0>
   1555c:	ldr	r3, [sp, #32]
   1555e:	cmp	r3, #0
   15560:	ble.w	15a8a <_dtoa_r+0xa0a>
   15564:	ldr	r3, [sp, #44]	; 0x2c
   15566:	cmp	r3, #0
   15568:	bne.w	15954 <_dtoa_r+0x8d4>
   1556c:	ldr.w	fp, [sp, #36]	; 0x24
   15570:	ldr	r7, [sp, #32]
   15572:	ldr.w	r8, [sp, #24]
   15576:	mov	r5, fp
   15578:	b.n	15580 <_dtoa_r+0x500>
   1557a:	bl	162c4 <__multadd>
   1557e:	mov	r4, r0
   15580:	mov	r1, r8
   15582:	mov	r0, r4
   15584:	bl	14f54 <quorem>
   15588:	add.w	sl, r0, #48	; 0x30
   1558c:	strb.w	sl, [r5], #1
   15590:	rsb	r3, fp, r5
   15594:	cmp	r3, r7
   15596:	mov.w	r2, #10
   1559a:	mov.w	r3, #0
   1559e:	mov	r1, r4
   155a0:	mov	r0, r9
   155a2:	blt.n	1557a <_dtoa_r+0x4fa>
   155a4:	ldr	r3, [sp, #36]	; 0x24
   155a6:	ldr	r2, [sp, #32]
   155a8:	cmp	r2, #1
   155aa:	ite	ge
   155ac:	addge	r3, r3, r2
   155ae:	addlt	r3, #1
   155b0:	mov	r5, r3
   155b2:	mov.w	fp, #0
   155b6:	mov	r1, r4
   155b8:	movs	r2, #1
   155ba:	mov	r0, r9
   155bc:	bl	165c4 <__lshift>
   155c0:	ldr	r1, [sp, #24]
   155c2:	str	r0, [sp, #40]	; 0x28
   155c4:	bl	16674 <__mcmp>
   155c8:	cmp	r0, #0
   155ca:	ble.w	15bd8 <_dtoa_r+0xb58>
   155ce:	ldrb.w	r2, [r5, #-1]
   155d2:	ldr	r1, [sp, #36]	; 0x24
   155d4:	subs	r3, r5, #1
   155d6:	b.n	155e2 <_dtoa_r+0x562>
   155d8:	cmp	r3, r1
   155da:	beq.w	15ac6 <_dtoa_r+0xa46>
   155de:	ldrb.w	r2, [r3, #-1]!
   155e2:	cmp	r2, #57	; 0x39
   155e4:	add.w	r5, r3, #1
   155e8:	beq.n	155d8 <_dtoa_r+0x558>
   155ea:	adds	r2, #1
   155ec:	strb	r2, [r3, #0]
   155ee:	ldr	r1, [sp, #24]
   155f0:	mov	r0, r9
   155f2:	bl	162b0 <_Bfree>
   155f6:	cmp	r6, #0
   155f8:	beq.w	15416 <_dtoa_r+0x396>
   155fc:	cmp.w	fp, #0
   15600:	beq.n	1560e <_dtoa_r+0x58e>
   15602:	cmp	fp, r6
   15604:	beq.n	1560e <_dtoa_r+0x58e>
   15606:	mov	r1, fp
   15608:	mov	r0, r9
   1560a:	bl	162b0 <_Bfree>
   1560e:	mov	r1, r6
   15610:	mov	r0, r9
   15612:	bl	162b0 <_Bfree>
   15616:	b.n	15416 <_dtoa_r+0x396>
   15618:	movs	r3, #1
   1561a:	str	r3, [sp, #52]	; 0x34
   1561c:	b.n	151f6 <_dtoa_r+0x176>
   1561e:	ldr.w	r8, [sp, #16]
   15622:	mov	r0, r8
   15624:	bl	11d44 <__aeabi_i2d>
   15628:	mov	r2, r0
   1562a:	mov	r3, r1
   1562c:	mov	r0, r6
   1562e:	mov	r1, r7
   15630:	bl	122e0 <__aeabi_dcmpeq>
   15634:	cmp	r0, #0
   15636:	bne.w	151ce <_dtoa_r+0x14e>
   1563a:	add.w	r3, r8, #4294967295
   1563e:	str	r3, [sp, #16]
   15640:	b.n	151ce <_dtoa_r+0x14e>
   15642:	ldr	r2, [sp, #28]
   15644:	ldr	r3, [sp, #16]
   15646:	subs	r2, r2, r3
   15648:	negs	r3, r3
   1564a:	str	r3, [sp, #24]
   1564c:	movs	r3, #0
   1564e:	str	r2, [sp, #28]
   15650:	str	r3, [sp, #48]	; 0x30
   15652:	b.n	15214 <_dtoa_r+0x194>
   15654:	rsb	r3, r8, #0
   15658:	str	r3, [sp, #28]
   1565a:	mov.w	r8, #0
   1565e:	b.n	15204 <_dtoa_r+0x184>
   15660:	ldr	r7, [sp, #24]
   15662:	ldr	r5, [sp, #28]
   15664:	ldr	r6, [sp, #44]	; 0x2c
   15666:	b.n	15478 <_dtoa_r+0x3f8>
   15668:	rsb	r4, r3, #32
   1566c:	lsl.w	r0, sl, r4
   15670:	b.n	15168 <_dtoa_r+0xe8>
   15672:	str	r0, [sp, #52]	; 0x34
   15674:	b.n	151f6 <_dtoa_r+0x176>
   15676:	nop
   15678:	.word	0x40240000
   1567c:	movs	r3, #0
   1567e:	str	r3, [sp, #44]	; 0x2c
   15680:	ldr	r3, [sp, #16]
   15682:	ldr	r2, [sp, #20]
   15684:	add	r3, r2
   15686:	str	r3, [sp, #56]	; 0x38
   15688:	adds	r3, #1
   1568a:	cmp	r3, #0
   1568c:	str	r3, [sp, #32]
   1568e:	ble.w	15b8c <_dtoa_r+0xb0c>
   15692:	ldr	r4, [sp, #32]
   15694:	mov	r5, r4
   15696:	movs	r1, #0
   15698:	cmp	r5, #23
   1569a:	str.w	r1, [r9, #68]	; 0x44
   1569e:	bls.n	156b8 <_dtoa_r+0x638>
   156a0:	movs	r2, #1
   156a2:	movs	r3, #4
   156a4:	lsls	r3, r3, #1
   156a6:	add.w	r0, r3, #20
   156aa:	cmp	r0, r5
   156ac:	mov	r1, r2
   156ae:	add.w	r2, r2, #1
   156b2:	bls.n	156a4 <_dtoa_r+0x624>
   156b4:	str.w	r1, [r9, #68]	; 0x44
   156b8:	mov	r0, r9
   156ba:	bl	16264 <_Balloc>
   156be:	cmp	r4, #14
   156c0:	str	r0, [sp, #36]	; 0x24
   156c2:	str.w	r0, [r9, #64]	; 0x40
   156c6:	bhi.w	15294 <_dtoa_r+0x214>
   156ca:	cmp	r6, #0
   156cc:	beq.w	15294 <_dtoa_r+0x214>
   156d0:	ldr	r1, [sp, #16]
   156d2:	cmp	r1, #0
   156d4:	strd	sl, fp, [sp, #64]	; 0x40
   156d8:	ble.w	15c10 <_dtoa_r+0xb90>
   156dc:	ldr	r3, [pc, #576]	; (15920 <_dtoa_r+0x8a0>)
   156de:	and.w	r2, r1, #15
   156e2:	asrs	r6, r1, #4
   156e4:	add.w	r3, r3, r2, lsl #3
   156e8:	lsls	r0, r6, #27
   156ea:	ldrd	r4, r5, [r3]
   156ee:	bpl.w	15b7e <_dtoa_r+0xafe>
   156f2:	ldr	r3, [pc, #560]	; (15924 <_dtoa_r+0x8a4>)
   156f4:	mov	r0, sl
   156f6:	mov	r1, fp
   156f8:	ldrd	r2, r3, [r3, #32]
   156fc:	bl	12064 <__aeabi_ddiv>
   15700:	strd	r0, r1, [sp, #72]	; 0x48
   15704:	and.w	r6, r6, #15
   15708:	mov.w	sl, #3
   1570c:	cbz	r6, 15730 <_dtoa_r+0x6b0>
   1570e:	ldr	r7, [pc, #532]	; (15924 <_dtoa_r+0x8a4>)
   15710:	lsls	r1, r6, #31
   15712:	bpl.n	15728 <_dtoa_r+0x6a8>
   15714:	mov	r0, r4
   15716:	mov	r1, r5
   15718:	ldrd	r2, r3, [r7]
   1571c:	bl	11e10 <__aeabi_dmul>
   15720:	add.w	sl, sl, #1
   15724:	mov	r4, r0
   15726:	mov	r5, r1
   15728:	asrs	r6, r6, #1
   1572a:	add.w	r7, r7, #8
   1572e:	bne.n	15710 <_dtoa_r+0x690>
   15730:	mov	r2, r4
   15732:	mov	r3, r5
   15734:	ldrd	r0, r1, [sp, #72]	; 0x48
   15738:	bl	12064 <__aeabi_ddiv>
   1573c:	mov	r6, r0
   1573e:	mov	r7, r1
   15740:	ldr	r3, [sp, #52]	; 0x34
   15742:	cbz	r3, 15756 <_dtoa_r+0x6d6>
   15744:	movs	r2, #0
   15746:	ldr	r3, [pc, #480]	; (15928 <_dtoa_r+0x8a8>)
   15748:	mov	r0, r6
   1574a:	mov	r1, r7
   1574c:	bl	122f4 <__aeabi_dcmplt>
   15750:	cmp	r0, #0
   15752:	bne.w	15d8a <_dtoa_r+0xd0a>
   15756:	mov	r0, sl
   15758:	bl	11d44 <__aeabi_i2d>
   1575c:	mov	r2, r6
   1575e:	mov	r3, r7
   15760:	bl	11e10 <__aeabi_dmul>
   15764:	ldr	r3, [pc, #452]	; (1592c <_dtoa_r+0x8ac>)
   15766:	movs	r2, #0
   15768:	bl	11aac <__adddf3>
   1576c:	ldr	r3, [sp, #32]
   1576e:	mov	r4, r0
   15770:	sub.w	r5, r1, #54525952	; 0x3400000
   15774:	cmp	r3, #0
   15776:	beq.w	15b30 <_dtoa_r+0xab0>
   1577a:	ldr	r3, [sp, #16]
   1577c:	str	r3, [sp, #88]	; 0x58
   1577e:	ldr	r3, [sp, #32]
   15780:	str	r3, [sp, #72]	; 0x48
   15782:	ldr	r3, [sp, #44]	; 0x2c
   15784:	cmp	r3, #0
   15786:	beq.w	15cb2 <_dtoa_r+0xc32>
   1578a:	ldr	r2, [sp, #72]	; 0x48
   1578c:	ldr	r3, [pc, #400]	; (15920 <_dtoa_r+0x8a0>)
   1578e:	ldr	r1, [pc, #416]	; (15930 <_dtoa_r+0x8b0>)
   15790:	add.w	r3, r3, r2, lsl #3
   15794:	ldrd	r2, r3, [r3, #-8]
   15798:	movs	r0, #0
   1579a:	bl	12064 <__aeabi_ddiv>
   1579e:	mov	r2, r4
   157a0:	mov	r3, r5
   157a2:	bl	11aa8 <__aeabi_dsub>
   157a6:	mov	sl, r0
   157a8:	mov	fp, r1
   157aa:	mov	r0, r6
   157ac:	mov	r1, r7
   157ae:	bl	12370 <__aeabi_d2iz>
   157b2:	mov	r4, r0
   157b4:	bl	11d44 <__aeabi_i2d>
   157b8:	mov	r2, r0
   157ba:	mov	r3, r1
   157bc:	mov	r0, r6
   157be:	mov	r1, r7
   157c0:	bl	11aa8 <__aeabi_dsub>
   157c4:	adds	r4, #48	; 0x30
   157c6:	ldr	r5, [sp, #36]	; 0x24
   157c8:	uxtb	r4, r4
   157ca:	mov	r6, r0
   157cc:	mov	r7, r1
   157ce:	strb	r4, [r5, #0]
   157d0:	mov	r2, r0
   157d2:	mov	r3, r1
   157d4:	mov	r0, sl
   157d6:	mov	r1, fp
   157d8:	adds	r5, #1
   157da:	bl	12330 <__aeabi_dcmpgt>
   157de:	cmp	r0, #0
   157e0:	bne.n	15884 <_dtoa_r+0x804>
   157e2:	mov	r2, r6
   157e4:	mov	r3, r7
   157e6:	movs	r0, #0
   157e8:	ldr	r1, [pc, #316]	; (15928 <_dtoa_r+0x8a8>)
   157ea:	bl	11aa8 <__aeabi_dsub>
   157ee:	mov	r2, r0
   157f0:	mov	r3, r1
   157f2:	mov	r0, sl
   157f4:	mov	r1, fp
   157f6:	bl	12330 <__aeabi_dcmpgt>
   157fa:	cmp	r0, #0
   157fc:	bne.w	15e10 <_dtoa_r+0xd90>
   15800:	ldr	r2, [sp, #72]	; 0x48
   15802:	cmp	r2, #1
   15804:	ble.w	15bf6 <_dtoa_r+0xb76>
   15808:	ldr	r3, [sp, #72]	; 0x48
   1580a:	ldr	r2, [sp, #36]	; 0x24
   1580c:	str.w	r8, [sp, #72]	; 0x48
   15810:	add	r3, r2
   15812:	mov	r8, r3
   15814:	b.n	15832 <_dtoa_r+0x7b2>
   15816:	movs	r0, #0
   15818:	ldr	r1, [pc, #268]	; (15928 <_dtoa_r+0x8a8>)
   1581a:	bl	11aa8 <__aeabi_dsub>
   1581e:	mov	r2, sl
   15820:	mov	r3, fp
   15822:	bl	122f4 <__aeabi_dcmplt>
   15826:	cmp	r0, #0
   15828:	bne.w	15e10 <_dtoa_r+0xd90>
   1582c:	cmp	r5, r8
   1582e:	beq.w	15bf2 <_dtoa_r+0xb72>
   15832:	mov	r0, sl
   15834:	mov	r1, fp
   15836:	movs	r2, #0
   15838:	ldr	r3, [pc, #248]	; (15934 <_dtoa_r+0x8b4>)
   1583a:	bl	11e10 <__aeabi_dmul>
   1583e:	movs	r2, #0
   15840:	ldr	r3, [pc, #240]	; (15934 <_dtoa_r+0x8b4>)
   15842:	mov	sl, r0
   15844:	mov	fp, r1
   15846:	mov	r0, r6
   15848:	mov	r1, r7
   1584a:	bl	11e10 <__aeabi_dmul>
   1584e:	mov	r7, r1
   15850:	mov	r6, r0
   15852:	bl	12370 <__aeabi_d2iz>
   15856:	mov	r4, r0
   15858:	bl	11d44 <__aeabi_i2d>
   1585c:	mov	r2, r0
   1585e:	mov	r3, r1
   15860:	mov	r0, r6
   15862:	mov	r1, r7
   15864:	bl	11aa8 <__aeabi_dsub>
   15868:	adds	r4, #48	; 0x30
   1586a:	uxtb	r4, r4
   1586c:	mov	r2, sl
   1586e:	mov	r3, fp
   15870:	strb.w	r4, [r5], #1
   15874:	mov	r6, r0
   15876:	mov	r7, r1
   15878:	bl	122f4 <__aeabi_dcmplt>
   1587c:	mov	r2, r6
   1587e:	mov	r3, r7
   15880:	cmp	r0, #0
   15882:	beq.n	15816 <_dtoa_r+0x796>
   15884:	ldr	r3, [sp, #88]	; 0x58
   15886:	str	r3, [sp, #16]
   15888:	b.n	15416 <_dtoa_r+0x396>
   1588a:	movs	r3, #0
   1588c:	str	r3, [sp, #44]	; 0x2c
   1588e:	ldr	r3, [sp, #20]
   15890:	cmp	r3, #0
   15892:	ble.w	15b96 <_dtoa_r+0xb16>
   15896:	mov	r5, r3
   15898:	mov	r4, r3
   1589a:	str	r3, [sp, #56]	; 0x38
   1589c:	str	r3, [sp, #32]
   1589e:	b.n	15696 <_dtoa_r+0x616>
   158a0:	movs	r3, #1
   158a2:	str	r3, [sp, #44]	; 0x2c
   158a4:	b.n	1588e <_dtoa_r+0x80e>
   158a6:	str	r4, [sp, #40]	; 0x28
   158a8:	ldr	r2, [sp, #24]
   158aa:	ldr	r1, [sp, #40]	; 0x28
   158ac:	mov	r0, r9
   158ae:	bl	16524 <__pow5mult>
   158b2:	mov	r4, r0
   158b4:	b.n	154d4 <_dtoa_r+0x454>
   158b6:	ldr	r3, [sp, #32]
   158b8:	cmp	r3, #0
   158ba:	bgt.w	152ba <_dtoa_r+0x23a>
   158be:	bne.w	15b60 <_dtoa_r+0xae0>
   158c2:	movs	r2, #0
   158c4:	ldr	r3, [pc, #112]	; (15938 <_dtoa_r+0x8b8>)
   158c6:	ldrd	r0, r1, [sp]
   158ca:	bl	11e10 <__aeabi_dmul>
   158ce:	mov	r3, fp
   158d0:	mov	r2, sl
   158d2:	bl	1231c <__aeabi_dcmpge>
   158d6:	ldr	r3, [sp, #32]
   158d8:	str	r3, [sp, #24]
   158da:	mov	r6, r3
   158dc:	cmp	r0, #0
   158de:	beq.w	15ab6 <_dtoa_r+0xa36>
   158e2:	ldr	r3, [sp, #20]
   158e4:	ldr	r5, [sp, #36]	; 0x24
   158e6:	mvns	r3, r3
   158e8:	str	r3, [sp, #16]
   158ea:	ldr	r1, [sp, #24]
   158ec:	mov	r0, r9
   158ee:	bl	162b0 <_Bfree>
   158f2:	cmp	r6, #0
   158f4:	beq.w	15416 <_dtoa_r+0x396>
   158f8:	b.n	1560e <_dtoa_r+0x58e>
   158fa:	ldr	r2, [sp, #60]	; 0x3c
   158fc:	cmp	r2, #0
   158fe:	beq.w	15d72 <_dtoa_r+0xcf2>
   15902:	addw	r3, r3, #1075	; 0x433
   15906:	ldr	r7, [sp, #24]
   15908:	ldr	r5, [sp, #28]
   1590a:	b.n	15466 <_dtoa_r+0x3e6>
   1590c:	movs	r0, #28
   1590e:	b.n	15526 <_dtoa_r+0x4a6>
   15910:	ldr	r3, [sp, #0]
   15912:	cmp	r3, #1
   15914:	ble.w	15e18 <_dtoa_r+0xd98>
   15918:	ldr	r7, [sp, #48]	; 0x30
   1591a:	movs	r0, #1
   1591c:	b.n	1550e <_dtoa_r+0x48e>
   1591e:	nop
   15920:	.word	0x00017888
   15924:	.word	0x00017950
   15928:	.word	0x3ff00000
   1592c:	.word	0x401c0000
   15930:	.word	0x3fe00000
   15934:	.word	0x40240000
   15938:	.word	0x40140000
   1593c:	mov	r1, r6
   1593e:	movs	r3, #0
   15940:	movs	r2, #10
   15942:	mov	r0, r9
   15944:	bl	162c4 <__multadd>
   15948:	ldr	r3, [sp, #56]	; 0x38
   1594a:	cmp	r3, #0
   1594c:	mov	r6, r0
   1594e:	ble.w	15e6c <_dtoa_r+0xdec>
   15952:	str	r3, [sp, #32]
   15954:	cmp	r5, #0
   15956:	ble.n	15964 <_dtoa_r+0x8e4>
   15958:	mov	r1, r6
   1595a:	mov	r2, r5
   1595c:	mov	r0, r9
   1595e:	bl	165c4 <__lshift>
   15962:	mov	r6, r0
   15964:	cmp	r7, #0
   15966:	bne.w	15c62 <_dtoa_r+0xbe2>
   1596a:	mov	r8, r6
   1596c:	ldr	r3, [sp, #32]
   1596e:	ldr	r2, [sp, #36]	; 0x24
   15970:	subs	r3, #1
   15972:	adds	r3, r2, r3
   15974:	str	r3, [sp, #32]
   15976:	and.w	r3, sl, #1
   1597a:	str	r3, [sp, #40]	; 0x28
   1597c:	mov	r7, r2
   1597e:	ldr.w	fp, [sp, #24]
   15982:	mov	r0, r4
   15984:	mov	r1, fp
   15986:	bl	14f54 <quorem>
   1598a:	mov	r1, r6
   1598c:	mov	r5, r0
   1598e:	mov	r0, r4
   15990:	bl	16674 <__mcmp>
   15994:	mov	r2, r8
   15996:	mov	r1, fp
   15998:	mov	sl, r0
   1599a:	mov	r0, r9
   1599c:	bl	166b8 <__mdiff>
   159a0:	ldr	r2, [r0, #12]
   159a2:	mov	fp, r0
   159a4:	add.w	r3, r5, #48	; 0x30
   159a8:	cmp	r2, #0
   159aa:	bne.n	15a40 <_dtoa_r+0x9c0>
   159ac:	mov	r1, r0
   159ae:	mov	r0, r4
   159b0:	str	r3, [sp, #28]
   159b2:	bl	16674 <__mcmp>
   159b6:	mov	r1, fp
   159b8:	str	r0, [sp, #20]
   159ba:	mov	r0, r9
   159bc:	bl	162b0 <_Bfree>
   159c0:	ldr	r2, [sp, #20]
   159c2:	ldr	r3, [sp, #28]
   159c4:	cbnz	r2, 159d2 <_dtoa_r+0x952>
   159c6:	ldr	r1, [sp, #0]
   159c8:	cbnz	r1, 159d2 <_dtoa_r+0x952>
   159ca:	ldr	r1, [sp, #40]	; 0x28
   159cc:	cmp	r1, #0
   159ce:	beq.w	15e3c <_dtoa_r+0xdbc>
   159d2:	cmp.w	sl, #0
   159d6:	blt.w	15ba0 <_dtoa_r+0xb20>
   159da:	bne.n	159e8 <_dtoa_r+0x968>
   159dc:	ldr	r1, [sp, #0]
   159de:	cbnz	r1, 159e8 <_dtoa_r+0x968>
   159e0:	ldr	r1, [sp, #40]	; 0x28
   159e2:	cmp	r1, #0
   159e4:	beq.w	15ba0 <_dtoa_r+0xb20>
   159e8:	cmp	r2, #0
   159ea:	bgt.w	15c8a <_dtoa_r+0xc0a>
   159ee:	ldr	r2, [sp, #32]
   159f0:	strb	r3, [r7, #0]
   159f2:	add.w	sl, r7, #1
   159f6:	cmp	r7, r2
   159f8:	mov	r5, sl
   159fa:	beq.w	15ca2 <_dtoa_r+0xc22>
   159fe:	mov	r1, r4
   15a00:	movs	r3, #0
   15a02:	movs	r2, #10
   15a04:	mov	r0, r9
   15a06:	bl	162c4 <__multadd>
   15a0a:	cmp	r6, r8
   15a0c:	mov	r4, r0
   15a0e:	mov	r1, r6
   15a10:	mov.w	r3, #0
   15a14:	mov.w	r2, #10
   15a18:	mov	r0, r9
   15a1a:	beq.n	15a34 <_dtoa_r+0x9b4>
   15a1c:	bl	162c4 <__multadd>
   15a20:	mov	r1, r8
   15a22:	mov	r6, r0
   15a24:	movs	r3, #0
   15a26:	movs	r2, #10
   15a28:	mov	r0, r9
   15a2a:	bl	162c4 <__multadd>
   15a2e:	mov	r7, sl
   15a30:	mov	r8, r0
   15a32:	b.n	1597e <_dtoa_r+0x8fe>
   15a34:	bl	162c4 <__multadd>
   15a38:	mov	r7, sl
   15a3a:	mov	r6, r0
   15a3c:	mov	r8, r0
   15a3e:	b.n	1597e <_dtoa_r+0x8fe>
   15a40:	mov	r1, r0
   15a42:	mov	r0, r9
   15a44:	str	r3, [sp, #20]
   15a46:	bl	162b0 <_Bfree>
   15a4a:	movs	r2, #1
   15a4c:	ldr	r3, [sp, #20]
   15a4e:	b.n	159d2 <_dtoa_r+0x952>
   15a50:	ldr	r1, [sp, #24]
   15a52:	mov	r0, r4
   15a54:	bl	16674 <__mcmp>
   15a58:	cmp	r0, #0
   15a5a:	bge.w	1555c <_dtoa_r+0x4dc>
   15a5e:	mov	r1, r4
   15a60:	ldr	r4, [sp, #16]
   15a62:	movs	r3, #0
   15a64:	subs	r4, #1
   15a66:	movs	r2, #10
   15a68:	mov	r0, r9
   15a6a:	str	r4, [sp, #16]
   15a6c:	bl	162c4 <__multadd>
   15a70:	ldr	r3, [sp, #44]	; 0x2c
   15a72:	mov	r4, r0
   15a74:	cmp	r3, #0
   15a76:	bne.w	1593c <_dtoa_r+0x8bc>
   15a7a:	ldr	r3, [sp, #56]	; 0x38
   15a7c:	cmp	r3, #0
   15a7e:	ble.w	15e5c <_dtoa_r+0xddc>
   15a82:	str	r3, [sp, #32]
   15a84:	b.n	1556c <_dtoa_r+0x4ec>
   15a86:	ldr	r4, [sp, #40]	; 0x28
   15a88:	b.n	154d4 <_dtoa_r+0x454>
   15a8a:	ldr	r3, [sp, #0]
   15a8c:	cmp	r3, #2
   15a8e:	ble.w	15564 <_dtoa_r+0x4e4>
   15a92:	ldr	r3, [sp, #32]
   15a94:	cmp	r3, #0
   15a96:	bne.w	15dd4 <_dtoa_r+0xd54>
   15a9a:	ldr	r1, [sp, #24]
   15a9c:	movs	r2, #5
   15a9e:	mov	r0, r9
   15aa0:	bl	162c4 <__multadd>
   15aa4:	mov	r1, r0
   15aa6:	str	r0, [sp, #24]
   15aa8:	mov	r0, r4
   15aaa:	bl	16674 <__mcmp>
   15aae:	cmp	r0, #0
   15ab0:	str	r4, [sp, #40]	; 0x28
   15ab2:	ble.w	158e2 <_dtoa_r+0x862>
   15ab6:	ldr	r2, [sp, #16]
   15ab8:	ldr	r1, [sp, #36]	; 0x24
   15aba:	movs	r3, #49	; 0x31
   15abc:	adds	r2, #1
   15abe:	str	r2, [sp, #16]
   15ac0:	strb	r3, [r1, #0]
   15ac2:	adds	r5, r1, #1
   15ac4:	b.n	158ea <_dtoa_r+0x86a>
   15ac6:	ldr	r2, [sp, #16]
   15ac8:	adds	r2, #1
   15aca:	str	r2, [sp, #16]
   15acc:	ldr	r2, [sp, #36]	; 0x24
   15ace:	movs	r3, #49	; 0x31
   15ad0:	strb	r3, [r2, #0]
   15ad2:	b.n	155ee <_dtoa_r+0x56e>
   15ad4:	movs	r3, #1
   15ad6:	str	r3, [sp, #44]	; 0x2c
   15ad8:	b.n	15680 <_dtoa_r+0x600>
   15ada:	ldr.w	r9, [sp, #20]
   15ade:	b.n	15416 <_dtoa_r+0x396>
   15ae0:	cmp.w	sl, #0
   15ae4:	bne.w	154fa <_dtoa_r+0x47a>
   15ae8:	ubfx	r3, fp, #0, #20
   15aec:	cmp	r3, #0
   15aee:	bne.w	15d6e <_dtoa_r+0xcee>
   15af2:	bic.w	r7, fp, #2147483648	; 0x80000000
   15af6:	lsrs	r7, r7, #20
   15af8:	lsls	r7, r7, #20
   15afa:	cbz	r7, 15b08 <_dtoa_r+0xa88>
   15afc:	ldr	r3, [sp, #28]
   15afe:	adds	r3, #1
   15b00:	str	r3, [sp, #28]
   15b02:	add.w	r8, r8, #1
   15b06:	movs	r7, #1
   15b08:	ldr	r3, [sp, #48]	; 0x30
   15b0a:	movs	r0, #1
   15b0c:	cmp	r3, #0
   15b0e:	beq.w	1550e <_dtoa_r+0x48e>
   15b12:	b.n	154fc <_dtoa_r+0x47c>
   15b14:	mov	r0, sl
   15b16:	bl	11d44 <__aeabi_i2d>
   15b1a:	mov	r2, r6
   15b1c:	mov	r3, r7
   15b1e:	bl	11e10 <__aeabi_dmul>
   15b22:	movs	r2, #0
   15b24:	ldr	r3, [pc, #764]	; (15e24 <_dtoa_r+0xda4>)
   15b26:	bl	11aac <__adddf3>
   15b2a:	mov	r4, r0
   15b2c:	sub.w	r5, r1, #54525952	; 0x3400000
   15b30:	mov	r0, r6
   15b32:	mov	r1, r7
   15b34:	movs	r2, #0
   15b36:	ldr	r3, [pc, #752]	; (15e28 <_dtoa_r+0xda8>)
   15b38:	bl	11aa8 <__aeabi_dsub>
   15b3c:	mov	r2, r4
   15b3e:	mov	r3, r5
   15b40:	mov	r6, r0
   15b42:	mov	r7, r1
   15b44:	bl	12330 <__aeabi_dcmpgt>
   15b48:	cmp	r0, #0
   15b4a:	bne.w	15caa <_dtoa_r+0xc2a>
   15b4e:	mov	r2, r4
   15b50:	add.w	r3, r5, #2147483648	; 0x80000000
   15b54:	mov	r0, r6
   15b56:	mov	r1, r7
   15b58:	bl	122f4 <__aeabi_dcmplt>
   15b5c:	cmp	r0, #0
   15b5e:	beq.n	15bf6 <_dtoa_r+0xb76>
   15b60:	movs	r3, #0
   15b62:	str	r3, [sp, #24]
   15b64:	mov	r6, r3
   15b66:	b.n	158e2 <_dtoa_r+0x862>
   15b68:	ldr	r0, [sp, #36]	; 0x24
   15b6a:	b.w	150f2 <_dtoa_r+0x72>
   15b6e:	ldr	r3, [sp, #24]
   15b70:	ldr	r2, [sp, #48]	; 0x30
   15b72:	str	r7, [sp, #24]
   15b74:	subs	r3, r7, r3
   15b76:	add	r2, r3
   15b78:	str	r2, [sp, #48]	; 0x30
   15b7a:	movs	r7, #0
   15b7c:	b.n	1545a <_dtoa_r+0x3da>
   15b7e:	vldr	d7, [sp, #64]	; 0x40
   15b82:	mov.w	sl, #2
   15b86:	vstr	d7, [sp, #72]	; 0x48
   15b8a:	b.n	1570c <_dtoa_r+0x68c>
   15b8c:	mov	r4, r3
   15b8e:	movs	r1, #0
   15b90:	str.w	r1, [r9, #68]	; 0x44
   15b94:	b.n	156b8 <_dtoa_r+0x638>
   15b96:	movs	r4, #1
   15b98:	str	r4, [sp, #56]	; 0x38
   15b9a:	str	r4, [sp, #32]
   15b9c:	str	r4, [sp, #20]
   15b9e:	b.n	15b8e <_dtoa_r+0xb0e>
   15ba0:	cmp	r2, #0
   15ba2:	mov	sl, r3
   15ba4:	ble.n	15bca <_dtoa_r+0xb4a>
   15ba6:	mov	r1, r4
   15ba8:	movs	r2, #1
   15baa:	mov	r0, r9
   15bac:	bl	165c4 <__lshift>
   15bb0:	ldr	r1, [sp, #24]
   15bb2:	mov	r4, r0
   15bb4:	bl	16674 <__mcmp>
   15bb8:	cmp	r0, #0
   15bba:	ble.w	15e4e <_dtoa_r+0xdce>
   15bbe:	cmp.w	sl, #57	; 0x39
   15bc2:	beq.w	15dd8 <_dtoa_r+0xd58>
   15bc6:	add.w	sl, r5, #49	; 0x31
   15bca:	mov	fp, r6
   15bcc:	strb.w	sl, [r7]
   15bd0:	adds	r5, r7, #1
   15bd2:	mov	r6, r8
   15bd4:	str	r4, [sp, #40]	; 0x28
   15bd6:	b.n	155ee <_dtoa_r+0x56e>
   15bd8:	bne.n	15be4 <_dtoa_r+0xb64>
   15bda:	tst.w	sl, #1
   15bde:	beq.n	15be4 <_dtoa_r+0xb64>
   15be0:	b.n	155ce <_dtoa_r+0x54e>
   15be2:	mov	r5, r2
   15be4:	ldrb.w	r3, [r5, #-1]
   15be8:	cmp	r3, #48	; 0x30
   15bea:	add.w	r2, r5, #4294967295
   15bee:	beq.n	15be2 <_dtoa_r+0xb62>
   15bf0:	b.n	155ee <_dtoa_r+0x56e>
   15bf2:	ldr.w	r8, [sp, #72]	; 0x48
   15bf6:	ldrd	sl, fp, [sp, #64]	; 0x40
   15bfa:	b.w	15294 <_dtoa_r+0x214>
   15bfe:	ldr	r1, [sp, #36]	; 0x24
   15c00:	movs	r2, #48	; 0x30
   15c02:	strb	r2, [r1, #0]
   15c04:	ldr	r2, [sp, #16]
   15c06:	ldrb.w	r4, [r5, #-1]
   15c0a:	adds	r2, #1
   15c0c:	str	r2, [sp, #16]
   15c0e:	b.n	15412 <_dtoa_r+0x392>
   15c10:	ldr	r3, [sp, #16]
   15c12:	negs	r4, r3
   15c14:	cmp	r4, #0
   15c16:	beq.w	15d80 <_dtoa_r+0xd00>
   15c1a:	ldr	r3, [pc, #528]	; (15e2c <_dtoa_r+0xdac>)
   15c1c:	and.w	r2, r4, #15
   15c20:	add.w	r3, r3, r2, lsl #3
   15c24:	ldrd	r2, r3, [r3]
   15c28:	ldrd	r0, r1, [sp, #64]	; 0x40
   15c2c:	bl	11e10 <__aeabi_dmul>
   15c30:	asrs	r4, r4, #4
   15c32:	mov	r6, r0
   15c34:	mov	r7, r1
   15c36:	beq.w	15e66 <_dtoa_r+0xde6>
   15c3a:	ldr	r5, [pc, #500]	; (15e30 <_dtoa_r+0xdb0>)
   15c3c:	mov.w	sl, #2
   15c40:	lsls	r2, r4, #31
   15c42:	bpl.n	15c58 <_dtoa_r+0xbd8>
   15c44:	mov	r0, r6
   15c46:	mov	r1, r7
   15c48:	ldrd	r2, r3, [r5]
   15c4c:	bl	11e10 <__aeabi_dmul>
   15c50:	add.w	sl, sl, #1
   15c54:	mov	r6, r0
   15c56:	mov	r7, r1
   15c58:	asrs	r4, r4, #1
   15c5a:	add.w	r5, r5, #8
   15c5e:	bne.n	15c40 <_dtoa_r+0xbc0>
   15c60:	b.n	15740 <_dtoa_r+0x6c0>
   15c62:	ldr	r1, [r6, #4]
   15c64:	mov	r0, r9
   15c66:	bl	16264 <_Balloc>
   15c6a:	ldr	r3, [r6, #16]
   15c6c:	adds	r2, r3, #2
   15c6e:	mov	r5, r0
   15c70:	lsls	r2, r2, #2
   15c72:	add.w	r1, r6, #12
   15c76:	adds	r0, #12
   15c78:	bl	fc48 <memcpy>
   15c7c:	mov	r1, r5
   15c7e:	movs	r2, #1
   15c80:	mov	r0, r9
   15c82:	bl	165c4 <__lshift>
   15c86:	mov	r8, r0
   15c88:	b.n	1596c <_dtoa_r+0x8ec>
   15c8a:	cmp	r3, #57	; 0x39
   15c8c:	beq.w	15dd8 <_dtoa_r+0xd58>
   15c90:	add.w	sl, r3, #1
   15c94:	mov	fp, r6
   15c96:	strb.w	sl, [r7]
   15c9a:	adds	r5, r7, #1
   15c9c:	mov	r6, r8
   15c9e:	str	r4, [sp, #40]	; 0x28
   15ca0:	b.n	155ee <_dtoa_r+0x56e>
   15ca2:	mov	fp, r6
   15ca4:	mov	sl, r3
   15ca6:	mov	r6, r8
   15ca8:	b.n	155b6 <_dtoa_r+0x536>
   15caa:	movs	r3, #0
   15cac:	str	r3, [sp, #24]
   15cae:	mov	r6, r3
   15cb0:	b.n	15ab6 <_dtoa_r+0xa36>
   15cb2:	ldr	r3, [sp, #72]	; 0x48
   15cb4:	ldr	r1, [pc, #372]	; (15e2c <_dtoa_r+0xdac>)
   15cb6:	subs	r2, r3, #1
   15cb8:	add.w	r1, r1, r2, lsl #3
   15cbc:	mov	r3, r5
   15cbe:	str	r2, [sp, #92]	; 0x5c
   15cc0:	ldrd	r0, r1, [r1]
   15cc4:	mov	r2, r4
   15cc6:	bl	11e10 <__aeabi_dmul>
   15cca:	strd	r0, r1, [sp, #80]	; 0x50
   15cce:	mov	r1, r7
   15cd0:	mov	r0, r6
   15cd2:	bl	12370 <__aeabi_d2iz>
   15cd6:	mov	r4, r0
   15cd8:	bl	11d44 <__aeabi_i2d>
   15cdc:	mov	r3, r1
   15cde:	mov	r2, r0
   15ce0:	mov	r1, r7
   15ce2:	mov	r0, r6
   15ce4:	bl	11aa8 <__aeabi_dsub>
   15ce8:	ldr	r3, [sp, #72]	; 0x48
   15cea:	mov	r7, r1
   15cec:	ldr	r1, [sp, #36]	; 0x24
   15cee:	adds	r4, #48	; 0x30
   15cf0:	cmp	r3, #1
   15cf2:	mov	r6, r0
   15cf4:	strb	r4, [r1, #0]
   15cf6:	add.w	r5, r1, #1
   15cfa:	beq.n	15d3e <_dtoa_r+0xcbe>
   15cfc:	ldr	r3, [sp, #72]	; 0x48
   15cfe:	ldr	r2, [sp, #36]	; 0x24
   15d00:	add	r3, r2
   15d02:	mov	sl, r3
   15d04:	mov	fp, r5
   15d06:	movs	r2, #0
   15d08:	ldr	r3, [pc, #296]	; (15e34 <_dtoa_r+0xdb4>)
   15d0a:	mov	r0, r6
   15d0c:	mov	r1, r7
   15d0e:	bl	11e10 <__aeabi_dmul>
   15d12:	mov	r7, r1
   15d14:	mov	r6, r0
   15d16:	bl	12370 <__aeabi_d2iz>
   15d1a:	mov	r4, r0
   15d1c:	bl	11d44 <__aeabi_i2d>
   15d20:	adds	r4, #48	; 0x30
   15d22:	mov	r2, r0
   15d24:	mov	r3, r1
   15d26:	mov	r0, r6
   15d28:	mov	r1, r7
   15d2a:	bl	11aa8 <__aeabi_dsub>
   15d2e:	strb.w	r4, [fp], #1
   15d32:	cmp	sl, fp
   15d34:	mov	r6, r0
   15d36:	mov	r7, r1
   15d38:	bne.n	15d06 <_dtoa_r+0xc86>
   15d3a:	ldr	r3, [sp, #92]	; 0x5c
   15d3c:	add	r5, r3
   15d3e:	movs	r2, #0
   15d40:	ldr	r3, [pc, #244]	; (15e38 <_dtoa_r+0xdb8>)
   15d42:	ldrd	r0, r1, [sp, #80]	; 0x50
   15d46:	bl	11aac <__adddf3>
   15d4a:	mov	r2, r6
   15d4c:	mov	r3, r7
   15d4e:	bl	122f4 <__aeabi_dcmplt>
   15d52:	cmp	r0, #0
   15d54:	beq.n	15de8 <_dtoa_r+0xd68>
   15d56:	ldr	r3, [sp, #88]	; 0x58
   15d58:	str	r3, [sp, #16]
   15d5a:	ldrb.w	r4, [r5, #-1]
   15d5e:	b.w	153fa <_dtoa_r+0x37a>
   15d62:	ldr	r3, [sp, #28]
   15d64:	ldr	r2, [sp, #32]
   15d66:	subs	r5, r3, r2
   15d68:	movs	r3, #0
   15d6a:	b.w	15466 <_dtoa_r+0x3e6>
   15d6e:	movs	r7, #0
   15d70:	b.n	15b08 <_dtoa_r+0xa88>
   15d72:	ldr	r3, [sp, #96]	; 0x60
   15d74:	ldr	r7, [sp, #24]
   15d76:	ldr	r5, [sp, #28]
   15d78:	rsb	r3, r3, #54	; 0x36
   15d7c:	b.w	15466 <_dtoa_r+0x3e6>
   15d80:	ldrd	r6, r7, [sp, #64]	; 0x40
   15d84:	mov.w	sl, #2
   15d88:	b.n	15740 <_dtoa_r+0x6c0>
   15d8a:	ldr	r3, [sp, #32]
   15d8c:	cmp	r3, #0
   15d8e:	beq.w	15b14 <_dtoa_r+0xa94>
   15d92:	ldr	r3, [sp, #56]	; 0x38
   15d94:	cmp	r3, #0
   15d96:	ble.w	15bf6 <_dtoa_r+0xb76>
   15d9a:	movs	r2, #0
   15d9c:	ldr	r3, [pc, #148]	; (15e34 <_dtoa_r+0xdb4>)
   15d9e:	mov	r0, r6
   15da0:	mov	r1, r7
   15da2:	bl	11e10 <__aeabi_dmul>
   15da6:	mov	r6, r0
   15da8:	mov	r7, r1
   15daa:	add.w	r0, sl, #1
   15dae:	bl	11d44 <__aeabi_i2d>
   15db2:	mov	r2, r6
   15db4:	mov	r3, r7
   15db6:	bl	11e10 <__aeabi_dmul>
   15dba:	movs	r2, #0
   15dbc:	ldr	r3, [pc, #100]	; (15e24 <_dtoa_r+0xda4>)
   15dbe:	bl	11aac <__adddf3>
   15dc2:	ldr	r2, [sp, #16]
   15dc4:	ldr	r3, [sp, #56]	; 0x38
   15dc6:	str	r3, [sp, #72]	; 0x48
   15dc8:	subs	r2, #1
   15dca:	mov	r4, r0
   15dcc:	sub.w	r5, r1, #54525952	; 0x3400000
   15dd0:	str	r2, [sp, #88]	; 0x58
   15dd2:	b.n	15782 <_dtoa_r+0x702>
   15dd4:	str	r4, [sp, #40]	; 0x28
   15dd6:	b.n	158e2 <_dtoa_r+0x862>
   15dd8:	movs	r2, #57	; 0x39
   15dda:	mov	fp, r6
   15ddc:	str	r4, [sp, #40]	; 0x28
   15dde:	mov	r6, r8
   15de0:	strb	r2, [r7, #0]
   15de2:	adds	r5, r7, #1
   15de4:	b.w	155d2 <_dtoa_r+0x552>
   15de8:	ldrd	r2, r3, [sp, #80]	; 0x50
   15dec:	movs	r0, #0
   15dee:	ldr	r1, [pc, #72]	; (15e38 <_dtoa_r+0xdb8>)
   15df0:	bl	11aa8 <__aeabi_dsub>
   15df4:	mov	r2, r6
   15df6:	mov	r3, r7
   15df8:	bl	12330 <__aeabi_dcmpgt>
   15dfc:	cbnz	r0, 15e02 <_dtoa_r+0xd82>
   15dfe:	b.n	15bf6 <_dtoa_r+0xb76>
   15e00:	mov	r5, r2
   15e02:	ldrb.w	r3, [r5, #-1]
   15e06:	cmp	r3, #48	; 0x30
   15e08:	add.w	r2, r5, #4294967295
   15e0c:	beq.n	15e00 <_dtoa_r+0xd80>
   15e0e:	b.n	15884 <_dtoa_r+0x804>
   15e10:	ldr	r3, [sp, #88]	; 0x58
   15e12:	str	r3, [sp, #16]
   15e14:	b.w	153fa <_dtoa_r+0x37a>
   15e18:	cmp.w	sl, #0
   15e1c:	bne.w	15918 <_dtoa_r+0x898>
   15e20:	b.n	15ae8 <_dtoa_r+0xa68>
   15e22:	nop
   15e24:	.word	0x401c0000
   15e28:	.word	0x40140000
   15e2c:	.word	0x00017888
   15e30:	.word	0x00017950
   15e34:	.word	0x40240000
   15e38:	.word	0x3fe00000
   15e3c:	cmp	r3, #57	; 0x39
   15e3e:	mov	fp, sl
   15e40:	mov	sl, r3
   15e42:	beq.n	15dd8 <_dtoa_r+0xd58>
   15e44:	cmp.w	fp, #0
   15e48:	bgt.w	15bc6 <_dtoa_r+0xb46>
   15e4c:	b.n	15bca <_dtoa_r+0xb4a>
   15e4e:	bne.w	15bca <_dtoa_r+0xb4a>
   15e52:	tst.w	sl, #1
   15e56:	beq.w	15bca <_dtoa_r+0xb4a>
   15e5a:	b.n	15bbe <_dtoa_r+0xb3e>
   15e5c:	ldr	r3, [sp, #0]
   15e5e:	cmp	r3, #2
   15e60:	bgt.n	15eae <_dtoa_r+0xe2e>
   15e62:	ldr	r3, [sp, #56]	; 0x38
   15e64:	b.n	15a82 <_dtoa_r+0xa02>
   15e66:	mov.w	sl, #2
   15e6a:	b.n	15740 <_dtoa_r+0x6c0>
   15e6c:	ldr	r3, [sp, #0]
   15e6e:	cmp	r3, #2
   15e70:	bgt.n	15eae <_dtoa_r+0xe2e>
   15e72:	ldr	r3, [sp, #56]	; 0x38
   15e74:	b.n	15952 <_dtoa_r+0x8d2>
   15e76:	movs	r4, #0
   15e78:	str.w	r4, [r9, #68]	; 0x44
   15e7c:	mov	r1, r4
   15e7e:	mov	r0, r9
   15e80:	bl	16264 <_Balloc>
   15e84:	mov.w	r3, #4294967295
   15e88:	str	r3, [sp, #32]
   15e8a:	str	r3, [sp, #56]	; 0x38
   15e8c:	movs	r3, #1
   15e8e:	str	r0, [sp, #36]	; 0x24
   15e90:	str	r4, [sp, #20]
   15e92:	str.w	r0, [r9, #64]	; 0x40
   15e96:	str	r3, [sp, #44]	; 0x2c
   15e98:	b.w	15294 <_dtoa_r+0x214>
   15e9c:	beq.w	15530 <_dtoa_r+0x4b0>
   15ea0:	rsb	r0, r0, #60	; 0x3c
   15ea4:	b.w	15526 <_dtoa_r+0x4a6>
   15ea8:	movs	r6, #1
   15eaa:	b.w	15226 <_dtoa_r+0x1a6>
   15eae:	ldr	r3, [sp, #56]	; 0x38
   15eb0:	str	r3, [sp, #32]
   15eb2:	b.n	15a92 <_dtoa_r+0xa12>

00015eb4 <fcvtbuf>:
   15eb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15eb8:	vpush	{d8}
   15ebc:	vmov.f32	s16, s0
   15ec0:	vmov.f32	s17, s1
   15ec4:	ldr	r5, [pc, #224]	; (15fa8 <fcvtbuf+0xf4>)
   15ec6:	sub	sp, #20
   15ec8:	ldr	r7, [r5, #0]
   15eca:	mov	r4, r0
   15ecc:	mov	r6, r1
   15ece:	mov	r8, r2
   15ed0:	mov	r5, r3
   15ed2:	cmp	r3, #0
   15ed4:	beq.n	15f72 <fcvtbuf+0xbe>
   15ed6:	movs	r2, #0
   15ed8:	ldr	r3, [pc, #208]	; (15fac <fcvtbuf+0xf8>)
   15eda:	vmov	r0, r1, d8
   15ede:	bl	122f4 <__aeabi_dcmplt>
   15ee2:	cbnz	r0, 15f44 <fcvtbuf+0x90>
   15ee4:	vmov.f32	s0, s16
   15ee8:	vmov.f32	s1, s17
   15eec:	add	r3, sp, #12
   15eee:	str	r3, [sp, #4]
   15ef0:	str.w	r8, [sp]
   15ef4:	mov	r0, r7
   15ef6:	mov	r3, r6
   15ef8:	mov	r2, r4
   15efa:	movs	r1, #3
   15efc:	bl	15080 <_dtoa_r>
   15f00:	ldr	r3, [sp, #12]
   15f02:	ldr	r1, [r6, #0]
   15f04:	cmp	r0, r3
   15f06:	rsb	r1, r1, #0
   15f0a:	bcs.n	15f80 <fcvtbuf+0xcc>
   15f0c:	subs	r1, r1, r5
   15f0e:	mov	r3, r5
   15f10:	ldrb.w	r2, [r0], #1
   15f14:	strb.w	r2, [r3], #1
   15f18:	ldr	r2, [sp, #12]
   15f1a:	cmp	r2, r0
   15f1c:	add.w	r6, r3, r1
   15f20:	bhi.n	15f10 <fcvtbuf+0x5c>
   15f22:	cmp	r4, r6
   15f24:	ble.n	15f86 <fcvtbuf+0xd2>
   15f26:	subs	r2, r4, r6
   15f28:	add	r2, r3
   15f2a:	movs	r1, #48	; 0x30
   15f2c:	strb.w	r1, [r3], #1
   15f30:	cmp	r2, r3
   15f32:	bne.n	15f2c <fcvtbuf+0x78>
   15f34:	movs	r3, #0
   15f36:	strb	r3, [r2, #0]
   15f38:	mov	r0, r5
   15f3a:	add	sp, #20
   15f3c:	vpop	{d8}
   15f40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15f44:	movs	r2, #0
   15f46:	ldr	r3, [pc, #104]	; (15fb0 <fcvtbuf+0xfc>)
   15f48:	vmov	r0, r1, d8
   15f4c:	bl	12330 <__aeabi_dcmpgt>
   15f50:	cmp	r0, #0
   15f52:	beq.n	15ee4 <fcvtbuf+0x30>
   15f54:	vmov.f32	s0, s16
   15f58:	vmov.f32	s1, s17
   15f5c:	add	r3, sp, #12
   15f5e:	str	r3, [sp, #4]
   15f60:	str.w	r8, [sp]
   15f64:	mov	r0, r7
   15f66:	mov	r3, r6
   15f68:	mov	r2, r4
   15f6a:	movs	r1, #2
   15f6c:	bl	15080 <_dtoa_r>
   15f70:	b.n	15f00 <fcvtbuf+0x4c>
   15f72:	ldr	r2, [r7, #80]	; 0x50
   15f74:	add.w	r3, r0, #35	; 0x23
   15f78:	cmp	r2, r3
   15f7a:	ble.n	15f8a <fcvtbuf+0xd6>
   15f7c:	ldr	r5, [r7, #84]	; 0x54
   15f7e:	b.n	15ed6 <fcvtbuf+0x22>
   15f80:	mov	r6, r1
   15f82:	mov	r3, r5
   15f84:	b.n	15f22 <fcvtbuf+0x6e>
   15f86:	mov	r2, r3
   15f88:	b.n	15f34 <fcvtbuf+0x80>
   15f8a:	add.w	r9, r0, #36	; 0x24
   15f8e:	mov	r2, r9
   15f90:	ldr	r1, [r7, #84]	; 0x54
   15f92:	mov	r0, r7
   15f94:	bl	12ff0 <_realloc_r>
   15f98:	mov	r5, r0
   15f9a:	cmp	r0, #0
   15f9c:	beq.n	15f38 <fcvtbuf+0x84>
   15f9e:	str.w	r9, [r7, #80]	; 0x50
   15fa2:	str	r0, [r7, #84]	; 0x54
   15fa4:	b.n	15ed6 <fcvtbuf+0x22>
   15fa6:	nop
   15fa8:	.word	0x1fff0f40
   15fac:	.word	0x3ff00000
   15fb0:	.word	0xbff00000

00015fb4 <__libc_fini_array>:
   15fb4:	push	{r3, r4, r5, lr}
   15fb6:	ldr	r5, [pc, #28]	; (15fd4 <__libc_fini_array+0x20>)
   15fb8:	ldr	r4, [pc, #28]	; (15fd8 <__libc_fini_array+0x24>)
   15fba:	subs	r4, r5, r4
   15fbc:	asrs	r4, r4, #2
   15fbe:	beq.n	15fcc <__libc_fini_array+0x18>
   15fc0:	subs	r4, #1
   15fc2:	ldr.w	r3, [r5, #-4]!
   15fc6:	blx	r3
   15fc8:	cmp	r4, #0
   15fca:	bne.n	15fc0 <__libc_fini_array+0xc>
   15fcc:	ldmia.w	sp!, {r3, r4, r5, lr}
   15fd0:	b.w	179a0 <__init_array_end>
	...

00015fdc <_malloc_trim_r>:
   15fdc:	push	{r3, r4, r5, r6, r7, lr}
   15fde:	ldr	r7, [pc, #140]	; (1606c <_malloc_trim_r+0x90>)
   15fe0:	mov	r4, r1
   15fe2:	mov	r6, r0
   15fe4:	bl	12fe8 <__malloc_lock>
   15fe8:	ldr	r3, [r7, #8]
   15fea:	ldr	r5, [r3, #4]
   15fec:	bic.w	r5, r5, #3
   15ff0:	subs	r1, r5, r4
   15ff2:	addw	r1, r1, #4079	; 0xfef
   15ff6:	bic.w	r1, r1, #4080	; 0xff0
   15ffa:	bic.w	r1, r1, #15
   15ffe:	sub.w	r4, r1, #4096	; 0x1000
   16002:	cmp.w	r4, #4096	; 0x1000
   16006:	blt.n	16018 <_malloc_trim_r+0x3c>
   16008:	movs	r1, #0
   1600a:	mov	r0, r6
   1600c:	bl	133d0 <_sbrk_r>
   16010:	ldr	r3, [r7, #8]
   16012:	add	r3, r5
   16014:	cmp	r0, r3
   16016:	beq.n	16022 <_malloc_trim_r+0x46>
   16018:	mov	r0, r6
   1601a:	bl	12fec <__malloc_unlock>
   1601e:	movs	r0, #0
   16020:	pop	{r3, r4, r5, r6, r7, pc}
   16022:	negs	r1, r4
   16024:	mov	r0, r6
   16026:	bl	133d0 <_sbrk_r>
   1602a:	adds	r0, #1
   1602c:	beq.n	1604a <_malloc_trim_r+0x6e>
   1602e:	ldr	r3, [pc, #64]	; (16070 <_malloc_trim_r+0x94>)
   16030:	ldr	r2, [r7, #8]
   16032:	ldr	r1, [r3, #0]
   16034:	subs	r5, r5, r4
   16036:	orr.w	r5, r5, #1
   1603a:	mov	r0, r6
   1603c:	subs	r1, r1, r4
   1603e:	str	r5, [r2, #4]
   16040:	str	r1, [r3, #0]
   16042:	bl	12fec <__malloc_unlock>
   16046:	movs	r0, #1
   16048:	pop	{r3, r4, r5, r6, r7, pc}
   1604a:	movs	r1, #0
   1604c:	mov	r0, r6
   1604e:	bl	133d0 <_sbrk_r>
   16052:	ldr	r2, [r7, #8]
   16054:	subs	r3, r0, r2
   16056:	cmp	r3, #15
   16058:	ble.n	16018 <_malloc_trim_r+0x3c>
   1605a:	ldr	r4, [pc, #24]	; (16074 <_malloc_trim_r+0x98>)
   1605c:	ldr	r1, [pc, #16]	; (16070 <_malloc_trim_r+0x94>)
   1605e:	ldr	r4, [r4, #0]
   16060:	orr.w	r3, r3, #1
   16064:	subs	r0, r0, r4
   16066:	str	r3, [r2, #4]
   16068:	str	r0, [r1, #0]
   1606a:	b.n	16018 <_malloc_trim_r+0x3c>
   1606c:	.word	0x1fff10b0
   16070:	.word	0x1fff2604
   16074:	.word	0x1fff14bc

00016078 <_free_r>:
   16078:	cmp	r1, #0
   1607a:	beq.n	16108 <_free_r+0x90>
   1607c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16080:	mov	r5, r1
   16082:	mov	r8, r0
   16084:	bl	12fe8 <__malloc_lock>
   16088:	ldr.w	r7, [r5, #-4]
   1608c:	ldr	r1, [pc, #424]	; (16238 <_free_r+0x1c0>)
   1608e:	bic.w	r3, r7, #1
   16092:	sub.w	r4, r5, #8
   16096:	adds	r2, r4, r3
   16098:	ldr	r6, [r1, #8]
   1609a:	ldr	r0, [r2, #4]
   1609c:	cmp	r2, r6
   1609e:	bic.w	r0, r0, #3
   160a2:	beq.n	1616a <_free_r+0xf2>
   160a4:	lsls	r6, r7, #31
   160a6:	str	r0, [r2, #4]
   160a8:	bmi.n	160c2 <_free_r+0x4a>
   160aa:	ldr.w	r7, [r5, #-8]
   160ae:	subs	r4, r4, r7
   160b0:	add.w	lr, r1, #8
   160b4:	ldr	r5, [r4, #8]
   160b6:	cmp	r5, lr
   160b8:	add	r3, r7
   160ba:	beq.n	1619c <_free_r+0x124>
   160bc:	ldr	r7, [r4, #12]
   160be:	str	r7, [r5, #12]
   160c0:	str	r5, [r7, #8]
   160c2:	adds	r5, r2, r0
   160c4:	ldr	r5, [r5, #4]
   160c6:	lsls	r5, r5, #31
   160c8:	bpl.n	16150 <_free_r+0xd8>
   160ca:	orr.w	r2, r3, #1
   160ce:	str	r2, [r4, #4]
   160d0:	str	r3, [r4, r3]
   160d2:	cmp.w	r3, #512	; 0x200
   160d6:	bcs.n	1610a <_free_r+0x92>
   160d8:	lsrs	r3, r3, #3
   160da:	adds	r2, r3, #1
   160dc:	ldr	r5, [r1, #4]
   160de:	ldr.w	r7, [r1, r2, lsl #3]
   160e2:	str	r7, [r4, #8]
   160e4:	movs	r0, #1
   160e6:	asrs	r3, r3, #2
   160e8:	lsl.w	r3, r0, r3
   160ec:	add.w	r0, r1, r2, lsl #3
   160f0:	orrs	r5, r3
   160f2:	subs	r0, #8
   160f4:	str	r0, [r4, #12]
   160f6:	str	r5, [r1, #4]
   160f8:	str.w	r4, [r1, r2, lsl #3]
   160fc:	str	r4, [r7, #12]
   160fe:	mov	r0, r8
   16100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16104:	b.w	12fec <__malloc_unlock>
   16108:	bx	lr
   1610a:	lsrs	r2, r3, #9
   1610c:	cmp	r2, #4
   1610e:	bhi.n	161b8 <_free_r+0x140>
   16110:	lsrs	r2, r3, #6
   16112:	add.w	r7, r2, #57	; 0x39
   16116:	lsls	r7, r7, #1
   16118:	add.w	r5, r2, #56	; 0x38
   1611c:	add.w	r0, r1, r7, lsl #2
   16120:	ldr.w	r2, [r1, r7, lsl #2]
   16124:	ldr	r1, [pc, #272]	; (16238 <_free_r+0x1c0>)
   16126:	subs	r0, #8
   16128:	cmp	r0, r2
   1612a:	beq.n	161c8 <_free_r+0x150>
   1612c:	ldr	r1, [r2, #4]
   1612e:	bic.w	r1, r1, #3
   16132:	cmp	r3, r1
   16134:	bcs.n	1613c <_free_r+0xc4>
   16136:	ldr	r2, [r2, #8]
   16138:	cmp	r0, r2
   1613a:	bne.n	1612c <_free_r+0xb4>
   1613c:	ldr	r0, [r2, #12]
   1613e:	str	r0, [r4, #12]
   16140:	str	r2, [r4, #8]
   16142:	str	r4, [r0, #8]
   16144:	str	r4, [r2, #12]
   16146:	mov	r0, r8
   16148:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1614c:	b.w	12fec <__malloc_unlock>
   16150:	ldr	r5, [r2, #8]
   16152:	ldr	r7, [pc, #232]	; (1623c <_free_r+0x1c4>)
   16154:	cmp	r5, r7
   16156:	add	r3, r0
   16158:	beq.n	161da <_free_r+0x162>
   1615a:	ldr	r0, [r2, #12]
   1615c:	str	r0, [r5, #12]
   1615e:	orr.w	r2, r3, #1
   16162:	str	r5, [r0, #8]
   16164:	str	r2, [r4, #4]
   16166:	str	r3, [r4, r3]
   16168:	b.n	160d2 <_free_r+0x5a>
   1616a:	lsls	r7, r7, #31
   1616c:	add	r3, r0
   1616e:	bmi.n	16180 <_free_r+0x108>
   16170:	ldr.w	r2, [r5, #-8]
   16174:	subs	r4, r4, r2
   16176:	add	r3, r2
   16178:	ldr	r0, [r4, #8]
   1617a:	ldr	r2, [r4, #12]
   1617c:	str	r2, [r0, #12]
   1617e:	str	r0, [r2, #8]
   16180:	ldr	r2, [pc, #188]	; (16240 <_free_r+0x1c8>)
   16182:	ldr	r2, [r2, #0]
   16184:	orr.w	r0, r3, #1
   16188:	cmp	r3, r2
   1618a:	str	r0, [r4, #4]
   1618c:	str	r4, [r1, #8]
   1618e:	bcc.n	160fe <_free_r+0x86>
   16190:	ldr	r3, [pc, #176]	; (16244 <_free_r+0x1cc>)
   16192:	mov	r0, r8
   16194:	ldr	r1, [r3, #0]
   16196:	bl	15fdc <_malloc_trim_r>
   1619a:	b.n	160fe <_free_r+0x86>
   1619c:	adds	r1, r2, r0
   1619e:	ldr	r1, [r1, #4]
   161a0:	lsls	r1, r1, #31
   161a2:	bmi.n	1622e <_free_r+0x1b6>
   161a4:	ldr	r1, [r2, #8]
   161a6:	ldr	r2, [r2, #12]
   161a8:	str	r2, [r1, #12]
   161aa:	add	r3, r0
   161ac:	orr.w	r0, r3, #1
   161b0:	str	r1, [r2, #8]
   161b2:	str	r0, [r4, #4]
   161b4:	str	r3, [r4, r3]
   161b6:	b.n	160fe <_free_r+0x86>
   161b8:	cmp	r2, #20
   161ba:	bhi.n	161ec <_free_r+0x174>
   161bc:	add.w	r7, r2, #92	; 0x5c
   161c0:	lsls	r7, r7, #1
   161c2:	add.w	r5, r2, #91	; 0x5b
   161c6:	b.n	1611c <_free_r+0xa4>
   161c8:	asrs	r2, r5, #2
   161ca:	ldr	r3, [r1, #4]
   161cc:	movs	r5, #1
   161ce:	lsl.w	r2, r5, r2
   161d2:	orrs	r3, r2
   161d4:	str	r3, [r1, #4]
   161d6:	mov	r2, r0
   161d8:	b.n	1613e <_free_r+0xc6>
   161da:	orr.w	r2, r3, #1
   161de:	str	r4, [r1, #20]
   161e0:	str	r4, [r1, #16]
   161e2:	str	r5, [r4, #12]
   161e4:	str	r5, [r4, #8]
   161e6:	str	r2, [r4, #4]
   161e8:	str	r3, [r4, r3]
   161ea:	b.n	160fe <_free_r+0x86>
   161ec:	cmp	r2, #84	; 0x54
   161ee:	bhi.n	161fe <_free_r+0x186>
   161f0:	lsrs	r2, r3, #12
   161f2:	add.w	r7, r2, #111	; 0x6f
   161f6:	lsls	r7, r7, #1
   161f8:	add.w	r5, r2, #110	; 0x6e
   161fc:	b.n	1611c <_free_r+0xa4>
   161fe:	cmp.w	r2, #340	; 0x154
   16202:	bhi.n	16212 <_free_r+0x19a>
   16204:	lsrs	r2, r3, #15
   16206:	add.w	r7, r2, #120	; 0x78
   1620a:	lsls	r7, r7, #1
   1620c:	add.w	r5, r2, #119	; 0x77
   16210:	b.n	1611c <_free_r+0xa4>
   16212:	movw	r0, #1364	; 0x554
   16216:	cmp	r2, r0
   16218:	bhi.n	16228 <_free_r+0x1b0>
   1621a:	lsrs	r2, r3, #18
   1621c:	add.w	r7, r2, #125	; 0x7d
   16220:	lsls	r7, r7, #1
   16222:	add.w	r5, r2, #124	; 0x7c
   16226:	b.n	1611c <_free_r+0xa4>
   16228:	movs	r7, #254	; 0xfe
   1622a:	movs	r5, #126	; 0x7e
   1622c:	b.n	1611c <_free_r+0xa4>
   1622e:	orr.w	r2, r3, #1
   16232:	str	r2, [r4, #4]
   16234:	str	r3, [r4, r3]
   16236:	b.n	160fe <_free_r+0x86>
   16238:	.word	0x1fff10b0
   1623c:	.word	0x1fff10b8
   16240:	.word	0x1fff14b8
   16244:	.word	0x1fff2600

00016248 <_localeconv_r>:
   16248:	ldr	r2, [pc, #16]	; (1625c <_localeconv_r+0x14>)
   1624a:	ldr	r3, [pc, #20]	; (16260 <_localeconv_r+0x18>)
   1624c:	ldr	r2, [r2, #0]
   1624e:	ldr	r0, [r2, #52]	; 0x34
   16250:	cmp	r0, #0
   16252:	it	eq
   16254:	moveq	r0, r3
   16256:	adds	r0, #240	; 0xf0
   16258:	bx	lr
   1625a:	nop
   1625c:	.word	0x1fff0f40
   16260:	.word	0x1fff0f44

00016264 <_Balloc>:
   16264:	ldr	r3, [r0, #76]	; 0x4c
   16266:	push	{r4, r5, r6, lr}
   16268:	mov	r5, r0
   1626a:	mov	r4, r1
   1626c:	cbz	r3, 16282 <_Balloc+0x1e>
   1626e:	ldr.w	r0, [r3, r4, lsl #2]
   16272:	cbz	r0, 16296 <_Balloc+0x32>
   16274:	ldr	r2, [r0, #0]
   16276:	str.w	r2, [r3, r4, lsl #2]
   1627a:	movs	r3, #0
   1627c:	str	r3, [r0, #16]
   1627e:	str	r3, [r0, #12]
   16280:	pop	{r4, r5, r6, pc}
   16282:	movs	r2, #33	; 0x21
   16284:	movs	r1, #4
   16286:	bl	126d8 <_calloc_r>
   1628a:	str	r0, [r5, #76]	; 0x4c
   1628c:	mov	r3, r0
   1628e:	cmp	r0, #0
   16290:	bne.n	1626e <_Balloc+0xa>
   16292:	movs	r0, #0
   16294:	pop	{r4, r5, r6, pc}
   16296:	movs	r1, #1
   16298:	lsl.w	r6, r1, r4
   1629c:	adds	r2, r6, #5
   1629e:	mov	r0, r5
   162a0:	lsls	r2, r2, #2
   162a2:	bl	126d8 <_calloc_r>
   162a6:	cmp	r0, #0
   162a8:	beq.n	16292 <_Balloc+0x2e>
   162aa:	str	r4, [r0, #4]
   162ac:	str	r6, [r0, #8]
   162ae:	b.n	1627a <_Balloc+0x16>

000162b0 <_Bfree>:
   162b0:	cbz	r1, 162c0 <_Bfree+0x10>
   162b2:	ldr	r3, [r0, #76]	; 0x4c
   162b4:	ldr	r2, [r1, #4]
   162b6:	ldr.w	r0, [r3, r2, lsl #2]
   162ba:	str	r0, [r1, #0]
   162bc:	str.w	r1, [r3, r2, lsl #2]
   162c0:	bx	lr
   162c2:	nop

000162c4 <__multadd>:
   162c4:	push	{r4, r5, r6, r7, lr}
   162c6:	ldr	r4, [r1, #16]
   162c8:	sub	sp, #12
   162ca:	mov	r5, r1
   162cc:	mov	r6, r0
   162ce:	add.w	lr, r1, #20
   162d2:	movs	r7, #0
   162d4:	ldr.w	r0, [lr]
   162d8:	uxth	r1, r0
   162da:	mla	r1, r2, r1, r3
   162de:	lsrs	r3, r1, #16
   162e0:	lsrs	r0, r0, #16
   162e2:	mla	r3, r2, r0, r3
   162e6:	uxth	r1, r1
   162e8:	adds	r7, #1
   162ea:	add.w	r1, r1, r3, lsl #16
   162ee:	cmp	r4, r7
   162f0:	str.w	r1, [lr], #4
   162f4:	mov.w	r3, r3, lsr #16
   162f8:	bgt.n	162d4 <__multadd+0x10>
   162fa:	cbz	r3, 1630c <__multadd+0x48>
   162fc:	ldr	r2, [r5, #8]
   162fe:	cmp	r4, r2
   16300:	bge.n	16312 <__multadd+0x4e>
   16302:	add.w	r2, r5, r4, lsl #2
   16306:	adds	r4, #1
   16308:	str	r3, [r2, #20]
   1630a:	str	r4, [r5, #16]
   1630c:	mov	r0, r5
   1630e:	add	sp, #12
   16310:	pop	{r4, r5, r6, r7, pc}
   16312:	ldr	r1, [r5, #4]
   16314:	str	r3, [sp, #4]
   16316:	adds	r1, #1
   16318:	mov	r0, r6
   1631a:	bl	16264 <_Balloc>
   1631e:	ldr	r2, [r5, #16]
   16320:	adds	r2, #2
   16322:	add.w	r1, r5, #12
   16326:	mov	r7, r0
   16328:	lsls	r2, r2, #2
   1632a:	adds	r0, #12
   1632c:	bl	fc48 <memcpy>
   16330:	ldr	r2, [r6, #76]	; 0x4c
   16332:	ldr	r1, [r5, #4]
   16334:	ldr	r3, [sp, #4]
   16336:	ldr.w	r0, [r2, r1, lsl #2]
   1633a:	str	r0, [r5, #0]
   1633c:	str.w	r5, [r2, r1, lsl #2]
   16340:	mov	r5, r7
   16342:	b.n	16302 <__multadd+0x3e>

00016344 <__hi0bits>:
   16344:	lsrs	r3, r0, #16
   16346:	lsls	r3, r3, #16
   16348:	cbnz	r3, 16378 <__hi0bits+0x34>
   1634a:	lsls	r0, r0, #16
   1634c:	movs	r3, #16
   1634e:	tst.w	r0, #4278190080	; 0xff000000
   16352:	itt	eq
   16354:	lsleq	r0, r0, #8
   16356:	addeq	r3, #8
   16358:	tst.w	r0, #4026531840	; 0xf0000000
   1635c:	itt	eq
   1635e:	lsleq	r0, r0, #4
   16360:	addeq	r3, #4
   16362:	tst.w	r0, #3221225472	; 0xc0000000
   16366:	itt	eq
   16368:	lsleq	r0, r0, #2
   1636a:	addeq	r3, #2
   1636c:	cmp	r0, #0
   1636e:	blt.n	16380 <__hi0bits+0x3c>
   16370:	lsls	r2, r0, #1
   16372:	bmi.n	1637c <__hi0bits+0x38>
   16374:	movs	r0, #32
   16376:	bx	lr
   16378:	movs	r3, #0
   1637a:	b.n	1634e <__hi0bits+0xa>
   1637c:	adds	r0, r3, #1
   1637e:	bx	lr
   16380:	mov	r0, r3
   16382:	bx	lr

00016384 <__lo0bits>:
   16384:	ldr	r3, [r0, #0]
   16386:	ands.w	r2, r3, #7
   1638a:	beq.n	1639c <__lo0bits+0x18>
   1638c:	lsls	r1, r3, #31
   1638e:	bmi.n	163d2 <__lo0bits+0x4e>
   16390:	lsls	r2, r3, #30
   16392:	bmi.n	163d6 <__lo0bits+0x52>
   16394:	lsrs	r3, r3, #2
   16396:	str	r3, [r0, #0]
   16398:	movs	r0, #2
   1639a:	bx	lr
   1639c:	uxth	r1, r3
   1639e:	cbnz	r1, 163a4 <__lo0bits+0x20>
   163a0:	lsrs	r3, r3, #16
   163a2:	movs	r2, #16
   163a4:	tst.w	r3, #255	; 0xff
   163a8:	itt	eq
   163aa:	lsreq	r3, r3, #8
   163ac:	addeq	r2, #8
   163ae:	lsls	r1, r3, #28
   163b0:	itt	eq
   163b2:	lsreq	r3, r3, #4
   163b4:	addeq	r2, #4
   163b6:	lsls	r1, r3, #30
   163b8:	itt	eq
   163ba:	lsreq	r3, r3, #2
   163bc:	addeq	r2, #2
   163be:	lsls	r1, r3, #31
   163c0:	bmi.n	163cc <__lo0bits+0x48>
   163c2:	lsrs	r3, r3, #1
   163c4:	bne.n	163ca <__lo0bits+0x46>
   163c6:	movs	r0, #32
   163c8:	bx	lr
   163ca:	adds	r2, #1
   163cc:	str	r3, [r0, #0]
   163ce:	mov	r0, r2
   163d0:	bx	lr
   163d2:	movs	r0, #0
   163d4:	bx	lr
   163d6:	lsrs	r3, r3, #1
   163d8:	str	r3, [r0, #0]
   163da:	movs	r0, #1
   163dc:	bx	lr
   163de:	nop

000163e0 <__i2b>:
   163e0:	push	{r4, lr}
   163e2:	mov	r4, r1
   163e4:	movs	r1, #1
   163e6:	bl	16264 <_Balloc>
   163ea:	movs	r2, #1
   163ec:	str	r4, [r0, #20]
   163ee:	str	r2, [r0, #16]
   163f0:	pop	{r4, pc}
   163f2:	nop

000163f4 <__multiply>:
   163f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163f8:	ldr	r5, [r1, #16]
   163fa:	ldr	r7, [r2, #16]
   163fc:	cmp	r5, r7
   163fe:	sub	sp, #12
   16400:	mov	r4, r1
   16402:	mov	r6, r2
   16404:	bge.n	16410 <__multiply+0x1c>
   16406:	mov	r2, r5
   16408:	mov	r4, r6
   1640a:	mov	r5, r7
   1640c:	mov	r6, r1
   1640e:	mov	r7, r2
   16410:	ldr	r3, [r4, #8]
   16412:	ldr	r1, [r4, #4]
   16414:	add.w	r8, r5, r7
   16418:	cmp	r8, r3
   1641a:	it	gt
   1641c:	addgt	r1, #1
   1641e:	bl	16264 <_Balloc>
   16422:	add.w	ip, r0, #20
   16426:	add.w	r9, ip, r8, lsl #2
   1642a:	cmp	ip, r9
   1642c:	str	r0, [sp, #0]
   1642e:	bcs.n	1643c <__multiply+0x48>
   16430:	mov	r3, ip
   16432:	movs	r1, #0
   16434:	str.w	r1, [r3], #4
   16438:	cmp	r9, r3
   1643a:	bhi.n	16434 <__multiply+0x40>
   1643c:	add.w	r2, r6, #20
   16440:	add.w	sl, r2, r7, lsl #2
   16444:	add.w	r3, r4, #20
   16448:	cmp	r2, sl
   1644a:	add.w	lr, r3, r5, lsl #2
   1644e:	bcs.n	164fa <__multiply+0x106>
   16450:	str.w	r9, [sp, #4]
   16454:	mov	r9, r3
   16456:	ldr.w	r3, [r2], #4
   1645a:	uxth.w	fp, r3
   1645e:	cmp.w	fp, #0
   16462:	beq.n	164a6 <__multiply+0xb2>
   16464:	movs	r0, #0
   16466:	mov	r7, r9
   16468:	mov	r6, ip
   1646a:	mov	r5, r0
   1646c:	b.n	16470 <__multiply+0x7c>
   1646e:	mov	r6, r3
   16470:	ldr.w	r4, [r7], #4
   16474:	ldr	r0, [r6, #0]
   16476:	uxth	r1, r4
   16478:	uxth	r3, r0
   1647a:	mla	r1, fp, r1, r3
   1647e:	lsrs	r4, r4, #16
   16480:	lsrs	r0, r0, #16
   16482:	adds	r3, r1, r5
   16484:	mla	r0, fp, r4, r0
   16488:	add.w	r0, r0, r3, lsr #16
   1648c:	uxth	r1, r3
   1648e:	mov	r3, r6
   16490:	orr.w	r1, r1, r0, lsl #16
   16494:	cmp	lr, r7
   16496:	mov.w	r5, r0, lsr #16
   1649a:	str.w	r1, [r3], #4
   1649e:	bhi.n	1646e <__multiply+0x7a>
   164a0:	str	r5, [r6, #4]
   164a2:	ldr.w	r3, [r2, #-4]
   164a6:	movs.w	fp, r3, lsr #16
   164aa:	beq.n	164ee <__multiply+0xfa>
   164ac:	ldr.w	r3, [ip]
   164b0:	mov	r7, ip
   164b2:	mov	r0, r3
   164b4:	mov	r5, r9
   164b6:	movs	r1, #0
   164b8:	b.n	164bc <__multiply+0xc8>
   164ba:	mov	r7, r6
   164bc:	ldrh	r4, [r5, #0]
   164be:	lsrs	r0, r0, #16
   164c0:	mla	r0, fp, r4, r0
   164c4:	add	r1, r0
   164c6:	uxth	r4, r3
   164c8:	mov	r6, r7
   164ca:	orr.w	r3, r4, r1, lsl #16
   164ce:	str.w	r3, [r6], #4
   164d2:	ldr	r0, [r7, #4]
   164d4:	ldr.w	r4, [r5], #4
   164d8:	uxth	r3, r0
   164da:	lsrs	r4, r4, #16
   164dc:	mla	r4, fp, r4, r3
   164e0:	add.w	r3, r4, r1, lsr #16
   164e4:	cmp	lr, r5
   164e6:	mov.w	r1, r3, lsr #16
   164ea:	bhi.n	164ba <__multiply+0xc6>
   164ec:	str	r3, [r7, #4]
   164ee:	cmp	sl, r2
   164f0:	add.w	ip, ip, #4
   164f4:	bhi.n	16456 <__multiply+0x62>
   164f6:	ldr.w	r9, [sp, #4]
   164fa:	cmp.w	r8, #0
   164fe:	ble.n	16518 <__multiply+0x124>
   16500:	ldr.w	r3, [r9, #-4]
   16504:	sub.w	r9, r9, #4
   16508:	cbz	r3, 16512 <__multiply+0x11e>
   1650a:	b.n	16518 <__multiply+0x124>
   1650c:	ldr.w	r3, [r9, #-4]!
   16510:	cbnz	r3, 16518 <__multiply+0x124>
   16512:	subs.w	r8, r8, #1
   16516:	bne.n	1650c <__multiply+0x118>
   16518:	ldr	r0, [sp, #0]
   1651a:	str.w	r8, [r0, #16]
   1651e:	add	sp, #12
   16520:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016524 <__pow5mult>:
   16524:	ands.w	r3, r2, #3
   16528:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1652c:	mov	r4, r2
   1652e:	mov	r7, r0
   16530:	bne.n	16590 <__pow5mult+0x6c>
   16532:	mov	r6, r1
   16534:	asrs	r4, r4, #2
   16536:	beq.n	16572 <__pow5mult+0x4e>
   16538:	ldr	r5, [r7, #72]	; 0x48
   1653a:	cbz	r5, 165a2 <__pow5mult+0x7e>
   1653c:	lsls	r3, r4, #31
   1653e:	mov.w	r8, #0
   16542:	bmi.n	16552 <__pow5mult+0x2e>
   16544:	asrs	r4, r4, #1
   16546:	beq.n	16572 <__pow5mult+0x4e>
   16548:	ldr	r0, [r5, #0]
   1654a:	cbz	r0, 16578 <__pow5mult+0x54>
   1654c:	mov	r5, r0
   1654e:	lsls	r3, r4, #31
   16550:	bpl.n	16544 <__pow5mult+0x20>
   16552:	mov	r2, r5
   16554:	mov	r1, r6
   16556:	mov	r0, r7
   16558:	bl	163f4 <__multiply>
   1655c:	cbz	r6, 1658c <__pow5mult+0x68>
   1655e:	ldr	r2, [r6, #4]
   16560:	ldr	r3, [r7, #76]	; 0x4c
   16562:	asrs	r4, r4, #1
   16564:	ldr.w	r1, [r3, r2, lsl #2]
   16568:	str	r1, [r6, #0]
   1656a:	str.w	r6, [r3, r2, lsl #2]
   1656e:	mov	r6, r0
   16570:	bne.n	16548 <__pow5mult+0x24>
   16572:	mov	r0, r6
   16574:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16578:	mov	r2, r5
   1657a:	mov	r1, r5
   1657c:	mov	r0, r7
   1657e:	bl	163f4 <__multiply>
   16582:	str	r0, [r5, #0]
   16584:	str.w	r8, [r0]
   16588:	mov	r5, r0
   1658a:	b.n	1654e <__pow5mult+0x2a>
   1658c:	mov	r6, r0
   1658e:	b.n	16544 <__pow5mult+0x20>
   16590:	subs	r2, r3, #1
   16592:	ldr	r5, [pc, #44]	; (165c0 <__pow5mult+0x9c>)
   16594:	movs	r3, #0
   16596:	ldr.w	r2, [r5, r2, lsl #2]
   1659a:	bl	162c4 <__multadd>
   1659e:	mov	r6, r0
   165a0:	b.n	16534 <__pow5mult+0x10>
   165a2:	movs	r1, #1
   165a4:	mov	r0, r7
   165a6:	bl	16264 <_Balloc>
   165aa:	movw	r1, #625	; 0x271
   165ae:	movs	r2, #1
   165b0:	movs	r3, #0
   165b2:	str	r1, [r0, #20]
   165b4:	str	r2, [r0, #16]
   165b6:	mov	r5, r0
   165b8:	str	r0, [r7, #72]	; 0x48
   165ba:	str	r3, [r0, #0]
   165bc:	b.n	1653c <__pow5mult+0x18>
   165be:	nop
   165c0:	.word	0x00017978

000165c4 <__lshift>:
   165c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   165c8:	mov	r9, r2
   165ca:	ldr	r2, [r1, #16]
   165cc:	ldr	r3, [r1, #8]
   165ce:	mov.w	r4, r9, asr #5
   165d2:	add.w	r8, r4, r2
   165d6:	add.w	r5, r8, #1
   165da:	cmp	r5, r3
   165dc:	mov	r6, r1
   165de:	mov	sl, r0
   165e0:	ldr	r1, [r1, #4]
   165e2:	ble.n	165ee <__lshift+0x2a>
   165e4:	lsls	r3, r3, #1
   165e6:	cmp	r5, r3
   165e8:	add.w	r1, r1, #1
   165ec:	bgt.n	165e4 <__lshift+0x20>
   165ee:	mov	r0, sl
   165f0:	bl	16264 <_Balloc>
   165f4:	cmp	r4, #0
   165f6:	add.w	r2, r0, #20
   165fa:	ble.n	1666e <__lshift+0xaa>
   165fc:	add.w	r3, r2, r4, lsl #2
   16600:	movs	r1, #0
   16602:	str.w	r1, [r2], #4
   16606:	cmp	r3, r2
   16608:	bne.n	16602 <__lshift+0x3e>
   1660a:	ldr	r4, [r6, #16]
   1660c:	add.w	r1, r6, #20
   16610:	ands.w	r9, r9, #31
   16614:	add.w	lr, r1, r4, lsl #2
   16618:	beq.n	1665e <__lshift+0x9a>
   1661a:	rsb	r2, r9, #32
   1661e:	movs	r4, #0
   16620:	ldr	r7, [r1, #0]
   16622:	lsl.w	ip, r7, r9
   16626:	orr.w	r4, ip, r4
   1662a:	mov	ip, r3
   1662c:	str.w	r4, [r3], #4
   16630:	ldr.w	r4, [r1], #4
   16634:	cmp	lr, r1
   16636:	lsr.w	r4, r4, r2
   1663a:	bhi.n	16620 <__lshift+0x5c>
   1663c:	str.w	r4, [ip, #4]
   16640:	cbz	r4, 16646 <__lshift+0x82>
   16642:	add.w	r5, r8, #2
   16646:	ldr.w	r3, [sl, #76]	; 0x4c
   1664a:	ldr	r2, [r6, #4]
   1664c:	subs	r5, #1
   1664e:	ldr.w	r1, [r3, r2, lsl #2]
   16652:	str	r5, [r0, #16]
   16654:	str	r1, [r6, #0]
   16656:	str.w	r6, [r3, r2, lsl #2]
   1665a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1665e:	subs	r3, #4
   16660:	ldr.w	r2, [r1], #4
   16664:	str.w	r2, [r3, #4]!
   16668:	cmp	lr, r1
   1666a:	bhi.n	16660 <__lshift+0x9c>
   1666c:	b.n	16646 <__lshift+0x82>
   1666e:	mov	r3, r2
   16670:	b.n	1660a <__lshift+0x46>
   16672:	nop

00016674 <__mcmp>:
   16674:	ldr	r2, [r0, #16]
   16676:	ldr	r3, [r1, #16]
   16678:	subs	r2, r2, r3
   1667a:	bne.n	166a4 <__mcmp+0x30>
   1667c:	lsls	r3, r3, #2
   1667e:	adds	r0, #20
   16680:	adds	r1, #20
   16682:	add	r1, r3
   16684:	push	{r4}
   16686:	add	r3, r0
   16688:	b.n	1668e <__mcmp+0x1a>
   1668a:	cmp	r0, r3
   1668c:	bcs.n	166a8 <__mcmp+0x34>
   1668e:	ldr.w	r4, [r3, #-4]!
   16692:	ldr.w	r2, [r1, #-4]!
   16696:	cmp	r4, r2
   16698:	beq.n	1668a <__mcmp+0x16>
   1669a:	bcc.n	166b0 <__mcmp+0x3c>
   1669c:	movs	r0, #1
   1669e:	ldr.w	r4, [sp], #4
   166a2:	bx	lr
   166a4:	mov	r0, r2
   166a6:	bx	lr
   166a8:	movs	r0, #0
   166aa:	ldr.w	r4, [sp], #4
   166ae:	bx	lr
   166b0:	mov.w	r0, #4294967295
   166b4:	b.n	1669e <__mcmp+0x2a>
   166b6:	nop

000166b8 <__mdiff>:
   166b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   166bc:	ldr	r3, [r1, #16]
   166be:	mov	r7, r1
   166c0:	ldr	r1, [r2, #16]
   166c2:	subs	r3, r3, r1
   166c4:	cmp	r3, #0
   166c6:	mov	r8, r2
   166c8:	bne.n	166fa <__mdiff+0x42>
   166ca:	lsls	r1, r1, #2
   166cc:	add.w	r2, r7, #20
   166d0:	add.w	r5, r8, #20
   166d4:	adds	r3, r2, r1
   166d6:	add	r1, r5
   166d8:	b.n	166de <__mdiff+0x26>
   166da:	cmp	r2, r3
   166dc:	bcs.n	1679c <__mdiff+0xe4>
   166de:	ldr.w	r6, [r3, #-4]!
   166e2:	ldr.w	r4, [r1, #-4]!
   166e6:	cmp	r6, r4
   166e8:	beq.n	166da <__mdiff+0x22>
   166ea:	bcs.n	167ae <__mdiff+0xf6>
   166ec:	mov	r3, r7
   166ee:	mov	r4, r2
   166f0:	mov	r7, r8
   166f2:	mov.w	r9, #1
   166f6:	mov	r8, r3
   166f8:	b.n	16708 <__mdiff+0x50>
   166fa:	blt.n	167b8 <__mdiff+0x100>
   166fc:	add.w	r5, r7, #20
   16700:	add.w	r4, r2, #20
   16704:	mov.w	r9, #0
   16708:	ldr	r1, [r7, #4]
   1670a:	bl	16264 <_Balloc>
   1670e:	ldr.w	r3, [r8, #16]
   16712:	ldr	r6, [r7, #16]
   16714:	str.w	r9, [r0, #12]
   16718:	add.w	ip, r4, r3, lsl #2
   1671c:	mov	lr, r4
   1671e:	add.w	r7, r5, r6, lsl #2
   16722:	add.w	r4, r0, #20
   16726:	movs	r3, #0
   16728:	ldr.w	r1, [lr], #4
   1672c:	ldr.w	r8, [r5], #4
   16730:	uxth	r2, r1
   16732:	uxtah	r3, r3, r8
   16736:	lsrs	r1, r1, #16
   16738:	subs	r2, r3, r2
   1673a:	rsb	r3, r1, r8, lsr #16
   1673e:	add.w	r3, r3, r2, asr #16
   16742:	uxth	r2, r2
   16744:	orr.w	r2, r2, r3, lsl #16
   16748:	cmp	ip, lr
   1674a:	str.w	r2, [r4], #4
   1674e:	mov.w	r3, r3, asr #16
   16752:	bhi.n	16728 <__mdiff+0x70>
   16754:	cmp	r7, r5
   16756:	bls.n	16788 <__mdiff+0xd0>
   16758:	mov	ip, r4
   1675a:	mov	r1, r5
   1675c:	ldr.w	lr, [r1], #4
   16760:	uxtah	r2, r3, lr
   16764:	asrs	r3, r2, #16
   16766:	add.w	r3, r3, lr, lsr #16
   1676a:	uxth	r2, r2
   1676c:	orr.w	r2, r2, r3, lsl #16
   16770:	cmp	r7, r1
   16772:	str.w	r2, [ip], #4
   16776:	mov.w	r3, r3, asr #16
   1677a:	bhi.n	1675c <__mdiff+0xa4>
   1677c:	mvns	r5, r5
   1677e:	add	r5, r7
   16780:	bic.w	r5, r5, #3
   16784:	adds	r5, #4
   16786:	add	r4, r5
   16788:	subs	r4, #4
   1678a:	cbnz	r2, 16796 <__mdiff+0xde>
   1678c:	ldr.w	r3, [r4, #-4]!
   16790:	subs	r6, #1
   16792:	cmp	r3, #0
   16794:	beq.n	1678c <__mdiff+0xd4>
   16796:	str	r6, [r0, #16]
   16798:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1679c:	movs	r1, #0
   1679e:	bl	16264 <_Balloc>
   167a2:	movs	r2, #1
   167a4:	movs	r3, #0
   167a6:	str	r2, [r0, #16]
   167a8:	str	r3, [r0, #20]
   167aa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   167ae:	mov	r4, r5
   167b0:	mov.w	r9, #0
   167b4:	mov	r5, r2
   167b6:	b.n	16708 <__mdiff+0x50>
   167b8:	mov	r3, r7
   167ba:	add.w	r4, r7, #20
   167be:	add.w	r5, r8, #20
   167c2:	mov	r7, r8
   167c4:	mov.w	r9, #1
   167c8:	mov	r8, r3
   167ca:	b.n	16708 <__mdiff+0x50>

000167cc <__d2b>:
   167cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   167d0:	vmov	r6, r7, d0
   167d4:	sub	sp, #12
   167d6:	mov	r8, r1
   167d8:	movs	r1, #1
   167da:	mov	r4, r7
   167dc:	ubfx	r5, r7, #20, #11
   167e0:	mov	r7, r2
   167e2:	bl	16264 <_Balloc>
   167e6:	ubfx	r4, r4, #0, #20
   167ea:	mov	r9, r0
   167ec:	cbz	r5, 167f2 <__d2b+0x26>
   167ee:	orr.w	r4, r4, #1048576	; 0x100000
   167f2:	str	r4, [sp, #4]
   167f4:	cbz	r6, 1683e <__d2b+0x72>
   167f6:	add	r0, sp, #8
   167f8:	str.w	r6, [r0, #-8]!
   167fc:	bl	16384 <__lo0bits>
   16800:	cmp	r0, #0
   16802:	bne.n	1686e <__d2b+0xa2>
   16804:	ldmia.w	sp, {r2, r3}
   16808:	str.w	r2, [r9, #20]
   1680c:	cmp	r3, #0
   1680e:	ite	eq
   16810:	moveq	r1, #1
   16812:	movne	r1, #2
   16814:	str.w	r3, [r9, #24]
   16818:	str.w	r1, [r9, #16]
   1681c:	cbnz	r5, 16856 <__d2b+0x8a>
   1681e:	add.w	r3, r9, r1, lsl #2
   16822:	subw	r0, r0, #1074	; 0x432
   16826:	str.w	r0, [r8]
   1682a:	ldr	r0, [r3, #16]
   1682c:	bl	16344 <__hi0bits>
   16830:	rsb	r0, r0, r1, lsl #5
   16834:	str	r0, [r7, #0]
   16836:	mov	r0, r9
   16838:	add	sp, #12
   1683a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1683e:	add	r0, sp, #4
   16840:	bl	16384 <__lo0bits>
   16844:	ldr	r3, [sp, #4]
   16846:	str.w	r3, [r9, #20]
   1684a:	movs	r1, #1
   1684c:	adds	r0, #32
   1684e:	str.w	r1, [r9, #16]
   16852:	cmp	r5, #0
   16854:	beq.n	1681e <__d2b+0x52>
   16856:	subw	r5, r5, #1075	; 0x433
   1685a:	add	r5, r0
   1685c:	rsb	r0, r0, #53	; 0x35
   16860:	str.w	r5, [r8]
   16864:	str	r0, [r7, #0]
   16866:	mov	r0, r9
   16868:	add	sp, #12
   1686a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1686e:	ldmia.w	sp, {r2, r3}
   16872:	rsb	r1, r0, #32
   16876:	lsl.w	r1, r3, r1
   1687a:	orrs	r2, r1
   1687c:	lsrs	r3, r0
   1687e:	str	r3, [sp, #4]
   16880:	str.w	r2, [r9, #20]
   16884:	b.n	1680c <__d2b+0x40>
   16886:	nop

00016888 <__ssprint_r>:
   16888:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1688c:	ldr	r3, [r2, #8]
   1688e:	sub	sp, #12
   16890:	mov	r8, r2
   16892:	cmp	r3, #0
   16894:	beq.n	1697c <__ssprint_r+0xf4>
   16896:	mov	fp, r0
   16898:	mov.w	r9, #0
   1689c:	ldr	r6, [r2, #0]
   1689e:	ldr	r0, [r1, #0]
   168a0:	ldr	r3, [r1, #8]
   168a2:	mov	r5, r1
   168a4:	mov	r4, r9
   168a6:	cmp	r4, #0
   168a8:	beq.n	16936 <__ssprint_r+0xae>
   168aa:	cmp	r4, r3
   168ac:	mov	r7, r3
   168ae:	mov	sl, r3
   168b0:	bcc.n	16940 <__ssprint_r+0xb8>
   168b2:	ldrh	r3, [r5, #12]
   168b4:	tst.w	r3, #1152	; 0x480
   168b8:	beq.n	16916 <__ssprint_r+0x8e>
   168ba:	ldr	r7, [r5, #20]
   168bc:	ldr	r1, [r5, #16]
   168be:	add.w	r7, r7, r7, lsl #1
   168c2:	rsb	sl, r1, r0
   168c6:	add.w	r7, r7, r7, lsr #31
   168ca:	adds	r0, r4, #1
   168cc:	asrs	r7, r7, #1
   168ce:	add	r0, sl
   168d0:	cmp	r0, r7
   168d2:	mov	r2, r7
   168d4:	itt	hi
   168d6:	movhi	r7, r0
   168d8:	movhi	r2, r7
   168da:	lsls	r3, r3, #21
   168dc:	bpl.n	16946 <__ssprint_r+0xbe>
   168de:	mov	r1, r2
   168e0:	mov	r0, fp
   168e2:	bl	127e4 <_malloc_r>
   168e6:	cmp	r0, #0
   168e8:	beq.n	1695a <__ssprint_r+0xd2>
   168ea:	mov	r2, sl
   168ec:	ldr	r1, [r5, #16]
   168ee:	str	r0, [sp, #4]
   168f0:	bl	fc48 <memcpy>
   168f4:	ldrh	r2, [r5, #12]
   168f6:	ldr	r3, [sp, #4]
   168f8:	bic.w	r2, r2, #1152	; 0x480
   168fc:	orr.w	r2, r2, #128	; 0x80
   16900:	strh	r2, [r5, #12]
   16902:	rsb	r2, sl, r7
   16906:	add.w	r0, r3, sl
   1690a:	str	r7, [r5, #20]
   1690c:	str	r3, [r5, #16]
   1690e:	str	r0, [r5, #0]
   16910:	str	r2, [r5, #8]
   16912:	mov	r7, r4
   16914:	mov	sl, r4
   16916:	mov	r2, sl
   16918:	mov	r1, r9
   1691a:	bl	12e84 <memmove>
   1691e:	ldr.w	r2, [r8, #8]
   16922:	ldr	r3, [r5, #8]
   16924:	ldr	r0, [r5, #0]
   16926:	subs	r3, r3, r7
   16928:	add	r0, sl
   1692a:	subs	r4, r2, r4
   1692c:	str	r3, [r5, #8]
   1692e:	str	r0, [r5, #0]
   16930:	str.w	r4, [r8, #8]
   16934:	cbz	r4, 1697c <__ssprint_r+0xf4>
   16936:	ldr.w	r9, [r6]
   1693a:	ldr	r4, [r6, #4]
   1693c:	adds	r6, #8
   1693e:	b.n	168a6 <__ssprint_r+0x1e>
   16940:	mov	r7, r4
   16942:	mov	sl, r4
   16944:	b.n	16916 <__ssprint_r+0x8e>
   16946:	mov	r0, fp
   16948:	bl	12ff0 <_realloc_r>
   1694c:	mov	r3, r0
   1694e:	cmp	r0, #0
   16950:	bne.n	16902 <__ssprint_r+0x7a>
   16952:	ldr	r1, [r5, #16]
   16954:	mov	r0, fp
   16956:	bl	16078 <_free_r>
   1695a:	movs	r3, #12
   1695c:	str.w	r3, [fp]
   16960:	ldrh	r3, [r5, #12]
   16962:	movs	r2, #0
   16964:	orr.w	r3, r3, #64	; 0x40
   16968:	mov.w	r0, #4294967295
   1696c:	strh	r3, [r5, #12]
   1696e:	str.w	r2, [r8, #8]
   16972:	str.w	r2, [r8, #4]
   16976:	add	sp, #12
   16978:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1697c:	movs	r0, #0
   1697e:	str.w	r0, [r8, #4]
   16982:	add	sp, #12
   16984:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016988 <_vasnprintf_r>:
   16988:	push	{r4, r5, r6, lr}
   1698a:	mov	r5, r2
   1698c:	sub	sp, #104	; 0x68
   1698e:	ldr	r4, [r2, #0]
   16990:	cbz	r1, 16996 <_vasnprintf_r+0xe>
   16992:	cmp	r4, #0
   16994:	bne.n	169cc <_vasnprintf_r+0x44>
   16996:	movs	r4, #0
   16998:	mov.w	r2, #648	; 0x288
   1699c:	strh.w	r2, [sp, #12]
   169a0:	str	r4, [sp, #0]
   169a2:	str	r4, [sp, #16]
   169a4:	mov	r2, r3
   169a6:	movw	r6, #65535	; 0xffff
   169aa:	ldr	r3, [sp, #120]	; 0x78
   169ac:	str	r4, [sp, #8]
   169ae:	mov	r1, sp
   169b0:	str	r4, [sp, #20]
   169b2:	strh.w	r6, [sp, #14]
   169b6:	bl	13700 <_svfprintf_r>
   169ba:	cmp	r0, #0
   169bc:	blt.n	169e2 <_vasnprintf_r+0x5a>
   169be:	ldr	r3, [sp, #0]
   169c0:	str	r0, [r5, #0]
   169c2:	movs	r2, #0
   169c4:	strb	r2, [r3, #0]
   169c6:	ldr	r0, [sp, #16]
   169c8:	add	sp, #104	; 0x68
   169ca:	pop	{r4, r5, r6, pc}
   169cc:	mov.w	r2, #1544	; 0x608
   169d0:	str	r1, [sp, #0]
   169d2:	str	r1, [sp, #16]
   169d4:	strh.w	r2, [sp, #12]
   169d8:	bge.n	169a4 <_vasnprintf_r+0x1c>
   169da:	movs	r3, #139	; 0x8b
   169dc:	str	r3, [r0, #0]
   169de:	movs	r0, #0
   169e0:	b.n	169c8 <_vasnprintf_r+0x40>
   169e2:	movs	r0, #0
   169e4:	b.n	169c8 <_vasnprintf_r+0x40>
   169e6:	nop

000169e8 <vtable for Stream>:
	...
   169f0:	........m...q...
   16a00:	............

00016a0c <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   16a14:	E.......m.......
   16a24:	............

00016a30 <vtable for FsFile>:
	...
   16a38:	E.......m.......
   16a48:	............

00016a54 <vtable for File>:
	...
   16a5c:	........m.......
   16a6c:	....}.......%...
   16a7c:	........}.......
   16a8c:	................
   16a9c:	............-...
   16aac:	9...q...

00016ab4 <vtable for SDFile>:
	...
   16abc:	........m...1...
   16acc:	....}.......Y...
   16adc:	M...............
   16aec:	9...............
   16afc:	............e...
   16b0c:	........

00016b14 <vtable for SDClass>:
	...
   16b1c:	....U...}...y...
   16b2c:	....e.......1...
   16b3c:	  File    this=%
   16b4c:	x, f=%x.....   S
   16b5c:	DFile this=%x, r
   16b6c:	efcount=%u..SDIO
   16b7c:	 Storage %d %d %
   16b8c:	s ..SD Storage %
   16b9c:	d %d %s failed o
   16bac:	r missing...SD S
   16bbc:	torage %d %d %s 
   16bcc:	....SDIO Storage
   16bdc:	 %d %d %s failed
   16bec:	 or missing./tes
   16bfc:	t1.txt..This is 
   16c0c:	a test line..***
   16c1c:	* dir of sd[0] *
   16c2c:	***..Setup done.
   16c3c:	MTP_test....Rese
   16c4c:	t...sdio....sd1.

00016c5c <vtable for MTPStorage_SD>:
	...
   16c64:	............-...
   16c74:	9...%...)....3..
   16c84:	.!...!..."...*..
   16c94:	Q)..E...5"...<..
   16ca4:	A.......5$...Q..
   16cb4:	IE..IF../mtpinde
   16cc4:	x.dat...cannot o
   16cd4:	pen Index file..
   16ce4:	/...%s/%s...%d: 
   16cf4:	%d %d %d %d %d %
   16d04:	s...%d: %d %d %d
   16d14:	 %d %d..

00016d1c <supported_op>:
   16d1c:	................
   16d2c:	................
   16d3c:	........

00016d44 <propertyList>:
   16d44:	............A.D.
   16d54:	Teensy..microsof
   16d64:	t.com: 1.0;.PJRC
   16d74:	.... / MTP 1.0..
   16d84:	%x %d %d %d: ...
   16d94:	 %x.....Event: .

00016da4 <supported_events>:
   16da4:	.@.@.@.@

00016dac <SPIClass::spi1_hardware>:
   16dac:	<..@. ..........
   16dbc:	....!r....=;....
   16dcc:	..............=;
   16ddc:	................
   16dec:	 .<.............
   16dfc:	..:>?...........
   16e0c:	................
	...
   16e34:	............

00016e40 <SPISettings::ctar_div_table>:
   16e40:	................
   16e50:	...... .(.8.@.`.
   16e60:	................

00016e70 <SPIClass::spi0_hardware>:
   16e70:	<..@............
   16e80:	....Us....'.....
   16e90:	................
   16ea0:	................
   16eb0:	................
   16ec0:	..........-.....
   16ed0:	................
   16ee0:	................
   16ef0:	................
   16f00:	.. .

00016f04 <SPISettings::ctar_clock_table>:
   16f04:	................
   16f14:	................
   16f24:	. ....... ...0..
   16f34:	. ... ...@...@..
   16f44:	.P...P...`...`..
   16f54:	.p...`...p..

00016f60 <monthDays>:
   16f60:	............DBG_
   16f70:	FAIL: ..C:\Users
   16f80:	\zimme\Documents
   16f90:	\arduino-1.8.13\
   16fa0:	hardware\teensy\
   16fb0:	avr\libraries/Sd
   16fc0:	Fat/src/common//
   16fd0:	FsCache.cpp.C:\U
   16fe0:	sers\zimme\Docum
   16ff0:	ents\arduino-1.8
   17000:	.13\hardware\tee
   17010:	nsy\avr\librarie
   17020:	s/SdFat/src/ExFa
   17030:	tLib//ExFatFile.
   17040:	cpp.Open ...C:\U
   17050:	sers\zimme\Docum
   17060:	ents\arduino-1.8
   17070:	.13\hardware\tee
   17080:	nsy\avr\librarie
   17090:	s/SdFat/src/ExFa
   170a0:	tLib//ExFatFileP
   170b0:	rint.cpp....C:\U
   170c0:	sers\zimme\Docum
   170d0:	ents\arduino-1.8
   170e0:	.13\hardware\tee
   170f0:	nsy\avr\librarie
   17100:	s/SdFat/src/ExFa
   17110:	tLib//ExFatParti
   17120:	tion.cpp....EXFA
   17130:	T...C:\Users\zim
   17140:	me\Documents\ard
   17150:	uino-1.8.13\hard
   17160:	ware\teensy\avr\
   17170:	libraries/SdFat/
   17180:	src/ExFatLib//Ex
   17190:	FatFileWrite.cpp
   171a0:	....C:\Users\zim
   171b0:	me\Documents\ard
   171c0:	uino-1.8.13\hard
   171d0:	ware\teensy\avr\
   171e0:	libraries/SdFat/
   171f0:	src/FatLib//FatF
   17200:	ile.cpp.C:\Users
   17210:	\zimme\Documents
   17220:	\arduino-1.8.13\
   17230:	hardware\teensy\
   17240:	avr\libraries/Sd
   17250:	Fat/src/FatLib//
   17260:	FatFilePrint.cpp
   17270:	....C:\Users\zim
   17280:	me\Documents\ard
   17290:	uino-1.8.13\hard
   172a0:	ware\teensy\avr\
   172b0:	libraries/SdFat/
   172c0:	src/FatLib//FatP
   172d0:	artition.cpp....
   172e0:	C:\Users\zimme\D
   172f0:	ocuments\arduino
   17300:	-1.8.13\hardware
   17310:	\teensy\avr\libr
   17320:	aries/SdFat/src/
   17330:	FatLib//FatFileL
   17340:	FN.cpp..C:\Users
   17350:	\zimme\Documents
   17360:	\arduino-1.8.13\
   17370:	hardware\teensy\
   17380:	avr\libraries/Sd
   17390:	Fat/src/FatLib//
   173a0:	FatFileSFN.cpp..

000173b0 <vtable for SdSpiCard>:
	...
   173b8:	5...9.......!...
   173c8:	=...U.......5...
   173d8:	....M...........
   173e8:	M...E.......u...
   173f8:	1...............

00017408 <vtable for SdioCard>:
	...
   17410:	5...........i...
   17420:	a.......A.......
   17430:	....)...........
   17440:	........%...e...
   17450:	............m...

00017460 <usb_endpoint_config_table>:
   17460:	........

00017468 <usb_descriptor_list>:
   17468:	................
   17478:	8...i...........
   17488:	................
   17498:	.... ...........
   174a8:	................
	...
   174c8:	0...1...

000174d0 <digital_pin_to_info_PGM>:
   174d0:	@..C@..@D..CD..@
   174e0:	...C...@0..C0..@
   174f0:	4..C4..@...C...@
   17500:	...C...@...C...@
   17510:	...C...@...C...@
   17520:	...C...@...C...@
   17530:	...C...@...C...@
   17540:	...C...@...C...@
   17550:	...C...@...C...@
   17560:	...C...@...C...@
   17570:	...C...@...C...@
   17580:	...C...@...C...@
   17590:	h .Ch..@...C...@
   175a0:	8..C8..@<..C<..@
   175b0:	@..C@..@H..CH..@
   175c0:	L..CL..@(..C(..@
   175d0:	,..C,..@` .C`..@
   175e0:	d .Cd..@ ..C ..@
   175f0:	$..C$..@(..C(..@
   17600:	,..C,..@D..CD..@
   17610:	p..Cp..@t..Ct..@
   17620:	h..Ch..@P..CP..@
   17630:	X..CX..@\..C\..@
   17640:	T..CT..@ ..C ..@
   17650:	$..C$..@...C...@
   17660:	...C...@8..C8..@
   17670:	4..C4..@0..C0..@
   17680:	<..C<..@,..C,..@
   17690:	( .C(..@, .C,..@
   176a0:	. .C...@. .C...@
   176b0:	. .C...@. .C...@
   176c0:	. .C...@. .C...@

000176d0 <vtable for usb_serial_class>:
	...
   176d8:	................
   176e8:	................
   176f8:	....

000176fc <_global_impure_ptr>:
   176fc:	....C...POSIX...
   1770c:	....

00017710 <zeroes.7258>:
   17710:	0000000000000000
   17720:	INF.inf.NAN.nan.
   17730:	0123456789ABCDEF
   17740:	....0123456789ab
   17750:	cdef....(null)..

00017760 <blanks.7257>:
   17760:	                

00017770 <_ctype_>:
   17770:	.         ((((( 
   17780:	                
   17790:	 ...............
   177a0:	................
   177b0:	..AAAAAA........
   177c0:	................
   177d0:	..BBBBBB........
   177e0:	................
   177f0:	 ...............
	...
   17870:	....Infinity....
   17880:	NaN.....

00017888 <__mprec_tens>:
   17888:	.......?......$@
   17898:	......Y@.....@.@
   178a8:	.......@.....j.@
   178b8:	.......A......cA
   178c8:	.......A....e..A
   178d8:	... _..B....vH7B
   178e8:	......mB..@..0.B
   178f8:	.......B..4&.k.C
   17908:	...7y.AC....W4vC
   17918:	..Ngm..C.=.`.X.C
   17928:	@..x...DP.....KD
   17938:	..M....D.J...-.D
   17948:	...yCx.D

00017950 <__mprec_bigtens>:
   17950:	...7y.AC.n.....F
   17960:	..?..O8M2.0.Hw.Z
   17970:	<.s..O.u

00017978 <p05.6087>:
   17978:	........}...

00017984 <_init>:
   17984:	push	{r3, r4, r5, r6, r7, lr}
   17986:	nop
   17988:	pop	{r3, r4, r5, r6, r7}
   1798a:	pop	{r3}
   1798c:	mov	lr, r3
   1798e:	bx	lr

00017990 <__init_array_start>:
   17990:	.word	0x00014f35

00017994 <__frame_dummy_init_array_entry>:
   17994:	5.......1z..

Disassembly of section .fini:

000179a0 <_fini>:
   179a0:	push	{r3, r4, r5, r6, r7, lr}
   179a2:	nop
